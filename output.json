{
    "Accctrl.h": [],
    "Accountssettingspaneinterop.h": [],
    "Aclapi.h": [
        {
            "signature": "void BuildExplicitAccessWithNameA( [in, out] PEXPLICIT_ACCESS_A pExplicitAccess, [in, optional] LPSTR pTrusteeName, [in] DWORD AccessPermissions, [in] ACCESS_MODE AccessMode, [in] DWORD Inheritance );",
            "name": "BuildExplicitAccessWithNameA"
        },
        {
            "signature": "void BuildExplicitAccessWithNameW( [in, out] PEXPLICIT_ACCESS_W pExplicitAccess, [in, optional] LPWSTR pTrusteeName, [in] DWORD AccessPermissions, [in] ACCESS_MODE AccessMode, [in] DWORD Inheritance );",
            "name": "BuildExplicitAccessWithNameW"
        },
        {
            "signature": "DWORD BuildSecurityDescriptorA( [in, optional] PTRUSTEE_A pOwner, [in, optional] PTRUSTEE_A pGroup, [in] ULONG cCountOfAccessEntries, [in, optional] PEXPLICIT_ACCESS_A pListOfAccessEntries, [in] ULONG cCountOfAuditEntries, [in, optional] PEXPLICIT_ACCESS_A pListOfAuditEntries, [in, optional] PSECURITY_DESCRIPTOR pOldSD, [out] PULONG pSizeNewSD, [out] PSECURITY_DESCRIPTOR *pNewSD );",
            "name": "BuildSecurityDescriptorA"
        },
        {
            "signature": "DWORD BuildSecurityDescriptorW( [in, optional] PTRUSTEE_W pOwner, [in, optional] PTRUSTEE_W pGroup, [in] ULONG cCountOfAccessEntries, [in, optional] PEXPLICIT_ACCESS_W pListOfAccessEntries, [in] ULONG cCountOfAuditEntries, [in, optional] PEXPLICIT_ACCESS_W pListOfAuditEntries, [in, optional] PSECURITY_DESCRIPTOR pOldSD, [out] PULONG pSizeNewSD, [out] PSECURITY_DESCRIPTOR *pNewSD );",
            "name": "BuildSecurityDescriptorW"
        },
        {
            "signature": "void BuildTrusteeWithNameA( [in, out] PTRUSTEE_A pTrustee, [in, optional] LPSTR pName );",
            "name": "BuildTrusteeWithNameA"
        },
        {
            "signature": "void BuildTrusteeWithNameW( [in, out] PTRUSTEE_W pTrustee, [in, optional] LPWSTR pName );",
            "name": "BuildTrusteeWithNameW"
        },
        {
            "signature": "void BuildTrusteeWithObjectsAndNameA( [in, out] PTRUSTEE_A pTrustee, [in, optional] POBJECTS_AND_NAME_A pObjName, [in, optional] SE_OBJECT_TYPE ObjectType, [in, optional] LPSTR ObjectTypeName, [in, optional] LPSTR InheritedObjectTypeName, [in, optional] LPSTR Name );",
            "name": "BuildTrusteeWithObjectsAndNameA"
        },
        {
            "signature": "void BuildTrusteeWithObjectsAndNameW( [in, out] PTRUSTEE_W pTrustee, [in, optional] POBJECTS_AND_NAME_W pObjName, [in, optional] SE_OBJECT_TYPE ObjectType, [in, optional] LPWSTR ObjectTypeName, [in, optional] LPWSTR InheritedObjectTypeName, [in, optional] LPWSTR Name );",
            "name": "BuildTrusteeWithObjectsAndNameW"
        },
        {
            "signature": "void BuildTrusteeWithObjectsAndSidA( [in, out] PTRUSTEE_A pTrustee, [in, optional] POBJECTS_AND_SID pObjSid, [in, optional] GUID *pObjectGuid, [in, optional] GUID *pInheritedObjectGuid, [in, optional] PSID pSid );",
            "name": "BuildTrusteeWithObjectsAndSidA"
        },
        {
            "signature": "void BuildTrusteeWithObjectsAndSidW( [in, out] PTRUSTEE_W pTrustee, [in, optional] POBJECTS_AND_SID pObjSid, [in, optional] GUID *pObjectGuid, [in, optional] GUID *pInheritedObjectGuid, [in, optional] PSID pSid );",
            "name": "BuildTrusteeWithObjectsAndSidW"
        },
        {
            "signature": "void BuildTrusteeWithSidA( [in, out] PTRUSTEE_A pTrustee, [in, optional] PSID pSid );",
            "name": "BuildTrusteeWithSidA"
        },
        {
            "signature": "void BuildTrusteeWithSidW( [in, out] PTRUSTEE_W pTrustee, [in, optional] PSID pSid );",
            "name": "BuildTrusteeWithSidW"
        },
        {
            "signature": "DWORD FreeInheritedFromArray( [in] PINHERITED_FROMW pInheritArray, [in] USHORT AceCnt, [in, optional] PFN_OBJECT_MGR_FUNCTS pfnArray );",
            "name": "FreeInheritedFromArray"
        },
        {
            "signature": "DWORD GetAuditedPermissionsFromAclA( [in] PACL pacl, [in] PTRUSTEE_A pTrustee, [out] PACCESS_MASK pSuccessfulAuditedRights, [out] PACCESS_MASK pFailedAuditRights );",
            "name": "GetAuditedPermissionsFromAclA"
        },
        {
            "signature": "DWORD GetAuditedPermissionsFromAclW( [in] PACL pacl, [in] PTRUSTEE_W pTrustee, [out] PACCESS_MASK pSuccessfulAuditedRights, [out] PACCESS_MASK pFailedAuditRights );",
            "name": "GetAuditedPermissionsFromAclW"
        },
        {
            "signature": "DWORD GetEffectiveRightsFromAclA( [in] PACL pacl, [in] PTRUSTEE_A pTrustee, [out] PACCESS_MASK pAccessRights );",
            "name": "GetEffectiveRightsFromAclA"
        },
        {
            "signature": "DWORD GetEffectiveRightsFromAclW( [in] PACL pacl, [in] PTRUSTEE_W pTrustee, [out] PACCESS_MASK pAccessRights );",
            "name": "GetEffectiveRightsFromAclW"
        },
        {
            "signature": "DWORD GetExplicitEntriesFromAclA( [in] PACL pacl, [out] PULONG pcCountOfExplicitEntries, [out] PEXPLICIT_ACCESS_A *pListOfExplicitEntries );",
            "name": "GetExplicitEntriesFromAclA"
        },
        {
            "signature": "DWORD GetExplicitEntriesFromAclW( [in] PACL pacl, [out] PULONG pcCountOfExplicitEntries, [out] PEXPLICIT_ACCESS_W *pListOfExplicitEntries );",
            "name": "GetExplicitEntriesFromAclW"
        },
        {
            "signature": "DWORD GetInheritanceSourceA( [in] LPSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in] BOOL Container, [in, optional] GUID **pObjectClassGuids, [in] DWORD GuidCount, [in] PACL pAcl, [in, optional] PFN_OBJECT_MGR_FUNCTS pfnArray, [in] PGENERIC_MAPPING pGenericMapping, [out] PINHERITED_FROMA pInheritArray );",
            "name": "GetInheritanceSourceA"
        },
        {
            "signature": "DWORD GetInheritanceSourceW( [in] LPWSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in] BOOL Container, [in, optional] GUID **pObjectClassGuids, [in] DWORD GuidCount, [in] PACL pAcl, [in, optional] PFN_OBJECT_MGR_FUNCTS pfnArray, [in] PGENERIC_MAPPING pGenericMapping, [out] PINHERITED_FROMW pInheritArray );",
            "name": "GetInheritanceSourceW"
        },
        {
            "signature": "DWORD GetNamedSecurityInfoA( [in] LPCSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [out, optional] PSID *ppsidOwner, [out, optional] PSID *ppsidGroup, [out, optional] PACL *ppDacl, [out, optional] PACL *ppSacl, [out, optional] PSECURITY_DESCRIPTOR *ppSecurityDescriptor );",
            "name": "GetNamedSecurityInfoA"
        },
        {
            "signature": "DWORD GetNamedSecurityInfoW( [in] LPCWSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [out, optional] PSID *ppsidOwner, [out, optional] PSID *ppsidGroup, [out, optional] PACL *ppDacl, [out, optional] PACL *ppSacl, [out, optional] PSECURITY_DESCRIPTOR *ppSecurityDescriptor );",
            "name": "GetNamedSecurityInfoW"
        },
        {
            "signature": "DWORD GetSecurityInfo( [in] HANDLE handle, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [out, optional] PSID *ppsidOwner, [out, optional] PSID *ppsidGroup, [out, optional] PACL *ppDacl, [out, optional] PACL *ppSacl, [out, optional] PSECURITY_DESCRIPTOR *ppSecurityDescriptor );",
            "name": "GetSecurityInfo"
        },
        {
            "signature": "TRUSTEE_FORM GetTrusteeFormA( [in] PTRUSTEE_A pTrustee );",
            "name": "GetTrusteeFormA"
        },
        {
            "signature": "TRUSTEE_FORM GetTrusteeFormW( [in] PTRUSTEE_W pTrustee );",
            "name": "GetTrusteeFormW"
        },
        {
            "signature": "LPSTR GetTrusteeNameA( [in] PTRUSTEE_A pTrustee );",
            "name": "GetTrusteeNameA"
        },
        {
            "signature": "LPWSTR GetTrusteeNameW( [in] PTRUSTEE_W pTrustee );",
            "name": "GetTrusteeNameW"
        },
        {
            "signature": "TRUSTEE_TYPE GetTrusteeTypeA( [in, optional] PTRUSTEE_A pTrustee );",
            "name": "GetTrusteeTypeA"
        },
        {
            "signature": "TRUSTEE_TYPE GetTrusteeTypeW( [in, optional] PTRUSTEE_W pTrustee );",
            "name": "GetTrusteeTypeW"
        },
        {
            "signature": "DWORD LookupSecurityDescriptorPartsA( [out, optional] PTRUSTEE_A *ppOwner, [out, optional] PTRUSTEE_A *ppGroup, [out, optional] PULONG pcCountOfAccessEntries, [out, optional] PEXPLICIT_ACCESS_A *ppListOfAccessEntries, [out, optional] PULONG pcCountOfAuditEntries, [out, optional] PEXPLICIT_ACCESS_A *ppListOfAuditEntries, [in] PSECURITY_DESCRIPTOR pSD );",
            "name": "LookupSecurityDescriptorPartsA"
        },
        {
            "signature": "DWORD LookupSecurityDescriptorPartsW( [out, optional] PTRUSTEE_W *ppOwner, [out, optional] PTRUSTEE_W *ppGroup, [out, optional] PULONG pcCountOfAccessEntries, [out, optional] PEXPLICIT_ACCESS_W *ppListOfAccessEntries, [out, optional] PULONG pcCountOfAuditEntries, [out, optional] PEXPLICIT_ACCESS_W *ppListOfAuditEntries, [in] PSECURITY_DESCRIPTOR pSD );",
            "name": "LookupSecurityDescriptorPartsW"
        },
        {
            "signature": "DWORD SetEntriesInAclA( [in] ULONG cCountOfExplicitEntries, [in, optional] PEXPLICIT_ACCESS_A pListOfExplicitEntries, [in, optional] PACL OldAcl, [out] PACL *NewAcl );",
            "name": "SetEntriesInAclA"
        },
        {
            "signature": "DWORD SetEntriesInAclW( [in] ULONG cCountOfExplicitEntries, [in, optional] PEXPLICIT_ACCESS_W pListOfExplicitEntries, [in, optional] PACL OldAcl, [out] PACL *NewAcl );",
            "name": "SetEntriesInAclW"
        },
        {
            "signature": "DWORD SetNamedSecurityInfoA( [in] LPSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID psidOwner, [in, optional] PSID psidGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl );",
            "name": "SetNamedSecurityInfoA"
        },
        {
            "signature": "DWORD SetNamedSecurityInfoW( [in] LPWSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID psidOwner, [in, optional] PSID psidGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl );",
            "name": "SetNamedSecurityInfoW"
        },
        {
            "signature": "DWORD SetSecurityInfo( [in] HANDLE handle, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID psidOwner, [in, optional] PSID psidGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl );",
            "name": "SetSecurityInfo"
        },
        {
            "signature": "DWORD TreeResetNamedSecurityInfoA( [in] LPSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID pOwner, [in, optional] PSID pGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl, [in] BOOL KeepExplicit, [in, optional] FN_PROGRESS fnProgress, [in] PROG_INVOKE_SETTING ProgressInvokeSetting, [in, optional] PVOID Args );",
            "name": "TreeResetNamedSecurityInfoA"
        },
        {
            "signature": "DWORD TreeResetNamedSecurityInfoW( [in] LPWSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID pOwner, [in, optional] PSID pGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl, [in] BOOL KeepExplicit, [in, optional] FN_PROGRESS fnProgress, [in] PROG_INVOKE_SETTING ProgressInvokeSetting, [in, optional] PVOID Args );",
            "name": "TreeResetNamedSecurityInfoW"
        },
        {
            "signature": "DWORD TreeSetNamedSecurityInfoA( [in] LPSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID pOwner, [in, optional] PSID pGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl, [in] DWORD dwAction, [in] FN_PROGRESS fnProgress, [in] PROG_INVOKE_SETTING ProgressInvokeSetting, [in, optional] PVOID Args );",
            "name": "TreeSetNamedSecurityInfoA"
        },
        {
            "signature": "DWORD TreeSetNamedSecurityInfoW( [in] LPWSTR pObjectName, [in] SE_OBJECT_TYPE ObjectType, [in] SECURITY_INFORMATION SecurityInfo, [in, optional] PSID pOwner, [in, optional] PSID pGroup, [in, optional] PACL pDacl, [in, optional] PACL pSacl, [in] DWORD dwAction, [in] FN_PROGRESS fnProgress, [in] PROG_INVOKE_SETTING ProgressInvokeSetting, [in, optional] PVOID Args );",
            "name": "TreeSetNamedSecurityInfoW"
        }
    ],
    "Aclui.h": [
        {
            "signature": "HPROPSHEETPAGE ACLUIAPI CreateSecurityPage( [in] LPSECURITYINFO psi );",
            "name": "CreateSecurityPage"
        },
        {
            "signature": "BOOL ACLUIAPI EditSecurity( [in] HWND hwndOwner, [in] LPSECURITYINFO psi );",
            "name": "EditSecurity"
        },
        {
            "signature": "HRESULT ACLUIAPI EditSecurityAdvanced( [in] HWND hwndOwner, [in] LPSECURITYINFO psi, [in] SI_PAGE_TYPE uSIPage );",
            "name": "EditSecurityAdvanced"
        }
    ],
    "Activation.h": [],
    "Activationregistration.h": [],
    "Activitycoordinator.h": [
        {
            "signature": "HRESULT CreateActivityCoordinatorPolicy( ACTIVITY_COORDINATOR_POLICY_TEMPLATE policyTemplate, ACTIVITY_COORDINATOR_POLICY *policy );",
            "name": "CreateActivityCoordinatorPolicy"
        },
        {
            "signature": "void DestroyActivityCoordinatorPolicy( ACTIVITY_COORDINATOR_POLICY policy );",
            "name": "DestroyActivityCoordinatorPolicy"
        },
        {
            "signature": "HRESULT GetActivityCoordinatorPolicyResourceCondition( ACTIVITY_COORDINATOR_POLICY policy, ACTIVITY_COORDINATOR_RESOURCE resource, ACTIVITY_COORDINATOR_CONDITION *condition );",
            "name": "GetActivityCoordinatorPolicyResourceCondition"
        },
        {
            "signature": "HRESULT SetActivityCoordinatorPolicyResourceCondition( ACTIVITY_COORDINATOR_POLICY policy, ACTIVITY_COORDINATOR_RESOURCE resource, ACTIVITY_COORDINATOR_CONDITION condition );",
            "name": "SetActivityCoordinatorPolicyResourceCondition"
        },
        {
            "signature": "HRESULT SubscribeActivityCoordinatorPolicy( ACTIVITY_COORDINATOR_POLICY policy, ACTIVITY_COORDINATOR_CALLBACK callback, void *callbackContext, ACTIVITY_COORDINATOR_SUBSCRIPTION *subscription );",
            "name": "SubscribeActivityCoordinatorPolicy"
        },
        {
            "signature": "HRESULT UnsubscribeActivityCoordinatorPolicy( ACTIVITY_COORDINATOR_SUBSCRIPTION subscription );",
            "name": "UnsubscribeActivityCoordinatorPolicy"
        }
    ],
    "Activitycoordinatortypes.h": [
        {
            "signature": "ACTIVITY_COORDINATOR_CALLBACK ActivityCoordinatorCallback; void ActivityCoordinatorCallback( ACTIVITY_COORDINATOR_NOTIFICATION notification, void *callbackContext ) {...}",
            "name": "ACTIVITY_COORDINATOR_CALLBACK callback"
        }
    ],
    "Adhoc.h": [],
    "Adshlp.h": [
        {
            "signature": "HRESULT ADsBuildEnumerator( [in] IADsContainer *pADsContainer, [out] IEnumVARIANT **ppEnumVariant );",
            "name": "ADsBuildEnumerator"
        },
        {
            "signature": "HRESULT ADsBuildVarArrayInt( [in] LPDWORD lpdwObjectTypes, [in] DWORD dwObjectTypes, [out] VARIANT *pVar );",
            "name": "ADsBuildVarArrayInt"
        },
        {
            "signature": "HRESULT ADsBuildVarArrayStr( [in] LPWSTR *lppPathNames, [in] DWORD dwPathNames, [out] VARIANT *pVar );",
            "name": "ADsBuildVarArrayStr"
        },
        {
            "signature": "HRESULT ADsEncodeBinaryData( [in] PBYTE pbSrcData, [in] DWORD dwSrcLen, [out] LPWSTR *ppszDestData );",
            "name": "ADsEncodeBinaryData"
        },
        {
            "signature": "HRESULT ADsEnumerateNext( [in] IEnumVARIANT *pEnumVariant, [in] ULONG cElements, [out] VARIANT *pvar, [out] ULONG *pcElementsFetched );",
            "name": "ADsEnumerateNext"
        },
        {
            "signature": "HRESULT ADsFreeEnumerator( [in] IEnumVARIANT *pEnumVariant );",
            "name": "ADsFreeEnumerator"
        },
        {
            "signature": "HRESULT ADsGetLastError( [out] LPDWORD lpError, [out] LPWSTR lpErrorBuf, [in] DWORD dwErrorBufLen, [out] LPWSTR lpNameBuf, [in] DWORD dwNameBufLen );",
            "name": "ADsGetLastError"
        },
        {
            "signature": "HRESULT ADsGetObject( [in] LPCWSTR lpszPathName, [in] REFIID riid, [out] VOID **ppObject );",
            "name": "ADsGetObject"
        },
        {
            "signature": "HRESULT ADsOpenObject( [in] LPCWSTR lpszPathName, [in] LPCWSTR lpszUserName, [in] LPCWSTR lpszPassword, [in] DWORD dwReserved, [in] REFIID riid, [out] void **ppObject );",
            "name": "ADsOpenObject"
        },
        {
            "signature": "void ADsSetLastError( [in] DWORD dwErr, [in] LPCWSTR pszError, [in] LPCWSTR pszProvider );",
            "name": "ADsSetLastError"
        },
        {
            "signature": "LPVOID AllocADsMem( [in] DWORD cb );",
            "name": "AllocADsMem"
        },
        {
            "signature": "LPWSTR AllocADsStr( [in] LPCWSTR pStr );",
            "name": "AllocADsStr"
        },
        {
            "signature": "HRESULT BinarySDToSecurityDescriptor( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] VARIANT *pVarsec, [in] LPCWSTR pszServerName, [in] LPCWSTR userName, [in] LPCWSTR passWord, [in] DWORD dwFlags );",
            "name": "BinarySDToSecurityDescriptor"
        },
        {
            "signature": "BOOL FreeADsMem( [in] LPVOID pMem );",
            "name": "FreeADsMem"
        },
        {
            "signature": "BOOL FreeADsStr( [in] LPWSTR pStr );",
            "name": "FreeADsStr"
        },
        {
            "signature": "LPVOID ReallocADsMem( [in] LPVOID pOldMem, [in] DWORD cbOld, [in] DWORD cbNew );",
            "name": "ReallocADsMem"
        },
        {
            "signature": "BOOL ReallocADsStr( [out] LPWSTR *ppStr, [in] LPWSTR pStr );",
            "name": "ReallocADsStr"
        },
        {
            "signature": "HRESULT SecurityDescriptorToBinarySD( [in] VARIANT vVarSecDes, [out] PSECURITY_DESCRIPTOR *ppSecurityDescriptor, [out] PDWORD pdwSDLength, [in] LPCWSTR pszServerName, [in] LPCWSTR userName, [in] LPCWSTR passWord, [in] DWORD dwFlags );",
            "name": "SecurityDescriptorToBinarySD"
        }
    ],
    "Adsprop.h": [
        {
            "signature": "BOOL ADsPropCheckIfWritable( [in] const PWSTR pwzAttr, [in] const PADS_ATTR_INFO pWritableAttrs );",
            "name": "ADsPropCheckIfWritable"
        },
        {
            "signature": "HRESULT ADsPropCreateNotifyObj( [in] LPDATAOBJECT pAppThdDataObj, [in] PWSTR pwzADsObjName, [out] HWND *phNotifyObj );",
            "name": "ADsPropCreateNotifyObj"
        },
        {
            "signature": "BOOL ADsPropGetInitInfo( [in] HWND hNotifyObj, [out] PADSPROPINITPARAMS pInitParams );",
            "name": "ADsPropGetInitInfo"
        },
        {
            "signature": "BOOL ADsPropSendErrorMessage( [in] HWND hNotifyObj, [out] PADSPROPERROR pError );",
            "name": "ADsPropSendErrorMessage"
        },
        {
            "signature": "BOOL ADsPropSetHwnd( [in] HWND hNotifyObj, [in] HWND hPage );",
            "name": "ADsPropSetHwnd"
        },
        {
            "signature": "BOOL ADsPropSetHwndWithTitle( [in] HWND hNotifyObj, [in] HWND hPage, [in] PTSTR ptzTitle );",
            "name": "ADsPropSetHwndWithTitle"
        },
        {
            "signature": "BOOL ADsPropShowErrorDialog( [in] HWND hNotifyObj, [in] HWND hPage );",
            "name": "ADsPropShowErrorDialog"
        }
    ],
    "Adtgen.h": [],
    "Advpub.h": [
        {
            "signature": "HRESULT RegInstallA( HMODULE hmod, LPCSTR pszSection, const STRTABLEA *pstTable );",
            "name": "RegInstallA"
        },
        {
            "signature": "HRESULT RegInstallW( HMODULE hmod, LPCWSTR pszSection, const STRTABLEW *pstTable );",
            "name": "RegInstallW"
        }
    ],
    "Af_irda.h": [],
    "Amsi.h": [
        {
            "signature": "void AmsiCloseSession( [in] HAMSICONTEXT amsiContext, [in] HAMSISESSION amsiSession );",
            "name": "AmsiCloseSession"
        },
        {
            "signature": "HRESULT AmsiInitialize( [in] LPCWSTR appName, [out] HAMSICONTEXT *amsiContext );",
            "name": "AmsiInitialize"
        },
        {
            "signature": "HRESULT AmsiNotifyOperation( HAMSICONTEXT amsiContext, PVOID buffer, ULONG length, LPCWSTR contentName, AMSI_RESULT *result );",
            "name": "AmsiNotifyOperation"
        },
        {
            "signature": "HRESULT AmsiOpenSession( [in] HAMSICONTEXT amsiContext, [out] HAMSISESSION *amsiSession );",
            "name": "AmsiOpenSession"
        },
        {
            "signature": "HRESULT AmsiScanBuffer( [in] HAMSICONTEXT amsiContext, [in] PVOID buffer, [in] ULONG length, [in] LPCWSTR contentName, [in, optional] HAMSISESSION amsiSession, [out] AMSI_RESULT *result );",
            "name": "AmsiScanBuffer"
        },
        {
            "signature": "HRESULT AmsiScanString( [in] HAMSICONTEXT amsiContext, [in] LPCWSTR string, [in] LPCWSTR contentName, [in, optional] HAMSISESSION amsiSession, [out] AMSI_RESULT *result );",
            "name": "AmsiScanString"
        },
        {
            "signature": "void AmsiUninitialize( [in] HAMSICONTEXT amsiContext );",
            "name": "AmsiUninitialize"
        }
    ],
    "Apiquery2.h": [
        {
            "signature": "APICONTRACT BOOL IsApiSetImplemented( PCSTR Contract );",
            "name": "IsApiSetImplemented"
        }
    ],
    "Appcompatapi.h": [
        {
            "signature": "BOOL SDBAPI ApphelpCheckShellObject( [in] REFCLSID ObjectCLSID, [in] BOOL bShimIfNecessary, [out] ULONGLONG *pullFlags );",
            "name": "ApphelpCheckShellObject"
        }
    ],
    "Appmgmt.h": [
        {
            "signature": "DWORD GetLocalManagedApplications( [in] BOOL bUserApps, [out] LPDWORD pdwApps, [out] PLOCALMANAGEDAPPLICATION *prgLocalApps );",
            "name": "GetLocalManagedApplications"
        },
        {
            "signature": "DWORD GetManagedApplicationCategories( [out] DWORD dwReserved, [out] APPCATEGORYINFOLIST *pAppCategory );",
            "name": "GetManagedApplicationCategories"
        },
        {
            "signature": "DWORD GetManagedApplications( [in] GUID *pCategory, [in] DWORD dwQueryFlags, [in] DWORD dwInfoLevel, [out] LPDWORD pdwApps, [out] PMANAGEDAPPLICATION *prgManagedApps );",
            "name": "GetManagedApplications"
        },
        {
            "signature": "DWORD InstallApplication( [in] PINSTALLDATA pInstallInfo );",
            "name": "InstallApplication"
        },
        {
            "signature": "DWORD UninstallApplication( [in] LPWSTR ProductCode, [in] DWORD dwStatus );",
            "name": "UninstallApplication"
        }
    ],
    "Appmodel.h": [
        {
            "signature": "HRESULT AddPackageDependency( PCWSTR packageDependencyId, INT32 rank, AddPackageDependencyOptions options, PACKAGEDEPENDENCY_CONTEXT *packageDependencyContext, PWSTR *packageFullName );",
            "name": "AddPackageDependency"
        },
        {
            "signature": "LONG AppPolicyGetClrCompat( [in] HANDLE processToken, [out] AppPolicyClrCompat *policy );",
            "name": "AppPolicyGetClrCompat"
        },
        {
            "signature": "LONG AppPolicyGetCreateFileAccess( [in] HANDLE processToken, [out] AppPolicyCreateFileAccess *policy );",
            "name": "AppPolicyGetCreateFileAccess"
        },
        {
            "signature": "LONG AppPolicyGetLifecycleManagement( [in] HANDLE processToken, [out] AppPolicyLifecycleManagement *policy );",
            "name": "AppPolicyGetLifecycleManagement"
        },
        {
            "signature": "LONG AppPolicyGetMediaFoundationCodecLoading( [in] HANDLE processToken, [out] AppPolicyMediaFoundationCodecLoading *policy );",
            "name": "AppPolicyGetMediaFoundationCodecLoading"
        },
        {
            "signature": "LONG AppPolicyGetProcessTerminationMethod( [in] HANDLE processToken, [out] AppPolicyProcessTerminationMethod *policy );",
            "name": "AppPolicyGetProcessTerminationMethod"
        },
        {
            "signature": "LONG AppPolicyGetShowDeveloperDiagnostic( [in] HANDLE processToken, [out] AppPolicyShowDeveloperDiagnostic *policy );",
            "name": "AppPolicyGetShowDeveloperDiagnostic"
        },
        {
            "signature": "LONG AppPolicyGetThreadInitializationType( [in] HANDLE processToken, [out] AppPolicyThreadInitializationType *policy );",
            "name": "AppPolicyGetThreadInitializationType"
        },
        {
            "signature": "LONG AppPolicyGetWindowingModel( [in] HANDLE processToken, [out] AppPolicyWindowingModel *policy );",
            "name": "AppPolicyGetWindowingModel"
        },
        {
            "signature": "LONG ClosePackageInfo( [in] PACKAGE_INFO_REFERENCE packageInfoReference );",
            "name": "ClosePackageInfo"
        },
        {
            "signature": "HRESULT DeletePackageDependency( PCWSTR packageDependencyId );",
            "name": "DeletePackageDependency"
        },
        {
            "signature": "LONG FindPackagesByPackageFamily( [in] PCWSTR packageFamilyName, [in] UINT32 packageFilters, [in, out] UINT32 *count, [out, optional] PWSTR *packageFullNames, [in, out] UINT32 *bufferLength, [out, optional] WCHAR *buffer, [out, optional] UINT32 *packageProperties );",
            "name": "FindPackagesByPackageFamily"
        },
        {
            "signature": "LONG FormatApplicationUserModelId( [in] PCWSTR packageFamilyName, [in] PCWSTR packageRelativeApplicationId, [in, out] UINT32 *applicationUserModelIdLength, [out, optional] PWSTR applicationUserModelId );",
            "name": "FormatApplicationUserModelId"
        },
        {
            "signature": "LONG GetApplicationUserModelId( [in] HANDLE hProcess, [in, out] UINT32 *applicationUserModelIdLength, [out] PWSTR applicationUserModelId );",
            "name": "GetApplicationUserModelId"
        },
        {
            "signature": "LONG GetApplicationUserModelIdFromToken( [in] HANDLE token, [in, out] UINT32 *applicationUserModelIdLength, [out] PWSTR applicationUserModelId );",
            "name": "GetApplicationUserModelIdFromToken"
        },
        {
            "signature": "LONG GetCurrentApplicationUserModelId( [in, out] UINT32 *applicationUserModelIdLength, [out] PWSTR applicationUserModelId );",
            "name": "GetCurrentApplicationUserModelId"
        },
        {
            "signature": "LONG GetCurrentPackageFamilyName( [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName );",
            "name": "GetCurrentPackageFamilyName"
        },
        {
            "signature": "LONG GetCurrentPackageFullName( [in, out] UINT32 *packageFullNameLength, [out, optional] PWSTR packageFullName );",
            "name": "GetCurrentPackageFullName"
        },
        {
            "signature": "LONG GetCurrentPackageId( [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer );",
            "name": "GetCurrentPackageId"
        },
        {
            "signature": "LONG GetCurrentPackageInfo( [in] const UINT32 flags, [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer, [out, optional] UINT32 *count );",
            "name": "GetCurrentPackageInfo"
        },
        {
            "signature": "LONG GetCurrentPackageInfo2( const UINT32 flags, PackagePathType packagePathType, UINT32 *bufferLength, BYTE *buffer, UINT32 *count );",
            "name": "GetCurrentPackageInfo2"
        },
        {
            "signature": "LONG GetCurrentPackagePath( [in, out] UINT32 *pathLength, [out, optional] PWSTR path );",
            "name": "GetCurrentPackagePath"
        },
        {
            "signature": "LONG GetCurrentPackagePath2( PackagePathType packagePathType, UINT32 *pathLength, PWSTR path );",
            "name": "GetCurrentPackagePath2"
        },
        {
            "signature": "HRESULT GetIdForPackageDependencyContext( PACKAGEDEPENDENCY_CONTEXT packageDependencyContext, PWSTR *packageDependencyId );",
            "name": "GetIdForPackageDependencyContext"
        },
        {
            "signature": "LONG GetPackageApplicationIds( [in] PACKAGE_INFO_REFERENCE packageInfoReference, [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer, [out, optional] UINT32 *count );",
            "name": "GetPackageApplicationIds"
        },
        {
            "signature": "LONG GetPackageFamilyName( [in] HANDLE hProcess, [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName );",
            "name": "GetPackageFamilyName"
        },
        {
            "signature": "LONG GetPackageFamilyNameFromToken( [in] HANDLE token, [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName );",
            "name": "GetPackageFamilyNameFromToken"
        },
        {
            "signature": "LONG GetPackageFullName( [in] HANDLE hProcess, [in, out] UINT32 *packageFullNameLength, [out, optional] PWSTR packageFullName );",
            "name": "GetPackageFullName"
        },
        {
            "signature": "LONG GetPackageFullNameFromToken( [in] HANDLE token, [in, out] UINT32 *packageFullNameLength, [out, optional] PWSTR packageFullName );",
            "name": "GetPackageFullNameFromToken"
        },
        {
            "signature": "LONG GetPackageId( [in] HANDLE hProcess, [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer );",
            "name": "GetPackageId"
        },
        {
            "signature": "LONG GetPackageInfo( [in] PACKAGE_INFO_REFERENCE packageInfoReference, [in] const UINT32 flags, [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer, [out, optional] UINT32 *count );",
            "name": "GetPackageInfo"
        },
        {
            "signature": "LONG GetPackageInfo2( PACKAGE_INFO_REFERENCE packageInfoReference, const UINT32 flags, PackagePathType packagePathType, UINT32 *bufferLength, BYTE *buffer, UINT32 *count );",
            "name": "GetPackageInfo2"
        },
        {
            "signature": "LONG GetPackagePath( [in] const PACKAGE_ID *packageId, const UINT32 reserved, [in, out] UINT32 *pathLength, [out, optional] PWSTR path );",
            "name": "GetPackagePath"
        },
        {
            "signature": "LONG GetPackagePathByFullName( [in] PCWSTR packageFullName, [in, out] UINT32 *pathLength, [out, optional] PWSTR path );",
            "name": "GetPackagePathByFullName"
        },
        {
            "signature": "LONG GetPackagePathByFullName2( PCWSTR packageFullName, PackagePathType packagePathType, UINT32 *pathLength, PWSTR path );",
            "name": "GetPackagePathByFullName2"
        },
        {
            "signature": "LONG GetPackagesByPackageFamily( [in] PCWSTR packageFamilyName, [in, out] UINT32 *count, [out, optional] PWSTR *packageFullNames, [in, out] UINT32 *bufferLength, [out, optional] WCHAR *buffer );",
            "name": "GetPackagesByPackageFamily"
        },
        {
            "signature": "HRESULT GetResolvedPackageFullNameForPackageDependency( PCWSTR packageDependencyId, PWSTR *packageFullName );",
            "name": "GetResolvedPackageFullNameForPackageDependency"
        },
        {
            "signature": "LONG GetStagedPackageOrigin( [in] PCWSTR packageFullName, [out] PackageOrigin *origin );",
            "name": "GetStagedPackageOrigin"
        },
        {
            "signature": "LONG GetStagedPackagePathByFullName( [in] PCWSTR packageFullName, [in, out] UINT32 *pathLength, [out, optional] PWSTR path );",
            "name": "GetStagedPackagePathByFullName"
        },
        {
            "signature": "LONG GetStagedPackagePathByFullName2( PCWSTR packageFullName, PackagePathType packagePathType, UINT32 *pathLength, PWSTR path );",
            "name": "GetStagedPackagePathByFullName2"
        },
        {
            "signature": "LONG OpenPackageInfoByFullName( [in] PCWSTR packageFullName, const UINT32 reserved, [out] PACKAGE_INFO_REFERENCE *packageInfoReference );",
            "name": "OpenPackageInfoByFullName"
        },
        {
            "signature": "LONG PackageFamilyNameFromFullName( [in] PCWSTR packageFullName, [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName );",
            "name": "PackageFamilyNameFromFullName"
        },
        {
            "signature": "LONG PackageFamilyNameFromId( [in] const PACKAGE_ID *packageId, [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName );",
            "name": "PackageFamilyNameFromId"
        },
        {
            "signature": "LONG PackageFullNameFromId( [in] const PACKAGE_ID *packageId, [in, out] UINT32 *packageFullNameLength, [out, optional] PWSTR packageFullName );",
            "name": "PackageFullNameFromId"
        },
        {
            "signature": "LONG PackageIdFromFullName( [in] PCWSTR packageFullName, [in] const UINT32 flags, [in, out] UINT32 *bufferLength, [out, optional] BYTE *buffer );",
            "name": "PackageIdFromFullName"
        },
        {
            "signature": "LONG PackageNameAndPublisherIdFromFamilyName( [in] PCWSTR packageFamilyName, [in, out] UINT32 *packageNameLength, [out, optional] PWSTR packageName, [in, out] UINT32 *packagePublisherIdLength, [out, optional] PWSTR packagePublisherId );",
            "name": "PackageNameAndPublisherIdFromFamilyName"
        },
        {
            "signature": "LONG ParseApplicationUserModelId( [in] PCWSTR applicationUserModelId, [in, out] UINT32 *packageFamilyNameLength, [out, optional] PWSTR packageFamilyName, [in, out] UINT32 *packageRelativeApplicationIdLength, [out, optional] PWSTR packageRelativeApplicationId );",
            "name": "ParseApplicationUserModelId"
        },
        {
            "signature": "HRESULT RemovePackageDependency( PACKAGEDEPENDENCY_CONTEXT packageDependencyContext );",
            "name": "RemovePackageDependency"
        },
        {
            "signature": "HRESULT TryCreatePackageDependency( PSID user, PCWSTR packageFamilyName, PACKAGE_VERSION minVersion, PackageDependencyProcessorArchitectures packageDependencyProcessorArchitectures, PackageDependencyLifetimeKind lifetimeKind, PCWSTR lifetimeArtifact, CreatePackageDependencyOptions options, PWSTR *packageDependencyId );",
            "name": "TryCreatePackageDependency"
        }
    ],
    "Appnotify.h": [
        {
            "signature": "PAPPSTATE_CHANGE_ROUTINE PappstateChangeRoutine; void PappstateChangeRoutine( BOOLEAN Quiesced, [in] PVOID Context ) {...}",
            "name": "PAPPSTATE_CHANGE_ROUTINE callback"
        },
        {
            "signature": "APICONTRACT ULONG RegisterAppStateChangeNotification( [in] PAPPSTATE_CHANGE_ROUTINE Routine, [in, optional] PVOID Context, [out] PAPPSTATE_REGISTRATION *Registration );",
            "name": "RegisterAppStateChangeNotification"
        },
        {
            "signature": "APICONTRACT VOID UnregisterAppStateChangeNotification( [in, out] PAPPSTATE_REGISTRATION Registration );",
            "name": "UnregisterAppStateChangeNotification"
        }
    ],
    "Appxpackaging.h": [],
    "Asyncinfo.h": [],
    "Atacct.h": [
        {
            "signature": "HRESULT GetNetScheduleAccountInformation( [in] LPCWSTR pwszServerName, [in] DWORD ccAccount, [out] WCHAR [] wszAccount );",
            "name": "GetNetScheduleAccountInformation"
        },
        {
            "signature": "HRESULT SetNetScheduleAccountInformation( [in] LPCWSTR pwszServerName, [in] LPCWSTR pwszAccount, [in] LPCWSTR pwszPassword );",
            "name": "SetNetScheduleAccountInformation"
        }
    ],
    "Atlthunk.h": [
        {
            "signature": "AtlThunkData_t * AtlThunk_AllocateData();",
            "name": "AtlThunk_AllocateData"
        },
        {
            "signature": "WNDPROC AtlThunk_DataToCode( AtlThunkData_t *unnamedParam1 );",
            "name": "AtlThunk_DataToCode"
        },
        {
            "signature": "void AtlThunk_FreeData( AtlThunkData_t *Thunk );",
            "name": "AtlThunk_FreeData"
        },
        {
            "signature": "void AtlThunk_InitData( AtlThunkData_t *Thunk, void *Proc, size_t FirstParameter );",
            "name": "AtlThunk_InitData"
        }
    ],
    "Audioapotypes.h": [],
    "Audioclient.h": [],
    "Audioclientactivationparams.h": [],
    "Audioendpoints.h": [],
    "Audioenginebaseapo.h": [],
    "Audioengineendpoint.h": [],
    "Audioengineextensionapo.h": [],
    "Audiomediatype.h": [
        {
            "signature": "HRESULT CreateAudioMediaType( const WAVEFORMATEX *pAudioFormat, UINT32 cbAudioFormatSize, IAudioMediaType **ppIAudioMediaType );",
            "name": "CreateAudioMediaType"
        },
        {
            "signature": "HRESULT CreateAudioMediaTypeFromUncompressedAudioFormat( const UNCOMPRESSEDAUDIOFORMAT *pUncompressedAudioFormat, IAudioMediaType **ppIAudioMediaType );",
            "name": "CreateAudioMediaTypeFromUncompressedAudioFormat"
        }
    ],
    "Audiopolicy.h": [],
    "Audiosessiontypes.h": [],
    "Authif.h": [
        {
            "signature": "PRADIUS_EXTENSION_FREE_ATTRIBUTES PradiusExtensionFreeAttributes; void PradiusExtensionFreeAttributes( PRADIUS_ATTRIBUTE pAttrs ) {...}",
            "name": "PRADIUS_EXTENSION_FREE_ATTRIBUTES callback"
        },
        {
            "signature": "PRADIUS_EXTENSION_INIT PradiusExtensionInit; DWORD PradiusExtensionInit() {...}",
            "name": "PRADIUS_EXTENSION_INIT callback"
        },
        {
            "signature": "PRADIUS_EXTENSION_PROCESS PradiusExtensionProcess; DWORD PradiusExtensionProcess( [in] const RADIUS_ATTRIBUTE *pAttrs, [out] PRADIUS_ACTION pfAction ) {...}",
            "name": "PRADIUS_EXTENSION_PROCESS callback"
        },
        {
            "signature": "PRADIUS_EXTENSION_PROCESS_2 PradiusExtensionProcess2; DWORD PradiusExtensionProcess2( [in, out] PRADIUS_EXTENSION_CONTROL_BLOCK pECB ) {...}",
            "name": "PRADIUS_EXTENSION_PROCESS_2 callback"
        },
        {
            "signature": "PRADIUS_EXTENSION_PROCESS_EX PradiusExtensionProcessEx; DWORD PradiusExtensionProcessEx( [in] const RADIUS_ATTRIBUTE *pInAttrs, [out] PRADIUS_ATTRIBUTE *pOutAttrs, [out] PRADIUS_ACTION pfAction ) {...}",
            "name": "PRADIUS_EXTENSION_PROCESS_EX callback"
        },
        {
            "signature": "PRADIUS_EXTENSION_TERM PradiusExtensionTerm; void PradiusExtensionTerm() {...}",
            "name": "PRADIUS_EXTENSION_TERM callback"
        }
    ],
    "Authz.h": [
        {
            "signature": "AUTHZAPI BOOL AuthzAccessCheck( [in] DWORD Flags, [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] PAUTHZ_ACCESS_REQUEST pRequest, [in, optional] AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, optional] PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray, [in, optional] DWORD OptionalSecurityDescriptorCount, [in, out] PAUTHZ_ACCESS_REPLY pReply, [out, optional] PAUTHZ_ACCESS_CHECK_RESULTS_HANDLE phAccessCheckResults );",
            "name": "AuthzAccessCheck"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzAddSidsToContext( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] PSID_AND_ATTRIBUTES Sids, [in] DWORD SidCount, [in] PSID_AND_ATTRIBUTES RestrictedSids, [in] DWORD RestrictedSidCount, [out] PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext );",
            "name": "AuthzAddSidsToContext"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzCachedAccessCheck( [in] DWORD Flags, [in] AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults, [in] PAUTHZ_ACCESS_REQUEST pRequest, [in] AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, [out] PAUTHZ_ACCESS_REPLY pReply );",
            "name": "AuthzCachedAccessCheck"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzEnumerateSecurityEventSources( [in] DWORD dwFlags, [out] PAUTHZ_SOURCE_SCHEMA_REGISTRATION Buffer, [out] PDWORD pdwCount, [in, out] PDWORD pdwLength );",
            "name": "AuthzEnumerateSecurityEventSources"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzFreeAuditEvent( [in] AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent );",
            "name": "AuthzFreeAuditEvent"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzFreeCentralAccessPolicyCache();",
            "name": "AuthzFreeCentralAccessPolicyCache"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzFreeContext( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext );",
            "name": "AuthzFreeContext"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzFreeHandle( [in] AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults );",
            "name": "AuthzFreeHandle"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzFreeResourceManager( [in] AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager );",
            "name": "AuthzFreeResourceManager"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzGetInformationFromContext( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass, [in] DWORD BufferSize, [out] PDWORD pSizeRequired, [out] PVOID Buffer );",
            "name": "AuthzGetInformationFromContext"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeCompoundContext( [in] AUTHZ_CLIENT_CONTEXT_HANDLE UserContext, [in] AUTHZ_CLIENT_CONTEXT_HANDLE DeviceContext, [out] PAUTHZ_CLIENT_CONTEXT_HANDLE phCompoundContext );",
            "name": "AuthzInitializeCompoundContext"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeContextFromAuthzContext( [in] DWORD Flags, [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in, optional] PLARGE_INTEGER pExpirationTime, [in] LUID Identifier, [in] PVOID DynamicGroupArgs, [out] PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext );",
            "name": "AuthzInitializeContextFromAuthzContext"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeContextFromSid( [in] DWORD Flags, [in] PSID UserSid, [in, optional] AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, [in] PLARGE_INTEGER pExpirationTime, [in] LUID Identifier, [in, optional] PVOID DynamicGroupArgs, [out] PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext );",
            "name": "AuthzInitializeContextFromSid"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeContextFromToken( [in] DWORD Flags, [in] HANDLE TokenHandle, [in] AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, [in, optional] PLARGE_INTEGER pExpirationTime, [in] LUID Identifier, [in, optional] PVOID DynamicGroupArgs, [out] PAUTHZ_CLIENT_CONTEXT_HANDLE phAuthzClientContext );",
            "name": "AuthzInitializeContextFromToken"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeObjectAccessAuditEvent( [in] DWORD Flags, [in] AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, [in] PWSTR szOperationType, [in] PWSTR szObjectType, [in] PWSTR szObjectName, [in] PWSTR szAdditionalInfo, [out] PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, [in] DWORD dwAdditionalParameterCount, ... );",
            "name": "AuthzInitializeObjectAccessAuditEvent"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeObjectAccessAuditEvent2( [in] DWORD Flags, [in] AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, [in] PWSTR szOperationType, [in] PWSTR szObjectType, [in] PWSTR szObjectName, [in] PWSTR szAdditionalInfo, [in] PWSTR szAdditionalInfo2, [out] PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, [in] DWORD dwAdditionalParameterCount, ... );",
            "name": "AuthzInitializeObjectAccessAuditEvent2"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeRemoteResourceManager( [in] PAUTHZ_RPC_INIT_INFO_CLIENT pRpcInitInfo, [out] PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager );",
            "name": "AuthzInitializeRemoteResourceManager"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeResourceManager( [in] DWORD Flags, [in, optional] PFN_AUTHZ_DYNAMIC_ACCESS_CHECK pfnDynamicAccessCheck, [in, optional] PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS pfnComputeDynamicGroups, [in, optional] PFN_AUTHZ_FREE_DYNAMIC_GROUPS pfnFreeDynamicGroups, [in] PCWSTR szResourceManagerName, [out] PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager );",
            "name": "AuthzInitializeResourceManager"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInitializeResourceManagerEx( [in, optional] DWORD Flags, [in, optional] PAUTHZ_INIT_INFO pAuthzInitInfo, [out] PAUTHZ_RESOURCE_MANAGER_HANDLE phAuthzResourceManager );",
            "name": "AuthzInitializeResourceManagerEx"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzInstallSecurityEventSource( [in] DWORD dwFlags, [in] PAUTHZ_SOURCE_SCHEMA_REGISTRATION pRegistration );",
            "name": "AuthzInstallSecurityEventSource"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzModifyClaims( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] AUTHZ_CONTEXT_INFORMATION_CLASS ClaimClass, [in] PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pClaimOperations, [in, optional] PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pClaims );",
            "name": "AuthzModifyClaims"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzModifySecurityAttributes( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pOperations, [in] PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION pAttributes );",
            "name": "AuthzModifySecurityAttributes"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzModifySids( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] AUTHZ_CONTEXT_INFORMATION_CLASS SidClass, [in] PAUTHZ_SID_OPERATION pSidOperations, [in, optional] PTOKEN_GROUPS pSids );",
            "name": "AuthzModifySids"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzOpenObjectAudit( [in] DWORD Flags, [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] PAUTHZ_ACCESS_REQUEST pRequest, [in] AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray, [in] DWORD OptionalSecurityDescriptorCount, [in] PAUTHZ_ACCESS_REPLY pReply );",
            "name": "AuthzOpenObjectAudit"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzRegisterCapChangeNotification( [out] PAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE phCapChangeSubscription, [in] LPTHREAD_START_ROUTINE pfnCapChangeCallback, [in, optional] PVOID pCallbackContext );",
            "name": "AuthzRegisterCapChangeNotification"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzRegisterSecurityEventSource( [in] DWORD dwFlags, [in] PCWSTR szEventSourceName, [out] PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider );",
            "name": "AuthzRegisterSecurityEventSource"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzReportSecurityEvent( [in] DWORD dwFlags, [in, out] AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, [in] DWORD dwAuditId, [in, optional] PSID pUserSid, [in] DWORD dwCount, ... );",
            "name": "AuthzReportSecurityEvent"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzReportSecurityEventFromParams( [in] DWORD dwFlags, [in] AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, [in] DWORD dwAuditId, [in, optional] PSID pUserSid, [in] PAUDIT_PARAMS pParams );",
            "name": "AuthzReportSecurityEventFromParams"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzSetAppContainerInformation( [in] AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, [in] PSID pAppContainerSid, [in] DWORD CapabilityCount, [in, optional] PSID_AND_ATTRIBUTES pCapabilitySids );",
            "name": "AuthzSetAppContainerInformation"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzUninstallSecurityEventSource( [in] DWORD dwFlags, [in] PCWSTR szEventSourceName );",
            "name": "AuthzUninstallSecurityEventSource"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzUnregisterCapChangeNotification( [in] AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE hCapChangeSubscription );",
            "name": "AuthzUnregisterCapChangeNotification"
        },
        {
            "signature": "AUTHZAPI BOOL AuthzUnregisterSecurityEventSource( [in] DWORD dwFlags, [in, out] PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider );",
            "name": "AuthzUnregisterSecurityEventSource"
        }
    ],
    "Aux_ulib.h": [
        {
            "signature": "BOOL AuxUlibInitialize();",
            "name": "AuxUlibInitialize"
        },
        {
            "signature": "BOOL AuxUlibIsDLLSynchronizationHeld( [out] PBOOL SynchronizationHeld );",
            "name": "AuxUlibIsDLLSynchronizationHeld"
        },
        {
            "signature": "BOOL AuxUlibSetSystemFileCacheSize( [in] SIZE_T MinimumFileCacheSize, [in] SIZE_T MaximumFileCacheSize, [in] DWORD Flags );",
            "name": "AuxUlibSetSystemFileCacheSize"
        }
    ],
    "Avrfsdk.h": [
        {
            "signature": "AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK AvrfHandleoperationEnumerateCallback; ULONG AvrfHandleoperationEnumerateCallback( PAVRF_HANDLE_OPERATION HandleOperation, PVOID EnumerationContext, PULONG EnumerationLevel ) {...}",
            "name": "AVRF_HANDLEOPERATION_ENUMERATE_CALLBACK callback"
        },
        {
            "signature": "AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK AvrfHeapallocationEnumerateCallback; ULONG AvrfHeapallocationEnumerateCallback( PAVRF_HEAP_ALLOCATION HeapAllocation, PVOID EnumerationContext, PULONG EnumerationLevel ) {...}",
            "name": "AVRF_HEAPALLOCATION_ENUMERATE_CALLBACK callback"
        },
        {
            "signature": "AVRF_RESOURCE_ENUMERATE_CALLBACK AvrfResourceEnumerateCallback; ULONG AvrfResourceEnumerateCallback( PVOID ResourceDescription, PVOID EnumerationContext, PULONG EnumerationLevel ) {...}",
            "name": "AVRF_RESOURCE_ENUMERATE_CALLBACK callback"
        },
        {
            "signature": "ULONG VerifierEnumerateResource( HANDLE Process, ULONG Flags, ULONG ResourceType, AVRF_RESOURCE_ENUMERATE_CALLBACK ResourceCallback, PVOID EnumerationContext );",
            "name": "VerifierEnumerateResource"
        },
        {
            "signature": "BOOL VerifierIsPerUserSettingsEnabled();",
            "name": "VerifierIsPerUserSettingsEnabled"
        }
    ],
    "Avrt.h": [
        {
            "signature": "AVRTAPI BOOL AvQuerySystemResponsiveness( [in] HANDLE AvrtHandle, [out] PULONG SystemResponsivenessValue );",
            "name": "AvQuerySystemResponsiveness"
        },
        {
            "signature": "AVRTAPI BOOL AvRevertMmThreadCharacteristics( [in] HANDLE AvrtHandle );",
            "name": "AvRevertMmThreadCharacteristics"
        },
        {
            "signature": "AVRTAPI BOOL AvRtCreateThreadOrderingGroup( [out] PHANDLE Context, [in] PLARGE_INTEGER Period, [in, out] GUID *ThreadOrderingGuid, [in, optional] PLARGE_INTEGER Timeout );",
            "name": "AvRtCreateThreadOrderingGroup"
        },
        {
            "signature": "AVRTAPI BOOL AvRtCreateThreadOrderingGroupExA( [out] PHANDLE Context, [in] PLARGE_INTEGER Period, [in, out] GUID *ThreadOrderingGuid, [in, optional] PLARGE_INTEGER Timeout, [in] LPCSTR TaskName );",
            "name": "AvRtCreateThreadOrderingGroupExA"
        },
        {
            "signature": "AVRTAPI BOOL AvRtCreateThreadOrderingGroupExW( [out] PHANDLE Context, [in] PLARGE_INTEGER Period, [in, out] GUID *ThreadOrderingGuid, [in, optional] PLARGE_INTEGER Timeout, [in] LPCWSTR TaskName );",
            "name": "AvRtCreateThreadOrderingGroupExW"
        },
        {
            "signature": "AVRTAPI BOOL AvRtDeleteThreadOrderingGroup( [in] HANDLE Context );",
            "name": "AvRtDeleteThreadOrderingGroup"
        },
        {
            "signature": "AVRTAPI BOOL AvRtJoinThreadOrderingGroup( [out] PHANDLE Context, [in] GUID *ThreadOrderingGuid, [in] BOOL Before );",
            "name": "AvRtJoinThreadOrderingGroup"
        },
        {
            "signature": "AVRTAPI BOOL AvRtLeaveThreadOrderingGroup( [in] HANDLE Context );",
            "name": "AvRtLeaveThreadOrderingGroup"
        },
        {
            "signature": "AVRTAPI BOOL AvRtWaitOnThreadOrderingGroup( [in] HANDLE Context );",
            "name": "AvRtWaitOnThreadOrderingGroup"
        },
        {
            "signature": "AVRTAPI HANDLE AvSetMmMaxThreadCharacteristicsA( [in] LPCSTR FirstTask, [in] LPCSTR SecondTask, [in, out] LPDWORD TaskIndex );",
            "name": "AvSetMmMaxThreadCharacteristicsA"
        },
        {
            "signature": "AVRTAPI HANDLE AvSetMmMaxThreadCharacteristicsW( [in] LPCWSTR FirstTask, [in] LPCWSTR SecondTask, [in, out] LPDWORD TaskIndex );",
            "name": "AvSetMmMaxThreadCharacteristicsW"
        },
        {
            "signature": "AVRTAPI HANDLE AvSetMmThreadCharacteristicsA( [in] LPCSTR TaskName, [in, out] LPDWORD TaskIndex );",
            "name": "AvSetMmThreadCharacteristicsA"
        },
        {
            "signature": "AVRTAPI HANDLE AvSetMmThreadCharacteristicsW( [in] LPCWSTR TaskName, [in, out] LPDWORD TaskIndex );",
            "name": "AvSetMmThreadCharacteristicsW"
        },
        {
            "signature": "AVRTAPI BOOL AvSetMmThreadPriority( [in] HANDLE AvrtHandle, [in] AVRT_PRIORITY Priority );",
            "name": "AvSetMmThreadPriority"
        }
    ],
    "Azroles.h": [],
    "Baseaudioprocessingobject.h": [
        {
            "signature": "HRESULT AERT_Allocate( size_t size, void **pMemory );",
            "name": "AERT_Allocate"
        },
        {
            "signature": "HRESULT AERT_Free( void *pMemory );",
            "name": "AERT_Free"
        }
    ],
    "Batclass.h": [
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassInitializeDevice( [in] PBATTERY_MINIPORT_INFO MiniportInfo, [out] PVOID *ClassData );",
            "name": "BatteryClassInitializeDevice"
        },
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassIoctl( [in] PVOID ClassData, [in, out] PIRP Irp );",
            "name": "BatteryClassIoctl"
        },
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassQueryWmiDataBlock( [in] PVOID ClassData, [in, out] PDEVICE_OBJECT DeviceObject, [in, out] PIRP Irp, [in] ULONG GuidIndex, [out] PULONG InstanceLengthArray, [in] ULONG OutBufferSize, [out, optional] PUCHAR Buffer );",
            "name": "BatteryClassQueryWmiDataBlock"
        },
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassStatusNotify( [in] PVOID ClassData );",
            "name": "BatteryClassStatusNotify"
        },
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassSystemControl( [in] PVOID ClassData, [in] PVOID WmiLibContext, [in] PDEVICE_OBJECT DeviceObject, [in, out] PIRP Irp, [out] PVOID Disposition );",
            "name": "BatteryClassSystemControl"
        },
        {
            "signature": "NTSTATUS BATTERYCLASSAPI BatteryClassUnload( [in] PVOID ClassData );",
            "name": "BatteryClassUnload"
        },
        {
            "signature": "BCLASS_DISABLE_STATUS_NOTIFY_CALLBACK BclassDisableStatusNotifyCallback; NTSTATUS BclassDisableStatusNotifyCallback( [in] PVOID Context ) {...}",
            "name": "BCLASS_DISABLE_STATUS_NOTIFY_CALLBACK callback"
        },
        {
            "signature": "BCLASS_QUERY_INFORMATION_CALLBACK BclassQueryInformationCallback; NTSTATUS BclassQueryInformationCallback( [in] PVOID Context, [in] ULONG BatteryTag, [in] BATTERY_QUERY_INFORMATION_LEVEL Level, [in] LONG AtRate, [out] PVOID Buffer, [in] ULONG BufferLength, [out] PULONG ReturnedLength ) {...}",
            "name": "BCLASS_QUERY_INFORMATION_CALLBACK callback"
        },
        {
            "signature": "BCLASS_QUERY_STATUS_CALLBACK BclassQueryStatusCallback; NTSTATUS BclassQueryStatusCallback( [in] PVOID Context, [in] ULONG BatteryTag, [out] PBATTERY_STATUS BatteryStatus ) {...}",
            "name": "BCLASS_QUERY_STATUS_CALLBACK callback"
        },
        {
            "signature": "BCLASS_QUERY_TAG_CALLBACK BclassQueryTagCallback; NTSTATUS BclassQueryTagCallback( [in] PVOID Context, [out] PULONG BatteryTag ) {...}",
            "name": "BCLASS_QUERY_TAG_CALLBACK callback"
        },
        {
            "signature": "BCLASS_SET_INFORMATION_CALLBACK BclassSetInformationCallback; NTSTATUS BclassSetInformationCallback( [in] PVOID Context, [in] ULONG BatteryTag, [in] BATTERY_SET_INFORMATION_LEVEL Level, [in] PVOID Buffer ) {...}",
            "name": "BCLASS_SET_INFORMATION_CALLBACK callback"
        },
        {
            "signature": "BCLASS_SET_STATUS_NOTIFY_CALLBACK BclassSetStatusNotifyCallback; NTSTATUS BclassSetStatusNotifyCallback( [in] PVOID Context, [in] ULONG BatteryTag, [in] PBATTERY_NOTIFY BatteryNotify ) {...}",
            "name": "BCLASS_SET_STATUS_NOTIFY_CALLBACK callback"
        }
    ],
    "Bcp47mrm.h": [
        {
            "signature": "HRESULT GetDistanceOfClosestLanguageInList( PCWSTR pszLanguage, PCWSTR pszLanguagesList, wchar_t wchListDelimiter, double *pClosestDistance );",
            "name": "GetDistanceOfClosestLanguageInList"
        },
        {
            "signature": "bool IsWellFormedTag( PCWSTR pszTag );",
            "name": "IsWellFormedTag"
        }
    ],
    "Bcrypt.h": [
        {
            "signature": "NTSTATUS BCryptAddContextFunction( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in] ULONG dwPosition );",
            "name": "BCryptAddContextFunction"
        },
        {
            "signature": "NTSTATUS BCryptCloseAlgorithmProvider( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [in] ULONG dwFlags );",
            "name": "BCryptCloseAlgorithmProvider"
        },
        {
            "signature": "NTSTATUS BCryptConfigureContext( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] PCRYPT_CONTEXT_CONFIG pConfig );",
            "name": "BCryptConfigureContext"
        },
        {
            "signature": "NTSTATUS BCryptConfigureContextFunction( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in] PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig );",
            "name": "BCryptConfigureContextFunction"
        },
        {
            "signature": "NTSTATUS BCryptCreateContext( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in, optional] PCRYPT_CONTEXT_CONFIG pConfig );",
            "name": "BCryptCreateContext"
        },
        {
            "signature": "NTSTATUS BCryptCreateHash( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [out] BCRYPT_HASH_HANDLE *phHash, [out] PUCHAR pbHashObject, [in, optional] ULONG cbHashObject, [in, optional] PUCHAR pbSecret, [in] ULONG cbSecret, [in] ULONG dwFlags );",
            "name": "BCryptCreateHash"
        },
        {
            "signature": "NTSTATUS BCryptCreateMultiHash( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [out] BCRYPT_HASH_HANDLE *phHash, [in] ULONG nHashes, [out] PUCHAR pbHashObject, [in] ULONG cbHashObject, [in] PUCHAR pbSecret, [in] ULONG cbSecret, [in] ULONG dwFlags );",
            "name": "BCryptCreateMultiHash"
        },
        {
            "signature": "NTSTATUS BCryptDecrypt( [in, out] BCRYPT_KEY_HANDLE hKey, [in] PUCHAR pbInput, [in] ULONG cbInput, [in, optional] VOID *pPaddingInfo, [in, out, optional] PUCHAR pbIV, [in] ULONG cbIV, [out, optional] PUCHAR pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptDecrypt"
        },
        {
            "signature": "NTSTATUS BCryptDeleteContext( [in] ULONG dwTable, [in] LPCWSTR pszContext );",
            "name": "BCryptDeleteContext"
        },
        {
            "signature": "NTSTATUS BCryptDeriveKey( [in] BCRYPT_SECRET_HANDLE hSharedSecret, [in] LPCWSTR pwszKDF, [in, optional] BCryptBufferDesc *pParameterList, [out, optional] PUCHAR pbDerivedKey, [in] ULONG cbDerivedKey, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptDeriveKey"
        },
        {
            "signature": "NTSTATUS BCryptDeriveKeyCapi( [in] BCRYPT_HASH_HANDLE hHash, [in, optional] BCRYPT_ALG_HANDLE hTargetAlg, [out] PUCHAR pbDerivedKey, [in] ULONG cbDerivedKey, [in] ULONG dwFlags );",
            "name": "BCryptDeriveKeyCapi"
        },
        {
            "signature": "NTSTATUS BCryptDeriveKeyPBKDF2( [in] BCRYPT_ALG_HANDLE hPrf, [in, optional] PUCHAR pbPassword, [in] ULONG cbPassword, [in, optional] PUCHAR pbSalt, [in] ULONG cbSalt, [in] ULONGLONG cIterations, [out] PUCHAR pbDerivedKey, [in] ULONG cbDerivedKey, [in] ULONG dwFlags );",
            "name": "BCryptDeriveKeyPBKDF2"
        },
        {
            "signature": "NTSTATUS BCryptDestroyHash( [in, out] BCRYPT_HASH_HANDLE hHash );",
            "name": "BCryptDestroyHash"
        },
        {
            "signature": "NTSTATUS BCryptDestroyKey( [in, out] BCRYPT_KEY_HANDLE hKey );",
            "name": "BCryptDestroyKey"
        },
        {
            "signature": "NTSTATUS BCryptDestroySecret( [in] BCRYPT_SECRET_HANDLE hSecret );",
            "name": "BCryptDestroySecret"
        },
        {
            "signature": "NTSTATUS BCryptDuplicateHash( [in] BCRYPT_HASH_HANDLE hHash, [out] BCRYPT_HASH_HANDLE *phNewHash, [out] PUCHAR pbHashObject, [in] ULONG cbHashObject, [in] ULONG dwFlags );",
            "name": "BCryptDuplicateHash"
        },
        {
            "signature": "NTSTATUS BCryptDuplicateKey( [in] BCRYPT_KEY_HANDLE hKey, [out] BCRYPT_KEY_HANDLE *phNewKey, [out] PUCHAR pbKeyObject, [in] ULONG cbKeyObject, [in] ULONG dwFlags );",
            "name": "BCryptDuplicateKey"
        },
        {
            "signature": "NTSTATUS BCryptEncrypt( [in, out] BCRYPT_KEY_HANDLE hKey, [in] PUCHAR pbInput, [in] ULONG cbInput, [in, optional] VOID *pPaddingInfo, [in, out, optional] PUCHAR pbIV, [in] ULONG cbIV, [out, optional] PUCHAR pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptEncrypt"
        },
        {
            "signature": "NTSTATUS BCryptEnumAlgorithms( [in] ULONG dwAlgOperations, [out] ULONG *pAlgCount, [out] BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, [in] ULONG dwFlags );",
            "name": "BCryptEnumAlgorithms"
        },
        {
            "signature": "NTSTATUS BCryptEnumContextFunctionProviders( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer );",
            "name": "BCryptEnumContextFunctionProviders"
        },
        {
            "signature": "NTSTATUS BCryptEnumContextFunctions( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_CONTEXT_FUNCTIONS *ppBuffer );",
            "name": "BCryptEnumContextFunctions"
        },
        {
            "signature": "NTSTATUS BCryptEnumContexts( [in] ULONG dwTable, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_CONTEXTS *ppBuffer );",
            "name": "BCryptEnumContexts"
        },
        {
            "signature": "NTSTATUS BCryptEnumProviders( [in] LPCWSTR pszAlgId, [out] ULONG *pImplCount, [out] BCRYPT_PROVIDER_NAME **ppImplList, [in] ULONG dwFlags );",
            "name": "BCryptEnumProviders"
        },
        {
            "signature": "NTSTATUS BCryptEnumRegisteredProviders( [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_PROVIDERS *ppBuffer );",
            "name": "BCryptEnumRegisteredProviders"
        },
        {
            "signature": "NTSTATUS BCryptExportKey( [in] BCRYPT_KEY_HANDLE hKey, [in] BCRYPT_KEY_HANDLE hExportKey, [in] LPCWSTR pszBlobType, [out] PUCHAR pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptExportKey"
        },
        {
            "signature": "NTSTATUS BCryptFinalizeKeyPair( [in, out] BCRYPT_KEY_HANDLE hKey, [in] ULONG dwFlags );",
            "name": "BCryptFinalizeKeyPair"
        },
        {
            "signature": "NTSTATUS BCryptFinishHash( [in, out] BCRYPT_HASH_HANDLE hHash, [out] PUCHAR pbOutput, [in] ULONG cbOutput, [in] ULONG dwFlags );",
            "name": "BCryptFinishHash"
        },
        {
            "signature": "void BCryptFreeBuffer( [in] PVOID pvBuffer );",
            "name": "BCryptFreeBuffer"
        },
        {
            "signature": "NTSTATUS BCryptGenerateKeyPair( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [out] BCRYPT_KEY_HANDLE *phKey, [in] ULONG dwLength, [in] ULONG dwFlags );",
            "name": "BCryptGenerateKeyPair"
        },
        {
            "signature": "NTSTATUS BCryptGenerateSymmetricKey( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [out] BCRYPT_KEY_HANDLE *phKey, [out, optional] PUCHAR pbKeyObject, [in] ULONG cbKeyObject, [in] PUCHAR pbSecret, [in] ULONG cbSecret, [in] ULONG dwFlags );",
            "name": "BCryptGenerateSymmetricKey"
        },
        {
            "signature": "NTSTATUS BCryptGenRandom( [in, out] BCRYPT_ALG_HANDLE hAlgorithm, [in, out] PUCHAR pbBuffer, [in] ULONG cbBuffer, [in] ULONG dwFlags );",
            "name": "BCryptGenRandom"
        },
        {
            "signature": "NTSTATUS BCryptGetFipsAlgorithmMode( [out] BOOLEAN *pfEnabled );",
            "name": "BCryptGetFipsAlgorithmMode"
        },
        {
            "signature": "NTSTATUS BCryptGetProperty( [in] BCRYPT_HANDLE hObject, [in] LPCWSTR pszProperty, [out] PUCHAR pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptGetProperty"
        },
        {
            "signature": "NTSTATUS BCryptHash( BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput );",
            "name": "BCryptHash"
        },
        {
            "signature": "NTSTATUS BCryptHashData( [in, out] BCRYPT_HASH_HANDLE hHash, [in] PUCHAR pbInput, [in] ULONG cbInput, [in] ULONG dwFlags );",
            "name": "BCryptHashData"
        },
        {
            "signature": "NTSTATUS BCryptImportKey( [in] BCRYPT_ALG_HANDLE hAlgorithm, [in, optional] BCRYPT_KEY_HANDLE hImportKey, [in] LPCWSTR pszBlobType, [out] BCRYPT_KEY_HANDLE *phKey, [out, optional] PUCHAR pbKeyObject, [in] ULONG cbKeyObject, [in] PUCHAR pbInput, [in] ULONG cbInput, [in] ULONG dwFlags );",
            "name": "BCryptImportKey"
        },
        {
            "signature": "NTSTATUS BCryptImportKeyPair( [in] BCRYPT_ALG_HANDLE hAlgorithm, [in, out] BCRYPT_KEY_HANDLE hImportKey, [in] LPCWSTR pszBlobType, [out] BCRYPT_KEY_HANDLE *phKey, [in] PUCHAR pbInput, [in] ULONG cbInput, [in] ULONG dwFlags );",
            "name": "BCryptImportKeyPair"
        },
        {
            "signature": "NTSTATUS BCryptKeyDerivation( [in] BCRYPT_KEY_HANDLE hKey, [in, optional] BCryptBufferDesc *pParameterList, [out] PUCHAR pbDerivedKey, [in] ULONG cbDerivedKey, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptKeyDerivation"
        },
        {
            "signature": "NTSTATUS BCryptOpenAlgorithmProvider( [out] BCRYPT_ALG_HANDLE *phAlgorithm, [in] LPCWSTR pszAlgId, [in] LPCWSTR pszImplementation, [in] ULONG dwFlags );",
            "name": "BCryptOpenAlgorithmProvider"
        },
        {
            "signature": "NTSTATUS BCryptProcessMultiOperations( [in, out] BCRYPT_HANDLE hObject, [in] BCRYPT_MULTI_OPERATION_TYPE operationType, [in] PVOID pOperations, [in] ULONG cbOperations, [in] ULONG dwFlags );",
            "name": "BCryptProcessMultiOperations"
        },
        {
            "signature": "NTSTATUS BCryptQueryContextConfiguration( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_CONTEXT_CONFIG *ppBuffer );",
            "name": "BCryptQueryContextConfiguration"
        },
        {
            "signature": "NTSTATUS BCryptQueryContextFunctionConfiguration( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer );",
            "name": "BCryptQueryContextFunctionConfiguration"
        },
        {
            "signature": "NTSTATUS BCryptQueryContextFunctionProperty( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in] LPCWSTR pszProperty, [in, out] ULONG *pcbValue, [in, out] PUCHAR *ppbValue );",
            "name": "BCryptQueryContextFunctionProperty"
        },
        {
            "signature": "NTSTATUS BCryptQueryProviderRegistration( [in] LPCWSTR pszProvider, [in] ULONG dwMode, [in] ULONG dwInterface, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_PROVIDER_REG *ppBuffer );",
            "name": "BCryptQueryProviderRegistration"
        },
        {
            "signature": "NTSTATUS BCryptRegisterConfigChangeNotify( [out] PRKEVENT pEvent );",
            "name": "BCryptRegisterConfigChangeNotify"
        },
        {
            "signature": "NTSTATUS BCryptRegisterConfigChangeNotify( [in] HANDLE *phEvent );",
            "name": "BCryptRegisterConfigChangeNotify"
        },
        {
            "signature": "NTSTATUS BCryptRemoveContextFunction( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction );",
            "name": "BCryptRemoveContextFunction"
        },
        {
            "signature": "NTSTATUS BCryptResolveProviders( [in, optional] LPCWSTR pszContext, [in, optional] ULONG dwInterface, [in, optional] LPCWSTR pszFunction, [in, optional] LPCWSTR pszProvider, [in] ULONG dwMode, [in] ULONG dwFlags, [in, out] ULONG *pcbBuffer, [in, out] PCRYPT_PROVIDER_REFS *ppBuffer );",
            "name": "BCryptResolveProviders"
        },
        {
            "signature": "NTSTATUS BCryptSecretAgreement( [in] BCRYPT_KEY_HANDLE hPrivKey, [in] BCRYPT_KEY_HANDLE hPubKey, [out] BCRYPT_SECRET_HANDLE *phAgreedSecret, [in] ULONG dwFlags );",
            "name": "BCryptSecretAgreement"
        },
        {
            "signature": "NTSTATUS BCryptSetContextFunctionProperty( [in] ULONG dwTable, [in] LPCWSTR pszContext, [in] ULONG dwInterface, [in] LPCWSTR pszFunction, [in] LPCWSTR pszProperty, [in] ULONG cbValue, [in] PUCHAR pbValue );",
            "name": "BCryptSetContextFunctionProperty"
        },
        {
            "signature": "NTSTATUS BCryptSetProperty( [in, out] BCRYPT_HANDLE hObject, [in] LPCWSTR pszProperty, [in] PUCHAR pbInput, [in] ULONG cbInput, [in] ULONG dwFlags );",
            "name": "BCryptSetProperty"
        },
        {
            "signature": "NTSTATUS BCryptSignHash( [in] BCRYPT_KEY_HANDLE hKey, [in, optional] VOID *pPaddingInfo, [in] PUCHAR pbInput, [in] ULONG cbInput, [out] PUCHAR pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult, [in] ULONG dwFlags );",
            "name": "BCryptSignHash"
        },
        {
            "signature": "NTSTATUS BCryptUnregisterConfigChangeNotify( [in] PRKEVENT pEvent );",
            "name": "BCryptUnregisterConfigChangeNotify"
        },
        {
            "signature": "NTSTATUS BCryptUnregisterConfigChangeNotify( HANDLE hEvent );",
            "name": "BCryptUnregisterConfigChangeNotify"
        },
        {
            "signature": "NTSTATUS BCryptVerifySignature( [in] BCRYPT_KEY_HANDLE hKey, [in, optional] VOID *pPaddingInfo, [in] PUCHAR pbHash, [in] ULONG cbHash, [in] PUCHAR pbSignature, [in] ULONG cbSignature, [in] ULONG dwFlags );",
            "name": "BCryptVerifySignature"
        }
    ],
    "Bits.h": [],
    "Bits10_1.h": [],
    "Bits10_2.h": [],
    "Bits10_3.h": [],
    "Bits1_5.h": [],
    "Bits2_0.h": [],
    "Bits2_5.h": [],
    "Bits3_0.h": [],
    "Bits4_0.h": [],
    "Bits5_0.h": [],
    "Bitscfg.h": [],
    "Bluetoothapis.h": [
        {
            "signature": "DWORD BluetoothAuthenticateDevice( HWND hwndParent, HANDLE hRadio, BLUETOOTH_DEVICE_INFO *pbtbi, PWSTR pszPasskey, ULONG ulPasskeyLength );",
            "name": "BluetoothAuthenticateDevice"
        },
        {
            "signature": "DWORD BluetoothAuthenticateDeviceEx( [in, optional] HWND hwndParentIn, [in, optional] HANDLE hRadioIn, [in, out] BLUETOOTH_DEVICE_INFO *pbtdiInout, [in, optional] PBLUETOOTH_OOB_DATA_INFO pbtOobData, [in] AUTHENTICATION_REQUIREMENTS authenticationRequirement );",
            "name": "BluetoothAuthenticateDeviceEx"
        },
        {
            "signature": "DWORD BluetoothAuthenticateMultipleDevices( HWND hwndParent, HANDLE hRadio, DWORD cDevices, BLUETOOTH_DEVICE_INFO *rgbtdi );",
            "name": "BluetoothAuthenticateMultipleDevices"
        },
        {
            "signature": "BOOL BluetoothDisplayDeviceProperties( HWND hwndParent, BLUETOOTH_DEVICE_INFO *pbtdi );",
            "name": "BluetoothDisplayDeviceProperties"
        },
        {
            "signature": "BOOL BluetoothEnableDiscovery( HANDLE hRadio, BOOL fEnabled );",
            "name": "BluetoothEnableDiscovery"
        },
        {
            "signature": "BOOL BluetoothEnableIncomingConnections( HANDLE hRadio, BOOL fEnabled );",
            "name": "BluetoothEnableIncomingConnections"
        },
        {
            "signature": "DWORD BluetoothEnumerateInstalledServices( HANDLE hRadio, const BLUETOOTH_DEVICE_INFO *pbtdi, DWORD *pcServiceInout, GUID *pGuidServices );",
            "name": "BluetoothEnumerateInstalledServices"
        },
        {
            "signature": "BOOL BluetoothFindDeviceClose( HBLUETOOTH_DEVICE_FIND hFind );",
            "name": "BluetoothFindDeviceClose"
        },
        {
            "signature": "HBLUETOOTH_DEVICE_FIND BluetoothFindFirstDevice( const BLUETOOTH_DEVICE_SEARCH_PARAMS *pbtsp, BLUETOOTH_DEVICE_INFO *pbtdi );",
            "name": "BluetoothFindFirstDevice"
        },
        {
            "signature": "HBLUETOOTH_RADIO_FIND BluetoothFindFirstRadio( const BLUETOOTH_FIND_RADIO_PARAMS *pbtfrp, [out] HANDLE *phRadio );",
            "name": "BluetoothFindFirstRadio"
        },
        {
            "signature": "BOOL BluetoothFindNextDevice( HBLUETOOTH_DEVICE_FIND hFind, BLUETOOTH_DEVICE_INFO *pbtdi );",
            "name": "BluetoothFindNextDevice"
        },
        {
            "signature": "BOOL BluetoothFindNextRadio( [in] HBLUETOOTH_RADIO_FIND hFind, [out] HANDLE *phRadio );",
            "name": "BluetoothFindNextRadio"
        },
        {
            "signature": "BOOL BluetoothFindRadioClose( HBLUETOOTH_RADIO_FIND hFind );",
            "name": "BluetoothFindRadioClose"
        },
        {
            "signature": "DWORD BluetoothGetDeviceInfo( HANDLE hRadio, BLUETOOTH_DEVICE_INFO *pbtdi );",
            "name": "BluetoothGetDeviceInfo"
        },
        {
            "signature": "DWORD BluetoothGetRadioInfo( HANDLE hRadio, PBLUETOOTH_RADIO_INFO pRadioInfo );",
            "name": "BluetoothGetRadioInfo"
        },
        {
            "signature": "BOOL BluetoothIsConnectable( HANDLE hRadio );",
            "name": "BluetoothIsConnectable"
        },
        {
            "signature": "BOOL BluetoothIsDiscoverable( HANDLE hRadio );",
            "name": "BluetoothIsDiscoverable"
        },
        {
            "signature": "BOOL BluetoothIsVersionAvailable( [in] UCHAR MajorVersion, [in] UCHAR MinorVersion );",
            "name": "BluetoothIsVersionAvailable"
        },
        {
            "signature": "DWORD BluetoothRegisterForAuthentication( const BLUETOOTH_DEVICE_INFO *pbtdi, HBLUETOOTH_AUTHENTICATION_REGISTRATION *phRegHandle, PFN_AUTHENTICATION_CALLBACK pfnCallback, PVOID pvParam );",
            "name": "BluetoothRegisterForAuthentication"
        },
        {
            "signature": "DWORD BluetoothRegisterForAuthenticationEx( [in, optional] const BLUETOOTH_DEVICE_INFO *pbtdiIn, [out] HBLUETOOTH_AUTHENTICATION_REGISTRATION *phRegHandleOut, [in, optional] PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn, [in, optional] PVOID pvParam );",
            "name": "BluetoothRegisterForAuthenticationEx"
        },
        {
            "signature": "DWORD BluetoothRemoveDevice( const BLUETOOTH_ADDRESS *pAddress );",
            "name": "BluetoothRemoveDevice"
        },
        {
            "signature": "BOOL BluetoothSdpEnumAttributes( LPBYTE pSDPStream, ULONG cbStreamSize, PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback, LPVOID pvParam );",
            "name": "BluetoothSdpEnumAttributes"
        },
        {
            "signature": "DWORD BluetoothSdpGetAttributeValue( [in] LPBYTE pRecordStream, [in] ULONG cbRecordLength, [in] USHORT usAttributeId, [out] PSDP_ELEMENT_DATA pAttributeData );",
            "name": "BluetoothSdpGetAttributeValue"
        },
        {
            "signature": "DWORD BluetoothSdpGetContainerElementData( [in] LPBYTE pContainerStream, [in] ULONG cbContainerLength, [in, out] HBLUETOOTH_CONTAINER_ELEMENT *pElement, [out] PSDP_ELEMENT_DATA pData );",
            "name": "BluetoothSdpGetContainerElementData"
        },
        {
            "signature": "DWORD BluetoothSdpGetElementData( [in] LPBYTE pSdpStream, [in] ULONG cbSdpStreamLength, [out] PSDP_ELEMENT_DATA pData );",
            "name": "BluetoothSdpGetElementData"
        },
        {
            "signature": "DWORD BluetoothSdpGetString( [in] LPBYTE pRecordStream, [in] ULONG cbRecordLength, [in] const PSDP_STRING_TYPE_DATA pStringData, [in] USHORT usStringOffset, [out] PWSTR pszString, [in, out] PULONG pcchStringLength );",
            "name": "BluetoothSdpGetString"
        },
        {
            "signature": "BOOL BluetoothSelectDevices( BLUETOOTH_SELECT_DEVICE_PARAMS *pbtsdp );",
            "name": "BluetoothSelectDevices"
        },
        {
            "signature": "BOOL BluetoothSelectDevicesFree( BLUETOOTH_SELECT_DEVICE_PARAMS *pbtsdp );",
            "name": "BluetoothSelectDevicesFree"
        },
        {
            "signature": "DWORD BluetoothSendAuthenticationResponse( HANDLE hRadio, const BLUETOOTH_DEVICE_INFO *pbtdi, LPCWSTR pszPasskey );",
            "name": "BluetoothSendAuthenticationResponse"
        },
        {
            "signature": "DWORD BluetoothSendAuthenticationResponseEx( [in, optional] HANDLE hRadioIn, [in] PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse );",
            "name": "BluetoothSendAuthenticationResponseEx"
        },
        {
            "signature": "DWORD BluetoothSetLocalServiceInfo( [in, optional] HANDLE hRadioIn, [in] const GUID *pClassGuid, [in] ULONG ulInstance, [in] const BLUETOOTH_LOCAL_SERVICE_INFO *pServiceInfoIn );",
            "name": "BluetoothSetLocalServiceInfo"
        },
        {
            "signature": "DWORD BluetoothSetServiceState( HANDLE hRadio, const BLUETOOTH_DEVICE_INFO *pbtdi, const GUID *pGuidService, DWORD dwServiceFlags );",
            "name": "BluetoothSetServiceState"
        },
        {
            "signature": "BOOL BluetoothUnregisterAuthentication( HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle );",
            "name": "BluetoothUnregisterAuthentication"
        },
        {
            "signature": "DWORD BluetoothUpdateDeviceRecord( const BLUETOOTH_DEVICE_INFO *pbtdi );",
            "name": "BluetoothUpdateDeviceRecord"
        },
        {
            "signature": "PFN_AUTHENTICATION_CALLBACK PfnAuthenticationCallback; BOOL PfnAuthenticationCallback( LPVOID pvParam, PBLUETOOTH_DEVICE_INFO pDevice ) {...}",
            "name": "PFN_AUTHENTICATION_CALLBACK callback"
        },
        {
            "signature": "PFN_AUTHENTICATION_CALLBACK_EX PfnAuthenticationCallbackEx; BOOL PfnAuthenticationCallbackEx( [in, optional] LPVOID pvParam, [in] PBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS pAuthCallbackParams ) {...}",
            "name": "PFN_AUTHENTICATION_CALLBACK_EX callback"
        },
        {
            "signature": "PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK PfnBluetoothEnumAttributesCallback; BOOL PfnBluetoothEnumAttributesCallback( ULONG uAttribId, LPBYTE pValueStream, ULONG cbStreamSize, LPVOID pvParam ) {...}",
            "name": "PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK callback"
        },
        {
            "signature": "PFN_DEVICE_CALLBACK PfnDeviceCallback; BOOL PfnDeviceCallback( LPVOID pvParam, const BLUETOOTH_DEVICE_INFO *pDevice ) {...}",
            "name": "PFN_DEVICE_CALLBACK callback"
        }
    ],
    "Bluetoothleapis.h": [
        {
            "signature": "HRESULT BluetoothGATTAbortReliableWrite( [in] HANDLE hDevice, [in] BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext, [in] ULONG Flags );",
            "name": "BluetoothGATTAbortReliableWrite"
        },
        {
            "signature": "HRESULT BluetoothGATTBeginReliableWrite( [in] HANDLE hDevice, [out] PBTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext, [in] ULONG Flags );",
            "name": "BluetoothGATTBeginReliableWrite"
        },
        {
            "signature": "HRESULT BluetoothGATTEndReliableWrite( [in] HANDLE hDevice, [in] BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext, [in] ULONG Flags );",
            "name": "BluetoothGATTEndReliableWrite"
        },
        {
            "signature": "HRESULT BluetoothGATTGetCharacteristics( [in] HANDLE hDevice, [in, optional] PBTH_LE_GATT_SERVICE Service, [in] USHORT CharacteristicsBufferCount, [out, optional] PBTH_LE_GATT_CHARACTERISTIC CharacteristicsBuffer, [out] USHORT *CharacteristicsBufferActual, [in] ULONG Flags );",
            "name": "BluetoothGATTGetCharacteristics"
        },
        {
            "signature": "HRESULT BluetoothGATTGetCharacteristicValue( [in] HANDLE hDevice, [in] PBTH_LE_GATT_CHARACTERISTIC Characteristic, [in] ULONG CharacteristicValueDataSize, [out, optional] PBTH_LE_GATT_CHARACTERISTIC_VALUE CharacteristicValue, [out, optional] USHORT *CharacteristicValueSizeRequired, [in] ULONG Flags );",
            "name": "BluetoothGATTGetCharacteristicValue"
        },
        {
            "signature": "HRESULT BluetoothGATTGetDescriptors( [in] HANDLE hDevice, [in] PBTH_LE_GATT_CHARACTERISTIC Characteristic, [in] USHORT DescriptorsBufferCount, [out, optional] PBTH_LE_GATT_DESCRIPTOR DescriptorsBuffer, [out] USHORT *DescriptorsBufferActual, [in] ULONG Flags );",
            "name": "BluetoothGATTGetDescriptors"
        },
        {
            "signature": "HRESULT BluetoothGATTGetDescriptorValue( [in] HANDLE hDevice, [in] PBTH_LE_GATT_DESCRIPTOR Descriptor, [in] ULONG DescriptorValueDataSize, [out, optional] PBTH_LE_GATT_DESCRIPTOR_VALUE DescriptorValue, [out, optional] USHORT *DescriptorValueSizeRequired, [in] ULONG Flags );",
            "name": "BluetoothGATTGetDescriptorValue"
        },
        {
            "signature": "HRESULT BluetoothGATTGetIncludedServices( [in] HANDLE hDevice, [in, optional] PBTH_LE_GATT_SERVICE ParentService, [in] USHORT IncludedServicesBufferCount, [out, optional] PBTH_LE_GATT_SERVICE IncludedServicesBuffer, [out] USHORT *IncludedServicesBufferActual, [in] ULONG Flags );",
            "name": "BluetoothGATTGetIncludedServices"
        },
        {
            "signature": "HRESULT BluetoothGATTGetServices( [in] HANDLE hDevice, [in] USHORT ServicesBufferCount, [out, optional] PBTH_LE_GATT_SERVICE ServicesBuffer, [out] USHORT *ServicesBufferActual, [in] ULONG Flags );",
            "name": "BluetoothGATTGetServices"
        },
        {
            "signature": "HRESULT BluetoothGATTRegisterEvent( [in] HANDLE hService, [in] BTH_LE_GATT_EVENT_TYPE EventType, [in] PVOID EventParameterIn, [in] PFNBLUETOOTH_GATT_EVENT_CALLBACK Callback, [in, optional] PVOID CallbackContext, [out] BLUETOOTH_GATT_EVENT_HANDLE *pEventHandle, [in] ULONG Flags );",
            "name": "BluetoothGATTRegisterEvent"
        },
        {
            "signature": "HRESULT BluetoothGATTSetCharacteristicValue( [in] HANDLE hDevice, [in] PBTH_LE_GATT_CHARACTERISTIC Characteristic, [in] PBTH_LE_GATT_CHARACTERISTIC_VALUE CharacteristicValue, [in, optional] BTH_LE_GATT_RELIABLE_WRITE_CONTEXT ReliableWriteContext, [in] ULONG Flags );",
            "name": "BluetoothGATTSetCharacteristicValue"
        },
        {
            "signature": "HRESULT BluetoothGATTSetDescriptorValue( [in] HANDLE hDevice, [in] PBTH_LE_GATT_DESCRIPTOR Descriptor, [in] PBTH_LE_GATT_DESCRIPTOR_VALUE DescriptorValue, [in] ULONG Flags );",
            "name": "BluetoothGATTSetDescriptorValue"
        },
        {
            "signature": "HRESULT BluetoothGATTUnregisterEvent( [in] BLUETOOTH_GATT_EVENT_HANDLE EventHandle, [in] ULONG Flags );",
            "name": "BluetoothGATTUnregisterEvent"
        }
    ],
    "Bthdef.h": [],
    "Bthledef.h": [
        {
            "signature": "BOOLEAN IsBthLEUuidMatch( BTH_LE_UUID uuid1, BTH_LE_UUID uuid2 );",
            "name": "IsBthLEUuidMatch"
        },
        {
            "signature": "PFNBLUETOOTH_GATT_EVENT_CALLBACK PfnbluetoothGattEventCallback; void PfnbluetoothGattEventCallback( [in] BTH_LE_GATT_EVENT_TYPE EventType, [in] PVOID EventOutParameter, [in, optional] PVOID Context ) {...}",
            "name": "PFNBLUETOOTH_GATT_EVENT_CALLBACK callback"
        }
    ],
    "Bthsdpdef.h": [],
    "Callobj.h": [
        {
            "signature": "HRESULT CoGetInterceptor( [in] REFIID iidIntercepted, [in] IUnknown *punkOuter, [in] REFIID iid, [out] void **ppv );",
            "name": "CoGetInterceptor"
        }
    ],
    "Camerauicontrol.h": [],
    "Capi.h": [],
    "Casetup.h": [],
    "Ccgplugins.h": [],
    "Cchannel.h": [
        {
            "signature": "CHANNEL_INIT_EVENT_FN ChannelInitEventFn; VOID VCAPITYPE ChannelInitEventFn( [in] LPVOID pInitHandle, [in] UINT event, [in] LPVOID pData, [in] UINT dataLength ) {...}",
            "name": "CHANNEL_INIT_EVENT_FN callback"
        },
        {
            "signature": "CHANNEL_OPEN_EVENT_FN ChannelOpenEventFn; VOID VCAPITYPE ChannelOpenEventFn( [in] DWORD openHandle, [in] UINT event, [in] LPVOID pData, [in] UINT32 dataLength, [in] UINT32 totalLength, [in] UINT32 dataFlags ) {...}",
            "name": "CHANNEL_OPEN_EVENT_FN callback"
        },
        {
            "signature": "VIRTUALCHANNELCLOSE Virtualchannelclose; UINT VCAPITYPE Virtualchannelclose( [in] DWORD openHandle ) {...}",
            "name": "VIRTUALCHANNELCLOSE callback"
        },
        {
            "signature": "VIRTUALCHANNELENTRY Virtualchannelentry; BOOL VCAPITYPE Virtualchannelentry( [in] PCHANNEL_ENTRY_POINTS pEntryPoints ) {...}",
            "name": "VIRTUALCHANNELENTRY callback"
        },
        {
            "signature": "VIRTUALCHANNELINIT Virtualchannelinit; UINT VCAPITYPE Virtualchannelinit( [in] LPVOID *ppInitHandle, [in, out] PCHANNEL_DEF pChannel, [in] INT channelCount, [in] ULONG versionRequested, [in] PCHANNEL_INIT_EVENT_FN pChannelInitEventProc ) {...}",
            "name": "VIRTUALCHANNELINIT callback"
        },
        {
            "signature": "VIRTUALCHANNELOPEN Virtualchannelopen; UINT VCAPITYPE Virtualchannelopen( [in] LPVOID pInitHandle, [out] LPDWORD pOpenHandle, [in] PCHAR pChannelName, [in] PCHANNEL_OPEN_EVENT_FN pChannelOpenEventProc ) {...}",
            "name": "VIRTUALCHANNELOPEN callback"
        },
        {
            "signature": "VIRTUALCHANNELWRITE Virtualchannelwrite; UINT VCAPITYPE Virtualchannelwrite( [in] DWORD openHandle, [in] LPVOID pData, [in] ULONG dataLength, [in] LPVOID pUserData ) {...}",
            "name": "VIRTUALCHANNELWRITE callback"
        }
    ],
    "Celib.h": [],
    "Certadm.h": [],
    "Certbcli.h": [
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupClose( [in] HCSBC hbc );",
            "name": "CertSrvBackupClose"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupEnd( [in] HCSBC hbc );",
            "name": "CertSrvBackupEnd"
        },
        {
            "signature": "VOID CERTBCLI_API CertSrvBackupFree( [in] VOID *pv );",
            "name": "CertSrvBackupFree"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupGetBackupLogsW( [in] HCSBC hbc, [out] PWSTR *ppwszzBackupLogFiles, [out] DWORD *pcbSize );",
            "name": "CertSrvBackupGetBackupLogsW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupGetDatabaseNamesW( [in] HCSBC hbc, [out] PWSTR *ppwszzAttachmentInformation, [out] DWORD *pcbSize );",
            "name": "CertSrvBackupGetDatabaseNamesW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupGetDynamicFileListW( [in] HCSBC hbc, [out] PWSTR *ppwszzFileList, [out] DWORD *pcbSize );",
            "name": "CertSrvBackupGetDynamicFileListW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupOpenFileW( [in] HCSBC hbc, [in] WCHAR const *pwszAttachmentName, [in] DWORD cbReadHintSize, [out] LARGE_INTEGER *pliFileSize );",
            "name": "CertSrvBackupOpenFileW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupPrepareW( [in] WCHAR const *pwszServerName, [in] ULONG grbitJet, [in] ULONG dwBackupFlags, [out] HCSBC *phbc );",
            "name": "CertSrvBackupPrepareW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupRead( [in] HCSBC hbc, [out] VOID *pvBuffer, [in] DWORD cbBuffer, [out] DWORD *pcbRead );",
            "name": "CertSrvBackupRead"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvBackupTruncateLogs( [in] HCSBC hbc );",
            "name": "CertSrvBackupTruncateLogs"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvIsServerOnlineW( [in] WCHAR const *pwszServerName, [out] BOOL *pfServerOnline );",
            "name": "CertSrvIsServerOnlineW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestoreEnd( [in] HCSBC hbc );",
            "name": "CertSrvRestoreEnd"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestoreGetDatabaseLocationsW( [in] HCSBC hbc, [out] PWSTR *ppwszzDatabaseLocationList, [out] DWORD *pcbSize );",
            "name": "CertSrvRestoreGetDatabaseLocationsW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestorePrepareW( [in] WCHAR const *pwszServerName, [in] ULONG dwRestoreFlags, [out] HCSBC *phbc );",
            "name": "CertSrvRestorePrepareW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestoreRegisterComplete( [in] HCSBC hbc, [in] HRESULT hrRestoreState );",
            "name": "CertSrvRestoreRegisterComplete"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestoreRegisterThroughFile( [in] HCSBC hbc, [in, optional] WCHAR const *pwszCheckPointFilePath, [in, optional] WCHAR const *pwszLogPath, [in, optional] CSEDB_RSTMAPW [] rgrstmap, [in] LONG crstmap, [in, optional] WCHAR const *pwszBackupLogPath, [in] ULONG genLow, [in] ULONG genHigh );",
            "name": "CertSrvRestoreRegisterThroughFile"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvRestoreRegisterW( [in] HCSBC hbc, [in] WCHAR const *pwszCheckPointFilePath, [in] WCHAR const *pwszLogPath, [in] CSEDB_RSTMAPW [] rgrstmap, [in] LONG crstmap, [in] WCHAR const *pwszBackupLogPath, [in] ULONG genLow, [in] ULONG genHigh );",
            "name": "CertSrvRestoreRegisterW"
        },
        {
            "signature": "HRESULT CERTBCLI_API CertSrvServerControlW( [in] WCHAR const *pwszServerName, [in] DWORD dwControlFlags, [out] DWORD *pcbOut, [out] BYTE **ppbOut );",
            "name": "CertSrvServerControlW"
        }
    ],
    "Certcli.h": [],
    "Certenc.h": [],
    "Certenroll.h": [
        {
            "signature": "ImportPFXToProvider Importpfxtoprovider; HRESULT Importpfxtoprovider( [in] HWND hWndParent, [in] BYTE const *pbPFX, [in] DWORD cbPFX, [in] ImportPFXFlags ImportFlags, [in, optional] PCWSTR pwszPassword, [in, optional] PCWSTR pwszProviderName, [in, optional] PCWSTR pwszReaderName, [in, optional] PCWSTR pwszContainerNamePrefix, [in, optional] PCWSTR pwszPin, [in, optional] PCWSTR pwszFriendlyName, [out, optional] DWORD *pcCertOut, [out, optional] PCCERT_CONTEXT **prgpCertOut ) {...}",
            "name": "ImportPFXToProvider callback"
        },
        {
            "signature": "ImportPFXToProviderFreeData Importpfxtoproviderfreedata; void Importpfxtoproviderfreedata( [in] DWORD cCert, [in, optional] PCCERT_CONTEXT *rgpCert ) {...}",
            "name": "ImportPFXToProviderFreeData callback"
        }
    ],
    "Certexit.h": [],
    "Certif.h": [],
    "Certmod.h": [],
    "Certpol.h": [],
    "Certpoleng.h": [
        {
            "signature": "NTSTATUS PstAcquirePrivateKey( [in] PCCERT_CONTEXT pCert );",
            "name": "PstAcquirePrivateKey"
        },
        {
            "signature": "NTSTATUS PstGetCertificates( [in] PUNICODE_STRING pTargetName, [in] DWORD cCriteria, [in, optional] PCCERT_SELECT_CRITERIA rgpCriteria, [in] BOOL bIsClient, [out] PDWORD pdwCertChainContextCount, [out] PCCERT_CHAIN_CONTEXT **ppCertChainContexts );",
            "name": "PstGetCertificates"
        },
        {
            "signature": "NTSTATUS PstGetTrustAnchors( [in] PUNICODE_STRING pTargetName, [in] DWORD cCriteria, [in, optional] PCCERT_SELECT_CRITERIA rgpCriteria, [out] PSecPkgContext_IssuerListInfoEx *ppTrustedIssuers );",
            "name": "PstGetTrustAnchors"
        },
        {
            "signature": "NTSTATUS PstGetUserNameForCertificate( [in] PCCERT_CONTEXT pCertContext, [out] PUNICODE_STRING UserName );",
            "name": "PstGetUserNameForCertificate"
        },
        {
            "signature": "NTSTATUS PstMapCertificate( [in] PCCERT_CONTEXT pCert, [out] LSA_TOKEN_INFORMATION_TYPE *pTokenInformationType, [out] PVOID *ppTokenInformation );",
            "name": "PstMapCertificate"
        },
        {
            "signature": "NTSTATUS PstValidate( [in, optional] PUNICODE_STRING pTargetName, [in] BOOL bIsClient, [in, optional] CERT_USAGE_MATCH *pRequestedIssuancePolicy, [in, optional] HCERTSTORE *phAdditionalCertStore, [in] PCCERT_CONTEXT pCert, [out, optional] GUID *pProvGUID );",
            "name": "PstValidate"
        }
    ],
    "Certsrv.h": [],
    "Certview.h": [],
    "Cfapi.h": [
        {
            "signature": "void CfCloseHandle( [in] HANDLE FileHandle );",
            "name": "CfCloseHandle"
        },
        {
            "signature": "HRESULT CfConnectSyncRoot( [in] LPCWSTR SyncRootPath, [in] const CF_CALLBACK_REGISTRATION *CallbackTable, [in, optional] LPCVOID CallbackContext, [in] CF_CONNECT_FLAGS ConnectFlags, [out] CF_CONNECTION_KEY *ConnectionKey );",
            "name": "CfConnectSyncRoot"
        },
        {
            "signature": "HRESULT CfConvertToPlaceholder( [in] HANDLE FileHandle, [in, optional] LPCVOID FileIdentity, [in] DWORD FileIdentityLength, [in] CF_CONVERT_FLAGS ConvertFlags, [out, optional] USN *ConvertUsn, [in, out, optional] LPOVERLAPPED Overlapped );",
            "name": "CfConvertToPlaceholder"
        },
        {
            "signature": "HRESULT CfCreatePlaceholders( [in] LPCWSTR BaseDirectoryPath, [in, out] CF_PLACEHOLDER_CREATE_INFO *PlaceholderArray, [in] DWORD PlaceholderCount, [in] CF_CREATE_FLAGS CreateFlags, [out] PDWORD EntriesProcessed );",
            "name": "CfCreatePlaceholders"
        },
        {
            "signature": "HRESULT CfDisconnectSyncRoot( [in] CF_CONNECTION_KEY ConnectionKey );",
            "name": "CfDisconnectSyncRoot"
        },
        {
            "signature": "HRESULT CfExecute( [in] const CF_OPERATION_INFO *OpInfo, [in, out] CF_OPERATION_PARAMETERS *OpParams );",
            "name": "CfExecute"
        },
        {
            "signature": "HRESULT CfGetCorrelationVector( [in] HANDLE FileHandle, [out] PCORRELATION_VECTOR CorrelationVector );",
            "name": "CfGetCorrelationVector"
        },
        {
            "signature": "HRESULT CfGetPlaceholderInfo( [in] HANDLE FileHandle, [in] CF_PLACEHOLDER_INFO_CLASS InfoClass, [out] PVOID InfoBuffer, [in] DWORD InfoBufferLength, [out, optional] PDWORD ReturnedLength );",
            "name": "CfGetPlaceholderInfo"
        },
        {
            "signature": "HRESULT CfGetPlaceholderRangeInfo( [in] HANDLE FileHandle, [in] CF_PLACEHOLDER_RANGE_INFO_CLASS InfoClass, [in] LARGE_INTEGER StartingOffset, [in] LARGE_INTEGER Length, [out] PVOID InfoBuffer, [in] DWORD InfoBufferLength, [out, optional] PDWORD ReturnedLength );",
            "name": "CfGetPlaceholderRangeInfo"
        },
        {
            "signature": "CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromAttributeTag( [in] DWORD FileAttributes, [in] DWORD ReparseTag );",
            "name": "CfGetPlaceholderStateFromAttributeTag"
        },
        {
            "signature": "CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFileInfo( [in] LPCVOID InfoBuffer, [in] FILE_INFO_BY_HANDLE_CLASS InfoClass );",
            "name": "CfGetPlaceholderStateFromFileInfo"
        },
        {
            "signature": "CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFindData( [in] const WIN32_FIND_DATA *FindData );",
            "name": "CfGetPlaceholderStateFromFindData"
        },
        {
            "signature": "HRESULT CfGetPlatformInfo( [out] CF_PLATFORM_INFO *PlatformVersion );",
            "name": "CfGetPlatformInfo"
        },
        {
            "signature": "HRESULT CfGetSyncRootInfoByHandle( [in] HANDLE FileHandle, [in] CF_SYNC_ROOT_INFO_CLASS InfoClass, [out] PVOID InfoBuffer, [in] DWORD InfoBufferLength, [out, optional] DWORD *ReturnedLength );",
            "name": "CfGetSyncRootInfoByHandle"
        },
        {
            "signature": "HRESULT CfGetSyncRootInfoByPath( [in] LPCWSTR FilePath, [in] CF_SYNC_ROOT_INFO_CLASS InfoClass, [out] PVOID InfoBuffer, [in] DWORD InfoBufferLength, [out, optional] DWORD *ReturnedLength );",
            "name": "CfGetSyncRootInfoByPath"
        },
        {
            "signature": "HRESULT CfGetTransferKey( [in] HANDLE FileHandle, [out] CF_TRANSFER_KEY *TransferKey );",
            "name": "CfGetTransferKey"
        },
        {
            "signature": "HANDLE CfGetWin32HandleFromProtectedHandle( [in] HANDLE ProtectedHandle );",
            "name": "CfGetWin32HandleFromProtectedHandle"
        },
        {
            "signature": "HRESULT CfHydratePlaceholder( [in] HANDLE FileHandle, [in] LARGE_INTEGER StartingOffset, [in] LARGE_INTEGER Length, [in] CF_HYDRATE_FLAGS HydrateFlags, [in, out, optional] LPOVERLAPPED Overlapped );",
            "name": "CfHydratePlaceholder"
        },
        {
            "signature": "HRESULT CfOpenFileWithOplock( [in] LPCWSTR FilePath, [in] CF_OPEN_FILE_FLAGS Flags, [out] PHANDLE ProtectedHandle );",
            "name": "CfOpenFileWithOplock"
        },
        {
            "signature": "HRESULT CfQuerySyncProviderStatus( [in] CF_CONNECTION_KEY ConnectionKey, [out] CF_SYNC_PROVIDER_STATUS *ProviderStatus );",
            "name": "CfQuerySyncProviderStatus"
        },
        {
            "signature": "BOOLEAN CfReferenceProtectedHandle( [in] HANDLE ProtectedHandle );",
            "name": "CfReferenceProtectedHandle"
        },
        {
            "signature": "HRESULT CfRegisterSyncRoot( [in] LPCWSTR SyncRootPath, [in] const CF_SYNC_REGISTRATION *Registration, [in] const CF_SYNC_POLICIES *Policies, [in] CF_REGISTER_FLAGS RegisterFlags );",
            "name": "CfRegisterSyncRoot"
        },
        {
            "signature": "void CfReleaseProtectedHandle( [in] HANDLE ProtectedHandle );",
            "name": "CfReleaseProtectedHandle"
        },
        {
            "signature": "void CfReleaseTransferKey( [in] HANDLE FileHandle, [in] CF_TRANSFER_KEY *TransferKey );",
            "name": "CfReleaseTransferKey"
        },
        {
            "signature": "HRESULT CfReportProviderProgress( [in] CF_CONNECTION_KEY ConnectionKey, [in] CF_TRANSFER_KEY TransferKey, [in] LARGE_INTEGER ProviderProgressTotal, [in] LARGE_INTEGER ProviderProgressCompleted );",
            "name": "CfReportProviderProgress"
        },
        {
            "signature": "HRESULT CfReportProviderProgress2( CF_CONNECTION_KEY ConnectionKey, CF_TRANSFER_KEY TransferKey, CF_REQUEST_KEY RequestKey, LARGE_INTEGER ProviderProgressTotal, LARGE_INTEGER ProviderProgressCompleted, DWORD TargetSessionId );",
            "name": "CfReportProviderProgress2"
        },
        {
            "signature": "HRESULT CfReportSyncStatus( [in, out] LPCWSTR SyncRootPath, [in] CF_SYNC_STATUS *SyncStatus );",
            "name": "CfReportSyncStatus"
        },
        {
            "signature": "HRESULT CfRevertPlaceholder( [in] HANDLE FileHandle, [in] CF_REVERT_FLAGS RevertFlags, [in, out, optional] LPOVERLAPPED Overlapped );",
            "name": "CfRevertPlaceholder"
        },
        {
            "signature": "HRESULT CfSetCorrelationVector( [in] HANDLE FileHandle, [in] const PCORRELATION_VECTOR CorrelationVector );",
            "name": "CfSetCorrelationVector"
        },
        {
            "signature": "HRESULT CfSetInSyncState( [in] HANDLE FileHandle, [in] CF_IN_SYNC_STATE InSyncState, [in] CF_SET_IN_SYNC_FLAGS InSyncFlags, [in, out, optional] USN *InSyncUsn );",
            "name": "CfSetInSyncState"
        },
        {
            "signature": "HRESULT CfSetPinState( [in] HANDLE FileHandle, [in] CF_PIN_STATE PinState, [in] CF_SET_PIN_FLAGS PinFlags, [in, out, optional] LPOVERLAPPED Overlapped );",
            "name": "CfSetPinState"
        },
        {
            "signature": "HRESULT CfUnregisterSyncRoot( [in] LPCWSTR SyncRootPath );",
            "name": "CfUnregisterSyncRoot"
        },
        {
            "signature": "HRESULT CfUpdatePlaceholder( [in] HANDLE FileHandle, [in, optional] const CF_FS_METADATA *FsMetadata, [in, optional] LPCVOID FileIdentity, [in] DWORD FileIdentityLength, [in, optional] const CF_FILE_RANGE *DehydrateRangeArray, [in] DWORD DehydrateRangeCount, [in] CF_UPDATE_FLAGS UpdateFlags, [in, out, optional] USN *UpdateUsn, [in, out, optional] LPOVERLAPPED Overlapped );",
            "name": "CfUpdatePlaceholder"
        },
        {
            "signature": "HRESULT CfUpdateSyncProviderStatus( [in] CF_CONNECTION_KEY ConnectionKey, [in] CF_SYNC_PROVIDER_STATUS ProviderStatus );",
            "name": "CfUpdateSyncProviderStatus"
        }
    ],
    "Cfg.h": [],
    "Cfgmgr32.h": [
        {
            "signature": "CMAPI CONFIGRET CM_Add_Empty_Log_Conf( [out] PLOG_CONF plcLogConf, [in] DEVINST dnDevInst, [in] PRIORITY Priority, [in] ULONG ulFlags );",
            "name": "CM_Add_Empty_Log_Conf"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_Empty_Log_Conf_Ex( [out] PLOG_CONF plcLogConf, [in] DEVINST dnDevInst, [in] PRIORITY Priority, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Add_Empty_Log_Conf_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_ID_ExA( DEVINST dnDevInst, PSTR pszID, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Add_ID_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_ID_ExW( [in] DEVINST dnDevInst, [in] PWSTR pszID, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Add_ID_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_IDA( DEVINST dnDevInst, PSTR pszID, ULONG ulFlags );",
            "name": "CM_Add_IDA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_IDW( [in] DEVINST dnDevInst, [in] PWSTR pszID, [in] ULONG ulFlags );",
            "name": "CM_Add_IDW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_Range( DWORDLONG ullStartValue, DWORDLONG ullEndValue, RANGE_LIST rlh, ULONG ulFlags );",
            "name": "CM_Add_Range"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_Res_Des( [out, optional] PRES_DES prdResDes, [in] LOG_CONF lcLogConf, [in] RESOURCEID ResourceID, [in] PCVOID ResourceData, [in] ULONG ResourceLen, [in] ULONG ulFlags );",
            "name": "CM_Add_Res_Des"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Add_Res_Des_Ex( [out, optional] PRES_DES prdResDes, [in] LOG_CONF lcLogConf, [in] RESOURCEID ResourceID, [in] PCVOID ResourceData, [in] ULONG ResourceLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Add_Res_Des_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Connect_MachineA( [in, optional] PCSTR UNCServerName, [out] PHMACHINE phMachine );",
            "name": "CM_Connect_MachineA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Connect_MachineW( [in, optional] PCWSTR UNCServerName, [out] PHMACHINE phMachine );",
            "name": "CM_Connect_MachineW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Create_DevNode_ExA( PDEVINST pdnDevInst, DEVINSTID_A pDeviceID, DEVINST dnParent, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Create_DevNode_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Create_DevNode_ExW( PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, DEVINST dnParent, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Create_DevNode_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Create_DevNodeA( PDEVINST pdnDevInst, DEVINSTID_A pDeviceID, DEVINST dnParent, ULONG ulFlags );",
            "name": "CM_Create_DevNodeA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Create_DevNodeW( PDEVINST pdnDevInst, DEVINSTID_W pDeviceID, DEVINST dnParent, ULONG ulFlags );",
            "name": "CM_Create_DevNodeW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Create_Range_List( PRANGE_LIST prlh, ULONG ulFlags );",
            "name": "CM_Create_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Class_Key( [in] LPGUID ClassGuid, [in] ULONG ulFlags );",
            "name": "CM_Delete_Class_Key"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Class_Key_Ex( LPGUID ClassGuid, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Delete_Class_Key_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Device_Interface_Key_ExA( [in] LPCSTR pszDeviceInterface, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Delete_Device_Interface_Key_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Device_Interface_Key_ExW( [in] LPCWSTR pszDeviceInterface, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Delete_Device_Interface_Key_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Device_Interface_KeyA( [in] LPCSTR pszDeviceInterface, [in] ULONG ulFlags );",
            "name": "CM_Delete_Device_Interface_KeyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Device_Interface_KeyW( [in] LPCWSTR pszDeviceInterface, [in] ULONG ulFlags );",
            "name": "CM_Delete_Device_Interface_KeyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_DevNode_Key( [in] DEVNODE dnDevNode, [in] ULONG ulHardwareProfile, [in] ULONG ulFlags );",
            "name": "CM_Delete_DevNode_Key"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_DevNode_Key_Ex( DEVNODE dnDevNode, ULONG ulHardwareProfile, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Delete_DevNode_Key_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Delete_Range( DWORDLONG ullStartValue, DWORDLONG ullEndValue, RANGE_LIST rlh, ULONG ulFlags );",
            "name": "CM_Delete_Range"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Detect_Resource_Conflict( DEVINST dnDevInst, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, PBOOL pbConflictDetected, ULONG ulFlags );",
            "name": "CM_Detect_Resource_Conflict"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Detect_Resource_Conflict_Ex( DEVINST dnDevInst, RESOURCEID ResourceID, PCVOID ResourceData, ULONG ResourceLen, PBOOL pbConflictDetected, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Detect_Resource_Conflict_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Disable_DevNode( [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Disable_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Disable_DevNode_Ex( DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Disable_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Disconnect_Machine( [in, optional] HMACHINE hMachine );",
            "name": "CM_Disconnect_Machine"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Dup_Range_List( RANGE_LIST rlhOld, RANGE_LIST rlhNew, ULONG ulFlags );",
            "name": "CM_Dup_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enable_DevNode( [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Enable_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enable_DevNode_Ex( DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Enable_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_Classes( [in] ULONG ulClassIndex, [out] LPGUID ClassGuid, [in] ULONG ulFlags );",
            "name": "CM_Enumerate_Classes"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_Classes_Ex( [in] ULONG ulClassIndex, [out] LPGUID ClassGuid, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Enumerate_Classes_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_Enumerators_ExA( [in] ULONG ulEnumIndex, [out] PSTR Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Enumerate_Enumerators_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_Enumerators_ExW( [in] ULONG ulEnumIndex, [out] PWSTR Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Enumerate_Enumerators_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_EnumeratorsA( [in] ULONG ulEnumIndex, [out] PSTR Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Enumerate_EnumeratorsA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Enumerate_EnumeratorsW( [in] ULONG ulEnumIndex, [out] PWSTR Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Enumerate_EnumeratorsW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Find_Range( PDWORDLONG pullStart, DWORDLONG ullStart, ULONG ulLength, DWORDLONG ullAlignment, DWORDLONG ullEnd, RANGE_LIST rlh, ULONG ulFlags );",
            "name": "CM_Find_Range"
        },
        {
            "signature": "CMAPI CONFIGRET CM_First_Range( RANGE_LIST rlh, PDWORDLONG pullStart, PDWORDLONG pullEnd, PRANGE_ELEMENT preElement, ULONG ulFlags );",
            "name": "CM_First_Range"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Log_Conf( [in] LOG_CONF lcLogConfToBeFreed, [in] ULONG ulFlags );",
            "name": "CM_Free_Log_Conf"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Log_Conf_Ex( [in] LOG_CONF lcLogConfToBeFreed, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Free_Log_Conf_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Log_Conf_Handle( [in] LOG_CONF lcLogConf );",
            "name": "CM_Free_Log_Conf_Handle"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Range_List( RANGE_LIST rlh, ULONG ulFlags );",
            "name": "CM_Free_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Res_Des( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] ULONG ulFlags );",
            "name": "CM_Free_Res_Des"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Res_Des_Ex( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Free_Res_Des_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Res_Des_Handle( [in] RES_DES rdResDes );",
            "name": "CM_Free_Res_Des_Handle"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Free_Resource_Conflict_Handle( [in] CONFLICT_LIST clConflictList );",
            "name": "CM_Free_Resource_Conflict_Handle"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Child( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_Child"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Child_Ex( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Child_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Key_Name_ExA( LPGUID ClassGuid, LPSTR pszKeyName, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Class_Key_Name_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Key_Name_ExW( LPGUID ClassGuid, LPWSTR pszKeyName, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Class_Key_Name_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Key_NameA( LPGUID ClassGuid, LPSTR pszKeyName, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_Class_Key_NameA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Key_NameW( LPGUID ClassGuid, LPWSTR pszKeyName, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_Class_Key_NameW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Name_ExA( LPGUID ClassGuid, PSTR Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Class_Name_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Name_ExW( LPGUID ClassGuid, PWSTR Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Class_Name_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_NameA( LPGUID ClassGuid, PSTR Buffer, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_Class_NameA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_NameW( LPGUID ClassGuid, PWSTR Buffer, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_Class_NameW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Property_ExW( [in] LPCGUID ClassGUID, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags, [in] HMACHINE hMachine );",
            "name": "CM_Get_Class_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Property_Keys( [in] LPCGUID ClassGUID, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags );",
            "name": "CM_Get_Class_Property_Keys"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Property_Keys_Ex( [in] LPCGUID ClassGUID, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Class_Property_Keys_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_PropertyW( [in] LPCGUID ClassGUID, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Get_Class_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Registry_PropertyA( [in] LPGUID ClassGuid, [in] ULONG ulProperty, [out, optional] PULONG pulRegDataType, [out] PVOID Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Class_Registry_PropertyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Class_Registry_PropertyW( [in] LPGUID ClassGuid, [in] ULONG ulProperty, [out, optional] PULONG pulRegDataType, [out] PVOID Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Class_Registry_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Depth( [out] PULONG pulDepth, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_Depth"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Depth_Ex( [out] PULONG pulDepth, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Depth_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_ExA( [in] DEVINST dnDevInst, [out] PSTR Buffer, [in] ULONG BufferLen, ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_ExW( [in] DEVINST dnDevInst, [out] PWSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_ExA( [in, optional] PCSTR pszFilter, [out] PZZSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_List_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_ExW( [in, optional] PCWSTR pszFilter, [out] PZZWSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_List_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_Size_ExA( [out] PULONG pulLen, [in, optional] PCSTR pszFilter, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_List_Size_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_Size_ExW( [out] PULONG pulLen, [in, optional] PCWSTR pszFilter, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_List_Size_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_SizeA( [out] PULONG pulLen, [in, optional] PCSTR pszFilter, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_ID_List_SizeA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_List_SizeW( [out] PULONG pulLen, [in, optional] PCWSTR pszFilter, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_ID_List_SizeW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_ListA( [in, optional] PCSTR pszFilter, [out] PZZSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_ID_ListA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_ListW( [in, optional] PCWSTR pszFilter, [out] PZZWSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_ID_ListW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_Size( [out] PULONG pulLen, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_ID_Size"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_ID_Size_Ex( [out] PULONG pulLen, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_ID_Size_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_IDA( [in] DEVINST dnDevInst, [out] PSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_IDA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_IDW( [in] DEVINST dnDevInst, [out] PWSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_IDW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_Alias_ExA( LPCSTR pszDeviceInterface, LPGUID AliasInterfaceGuid, LPSTR pszAliasDeviceInterface, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_Alias_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_Alias_ExW( LPCWSTR pszDeviceInterface, LPGUID AliasInterfaceGuid, LPWSTR pszAliasDeviceInterface, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_Alias_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_AliasA( [in] LPCSTR pszDeviceInterface, [in] LPGUID AliasInterfaceGuid, [out] LPSTR pszAliasDeviceInterface, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_AliasA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_AliasW( [in] LPCWSTR pszDeviceInterface, [in] LPGUID AliasInterfaceGuid, [out] LPWSTR pszAliasDeviceInterface, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_AliasW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_ExA( LPGUID InterfaceClassGuid, DEVINSTID_A pDeviceID, PZZSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_List_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_ExW( LPGUID InterfaceClassGuid, DEVINSTID_W pDeviceID, PZZWSTR Buffer, ULONG BufferLen, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_List_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_Size_ExA( PULONG pulLen, LPGUID InterfaceClassGuid, DEVINSTID_A pDeviceID, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_List_Size_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_Size_ExW( PULONG pulLen, LPGUID InterfaceClassGuid, DEVINSTID_W pDeviceID, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_List_Size_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_SizeA( [out] PULONG pulLen, [in] LPGUID InterfaceClassGuid, [in, optional] DEVINSTID_A pDeviceID, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_List_SizeA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_List_SizeW( [out] PULONG pulLen, [in] LPGUID InterfaceClassGuid, [in, optional] DEVINSTID_W pDeviceID, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_List_SizeW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_ListA( [in] LPGUID InterfaceClassGuid, [in, optional] DEVINSTID_A pDeviceID, [out] PZZSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_ListA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_ListW( [in] LPGUID InterfaceClassGuid, [in, optional] DEVINSTID_W pDeviceID, [out] PZZWSTR Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_ListW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_Property_ExW( [in] LPCWSTR pszDeviceInterface, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_Property_Keys_ExW( [in] LPCWSTR pszDeviceInterface, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Device_Interface_Property_Keys_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_Property_KeysW( [in] LPCWSTR pszDeviceInterface, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_Property_KeysW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Device_Interface_PropertyW( [in] LPCWSTR pszDeviceInterface, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Get_Device_Interface_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Custom_Property_ExA( DEVINST dnDevInst, PCSTR pszCustomPropertyName, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Custom_Property_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Custom_Property_ExW( DEVINST dnDevInst, PCWSTR pszCustomPropertyName, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Custom_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Custom_PropertyA( DEVINST dnDevInst, PCSTR pszCustomPropertyName, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_DevNode_Custom_PropertyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Custom_PropertyW( DEVINST dnDevInst, PCWSTR pszCustomPropertyName, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Get_DevNode_Custom_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Property_ExW( [in] DEVINST dnDevInst, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Property_Keys( [in] DEVINST dnDevInst, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags );",
            "name": "CM_Get_DevNode_Property_Keys"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Property_Keys_Ex( [in] DEVINST dnDevInst, [out, optional] DEVPROPKEY *PropertyKeyArray, [in, out] PULONG PropertyKeyCount, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Property_Keys_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_PropertyW( [in] DEVINST dnDevInst, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in, out] PULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Get_DevNode_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Registry_Property_ExA( DEVINST dnDevInst, ULONG ulProperty, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Registry_Property_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Registry_Property_ExW( DEVINST dnDevInst, ULONG ulProperty, PULONG pulRegDataType, PVOID Buffer, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Registry_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Registry_PropertyA( [in] DEVINST dnDevInst, [in] ULONG ulProperty, [out, optional] PULONG pulRegDataType, [out, optional] PVOID Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Get_DevNode_Registry_PropertyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Registry_PropertyW( [in] DEVINST dnDevInst, [in] ULONG ulProperty, [out, optional] PULONG pulRegDataType, [out, optional] PVOID Buffer, [in, out] PULONG pulLength, [in] ULONG ulFlags );",
            "name": "CM_Get_DevNode_Registry_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Status( [out] PULONG pulStatus, [out] PULONG pulProblemNumber, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_DevNode_Status"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_DevNode_Status_Ex( [out] PULONG pulStatus, [out] PULONG pulProblemNumber, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_DevNode_Status_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_First_Log_Conf( [out, optional] PLOG_CONF plcLogConf, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_First_Log_Conf"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_First_Log_Conf_Ex( [out, optional] PLOG_CONF plcLogConf, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_First_Log_Conf_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Global_State( PULONG pulState, ULONG ulFlags );",
            "name": "CM_Get_Global_State"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Global_State_Ex( PULONG pulState, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Global_State_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Hardware_Profile_Info_ExA( ULONG ulIndex, PHWPROFILEINFO_A pHWProfileInfo, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Hardware_Profile_Info_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Hardware_Profile_Info_ExW( ULONG ulIndex, PHWPROFILEINFO_W pHWProfileInfo, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Get_Hardware_Profile_Info_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Hardware_Profile_InfoA( ULONG ulIndex, PHWPROFILEINFO_A pHWProfileInfo, ULONG ulFlags );",
            "name": "CM_Get_Hardware_Profile_InfoA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Hardware_Profile_InfoW( ULONG ulIndex, PHWPROFILEINFO_W pHWProfileInfo, ULONG ulFlags );",
            "name": "CM_Get_Hardware_Profile_InfoW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_HW_Prof_Flags_ExA( [in] DEVINSTID_A pDeviceID, [in] ULONG ulHardwareProfile, [out] PULONG pulValue, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_HW_Prof_Flags_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_HW_Prof_Flags_ExW( [in] DEVINSTID_W pDeviceID, [in] ULONG ulHardwareProfile, [out] PULONG pulValue, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_HW_Prof_Flags_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_HW_Prof_FlagsA( [in] DEVINSTID_A pDeviceID, [in] ULONG ulHardwareProfile, [out] PULONG pulValue, [in] ULONG ulFlags );",
            "name": "CM_Get_HW_Prof_FlagsA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_HW_Prof_FlagsW( [in] DEVINSTID_W pDeviceID, [in] ULONG ulHardwareProfile, [out] PULONG pulValue, [in] ULONG ulFlags );",
            "name": "CM_Get_HW_Prof_FlagsW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Log_Conf_Priority( [in] LOG_CONF lcLogConf, [out] PPRIORITY pPriority, [in] ULONG ulFlags );",
            "name": "CM_Get_Log_Conf_Priority"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Log_Conf_Priority_Ex( [in] LOG_CONF lcLogConf, [out] PPRIORITY pPriority, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Log_Conf_Priority_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Next_Log_Conf( [out, optional] PLOG_CONF plcLogConf, [in] LOG_CONF lcLogConf, [in] ULONG ulFlags );",
            "name": "CM_Get_Next_Log_Conf"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Next_Log_Conf_Ex( [out, optional] PLOG_CONF plcLogConf, [in] LOG_CONF lcLogConf, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Next_Log_Conf_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Next_Res_Des( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] RESOURCEID ForResource, [out, optional] PRESOURCEID pResourceID, [in] ULONG ulFlags );",
            "name": "CM_Get_Next_Res_Des"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Next_Res_Des_Ex( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] RESOURCEID ForResource, [out, optional] PRESOURCEID pResourceID, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Next_Res_Des_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Parent( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_Parent"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Parent_Ex( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Parent_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Res_Des_Data( [in] RES_DES rdResDes, [out] PVOID Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags );",
            "name": "CM_Get_Res_Des_Data"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Res_Des_Data_Ex( [in] RES_DES rdResDes, [out] PVOID Buffer, [in] ULONG BufferLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Res_Des_Data_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Res_Des_Data_Size( [out] PULONG pulSize, [in] RES_DES rdResDes, [in] ULONG ulFlags );",
            "name": "CM_Get_Res_Des_Data_Size"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Res_Des_Data_Size_Ex( [out] PULONG pulSize, [in] RES_DES rdResDes, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Res_Des_Data_Size_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Resource_Conflict_Count( [in] CONFLICT_LIST clConflictList, [out] PULONG pulCount );",
            "name": "CM_Get_Resource_Conflict_Count"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Resource_Conflict_DetailsA( [in] CONFLICT_LIST clConflictList, [in] ULONG ulIndex, [in, out] PCONFLICT_DETAILS_A pConflictDetails );",
            "name": "CM_Get_Resource_Conflict_DetailsA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Resource_Conflict_DetailsW( [in] CONFLICT_LIST clConflictList, [in] ULONG ulIndex, [in, out] PCONFLICT_DETAILS_W pConflictDetails );",
            "name": "CM_Get_Resource_Conflict_DetailsW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Sibling( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Get_Sibling"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Get_Sibling_Ex( [out] PDEVINST pdnDevInst, [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Sibling_Ex"
        },
        {
            "signature": "CMAPI WORD CM_Get_Version();",
            "name": "CM_Get_Version"
        },
        {
            "signature": "CMAPI WORD CM_Get_Version_Ex( [in, optional] HMACHINE hMachine );",
            "name": "CM_Get_Version_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Intersect_Range_List( RANGE_LIST rlhOld1, RANGE_LIST rlhOld2, RANGE_LIST rlhNew, ULONG ulFlags );",
            "name": "CM_Intersect_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Invert_Range_List( RANGE_LIST rlhOld, RANGE_LIST rlhNew, DWORDLONG ullMaxValue, ULONG ulFlags );",
            "name": "CM_Invert_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Is_Dock_Station_Present( [out] PBOOL pbPresent );",
            "name": "CM_Is_Dock_Station_Present"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Is_Dock_Station_Present_Ex( [out] PBOOL pbPresent, [in, optional] HMACHINE hMachine );",
            "name": "CM_Is_Dock_Station_Present_Ex"
        },
        {
            "signature": "CMAPI BOOL CM_Is_Version_Available( [in] WORD wVersion );",
            "name": "CM_Is_Version_Available"
        },
        {
            "signature": "CMAPI BOOL CM_Is_Version_Available_Ex( [in] WORD wVersion, [in, optional] HMACHINE hMachine );",
            "name": "CM_Is_Version_Available_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Locate_DevNode_ExA( [out] PDEVINST pdnDevInst, [in, optional] DEVINSTID_A pDeviceID, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Locate_DevNode_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Locate_DevNode_ExW( [out] PDEVINST pdnDevInst, [in, optional] DEVINSTID_W pDeviceID, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Locate_DevNode_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Locate_DevNodeA( [out] PDEVINST pdnDevInst, [in, optional] DEVINSTID_A pDeviceID, [in] ULONG ulFlags );",
            "name": "CM_Locate_DevNodeA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Locate_DevNodeW( [out] PDEVINST pdnDevInst, [in, optional] DEVINSTID_W pDeviceID, [in] ULONG ulFlags );",
            "name": "CM_Locate_DevNodeW"
        },
        {
            "signature": "CMAPI DWORD CM_MapCrToWin32Err( [in] CONFIGRET CmReturnCode, [in] DWORD DefaultErr );",
            "name": "CM_MapCrToWin32Err"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Merge_Range_List( RANGE_LIST rlhOld1, RANGE_LIST rlhOld2, RANGE_LIST rlhNew, ULONG ulFlags );",
            "name": "CM_Merge_Range_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Modify_Res_Des( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] RESOURCEID ResourceID, [in] PCVOID ResourceData, [in] ULONG ResourceLen, [in] ULONG ulFlags );",
            "name": "CM_Modify_Res_Des"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Modify_Res_Des_Ex( [out] PRES_DES prdResDes, [in] RES_DES rdResDes, [in] RESOURCEID ResourceID, [in] PCVOID ResourceData, [in] ULONG ResourceLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Modify_Res_Des_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Move_DevNode( DEVINST dnFromDevInst, DEVINST dnToDevInst, ULONG ulFlags );",
            "name": "CM_Move_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Move_DevNode_Ex( DEVINST dnFromDevInst, DEVINST dnToDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Move_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Next_Range( PRANGE_ELEMENT preElement, PDWORDLONG pullStart, PDWORDLONG pullEnd, ULONG ulFlags );",
            "name": "CM_Next_Range"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Class_Key_ExA( LPGUID ClassGuid, LPCSTR pszClassName, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkClass, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Open_Class_Key_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Class_Key_ExW( LPGUID ClassGuid, LPCWSTR pszClassName, REGSAM samDesired, REGDISPOSITION Disposition, PHKEY phkClass, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Open_Class_Key_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Class_KeyA( [in, optional] LPGUID ClassGuid, [in, optional] LPCSTR pszClassName, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkClass, [in] ULONG ulFlags );",
            "name": "CM_Open_Class_KeyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Class_KeyW( [in, optional] LPGUID ClassGuid, [in, optional] LPCWSTR pszClassName, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkClass, [in] ULONG ulFlags );",
            "name": "CM_Open_Class_KeyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Device_Interface_Key_ExA( [in] LPCSTR pszDeviceInterface, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkDeviceInterface, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Open_Device_Interface_Key_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Device_Interface_Key_ExW( [in] LPCWSTR pszDeviceInterface, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkDeviceInterface, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Open_Device_Interface_Key_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Device_Interface_KeyA( [in] LPCSTR pszDeviceInterface, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkDeviceInterface, [in] ULONG ulFlags );",
            "name": "CM_Open_Device_Interface_KeyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_Device_Interface_KeyW( [in] LPCWSTR pszDeviceInterface, [in] REGSAM samDesired, [in] REGDISPOSITION Disposition, [out] PHKEY phkDeviceInterface, [in] ULONG ulFlags );",
            "name": "CM_Open_Device_Interface_KeyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_DevNode_Key( [in] DEVINST dnDevNode, [in] REGSAM samDesired, [in] ULONG ulHardwareProfile, [in] REGDISPOSITION Disposition, [out] PHKEY phkDevice, [in] ULONG ulFlags );",
            "name": "CM_Open_DevNode_Key"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Open_DevNode_Key_Ex( DEVINST dnDevNode, REGSAM samDesired, ULONG ulHardwareProfile, REGDISPOSITION Disposition, PHKEY phkDevice, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Open_DevNode_Key_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_And_Remove_SubTree_ExA( [in] DEVINST dnAncestor, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Query_And_Remove_SubTree_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_And_Remove_SubTree_ExW( [in] DEVINST dnAncestor, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPWSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Query_And_Remove_SubTree_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_And_Remove_SubTreeA( [in] DEVINST dnAncestor, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags );",
            "name": "CM_Query_And_Remove_SubTreeA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_And_Remove_SubTreeW( [in] DEVINST dnAncestor, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPWSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags );",
            "name": "CM_Query_And_Remove_SubTreeW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Arbitrator_Free_Data( PVOID pData, ULONG DataLen, DEVINST dnDevInst, RESOURCEID ResourceID, ULONG ulFlags );",
            "name": "CM_Query_Arbitrator_Free_Data"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Arbitrator_Free_Data_Ex( PVOID pData, ULONG DataLen, DEVINST dnDevInst, RESOURCEID ResourceID, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Query_Arbitrator_Free_Data_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Arbitrator_Free_Size( PULONG pulSize, DEVINST dnDevInst, RESOURCEID ResourceID, ULONG ulFlags );",
            "name": "CM_Query_Arbitrator_Free_Size"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Arbitrator_Free_Size_Ex( PULONG pulSize, DEVINST dnDevInst, RESOURCEID ResourceID, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Query_Arbitrator_Free_Size_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Remove_SubTree( DEVINST dnAncestor, ULONG ulFlags );",
            "name": "CM_Query_Remove_SubTree"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Remove_SubTree_Ex( DEVINST dnAncestor, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Query_Remove_SubTree_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Query_Resource_Conflict_List( [out] PCONFLICT_LIST pclConflictList, [in] DEVINST dnDevInst, [in] RESOURCEID ResourceID, [in] PCVOID ResourceData, [in] ULONG ResourceLen, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Query_Resource_Conflict_List"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Reenumerate_DevNode( [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Reenumerate_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Reenumerate_DevNode_Ex( [in] DEVINST dnDevInst, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Reenumerate_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_Driver( DEVINST dnDevInst, ULONG ulFlags );",
            "name": "CM_Register_Device_Driver"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_Driver_Ex( DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Register_Device_Driver_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_Interface_ExA( DEVINST dnDevInst, LPGUID InterfaceClassGuid, LPCSTR pszReference, LPSTR pszDeviceInterface, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Register_Device_Interface_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_Interface_ExW( DEVINST dnDevInst, LPGUID InterfaceClassGuid, LPCWSTR pszReference, LPWSTR pszDeviceInterface, PULONG pulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Register_Device_Interface_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_InterfaceA( DEVINST dnDevInst, LPGUID InterfaceClassGuid, LPCSTR pszReference, LPSTR pszDeviceInterface, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Register_Device_InterfaceA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Device_InterfaceW( DEVINST dnDevInst, LPGUID InterfaceClassGuid, LPCWSTR pszReference, LPWSTR pszDeviceInterface, PULONG pulLength, ULONG ulFlags );",
            "name": "CM_Register_Device_InterfaceW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Register_Notification( [in] PCM_NOTIFY_FILTER pFilter, [in, optional] PVOID pContext, [in] PCM_NOTIFY_CALLBACK pCallback, [out] PHCMNOTIFICATION pNotifyContext );",
            "name": "CM_Register_Notification"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Remove_SubTree( DEVINST dnAncestor, ULONG ulFlags );",
            "name": "CM_Remove_SubTree"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Remove_SubTree_Ex( DEVINST dnAncestor, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Remove_SubTree_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Device_Eject_ExA( [in] DEVINST dnDevInst, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Request_Device_Eject_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Device_Eject_ExW( [in] DEVINST dnDevInst, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPWSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Request_Device_Eject_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Device_EjectA( [in] DEVINST dnDevInst, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags );",
            "name": "CM_Request_Device_EjectA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Device_EjectW( [in] DEVINST dnDevInst, [out, optional] PPNP_VETO_TYPE pVetoType, [out, optional] LPWSTR pszVetoName, [in] ULONG ulNameLength, [in] ULONG ulFlags );",
            "name": "CM_Request_Device_EjectW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Eject_PC();",
            "name": "CM_Request_Eject_PC"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Request_Eject_PC_Ex( [in, optional] HMACHINE hMachine );",
            "name": "CM_Request_Eject_PC_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Run_Detection( ULONG ulFlags );",
            "name": "CM_Run_Detection"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Run_Detection_Ex( ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Run_Detection_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Class_Property_ExW( [in] LPCGUID ClassGUID, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_Class_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Class_PropertyW( [in] LPCGUID ClassGUID, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Set_Class_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Class_Registry_PropertyA( [in] LPGUID ClassGuid, [in] ULONG ulProperty, [in, optional] PCVOID Buffer, [in] ULONG ulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_Class_Registry_PropertyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Class_Registry_PropertyW( [in] LPGUID ClassGuid, [in] ULONG ulProperty, [in, optional] PCVOID Buffer, [in] ULONG ulLength, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_Class_Registry_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Device_Interface_Property_ExW( [in] LPCWSTR pszDeviceInterface, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_Device_Interface_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_Device_Interface_PropertyW( [in] LPCWSTR pszDeviceInterface, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Set_Device_Interface_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Problem( [in] DEVINST dnDevInst, [in] ULONG ulProblem, [in] ULONG ulFlags );",
            "name": "CM_Set_DevNode_Problem"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Problem_Ex( [in] DEVINST dnDevInst, [in] ULONG ulProblem, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_DevNode_Problem_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Property_ExW( [in] DEVINST dnDevInst, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags, [in, optional] HMACHINE hMachine );",
            "name": "CM_Set_DevNode_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_PropertyW( [in] DEVINST dnDevInst, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in] const PBYTE PropertyBuffer, [in] ULONG PropertyBufferSize, [in] ULONG ulFlags );",
            "name": "CM_Set_DevNode_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Registry_Property_ExA( DEVINST dnDevInst, ULONG ulProperty, PCVOID Buffer, ULONG ulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Set_DevNode_Registry_Property_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Registry_Property_ExW( DEVINST dnDevInst, ULONG ulProperty, PCVOID Buffer, ULONG ulLength, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Set_DevNode_Registry_Property_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Registry_PropertyA( [in] DEVINST dnDevInst, [in] ULONG ulProperty, [in, optional] PCVOID Buffer, [in] ULONG ulLength, [in] ULONG ulFlags );",
            "name": "CM_Set_DevNode_Registry_PropertyA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_DevNode_Registry_PropertyW( [in] DEVINST dnDevInst, [in] ULONG ulProperty, [in, optional] PCVOID Buffer, [in] ULONG ulLength, [in] ULONG ulFlags );",
            "name": "CM_Set_DevNode_Registry_PropertyW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof( ULONG ulHardwareProfile, ULONG ulFlags );",
            "name": "CM_Set_HW_Prof"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof_Ex( ULONG ulHardwareProfile, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Set_HW_Prof_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof_Flags_ExA( DEVINSTID_A pDeviceID, ULONG ulConfig, ULONG ulValue, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Set_HW_Prof_Flags_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof_Flags_ExW( DEVINSTID_W pDeviceID, ULONG ulConfig, ULONG ulValue, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Set_HW_Prof_Flags_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof_FlagsA( DEVINSTID_A pDeviceID, ULONG ulConfig, ULONG ulValue, ULONG ulFlags );",
            "name": "CM_Set_HW_Prof_FlagsA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Set_HW_Prof_FlagsW( DEVINSTID_W pDeviceID, ULONG ulConfig, ULONG ulValue, ULONG ulFlags );",
            "name": "CM_Set_HW_Prof_FlagsW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Setup_DevNode( [in] DEVINST dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Setup_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Setup_DevNode_Ex( DEVINST dnDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Setup_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Test_Range_Available( DWORDLONG ullStartValue, DWORDLONG ullEndValue, RANGE_LIST rlh, ULONG ulFlags );",
            "name": "CM_Test_Range_Available"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Uninstall_DevNode( [in] DEVNODE dnDevInst, [in] ULONG ulFlags );",
            "name": "CM_Uninstall_DevNode"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Uninstall_DevNode_Ex( DEVNODE dnDevInst, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Uninstall_DevNode_Ex"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Unregister_Device_Interface_ExA( LPCSTR pszDeviceInterface, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Unregister_Device_Interface_ExA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Unregister_Device_Interface_ExW( LPCWSTR pszDeviceInterface, ULONG ulFlags, HMACHINE hMachine );",
            "name": "CM_Unregister_Device_Interface_ExW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Unregister_Device_InterfaceA( LPCSTR pszDeviceInterface, ULONG ulFlags );",
            "name": "CM_Unregister_Device_InterfaceA"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Unregister_Device_InterfaceW( LPCWSTR pszDeviceInterface, ULONG ulFlags );",
            "name": "CM_Unregister_Device_InterfaceW"
        },
        {
            "signature": "CMAPI CONFIGRET CM_Unregister_Notification( [in] HCMNOTIFICATION NotifyContext );",
            "name": "CM_Unregister_Notification"
        },
        {
            "signature": "DWORD CM_WaitNoPendingInstallEvents( [in] DWORD dwTimeout );",
            "name": "CM_WaitNoPendingInstallEvents"
        }
    ],
    "Chptrarr.h": [],
    "Chstrarr.h": [],
    "Chstring.h": [
        {
            "signature": "BOOL operator!=( const CHString & s1, const CHString & s2 );",
            "name": "operator!="
        },
        {
            "signature": "BOOL operator!=( const CHString & s1, LPCWSTR s2 );",
            "name": "operator!="
        },
        {
            "signature": "BOOL operator<( const CHString & s1, const CHString & s2 );",
            "name": "operator<"
        },
        {
            "signature": "BOOL operator<( const CHString & s1, LPCWSTR s2 );",
            "name": "operator<"
        },
        {
            "signature": "BOOL operator<=( const CHString & s1, const CHString & s2 );",
            "name": "operator<="
        },
        {
            "signature": "BOOL operator<=( const CHString & s1, LPCWSTR s2 );",
            "name": "operator<="
        },
        {
            "signature": "BOOL operator==( const CHString & s1, const CHString & s2 );",
            "name": "operator=="
        },
        {
            "signature": "BOOL operator==( const CHString & s1, LPCWSTR s2 );",
            "name": "operator=="
        },
        {
            "signature": "BOOL operator>( const CHString & s1, const CHString & s2 );",
            "name": "operator>"
        },
        {
            "signature": "BOOL operator>( const CHString & s1, LPCWSTR s2 );",
            "name": "operator>"
        },
        {
            "signature": "BOOL operator>=( const CHString & s1, const CHString & s2 );",
            "name": "operator>="
        },
        {
            "signature": "BOOL operator>=( const CHString & s1, LPCWSTR s2 );",
            "name": "operator>="
        }
    ],
    "Cimfs.h": [
        {
            "signature": "void CimCloseImage( CIMFS_IMAGE_HANDLE cimImageHandle );",
            "name": "CimCloseImage"
        },
        {
            "signature": "void CimCloseStream( CIMFS_STREAM_HANDLE cimStreamHandle );",
            "name": "CimCloseStream"
        },
        {
            "signature": "HRESULT CimCommitImage( CIMFS_IMAGE_HANDLE cimImageHandle );",
            "name": "CimCommitImage"
        },
        {
            "signature": "HRESULT CimCreateAlternateStream( CIMFS_IMAGE_HANDLE cimImageHandle, PCWSTR imageRelativePath, UINT64 streamSize, CIMFS_STREAM_HANDLE *cimStreamHandle );",
            "name": "CimCreateAlternateStream"
        },
        {
            "signature": "HRESULT CimCreateFile( CIMFS_IMAGE_HANDLE cimImageHandle, PCWSTR imageRelativePath, const CIMFS_FILE_METADATA *fileMetadata, CIMFS_STREAM_HANDLE *cimStreamHandle );",
            "name": "CimCreateFile"
        },
        {
            "signature": "HRESULT CimCreateHardLink( CIMFS_IMAGE_HANDLE cimImageHandle, PCWSTR imageRelativePath, PCWSTR existingImageRelativePath );",
            "name": "CimCreateHardLink"
        },
        {
            "signature": "HRESULT CimCreateImage( PCWSTR imageContainingPath, PCWSTR existingImageName, PCWSTR newImageName, CIMFS_IMAGE_HANDLE *cimImageHandle );",
            "name": "CimCreateImage"
        },
        {
            "signature": "HRESULT CimDeletePath( CIMFS_IMAGE_HANDLE cimImageHandle, PCWSTR imageRelativePath );",
            "name": "CimDeletePath"
        },
        {
            "signature": "HRESULT CimDismountImage( const GUID *volumeId );",
            "name": "CimDismountImage"
        },
        {
            "signature": "HRESULT CimMountImage( PCWSTR imageContainingPath, PCWSTR imageName, CIM_MOUNT_IMAGE_FLAGS mountImageFlags, const GUID *volumeId );",
            "name": "CimMountImage"
        },
        {
            "signature": "HRESULT CimWriteStream( CIMFS_STREAM_HANDLE cimStreamHandle, const void *buffer, UINT32 bufferSize );",
            "name": "CimWriteStream"
        }
    ],
    "Clfs.h": [
        {
            "signature": "CLFSUSER_API BOOLEAN ClfsLsnEqual( [in] const CLFS_LSN *plsn1, [in] const CLFS_LSN *plsn2 );",
            "name": "ClfsLsnEqual"
        },
        {
            "signature": "CLFSUSER_API BOOLEAN ClfsLsnGreater( [in] const CLFS_LSN *plsn1, [in] const CLFS_LSN *plsn2 );",
            "name": "ClfsLsnGreater"
        },
        {
            "signature": "CLFSUSER_API BOOLEAN ClfsLsnLess( [in] const CLFS_LSN *plsn1, [in] const CLFS_LSN *plsn2 );",
            "name": "ClfsLsnLess"
        },
        {
            "signature": "CLFSUSER_API BOOLEAN ClfsLsnNull( [in] const CLFS_LSN *plsn );",
            "name": "ClfsLsnNull"
        }
    ],
    "Clfsmgmt.h": [],
    "Clfsmgmtw32.h": [
        {
            "signature": "CLFSUSER_API BOOL DeregisterManageableLogClient( [in] HANDLE hLog );",
            "name": "DeregisterManageableLogClient"
        },
        {
            "signature": "CLFSUSER_API BOOL HandleLogFull( [in] HANDLE hLog );",
            "name": "HandleLogFull"
        },
        {
            "signature": "CLFSUSER_API BOOL InstallLogPolicy( [in] HANDLE hLog, [in] PCLFS_MGMT_POLICY pPolicy );",
            "name": "InstallLogPolicy"
        },
        {
            "signature": "CLFSUSER_API BOOL LogTailAdvanceFailure( [in] HANDLE hLog, [in] DWORD dwReason );",
            "name": "LogTailAdvanceFailure"
        },
        {
            "signature": "PLOG_FULL_HANDLER_CALLBACK PlogFullHandlerCallback; void PlogFullHandlerCallback( [in] HANDLE hLogFile, [in] DWORD dwError, [in] BOOL fLogIsPinned, [in] PVOID pvClientContext ) {...}",
            "name": "PLOG_FULL_HANDLER_CALLBACK callback"
        },
        {
            "signature": "PLOG_TAIL_ADVANCE_CALLBACK PlogTailAdvanceCallback; void PlogTailAdvanceCallback( [in] HANDLE hLogFile, [in] CLFS_LSN lsnTarget, [in] PVOID pvClientContext ) {...}",
            "name": "PLOG_TAIL_ADVANCE_CALLBACK callback"
        },
        {
            "signature": "PLOG_UNPINNED_CALLBACK PlogUnpinnedCallback; void PlogUnpinnedCallback( [in] HANDLE hLogFile, [in] PVOID pvClientContext ) {...}",
            "name": "PLOG_UNPINNED_CALLBACK callback"
        },
        {
            "signature": "CLFSUSER_API BOOL QueryLogPolicy( [in] HANDLE hLog, [in] CLFS_MGMT_POLICY_TYPE ePolicyType, [out] PCLFS_MGMT_POLICY pPolicyBuffer, [in, out] PULONG pcbPolicyBuffer );",
            "name": "QueryLogPolicy"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadLogNotification( [in] HANDLE hLog, [out] PCLFS_MGMT_NOTIFICATION pNotification, [in] LPOVERLAPPED lpOverlapped );",
            "name": "ReadLogNotification"
        },
        {
            "signature": "CLFSUSER_API BOOL RegisterForLogWriteNotification( [in] HANDLE hLog, [in] ULONG cbThreshold, [in] BOOL fEnable );",
            "name": "RegisterForLogWriteNotification"
        },
        {
            "signature": "CLFSUSER_API BOOL RegisterManageableLogClient( [in] HANDLE hLog, [in] PLOG_MANAGEMENT_CALLBACKS pCallbacks );",
            "name": "RegisterManageableLogClient"
        },
        {
            "signature": "CLFSUSER_API BOOL RemoveLogPolicy( [in] HANDLE hLog, [in] CLFS_MGMT_POLICY_TYPE ePolicyType );",
            "name": "RemoveLogPolicy"
        },
        {
            "signature": "CLFSUSER_API BOOL SetLogFileSizeWithPolicy( [in] HANDLE hLog, [in] PULONGLONG pDesiredSize, [out] PULONGLONG pResultingSize );",
            "name": "SetLogFileSizeWithPolicy"
        }
    ],
    "Clfsw32.h": [
        {
            "signature": "CLFSUSER_API BOOL AddLogContainer( [in] HANDLE hLog, [in, optional] PULONGLONG pcbContainer, [in] LPWSTR pwszContainerPath, [in, out, optional] LPVOID pReserved );",
            "name": "AddLogContainer"
        },
        {
            "signature": "CLFSUSER_API BOOL AddLogContainerSet( [in] HANDLE hLog, [in] USHORT cContainer, [in, optional] PULONGLONG pcbContainer, [in] LPWSTR *rgwszContainerPath, [in, out, optional] LPVOID pReserved );",
            "name": "AddLogContainerSet"
        },
        {
            "signature": "CLFSUSER_API BOOL AdvanceLogBase( [in, out] PVOID pvMarshal, [in] PCLFS_LSN plsnBase, [in] ULONG fFlags, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "AdvanceLogBase"
        },
        {
            "signature": "CLFSUSER_API BOOL AlignReservedLog( [in, out] PVOID pvMarshal, [in] ULONG cReservedRecords, [in] LONGLONG [] rgcbReservation, [out] PLONGLONG pcbAlignReservation );",
            "name": "AlignReservedLog"
        },
        {
            "signature": "CLFSUSER_API BOOL AllocReservedLog( [in, out] PVOID pvMarshal, [in] ULONG cReservedRecords, [in, out] PLONGLONG pcbAdjustment );",
            "name": "AllocReservedLog"
        },
        {
            "signature": "CLFSUSER_API BOOL CloseAndResetLogFile( [in] HANDLE hLog );",
            "name": "CloseAndResetLogFile"
        },
        {
            "signature": "CLFSUSER_API BOOL CreateLogContainerScanContext( [in] HANDLE hLog, [in] ULONG cFromContainer, [in] ULONG cContainers, [in] CLFS_SCAN_MODE eScanMode, [in, out] PCLFS_SCAN_CONTEXT pcxScan, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "CreateLogContainerScanContext"
        },
        {
            "signature": "CLFSUSER_API HANDLE CreateLogFile( [in] LPCWSTR pszLogFileName, [in] ACCESS_MASK fDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES psaLogFile, [in] ULONG fCreateDisposition, [in] ULONG fFlagsAndAttributes );",
            "name": "CreateLogFile"
        },
        {
            "signature": "CLFSUSER_API BOOL CreateLogMarshallingArea( [in] HANDLE hLog, [in, optional] CLFS_BLOCK_ALLOCATION pfnAllocBuffer, [in, optional] CLFS_BLOCK_DEALLOCATION pfnFreeBuffer, [in, optional] PVOID pvBlockAllocContext, [in] ULONG cbMarshallingBuffer, [in] ULONG cMaxWriteBuffers, [in] ULONG cMaxReadBuffers, [out] PVOID *ppvMarshal );",
            "name": "CreateLogMarshallingArea"
        },
        {
            "signature": "CLFSUSER_API BOOL DeleteLogByHandle( [in] HANDLE hLog );",
            "name": "DeleteLogByHandle"
        },
        {
            "signature": "CLFSUSER_API BOOL DeleteLogFile( [in] LPCWSTR pszLogFileName, [in, optional] PVOID pvReserved );",
            "name": "DeleteLogFile"
        },
        {
            "signature": "CLFSUSER_API BOOL DeleteLogMarshallingArea( [in] PVOID pvMarshal );",
            "name": "DeleteLogMarshallingArea"
        },
        {
            "signature": "CLFSUSER_API BOOL DumpLogRecords( [in] PWSTR pwszLogFileName, [in] CLFS_RECORD_TYPE fRecordType, [in, optional] PCLFS_LSN plsnStart, [in, optional] PCLFS_LSN plsnEnd, [in, optional] PFILE pstrmOut, [in, optional] CLFS_PRINT_RECORD_ROUTINE pfnPrintRecord, [in, optional] CLFS_BLOCK_ALLOCATION pfnAllocBlock, [in, optional] CLFS_BLOCK_DEALLOCATION pfnFreeBlock, [in, optional] PVOID pvBlockAllocContext, [in] ULONG cbBlock, [in] ULONG cMaxBlocks );",
            "name": "DumpLogRecords"
        },
        {
            "signature": "CLFSUSER_API BOOL FlushLogBuffers( [in] PVOID pvMarshal, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "FlushLogBuffers"
        },
        {
            "signature": "CLFSUSER_API BOOL FlushLogToLsn( [in] PVOID pvMarshalContext, [in] PCLFS_LSN plsnFlush, [out, optional] PCLFS_LSN plsnLastFlushed, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "FlushLogToLsn"
        },
        {
            "signature": "CLFSUSER_API BOOL FreeReservedLog( [in, out] PVOID pvMarshal, [in] ULONG cReservedRecords, [in, out] PLONGLONG pcbAdjustment );",
            "name": "FreeReservedLog"
        },
        {
            "signature": "CLFSUSER_API BOOL GetLogContainerName( [in] HANDLE hLog, [in] CLFS_CONTAINER_ID cidLogicalContainer, [in, out] LPCWSTR pwstrContainerName, [in] ULONG cLenContainerName, [in, out, optional] PULONG pcActualLenContainerName );",
            "name": "GetLogContainerName"
        },
        {
            "signature": "CLFSUSER_API BOOL GetLogFileInformation( [in] HANDLE hLog, [in, out] PCLFS_INFORMATION pinfoBuffer, [in, out] PULONG cbBuffer );",
            "name": "GetLogFileInformation"
        },
        {
            "signature": "CLFSUSER_API BOOL GetLogIoStatistics( [in] HANDLE hLog, [in, out] PVOID pvStatsBuffer, [in] ULONG cbStatsBuffer, [in] CLFS_IOSTATS_CLASS eStatsClass, [out, optional] PULONG pcbStatsWritten );",
            "name": "GetLogIoStatistics"
        },
        {
            "signature": "CLFSUSER_API BOOL GetNextLogArchiveExtent( [in] CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext, [in, out] CLFS_ARCHIVE_DESCRIPTOR [] rgadExtent, [in] ULONG cDescriptors, [out] PULONG pcDescriptorsReturned );",
            "name": "GetNextLogArchiveExtent"
        },
        {
            "signature": "CLFSUSER_API ULONG LsnBlockOffset( [in] const CLFS_LSN *plsn );",
            "name": "LsnBlockOffset"
        },
        {
            "signature": "CLFSUSER_API CLFS_CONTAINER_ID LsnContainer( [in] const CLFS_LSN *plsn );",
            "name": "LsnContainer"
        },
        {
            "signature": "CLFSUSER_API CLFS_LSN LsnCreate( [in] CLFS_CONTAINER_ID cidContainer, [in] ULONG offBlock, [in] ULONG cRecord );",
            "name": "LsnCreate"
        },
        {
            "signature": "CLFSUSER_API ULONG LsnRecordSequence( [in] const CLFS_LSN *plsn );",
            "name": "LsnRecordSequence"
        },
        {
            "signature": "CLFSUSER_API BOOL PrepareLogArchive( [in] HANDLE hLog, [in, out] PWSTR pszBaseLogFileName, [in] ULONG cLen, [in, optional] const PCLFS_LSN plsnLow, [in, optional] const PCLFS_LSN plsnHigh, [out, optional] PULONG pcActualLength, [out] PULONGLONG poffBaseLogFileData, [out] PULONGLONG pcbBaseLogFileLength, [out] PCLFS_LSN plsnBase, [out] PCLFS_LSN plsnLast, [out] PCLFS_LSN plsnCurrentArchiveTail, [out] PCLFS_LOG_ARCHIVE_CONTEXT ppvArchiveContext );",
            "name": "PrepareLogArchive"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadLogArchiveMetadata( [in] CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext, [in] ULONG cbOffset, [in] ULONG cbBytesToRead, [in, out] PBYTE pbReadBuffer, [out] PULONG pcbBytesRead );",
            "name": "ReadLogArchiveMetadata"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadLogRecord( [in] PVOID pvMarshal, [in] PCLFS_LSN plsnFirst, [in] CLFS_CONTEXT_MODE eContextMode, [out] PVOID *ppvReadBuffer, [out] PULONG pcbReadBuffer, [out] PCLFS_RECORD_TYPE peRecordType, [out] PCLFS_LSN plsnUndoNext, [out] PCLFS_LSN plsnPrevious, [out] PVOID *ppvReadContext, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReadLogRecord"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadLogRestartArea( [in] PVOID pvMarshal, [out] PVOID *ppvRestartBuffer, [out] PULONG pcbRestartBuffer, [out] PCLFS_LSN plsn, [out] PVOID *ppvContext, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReadLogRestartArea"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadNextLogRecord( [in, out] PVOID pvReadContext, [out] PVOID *ppvBuffer, [out] PULONG pcbBuffer, [in, out] PCLFS_RECORD_TYPE peRecordType, [in, optional] PCLFS_LSN plsnUser, [out] PCLFS_LSN plsnUndoNext, [out] PCLFS_LSN plsnPrevious, [out] PCLFS_LSN plsnRecord, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReadNextLogRecord"
        },
        {
            "signature": "CLFSUSER_API BOOL ReadPreviousLogRestartArea( [in] PVOID pvReadContext, [out] PVOID *ppvRestartBuffer, [out] PULONG pcbRestartBuffer, [out] PCLFS_LSN plsnRestart, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReadPreviousLogRestartArea"
        },
        {
            "signature": "CLFSUSER_API BOOL RemoveLogContainer( [in] HANDLE hLog, [in] LPWSTR pwszContainerPath, [in] BOOL fForce, [in, out, optional] LPVOID pReserved );",
            "name": "RemoveLogContainer"
        },
        {
            "signature": "CLFSUSER_API BOOL RemoveLogContainerSet( [in] HANDLE hLog, [in] USHORT cContainer, [in] LPWSTR *rgwszContainerPath, [in] BOOL fForce, [in, out, optional] LPVOID pReserved );",
            "name": "RemoveLogContainerSet"
        },
        {
            "signature": "CLFSUSER_API BOOL ReserveAndAppendLog( [in] PVOID pvMarshal, [in, optional] PCLFS_WRITE_ENTRY rgWriteEntries, [in] ULONG cWriteEntries, [in, optional] PCLFS_LSN plsnUndoNext, [in, optional] PCLFS_LSN plsnPrevious, [in] ULONG cReserveRecords, [in, out, optional] LONGLONG [] rgcbReservation, [in] ULONG fFlags, [out, optional] PCLFS_LSN plsn, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReserveAndAppendLog"
        },
        {
            "signature": "CLFSUSER_API BOOL ReserveAndAppendLogAligned( [in] PVOID pvMarshal, [in, optional] PCLFS_WRITE_ENTRY rgWriteEntries, [in] ULONG cWriteEntries, [in] ULONG cbEntryAlignment, [in, optional] PCLFS_LSN plsnUndoNext, [in, optional] PCLFS_LSN plsnPrevious, [in] ULONG cReserveRecords, [in, out, optional] LONGLONG [] rgcbReservation, [in] ULONG fFlags, [out, optional] PCLFS_LSN plsn, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "ReserveAndAppendLogAligned"
        },
        {
            "signature": "CLFSUSER_API BOOL ScanLogContainers( [in, out] PCLFS_SCAN_CONTEXT pcxScan, [in] CLFS_SCAN_MODE eScanMode, [in, out, optional] LPVOID pReserved );",
            "name": "ScanLogContainers"
        },
        {
            "signature": "CLFSUSER_API BOOL SetEndOfLog( [in] HANDLE hLog, [in] PCLFS_LSN plsnEnd, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "SetEndOfLog"
        },
        {
            "signature": "CLFSUSER_API BOOL SetLogArchiveMode( [in] HANDLE hLog, [in] CLFS_LOG_ARCHIVE_MODE eMode );",
            "name": "SetLogArchiveMode"
        },
        {
            "signature": "CLFSUSER_API BOOL SetLogArchiveTail( [in] HANDLE hLog, [in] PCLFS_LSN plsnArchiveTail, [in, out, optional] LPVOID pReserved );",
            "name": "SetLogArchiveTail"
        },
        {
            "signature": "CLFSUSER_API BOOL TerminateLogArchive( [in] CLFS_LOG_ARCHIVE_CONTEXT pvArchiveContext );",
            "name": "TerminateLogArchive"
        },
        {
            "signature": "CLFSUSER_API BOOL TerminateReadLog( [in] PVOID pvCursorContext );",
            "name": "TerminateReadLog"
        },
        {
            "signature": "CLFSUSER_API BOOL TruncateLog( [in] PVOID pvMarshal, [in] PCLFS_LSN plsnEnd, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "TruncateLog"
        },
        {
            "signature": "CLFSUSER_API BOOL ValidateLog( [in] LPCWSTR pszLogFileName, [in, optional] LPSECURITY_ATTRIBUTES psaLogFile, [out, optional] PCLFS_INFORMATION pinfoBuffer, [in, out] PULONG pcbBuffer );",
            "name": "ValidateLog"
        },
        {
            "signature": "CLFSUSER_API BOOL WriteLogRestartArea( [in, out] PVOID pvMarshal, [in] PVOID pvRestartBuffer, [in] ULONG cbRestartBuffer, [in, optional] PCLFS_LSN plsnBase, [in] ULONG fFlags, [out, optional] PULONG pcbWritten, [out, optional] PCLFS_LSN plsnNext, [in, out, optional] LPOVERLAPPED pOverlapped );",
            "name": "WriteLogRestartArea"
        }
    ],
    "Cloneviewhelper.h": [],
    "Cluadmex.h": [],
    "Clusapi.h": [
        {
            "signature": "DWORD AddClusterGroupDependency( [in] HGROUP hDependentGroup, [in] HGROUP hProviderGroup );",
            "name": "AddClusterGroupDependency"
        },
        {
            "signature": "DWORD AddClusterGroupSetDependency( [in] HGROUPSET hDependentGroupSet, [in] HGROUPSET hProviderGroupSet );",
            "name": "AddClusterGroupSetDependency"
        },
        {
            "signature": "DWORD AddClusterGroupToGroupSetDependency( [in] HGROUP hDependentGroup, [in] HGROUPSET hProviderGroupSet );",
            "name": "AddClusterGroupToGroupSetDependency"
        },
        {
            "signature": "HNODE AddClusterNode( [in] HCLUSTER hCluster, [in] PCWSTR lpszNodeName, [in, optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg );",
            "name": "AddClusterNode"
        },
        {
            "signature": "DWORD AddClusterResourceDependency( [in] HRESOURCE hResource, [in] HRESOURCE hDependsOn );",
            "name": "AddClusterResourceDependency"
        },
        {
            "signature": "DWORD AddClusterResourceNode( [in] HRESOURCE hResource, [in] HNODE hNode );",
            "name": "AddClusterResourceNode"
        },
        {
            "signature": "DWORD AddResourceToClusterSharedVolumes( [in] HRESOURCE hResource );",
            "name": "AddResourceToClusterSharedVolumes"
        },
        {
            "signature": "DWORD BackupClusterDatabase( [in] HCLUSTER hCluster, [in] LPCWSTR lpszPathName );",
            "name": "BackupClusterDatabase"
        },
        {
            "signature": "DWORD CancelClusterGroupOperation( [in] HGROUP hGroup, [in] DWORD dwCancelFlags_RESERVED );",
            "name": "CancelClusterGroupOperation"
        },
        {
            "signature": "BOOL CanResourceBeDependent( [in] HRESOURCE hResource, [in] HRESOURCE hResourceDependent );",
            "name": "CanResourceBeDependent"
        },
        {
            "signature": "DWORD ChangeClusterResourceGroup( [in] HRESOURCE hResource, [in] HGROUP hGroup );",
            "name": "ChangeClusterResourceGroup"
        },
        {
            "signature": "BOOL CloseCluster( [in] HCLUSTER hCluster );",
            "name": "CloseCluster"
        },
        {
            "signature": "BOOL CloseClusterGroup( [in] HGROUP hGroup );",
            "name": "CloseClusterGroup"
        },
        {
            "signature": "BOOL CloseClusterGroupSet( [in] HGROUPSET hGroupSet );",
            "name": "CloseClusterGroupSet"
        },
        {
            "signature": "BOOL CloseClusterNetInterface( [in] HNETINTERFACE hNetInterface );",
            "name": "CloseClusterNetInterface"
        },
        {
            "signature": "BOOL CloseClusterNetwork( [in] HNETWORK hNetwork );",
            "name": "CloseClusterNetwork"
        },
        {
            "signature": "BOOL CloseClusterNode( [in] HNODE hNode );",
            "name": "CloseClusterNode"
        },
        {
            "signature": "BOOL CloseClusterNotifyPort( [in] HCHANGE hChange );",
            "name": "CloseClusterNotifyPort"
        },
        {
            "signature": "BOOL CloseClusterResource( [in] HRESOURCE hResource );",
            "name": "CloseClusterResource"
        },
        {
            "signature": "DWORD ClusterAddGroupToGroupSet( [in] HGROUPSET hGroupSet, [in] HGROUP hGroup );",
            "name": "ClusterAddGroupToGroupSet"
        },
        {
            "signature": "DWORD ClusterCloseEnum( [in] HCLUSENUM hEnum );",
            "name": "ClusterCloseEnum"
        },
        {
            "signature": "DWORD ClusterCloseEnumEx( [in] HCLUSENUMEX hClusterEnum );",
            "name": "ClusterCloseEnumEx"
        },
        {
            "signature": "DWORD ClusterControl( [in] HCLUSTER hCluster, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterControl"
        },
        {
            "signature": "DWORD ClusterEnum( [in] HCLUSENUM hEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterEnum"
        },
        {
            "signature": "DWORD ClusterEnumEx( [in] HCLUSENUMEX hClusterEnum, [in] DWORD dwIndex, [in, out] PCLUSTER_ENUM_ITEM pItem, [in, out] LPDWORD cbItem );",
            "name": "ClusterEnumEx"
        },
        {
            "signature": "DWORD ClusterGetEnumCount( [in] HCLUSENUM hEnum );",
            "name": "ClusterGetEnumCount"
        },
        {
            "signature": "DWORD ClusterGetEnumCountEx( [in] HCLUSENUMEX hClusterEnum );",
            "name": "ClusterGetEnumCountEx"
        },
        {
            "signature": "DWORD ClusterGroupCloseEnum( [in] HGROUPENUM hGroupEnum );",
            "name": "ClusterGroupCloseEnum"
        },
        {
            "signature": "DWORD ClusterGroupCloseEnumEx( [in] HGROUPENUMEX hGroupEnumEx );",
            "name": "ClusterGroupCloseEnumEx"
        },
        {
            "signature": "DWORD ClusterGroupControl( [in] HGROUP hGroup, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterGroupControl"
        },
        {
            "signature": "DWORD ClusterGroupEnum( [in] HGROUPENUM hGroupEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszResourceName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterGroupEnum"
        },
        {
            "signature": "DWORD ClusterGroupEnumEx( [in] HGROUPENUMEX hGroupEnumEx, [in] DWORD dwIndex, [in, out] PCLUSTER_GROUP_ENUM_ITEM pItem, [in, out] LPDWORD cbItem );",
            "name": "ClusterGroupEnumEx"
        },
        {
            "signature": "DWORD ClusterGroupGetEnumCount( [in] HGROUPENUM hGroupEnum );",
            "name": "ClusterGroupGetEnumCount"
        },
        {
            "signature": "DWORD ClusterGroupGetEnumCountEx( [in] HGROUPENUMEX hGroupEnumEx );",
            "name": "ClusterGroupGetEnumCountEx"
        },
        {
            "signature": "HGROUPENUM ClusterGroupOpenEnum( [in] HGROUP hGroup, [in] DWORD dwType );",
            "name": "ClusterGroupOpenEnum"
        },
        {
            "signature": "HGROUPENUMEX ClusterGroupOpenEnumEx( [in] HCLUSTER hCluster, LPCWSTR lpszProperties, [in] DWORD cbProperties, LPCWSTR lpszRoProperties, [in] DWORD cbRoProperties, [in] DWORD dwFlags );",
            "name": "ClusterGroupOpenEnumEx"
        },
        {
            "signature": "DWORD ClusterGroupSetCloseEnum( [in] HGROUPSETENUM hGroupSetEnum );",
            "name": "ClusterGroupSetCloseEnum"
        },
        {
            "signature": "DWORD ClusterGroupSetControl( [in] HGROUPSET hGroupSet, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD cbInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD cbOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterGroupSetControl"
        },
        {
            "signature": "DWORD ClusterGroupSetEnum( [in] HGROUPSETENUM hGroupSetEnum, [in] DWORD dwIndex, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterGroupSetEnum"
        },
        {
            "signature": "DWORD ClusterGroupSetGetEnumCount( [in] HGROUPSETENUM hGroupSetEnum );",
            "name": "ClusterGroupSetGetEnumCount"
        },
        {
            "signature": "HGROUPSETENUM ClusterGroupSetOpenEnum( [in] HCLUSTER hCluster );",
            "name": "ClusterGroupSetOpenEnum"
        },
        {
            "signature": "DWORD ClusterNetInterfaceCloseEnum( [in] HNETINTERFACEENUM hNetInterfaceEnum );",
            "name": "ClusterNetInterfaceCloseEnum"
        },
        {
            "signature": "DWORD ClusterNetInterfaceControl( [in] HNETINTERFACE hNetInterface, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterNetInterfaceControl"
        },
        {
            "signature": "DWORD ClusterNetInterfaceEnum( [in] HNETINTERFACEENUM hNetInterfaceEnum, [in] DWORD dwIndex, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterNetInterfaceEnum"
        },
        {
            "signature": "HNETINTERFACEENUM ClusterNetInterfaceOpenEnum( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszNodeName, [in, optional] LPCWSTR lpszNetworkName );",
            "name": "ClusterNetInterfaceOpenEnum"
        },
        {
            "signature": "DWORD ClusterNetworkCloseEnum( [in] HNETWORKENUM hNetworkEnum );",
            "name": "ClusterNetworkCloseEnum"
        },
        {
            "signature": "DWORD ClusterNetworkControl( [in] HNETWORK hNetwork, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [in, out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterNetworkControl"
        },
        {
            "signature": "DWORD ClusterNetworkEnum( [in] HNETWORKENUM hNetworkEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterNetworkEnum"
        },
        {
            "signature": "DWORD ClusterNetworkGetEnumCount( [in] HNETWORKENUM hNetworkEnum );",
            "name": "ClusterNetworkGetEnumCount"
        },
        {
            "signature": "HNETWORKENUM ClusterNetworkOpenEnum( [in] HNETWORK hNetwork, [in] DWORD dwType );",
            "name": "ClusterNetworkOpenEnum"
        },
        {
            "signature": "DWORD ClusterNodeCloseEnum( [in] HNODEENUM hNodeEnum );",
            "name": "ClusterNodeCloseEnum"
        },
        {
            "signature": "DWORD ClusterNodeCloseEnumEx( [in] HNODEENUMEX hNodeEnum );",
            "name": "ClusterNodeCloseEnumEx"
        },
        {
            "signature": "DWORD ClusterNodeControl( [in] HNODE hNode, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterNodeControl"
        },
        {
            "signature": "DWORD ClusterNodeEnum( [in] HNODEENUM hNodeEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterNodeEnum"
        },
        {
            "signature": "DWORD ClusterNodeEnumEx( [in] HNODEENUMEX hNodeEnum, [in] DWORD dwIndex, [in, out] PCLUSTER_ENUM_ITEM pItem, [in, out] LPDWORD cbItem );",
            "name": "ClusterNodeEnumEx"
        },
        {
            "signature": "DWORD ClusterNodeGetEnumCount( [in] HNODEENUM hNodeEnum );",
            "name": "ClusterNodeGetEnumCount"
        },
        {
            "signature": "DWORD ClusterNodeGetEnumCountEx( [in] HNODEENUMEX hNodeEnum );",
            "name": "ClusterNodeGetEnumCountEx"
        },
        {
            "signature": "HNODEENUM ClusterNodeOpenEnum( [in] HNODE hNode, [in] DWORD dwType );",
            "name": "ClusterNodeOpenEnum"
        },
        {
            "signature": "HNODEENUMEX ClusterNodeOpenEnumEx( [in] HNODE hNode, [in] DWORD dwType, [in, optional] [in, optional] PVOID pOptions );",
            "name": "ClusterNodeOpenEnumEx"
        },
        {
            "signature": "HCLUSENUM ClusterOpenEnum( [in] HCLUSTER hCluster, [in] DWORD dwType );",
            "name": "ClusterOpenEnum"
        },
        {
            "signature": "HCLUSENUMEX ClusterOpenEnumEx( [in] HCLUSTER hCluster, [in] DWORD dwType, [in, optional] [in, optional] PVOID pOptions );",
            "name": "ClusterOpenEnumEx"
        },
        {
            "signature": "LONG ClusterRegBatchAddCommand( [in] HREGBATCH hRegBatch, [in] CLUSTER_REG_COMMAND dwCommand, [in, optional] LPCWSTR wzName, [in] DWORD dwOptions, [in, optional] VOID const *lpData, [in] DWORD cbData );",
            "name": "ClusterRegBatchAddCommand"
        },
        {
            "signature": "LONG ClusterRegBatchCloseNotification( [in] HREGBATCHNOTIFICATION hBatchNotification );",
            "name": "ClusterRegBatchCloseNotification"
        },
        {
            "signature": "LONG ClusterRegBatchReadCommand( [in] HREGBATCHNOTIFICATION hBatchNotification, [out] CLUSTER_BATCH_COMMAND *pBatchCommand );",
            "name": "ClusterRegBatchReadCommand"
        },
        {
            "signature": "LONG ClusterRegCloseBatch( [in] HREGBATCH hRegBatch, [in] BOOL bCommit, [out, optional] INT *failedCommandNumber );",
            "name": "ClusterRegCloseBatch"
        },
        {
            "signature": "LONG ClusterRegCloseBatchEx( [in] HREGBATCH hRegBatch, [in] DWORD flags, [out, optional] INT *failedCommandNumber );",
            "name": "ClusterRegCloseBatchEx"
        },
        {
            "signature": "LONG ClusterRegCloseBatchNotifyPort( [in] HREGBATCHPORT hBatchNotifyPort );",
            "name": "ClusterRegCloseBatchNotifyPort"
        },
        {
            "signature": "LONG ClusterRegCloseKey( [in] HKEY hKey );",
            "name": "ClusterRegCloseKey"
        },
        {
            "signature": "LONG ClusterRegCloseReadBatch( [in] HREGREADBATCH hRegReadBatch, [out] HREGREADBATCHREPLY *phRegReadBatchReply );",
            "name": "ClusterRegCloseReadBatch"
        },
        {
            "signature": "LONG ClusterRegCloseReadBatchEx( [in] HREGREADBATCH hRegReadBatch, DWORD flags, [out] HREGREADBATCHREPLY *phRegReadBatchReply );",
            "name": "ClusterRegCloseReadBatchEx"
        },
        {
            "signature": "LONG ClusterRegCloseReadBatchReply( [in] HREGREADBATCHREPLY hRegReadBatchReply );",
            "name": "ClusterRegCloseReadBatchReply"
        },
        {
            "signature": "LONG ClusterRegCreateBatch( [in, optional] HKEY hKey, [out] HREGBATCH *pHREGBATCH );",
            "name": "ClusterRegCreateBatch"
        },
        {
            "signature": "LONG ClusterRegCreateBatchNotifyPort( [in] HKEY hKey, [out] HREGBATCHPORT *phBatchNotifyPort );",
            "name": "ClusterRegCreateBatchNotifyPort"
        },
        {
            "signature": "LONG ClusterRegCreateKey( [in] HKEY hKey, [in] LPCWSTR lpszSubKey, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition );",
            "name": "ClusterRegCreateKey"
        },
        {
            "signature": "LONG ClusterRegCreateReadBatch( [in] HKEY hKey, [out] HREGREADBATCH *phRegReadBatch );",
            "name": "ClusterRegCreateReadBatch"
        },
        {
            "signature": "LONG ClusterRegDeleteKey( [in] HKEY hKey, [in] LPCWSTR lpszSubKey );",
            "name": "ClusterRegDeleteKey"
        },
        {
            "signature": "DWORD ClusterRegDeleteValue( [in] HKEY hKey, [in] LPCWSTR lpszValueName );",
            "name": "ClusterRegDeleteValue"
        },
        {
            "signature": "LONG ClusterRegEnumKey( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName, [out, optional] PFILETIME lpftLastWriteTime );",
            "name": "ClusterRegEnumKey"
        },
        {
            "signature": "DWORD ClusterRegEnumValue( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPWSTR lpszValueName, [in, out] LPDWORD lpcchValueName, [out, optional] LPDWORD lpdwType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "ClusterRegEnumValue"
        },
        {
            "signature": "LONG ClusterRegGetBatchNotification( [in] HREGBATCHPORT hBatchNotify, [out] HREGBATCHNOTIFICATION *phBatchNotification );",
            "name": "ClusterRegGetBatchNotification"
        },
        {
            "signature": "LONG ClusterRegGetKeySecurity( [in] HKEY hKey, [in] SECURITY_INFORMATION RequestedInformation, [out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, out] LPDWORD lpcbSecurityDescriptor );",
            "name": "ClusterRegGetKeySecurity"
        },
        {
            "signature": "LONG ClusterRegOpenKey( [in] HKEY hKey, [in] LPCWSTR lpszSubKey, [in] REGSAM samDesired, [out] PHKEY phkResult );",
            "name": "ClusterRegOpenKey"
        },
        {
            "signature": "LONG ClusterRegQueryInfoKey( [in] HKEY hKey, [in] LPDWORD lpcSubKeys, [in] LPDWORD lpcchMaxSubKeyLen, [in] LPDWORD lpcValues, [in] LPDWORD lpcchMaxValueNameLen, [in] LPDWORD lpcbMaxValueLen, [in] LPDWORD lpcbSecurityDescriptor, [in] PFILETIME lpftLastWriteTime );",
            "name": "ClusterRegQueryInfoKey"
        },
        {
            "signature": "LONG ClusterRegQueryValue( [in] HKEY hKey, [in] LPCWSTR lpszValueName, [out, optional] LPDWORD lpdwValueType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "ClusterRegQueryValue"
        },
        {
            "signature": "LONG ClusterRegReadBatchAddCommand( [in] HREGREADBATCH hRegReadBatch, [in, optional] LPCWSTR wzSubkeyName, [in, optional] LPCWSTR wzValueName );",
            "name": "ClusterRegReadBatchAddCommand"
        },
        {
            "signature": "LONG ClusterRegReadBatchReplyNextCommand( [in] HREGREADBATCHREPLY hRegReadBatchReply, [out] CLUSTER_READ_BATCH_COMMAND *pBatchCommand );",
            "name": "ClusterRegReadBatchReplyNextCommand"
        },
        {
            "signature": "LONG ClusterRegSetKeySecurity( [in] HKEY hKey, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "ClusterRegSetKeySecurity"
        },
        {
            "signature": "DWORD ClusterRegSetValue( [in] HKEY hKey, [in] LPCWSTR lpszValueName, [in] DWORD dwType, [in] const BYTE *lpData, [in] DWORD cbData );",
            "name": "ClusterRegSetValue"
        },
        {
            "signature": "LONG ClusterRegSyncDatabase( HCLUSTER hCluster, DWORD flags );",
            "name": "ClusterRegSyncDatabase"
        },
        {
            "signature": "DWORD ClusterRemoveGroupFromGroupSet( [in] HGROUP hGroup );",
            "name": "ClusterRemoveGroupFromGroupSet"
        },
        {
            "signature": "DWORD ClusterResourceCloseEnum( [in] HRESENUM hResEnum );",
            "name": "ClusterResourceCloseEnum"
        },
        {
            "signature": "DWORD ClusterResourceCloseEnumEx( [in] HRESENUMEX hResourceEnumEx );",
            "name": "ClusterResourceCloseEnumEx"
        },
        {
            "signature": "DWORD ClusterResourceControl( [in] HRESOURCE hResource, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD cbInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD cbOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterResourceControl"
        },
        {
            "signature": "DWORD ClusterResourceControlAsUser( [in] HRESOURCE hResource, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD cbInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD cbOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterResourceControlAsUser"
        },
        {
            "signature": "DWORD ClusterResourceEnum( [in] HRESENUM hResEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterResourceEnum"
        },
        {
            "signature": "DWORD ClusterResourceEnumEx( [in] HRESENUMEX hResourceEnumEx, [in] DWORD dwIndex, [in, out] PCLUSTER_RESOURCE_ENUM_ITEM pItem, [in, out] LPDWORD cbItem );",
            "name": "ClusterResourceEnumEx"
        },
        {
            "signature": "DWORD ClusterResourceGetEnumCount( [in] HRESENUM hResEnum );",
            "name": "ClusterResourceGetEnumCount"
        },
        {
            "signature": "DWORD ClusterResourceGetEnumCountEx( [in] HRESENUMEX hResourceEnumEx );",
            "name": "ClusterResourceGetEnumCountEx"
        },
        {
            "signature": "HRESENUM ClusterResourceOpenEnum( [in] HRESOURCE hResource, [in] DWORD dwType );",
            "name": "ClusterResourceOpenEnum"
        },
        {
            "signature": "HRESENUMEX ClusterResourceOpenEnumEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszProperties, [in] DWORD cbProperties, [in, optional] LPCWSTR lpszRoProperties, [in] DWORD cbRoProperties, [in] DWORD dwFlags );",
            "name": "ClusterResourceOpenEnumEx"
        },
        {
            "signature": "DWORD ClusterResourceTypeCloseEnum( [in] HRESTYPEENUM hResTypeEnum );",
            "name": "ClusterResourceTypeCloseEnum"
        },
        {
            "signature": "DWORD ClusterResourceTypeControl( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceTypeName, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterResourceTypeControl"
        },
        {
            "signature": "DWORD ClusterResourceTypeControlAsUser( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceTypeName, [in, optional] HNODE hHostNode, [in] DWORD dwControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned );",
            "name": "ClusterResourceTypeControlAsUser"
        },
        {
            "signature": "DWORD ClusterResourceTypeEnum( [in] HRESTYPEENUM hResTypeEnum, [in] DWORD dwIndex, [out] LPDWORD lpdwType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName );",
            "name": "ClusterResourceTypeEnum"
        },
        {
            "signature": "DWORD ClusterResourceTypeGetEnumCount( [in] HRESTYPEENUM hResTypeEnum );",
            "name": "ClusterResourceTypeGetEnumCount"
        },
        {
            "signature": "HRESTYPEENUM ClusterResourceTypeOpenEnum( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceTypeName, [in] DWORD dwType );",
            "name": "ClusterResourceTypeOpenEnum"
        },
        {
            "signature": "DWORD ClusterSetAccountAccess( [in] HCLUSTER hCluster, [in] LPCWSTR szAccountSID, [in] DWORD dwAccess, [in] DWORD dwControlType );",
            "name": "ClusterSetAccountAccess"
        },
        {
            "signature": "DWORD ClusterSharedVolumeSetSnapshotState( [in] GUID guidSnapshotSet, [in] LPCWSTR lpszVolumeName, [in] CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE state );",
            "name": "ClusterSharedVolumeSetSnapshotState"
        },
        {
            "signature": "DWORD ClusterUpgradeFunctionalLevel( [in] HCLUSTER hCluster, [in] BOOL perform, [in, optional] PCLUSTER_UPGRADE_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg );",
            "name": "ClusterUpgradeFunctionalLevel"
        },
        {
            "signature": "HCLUSTER CreateCluster( [in] PCREATE_CLUSTER_CONFIG pConfig, [in, optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg );",
            "name": "CreateCluster"
        },
        {
            "signature": "HCLUSTER CreateClusterCNOless( [in] PCREATE_CLUSTER_CONFIG pConfig, [in, optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg );",
            "name": "CreateClusterCNOless"
        },
        {
            "signature": "HGROUP CreateClusterGroup( [in] HCLUSTER hCluster, [in] LPCWSTR lpszGroupName );",
            "name": "CreateClusterGroup"
        },
        {
            "signature": "HGROUP CreateClusterGroupEx( [in] HCLUSTER hCluster, [in] LPCWSTR lpszGroupName, [in, optional] PCLUSTER_CREATE_GROUP_INFO pGroupInfo );",
            "name": "CreateClusterGroupEx"
        },
        {
            "signature": "HGROUPSET CreateClusterGroupSet( [in] HCLUSTER hCluster, [in] LPCWSTR groupSetName );",
            "name": "CreateClusterGroupSet"
        },
        {
            "signature": "DWORD CreateClusterNameAccount( [in] HCLUSTER hCluster, [in] PCREATE_CLUSTER_NAME_ACCOUNT pConfig, [in, optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg );",
            "name": "CreateClusterNameAccount"
        },
        {
            "signature": "HCHANGE CreateClusterNotifyPort( [in] HCHANGE hChange, [in] HCLUSTER hCluster, [in] DWORD dwFilter, [in] DWORD_PTR dwNotifyKey );",
            "name": "CreateClusterNotifyPort"
        },
        {
            "signature": "HCHANGE CreateClusterNotifyPortV2( [in] HCHANGE hChange, [in] HCLUSTER hCluster, [in] NOTIFY_FILTER_AND_TYPE *Filters, [in] DWORD dwFilterCount, [in] DWORD_PTR dwNotifyKey );",
            "name": "CreateClusterNotifyPortV2"
        },
        {
            "signature": "HRESOURCE CreateClusterResource( [in] HGROUP hGroup, [in] LPCWSTR lpszResourceName, [in] LPCWSTR lpszResourceType, [in] DWORD dwFlags );",
            "name": "CreateClusterResource"
        },
        {
            "signature": "DWORD CreateClusterResourceType( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceTypeName, [in] LPCWSTR lpszDisplayName, [in] LPCWSTR lpszResourceTypeDll, [in] DWORD dwLooksAlivePollInterval, [in] DWORD dwIsAlivePollInterval );",
            "name": "CreateClusterResourceType"
        },
        {
            "signature": "DWORD DeleteClusterGroup( [in] HGROUP hGroup );",
            "name": "DeleteClusterGroup"
        },
        {
            "signature": "DWORD DeleteClusterGroupSet( [in] HGROUPSET hGroupSet );",
            "name": "DeleteClusterGroupSet"
        },
        {
            "signature": "DWORD DeleteClusterResource( [in] HRESOURCE hResource );",
            "name": "DeleteClusterResource"
        },
        {
            "signature": "DWORD DeleteClusterResourceType( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceTypeName );",
            "name": "DeleteClusterResourceType"
        },
        {
            "signature": "DWORD DestroyCluster( [in] HCLUSTER hCluster, [in, optional] PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, [in, optional] PVOID pvCallbackArg, [in] BOOL fdeleteVirtualComputerObjects );",
            "name": "DestroyCluster"
        },
        {
            "signature": "DWORD DestroyClusterGroup( [in] HGROUP hGroup );",
            "name": "DestroyClusterGroup"
        },
        {
            "signature": "DWORD EvictClusterNode( [in] HNODE hNode );",
            "name": "EvictClusterNode"
        },
        {
            "signature": "DWORD EvictClusterNodeEx( [in] HNODE hNode, [in] DWORD dwTimeOut, [out] HRESULT *phrCleanupStatus );",
            "name": "EvictClusterNodeEx"
        },
        {
            "signature": "DWORD FailClusterResource( [in] HRESOURCE hResource );",
            "name": "FailClusterResource"
        },
        {
            "signature": "HCLUSTER GetClusterFromGroup( [in] HGROUP hGroup );",
            "name": "GetClusterFromGroup"
        },
        {
            "signature": "HCLUSTER GetClusterFromGroupSet( [in] [in] HGROUPSET hGroupSet );",
            "name": "GetClusterFromGroupSet"
        },
        {
            "signature": "HCLUSTER GetClusterFromNetInterface( [in] HNETINTERFACE hNetInterface );",
            "name": "GetClusterFromNetInterface"
        },
        {
            "signature": "HCLUSTER GetClusterFromNetwork( [in] HNETWORK hNetwork );",
            "name": "GetClusterFromNetwork"
        },
        {
            "signature": "HCLUSTER GetClusterFromNode( [in] HNODE hNode );",
            "name": "GetClusterFromNode"
        },
        {
            "signature": "HCLUSTER GetClusterFromResource( [in] HRESOURCE hResource );",
            "name": "GetClusterFromResource"
        },
        {
            "signature": "HKEY GetClusterGroupKey( [in] HGROUP hGroup, [in] REGSAM samDesired );",
            "name": "GetClusterGroupKey"
        },
        {
            "signature": "CLUSTER_GROUP_STATE GetClusterGroupState( [in] HGROUP hGroup, [out, optional] LPWSTR lpszNodeName, [in, out, optional] LPDWORD lpcchNodeName );",
            "name": "GetClusterGroupState"
        },
        {
            "signature": "DWORD GetClusterInformation( [in] HCLUSTER hCluster, [out] LPWSTR lpszClusterName, [in, out] LPDWORD lpcchClusterName, [out, optional] LPCLUSTERVERSIONINFO lpClusterInfo );",
            "name": "GetClusterInformation"
        },
        {
            "signature": "HKEY GetClusterKey( [in] HCLUSTER hCluster, [in] REGSAM samDesired );",
            "name": "GetClusterKey"
        },
        {
            "signature": "DWORD GetClusterNetInterface( [in] HCLUSTER hCluster, [in] LPCWSTR lpszNodeName, [in] LPCWSTR lpszNetworkName, [out] LPWSTR lpszInterfaceName, [in, out] LPDWORD lpcchInterfaceName );",
            "name": "GetClusterNetInterface"
        },
        {
            "signature": "HKEY GetClusterNetInterfaceKey( [in] HNETINTERFACE hNetInterface, [in] REGSAM samDesired );",
            "name": "GetClusterNetInterfaceKey"
        },
        {
            "signature": "CLUSTER_NETINTERFACE_STATE GetClusterNetInterfaceState( [in] HNETINTERFACE hNetInterface );",
            "name": "GetClusterNetInterfaceState"
        },
        {
            "signature": "DWORD GetClusterNetworkId( [in] HNETWORK hNetwork, [out] LPWSTR lpszNetworkId, [in, out] LPDWORD lpcchName );",
            "name": "GetClusterNetworkId"
        },
        {
            "signature": "HKEY GetClusterNetworkKey( [in] HNETWORK hNetwork, [in] REGSAM samDesired );",
            "name": "GetClusterNetworkKey"
        },
        {
            "signature": "CLUSTER_NETWORK_STATE GetClusterNetworkState( [in] HNETWORK hNetwork );",
            "name": "GetClusterNetworkState"
        },
        {
            "signature": "DWORD GetClusterNodeId( [in, optional] HNODE hNode, [out] LPWSTR lpszNodeId, [in, out] LPDWORD lpcchName );",
            "name": "GetClusterNodeId"
        },
        {
            "signature": "HKEY GetClusterNodeKey( [in] HNODE hNode, [in] REGSAM samDesired );",
            "name": "GetClusterNodeKey"
        },
        {
            "signature": "CLUSTER_NODE_STATE GetClusterNodeState( [in] HNODE hNode );",
            "name": "GetClusterNodeState"
        },
        {
            "signature": "DWORD GetClusterNotify( [in] HCHANGE hChange, [out] DWORD_PTR *lpdwNotifyKey, [out] LPDWORD lpdwFilterType, [out] LPWSTR lpszName, [in, out] LPDWORD lpcchName, [in, optional] DWORD dwMilliseconds );",
            "name": "GetClusterNotify"
        },
        {
            "signature": "DWORD GetClusterNotifyV2( [in] HCHANGE hChange, [out] DWORD_PTR *lpdwNotifyKey, [in, out, optional] PNOTIFY_FILTER_AND_TYPE pFilterAndType, [in, out, optional] BYTE *buffer, [in, out, optional] LPDWORD lpbBufferSize, [in, out, optional] LPWSTR lpszObjectId, [in, out, optional] LPDWORD lpcchObjectId, [in, out, optional] LPWSTR lpszParentId, [in, out, optional] LPDWORD lpcchParentId, [in, out, optional] LPWSTR lpszName, [in, out, optional] LPDWORD lpcchName, [in, out, optional] LPWSTR lpszType, [in, out, optional] LPDWORD lpcchType, [in, optional] DWORD dwMilliseconds );",
            "name": "GetClusterNotifyV2"
        },
        {
            "signature": "DWORD GetClusterQuorumResource( [in] HCLUSTER hCluster, [out] LPWSTR lpszResourceName, [in, out] LPDWORD lpcchResourceName, [out] LPWSTR lpszDeviceName, [in, out] LPDWORD lpcchDeviceName, [out] LPDWORD lpdwMaxQuorumLogSize );",
            "name": "GetClusterQuorumResource"
        },
        {
            "signature": "DWORD GetClusterResourceDependencyExpression( [in] HRESOURCE hResource, [out, optional] LPWSTR lpszDependencyExpression, [in, out] LPDWORD lpcchDependencyExpression );",
            "name": "GetClusterResourceDependencyExpression"
        },
        {
            "signature": "HKEY GetClusterResourceKey( [in] HRESOURCE hResource, [in] REGSAM samDesired );",
            "name": "GetClusterResourceKey"
        },
        {
            "signature": "BOOL GetClusterResourceNetworkName( [in] HRESOURCE hResource, [out] LPWSTR lpBuffer, [in, out] LPDWORD nSize );",
            "name": "GetClusterResourceNetworkName"
        },
        {
            "signature": "CLUSTER_RESOURCE_STATE GetClusterResourceState( [in] HRESOURCE hResource, [out, optional] LPWSTR lpszNodeName, [in, out, optional] LPDWORD lpcchNodeName, [out, optional] LPWSTR lpszGroupName, [in, out, optional] LPDWORD lpcchGroupName );",
            "name": "GetClusterResourceState"
        },
        {
            "signature": "HKEY GetClusterResourceTypeKey( [in] HCLUSTER hCluster, [in] LPCWSTR lpszTypeName, [in] REGSAM samDesired );",
            "name": "GetClusterResourceTypeKey"
        },
        {
            "signature": "DWORD GetNodeClusterState( [in, optional] LPCWSTR lpszNodeName, [out] LPDWORD pdwClusterState );",
            "name": "GetNodeClusterState"
        },
        {
            "signature": "DWORD GetNotifyEventHandle( [in] HCHANGE hChange, [out] LPHANDLE lphTargetEvent );",
            "name": "GetNotifyEventHandle"
        },
        {
            "signature": "DWORD IsFileOnClusterSharedVolume( [in] LPCWSTR lpszPathName, [out] PBOOL pbFileIsOnSharedVolume );",
            "name": "IsFileOnClusterSharedVolume"
        },
        {
            "signature": "DWORD MoveClusterGroup( [in] HGROUP hGroup, [in, optional] HNODE hDestinationNode );",
            "name": "MoveClusterGroup"
        },
        {
            "signature": "DWORD MoveClusterGroupEx( [in] HGROUP hGroup, [in, optional] HNODE hDestinationNode, [in] DWORD dwMoveFlags, [in, optional] PBYTE lpInBuffer, [in] DWORD cbInBufferSize );",
            "name": "MoveClusterGroupEx"
        },
        {
            "signature": "DWORD OfflineClusterGroup( [in] HGROUP hGroup );",
            "name": "OfflineClusterGroup"
        },
        {
            "signature": "DWORD OfflineClusterGroupEx( [in] HGROUP hGroup, [in] DWORD dwOfflineFlags, PBYTE lpInBuffer, [in] DWORD cbInBufferSize );",
            "name": "OfflineClusterGroupEx"
        },
        {
            "signature": "DWORD OfflineClusterResource( [in] HRESOURCE hResource );",
            "name": "OfflineClusterResource"
        },
        {
            "signature": "DWORD OfflineClusterResourceEx( [in] HRESOURCE hResource, [in] DWORD dwOfflineFlags, [in] PBYTE lpInBuffer, [in] DWORD cbInBufferSize );",
            "name": "OfflineClusterResourceEx"
        },
        {
            "signature": "DWORD OnlineClusterGroup( [in] HGROUP hGroup, [in, optional] HNODE hDestinationNode );",
            "name": "OnlineClusterGroup"
        },
        {
            "signature": "DWORD OnlineClusterGroupEx( [in] HGROUP hGroup, [in, optional] HNODE hDestinationNode, [in] DWORD dwOnlineFlags, [in, optional] PBYTE lpInBuffer, [in] DWORD cbInBufferSize );",
            "name": "OnlineClusterGroupEx"
        },
        {
            "signature": "DWORD OnlineClusterResource( [in] HRESOURCE hResource );",
            "name": "OnlineClusterResource"
        },
        {
            "signature": "DWORD OnlineClusterResourceEx( [in] HRESOURCE hResource, [in] DWORD dwOnlineFlags, [in, optional] PBYTE lpInBuffer, [in] DWORD cbInBufferSize );",
            "name": "OnlineClusterResourceEx"
        },
        {
            "signature": "HCLUSTER OpenCluster( [in, optional] LPCWSTR lpszClusterName );",
            "name": "OpenCluster"
        },
        {
            "signature": "HCLUSTER OpenClusterEx( [in, optional] LPCWSTR lpszClusterName, [in] DWORD DesiredAccess, [out, optional] DWORD *GrantedAccess );",
            "name": "OpenClusterEx"
        },
        {
            "signature": "HGROUP OpenClusterGroup( [in] HCLUSTER hCluster, [in] LPCWSTR lpszGroupName );",
            "name": "OpenClusterGroup"
        },
        {
            "signature": "HGROUP OpenClusterGroupEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszGroupName, [in] DWORD dwDesiredAccess, [out, optional] DWORD *lpdwGrantedAccess );",
            "name": "OpenClusterGroupEx"
        },
        {
            "signature": "HGROUPSET OpenClusterGroupSet( [in] HCLUSTER hCluster, [in] LPCWSTR lpszGroupSetName );",
            "name": "OpenClusterGroupSet"
        },
        {
            "signature": "HNETINTERFACE OpenClusterNetInterface( [in] HCLUSTER hCluster, [in] LPCWSTR lpszInterfaceName );",
            "name": "OpenClusterNetInterface"
        },
        {
            "signature": "HNETINTERFACE OpenClusterNetInterfaceEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszInterfaceName, [in] DWORD dwDesiredAccess, [out, optional] DWORD *lpdwGrantedAccess );",
            "name": "OpenClusterNetInterfaceEx"
        },
        {
            "signature": "HNETWORK OpenClusterNetwork( [in] HCLUSTER hCluster, [in] LPCWSTR lpszNetworkName );",
            "name": "OpenClusterNetwork"
        },
        {
            "signature": "HNETWORK OpenClusterNetworkEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszNetworkName, [in] DWORD dwDesiredAccess, [out, optional] DWORD *lpdwGrantedAccess );",
            "name": "OpenClusterNetworkEx"
        },
        {
            "signature": "HNODE OpenClusterNode( [in] HCLUSTER hCluster, [in] LPCWSTR lpszNodeName );",
            "name": "OpenClusterNode"
        },
        {
            "signature": "HNODE OpenClusterNodeEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszNodeName, [in] DWORD dwDesiredAccess, [out, optional] DWORD *lpdwGrantedAccess );",
            "name": "OpenClusterNodeEx"
        },
        {
            "signature": "HRESOURCE OpenClusterResource( [in] HCLUSTER hCluster, [in] LPCWSTR lpszResourceName );",
            "name": "OpenClusterResource"
        },
        {
            "signature": "HRESOURCE OpenClusterResourceEx( [in] HCLUSTER hCluster, [in, optional] LPCWSTR lpszResourceName, [in] DWORD dwDesiredAccess, [out, optional] DWORD *lpdwGrantedAccess );",
            "name": "OpenClusterResourceEx"
        },
        {
            "signature": "DWORD PauseClusterNode( [in] HNODE hNode );",
            "name": "PauseClusterNode"
        },
        {
            "signature": "DWORD PauseClusterNodeEx( [in] HNODE hNode, [in] BOOL bDrainNode, [in] [in] DWORD dwPauseFlags, [in, optional] [in, optional] HNODE hNodeDrainTarget );",
            "name": "PauseClusterNodeEx"
        },
        {
            "signature": "PCLUSTER_SETUP_PROGRESS_CALLBACK PclusterSetupProgressCallback; BOOL PclusterSetupProgressCallback( [in, optional] PVOID pvCallbackArg, [in] CLUSTER_SETUP_PHASE eSetupPhase, [in] CLUSTER_SETUP_PHASE_TYPE ePhaseType, [in] CLUSTER_SETUP_PHASE_SEVERITY ePhaseSeverity, [in] DWORD dwPercentComplete, [in, optional] PCWSTR lpszObjectName, [in] [in] DWORD dwStatus ) {...}",
            "name": "PCLUSTER_SETUP_PROGRESS_CALLBACK callback"
        },
        {
            "signature": "PCLUSTER_UPGRADE_PROGRESS_CALLBACK PclusterUpgradeProgressCallback; BOOL PclusterUpgradeProgressCallback( PVOID pvCallbackArg, CLUSTER_UPGRADE_PHASE eUpgradePhase ) {...}",
            "name": "PCLUSTER_UPGRADE_PROGRESS_CALLBACK callback"
        },
        {
            "signature": "DWORD RegisterClusterNotify( [in] HCHANGE hChange, [in] DWORD dwFilterType, [in] HANDLE hObject, [in] DWORD_PTR dwNotifyKey );",
            "name": "RegisterClusterNotify"
        },
        {
            "signature": "DWORD RegisterClusterNotifyV2( [in] HCHANGE hChange, [in] NOTIFY_FILTER_AND_TYPE Filter, [in] HANDLE hObject, [in] DWORD_PTR dwNotifyKey );",
            "name": "RegisterClusterNotifyV2"
        },
        {
            "signature": "DWORD RegisterClusterResourceTypeNotifyV2( [in] HCHANGE hChange, [in] HCLUSTER hCluster, [in] LONGLONG Flags, [in] LPCWSTR resTypeName, [in] DWORD_PTR dwNotifyKey );",
            "name": "RegisterClusterResourceTypeNotifyV2"
        },
        {
            "signature": "DWORD RemoveClusterGroupDependency( [in] HGROUP hGroup, [in] HGROUP hDependsOn );",
            "name": "RemoveClusterGroupDependency"
        },
        {
            "signature": "DWORD RemoveClusterGroupSetDependency( [in] HGROUPSET hGroupSet, [in] HGROUPSET hDependsOn );",
            "name": "RemoveClusterGroupSetDependency"
        },
        {
            "signature": "DWORD RemoveClusterGroupToGroupSetDependency( [in] HGROUP hGroup, [in] HGROUPSET hDependsOn );",
            "name": "RemoveClusterGroupToGroupSetDependency"
        },
        {
            "signature": "DWORD RemoveClusterResourceDependency( [in] HRESOURCE hResource, [in] HRESOURCE hDependsOn );",
            "name": "RemoveClusterResourceDependency"
        },
        {
            "signature": "DWORD RemoveClusterResourceNode( [in] HRESOURCE hResource, [in] HNODE hNode );",
            "name": "RemoveClusterResourceNode"
        },
        {
            "signature": "DWORD RemoveResourceFromClusterSharedVolumes( [in] HRESOURCE hResource );",
            "name": "RemoveResourceFromClusterSharedVolumes"
        },
        {
            "signature": "DWORD RestartClusterResource( [in] HRESOURCE hResource, [in] [in] DWORD dwFlags );",
            "name": "RestartClusterResource"
        },
        {
            "signature": "DWORD RestoreClusterDatabase( [in] LPCWSTR lpszPathName, [in] BOOL bForce, [in, optional] LPCWSTR lpszQuorumDriveLetter );",
            "name": "RestoreClusterDatabase"
        },
        {
            "signature": "DWORD ResumeClusterNode( [in] HNODE hNode );",
            "name": "ResumeClusterNode"
        },
        {
            "signature": "DWORD ResumeClusterNodeEx( [in] HNODE hNode, [in] CLUSTER_NODE_RESUME_FAILBACK_TYPE eResumeFailbackType, [in] DWORD dwResumeFlagsReserved );",
            "name": "ResumeClusterNodeEx"
        },
        {
            "signature": "DWORD SetClusterGroupName( [in] HGROUP hGroup, [in] LPCWSTR lpszGroupName );",
            "name": "SetClusterGroupName"
        },
        {
            "signature": "DWORD SetClusterGroupNodeList( [in] HGROUP hGroup, [in] DWORD NodeCount, [in] HNODE [] NodeList );",
            "name": "SetClusterGroupNodeList"
        },
        {
            "signature": "DWORD SetClusterGroupSetDependencyExpression( [in] HGROUPSET hGroupSet, [in] LPCWSTR lpszDependencyExprssion );",
            "name": "SetClusterGroupSetDependencyExpression"
        },
        {
            "signature": "DWORD SetClusterName( [in] HCLUSTER hCluster, [in] LPCWSTR lpszNewClusterName );",
            "name": "SetClusterName"
        },
        {
            "signature": "DWORD SetClusterNetworkName( [in] HNETWORK hNetwork, [in] LPCWSTR lpszName );",
            "name": "SetClusterNetworkName"
        },
        {
            "signature": "DWORD SetClusterNetworkPriorityOrder( [in] HCLUSTER hCluster, [in] DWORD NetworkCount, [in] HNETWORK [] NetworkList );",
            "name": "SetClusterNetworkPriorityOrder"
        },
        {
            "signature": "DWORD SetClusterQuorumResource( [in] HRESOURCE hResource, [in, optional] LPCWSTR lpszDeviceName, [in] DWORD dwMaxQuoLogSize );",
            "name": "SetClusterQuorumResource"
        },
        {
            "signature": "DWORD SetClusterResourceDependencyExpression( [in] HRESOURCE hResource, [in] LPCWSTR lpszDependencyExpression );",
            "name": "SetClusterResourceDependencyExpression"
        },
        {
            "signature": "DWORD SetClusterResourceName( [in] HRESOURCE hResource, [in] LPCWSTR lpszResourceName );",
            "name": "SetClusterResourceName"
        },
        {
            "signature": "DWORD SetClusterServiceAccountPassword( [in] LPCWSTR lpszClusterName, [in] LPCWSTR lpszNewPassword, [in, optional] DWORD dwFlags, [out] PCLUSTER_SET_PASSWORD_STATUS lpReturnStatusBuffer, [in, out] LPDWORD lpcbReturnStatusBufferSize );",
            "name": "SetClusterServiceAccountPassword"
        },
        {
            "signature": "DWORD SetGroupDependencyExpression( [in] HGROUP hGroup, [in] LPCWSTR lpszDependencyExpression );",
            "name": "SetGroupDependencyExpression"
        }
    ],
    "Cmdtree.h": [],
    "Cmnquery.h": [
        {
            "signature": "LPCQADDFORMSPROC Lpcqaddformsproc; HRESULT Lpcqaddformsproc( LPARAM lParam, LPCQFORM pForm ) {...}",
            "name": "LPCQADDFORMSPROC callback"
        },
        {
            "signature": "LPCQADDPAGESPROC Lpcqaddpagesproc; HRESULT Lpcqaddpagesproc( LPARAM lParam, REFCLSID clsidForm, LPCQPAGE pPage ) {...}",
            "name": "LPCQADDPAGESPROC callback"
        },
        {
            "signature": "LPCQPAGEPROC Lpcqpageproc; HRESULT Lpcqpageproc( LPCQPAGE pPage, HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) {...}",
            "name": "LPCQPAGEPROC callback"
        }
    ],
    "Codecapi.h": [],
    "Comadmin.h": [],
    "Combaseapi.h": [
        {
            "signature": "HRESULT CLSIDFromProgID( [in] LPCOLESTR lpszProgID, [out] LPCLSID lpclsid );",
            "name": "CLSIDFromProgID"
        },
        {
            "signature": "HRESULT CLSIDFromProgIDEx( [in] LPCOLESTR lpszProgID, [out] LPCLSID lpclsid );",
            "name": "CLSIDFromProgIDEx"
        },
        {
            "signature": "HRESULT CLSIDFromString( [in] LPCOLESTR lpsz, [out] LPCLSID pclsid );",
            "name": "CLSIDFromString"
        },
        {
            "signature": "ULONG CoAddRefServerProcess();",
            "name": "CoAddRefServerProcess"
        },
        {
            "signature": "HRESULT CoAllowUnmarshalerCLSID( [in] REFCLSID clsid );",
            "name": "CoAllowUnmarshalerCLSID"
        },
        {
            "signature": "HRESULT CoCancelCall( [in] DWORD dwThreadId, [in] ULONG ulTimeout );",
            "name": "CoCancelCall"
        },
        {
            "signature": "HRESULT CoCopyProxy( [in] IUnknown *pProxy, [out] IUnknown **ppCopy );",
            "name": "CoCopyProxy"
        },
        {
            "signature": "HRESULT CoCreateFreeThreadedMarshaler( [in] LPUNKNOWN punkOuter, [out] LPUNKNOWN *ppunkMarshal );",
            "name": "CoCreateFreeThreadedMarshaler"
        },
        {
            "signature": "HRESULT CoCreateGuid( [out] GUID *pguid );",
            "name": "CoCreateGuid"
        },
        {
            "signature": "HRESULT CoCreateInstance( [in] REFCLSID rclsid, [in] LPUNKNOWN pUnkOuter, [in] DWORD dwClsContext, [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "CoCreateInstance"
        },
        {
            "signature": "HRESULT CoCreateInstanceEx( [in] REFCLSID Clsid, [in] IUnknown *punkOuter, [in] DWORD dwClsCtx, [in] COSERVERINFO *pServerInfo, [in] DWORD dwCount, [in, out] MULTI_QI *pResults );",
            "name": "CoCreateInstanceEx"
        },
        {
            "signature": "HRESULT CoCreateInstanceFromApp( [in] REFCLSID Clsid, [in, optional] IUnknown *punkOuter, [in] DWORD dwClsCtx, [in, optional] PVOID reserved, [in] DWORD dwCount, [in, out] MULTI_QI *pResults );",
            "name": "CoCreateInstanceFromApp"
        },
        {
            "signature": "HRESULT CoDecodeProxy( [in] DWORD dwClientPid, [in] UINT64 ui64ProxyAddress, [out] PServerInformation pServerInformation );",
            "name": "CoDecodeProxy"
        },
        {
            "signature": "HRESULT CoDecrementMTAUsage( [in] CO_MTA_USAGE_COOKIE Cookie );",
            "name": "CoDecrementMTAUsage"
        },
        {
            "signature": "HRESULT CoDisableCallCancellation( [in, optional] LPVOID pReserved );",
            "name": "CoDisableCallCancellation"
        },
        {
            "signature": "HRESULT CoDisconnectContext( [in] DWORD dwTimeout );",
            "name": "CoDisconnectContext"
        },
        {
            "signature": "HRESULT CoDisconnectObject( [in] LPUNKNOWN pUnk, [in] DWORD dwReserved );",
            "name": "CoDisconnectObject"
        },
        {
            "signature": "HRESULT CoEnableCallCancellation( [in, optional] LPVOID pReserved );",
            "name": "CoEnableCallCancellation"
        },
        {
            "signature": "HRESULT CoFileTimeNow( [out] FILETIME *lpFileTime );",
            "name": "CoFileTimeNow"
        },
        {
            "signature": "void CoFreeUnusedLibraries();",
            "name": "CoFreeUnusedLibraries"
        },
        {
            "signature": "void CoFreeUnusedLibrariesEx( [in] DWORD dwUnloadDelay, [in] DWORD dwReserved );",
            "name": "CoFreeUnusedLibrariesEx"
        },
        {
            "signature": "HRESULT CoGetApartmentType( [out] APTTYPE *pAptType, [out] APTTYPEQUALIFIER *pAptQualifier );",
            "name": "CoGetApartmentType"
        },
        {
            "signature": "HRESULT CoGetCallContext( [in] REFIID riid, [out] void **ppInterface );",
            "name": "CoGetCallContext"
        },
        {
            "signature": "HRESULT CoGetCallerTID( [out] LPDWORD lpdwTID );",
            "name": "CoGetCallerTID"
        },
        {
            "signature": "HRESULT CoGetCancelObject( [in] DWORD dwThreadId, [in] REFIID iid, [out] void **ppUnk );",
            "name": "CoGetCancelObject"
        },
        {
            "signature": "HRESULT CoGetClassObject( [in] REFCLSID rclsid, [in] DWORD dwClsContext, [in, optional] LPVOID pvReserved, [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "CoGetClassObject"
        },
        {
            "signature": "HRESULT CoGetContextToken( [out] ULONG_PTR *pToken );",
            "name": "CoGetContextToken"
        },
        {
            "signature": "HRESULT CoGetCurrentLogicalThreadId( [out] GUID *pguid );",
            "name": "CoGetCurrentLogicalThreadId"
        },
        {
            "signature": "DWORD CoGetCurrentProcess();",
            "name": "CoGetCurrentProcess"
        },
        {
            "signature": "HRESULT CoGetDefaultContext( [in] APTTYPE aptType, [in] REFIID riid, [out] void **ppv );",
            "name": "CoGetDefaultContext"
        },
        {
            "signature": "HRESULT CoGetInterfaceAndReleaseStream( [in] LPSTREAM pStm, [in] REFIID iid, [out] LPVOID *ppv );",
            "name": "CoGetInterfaceAndReleaseStream"
        },
        {
            "signature": "HRESULT CoGetMalloc( [in] DWORD dwMemContext, [out] LPMALLOC *ppMalloc );",
            "name": "CoGetMalloc"
        },
        {
            "signature": "HRESULT CoGetMarshalSizeMax( [out] ULONG *pulSize, [in] REFIID riid, [in] LPUNKNOWN pUnk, [in] DWORD dwDestContext, [in, optional] LPVOID pvDestContext, [in] DWORD mshlflags );",
            "name": "CoGetMarshalSizeMax"
        },
        {
            "signature": "HRESULT CoGetObjectContext( [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "CoGetObjectContext"
        },
        {
            "signature": "HRESULT CoGetPSClsid( [in] REFIID riid, [out] CLSID *pClsid );",
            "name": "CoGetPSClsid"
        },
        {
            "signature": "HRESULT CoGetStandardMarshal( [in] REFIID riid, [in] LPUNKNOWN pUnk, [in] DWORD dwDestContext, [in, optional] LPVOID pvDestContext, [in] DWORD mshlflags, [out] LPMARSHAL *ppMarshal );",
            "name": "CoGetStandardMarshal"
        },
        {
            "signature": "HRESULT CoGetStdMarshalEx( [in] LPUNKNOWN pUnkOuter, [in] DWORD smexflags, [out] LPUNKNOWN *ppUnkInner );",
            "name": "CoGetStdMarshalEx"
        },
        {
            "signature": "HRESULT CoGetTreatAsClass( [in] REFCLSID clsidOld, [out] LPCLSID pClsidNew );",
            "name": "CoGetTreatAsClass"
        },
        {
            "signature": "HRESULT CoImpersonateClient();",
            "name": "CoImpersonateClient"
        },
        {
            "signature": "HRESULT CoIncrementMTAUsage( [out] CO_MTA_USAGE_COOKIE *pCookie );",
            "name": "CoIncrementMTAUsage"
        },
        {
            "signature": "HRESULT CoInitializeEx( [in, optional] LPVOID pvReserved, [in] DWORD dwCoInit );",
            "name": "CoInitializeEx"
        },
        {
            "signature": "HRESULT CoInitializeSecurity( [in, optional] PSECURITY_DESCRIPTOR pSecDesc, [in] LONG cAuthSvc, [in, optional] SOLE_AUTHENTICATION_SERVICE *asAuthSvc, [in, optional] void *pReserved1, [in] DWORD dwAuthnLevel, [in] DWORD dwImpLevel, [in, optional] void *pAuthList, [in] DWORD dwCapabilities, [in, optional] void *pReserved3 );",
            "name": "CoInitializeSecurity"
        },
        {
            "signature": "HRESULT CoInvalidateRemoteMachineBindings( [in] LPOLESTR pszMachineName );",
            "name": "CoInvalidateRemoteMachineBindings"
        },
        {
            "signature": "BOOL CoIsHandlerConnected( [in] LPUNKNOWN pUnk );",
            "name": "CoIsHandlerConnected"
        },
        {
            "signature": "HRESULT CoLockObjectExternal( [in] LPUNKNOWN pUnk, [in] BOOL fLock, [in] BOOL fLastUnlockReleases );",
            "name": "CoLockObjectExternal"
        },
        {
            "signature": "HRESULT CoMarshalHresult( [in] LPSTREAM pstm, [in] HRESULT hresult );",
            "name": "CoMarshalHresult"
        },
        {
            "signature": "HRESULT CoMarshalInterface( [in] LPSTREAM pStm, [in] REFIID riid, [in] LPUNKNOWN pUnk, [in] DWORD dwDestContext, [in, optional] LPVOID pvDestContext, [in] DWORD mshlflags );",
            "name": "CoMarshalInterface"
        },
        {
            "signature": "HRESULT CoMarshalInterThreadInterfaceInStream( [in] REFIID riid, [in] LPUNKNOWN pUnk, [out] LPSTREAM *ppStm );",
            "name": "CoMarshalInterThreadInterfaceInStream"
        },
        {
            "signature": "HRESULT CoQueryAuthenticationServices( [out] DWORD *pcAuthSvc, [out] SOLE_AUTHENTICATION_SERVICE **asAuthSvc );",
            "name": "CoQueryAuthenticationServices"
        },
        {
            "signature": "HRESULT CoQueryClientBlanket( [out, optional] DWORD *pAuthnSvc, [out, optional] DWORD *pAuthzSvc, [out, optional] LPOLESTR *pServerPrincName, [out, optional] DWORD *pAuthnLevel, [out, optional] DWORD *pImpLevel, [out, optional] RPC_AUTHZ_HANDLE *pPrivs, [in, out, optional] DWORD *pCapabilities );",
            "name": "CoQueryClientBlanket"
        },
        {
            "signature": "HRESULT CoQueryProxyBlanket( [in] IUnknown *pProxy, [out, optional] DWORD *pwAuthnSvc, [out, optional] DWORD *pAuthzSvc, [out, optional] LPOLESTR *pServerPrincName, [out, optional] DWORD *pAuthnLevel, [out, optional] DWORD *pImpLevel, [out, optional] RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, [out, optional] DWORD *pCapabilites );",
            "name": "CoQueryProxyBlanket"
        },
        {
            "signature": "HRESULT CoRegisterActivationFilter( [in] IActivationFilter *pActivationFilter );",
            "name": "CoRegisterActivationFilter"
        },
        {
            "signature": "HRESULT CoRegisterClassObject( [in] REFCLSID rclsid, [in] LPUNKNOWN pUnk, [in] DWORD dwClsContext, [in] DWORD flags, [out] LPDWORD lpdwRegister );",
            "name": "CoRegisterClassObject"
        },
        {
            "signature": "HRESULT CoRegisterDeviceCatalog( PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie );",
            "name": "CoRegisterDeviceCatalog"
        },
        {
            "signature": "HRESULT CoRegisterPSClsid( [in] REFIID riid, [in] REFCLSID rclsid );",
            "name": "CoRegisterPSClsid"
        },
        {
            "signature": "HRESULT CoRegisterSurrogate( [in] LPSURROGATE pSurrogate );",
            "name": "CoRegisterSurrogate"
        },
        {
            "signature": "HRESULT CoReleaseMarshalData( [in] LPSTREAM pStm );",
            "name": "CoReleaseMarshalData"
        },
        {
            "signature": "ULONG CoReleaseServerProcess();",
            "name": "CoReleaseServerProcess"
        },
        {
            "signature": "HRESULT CoResumeClassObjects();",
            "name": "CoResumeClassObjects"
        },
        {
            "signature": "HRESULT CoRevertToSelf();",
            "name": "CoRevertToSelf"
        },
        {
            "signature": "HRESULT CoRevokeClassObject( [in] DWORD dwRegister );",
            "name": "CoRevokeClassObject"
        },
        {
            "signature": "HRESULT CoRevokeDeviceCatalog( CO_DEVICE_CATALOG_COOKIE cookie );",
            "name": "CoRevokeDeviceCatalog"
        },
        {
            "signature": "HRESULT CoSetCancelObject( [in, optional] IUnknown *pUnk );",
            "name": "CoSetCancelObject"
        },
        {
            "signature": "HRESULT CoSetProxyBlanket( [in] IUnknown *pProxy, [in] DWORD dwAuthnSvc, [in] DWORD dwAuthzSvc, [in, optional] OLECHAR *pServerPrincName, [in] DWORD dwAuthnLevel, [in] DWORD dwImpLevel, [in, optional] RPC_AUTH_IDENTITY_HANDLE pAuthInfo, [in] DWORD dwCapabilities );",
            "name": "CoSetProxyBlanket"
        },
        {
            "signature": "HRESULT CoSuspendClassObjects();",
            "name": "CoSuspendClassObjects"
        },
        {
            "signature": "HRESULT CoSwitchCallContext( [in, optional] IUnknown *pNewObject, [out] IUnknown **ppOldObject );",
            "name": "CoSwitchCallContext"
        },
        {
            "signature": "LPVOID CoTaskMemAlloc( [in] SIZE_T cb );",
            "name": "CoTaskMemAlloc"
        },
        {
            "signature": "void CoTaskMemFree( [in, optional] _Frees_ptr_opt_ LPVOID pv );",
            "name": "CoTaskMemFree"
        },
        {
            "signature": "LPVOID CoTaskMemRealloc( [in, optional] LPVOID pv, [in] SIZE_T cb );",
            "name": "CoTaskMemRealloc"
        },
        {
            "signature": "HRESULT CoTestCancel();",
            "name": "CoTestCancel"
        },
        {
            "signature": "void CoUninitialize();",
            "name": "CoUninitialize"
        },
        {
            "signature": "HRESULT CoUnmarshalHresult( [in] LPSTREAM pstm, [out] HRESULT *phresult );",
            "name": "CoUnmarshalHresult"
        },
        {
            "signature": "HRESULT CoUnmarshalInterface( [in] LPSTREAM pStm, [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "CoUnmarshalInterface"
        },
        {
            "signature": "HRESULT CoWaitForMultipleHandles( [in] DWORD dwFlags, [in] DWORD dwTimeout, [in] ULONG cHandles, [in] LPHANDLE pHandles, [out] LPDWORD lpdwindex );",
            "name": "CoWaitForMultipleHandles"
        },
        {
            "signature": "HRESULT CoWaitForMultipleObjects( [in] DWORD dwFlags, [in] DWORD dwTimeout, [in] ULONG cHandles, [in] const HANDLE *pHandles, [out] LPDWORD lpdwindex );",
            "name": "CoWaitForMultipleObjects"
        },
        {
            "signature": "HRESULT CreateStreamOnHGlobal( [in] HGLOBAL hGlobal, [in] BOOL fDeleteOnRelease, [out] LPSTREAM *ppstm );",
            "name": "CreateStreamOnHGlobal"
        },
        {
            "signature": "HRESULT DllCanUnloadNow();",
            "name": "DllCanUnloadNow"
        },
        {
            "signature": "HRESULT DllGetClassObject( [in] REFCLSID rclsid, [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "DllGetClassObject"
        },
        {
            "signature": "HRESULT FreePropVariantArray( [in] ULONG cVariants, [in] PROPVARIANT *rgvars );",
            "name": "FreePropVariantArray"
        },
        {
            "signature": "HRESULT GetHGlobalFromStream( [in] LPSTREAM pstm, [out] HGLOBAL *phglobal );",
            "name": "GetHGlobalFromStream"
        },
        {
            "signature": "HRESULT IIDFromString( [in] LPCOLESTR lpsz, [out] LPIID lpiid );",
            "name": "IIDFromString"
        },
        {
            "signature": "HRESULT ProgIDFromCLSID( [in] REFCLSID clsid, [out] LPOLESTR *lplpszProgID );",
            "name": "ProgIDFromCLSID"
        },
        {
            "signature": "HRESULT PropVariantClear( [in] PROPVARIANT *pvar );",
            "name": "PropVariantClear"
        },
        {
            "signature": "HRESULT PropVariantCopy( [in, out] PROPVARIANT *pvarDest, [in] const PROPVARIANT *pvarSrc );",
            "name": "PropVariantCopy"
        },
        {
            "signature": "HRESULT RoGetAgileReference( [in] AgileReferenceOptions options, [in] REFIID riid, [in] IUnknown *pUnk, [out] IAgileReference **ppAgileReference );",
            "name": "RoGetAgileReference"
        },
        {
            "signature": "HRESULT StringFromCLSID( [in] REFCLSID rclsid, [out] LPOLESTR *lplpsz );",
            "name": "StringFromCLSID"
        },
        {
            "signature": "int StringFromGUID2( [in] REFGUID rguid, [out] LPOLESTR lpsz, [in] int cchMax );",
            "name": "StringFromGUID2"
        },
        {
            "signature": "HRESULT StringFromIID( [in] REFIID rclsid, [out] LPOLESTR *lplpsz );",
            "name": "StringFromIID"
        }
    ],
    "Comcat.h": [],
    "Coml2api.h": [
        {
            "signature": "HRESULT CreateILockBytesOnHGlobal( [in] HGLOBAL hGlobal, [in] BOOL fDeleteOnRelease, [out] LPLOCKBYTES *pplkbyt );",
            "name": "CreateILockBytesOnHGlobal"
        },
        {
            "signature": "HRESULT FmtIdToPropStgName( [in] const FMTID *pfmtid, [out] LPOLESTR oszName );",
            "name": "FmtIdToPropStgName"
        },
        {
            "signature": "HRESULT GetConvertStg( [in] LPSTORAGE pStg );",
            "name": "GetConvertStg"
        },
        {
            "signature": "HRESULT GetHGlobalFromILockBytes( [in] LPLOCKBYTES plkbyt, [out] HGLOBAL *phglobal );",
            "name": "GetHGlobalFromILockBytes"
        },
        {
            "signature": "HRESULT PropStgNameToFmtId( [in] const LPOLESTR oszName, [out] FMTID *pfmtid );",
            "name": "PropStgNameToFmtId"
        },
        {
            "signature": "HRESULT ReadClassStg( [in] LPSTORAGE pStg, [out] CLSID *pclsid );",
            "name": "ReadClassStg"
        },
        {
            "signature": "HRESULT ReadClassStm( [in] LPSTREAM pStm, [out] CLSID *pclsid );",
            "name": "ReadClassStm"
        },
        {
            "signature": "HRESULT StgCreateDocfile( [in] const WCHAR *pwcsName, [in] DWORD grfMode, [in] DWORD reserved, [out] IStorage **ppstgOpen );",
            "name": "StgCreateDocfile"
        },
        {
            "signature": "HRESULT StgCreateDocfileOnILockBytes( [in] ILockBytes *plkbyt, [in] DWORD grfMode, [in] DWORD reserved, [out] IStorage **ppstgOpen );",
            "name": "StgCreateDocfileOnILockBytes"
        },
        {
            "signature": "HRESULT StgCreatePropSetStg( [in] IStorage *pStorage, DWORD dwReserved, [out] IPropertySetStorage **ppPropSetStg );",
            "name": "StgCreatePropSetStg"
        },
        {
            "signature": "HRESULT StgCreatePropStg( [in] IUnknown *pUnk, [in] REFFMTID fmtid, [in] const CLSID *pclsid, [in] DWORD grfFlags, [in] DWORD dwReserved, [out] IPropertyStorage **ppPropStg );",
            "name": "StgCreatePropStg"
        },
        {
            "signature": "HRESULT StgCreateStorageEx( [in] const WCHAR *pwcsName, [in] DWORD grfMode, [in] DWORD stgfmt, [in] DWORD grfAttrs, [in] STGOPTIONS *pStgOptions, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] REFIID riid, [out] void **ppObjectOpen );",
            "name": "StgCreateStorageEx"
        },
        {
            "signature": "HRESULT StgIsStorageFile( [in] const WCHAR *pwcsName );",
            "name": "StgIsStorageFile"
        },
        {
            "signature": "HRESULT StgIsStorageILockBytes( ILockBytes *plkbyt );",
            "name": "StgIsStorageILockBytes"
        },
        {
            "signature": "HRESULT StgOpenPropStg( [in] IUnknown *pUnk, [in] REFFMTID fmtid, [in] DWORD grfFlags, [in] DWORD dwReserved, [out] IPropertyStorage **ppPropStg );",
            "name": "StgOpenPropStg"
        },
        {
            "signature": "HRESULT StgOpenStorage( [in] const WCHAR *pwcsName, [in] IStorage *pstgPriority, [in] DWORD grfMode, [in] SNB snbExclude, [in] DWORD reserved, [out] IStorage **ppstgOpen );",
            "name": "StgOpenStorage"
        },
        {
            "signature": "HRESULT StgOpenStorageEx( [in] const WCHAR *pwcsName, [in] DWORD grfMode, [in] DWORD stgfmt, [in] DWORD grfAttrs, [in, out] STGOPTIONS *pStgOptions, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] REFIID riid, [out] void **ppObjectOpen );",
            "name": "StgOpenStorageEx"
        },
        {
            "signature": "HRESULT StgOpenStorageOnILockBytes( [in] ILockBytes *plkbyt, [in] IStorage *pstgPriority, [in] DWORD grfMode, [in] SNB snbExclude, [in] DWORD reserved, [out] IStorage **ppstgOpen );",
            "name": "StgOpenStorageOnILockBytes"
        },
        {
            "signature": "HRESULT StgSetTimes( [in] const WCHAR *lpszName, [in] const FILETIME *pctime, [in] const FILETIME *patime, [in] const FILETIME *pmtime );",
            "name": "StgSetTimes"
        },
        {
            "signature": "HRESULT WriteClassStg( [in] LPSTORAGE pStg, [in] REFCLSID rclsid );",
            "name": "WriteClassStg"
        },
        {
            "signature": "HRESULT WriteClassStm( [in] LPSTREAM pStm, [in] REFCLSID rclsid );",
            "name": "WriteClassStm"
        }
    ],
    "Commctrl.h": [
        {
            "signature": "BOOL _TrackMouseEvent( [in, out] LPTRACKMOUSEEVENT lpEventTrack );",
            "name": "_TrackMouseEvent"
        },
        {
            "signature": "HBITMAP CreateMappedBitmap( HINSTANCE hInstance, INT_PTR idBitmap, UINT wFlags, [in] LPCOLORMAP lpColorMap, int iNumMaps );",
            "name": "CreateMappedBitmap"
        },
        {
            "signature": "HWND CreateStatusWindowA( LONG style, LPCSTR lpszText, HWND hwndParent, UINT wID );",
            "name": "CreateStatusWindowA"
        },
        {
            "signature": "HWND CreateStatusWindowW( LONG style, LPCWSTR lpszText, HWND hwndParent, UINT wID );",
            "name": "CreateStatusWindowW"
        },
        {
            "signature": "HWND CreateToolbarEx( HWND hwnd, DWORD ws, UINT wID, int nBitmaps, HINSTANCE hBMInst, UINT_PTR wBMID, LPCTBBUTTON lpButtons, int iNumButtons, int dxButton, int dyButton, int dxBitmap, int dyBitmap, UINT uStructSize );",
            "name": "CreateToolbarEx"
        },
        {
            "signature": "HWND CreateUpDownControl( DWORD dwStyle, int x, int y, int cx, int cy, HWND hParent, int nID, HINSTANCE hInst, HWND hBuddy, int nUpper, int nLower, int nPos );",
            "name": "CreateUpDownControl"
        },
        {
            "signature": "LRESULT DefSubclassProc( [in] HWND hWnd, [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefSubclassProc"
        },
        {
            "signature": "void DrawInsert( HWND handParent, HWND hLB, int nItem );",
            "name": "DrawInsert"
        },
        {
            "signature": "int DrawShadowText( HDC hdc, LPCWSTR pszText, UINT cch, RECT *prc, DWORD dwFlags, COLORREF crText, COLORREF crShadow, int ixOffset, int iyOffset );",
            "name": "DrawShadowText"
        },
        {
            "signature": "void DrawStatusTextA( HDC hDC, LPCRECT lprc, LPCSTR pszText, UINT uFlags );",
            "name": "DrawStatusTextA"
        },
        {
            "signature": "void DrawStatusTextW( HDC hDC, LPCRECT lprc, LPCWSTR pszText, UINT uFlags );",
            "name": "DrawStatusTextW"
        },
        {
            "signature": "BOOL FlatSB_EnableScrollBar( HWND unnamedParam1, int unnamedParam2, UINT unnamedParam3 );",
            "name": "FlatSB_EnableScrollBar"
        },
        {
            "signature": "BOOL FlatSB_GetScrollInfo( HWND unnamedParam1, int code, LPSCROLLINFO unnamedParam3 );",
            "name": "FlatSB_GetScrollInfo"
        },
        {
            "signature": "int FlatSB_GetScrollPos( HWND unnamedParam1, int code );",
            "name": "FlatSB_GetScrollPos"
        },
        {
            "signature": "BOOL FlatSB_GetScrollProp( HWND unnamedParam1, int propIndex, LPINT unnamedParam3 );",
            "name": "FlatSB_GetScrollProp"
        },
        {
            "signature": "BOOL FlatSB_GetScrollPropPtr( HWND unnamedParam1, int propIndex, PINT_PTR unnamedParam3 );",
            "name": "FlatSB_GetScrollPropPtr"
        },
        {
            "signature": "BOOL FlatSB_GetScrollRange( HWND unnamedParam1, int code, LPINT unnamedParam3, LPINT unnamedParam4 );",
            "name": "FlatSB_GetScrollRange"
        },
        {
            "signature": "int FlatSB_SetScrollInfo( HWND unnamedParam1, int code, LPSCROLLINFO psi, BOOL fRedraw );",
            "name": "FlatSB_SetScrollInfo"
        },
        {
            "signature": "int FlatSB_SetScrollPos( HWND unnamedParam1, int code, int pos, BOOL fRedraw );",
            "name": "FlatSB_SetScrollPos"
        },
        {
            "signature": "BOOL FlatSB_SetScrollProp( HWND unnamedParam1, UINT index, INT_PTR newValue, BOOL unnamedParam4 );",
            "name": "FlatSB_SetScrollProp"
        },
        {
            "signature": "int FlatSB_SetScrollRange( HWND unnamedParam1, int code, int min, int max, BOOL fRedraw );",
            "name": "FlatSB_SetScrollRange"
        },
        {
            "signature": "BOOL FlatSB_ShowScrollBar( HWND unnamedParam1, int code, BOOL unnamedParam3 );",
            "name": "FlatSB_ShowScrollBar"
        },
        {
            "signature": "void GetEffectiveClientRect( HWND hWnd, LPRECT lprc, [in] const INT *lpInfo );",
            "name": "GetEffectiveClientRect"
        },
        {
            "signature": "LANGID GetMUILanguage();",
            "name": "GetMUILanguage"
        },
        {
            "signature": "BOOL GetWindowSubclass( [in] HWND hWnd, [in] SUBCLASSPROC pfnSubclass, [in] UINT_PTR uIdSubclass, [out] DWORD_PTR *pdwRefData );",
            "name": "GetWindowSubclass"
        },
        {
            "signature": "HRESULT HIMAGELIST_QueryInterface( [in] HIMAGELIST himl, [in] REFIID riid, [out] void **ppv );",
            "name": "HIMAGELIST_QueryInterface"
        },
        {
            "signature": "int ImageList_Add( [in] HIMAGELIST himl, [in] HBITMAP hbmImage, [in, optional] HBITMAP hbmMask );",
            "name": "ImageList_Add"
        },
        {
            "signature": "int ImageList_AddMasked( HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask );",
            "name": "ImageList_AddMasked"
        },
        {
            "signature": "BOOL ImageList_BeginDrag( HIMAGELIST himlTrack, int iTrack, int dxHotspot, int dyHotspot );",
            "name": "ImageList_BeginDrag"
        },
        {
            "signature": "BOOL ImageList_Copy( HIMAGELIST himlDst, int iDst, HIMAGELIST himlSrc, int iSrc, UINT uFlags );",
            "name": "ImageList_Copy"
        },
        {
            "signature": "HIMAGELIST ImageList_Create( int cx, int cy, UINT flags, int cInitial, int cGrow );",
            "name": "ImageList_Create"
        },
        {
            "signature": "BOOL ImageList_Destroy( [in, optional] HIMAGELIST himl );",
            "name": "ImageList_Destroy"
        },
        {
            "signature": "BOOL ImageList_DragEnter( HWND hwndLock, int x, int y );",
            "name": "ImageList_DragEnter"
        },
        {
            "signature": "BOOL ImageList_DragLeave( HWND hwndLock );",
            "name": "ImageList_DragLeave"
        },
        {
            "signature": "BOOL ImageList_DragMove( int x, int y );",
            "name": "ImageList_DragMove"
        },
        {
            "signature": "BOOL ImageList_DragShowNolock( BOOL fShow );",
            "name": "ImageList_DragShowNolock"
        },
        {
            "signature": "BOOL ImageList_Draw( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, UINT fStyle );",
            "name": "ImageList_Draw"
        },
        {
            "signature": "BOOL ImageList_DrawEx( HIMAGELIST himl, int i, HDC hdcDst, int x, int y, int dx, int dy, COLORREF rgbBk, COLORREF rgbFg, UINT fStyle );",
            "name": "ImageList_DrawEx"
        },
        {
            "signature": "BOOL ImageList_DrawIndirect( IMAGELISTDRAWPARAMS *pimldp );",
            "name": "ImageList_DrawIndirect"
        },
        {
            "signature": "HIMAGELIST ImageList_Duplicate( HIMAGELIST himl );",
            "name": "ImageList_Duplicate"
        },
        {
            "signature": "void ImageList_EndDrag();",
            "name": "ImageList_EndDrag"
        },
        {
            "signature": "COLORREF ImageList_GetBkColor( [in] HIMAGELIST himl );",
            "name": "ImageList_GetBkColor"
        },
        {
            "signature": "HIMAGELIST ImageList_GetDragImage( POINT *ppt, POINT *pptHotspot );",
            "name": "ImageList_GetDragImage"
        },
        {
            "signature": "HICON ImageList_GetIcon( HIMAGELIST himl, int i, UINT flags );",
            "name": "ImageList_GetIcon"
        },
        {
            "signature": "BOOL ImageList_GetIconSize( HIMAGELIST himl, int *cx, int *cy );",
            "name": "ImageList_GetIconSize"
        },
        {
            "signature": "int ImageList_GetImageCount( [in] HIMAGELIST himl );",
            "name": "ImageList_GetImageCount"
        },
        {
            "signature": "BOOL ImageList_GetImageInfo( HIMAGELIST himl, int i, IMAGEINFO *pImageInfo );",
            "name": "ImageList_GetImageInfo"
        },
        {
            "signature": "HIMAGELIST ImageList_LoadImageA( HINSTANCE hi, LPCSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags );",
            "name": "ImageList_LoadImageA"
        },
        {
            "signature": "HIMAGELIST ImageList_LoadImageW( HINSTANCE hi, LPCWSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags );",
            "name": "ImageList_LoadImageW"
        },
        {
            "signature": "HIMAGELIST ImageList_Merge( HIMAGELIST himl1, int i1, HIMAGELIST himl2, int i2, int dx, int dy );",
            "name": "ImageList_Merge"
        },
        {
            "signature": "HIMAGELIST ImageList_Read( IStream *pstm );",
            "name": "ImageList_Read"
        },
        {
            "signature": "HRESULT ImageList_ReadEx( [in] DWORD dwFlags, [in] IStream *pstm, [out] REFIID riid, [out] PVOID *ppv );",
            "name": "ImageList_ReadEx"
        },
        {
            "signature": "BOOL ImageList_Remove( HIMAGELIST himl, int i );",
            "name": "ImageList_Remove"
        },
        {
            "signature": "BOOL ImageList_Replace( HIMAGELIST himl, int i, HBITMAP hbmImage, HBITMAP hbmMask );",
            "name": "ImageList_Replace"
        },
        {
            "signature": "int ImageList_ReplaceIcon( [in] HIMAGELIST himl, [in] int i, [in] HICON hicon );",
            "name": "ImageList_ReplaceIcon"
        },
        {
            "signature": "COLORREF ImageList_SetBkColor( [in] HIMAGELIST himl, [in] COLORREF clrBk );",
            "name": "ImageList_SetBkColor"
        },
        {
            "signature": "BOOL ImageList_SetDragCursorImage( HIMAGELIST himlDrag, int iDrag, int dxHotspot, int dyHotspot );",
            "name": "ImageList_SetDragCursorImage"
        },
        {
            "signature": "BOOL ImageList_SetIconSize( HIMAGELIST himl, int cx, int cy );",
            "name": "ImageList_SetIconSize"
        },
        {
            "signature": "BOOL ImageList_SetImageCount( [in] HIMAGELIST himl, [in] UINT uNewCount );",
            "name": "ImageList_SetImageCount"
        },
        {
            "signature": "BOOL ImageList_SetOverlayImage( [in] HIMAGELIST himl, [in] int iImage, [in] int iOverlay );",
            "name": "ImageList_SetOverlayImage"
        },
        {
            "signature": "BOOL ImageList_Write( HIMAGELIST himl, IStream *pstm );",
            "name": "ImageList_Write"
        },
        {
            "signature": "HRESULT ImageList_WriteEx( [in] HIMAGELIST himl, [in] DWORD dwFlags, [in] IStream *pstm );",
            "name": "ImageList_WriteEx"
        },
        {
            "signature": "void InitCommonControls();",
            "name": "InitCommonControls"
        },
        {
            "signature": "BOOL InitCommonControlsEx( [in] const INITCOMMONCONTROLSEX *picce );",
            "name": "InitCommonControlsEx"
        },
        {
            "signature": "BOOL InitializeFlatSB( HWND unnamedParam1 );",
            "name": "InitializeFlatSB"
        },
        {
            "signature": "void InitMUILanguage( LANGID uiLang );",
            "name": "InitMUILanguage"
        },
        {
            "signature": "int LBItemFromPt( HWND hLB, POINT pt, BOOL bAutoScroll );",
            "name": "LBItemFromPt"
        },
        {
            "signature": "HRESULT LoadIconMetric( [in] HINSTANCE hinst, [in] PCWSTR pszName, [in] int lims, [out] HICON *phico );",
            "name": "LoadIconMetric"
        },
        {
            "signature": "HRESULT LoadIconWithScaleDown( [in] HINSTANCE hinst, [in] PCWSTR pszName, [in] int cx, [in] int cy, [out] HICON *phico );",
            "name": "LoadIconWithScaleDown"
        },
        {
            "signature": "BOOL MakeDragList( HWND hLB );",
            "name": "MakeDragList"
        },
        {
            "signature": "void MenuHelp( UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, UINT *lpwIDs );",
            "name": "MenuHelp"
        },
        {
            "signature": "PFNLVGROUPCOMPARE Pfnlvgroupcompare; int Pfnlvgroupcompare( int unnamedParam1, int unnamedParam2, void *unnamedParam3 ) {...}",
            "name": "PFNLVGROUPCOMPARE callback"
        },
        {
            "signature": "PFTASKDIALOGCALLBACK Pftaskdialogcallback; HRESULT Pftaskdialogcallback( [in] HWND hwnd, [in] UINT msg, [in] WPARAM wParam, [in] LPARAM lParam, LONG_PTR lpRefData ) {...}",
            "name": "PFTASKDIALOGCALLBACK callback"
        },
        {
            "signature": "BOOL RemoveWindowSubclass( [in] HWND hWnd, [in] SUBCLASSPROC pfnSubclass, [in] UINT_PTR uIdSubclass );",
            "name": "RemoveWindowSubclass"
        },
        {
            "signature": "BOOL SetWindowSubclass( [in] HWND hWnd, [in] SUBCLASSPROC pfnSubclass, [in] UINT_PTR uIdSubclass, [in] DWORD_PTR dwRefData );",
            "name": "SetWindowSubclass"
        },
        {
            "signature": "BOOL ShowHideMenuCtl( HWND hWnd, UINT_PTR uFlags, LPINT lpInfo );",
            "name": "ShowHideMenuCtl"
        },
        {
            "signature": "SUBCLASSPROC Subclassproc; LRESULT Subclassproc( HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData ) {...}",
            "name": "SUBCLASSPROC callback"
        },
        {
            "signature": "HRESULT TaskDialog( [in] HWND hwndOwner, [in] HINSTANCE hInstance, [in] PCWSTR pszWindowTitle, [in] PCWSTR pszMainInstruction, [in] PCWSTR pszContent, [in] TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons, [in] PCWSTR pszIcon, [out] int *pnButton );",
            "name": "TaskDialog"
        },
        {
            "signature": "HRESULT TaskDialogIndirect( [in] const TASKDIALOGCONFIG *pTaskConfig, [out, optional] int *pnButton, [out, optional] int *pnRadioButton, [out, optional] BOOL *pfVerificationFlagChecked );",
            "name": "TaskDialogIndirect"
        },
        {
            "signature": "HRESULT UninitializeFlatSB( HWND unnamedParam1 );",
            "name": "UninitializeFlatSB"
        }
    ],
    "Commdlg.h": [
        {
            "signature": "ChooseColorA Choosecolora; BOOL Choosecolora( LPCHOOSECOLORA unnamedParam1 ) {...}",
            "name": "ChooseColorA callback"
        },
        {
            "signature": "ChooseColorW Choosecolorw; BOOL Choosecolorw( LPCHOOSECOLORW unnamedParam1 ) {...}",
            "name": "ChooseColorW callback"
        },
        {
            "signature": "ChooseFontA Choosefonta; BOOL Choosefonta( LPCHOOSEFONTA unnamedParam1 ) {...}",
            "name": "ChooseFontA callback"
        },
        {
            "signature": "ChooseFontW Choosefontw; BOOL Choosefontw( LPCHOOSEFONTW unnamedParam1 ) {...}",
            "name": "ChooseFontW callback"
        },
        {
            "signature": "DWORD CommDlgExtendedError();",
            "name": "CommDlgExtendedError"
        },
        {
            "signature": "HWND FindTextA( [in] LPFINDREPLACEA unnamedParam1 );",
            "name": "FindTextA"
        },
        {
            "signature": "HWND FindTextW( [in] LPFINDREPLACEW unnamedParam1 );",
            "name": "FindTextW"
        },
        {
            "signature": "short GetFileTitleA( [in] LPCSTR unnamedParam1, [out] LPSTR Buf, [in] WORD cchSize );",
            "name": "GetFileTitleA"
        },
        {
            "signature": "short GetFileTitleW( [in] LPCWSTR unnamedParam1, [out] LPWSTR Buf, [in] WORD cchSize );",
            "name": "GetFileTitleW"
        },
        {
            "signature": "BOOL GetOpenFileNameA( [in, out] LPOPENFILENAMEA unnamedParam1 );",
            "name": "GetOpenFileNameA"
        },
        {
            "signature": "BOOL GetOpenFileNameW( [in, out] LPOPENFILENAMEW unnamedParam1 );",
            "name": "GetOpenFileNameW"
        },
        {
            "signature": "BOOL GetSaveFileNameA( [in, out] LPOPENFILENAMEA unnamedParam1 );",
            "name": "GetSaveFileNameA"
        },
        {
            "signature": "BOOL GetSaveFileNameW( [in, out] LPOPENFILENAMEW unnamedParam1 );",
            "name": "GetSaveFileNameW"
        },
        {
            "signature": "LPCCHOOKPROC Lpcchookproc; UINT_PTR Lpcchookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPCCHOOKPROC callback"
        },
        {
            "signature": "LPCFHOOKPROC Lpcfhookproc; UINT_PTR Lpcfhookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPCFHOOKPROC callback"
        },
        {
            "signature": "LPFRHOOKPROC Lpfrhookproc; UINT_PTR Lpfrhookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPFRHOOKPROC callback"
        },
        {
            "signature": "LPOFNHOOKPROC Lpofnhookproc; UINT_PTR Lpofnhookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPOFNHOOKPROC callback"
        },
        {
            "signature": "LPPAGEPAINTHOOK Lppagepainthook; UINT_PTR Lppagepainthook( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPPAGEPAINTHOOK callback"
        },
        {
            "signature": "LPPAGESETUPHOOK Lppagesetuphook; UINT_PTR Lppagesetuphook( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPPAGESETUPHOOK callback"
        },
        {
            "signature": "LPPRINTHOOKPROC Lpprinthookproc; UINT_PTR Lpprinthookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPPRINTHOOKPROC callback"
        },
        {
            "signature": "LPSETUPHOOKPROC Lpsetuphookproc; UINT_PTR Lpsetuphookproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "LPSETUPHOOKPROC callback"
        },
        {
            "signature": "PageSetupDlgA Pagesetupdlga; BOOL Pagesetupdlga( LPPAGESETUPDLGA unnamedParam1 ) {...}",
            "name": "PageSetupDlgA callback"
        },
        {
            "signature": "PageSetupDlgW Pagesetupdlgw; BOOL Pagesetupdlgw( LPPAGESETUPDLGW unnamedParam1 ) {...}",
            "name": "PageSetupDlgW callback"
        },
        {
            "signature": "PrintDlgA Printdlga; BOOL Printdlga( LPPRINTDLGA pPD ) {...}",
            "name": "PrintDlgA callback"
        },
        {
            "signature": "PrintDlgExA Printdlgexa; HRESULT Printdlgexa( LPPRINTDLGEXA pPD ) {...}",
            "name": "PrintDlgExA callback"
        },
        {
            "signature": "PrintDlgExW Printdlgexw; HRESULT Printdlgexw( LPPRINTDLGEXW pPD ) {...}",
            "name": "PrintDlgExW callback"
        },
        {
            "signature": "PrintDlgW Printdlgw; BOOL Printdlgw( LPPRINTDLGW pPD ) {...}",
            "name": "PrintDlgW callback"
        },
        {
            "signature": "HWND ReplaceTextA( [in, out] LPFINDREPLACEA unnamedParam1 );",
            "name": "ReplaceTextA"
        },
        {
            "signature": "HWND ReplaceTextW( [in, out] LPFINDREPLACEW unnamedParam1 );",
            "name": "ReplaceTextW"
        }
    ],
    "Commoncontrols.h": [
        {
            "signature": "HRESULT ImageList_CoCreateInstance( [in] REFCLSID rclsid, [in, optional] const IUnknown *punkOuter, [in] REFIID riid, [out] void **ppv );",
            "name": "ImageList_CoCreateInstance"
        }
    ],
    "Comppkgsup.h": [
        {
            "signature": "HRESULT AreDvdCodecsEnabled();",
            "name": "AreDvdCodecsEnabled"
        },
        {
            "signature": "HRESULT GetMediaComponentPackageInfo( [in] bool trustedOnly, [in] HSTRING category, [out] ABI::Windows::Foundation::Collections::IVector<ABI::Windows::Foundation::Collections::IPropertySet *>**codecPropertiesVector );",
            "name": "GetMediaComponentPackageInfo"
        },
        {
            "signature": "HRESULT GetMediaExtensionCommunicationFactory( [out] LPVOID *factory );",
            "name": "GetMediaExtensionCommunicationFactory"
        },
        {
            "signature": "HRESULT GetServerForPMP( HSTRING serverClassId, [out] IUnknown **unknown );",
            "name": "GetServerForPMP"
        },
        {
            "signature": "HRESULT InstantiateComponentFromPackage( [in] HSTRING classId, [in] HSTRING packageFullName, [out] IInspectable **instance );",
            "name": "InstantiateComponentFromPackage"
        },
        {
            "signature": "BOOL IsMediaBehaviorEnabled( GUID mediaBehavior );",
            "name": "IsMediaBehaviorEnabled"
        },
        {
            "signature": "HRESULT RegisterServerForPMP( HSTRING serverClassId, IClassFactory *classFactory, [out] LPVOID *token );",
            "name": "RegisterServerForPMP"
        },
        {
            "signature": "HRESULT RequireNetworkDuringMediaTaskCompletion( BOOL requireNetwork, [out, optional] DWORD *requireCount );",
            "name": "RequireNetworkDuringMediaTaskCompletion"
        },
        {
            "signature": "HRESULT UnregisterServerForPMP( LPVOID token );",
            "name": "UnregisterServerForPMP"
        }
    ],
    "Compressapi.h": [
        {
            "signature": "BOOL CloseCompressor( [in] COMPRESSOR_HANDLE CompressorHandle );",
            "name": "CloseCompressor"
        },
        {
            "signature": "BOOL CloseDecompressor( [in] DECOMPRESSOR_HANDLE DecompressorHandle );",
            "name": "CloseDecompressor"
        },
        {
            "signature": "BOOL Compress( [in] COMPRESSOR_HANDLE CompressorHandle, [in] LPCVOID UncompressedData, [in] SIZE_T UncompressedDataSize, [out] PVOID CompressedBuffer, [in] SIZE_T CompressedBufferSize, [out] PSIZE_T CompressedDataSize );",
            "name": "Compress"
        },
        {
            "signature": "BOOL CreateCompressor( [in] DWORD Algorithm, [in, optional] PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines, [out] PCOMPRESSOR_HANDLE CompressorHandle );",
            "name": "CreateCompressor"
        },
        {
            "signature": "BOOL CreateDecompressor( [in] DWORD Algorithm, [in, optional] PCOMPRESS_ALLOCATION_ROUTINES AllocationRoutines, [out] PDECOMPRESSOR_HANDLE DecompressorHandle );",
            "name": "CreateDecompressor"
        },
        {
            "signature": "BOOL Decompress( [in] DECOMPRESSOR_HANDLE DecompressorHandle, [in] LPCVOID CompressedData, [in] SIZE_T CompressedDataSize, [out] PVOID UncompressedBuffer, [in] SIZE_T UncompressedBufferSize, [out] PSIZE_T UncompressedDataSize );",
            "name": "Decompress"
        },
        {
            "signature": "BOOL QueryCompressorInformation( [in] COMPRESSOR_HANDLE CompressorHandle, [in] COMPRESS_INFORMATION_CLASS CompressInformationClass, [out] PVOID CompressInformation, [in] SIZE_T CompressInformationSize );",
            "name": "QueryCompressorInformation"
        },
        {
            "signature": "BOOL QueryDecompressorInformation( [in] DECOMPRESSOR_HANDLE DecompressorHandle, [in] COMPRESS_INFORMATION_CLASS CompressInformationClass, [out] PVOID CompressInformation, [in] SIZE_T CompressInformationSize );",
            "name": "QueryDecompressorInformation"
        },
        {
            "signature": "BOOL ResetCompressor( [in] COMPRESSOR_HANDLE CompressorHandle );",
            "name": "ResetCompressor"
        },
        {
            "signature": "BOOL ResetDecompressor( [in] DECOMPRESSOR_HANDLE DecompressorHandle );",
            "name": "ResetDecompressor"
        },
        {
            "signature": "BOOL SetCompressorInformation( [in] COMPRESSOR_HANDLE CompressorHandle, [in] COMPRESS_INFORMATION_CLASS CompressInformationClass, [in] LPCVOID CompressInformation, [in] SIZE_T CompressInformationSize );",
            "name": "SetCompressorInformation"
        },
        {
            "signature": "BOOL SetDecompressorInformation( [in] DECOMPRESSOR_HANDLE DecompressorHandle, [in] COMPRESS_INFORMATION_CLASS CompressInformationClass, [in] LPCVOID CompressInformation, [in] SIZE_T CompressInformationSize );",
            "name": "SetDecompressorInformation"
        }
    ],
    "Comsvcs.h": [
        {
            "signature": "HRESULT CoCreateActivity( [in] IUnknown *pIUnknown, [in] REFIID riid, [out] void **ppObj );",
            "name": "CoCreateActivity"
        },
        {
            "signature": "HRESULT CoEnterServiceDomain( [in] IUnknown *pConfigObject );",
            "name": "CoEnterServiceDomain"
        },
        {
            "signature": "void CoLeaveServiceDomain( [in] IUnknown *pUnkStatus );",
            "name": "CoLeaveServiceDomain"
        },
        {
            "signature": "HRESULT GetManagedExtensions( [out] DWORD *dwExts );",
            "name": "GetManagedExtensions"
        },
        {
            "signature": "HRESULT MTSCreateActivity( [in] REFIID riid, [out] void **ppobj );",
            "name": "MTSCreateActivity"
        },
        {
            "signature": "HRESULT RecycleSurrogate( [in] long lReasonCode );",
            "name": "RecycleSurrogate"
        },
        {
            "signature": "void * SafeRef( [in] REFIID rid, [in] IUnknown *pUnk );",
            "name": "SafeRef"
        }
    ],
    "Control.h": [],
    "Corewindow.h": [
        {
            "signature": "HRESULT CreateControlInput( [in] REFIID riid, [out] void **ppv );",
            "name": "CreateControlInput"
        },
        {
            "signature": "HRESULT CreateControlInputEx( [in] IUnknown *pCoreWindow, [in] REFIID riid, [out] void **ppv );",
            "name": "CreateControlInputEx"
        }
    ],
    "Cpl.h": [
        {
            "signature": "APPLET_PROC AppletProc; LONG AppletProc( HWND hwndCpl, UINT msg, LPARAM lParam1, LPARAM lParam2 ) {...}",
            "name": "APPLET_PROC callback"
        }
    ],
    "Credentialprovider.h": [],
    "Credssp.h": [],
    "Cryptdlg.h": [
        {
            "signature": "CRYPTDLGAPI HRESULT CertModifyCertificatesToTrust( [in] int cCerts, [in] PCTL_MODIFY_REQUEST rgCerts, [in] LPCSTR szPurpose, [in] HWND hwnd, [in, optional] HCERTSTORE hcertstoreTrust, [in, optional] PCCERT_CONTEXT pccertSigner );",
            "name": "CertModifyCertificatesToTrust"
        },
        {
            "signature": "CRYPTDLGAPI BOOL CertSelectCertificateA( [in, out] PCERT_SELECT_STRUCT_A pCertSelectInfo );",
            "name": "CertSelectCertificateA"
        },
        {
            "signature": "CRYPTDLGAPI BOOL CertSelectCertificateW( [in, out] PCERT_SELECT_STRUCT_W pCertSelectInfo );",
            "name": "CertSelectCertificateW"
        },
        {
            "signature": "CRYPTDLGAPI BOOL CertViewPropertiesA( [in] PCERT_VIEWPROPERTIES_STRUCT_A pCertViewInfo );",
            "name": "CertViewPropertiesA"
        },
        {
            "signature": "CRYPTDLGAPI BOOL CertViewPropertiesW( [in] PCERT_VIEWPROPERTIES_STRUCT_W pCertViewInfo );",
            "name": "CertViewPropertiesW"
        },
        {
            "signature": "CRYPTDLGAPI DWORD GetFriendlyNameOfCertA( [in] PCCERT_CONTEXT pccert, [out] LPSTR pch, [in] DWORD cch );",
            "name": "GetFriendlyNameOfCertA"
        },
        {
            "signature": "CRYPTDLGAPI DWORD GetFriendlyNameOfCertW( [in] PCCERT_CONTEXT pccert, LPWSTR pwch, DWORD cwch );",
            "name": "GetFriendlyNameOfCertW"
        },
        {
            "signature": "PFNCMFILTERPROC Pfncmfilterproc; BOOL Pfncmfilterproc( [in] PCCERT_CONTEXT pCertContext, LPARAM unnamedParam2, DWORD unnamedParam3, DWORD unnamedParam4 ) {...}",
            "name": "PFNCMFILTERPROC callback"
        },
        {
            "signature": "PFNCMHOOKPROC Pfncmhookproc; UINT Pfncmhookproc( [in] HWND hwndDialog, [in] UINT message, [in] WPARAM wParam, [in] LPARAM lParam ) {...}",
            "name": "PFNCMHOOKPROC callback"
        }
    ],
    "Cryptuiapi.h": [
        {
            "signature": "HRESULT CertSelectionGetSerializedBlob( [in] PCERT_SELECTUI_INPUT pcsi, [out] void **ppOutBuffer, [out] ULONG *pulOutBufferSize );",
            "name": "CertSelectionGetSerializedBlob"
        },
        {
            "signature": "BOOL CryptUIDlgCertMgr( [in] PCCRYPTUI_CERT_MGR_STRUCT pCryptUICertMgr );",
            "name": "CryptUIDlgCertMgr"
        },
        {
            "signature": "PCCERT_CONTEXT CryptUIDlgSelectCertificateFromStore( [in] HCERTSTORE hCertStore, [in] HWND hwnd, [in, optional] LPCWSTR pwszTitle, [in, optional] LPCWSTR pwszDisplayString, [in] DWORD dwDontUseColumn, [in] DWORD dwFlags, [in] void *pvReserved );",
            "name": "CryptUIDlgSelectCertificateFromStore"
        },
        {
            "signature": "BOOL CryptUIDlgViewCertificateA( [in] PCCRYPTUI_VIEWCERTIFICATE_STRUCTA pCertViewInfo, [out] BOOL *pfPropertiesChanged );",
            "name": "CryptUIDlgViewCertificateA"
        },
        {
            "signature": "BOOL CryptUIDlgViewCertificateW( [in] PCCRYPTUI_VIEWCERTIFICATE_STRUCTW pCertViewInfo, [out] BOOL *pfPropertiesChanged );",
            "name": "CryptUIDlgViewCertificateW"
        },
        {
            "signature": "BOOL CryptUIDlgViewContext( [in] DWORD dwContextType, [in] const void *pvContext, [in] HWND hwnd, [in] LPCWSTR pwszTitle, [in] DWORD dwFlags, [in] void *pvReserved );",
            "name": "CryptUIDlgViewContext"
        },
        {
            "signature": "BOOL CryptUIWizDigitalSign( [in] DWORD dwFlags, [in, optional] HWND hwndParent, [in, optional] LPCWSTR pwszWizardTitle, [in] PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO pDigitalSignInfo, [out, optional] PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT *ppSignContext );",
            "name": "CryptUIWizDigitalSign"
        },
        {
            "signature": "BOOL CryptUIWizExport( [in] DWORD dwFlags, [in] HWND hwndParent, [in] LPCWSTR pwszWizardTitle, [in] PCCRYPTUI_WIZ_EXPORT_INFO pExportInfo, [in] void *pvoid );",
            "name": "CryptUIWizExport"
        },
        {
            "signature": "BOOL CryptUIWizFreeDigitalSignContext( [in] PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT pSignContext );",
            "name": "CryptUIWizFreeDigitalSignContext"
        },
        {
            "signature": "BOOL CryptUIWizImport( [in] DWORD dwFlags, [in] HWND hwndParent, [in] LPCWSTR pwszWizardTitle, [in] PCCRYPTUI_WIZ_IMPORT_SRC_INFO pImportSrc, [in] HCERTSTORE hDestCertStore );",
            "name": "CryptUIWizImport"
        },
        {
            "signature": "PFNCFILTERPROC Pfncfilterproc; BOOL Pfncfilterproc( [in] PCCERT_CONTEXT pCertContext, [in] BOOL *pfInitialSelectedCert, [in] void *pvCallbackData ) {...}",
            "name": "PFNCFILTERPROC callback"
        }
    ],
    "Cryptxml.h": [
        {
            "signature": "HRESULT CryptXmlAddObject( [in] HCRYPTXML hSignatureOrObject, DWORD dwFlags, [in, optional] const CRYPT_XML_PROPERTY *rgProperty, [in] ULONG cProperty, [in] const CRYPT_XML_BLOB *pEncoded, [out, optional] const CRYPT_XML_OBJECT **ppObject );",
            "name": "CryptXmlAddObject"
        },
        {
            "signature": "HRESULT CryptXmlClose( [in] HCRYPTXML hCryptXml );",
            "name": "CryptXmlClose"
        },
        {
            "signature": "HRESULT CryptXmlCreateReference( [in] HCRYPTXML hCryptXml, DWORD dwFlags, [in, optional] LPCWSTR wszId, [in, optional] LPCWSTR wszURI, [in, optional] LPCWSTR wszType, [in] const CRYPT_XML_ALGORITHM *pDigestMethod, ULONG cTransform, [in] const CRYPT_XML_ALGORITHM *rgTransform, [out] HCRYPTXML *phReference );",
            "name": "CryptXmlCreateReference"
        },
        {
            "signature": "HRESULT CryptXmlDigestReference( [in] HCRYPTXML hReference, DWORD dwFlags, [in] CRYPT_XML_DATA_PROVIDER *pDataProviderIn );",
            "name": "CryptXmlDigestReference"
        },
        {
            "signature": "CryptXmlDllCloseDigest Cryptxmldllclosedigest; HRESULT Cryptxmldllclosedigest( [in] CRYPT_XML_DIGEST hDigest ) {...}",
            "name": "CryptXmlDllCloseDigest callback"
        },
        {
            "signature": "CryptXmlDllCreateDigest Cryptxmldllcreatedigest; HRESULT Cryptxmldllcreatedigest( [in] const CRYPT_XML_ALGORITHM *pDigestMethod, [out] ULONG *pcbSize, [out] CRYPT_XML_DIGEST *phDigest ) {...}",
            "name": "CryptXmlDllCreateDigest callback"
        },
        {
            "signature": "CryptXmlDllCreateKey Cryptxmldllcreatekey; HRESULT Cryptxmldllcreatekey( [in] const CRYPT_XML_BLOB *pEncoded, [out] BCRYPT_KEY_HANDLE *phKey ) {...}",
            "name": "CryptXmlDllCreateKey callback"
        },
        {
            "signature": "CryptXmlDllDigestData Cryptxmldlldigestdata; HRESULT Cryptxmldlldigestdata( CRYPT_XML_DIGEST hDigest, const BYTE *pbData, ULONG cbData ) {...}",
            "name": "CryptXmlDllDigestData callback"
        },
        {
            "signature": "CryptXmlDllEncodeAlgorithm Cryptxmldllencodealgorithm; HRESULT Cryptxmldllencodealgorithm( [in] const CRYPT_XML_ALGORITHM_INFO *pAlgInfo, CRYPT_XML_CHARSET dwCharset, [in, out] void *pvCallbackState, [in] PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite ) {...}",
            "name": "CryptXmlDllEncodeAlgorithm callback"
        },
        {
            "signature": "CryptXmlDllEncodeKeyValue Cryptxmldllencodekeyvalue; HRESULT Cryptxmldllencodekeyvalue( [in] NCRYPT_KEY_HANDLE hKey, CRYPT_XML_CHARSET dwCharset, [in, out] void *pvCallbackState, [in] PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite ) {...}",
            "name": "CryptXmlDllEncodeKeyValue callback"
        },
        {
            "signature": "CryptXmlDllFinalizeDigest Cryptxmldllfinalizedigest; HRESULT Cryptxmldllfinalizedigest( [in] CRYPT_XML_DIGEST hDigest, [out] BYTE *pbDigest, ULONG cbDigest ) {...}",
            "name": "CryptXmlDllFinalizeDigest callback"
        },
        {
            "signature": "CryptXmlDllGetAlgorithmInfo Cryptxmldllgetalgorithminfo; HRESULT Cryptxmldllgetalgorithminfo( [in] const CRYPT_XML_ALGORITHM *pXmlAlgorithm, [out] CRYPT_XML_ALGORITHM_INFO **ppAlgInfo ) {...}",
            "name": "CryptXmlDllGetAlgorithmInfo callback"
        },
        {
            "signature": "CryptXmlDllGetInterface Cryptxmldllgetinterface; HRESULT Cryptxmldllgetinterface( DWORD dwFlags, [in] const CRYPT_XML_ALGORITHM_INFO *pMethod, [out] CRYPT_XML_CRYPTOGRAPHIC_INTERFACE *pInterface ) {...}",
            "name": "CryptXmlDllGetInterface callback"
        },
        {
            "signature": "CryptXmlDllSignData Cryptxmldllsigndata; HRESULT Cryptxmldllsigndata( [in] const CRYPT_XML_ALGORITHM *pSignatureMethod, [in] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [in] DWORD dwKeySpec, [in] const BYTE *pbInput, [in] ULONG cbInput, [out, optional] BYTE *pbOutput, [in] ULONG cbOutput, [out] ULONG *pcbResult ) {...}",
            "name": "CryptXmlDllSignData callback"
        },
        {
            "signature": "CryptXmlDllVerifySignature Cryptxmldllverifysignature; HRESULT Cryptxmldllverifysignature( [in] const CRYPT_XML_ALGORITHM *pSignatureMethod, [in] BCRYPT_KEY_HANDLE hKey, [in] const BYTE *pbInput, [in] ULONG cbInput, [in] const BYTE *pbSignature, [in] ULONG cbSignature ) {...}",
            "name": "CryptXmlDllVerifySignature callback"
        },
        {
            "signature": "HRESULT CryptXmlEncode( [in] HCRYPTXML hCryptXml, CRYPT_XML_CHARSET dwCharset, [in] const CRYPT_XML_PROPERTY *rgProperty, [in] ULONG cProperty, [in, out] void *pvCallbackState, [in] PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite );",
            "name": "CryptXmlEncode"
        },
        {
            "signature": "HRESULT CryptXmlGetAlgorithmInfo( [in] const CRYPT_XML_ALGORITHM *pXmlAlgorithm, DWORD dwFlags, [out] CRYPT_XML_ALGORITHM_INFO **ppAlgInfo );",
            "name": "CryptXmlGetAlgorithmInfo"
        },
        {
            "signature": "HRESULT CryptXmlGetDocContext( [in] HCRYPTXML hCryptXml, [out] const CRYPT_XML_DOC_CTXT **ppStruct );",
            "name": "CryptXmlGetDocContext"
        },
        {
            "signature": "HRESULT CryptXmlGetReference( [in] HCRYPTXML hCryptXml, [out] const CRYPT_XML_REFERENCE **ppStruct );",
            "name": "CryptXmlGetReference"
        },
        {
            "signature": "HRESULT CryptXmlGetSignature( [in] HCRYPTXML hCryptXml, [out] const CRYPT_XML_SIGNATURE **ppStruct );",
            "name": "CryptXmlGetSignature"
        },
        {
            "signature": "HRESULT CryptXmlGetStatus( HCRYPTXML hCryptXml, CRYPT_XML_STATUS *pStatus );",
            "name": "CryptXmlGetStatus"
        },
        {
            "signature": "HRESULT CryptXmlGetTransforms( [out] const CRYPT_XML_TRANSFORM_CHAIN_CONFIG **ppConfig );",
            "name": "CryptXmlGetTransforms"
        },
        {
            "signature": "HRESULT CryptXmlImportPublicKey( DWORD dwFlags, [in] const CRYPT_XML_KEY_VALUE *pKeyValue, [out] BCRYPT_KEY_HANDLE *phKey );",
            "name": "CryptXmlImportPublicKey"
        },
        {
            "signature": "HRESULT CryptXmlOpenToDecode( [in, optional] const CRYPT_XML_TRANSFORM_CHAIN_CONFIG *pConfig, DWORD dwFlags, [in] const CRYPT_XML_PROPERTY *rgProperty, ULONG cProperty, [in] const CRYPT_XML_BLOB *pEncoded, HCRYPTXML *phCryptXml );",
            "name": "CryptXmlOpenToDecode"
        },
        {
            "signature": "HRESULT CryptXmlOpenToEncode( [in, optional] const CRYPT_XML_TRANSFORM_CHAIN_CONFIG *pConfig, DWORD dwFlags, [in, optional] LPCWSTR wszId, [in] const CRYPT_XML_PROPERTY *rgProperty, [in] ULONG cProperty, [in, optional] const CRYPT_XML_BLOB *pEncoded, [optional] HCRYPTXML *phSignature );",
            "name": "CryptXmlOpenToEncode"
        },
        {
            "signature": "HRESULT CryptXmlSetHMACSecret( [in] HCRYPTXML hSignature, [in] const BYTE *pbSecret, ULONG cbSecret );",
            "name": "CryptXmlSetHMACSecret"
        },
        {
            "signature": "HRESULT CryptXmlSign( [in] HCRYPTXML hSignature, [in, optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hKey, DWORD dwKeySpec, DWORD dwFlags, CRYPT_XML_KEYINFO_SPEC dwKeyInfoSpec, [in, optional] const void *pvKeyInfoSpec, [in] const CRYPT_XML_ALGORITHM *pSignatureMethod, [in] const CRYPT_XML_ALGORITHM *pCanonicalization );",
            "name": "CryptXmlSign"
        },
        {
            "signature": "HRESULT CryptXmlVerifySignature( [in] HCRYPTXML hSignature, [in, optional] BCRYPT_KEY_HANDLE hKey, DWORD dwFlags );",
            "name": "CryptXmlVerifySignature"
        },
        {
            "signature": "PFN_CRYPT_XML_CREATE_TRANSFORM PfnCryptXmlCreateTransform; HRESULT PfnCryptXmlCreateTransform( [in] const CRYPT_XML_ALGORITHM *pTransform, [in] CRYPT_XML_DATA_PROVIDER *pProviderIn, [out] CRYPT_XML_DATA_PROVIDER *pProviderOut ) {...}",
            "name": "PFN_CRYPT_XML_CREATE_TRANSFORM callback"
        },
        {
            "signature": "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE PfnCryptXmlDataProviderClose; HRESULT PfnCryptXmlDataProviderClose( [in, out] void *pvCallbackState ) {...}",
            "name": "PFN_CRYPT_XML_DATA_PROVIDER_CLOSE callback"
        },
        {
            "signature": "PFN_CRYPT_XML_DATA_PROVIDER_READ PfnCryptXmlDataProviderRead; HRESULT PfnCryptXmlDataProviderRead( [in, out] void *pvCallbackState, [out] BYTE *pbData, [in] ULONG cbData, [out] ULONG *pcbRead ) {...}",
            "name": "PFN_CRYPT_XML_DATA_PROVIDER_READ callback"
        },
        {
            "signature": "PFN_CRYPT_XML_ENUM_ALG_INFO PfnCryptXmlEnumAlgInfo; BOOL PfnCryptXmlEnumAlgInfo( [in] const CRYPT_XML_ALGORITHM_INFO *pInfo, [in, out, optional] void *pvArg ) {...}",
            "name": "PFN_CRYPT_XML_ENUM_ALG_INFO callback"
        },
        {
            "signature": "PFN_CRYPT_XML_WRITE_CALLBACK PfnCryptXmlWriteCallback; HRESULT PfnCryptXmlWriteCallback( [in, out] void *pvCallbackState, [in] const BYTE *pbData, ULONG cbData ) {...}",
            "name": "PFN_CRYPT_XML_WRITE_CALLBACK callback"
        }
    ],
    "Cscapi.h": [
        {
            "signature": "DWORD OfflineFilesEnable( [in] BOOL bEnable, [out] BOOL *pbRebootRequired );",
            "name": "OfflineFilesEnable"
        },
        {
            "signature": "DWORD OfflineFilesQueryStatus( [out] BOOL *pbActive, [out] BOOL *pbEnabled );",
            "name": "OfflineFilesQueryStatus"
        },
        {
            "signature": "DWORD OfflineFilesQueryStatusEx( [out] BOOL *pbActive, [out] BOOL *pbEnabled, [out] BOOL *pbAvailable );",
            "name": "OfflineFilesQueryStatusEx"
        },
        {
            "signature": "DWORD OfflineFilesStart();",
            "name": "OfflineFilesStart"
        }
    ],
    "Cscobj.h": [],
    "Ctffunc.h": [],
    "Ctfspui.h": [],
    "Ctfutb.h": [],
    "Ctxtcall.h": [],
    "D2d1.h": [
        {
            "signature": "HRESULT D2D1CreateFactory( [in] D2D1_FACTORY_TYPE factoryType, [in] REFIID riid, [in, optional] const D2D1_FACTORY_OPTIONS *pFactoryOptions, [out] void **ppIFactory );",
            "name": "D2D1CreateFactory"
        },
        {
            "signature": "HRESULT D2D1CreateFactory( [in] D2D1_FACTORY_TYPE factoryType, [in] REFIID riid, void **factory );",
            "name": "D2D1CreateFactory"
        },
        {
            "signature": "BOOL D2D1InvertMatrix( [in, out] D2D1_MATRIX_3X2_F *matrix );",
            "name": "D2D1InvertMatrix"
        },
        {
            "signature": "BOOL D2D1IsMatrixInvertible( [in] const D2D1_MATRIX_3X2_F *matrix );",
            "name": "D2D1IsMatrixInvertible"
        },
        {
            "signature": "void D2D1MakeRotateMatrix( [in] FLOAT angle, [in] D2D1_POINT_2F center, [out] D2D1_MATRIX_3X2_F *matrix );",
            "name": "D2D1MakeRotateMatrix"
        },
        {
            "signature": "void D2D1MakeSkewMatrix( [in] FLOAT angleX, [in] FLOAT angleY, [in] D2D1_POINT_2F center, [out] D2D1_MATRIX_3X2_F *matrix );",
            "name": "D2D1MakeSkewMatrix"
        }
    ],
    "D2d1_1.h": [
        {
            "signature": "D2D1_COLOR_F D2D1ConvertColorSpace( D2D1_COLOR_SPACE sourceColorSpace, D2D1_COLOR_SPACE destinationColorSpace, [in] const D2D1_COLOR_F *color );",
            "name": "D2D1ConvertColorSpace"
        },
        {
            "signature": "HRESULT D2D1CreateDevice( [in] IDXGIDevice *dxgiDevice, [in, optional] const D2D1_CREATION_PROPERTIES *creationProperties, [out] ID2D1Device **d2dDevice );",
            "name": "D2D1CreateDevice"
        },
        {
            "signature": "HRESULT D2D1CreateDeviceContext( [in] IDXGISurface *dxgiSurface, [in, optional] const D2D1_CREATION_PROPERTIES *creationProperties, [out] ID2D1DeviceContext **d2dDeviceContext );",
            "name": "D2D1CreateDeviceContext"
        },
        {
            "signature": "void D2D1SinCos( [in] FLOAT angle, [out] FLOAT *s, [out] FLOAT *c );",
            "name": "D2D1SinCos"
        },
        {
            "signature": "FLOAT D2D1Tan( [in] FLOAT angle );",
            "name": "D2D1Tan"
        },
        {
            "signature": "FLOAT D2D1Vec3Length( [in] FLOAT x, [in] FLOAT y, [in] FLOAT z );",
            "name": "D2D1Vec3Length"
        },
        {
            "signature": "PD2D1_EFFECT_FACTORY Pd2d1EffectFactory; HRESULT Pd2d1EffectFactory( IUnknown **effectImpl ) {...}",
            "name": "PD2D1_EFFECT_FACTORY callback"
        }
    ],
    "D2d1_1helper.h": [
        {
            "signature": "D2D1_BITMAP_BRUSH_PROPERTIES1 BitmapBrushProperties1( D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, D2D1_INTERPOLATION_MODE interpolationMode );",
            "name": "BitmapBrushProperties1"
        },
        {
            "signature": "D2D1_BITMAP_PROPERTIES1 BitmapProperties1( D2D1_BITMAP_OPTIONS bitmapOptions, [in] const D2D1_PIXEL_FORMAT pixelFormat, FLOAT dpiX, FLOAT dpiY, [in] ID2D1ColorContext *colorContext );",
            "name": "BitmapProperties1"
        },
        {
            "signature": "D2D1_COLOR_F ConvertColorSpace( D2D1_COLOR_SPACE sourceColorSpace, D2D1_COLOR_SPACE destinationColorSpace, [ref] const D2D1_COLOR_F & color );",
            "name": "ConvertColorSpace"
        },
        {
            "signature": "D2D1_CREATION_PROPERTIES CreationProperties( D2D1_THREADING_MODE threadingMode, D2D1_DEBUG_LEVEL debugLevel, D2D1_DEVICE_CONTEXT_OPTIONS options );",
            "name": "CreationProperties"
        },
        {
            "signature": "D2D1_DRAWING_STATE_DESCRIPTION1 DrawingStateDescription1( D2D1_ANTIALIAS_MODE antialiasMode, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode, D2D1_TAG tag1, D2D1_TAG tag2, [in, ref] const D2D1_MATRIX_3X2_F & transform, D2D1_PRIMITIVE_BLEND primitiveBlend, D2D1_UNIT_MODE unitMode );",
            "name": "DrawingStateDescription1"
        },
        {
            "signature": "D2D1_EFFECT_INPUT_DESCRIPTION EffectInputDescription( ID2D1Effect *effect, UINT32 inputIndex, D2D1_RECT_F inputRectangle );",
            "name": "EffectInputDescription"
        },
        {
            "signature": "D2D1_IMAGE_BRUSH_PROPERTIES ImageBrushProperties( D2D1_RECT_F sourceRectangle, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, D2D1_INTERPOLATION_MODE interpolationMode );",
            "name": "ImageBrushProperties"
        },
        {
            "signature": "D2D1_LAYER_PARAMETERS1 LayerParameters1( [in, ref] const D2D1_RECT_F & contentBounds, [in, optional] ID2D1Geometry *geometricMask, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D1_MATRIX_3X2_F maskTransform, FLOAT opacity, [in, optional] ID2D1Brush *opacityBrush, D2D1_LAYER_OPTIONS1 layerOptions );",
            "name": "LayerParameters1"
        },
        {
            "signature": "D2D1_POINT_2L Point2L( INT32 x, INT32 y );",
            "name": "Point2L"
        },
        {
            "signature": "D2D1_PRINT_CONTROL_PROPERTIES PrintControlProperties( D2D1_PRINT_FONT_SUBSET_MODE fontSubsetMode, FLOAT rasterDpi, D2D1_COLOR_SPACE colorSpace );",
            "name": "PrintControlProperties"
        },
        {
            "signature": "D2D1_RECT_L RectL( INT32 left, INT32 top, INT32 right, INT32 bottom );",
            "name": "RectL"
        },
        {
            "signature": "D2D1_RENDERING_CONTROLS RenderingControls( D2D1_BUFFER_PRECISION bufferPrecision, D2D1_SIZE_U tileSize );",
            "name": "RenderingControls"
        },
        {
            "signature": "HRESULT SetDpiCompensatedEffectInput( [in] ID2D1DeviceContext *deviceContext, [in] ID2D1Effect *effect, UINT32 inputIndex, [in, optional] ID2D1Bitmap *inputBitmap, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_BORDER_MODE borderMode );",
            "name": "SetDpiCompensatedEffectInput"
        },
        {
            "signature": "D2D1_STROKE_STYLE_PROPERTIES1 StrokeStyleProperties1( D2D1_CAP_STYLE startCap, D2D1_CAP_STYLE endCap, D2D1_CAP_STYLE dashCap, D2D1_LINE_JOIN lineJoin, FLOAT miterLimit, D2D1_DASH_STYLE dashStyle, FLOAT dashOffset, D2D1_STROKE_TRANSFORM_TYPE transformType );",
            "name": "StrokeStyleProperties1"
        },
        {
            "signature": "D2D1_VECTOR_2F Vector2F( FLOAT x, FLOAT y );",
            "name": "Vector2F"
        },
        {
            "signature": "D2D1_VECTOR_3F Vector3F( FLOAT x, FLOAT y, FLOAT z );",
            "name": "Vector3F"
        },
        {
            "signature": "D2D1_VECTOR_4F Vector4F( FLOAT x, FLOAT y, FLOAT z, FLOAT w );",
            "name": "Vector4F"
        }
    ],
    "D2d1_2.h": [
        {
            "signature": "FLOAT D2D1ComputeMaximumScaleFactor( [in] const D2D1_MATRIX_3X2_F *matrix );",
            "name": "D2D1ComputeMaximumScaleFactor"
        }
    ],
    "D2d1_3.h": [
        {
            "signature": "void D2D1GetGradientMeshInteriorPointsFromCoonsPatch( [in] const D2D1_POINT_2F *pPoint0, [in] const D2D1_POINT_2F *pPoint1, [in] const D2D1_POINT_2F *pPoint2, [in] const D2D1_POINT_2F *pPoint3, [in] const D2D1_POINT_2F *pPoint4, [in] const D2D1_POINT_2F *pPoint5, [in] const D2D1_POINT_2F *pPoint6, [in] const D2D1_POINT_2F *pPoint7, [in] const D2D1_POINT_2F *pPoint8, [in] const D2D1_POINT_2F *pPoint9, [in] const D2D1_POINT_2F *pPoint10, [in] const D2D1_POINT_2F *pPoint11, [out] D2D1_POINT_2F *pTensorPoint11, [out] D2D1_POINT_2F *pTensorPoint12, [out] D2D1_POINT_2F *pTensorPoint21, [out] D2D1_POINT_2F *pTensorPoint22 );",
            "name": "D2D1GetGradientMeshInteriorPointsFromCoonsPatch"
        }
    ],
    "D2d1_3helper.h": [
        {
            "signature": "D2D1_GRADIENT_MESH_PATCH GradientMeshPatch( D2D1_POINT_2F point00, D2D1_POINT_2F point01, D2D1_POINT_2F point02, D2D1_POINT_2F point03, D2D1_POINT_2F point10, D2D1_POINT_2F point11, D2D1_POINT_2F point12, D2D1_POINT_2F point13, D2D1_POINT_2F point20, D2D1_POINT_2F point21, D2D1_POINT_2F point22, D2D1_POINT_2F point23, D2D1_POINT_2F point30, D2D1_POINT_2F point31, D2D1_POINT_2F point32, D2D1_POINT_2F point33, D2D1_COLOR_F color00, D2D1_COLOR_F color03, D2D1_COLOR_F color30, D2D1_COLOR_F color33, D2D1_PATCH_EDGE_MODE topEdgeMode, D2D1_PATCH_EDGE_MODE leftEdgeMode, D2D1_PATCH_EDGE_MODE bottomEdgeMode, D2D1_PATCH_EDGE_MODE rightEdgeMode );",
            "name": "GradientMeshPatch"
        },
        {
            "signature": "D2D1_GRADIENT_MESH_PATCH GradientMeshPatchFromCoonsPatch( D2D1_POINT_2F point0, D2D1_POINT_2F point1, D2D1_POINT_2F point2, D2D1_POINT_2F point3, D2D1_POINT_2F point4, D2D1_POINT_2F point5, D2D1_POINT_2F point6, D2D1_POINT_2F point7, D2D1_POINT_2F point8, D2D1_POINT_2F point9, D2D1_POINT_2F point10, D2D1_POINT_2F point11, D2D1_COLOR_F color0, D2D1_COLOR_F color1, D2D1_COLOR_F color2, D2D1_COLOR_F color3, D2D1_PATCH_EDGE_MODE topEdgeMode, D2D1_PATCH_EDGE_MODE leftEdgeMode, D2D1_PATCH_EDGE_MODE bottomEdgeMode, D2D1_PATCH_EDGE_MODE rightEdgeMode );",
            "name": "GradientMeshPatchFromCoonsPatch"
        },
        {
            "signature": "D2D1_INK_BEZIER_SEGMENT InkBezierSegment( [ref] const D2D1_INK_POINT & point1, [ref] const D2D1_INK_POINT & point2, [ref] const D2D1_INK_POINT & point3 );",
            "name": "InkBezierSegment"
        },
        {
            "signature": "D2D1_INK_POINT InkPoint( [ref] const D2D1_POINT_2F & point, FLOAT radius );",
            "name": "InkPoint"
        },
        {
            "signature": "D2D1_INK_STYLE_PROPERTIES InkStyleProperties( D2D1_INK_NIB_SHAPE nibShape, [ref] const D2D1_MATRIX_3X2_F & nibTransform );",
            "name": "InkStyleProperties"
        }
    ],
    "D2d1effectauthor.h": [
        {
            "signature": "PD2D1_PROPERTY_GET_FUNCTION Pd2d1PropertyGetFunction; HRESULT Pd2d1PropertyGetFunction( [in] const IUnknown *effect, [out] BYTE *data, UINT32 dataSize, [out, optional] UINT32 *actualSize ) {...}",
            "name": "PD2D1_PROPERTY_GET_FUNCTION callback"
        },
        {
            "signature": "PD2D1_PROPERTY_SET_FUNCTION Pd2d1PropertySetFunction; HRESULT Pd2d1PropertySetFunction( [in] IUnknown *effect, [in] const BYTE *data, UINT32 dataSize ) {...}",
            "name": "PD2D1_PROPERTY_SET_FUNCTION callback"
        }
    ],
    "D2d1effectauthor_1.h": [],
    "D2d1effecthelpers.h": [
        {
            "signature": "HRESULT StringGetter( [in] const IUnknown *effect, [out, optional] BYTE *data, UINT32 dataSize, [out, optional] UINT32 *actualSize );",
            "name": "StringGetter"
        },
        {
            "signature": "HRESULT StringSetter( [in] IUnknown *effect, [in] const BYTE *data, UINT32 dataSize );",
            "name": "StringSetter"
        },
        {
            "signature": "HRESULT ValueGetter( [in] const IUnknown *effect, [out, optional] BYTE *data, UINT32 dataSize, [out, optional] UINT32 *actualSize );",
            "name": "ValueGetter"
        },
        {
            "signature": "HRESULT ValueSetter( [in] IUnknown *effect, [in] const BYTE *data, UINT32 dataSize );",
            "name": "ValueSetter"
        }
    ],
    "D2d1effects.h": [],
    "D2d1effects_1.h": [],
    "D2d1effects_2.h": [],
    "D2d1helper.h": [
        {
            "signature": "D2D1_ARC_SEGMENT ArcSegment( [in, ref] const D2D1_POINT_2F & point, [in, ref] const D2D1_SIZE_F & size, [in] FLOAT rotationAngle, [in] D2D1_SWEEP_DIRECTION sweepDirection, [in] D2D1_ARC_SIZE arcSize );",
            "name": "ArcSegment"
        },
        {
            "signature": "D2D1_BEZIER_SEGMENT BezierSegment( [in, ref] const D2D1_POINT_2F & point1, [in, ref] const D2D1_POINT_2F & point2, [in, ref] const D2D1_POINT_2F & point3 );",
            "name": "BezierSegment"
        },
        {
            "signature": "D2D1_BITMAP_BRUSH_PROPERTIES BitmapBrushProperties( D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode );",
            "name": "BitmapBrushProperties"
        },
        {
            "signature": "D2D1_BITMAP_PROPERTIES BitmapProperties( [ref] const D2D1_PIXEL_FORMAT & pixelFormat, FLOAT dpiX, FLOAT dpiY );",
            "name": "BitmapProperties"
        },
        {
            "signature": "D2D1_BRUSH_PROPERTIES BrushProperties( [in] FLOAT opacity, [in, ref] const D2D1_MATRIX_3X2_F & transform );",
            "name": "BrushProperties"
        },
        {
            "signature": "D2D1_DRAWING_STATE_DESCRIPTION DrawingStateDescription( D2D1_ANTIALIAS_MODE antialiasMode, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode, D2D1_TAG tag1, D2D1_TAG tag2, [in, ref] const D2D1_MATRIX_3X2_F & transform );",
            "name": "DrawingStateDescription"
        },
        {
            "signature": "D2D1_ELLIPSE Ellipse( [in, ref] const D2D1_POINT_2F & center, FLOAT radiusX, FLOAT radiusY );",
            "name": "Ellipse"
        },
        {
            "signature": "FLOAT FloatMax();",
            "name": "FloatMax"
        },
        {
            "signature": "D2D1_GRADIENT_STOP GradientStop( FLOAT position, [in, ref] const D2D1_COLOR_F & color );",
            "name": "GradientStop"
        },
        {
            "signature": "D2D1_HWND_RENDER_TARGET_PROPERTIES HwndRenderTargetProperties( [in] HWND hwnd, [in] D2D1_SIZE_U pixelSize, [in] D2D1_PRESENT_OPTIONS presentOptions );",
            "name": "HwndRenderTargetProperties"
        },
        {
            "signature": "D2D1_MATRIX_3X2_F IdentityMatrix();",
            "name": "IdentityMatrix"
        },
        {
            "signature": "D2D1_RECT_F InfiniteRect();",
            "name": "InfiniteRect"
        },
        {
            "signature": "D2D1_LAYER_PARAMETERS LayerParameters( [in, ref] const D2D1_RECT_F & contentBounds, [in, optional] ID2D1Geometry *geometricMask, D2D1_ANTIALIAS_MODE maskAntialiasMode, D2D1_MATRIX_3X2_F maskTransform, FLOAT opacity, ID2D1Brush *opacityBrush, D2D1_LAYER_OPTIONS layerOptions );",
            "name": "LayerParameters"
        },
        {
            "signature": "D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES LinearGradientBrushProperties( [in, ref] const D2D1_POINT_2F & startPoint, [in, ref] const D2D1_POINT_2F & endPoint );",
            "name": "LinearGradientBrushProperties"
        },
        {
            "signature": "D2D1_PIXEL_FORMAT PixelFormat( [in] DXGI_FORMAT dxgiFormat, [in] D2D1_ALPHA_MODE alphaMode );",
            "name": "PixelFormat"
        },
        {
            "signature": "D2D1_POINT_2F Point2F( FLOAT x, FLOAT y );",
            "name": "Point2F"
        },
        {
            "signature": "D2D1_POINT_2U Point2U( UINT32 x, UINT32 y );",
            "name": "Point2U"
        },
        {
            "signature": "D2D1_QUADRATIC_BEZIER_SEGMENT QuadraticBezierSegment( [in, ref] const D2D1_POINT_2F & point1, [in, ref] const D2D1_POINT_2F & point2 );",
            "name": "QuadraticBezierSegment"
        },
        {
            "signature": "D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES RadialGradientBrushProperties( [in, ref] const D2D1_POINT_2F & center, [in, ref] const D2D1_POINT_2F & gradientOriginOffset, [in] FLOAT radiusX, [in] FLOAT radiusY );",
            "name": "RadialGradientBrushProperties"
        },
        {
            "signature": "D2D1_RECT_F RectF( FLOAT left, FLOAT top, FLOAT right, FLOAT bottom );",
            "name": "RectF"
        },
        {
            "signature": "D2D1_RECT_U RectU( UINT32 left, UINT32 top, UINT32 right, UINT32 bottom );",
            "name": "RectU"
        },
        {
            "signature": "D2D1_RENDER_TARGET_PROPERTIES RenderTargetProperties( D2D1_RENDER_TARGET_TYPE type, [in] const D2D1_PIXEL_FORMAT & pixelFormat, FLOAT dpiX, FLOAT dpiY, D2D1_RENDER_TARGET_USAGE usage, D2D1_FEATURE_LEVEL minLevel );",
            "name": "RenderTargetProperties"
        },
        {
            "signature": "D2D1_ROUNDED_RECT RoundedRect( [in, ref] const D2D1_RECT_F & rect, FLOAT radiusX, FLOAT radiusY );",
            "name": "RoundedRect"
        },
        {
            "signature": "D2D1_SIZE_F SizeF( FLOAT width, FLOAT height );",
            "name": "SizeF"
        },
        {
            "signature": "D2D1_SIZE_U SizeU( UINT32 width, UINT32 height );",
            "name": "SizeU"
        },
        {
            "signature": "D2D1_STROKE_STYLE_PROPERTIES StrokeStyleProperties( D2D1_CAP_STYLE startCap, D2D1_CAP_STYLE endCap, D2D1_CAP_STYLE dashCap, D2D1_LINE_JOIN lineJoin, FLOAT miterLimit, D2D1_DASH_STYLE dashStyle, FLOAT dashOffset );",
            "name": "StrokeStyleProperties"
        }
    ],
    "D2d1svg.h": [],
    "D3d10.h": [
        {
            "signature": "UINT D3D10CalcSubresource( [in] UINT MipSlice, [in] UINT ArraySlice, [in] UINT MipLevels );",
            "name": "D3D10CalcSubresource"
        }
    ],
    "D3d10_1.h": [
        {
            "signature": "HRESULT D3D10CreateDevice1( [in] IDXGIAdapter *pAdapter, [in] D3D10_DRIVER_TYPE DriverType, [in] HMODULE Software, [in] UINT Flags, [in] D3D10_FEATURE_LEVEL1 HardwareLevel, [in] UINT SDKVersion, [out] ID3D10Device1 **ppDevice );",
            "name": "D3D10CreateDevice1"
        },
        {
            "signature": "HRESULT D3D10CreateDeviceAndSwapChain1( [in] IDXGIAdapter *pAdapter, [in] D3D10_DRIVER_TYPE DriverType, [in] HMODULE Software, [in] UINT Flags, [in] D3D10_FEATURE_LEVEL1 HardwareLevel, [in] UINT SDKVersion, [in] DXGI_SWAP_CHAIN_DESC *pSwapChainDesc, [out] IDXGISwapChain **ppSwapChain, [out] ID3D10Device1 **ppDevice );",
            "name": "D3D10CreateDeviceAndSwapChain1"
        }
    ],
    "D3d10_1shader.h": [],
    "D3d10effect.h": [
        {
            "signature": "HRESULT D3D10CompileEffectFromMemory( [in] void *pData, [in] SIZE_T DataLength, [in] LPCSTR pSrcFileName, [in] const D3D10_SHADER_MACRO *pDefines, [in] ID3D10Include *pInclude, [in] UINT HLSLFlags, [in] UINT FXFlags, [out] ID3D10Blob **ppCompiledEffect, [out] ID3D10Blob **ppErrors );",
            "name": "D3D10CompileEffectFromMemory"
        },
        {
            "signature": "HRESULT D3D10CreateEffectFromMemory( [in] void *pData, [in] SIZE_T DataLength, [in] UINT FXFlags, [in] ID3D10Device *pDevice, [in] ID3D10EffectPool *pEffectPool, [out] ID3D10Effect **ppEffect );",
            "name": "D3D10CreateEffectFromMemory"
        },
        {
            "signature": "HRESULT D3D10CreateEffectPoolFromMemory( [in] void *pData, [in] SIZE_T DataLength, [in] UINT FXFlags, [in] ID3D10Device *pDevice, [out] ID3D10EffectPool **ppEffectPool );",
            "name": "D3D10CreateEffectPoolFromMemory"
        },
        {
            "signature": "HRESULT D3D10CreateStateBlock( [in] ID3D10Device *pDevice, [in] D3D10_STATE_BLOCK_MASK *pStateBlockMask, [out] ID3D10StateBlock **ppStateBlock );",
            "name": "D3D10CreateStateBlock"
        },
        {
            "signature": "HRESULT D3D10DisassembleEffect( [in] ID3D10Effect *pEffect, [in] BOOL EnableColorCode, [out] ID3D10Blob **ppDisassembly );",
            "name": "D3D10DisassembleEffect"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskDifference( [in] D3D10_STATE_BLOCK_MASK *pA, [in] D3D10_STATE_BLOCK_MASK *pB, [out] D3D10_STATE_BLOCK_MASK *pResult );",
            "name": "D3D10StateBlockMaskDifference"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskDisableAll( [out] D3D10_STATE_BLOCK_MASK *pMask );",
            "name": "D3D10StateBlockMaskDisableAll"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskDisableCapture( [in, out] D3D10_STATE_BLOCK_MASK *pMask, [in] D3D10_DEVICE_STATE_TYPES StateType, [in] UINT RangeStart, [in] UINT RangeLength );",
            "name": "D3D10StateBlockMaskDisableCapture"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskEnableAll( [out] D3D10_STATE_BLOCK_MASK *pMask );",
            "name": "D3D10StateBlockMaskEnableAll"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskEnableCapture( [in, out] D3D10_STATE_BLOCK_MASK *pMask, [in] D3D10_DEVICE_STATE_TYPES StateType, [in] UINT RangeStart, [in] UINT RangeLength );",
            "name": "D3D10StateBlockMaskEnableCapture"
        },
        {
            "signature": "BOOL D3D10StateBlockMaskGetSetting( [in] D3D10_STATE_BLOCK_MASK *pMask, [in] D3D10_DEVICE_STATE_TYPES StateType, [in] UINT Entry );",
            "name": "D3D10StateBlockMaskGetSetting"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskIntersect( [in] D3D10_STATE_BLOCK_MASK *pA, [in] D3D10_STATE_BLOCK_MASK *pB, [out] D3D10_STATE_BLOCK_MASK *pResult );",
            "name": "D3D10StateBlockMaskIntersect"
        },
        {
            "signature": "HRESULT D3D10StateBlockMaskUnion( [in] D3D10_STATE_BLOCK_MASK *pA, [in] D3D10_STATE_BLOCK_MASK *pB, [out] D3D10_STATE_BLOCK_MASK *pResult );",
            "name": "D3D10StateBlockMaskUnion"
        }
    ],
    "D3d10misc.h": [
        {
            "signature": "HRESULT D3D10CreateBlob( [in] SIZE_T NumBytes, [out] LPD3D10BLOB *ppBuffer );",
            "name": "D3D10CreateBlob"
        },
        {
            "signature": "HRESULT D3D10CreateDevice( [in] IDXGIAdapter *pAdapter, [in] D3D10_DRIVER_TYPE DriverType, [in] HMODULE Software, [in] UINT Flags, [in] UINT SDKVersion, [out] ID3D10Device **ppDevice );",
            "name": "D3D10CreateDevice"
        },
        {
            "signature": "HRESULT D3D10CreateDeviceAndSwapChain( [in] IDXGIAdapter *pAdapter, [in] D3D10_DRIVER_TYPE DriverType, [in] HMODULE Software, [in] UINT Flags, [in] UINT SDKVersion, [in] DXGI_SWAP_CHAIN_DESC *pSwapChainDesc, [out] IDXGISwapChain **ppSwapChain, [out] ID3D10Device **ppDevice );",
            "name": "D3D10CreateDeviceAndSwapChain"
        }
    ],
    "D3d10sdklayers.h": [],
    "D3d10shader.h": [
        {
            "signature": "HRESULT D3D10CompileShader( [in] LPCSTR pSrcData, [in] SIZE_T SrcDataSize, [in] LPCSTR pFileName, [in] const D3D10_SHADER_MACRO *pDefines, [in] LPD3D10INCLUDE pInclude, [in] LPCSTR pFunctionName, [in] LPCSTR pProfile, [in] UINT Flags, [out] ID3D10Blob **ppShader, [out] ID3D10Blob **ppErrorMsgs );",
            "name": "D3D10CompileShader"
        },
        {
            "signature": "HRESULT D3D10DisassembleShader( [in] const void *pShader, [in] SIZE_T BytecodeLength, [in] BOOL EnableColorCode, [in] LPCSTR pComments, [out] ID3D10Blob **ppDisassembly );",
            "name": "D3D10DisassembleShader"
        },
        {
            "signature": "LPCSTR D3D10GetGeometryShaderProfile( [in] ID3D10Device *pDevice );",
            "name": "D3D10GetGeometryShaderProfile"
        },
        {
            "signature": "HRESULT D3D10GetInputAndOutputSignatureBlob( [in] const void *pShaderBytecode, [in] SIZE_T BytecodeLength, [out] ID3D10Blob **ppSignatureBlob );",
            "name": "D3D10GetInputAndOutputSignatureBlob"
        },
        {
            "signature": "HRESULT D3D10GetInputSignatureBlob( [in] const void *pShaderBytecode, [in] SIZE_T BytecodeLength, [out] ID3D10Blob **ppSignatureBlob );",
            "name": "D3D10GetInputSignatureBlob"
        },
        {
            "signature": "HRESULT D3D10GetOutputSignatureBlob( [in] const void *pShaderBytecode, [in] SIZE_T BytecodeLength, [out] ID3D10Blob **ppSignatureBlob );",
            "name": "D3D10GetOutputSignatureBlob"
        },
        {
            "signature": "LPCSTR D3D10GetPixelShaderProfile( [in] ID3D10Device *pDevice );",
            "name": "D3D10GetPixelShaderProfile"
        },
        {
            "signature": "HRESULT D3D10GetShaderDebugInfo( const void *pShaderBytecode, SIZE_T BytecodeLength, ID3D10Blob **ppDebugInfo );",
            "name": "D3D10GetShaderDebugInfo"
        },
        {
            "signature": "LPCSTR D3D10GetVertexShaderProfile( [in] ID3D10Device *pDevice );",
            "name": "D3D10GetVertexShaderProfile"
        },
        {
            "signature": "HRESULT D3D10PreprocessShader( [in] LPCSTR pSrcData, [in] SIZE_T SrcDataSize, [in] LPCSTR pFileName, [in] const D3D10_SHADER_MACRO *pDefines, [in] LPD3D10INCLUDE pInclude, [out] ID3D10Blob **ppShaderText, [out] ID3D10Blob **ppErrorMsgs );",
            "name": "D3D10PreprocessShader"
        },
        {
            "signature": "HRESULT D3D10ReflectShader( [in] const void *pShaderBytecode, [in] SIZE_T BytecodeLength, [out] ID3D10ShaderReflection **ppReflector );",
            "name": "D3D10ReflectShader"
        }
    ],
    "D3d11.h": [
        {
            "signature": "UINT D3D11CalcSubresource( UINT MipSlice, UINT ArraySlice, UINT MipLevels );",
            "name": "D3D11CalcSubresource"
        },
        {
            "signature": "HRESULT D3D11CreateDevice( [in, optional] IDXGIAdapter *pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, [in, optional] const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, [out, optional] ID3D11Device **ppDevice, [out, optional] D3D_FEATURE_LEVEL *pFeatureLevel, [out, optional] ID3D11DeviceContext **ppImmediateContext );",
            "name": "D3D11CreateDevice"
        },
        {
            "signature": "HRESULT D3D11CreateDeviceAndSwapChain( [in, optional] IDXGIAdapter *pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, [in, optional] const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, [in, optional] const DXGI_SWAP_CHAIN_DESC *pSwapChainDesc, [out, optional] IDXGISwapChain **ppSwapChain, [out, optional] ID3D11Device **ppDevice, [out, optional] D3D_FEATURE_LEVEL *pFeatureLevel, [out, optional] ID3D11DeviceContext **ppImmediateContext );",
            "name": "D3D11CreateDeviceAndSwapChain"
        }
    ],
    "D3d11_1.h": [],
    "D3d11_2.h": [],
    "D3d11_3.h": [],
    "D3d11_4.h": [],
    "D3d11on12.h": [
        {
            "signature": "HRESULT D3D11On12CreateDevice( [in] IUnknown *pDevice, UINT Flags, [in, optional] const D3D_FEATURE_LEVEL *pFeatureLevels, UINT FeatureLevels, [in, optional] IUnknown * const *ppCommandQueues, UINT NumQueues, UINT NodeMask, [out, optional] ID3D11Device **ppDevice, [out, optional] ID3D11DeviceContext **ppImmediateContext, [out, optional] D3D_FEATURE_LEVEL *pChosenFeatureLevel );",
            "name": "D3D11On12CreateDevice"
        }
    ],
    "D3d11sdklayers.h": [],
    "D3d11shader.h": [],
    "D3d11shadertracing.h": [
        {
            "signature": "HRESULT D3DDisassemble11Trace( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] ID3D11ShaderTrace *pTrace, [in] UINT StartStep, [in] UINT NumSteps, [in] UINT Flags, [out] ID3D10Blob **ppDisassembly );",
            "name": "D3DDisassemble11Trace"
        }
    ],
    "D3d12.h": [
        {
            "signature": "HRESULT D3D12CreateDevice( [in, optional] IUnknown *pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, [in] REFIID riid, [out, optional] void **ppDevice );",
            "name": "D3D12CreateDevice"
        },
        {
            "signature": "HRESULT D3D12CreateRootSignatureDeserializer( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSizeInBytes, [in] REFIID pRootSignatureDeserializerInterface, [out] void **ppRootSignatureDeserializer );",
            "name": "D3D12CreateRootSignatureDeserializer"
        },
        {
            "signature": "HRESULT D3D12CreateVersionedRootSignatureDeserializer( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSizeInBytes, [in] REFIID pRootSignatureDeserializerInterface, [out] void **ppRootSignatureDeserializer );",
            "name": "D3D12CreateVersionedRootSignatureDeserializer"
        },
        {
            "signature": "HRESULT D3D12EnableExperimentalFeatures( UINT NumFeatures, [in] const IID *pIIDs, [in] void *pConfigurationStructs, [in] UINT *pConfigurationStructSizes );",
            "name": "D3D12EnableExperimentalFeatures"
        },
        {
            "signature": "HRESULT D3D12GetDebugInterface( [in] REFIID riid, [out, optional] void **ppvDebug );",
            "name": "D3D12GetDebugInterface"
        },
        {
            "signature": "HRESULT D3D12GetInterface( REFCLSID rclsid, REFIID riid, void **ppvDebug );",
            "name": "D3D12GetInterface"
        },
        {
            "signature": "HRESULT D3D12SerializeRootSignature( [in] const D3D12_ROOT_SIGNATURE_DESC *pRootSignature, [in] D3D_ROOT_SIGNATURE_VERSION Version, [out] ID3DBlob **ppBlob, [out, optional] ID3DBlob **ppErrorBlob );",
            "name": "D3D12SerializeRootSignature"
        },
        {
            "signature": "HRESULT D3D12SerializeVersionedRootSignature( [in] const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *pRootSignature, [out] ID3DBlob **ppBlob, [out, optional] ID3DBlob **ppErrorBlob );",
            "name": "D3D12SerializeVersionedRootSignature"
        }
    ],
    "D3d12sdklayers.h": [],
    "D3d12shader.h": [],
    "D3d12video.h": [],
    "D3d9.h": [
        {
            "signature": "IDirect3D9 * Direct3DCreate9( UINT SDKVersion );",
            "name": "Direct3DCreate9"
        },
        {
            "signature": "HRESULT Direct3DCreate9Ex( [in] UINT SDKVersion, [out] IDirect3D9Ex **unnamedParam2 );",
            "name": "Direct3DCreate9Ex"
        }
    ],
    "D3d9caps.h": [],
    "D3d9helper.h": [
        {
            "signature": "IDirect3D9 * Direct3DCreate9( UINT SDKVersion );",
            "name": "Direct3DCreate9"
        }
    ],
    "D3dcommon.h": [],
    "D3dcompiler.h": [
        {
            "signature": "HRESULT D3DCompile( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in, optional] LPCSTR pSourceName, [in, optional] const D3D_SHADER_MACRO *pDefines, [in, optional] ID3DInclude *pInclude, [in, optional] LPCSTR pEntrypoint, [in] LPCSTR pTarget, [in] UINT Flags1, [in] UINT Flags2, [out] ID3DBlob **ppCode, [out, optional] ID3DBlob **ppErrorMsgs );",
            "name": "D3DCompile"
        },
        {
            "signature": "HRESULT D3DCompile2( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in, optional] LPCSTR pSourceName, [in, optional] const D3D_SHADER_MACRO *pDefines, [in, optional] ID3DInclude *pInclude, [in] LPCSTR pEntrypoint, [in] LPCSTR pTarget, [in] UINT Flags1, [in] UINT Flags2, [in] UINT SecondaryDataFlags, [in, optional] LPCVOID pSecondaryData, [in] SIZE_T SecondaryDataSize, [out] ID3DBlob **ppCode, [out, optional] ID3DBlob **ppErrorMsgs );",
            "name": "D3DCompile2"
        },
        {
            "signature": "HRESULT D3DCompileFromFile( [in] LPCWSTR pFileName, [in, optional] const D3D_SHADER_MACRO *pDefines, [in, optional] ID3DInclude *pInclude, [in] LPCSTR pEntrypoint, [in] LPCSTR pTarget, [in] UINT Flags1, [in] UINT Flags2, [out] ID3DBlob **ppCode, [out, optional] ID3DBlob **ppErrorMsgs );",
            "name": "D3DCompileFromFile"
        },
        {
            "signature": "HRESULT D3DCompressShaders( [in] UINT uNumShaders, [in] D3D_SHADER_DATA *pShaderData, [in] UINT uFlags, [out] ID3DBlob **ppCompressedData );",
            "name": "D3DCompressShaders"
        },
        {
            "signature": "HRESULT D3DCreateBlob( [in] SIZE_T Size, [out] ID3DBlob **ppBlob );",
            "name": "D3DCreateBlob"
        },
        {
            "signature": "HRESULT D3DCreateFunctionLinkingGraph( [in] UINT uFlags, [out] ID3D11FunctionLinkingGraph **ppFunctionLinkingGraph );",
            "name": "D3DCreateFunctionLinkingGraph"
        },
        {
            "signature": "HRESULT D3DCreateLinker( [out] ID3D11Linker **ppLinker );",
            "name": "D3DCreateLinker"
        },
        {
            "signature": "HRESULT D3DDecompressShaders( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] UINT uNumShaders, [in] UINT uStartIndex, [in, optional] UINT *pIndices, [in] UINT uFlags, [out] ID3DBlob **ppShaders, [out, optional] UINT *pTotalShaders );",
            "name": "D3DDecompressShaders"
        },
        {
            "signature": "HRESULT D3DDisassemble( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] UINT Flags, [in, optional] LPCSTR szComments, [out] ID3DBlob **ppDisassembly );",
            "name": "D3DDisassemble"
        },
        {
            "signature": "HRESULT D3DDisassemble10Effect( [in] ID3D10Effect *pEffect, [in] UINT Flags, [out] ID3DBlob **ppDisassembly );",
            "name": "D3DDisassemble10Effect"
        },
        {
            "signature": "HRESULT D3DDisassembleRegion( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] UINT Flags, [in, optional] LPCSTR szComments, [in] SIZE_T StartByteOffset, [in] SIZE_T NumInsts, [out, optional] SIZE_T *pFinishByteOffset, [out] ID3DBlob **ppDisassembly );",
            "name": "D3DDisassembleRegion"
        },
        {
            "signature": "HRESULT D3DGetBlobPart( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] D3D_BLOB_PART Part, [in] UINT Flags, [out] ID3DBlob **ppPart );",
            "name": "D3DGetBlobPart"
        },
        {
            "signature": "HRESULT D3DGetDebugInfo( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [out] ID3DBlob **ppDebugInfo );",
            "name": "D3DGetDebugInfo"
        },
        {
            "signature": "HRESULT D3DGetInputAndOutputSignatureBlob( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [out] ID3DBlob **ppSignatureBlob );",
            "name": "D3DGetInputAndOutputSignatureBlob"
        },
        {
            "signature": "HRESULT D3DGetInputSignatureBlob( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [out] ID3DBlob **ppSignatureBlob );",
            "name": "D3DGetInputSignatureBlob"
        },
        {
            "signature": "HRESULT D3DGetOutputSignatureBlob( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [out] ID3DBlob **ppSignatureBlob );",
            "name": "D3DGetOutputSignatureBlob"
        },
        {
            "signature": "HRESULT D3DGetTraceInstructionOffsets( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] UINT Flags, [in] SIZE_T StartInstIndex, [in] SIZE_T NumInsts, [out, optional] SIZE_T *pOffsets, [out, optional] SIZE_T *pTotalInsts );",
            "name": "D3DGetTraceInstructionOffsets"
        },
        {
            "signature": "HRESULT D3DLoadModule( [in] LPCVOID pSrcData, [in] SIZE_T cbSrcDataSize, [out] ID3D11Module **ppModule );",
            "name": "D3DLoadModule"
        },
        {
            "signature": "HRESULT D3DPreprocess( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in, optional] LPCSTR pSourceName, [in, optional] const D3D_SHADER_MACRO *pDefines, [in, optional] ID3DInclude *pInclude, [out] ID3DBlob **ppCodeText, [out, optional] ID3DBlob **ppErrorMsgs );",
            "name": "D3DPreprocess"
        },
        {
            "signature": "HRESULT D3DReadFileToBlob( [in] LPCWSTR pFileName, [out] ID3DBlob **ppContents );",
            "name": "D3DReadFileToBlob"
        },
        {
            "signature": "HRESULT D3DReflect( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] REFIID pInterface, [out] void **ppReflector );",
            "name": "D3DReflect"
        },
        {
            "signature": "HRESULT D3DReflectLibrary( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] REFIID riid, [out] LPVOID *ppReflector );",
            "name": "D3DReflectLibrary"
        },
        {
            "signature": "HRESULT D3DSetBlobPart( [in] LPCVOID pSrcData, [in] SIZE_T SrcDataSize, [in] D3D_BLOB_PART Part, [in] UINT Flags, [in] LPCVOID pPart, [in] SIZE_T PartSize, [out] ID3DBlob **ppNewShader );",
            "name": "D3DSetBlobPart"
        },
        {
            "signature": "HRESULT D3DStripShader( [in] LPCVOID pShaderBytecode, [in] SIZE_T BytecodeLength, [in] UINT uStripFlags, [out] ID3DBlob **ppStrippedBlob );",
            "name": "D3DStripShader"
        },
        {
            "signature": "HRESULT D3DWriteBlobToFile( [in] ID3DBlob *pBlob, [in] LPCWSTR pFileName, [in] BOOL bOverwrite );",
            "name": "D3DWriteBlobToFile"
        }
    ],
    "D3dcsx.h": [
        {
            "signature": "HRESULT D3DX11CreateFFT( ID3D11DeviceContext *pDeviceContext, [in] const D3DX11_FFT_DESC *pDesc, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT1DComplex( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT1DComplex"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT1DReal( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT1DReal"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT2DComplex( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Y, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT2DComplex"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT2DReal( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Y, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT2DReal"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT3DComplex( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Y, UINT Z, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT3DComplex"
        },
        {
            "signature": "HRESULT D3DX11CreateFFT3DReal( ID3D11DeviceContext *pDeviceContext, UINT X, UINT Y, UINT Z, UINT Flags, [out] D3DX11_FFT_BUFFER_INFO *pBufferInfo, [out] ID3DX11FFT **ppFFT );",
            "name": "D3DX11CreateFFT3DReal"
        },
        {
            "signature": "HRESULT D3DX11CreateScan( [in] ID3D11DeviceContext *pDeviceContext, UINT MaxElementScanSize, UINT MaxScanCount, [out] ID3DX11Scan **ppScan );",
            "name": "D3DX11CreateScan"
        },
        {
            "signature": "HRESULT D3DX11CreateSegmentedScan( [in] ID3D11DeviceContext *pDeviceContext, UINT MaxElementScanSize, [out] ID3DX11SegmentedScan **ppScan );",
            "name": "D3DX11CreateSegmentedScan"
        }
    ],
    "Datetimeapi.h": [
        {
            "signature": "int GetDateFormatA( [in] LCID Locale, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpDate, [in, optional] LPCSTR lpFormat, [out, optional] LPSTR lpDateStr, [in] int cchDate );",
            "name": "GetDateFormatA"
        },
        {
            "signature": "int GetDateFormatEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpDate, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpDateStr, [in] int cchDate, [in, optional] LPCWSTR lpCalendar );",
            "name": "GetDateFormatEx"
        },
        {
            "signature": "int GetDateFormatW( [in] LCID Locale, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpDate, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpDateStr, [in] int cchDate );",
            "name": "GetDateFormatW"
        },
        {
            "signature": "int GetTimeFormatA( [in] LCID Locale, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpTime, [in, optional] LPCSTR lpFormat, [out, optional] LPSTR lpTimeStr, [in] int cchTime );",
            "name": "GetTimeFormatA"
        },
        {
            "signature": "int GetTimeFormatEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpTime, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpTimeStr, [in] int cchTime );",
            "name": "GetTimeFormatEx"
        },
        {
            "signature": "int GetTimeFormatW( [in] LCID Locale, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpTime, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpTimeStr, [in] int cchTime );",
            "name": "GetTimeFormatW"
        }
    ],
    "Davclnt.h": [
        {
            "signature": "DWORD DavAddConnection( [in, out] HANDLE *ConnectionHandle, [in] LPCWSTR RemoteName, [in, optional] LPCWSTR UserName, [in, optional] LPCWSTR Password, [in] PBYTE ClientCert, [in] DWORD CertSize );",
            "name": "DavAddConnection"
        },
        {
            "signature": "DWORD DavCancelConnectionsToServer( [in] LPWSTR lpName, BOOL fForce );",
            "name": "DavCancelConnectionsToServer"
        },
        {
            "signature": "DWORD DavDeleteConnection( [in] HANDLE ConnectionHandle );",
            "name": "DavDeleteConnection"
        },
        {
            "signature": "DWORD DavFlushFile( [in] HANDLE hFile );",
            "name": "DavFlushFile"
        },
        {
            "signature": "DWORD DavGetExtendedError( [in] HANDLE hFile, [out] DWORD *ExtError, [out] LPWSTR ExtErrorString, [in, out] DWORD *cChSize );",
            "name": "DavGetExtendedError"
        },
        {
            "signature": "DWORD DavGetHTTPFromUNCPath( [in] LPCWSTR UncPath, [out] LPWSTR Url, [in, out] LPDWORD lpSize );",
            "name": "DavGetHTTPFromUNCPath"
        },
        {
            "signature": "DWORD DavGetTheLockOwnerOfTheFile( [in] LPCWSTR FileName, [out, optional] PWSTR LockOwnerName, [in, out] PULONG LockOwnerNameLengthInBytes );",
            "name": "DavGetTheLockOwnerOfTheFile"
        },
        {
            "signature": "DWORD DavGetUNCFromHTTPPath( [in] LPCWSTR Url, [out] LPWSTR UncPath, [in, out] LPDWORD lpSize );",
            "name": "DavGetUNCFromHTTPPath"
        },
        {
            "signature": "DWORD DavInvalidateCache( [in] LPCWSTR URLName );",
            "name": "DavInvalidateCache"
        },
        {
            "signature": "OPAQUE_HANDLE DavRegisterAuthCallback( [in] PFNDAVAUTHCALLBACK CallBack, [in] ULONG Version );",
            "name": "DavRegisterAuthCallback"
        },
        {
            "signature": "void DavUnregisterAuthCallback( [in] OPAQUE_HANDLE hCallback );",
            "name": "DavUnregisterAuthCallback"
        },
        {
            "signature": "PFNDAVAUTHCALLBACK Pfndavauthcallback; DWORD Pfndavauthcallback( [in] LPWSTR lpwzServerName, [in] LPWSTR lpwzRemoteName, [in] DWORD dwAuthScheme, [in] DWORD dwFlags, [in, out] PDAV_CALLBACK_CRED pCallbackCred, [in, out] AUTHNEXTSTEP *NextStep, [out] PFNDAVAUTHCALLBACK_FREECRED *pFreeCred ) {...}",
            "name": "PFNDAVAUTHCALLBACK callback"
        },
        {
            "signature": "PFNDAVAUTHCALLBACK_FREECRED PfndavauthcallbackFreecred; DWORD PfndavauthcallbackFreecred( [in] PVOID pbuffer ) {...}",
            "name": "PFNDAVAUTHCALLBACK_FREECRED callback"
        }
    ],
    "Dbghelp.h": [
        {
            "signature": "BOOL IMAGEAPI EnumDirTree( [in, optional] HANDLE hProcess, [in] PCSTR RootPath, [in] PCSTR InputPathName, [out, optional] PSTR OutputPathBuffer, [in, optional] PENUMDIRTREE_CALLBACK cb, [in, optional] PVOID data );",
            "name": "EnumDirTree"
        },
        {
            "signature": "BOOL IMAGEAPI EnumDirTreeW( [in, optional] HANDLE hProcess, [in] PCWSTR RootPath, [in] PCWSTR InputPathName, [out, optional] PWSTR OutputPathBuffer, [in, optional] PENUMDIRTREE_CALLBACKW cb, [in, optional] PVOID data );",
            "name": "EnumDirTreeW"
        },
        {
            "signature": "BOOL IMAGEAPI EnumerateLoadedModules( [in] HANDLE hProcess, [in] PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback, [in, optional] PVOID UserContext );",
            "name": "EnumerateLoadedModules"
        },
        {
            "signature": "BOOL IMAGEAPI EnumerateLoadedModules64( [in] HANDLE hProcess, [in] PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, [in, optional] PVOID UserContext );",
            "name": "EnumerateLoadedModules64"
        },
        {
            "signature": "BOOL IMAGEAPI EnumerateLoadedModulesEx( [in] HANDLE hProcess, [in] PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, [in, optional] PVOID UserContext );",
            "name": "EnumerateLoadedModulesEx"
        },
        {
            "signature": "BOOL IMAGEAPI EnumerateLoadedModulesExW( [in] HANDLE hProcess, [in] PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, [in, optional] PVOID UserContext );",
            "name": "EnumerateLoadedModulesExW"
        },
        {
            "signature": "BOOL IMAGEAPI EnumerateLoadedModulesW64( [in] HANDLE hProcess, [in] PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, [in, optional] PVOID UserContext );",
            "name": "EnumerateLoadedModulesW64"
        },
        {
            "signature": "HANDLE IMAGEAPI FindDebugInfoFile( [in] PCSTR FileName, [in] PCSTR SymbolPath, [out] PSTR DebugFilePath );",
            "name": "FindDebugInfoFile"
        },
        {
            "signature": "HANDLE IMAGEAPI FindDebugInfoFileEx( [in] PCSTR FileName, [in] PCSTR SymbolPath, [out] PSTR DebugFilePath, [in, optional] PFIND_DEBUG_FILE_CALLBACK Callback, [in, optional] PVOID CallerData );",
            "name": "FindDebugInfoFileEx"
        },
        {
            "signature": "HANDLE IMAGEAPI FindDebugInfoFileExW( [in] PCWSTR FileName, [in] PCWSTR SymbolPath, [out] PWSTR DebugFilePath, [in, optional] PFIND_DEBUG_FILE_CALLBACKW Callback, [in, optional] PVOID CallerData );",
            "name": "FindDebugInfoFileExW"
        },
        {
            "signature": "HANDLE IMAGEAPI FindExecutableImage( [in] PCSTR FileName, [in] PCSTR SymbolPath, [out] PSTR ImageFilePath );",
            "name": "FindExecutableImage"
        },
        {
            "signature": "HANDLE IMAGEAPI FindExecutableImageEx( [in] PCSTR FileName, [in] PCSTR SymbolPath, [out] PSTR ImageFilePath, [in, optional] PFIND_EXE_FILE_CALLBACK Callback, [in, optional] PVOID CallerData );",
            "name": "FindExecutableImageEx"
        },
        {
            "signature": "HANDLE IMAGEAPI FindExecutableImageExW( [in] PCWSTR FileName, [in] PCWSTR SymbolPath, [out] PWSTR ImageFilePath, [in, optional] PFIND_EXE_FILE_CALLBACKW Callback, [in, optional] PVOID CallerData );",
            "name": "FindExecutableImageExW"
        },
        {
            "signature": "DWORD IMAGEAPI GetSymLoadError();",
            "name": "GetSymLoadError"
        },
        {
            "signature": "DWORD IMAGEAPI GetTimestampForLoadedLibrary( [in] HMODULE Module );",
            "name": "GetTimestampForLoadedLibrary"
        },
        {
            "signature": "PVOID IMAGEAPI ImageDirectoryEntryToData( [in] PVOID Base, [in] BOOLEAN MappedAsImage, [in] USHORT DirectoryEntry, [out] PULONG Size );",
            "name": "ImageDirectoryEntryToData"
        },
        {
            "signature": "PVOID IMAGEAPI ImageDirectoryEntryToDataEx( [in] PVOID Base, [in] BOOLEAN MappedAsImage, [in] USHORT DirectoryEntry, [out] PULONG Size, [out, optional] PIMAGE_SECTION_HEADER *FoundHeader );",
            "name": "ImageDirectoryEntryToDataEx"
        },
        {
            "signature": "LPAPI_VERSION IMAGEAPI ImagehlpApiVersion();",
            "name": "ImagehlpApiVersion"
        },
        {
            "signature": "LPAPI_VERSION IMAGEAPI ImagehlpApiVersionEx( [in] LPAPI_VERSION AppVersion );",
            "name": "ImagehlpApiVersionEx"
        },
        {
            "signature": "PIMAGE_NT_HEADERS IMAGEAPI ImageNtHeader( [in] PVOID Base );",
            "name": "ImageNtHeader"
        },
        {
            "signature": "PIMAGE_SECTION_HEADER IMAGEAPI ImageRvaToSection( [in] PIMAGE_NT_HEADERS NtHeaders, [in] PVOID Base, [in] ULONG Rva );",
            "name": "ImageRvaToSection"
        },
        {
            "signature": "PVOID IMAGEAPI ImageRvaToVa( [in] PIMAGE_NT_HEADERS NtHeaders, [in] PVOID Base, [in] ULONG Rva, [in, optional] PIMAGE_SECTION_HEADER *LastRvaSection );",
            "name": "ImageRvaToVa"
        },
        {
            "signature": "BOOL IMAGEAPI MakeSureDirectoryPathExists( [in] PCSTR DirPath );",
            "name": "MakeSureDirectoryPathExists"
        },
        {
            "signature": "PIMAGE_DEBUG_INFORMATION IMAGEAPI MapDebugInformation( [in, optional] HANDLE FileHandle, [in] PCSTR FileName, [in, optional] PCSTR SymbolPath, [in] ULONG ImageBase );",
            "name": "MapDebugInformation"
        },
        {
            "signature": "PENUMDIRTREE_CALLBACK PenumdirtreeCallback; BOOL PenumdirtreeCallback( [in] PCSTR FilePath, [in, optional] PVOID CallerData ) {...}",
            "name": "PENUMDIRTREE_CALLBACK callback"
        },
        {
            "signature": "PENUMDIRTREE_CALLBACKW PenumdirtreeCallbackw; BOOL PenumdirtreeCallbackw( [in] PCWSTR FilePath, [in, optional] PVOID CallerData ) {...}",
            "name": "PENUMDIRTREE_CALLBACKW callback"
        },
        {
            "signature": "PENUMLOADED_MODULES_CALLBACK PenumloadedModulesCallback; BOOL PenumloadedModulesCallback( [in] PCSTR ModuleName, [in] ULONG ModuleBase, [in] ULONG ModuleSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PENUMLOADED_MODULES_CALLBACK callback"
        },
        {
            "signature": "PENUMLOADED_MODULES_CALLBACK64 PenumloadedModulesCallback64; BOOL PenumloadedModulesCallback64( [in] PCSTR ModuleName, [in] DWORD64 ModuleBase, [in] ULONG ModuleSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PENUMLOADED_MODULES_CALLBACK64 callback"
        },
        {
            "signature": "PENUMLOADED_MODULES_CALLBACKW64 PenumloadedModulesCallbackw64; BOOL PenumloadedModulesCallbackw64( [in] PCWSTR ModuleName, [in] DWORD64 ModuleBase, [in] ULONG ModuleSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PENUMLOADED_MODULES_CALLBACKW64 callback"
        },
        {
            "signature": "PENUMSOURCEFILETOKENSCALLBACK Penumsourcefiletokenscallback; BOOL Penumsourcefiletokenscallback( [in] PVOID token, [in] size_t size ) {...}",
            "name": "PENUMSOURCEFILETOKENSCALLBACK callback"
        },
        {
            "signature": "PFIND_DEBUG_FILE_CALLBACK PfindDebugFileCallback; BOOL PfindDebugFileCallback( [in] HANDLE FileHandle, [in] PCSTR FileName, [in] PVOID CallerData ) {...}",
            "name": "PFIND_DEBUG_FILE_CALLBACK callback"
        },
        {
            "signature": "PFIND_DEBUG_FILE_CALLBACKW PfindDebugFileCallbackw; BOOL PfindDebugFileCallbackw( [in] HANDLE FileHandle, [in] PCWSTR FileName, [in] PVOID CallerData ) {...}",
            "name": "PFIND_DEBUG_FILE_CALLBACKW callback"
        },
        {
            "signature": "PFIND_EXE_FILE_CALLBACK PfindExeFileCallback; BOOL PfindExeFileCallback( [in] HANDLE FileHandle, [in] PCSTR FileName, [in] PVOID CallerData ) {...}",
            "name": "PFIND_EXE_FILE_CALLBACK callback"
        },
        {
            "signature": "PFIND_EXE_FILE_CALLBACKW PfindExeFileCallbackw; BOOL PfindExeFileCallbackw( [in] HANDLE FileHandle, [in] PCWSTR FileName, [in] PVOID CallerData ) {...}",
            "name": "PFIND_EXE_FILE_CALLBACKW callback"
        },
        {
            "signature": "PFINDFILEINPATHCALLBACK Pfindfileinpathcallback; BOOL Pfindfileinpathcallback( [in] PCSTR filename, [in] PVOID context ) {...}",
            "name": "PFINDFILEINPATHCALLBACK callback"
        },
        {
            "signature": "PFINDFILEINPATHCALLBACKW Pfindfileinpathcallbackw; BOOL Pfindfileinpathcallbackw( PCWSTR filename, [in] PVOID context ) {...}",
            "name": "PFINDFILEINPATHCALLBACKW callback"
        },
        {
            "signature": "PFUNCTION_TABLE_ACCESS_ROUTINE PfunctionTableAccessRoutine; PVOID PfunctionTableAccessRoutine( [in] HANDLE hProcess, [in] DWORD AddrBase ) {...}",
            "name": "PFUNCTION_TABLE_ACCESS_ROUTINE callback"
        },
        {
            "signature": "PFUNCTION_TABLE_ACCESS_ROUTINE64 PfunctionTableAccessRoutine64; PVOID PfunctionTableAccessRoutine64( [in] HANDLE ahProcess, [in] DWORD64 AddrBase ) {...}",
            "name": "PFUNCTION_TABLE_ACCESS_ROUTINE64 callback"
        },
        {
            "signature": "PGET_MODULE_BASE_ROUTINE PgetModuleBaseRoutine; DWORD PgetModuleBaseRoutine( [in] HANDLE hProcess, [in] DWORD Address ) {...}",
            "name": "PGET_MODULE_BASE_ROUTINE callback"
        },
        {
            "signature": "PGET_MODULE_BASE_ROUTINE64 PgetModuleBaseRoutine64; DWORD64 PgetModuleBaseRoutine64( [in] HANDLE hProcess, [in] DWORD64 Address ) {...}",
            "name": "PGET_MODULE_BASE_ROUTINE64 callback"
        },
        {
            "signature": "PREAD_PROCESS_MEMORY_ROUTINE PreadProcessMemoryRoutine; BOOL PreadProcessMemoryRoutine( [in] HANDLE hProcess, [in] DWORD lpBaseAddress, [out] PVOID lpBuffer, [in] DWORD nSize, [out] PDWORD lpNumberOfBytesRead ) {...}",
            "name": "PREAD_PROCESS_MEMORY_ROUTINE callback"
        },
        {
            "signature": "PREAD_PROCESS_MEMORY_ROUTINE64 PreadProcessMemoryRoutine64; BOOL PreadProcessMemoryRoutine64( [in] HANDLE hProcess, [in] DWORD64 qwBaseAddress, [out] PVOID lpBuffer, [in] DWORD nSize, [out] LPDWORD lpNumberOfBytesRead ) {...}",
            "name": "PREAD_PROCESS_MEMORY_ROUTINE64 callback"
        },
        {
            "signature": "PSYM_ENUMERATESYMBOLS_CALLBACK PsymEnumeratesymbolsCallback; BOOL PsymEnumeratesymbolsCallback( [in] PSYMBOL_INFO pSymInfo, [in] ULONG SymbolSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMERATESYMBOLS_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMERATESYMBOLS_CALLBACKW PsymEnumeratesymbolsCallbackw; BOOL PsymEnumeratesymbolsCallbackw( [in] PSYMBOL_INFOW pSymInfo, [in] ULONG SymbolSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMERATESYMBOLS_CALLBACKW callback"
        },
        {
            "signature": "PSYM_ENUMLINES_CALLBACK PsymEnumlinesCallback; BOOL PsymEnumlinesCallback( [in] PSRCCODEINFO LineInfo, [in] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMLINES_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMLINES_CALLBACKW PsymEnumlinesCallbackw; BOOL PsymEnumlinesCallbackw( [in] PSRCCODEINFOW LineInfo, [in] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMLINES_CALLBACKW callback"
        },
        {
            "signature": "PSYM_ENUMMODULES_CALLBACK PsymEnummodulesCallback; BOOL PsymEnummodulesCallback( [in] PCSTR ModuleName, [in] ULONG BaseOfDll, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMMODULES_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMMODULES_CALLBACK64 PsymEnummodulesCallback64; BOOL PsymEnummodulesCallback64( [in] PCSTR ModuleName, [in] DWORD64 BaseOfDll, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMMODULES_CALLBACK64 callback"
        },
        {
            "signature": "PSYM_ENUMMODULES_CALLBACKW64 PsymEnummodulesCallbackw64; BOOL PsymEnummodulesCallbackw64( [in] PCWSTR ModuleName, [in] DWORD64 BaseOfDll, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMMODULES_CALLBACKW64 callback"
        },
        {
            "signature": "PSYM_ENUMPROCESSES_CALLBACK PsymEnumprocessesCallback; BOOL PsymEnumprocessesCallback( [in] HANDLE hProcess, [in] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMPROCESSES_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMSOURCEFILES_CALLBACK PsymEnumsourcefilesCallback; BOOL PsymEnumsourcefilesCallback( [in] PSOURCEFILE pSourceFile, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMSOURCEFILES_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMSOURCEFILES_CALLBACKW PsymEnumsourcefilesCallbackw; BOOL PsymEnumsourcefilesCallbackw( [in] PSOURCEFILEW pSourceFile, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMSOURCEFILES_CALLBACKW callback"
        },
        {
            "signature": "PSYM_ENUMSYMBOLS_CALLBACK PsymEnumsymbolsCallback; BOOL PsymEnumsymbolsCallback( [in] PCSTR SymbolName, [in] ULONG SymbolAddress, [in] ULONG SymbolSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMSYMBOLS_CALLBACK callback"
        },
        {
            "signature": "PSYM_ENUMSYMBOLS_CALLBACK64 PsymEnumsymbolsCallback64; BOOL PsymEnumsymbolsCallback64( [in] PCSTR SymbolName, [in] DWORD64 SymbolAddress, [in] ULONG SymbolSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMSYMBOLS_CALLBACK64 callback"
        },
        {
            "signature": "PSYM_ENUMSYMBOLS_CALLBACK64W PsymEnumsymbolsCallback64w; BOOL PsymEnumsymbolsCallback64w( [in] PCWSTR SymbolName, [in] DWORD64 SymbolAddress, [in] ULONG SymbolSize, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYM_ENUMSYMBOLS_CALLBACK64W callback"
        },
        {
            "signature": "PSYMBOL_FUNCENTRY_CALLBACK PsymbolFuncentryCallback; PVOID PsymbolFuncentryCallback( [in] HANDLE hProcess, [in] DWORD AddrBase, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYMBOL_FUNCENTRY_CALLBACK callback"
        },
        {
            "signature": "PSYMBOL_FUNCENTRY_CALLBACK64 PsymbolFuncentryCallback64; PVOID PsymbolFuncentryCallback64( [in] HANDLE hProcess, [in] ULONG64 AddrBase, [in, optional] ULONG64 UserContext ) {...}",
            "name": "PSYMBOL_FUNCENTRY_CALLBACK64 callback"
        },
        {
            "signature": "PSYMBOL_REGISTERED_CALLBACK PsymbolRegisteredCallback; BOOL PsymbolRegisteredCallback( [in] HANDLE hProcess, [in] ULONG ActionCode, [in, optional] PVOID CallbackData, [in, optional] PVOID UserContext ) {...}",
            "name": "PSYMBOL_REGISTERED_CALLBACK callback"
        },
        {
            "signature": "PSYMBOL_REGISTERED_CALLBACK64 PsymbolRegisteredCallback64; BOOL PsymbolRegisteredCallback64( [in] HANDLE hProcess, [in] ULONG ActionCode, [in, optional] ULONG64 CallbackData, [in, optional] ULONG64 UserContext ) {...}",
            "name": "PSYMBOL_REGISTERED_CALLBACK64 callback"
        },
        {
            "signature": "PSYMBOLSERVERCALLBACKPROC Psymbolservercallbackproc; BOOL Psymbolservercallbackproc( [in] UINT_PTR action, [in] ULONG64 data, [in] ULONG64 context ) {...}",
            "name": "PSYMBOLSERVERCALLBACKPROC callback"
        },
        {
            "signature": "PTRANSLATE_ADDRESS_ROUTINE PtranslateAddressRoutine; DWORD PtranslateAddressRoutine( [in] HANDLE hProcess, [in] HANDLE hThread, [in] LPADDRESS lpaddr ) {...}",
            "name": "PTRANSLATE_ADDRESS_ROUTINE callback"
        },
        {
            "signature": "PTRANSLATE_ADDRESS_ROUTINE64 PtranslateAddressRoutine64; DWORD64 PtranslateAddressRoutine64( [in] HANDLE hProcess, [in] HANDLE hThread, [in] LPADDRESS64 lpaddr ) {...}",
            "name": "PTRANSLATE_ADDRESS_ROUTINE64 callback"
        },
        {
            "signature": "BOOL IMAGEAPI SearchTreeForFile( [in] PCSTR RootPath, [in] PCSTR InputPathName, [out] PSTR OutputPathBuffer );",
            "name": "SearchTreeForFile"
        },
        {
            "signature": "BOOL IMAGEAPI SearchTreeForFileW( [in] PCWSTR RootPath, [in] PCWSTR InputPathName, [out] PWSTR OutputPathBuffer );",
            "name": "SearchTreeForFileW"
        },
        {
            "signature": "void IMAGEAPI SetSymLoadError( [in] DWORD error );",
            "name": "SetSymLoadError"
        },
        {
            "signature": "BOOL IMAGEAPI StackWalk( [in] DWORD MachineType, [in] HANDLE hProcess, [in] HANDLE hThread, [in, out] LPSTACKFRAME StackFrame, [in, out] PVOID ContextRecord, [in, optional] PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine, [in, optional] PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine, [in, optional] PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine, [in, optional] PTRANSLATE_ADDRESS_ROUTINE TranslateAddress );",
            "name": "StackWalk"
        },
        {
            "signature": "BOOL IMAGEAPI StackWalk64( [in] DWORD MachineType, [in] HANDLE hProcess, [in] HANDLE hThread, [in, out] LPSTACKFRAME64 StackFrame, [in, out] PVOID ContextRecord, [in, optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [in, optional] PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, [in, optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, [in, optional] PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress );",
            "name": "StackWalk64"
        },
        {
            "signature": "BOOL IMAGEAPI StackWalkEx( [in] DWORD MachineType, [in] HANDLE hProcess, [in] HANDLE hThread, [in, out] LPSTACKFRAME_EX StackFrame, [in, out] PVOID ContextRecord, [in, optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [in, optional] PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, [in, optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, [in, optional] PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress, [in] DWORD Flags );",
            "name": "StackWalkEx"
        },
        {
            "signature": "DWORD IMAGEAPI SymAddrIncludeInlineTrace( [in] HANDLE hProcess, [in] DWORD64 Address );",
            "name": "SymAddrIncludeInlineTrace"
        },
        {
            "signature": "BOOL IMAGEAPI SymAddSourceStream( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCSTR StreamFile, [in, optional] PBYTE Buffer, [in] size_t Size );",
            "name": "SymAddSourceStream"
        },
        {
            "signature": "BOOL IMAGEAPI SymAddSourceStreamA( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCSTR StreamFile, [in, optional] PBYTE Buffer, [in] size_t Size );",
            "name": "SymAddSourceStreamA"
        },
        {
            "signature": "BOOL IMAGEAPI SymAddSourceStreamW( [in] HANDLE hProcess, [in] ULONG64 Base, PCWSTR FileSpec, [in, optional] PBYTE Buffer, [in] size_t Size );",
            "name": "SymAddSourceStreamW"
        },
        {
            "signature": "BOOL IMAGEAPI SymAddSymbol( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PCSTR Name, [in] DWORD64 Address, [in] DWORD Size, [in] DWORD Flags );",
            "name": "SymAddSymbol"
        },
        {
            "signature": "BOOL IMAGEAPI SymAddSymbolW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PCWSTR Name, [in] DWORD64 Address, [in] DWORD Size, [in] DWORD Flags );",
            "name": "SymAddSymbolW"
        },
        {
            "signature": "BOOL IMAGEAPI SymCleanup( [in] HANDLE hProcess );",
            "name": "SymCleanup"
        },
        {
            "signature": "DWORD IMAGEAPI SymCompareInlineTrace( [in] HANDLE hProcess, [in] DWORD64 Address1, [in] DWORD InlineContext1, [in] DWORD64 RetAddress1, [in] DWORD64 Address2, [in] DWORD64 RetAddress2 );",
            "name": "SymCompareInlineTrace"
        },
        {
            "signature": "BOOL IMAGEAPI SymDeleteSymbol( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCSTR Name, [in] DWORD64 Address, [in] DWORD Flags );",
            "name": "SymDeleteSymbol"
        },
        {
            "signature": "BOOL IMAGEAPI SymDeleteSymbolW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCWSTR Name, [in] DWORD64 Address, [in] DWORD Flags );",
            "name": "SymDeleteSymbolW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumerateModules( [in] HANDLE hProcess, [in] PSYM_ENUMMODULES_CALLBACK EnumModulesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateModules"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumerateModules64( [in] HANDLE hProcess, [in] PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateModules64"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumerateModulesW64( [in] HANDLE hProcess, [in] PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateModulesW64"
        },
        {
            "signature": "DBHLP_DEPRECIATED BOOL IMAGEAPI SymEnumerateSymbols( [in] HANDLE hProcess, [in] ULONG BaseOfDll, [in] PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateSymbols"
        },
        {
            "signature": "DBHLP_DEPRECIATED BOOL IMAGEAPI SymEnumerateSymbols64( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateSymbols64"
        },
        {
            "signature": "DBHLP_DEPRECIATED BOOL IMAGEAPI SymEnumerateSymbolsW( [in] HANDLE hProcess, [in] ULONG BaseOfDll, [in] PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateSymbolsW"
        },
        {
            "signature": "DBHLP_DEPRECIATED BOOL IMAGEAPI SymEnumerateSymbolsW64( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumerateSymbolsW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumLines( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCSTR Obj, [in, optional] PCSTR File, [in] PSYM_ENUMLINES_CALLBACK EnumLinesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumLines"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumLinesW( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCWSTR Obj, [in, optional] PCWSTR File, [in] PSYM_ENUMLINES_CALLBACKW EnumLinesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumLinesW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumProcesses( [in] PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback, [in] PVOID UserContext );",
            "name": "SymEnumProcesses"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSourceFiles( [in] HANDLE hProcess, [in] ULONG64 ModBase, [in, optional] PCSTR Mask, [in] PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles, [in, optional] PVOID UserContext );",
            "name": "SymEnumSourceFiles"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSourceFilesW( [in] HANDLE hProcess, [in] ULONG64 ModBase, [in, optional] PCWSTR Mask, [in] PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles, [in, optional] PVOID UserContext );",
            "name": "SymEnumSourceFilesW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSourceFileTokens( [in] HANDLE hProcess, [in] ULONG64 Base, [in] PENUMSOURCEFILETOKENSCALLBACK Callback );",
            "name": "SymEnumSourceFileTokens"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSourceLines( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCSTR Obj, [in, optional] PCSTR File, [in, optional] DWORD Line, [in] DWORD Flags, [in] PSYM_ENUMLINES_CALLBACK EnumLinesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSourceLines"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSourceLinesW( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCWSTR Obj, [in, optional] PCWSTR File, [in, optional] DWORD Line, [in] DWORD Flags, [in] PSYM_ENUMLINES_CALLBACKW EnumLinesCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSourceLinesW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbols( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCSTR Mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSymbols"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbolsEx( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCSTR Mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext, [in] DWORD Options );",
            "name": "SymEnumSymbolsEx"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbolsExW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCWSTR Mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext, [in] DWORD Options );",
            "name": "SymEnumSymbolsExW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbolsForAddr( [in] HANDLE hProcess, [in] DWORD64 Address, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSymbolsForAddr"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbolsForAddrW( [in] HANDLE hProcess, [in] DWORD64 Address, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSymbolsForAddrW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumSymbolsW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCWSTR Mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumSymbolsW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumTypes( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumTypes"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumTypesByName( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCSTR mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in] PVOID UserContext );",
            "name": "SymEnumTypesByName"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumTypesByNameW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] PCWSTR mask, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in] PVOID UserContext );",
            "name": "SymEnumTypesByNameW"
        },
        {
            "signature": "BOOL IMAGEAPI SymEnumTypesW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext );",
            "name": "SymEnumTypesW"
        },
        {
            "signature": "HANDLE IMAGEAPI SymFindDebugInfoFile( [in] HANDLE hProcess, [in] PCSTR FileName, [out] PSTR DebugFilePath, [in, optional] PFIND_DEBUG_FILE_CALLBACK Callback, [in, optional] PVOID CallerData );",
            "name": "SymFindDebugInfoFile"
        },
        {
            "signature": "HANDLE IMAGEAPI SymFindDebugInfoFileW( [in] HANDLE hProcess, [in] PCWSTR FileName, [out] PWSTR DebugFilePath, [in, optional] PFIND_DEBUG_FILE_CALLBACKW Callback, [in, optional] PVOID CallerData );",
            "name": "SymFindDebugInfoFileW"
        },
        {
            "signature": "HANDLE IMAGEAPI SymFindExecutableImage( [in] HANDLE hProcess, [in] PCSTR FileName, [out] PSTR ImageFilePath, [in] PFIND_EXE_FILE_CALLBACK Callback, [in] PVOID CallerData );",
            "name": "SymFindExecutableImage"
        },
        {
            "signature": "HANDLE IMAGEAPI SymFindExecutableImageW( [in] HANDLE hProcess, [in] PCWSTR FileName, [out] PWSTR ImageFilePath, [in] PFIND_EXE_FILE_CALLBACKW Callback, [in] PVOID CallerData );",
            "name": "SymFindExecutableImageW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFindFileInPath( [in] HANDLE hprocess, [in, optional] PCSTR SearchPath, [in] PCSTR FileName, [in, optional] PVOID id, [in] DWORD two, [in] DWORD three, [in] DWORD flags, [out] PSTR FoundFile, [in, optional] PFINDFILEINPATHCALLBACK callback, [in, optional] PVOID context );",
            "name": "SymFindFileInPath"
        },
        {
            "signature": "BOOL IMAGEAPI SymFindFileInPathW( [in] HANDLE hprocess, [in, optional] PCWSTR SearchPath, [in] PCWSTR FileName, [in, optional] PVOID id, [in] DWORD two, [in] DWORD three, [in] DWORD flags, [out] PWSTR FoundFile, [in, optional] PFINDFILEINPATHCALLBACKW callback, [in, optional] PVOID context );",
            "name": "SymFindFileInPathW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromAddr( [in] HANDLE hProcess, [in] DWORD64 Address, [out, optional] PDWORD64 Displacement, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymFromAddr"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromAddrW( [in] HANDLE hProcess, [in] DWORD64 Address, [out, optional] PDWORD64 Displacement, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymFromAddrW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromIndex( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] DWORD Index, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymFromIndex"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromIndexW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] DWORD Index, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymFromIndexW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromInlineContext( [in] HANDLE hProcess, [in] DWORD64 Address, [in] ULONG InlineContext, [out, optional] PDWORD64 Displacement, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymFromInlineContext"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromInlineContextW( [in] HANDLE hProcess, [in] DWORD64 Address, [in] ULONG InlineContext, [out, optional] PDWORD64 Displacement, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymFromInlineContextW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromName( [in] HANDLE hProcess, [in] PCSTR Name, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymFromName"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromNameW( [in] HANDLE hProcess, [in] PCWSTR Name, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymFromNameW"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromToken( [in] HANDLE hProcess, [in] DWORD64 Base, [in] DWORD Token, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymFromToken"
        },
        {
            "signature": "BOOL IMAGEAPI SymFromTokenW( [in] HANDLE hProcess, [in] DWORD64 Base, [in] DWORD Token, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymFromTokenW"
        },
        {
            "signature": "PVOID IMAGEAPI SymFunctionTableAccess( [in] HANDLE hProcess, [in] DWORD AddrBase );",
            "name": "SymFunctionTableAccess"
        },
        {
            "signature": "PVOID IMAGEAPI SymFunctionTableAccess64( [in] HANDLE hProcess, [in] DWORD64 AddrBase );",
            "name": "SymFunctionTableAccess64"
        },
        {
            "signature": "PVOID IMAGEAPI SymFunctionTableAccess64AccessRoutines( [in] HANDLE hProcess, [in] DWORD64 AddrBase, [in, optional] PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, [in, optional] PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine );",
            "name": "SymFunctionTableAccess64AccessRoutines"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetExtendedOption( [in] IMAGEHLP_EXTENDED_OPTIONS option );",
            "name": "SymGetExtendedOption"
        },
        {
            "signature": "ULONG IMAGEAPI SymGetFileLineOffsets64( [in] HANDLE hProcess, [in, optional] PCSTR ModuleName, [in] PCSTR FileName, [out] PDWORD64 Buffer, [in] ULONG BufferLines );",
            "name": "SymGetFileLineOffsets64"
        },
        {
            "signature": "PCHAR IMAGEAPI SymGetHomeDirectory( [in] DWORD type, [out] PSTR dir, [in] size_t size );",
            "name": "SymGetHomeDirectory"
        },
        {
            "signature": "PWSTR IMAGEAPI SymGetHomeDirectoryW( [in] DWORD type, [out] PWSTR dir, [in] size_t size );",
            "name": "SymGetHomeDirectoryW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromAddr( [in] HANDLE hProcess, [in] DWORD dwAddr, [out] PDWORD pdwDisplacement, [out] PIMAGEHLP_LINE Line );",
            "name": "SymGetLineFromAddr"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromAddr64( [in] HANDLE hProcess, [in] DWORD64 qwAddr, [out] PDWORD pdwDisplacement, [out] PIMAGEHLP_LINE64 Line64 );",
            "name": "SymGetLineFromAddr64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromAddrW64( [in] HANDLE hProcess, [in] DWORD64 dwAddr, [out] PDWORD pdwDisplacement, [out] PIMAGEHLP_LINEW64 Line );",
            "name": "SymGetLineFromAddrW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromInlineContext( [in] HANDLE hProcess, [in] DWORD64 qwAddr, [in] ULONG InlineContext, [in, optional] DWORD64 qwModuleBaseAddress, [out] PDWORD pdwDisplacement, [out] PIMAGEHLP_LINE64 Line64 );",
            "name": "SymGetLineFromInlineContext"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromInlineContextW( [in] HANDLE hProcess, [in] DWORD64 dwAddr, [in] ULONG InlineContext, [in, optional] DWORD64 qwModuleBaseAddress, [out] PDWORD pdwDisplacement, [out] PIMAGEHLP_LINEW64 Line );",
            "name": "SymGetLineFromInlineContextW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromName( [in] HANDLE hProcess, [in, optional] PCSTR ModuleName, [in, optional] PCSTR FileName, [in] DWORD dwLineNumber, [out] PLONG plDisplacement, [in, out] PIMAGEHLP_LINE Line );",
            "name": "SymGetLineFromName"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromName64( [in] HANDLE hProcess, [in, optional] PCSTR ModuleName, [in, optional] PCSTR FileName, [in] DWORD dwLineNumber, [out] PLONG plDisplacement, [in, out] PIMAGEHLP_LINE64 Line );",
            "name": "SymGetLineFromName64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineFromNameW64( [in] HANDLE hProcess, [in, optional] PCWSTR ModuleName, [in, optional] PCWSTR FileName, [in] DWORD dwLineNumber, [out] PLONG plDisplacement, [in, out] PIMAGEHLP_LINEW64 Line );",
            "name": "SymGetLineFromNameW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineNext( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINE Line );",
            "name": "SymGetLineNext"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineNext64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINE64 Line );",
            "name": "SymGetLineNext64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLineNextW64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINEW64 Line );",
            "name": "SymGetLineNextW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLinePrev( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINE Line );",
            "name": "SymGetLinePrev"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLinePrev64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINE64 Line );",
            "name": "SymGetLinePrev64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetLinePrevW64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_LINEW64 Line );",
            "name": "SymGetLinePrevW64"
        },
        {
            "signature": "DWORD IMAGEAPI SymGetModuleBase( [in] HANDLE hProcess, [in] DWORD dwAddr );",
            "name": "SymGetModuleBase"
        },
        {
            "signature": "DWORD64 IMAGEAPI SymGetModuleBase64( [in] HANDLE hProcess, [in] DWORD64 qwAddr );",
            "name": "SymGetModuleBase64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetModuleInfo( [in] HANDLE hProcess, [in] DWORD dwAddr, [out] PIMAGEHLP_MODULE ModuleInfo );",
            "name": "SymGetModuleInfo"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetModuleInfo64( [in] HANDLE hProcess, [in] DWORD64 qwAddr, [out] PIMAGEHLP_MODULE64 ModuleInfo );",
            "name": "SymGetModuleInfo64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetModuleInfoW( [in] HANDLE hProcess, [in] DWORD dwAddr, [out] PIMAGEHLP_MODULEW ModuleInfo );",
            "name": "SymGetModuleInfoW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetModuleInfoW64( [in] HANDLE hProcess, [in] DWORD64 qwAddr, [out] PIMAGEHLP_MODULEW64 ModuleInfo );",
            "name": "SymGetModuleInfoW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetOmaps( [in] HANDLE hProcess, [in] DWORD64 BaseOfDll, [out] POMAP *OmapTo, [out] PDWORD64 cOmapTo, [out] POMAP *OmapFrom, [out] PDWORD64 cOmapFrom );",
            "name": "SymGetOmaps"
        },
        {
            "signature": "DWORD IMAGEAPI SymGetOptions();",
            "name": "SymGetOptions"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetScope( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] DWORD Index, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymGetScope"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetScopeW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] DWORD Index, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymGetScopeW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSearchPath( [in] HANDLE hProcess, [out] PSTR SearchPath, [in] DWORD SearchPathLength );",
            "name": "SymGetSearchPath"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSearchPathW( [in] HANDLE hProcess, [out] PWSTR SearchPath, [in] DWORD SearchPathLength );",
            "name": "SymGetSearchPathW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFile( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCSTR Params, [in] PCSTR FileSpec, [out] PSTR FilePath, [in] DWORD Size );",
            "name": "SymGetSourceFile"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileChecksum( [in] HANDLE hProcess, [in] ULONG64 Base, [in] PCSTR FileSpec, [out] DWORD *pCheckSumType, [out] BYTE *pChecksum, [in] DWORD checksumSize, [out] DWORD *pActualBytesWritten );",
            "name": "SymGetSourceFileChecksum"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileChecksumW( [in] HANDLE hProcess, [in] ULONG64 Base, [in] PCWSTR FileSpec, [out] DWORD *pCheckSumType, [out] BYTE *pChecksum, [in] DWORD checksumSize, [out] DWORD *pActualBytesWritten );",
            "name": "SymGetSourceFileChecksumW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileFromToken( [in] HANDLE hProcess, [in] PVOID Token, [in, optional] PCSTR Params, [out] PSTR FilePath, [in] DWORD Size );",
            "name": "SymGetSourceFileFromToken"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileFromTokenW( [in] HANDLE hProcess, [in] PVOID Token, [in, optional] PCWSTR Params, [out] PWSTR FilePath, [in] DWORD Size );",
            "name": "SymGetSourceFileFromTokenW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileToken( [in] HANDLE hProcess, [in] ULONG64 Base, [in] PCSTR FileSpec, [out] PVOID *Token, [out] DWORD *Size );",
            "name": "SymGetSourceFileToken"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileTokenW( [in] HANDLE hProcess, [in] ULONG64 Base, [in] PCWSTR FileSpec, [out] PVOID *Token, [out] DWORD *Size );",
            "name": "SymGetSourceFileTokenW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceFileW( [in] HANDLE hProcess, [in] ULONG64 Base, [in, optional] PCWSTR Params, [in] PCWSTR FileSpec, [out] PWSTR FilePath, [in] DWORD Size );",
            "name": "SymGetSourceFileW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceVarFromToken( [in] HANDLE hProcess, [in] PVOID Token, [in, optional] PCSTR Params, [in] PCSTR VarName, [out] PSTR Value, [in] DWORD Size );",
            "name": "SymGetSourceVarFromToken"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSourceVarFromTokenW( [in] HANDLE hProcess, [in] PVOID Token, [in, optional] PCWSTR Params, [in] PCWSTR VarName, [out] PWSTR Value, [in] DWORD Size );",
            "name": "SymGetSourceVarFromTokenW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymbolFile( [in, optional] HANDLE hProcess, [in, optional] PCSTR SymPath, [in] PCSTR ImageFile, [in] DWORD Type, [out] PSTR SymbolFile, [in] size_t cSymbolFile, [out] PSTR DbgFile, [in] size_t cDbgFile );",
            "name": "SymGetSymbolFile"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymbolFileW( [in, optional] HANDLE hProcess, [in, optional] PCWSTR SymPath, [in] PCWSTR ImageFile, [in] DWORD Type, [out] PWSTR SymbolFile, [in] size_t cSymbolFile, [out] PWSTR DbgFile, [in] size_t cDbgFile );",
            "name": "SymGetSymbolFileW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymFromAddr( [in] HANDLE hProcess, [in] DWORD dwAddr, [out, optional] PDWORD pdwDisplacement, [in, out] PIMAGEHLP_SYMBOL Symbol );",
            "name": "SymGetSymFromAddr"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymFromAddr64( [in] HANDLE hProcess, [in] DWORD64 qwAddr, [out, optional] PDWORD64 pdwDisplacement, [in, out] PIMAGEHLP_SYMBOL64 Symbol );",
            "name": "SymGetSymFromAddr64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymFromName( [in] HANDLE hProcess, [in] PCSTR Name, [in, out] PIMAGEHLP_SYMBOL Symbol );",
            "name": "SymGetSymFromName"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymFromName64( [in] HANDLE hProcess, [in] PCSTR Name, [in, out] PIMAGEHLP_SYMBOL64 Symbol );",
            "name": "SymGetSymFromName64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymNext( [in] HANDLE hProcess, [in, out] PIMAGEHLP_SYMBOL Symbol );",
            "name": "SymGetSymNext"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymNext64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_SYMBOL64 Symbol );",
            "name": "SymGetSymNext64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymPrev( [in] HANDLE hProcess, [in, out] PIMAGEHLP_SYMBOL Symbol );",
            "name": "SymGetSymPrev"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetSymPrev64( [in] HANDLE hProcess, [in, out] PIMAGEHLP_SYMBOL64 Symbol );",
            "name": "SymGetSymPrev64"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetTypeFromName( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PCSTR Name, [in, out] PSYMBOL_INFO Symbol );",
            "name": "SymGetTypeFromName"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetTypeFromNameW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] PCWSTR Name, [in, out] PSYMBOL_INFOW Symbol );",
            "name": "SymGetTypeFromNameW"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetTypeInfo( [in] HANDLE hProcess, [in] DWORD64 ModBase, [in] ULONG TypeId, [in] IMAGEHLP_SYMBOL_TYPE_INFO GetType, [out] PVOID pInfo );",
            "name": "SymGetTypeInfo"
        },
        {
            "signature": "BOOL IMAGEAPI SymGetTypeInfoEx( [in] HANDLE hProcess, [in] DWORD64 ModBase, [in, out] PIMAGEHLP_GET_TYPE_INFO_PARAMS Params );",
            "name": "SymGetTypeInfoEx"
        },
        {
            "signature": "BOOL IMAGEAPI SymInitialize( [in] HANDLE hProcess, [in, optional] PCSTR UserSearchPath, [in] BOOL fInvadeProcess );",
            "name": "SymInitialize"
        },
        {
            "signature": "BOOL IMAGEAPI SymInitializeW( [in] HANDLE hProcess, [in, optional] PCWSTR UserSearchPath, [in] BOOL fInvadeProcess );",
            "name": "SymInitializeW"
        },
        {
            "signature": "DWORD IMAGEAPI SymLoadModule( [in] HANDLE hProcess, [in, optional] HANDLE hFile, [in, optional] PCSTR ImageName, [in, optional] PCSTR ModuleName, [in] DWORD BaseOfDll, [in] DWORD SizeOfDll );",
            "name": "SymLoadModule"
        },
        {
            "signature": "DWORD64 IMAGEAPI SymLoadModule64( [in] HANDLE hProcess, [in, optional] HANDLE hFile, [in, optional] PCSTR ImageName, [in, optional] PCSTR ModuleName, [in] DWORD64 BaseOfDll, [in] DWORD SizeOfDll );",
            "name": "SymLoadModule64"
        },
        {
            "signature": "DWORD64 IMAGEAPI SymLoadModuleEx( [in] HANDLE hProcess, [in] HANDLE hFile, [in] PCSTR ImageName, [in] PCSTR ModuleName, [in] DWORD64 BaseOfDll, [in] DWORD DllSize, [in] PMODLOAD_DATA Data, [in] DWORD Flags );",
            "name": "SymLoadModuleEx"
        },
        {
            "signature": "DWORD64 IMAGEAPI SymLoadModuleExW( [in] HANDLE hProcess, [in] HANDLE hFile, [in] PCWSTR ImageName, [in] PCWSTR ModuleName, [in] DWORD64 BaseOfDll, [in] DWORD DllSize, [in] PMODLOAD_DATA Data, [in] DWORD Flags );",
            "name": "SymLoadModuleExW"
        },
        {
            "signature": "BOOL IMAGEAPI SymMatchFileName( [in] PCSTR FileName, [in] PCSTR Match, [out, optional] PSTR *FileNameStop, [out, optional] PSTR *MatchStop );",
            "name": "SymMatchFileName"
        },
        {
            "signature": "BOOL IMAGEAPI SymMatchFileNameW( [in] PCWSTR FileName, [in] PCWSTR Match, [out, optional] PWSTR *FileNameStop, [out, optional] PWSTR *MatchStop );",
            "name": "SymMatchFileNameW"
        },
        {
            "signature": "BOOL IMAGEAPI SymMatchString( [in] PCSTR string, [in] PCSTR expression, [in] BOOL fCase );",
            "name": "SymMatchString"
        },
        {
            "signature": "BOOL IMAGEAPI SymMatchStringA( [in] PCSTR string, [in] PCSTR expression, [in] BOOL fCase );",
            "name": "SymMatchStringA"
        },
        {
            "signature": "BOOL IMAGEAPI SymMatchStringW( [in] PCWSTR string, [in] PCWSTR expression, [in] BOOL fCase );",
            "name": "SymMatchStringW"
        },
        {
            "signature": "BOOL IMAGEAPI SymNext( [in] HANDLE hProcess, [in, out] PSYMBOL_INFO si );",
            "name": "SymNext"
        },
        {
            "signature": "BOOL IMAGEAPI SymNextW( [in] HANDLE hProcess, [in, out] PSYMBOL_INFOW siw );",
            "name": "SymNextW"
        },
        {
            "signature": "BOOL IMAGEAPI SymPrev( [in] HANDLE hProcess, [in, out] PSYMBOL_INFO si );",
            "name": "SymPrev"
        },
        {
            "signature": "BOOL IMAGEAPI SymPrevW( [in] HANDLE hProcess, [in, out] PSYMBOL_INFOW siw );",
            "name": "SymPrevW"
        },
        {
            "signature": "BOOL IMAGEAPI SymQueryInlineTrace( [in] HANDLE hProcess, [in] DWORD64 StartAddress, [in] DWORD StartContext, [in] DWORD64 StartRetAddress, [in] DWORD64 CurAddress, [out] LPDWORD CurContext, [out] LPDWORD CurFrameIndex );",
            "name": "SymQueryInlineTrace"
        },
        {
            "signature": "BOOL IMAGEAPI SymRefreshModuleList( [in] HANDLE hProcess );",
            "name": "SymRefreshModuleList"
        },
        {
            "signature": "BOOL IMAGEAPI SymRegisterCallback( [in] HANDLE hProcess, [in] PSYMBOL_REGISTERED_CALLBACK CallbackFunction, [in] PVOID UserContext );",
            "name": "SymRegisterCallback"
        },
        {
            "signature": "BOOL IMAGEAPI SymRegisterCallback64( [in] HANDLE hProcess, [in] PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, [in] ULONG64 UserContext );",
            "name": "SymRegisterCallback64"
        },
        {
            "signature": "BOOL IMAGEAPI SymRegisterCallbackW64( [in] HANDLE hProcess, [in] PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, [in] ULONG64 UserContext );",
            "name": "SymRegisterCallbackW64"
        },
        {
            "signature": "BOOL IMAGEAPI SymRegisterFunctionEntryCallback( [in] HANDLE hProcess, [in] PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction, [in] PVOID UserContext );",
            "name": "SymRegisterFunctionEntryCallback"
        },
        {
            "signature": "BOOL IMAGEAPI SymRegisterFunctionEntryCallback64( [in] HANDLE hProcess, [in] PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction, [in] ULONG64 UserContext );",
            "name": "SymRegisterFunctionEntryCallback64"
        },
        {
            "signature": "BOOL IMAGEAPI SymSearch( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] DWORD Index, [in, optional] DWORD SymTag, [in, optional] PCSTR Mask, [in, optional] DWORD64 Address, [in] PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, [in, optional] PVOID UserContext, [in] DWORD Options );",
            "name": "SymSearch"
        },
        {
            "signature": "BOOL IMAGEAPI SymSearchW( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in, optional] DWORD Index, [in, optional] DWORD SymTag, [in, optional] PCWSTR Mask, [in, optional] DWORD64 Address, [in] PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback, [in, optional] PVOID UserContext, [in] DWORD Options );",
            "name": "SymSearchW"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetContext( [in] HANDLE hProcess, [in] PIMAGEHLP_STACK_FRAME StackFrame, [in, optional] PIMAGEHLP_CONTEXT Context );",
            "name": "SymSetContext"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetExtendedOption( [in] IMAGEHLP_EXTENDED_OPTIONS option, [in] BOOL value );",
            "name": "SymSetExtendedOption"
        },
        {
            "signature": "PCHAR IMAGEAPI SymSetHomeDirectory( [in] HANDLE hProcess, [in, optional] PCSTR dir );",
            "name": "SymSetHomeDirectory"
        },
        {
            "signature": "PWSTR IMAGEAPI SymSetHomeDirectoryW( [in] HANDLE hProcess, [in, optional] PCWSTR dir );",
            "name": "SymSetHomeDirectoryW"
        },
        {
            "signature": "DWORD IMAGEAPI SymSetOptions( [in] DWORD SymOptions );",
            "name": "SymSetOptions"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetParentWindow( [in] HWND hwnd );",
            "name": "SymSetParentWindow"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetScopeFromAddr( [in] HANDLE hProcess, [in] ULONG64 Address );",
            "name": "SymSetScopeFromAddr"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetScopeFromIndex( [in] HANDLE hProcess, [in] ULONG64 BaseOfDll, [in] DWORD Index );",
            "name": "SymSetScopeFromIndex"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetScopeFromInlineContext( [in] HANDLE hProcess, [in] ULONG64 Address, [in] ULONG InlineContext );",
            "name": "SymSetScopeFromInlineContext"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetSearchPath( [in] HANDLE hProcess, [in, optional] PCSTR SearchPath );",
            "name": "SymSetSearchPath"
        },
        {
            "signature": "BOOL IMAGEAPI SymSetSearchPathW( [in] HANDLE hProcess, [in, optional] PCWSTR SearchPath );",
            "name": "SymSetSearchPathW"
        },
        {
            "signature": "PCSTR IMAGEAPI SymSrvDeltaName( [in] HANDLE hProcess, [in, optional] PCSTR SymPath, [in] PCSTR Type, [in] PCSTR File1, [in] PCSTR File2 );",
            "name": "SymSrvDeltaName"
        },
        {
            "signature": "PCWSTR IMAGEAPI SymSrvDeltaNameW( [in] HANDLE hProcess, [in, optional] PCWSTR SymPath, [in] PCWSTR Type, [in] PCWSTR File1, [in] PCWSTR File2 );",
            "name": "SymSrvDeltaNameW"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexes( [in] PCSTR File, [out] GUID *Id, [out] PDWORD Val1, [out, optional] PDWORD Val2, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexes"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexesW( [in] PCWSTR File, [out] GUID *Id, [out] PDWORD Val1, [out, optional] PDWORD Val2, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexesW"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexInfo( [in] PCSTR File, [out] PSYMSRV_INDEX_INFO Info, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexInfo"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexInfoW( [in] PCWSTR File, [out] PSYMSRV_INDEX_INFOW Info, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexInfoW"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexString( [in] HANDLE hProcess, [in, optional] PCSTR SrvPath, [in] PCSTR File, [out] PSTR Index, [in] size_t Size, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexString"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvGetFileIndexStringW( [in] HANDLE hProcess, [in, optional] PCWSTR SrvPath, [in] PCWSTR File, [out] PWSTR Index, [in] size_t Size, [in] DWORD Flags );",
            "name": "SymSrvGetFileIndexStringW"
        },
        {
            "signature": "PCSTR IMAGEAPI SymSrvGetSupplement( [in] HANDLE hProcess, [in, optional] PCSTR SymPath, [in] PCSTR Node, [in] PCSTR File );",
            "name": "SymSrvGetSupplement"
        },
        {
            "signature": "PCWSTR IMAGEAPI SymSrvGetSupplementW( [in] HANDLE hProcess, [in, optional] PCWSTR SymPath, [in] PCWSTR Node, [in] PCWSTR File );",
            "name": "SymSrvGetSupplementW"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvIsStore( [in, optional] HANDLE hProcess, [in] PCSTR path );",
            "name": "SymSrvIsStore"
        },
        {
            "signature": "BOOL IMAGEAPI SymSrvIsStoreW( [in, optional] HANDLE hProcess, [in] PCWSTR path );",
            "name": "SymSrvIsStoreW"
        },
        {
            "signature": "PCSTR IMAGEAPI SymSrvStoreFile( [in] HANDLE hProcess, [in, optional] PCSTR SrvPath, [in] PCSTR File, [in] DWORD Flags );",
            "name": "SymSrvStoreFile"
        },
        {
            "signature": "PCWSTR IMAGEAPI SymSrvStoreFileW( [in] HANDLE hProcess, [in, optional] PCWSTR SrvPath, [in] PCWSTR File, [in] DWORD Flags );",
            "name": "SymSrvStoreFileW"
        },
        {
            "signature": "PCSTR IMAGEAPI SymSrvStoreSupplement( [in] HANDLE hProcess, [in, optional] PCSTR SrvPath, [in] PCSTR Node, [in] PCSTR File, [in] DWORD Flags );",
            "name": "SymSrvStoreSupplement"
        },
        {
            "signature": "PCWSTR IMAGEAPI SymSrvStoreSupplementW( [in] HANDLE hProcess, [in, optional] PCWSTR SymPath, [in] PCWSTR Node, [in] PCWSTR File, [in] DWORD Flags );",
            "name": "SymSrvStoreSupplementW"
        },
        {
            "signature": "BOOL IMAGEAPI SymUnDName( [in] PIMAGEHLP_SYMBOL sym, [out] PSTR UnDecName, [in] DWORD UnDecNameLength );",
            "name": "SymUnDName"
        },
        {
            "signature": "BOOL IMAGEAPI SymUnDName64( [in] PIMAGEHLP_SYMBOL64 sym, [out] PSTR UnDecName, [in] DWORD UnDecNameLength );",
            "name": "SymUnDName64"
        },
        {
            "signature": "BOOL IMAGEAPI SymUnloadModule( [in] HANDLE hProcess, [in] DWORD BaseOfDll );",
            "name": "SymUnloadModule"
        },
        {
            "signature": "BOOL IMAGEAPI SymUnloadModule64( [in] HANDLE hProcess, [in] DWORD64 BaseOfDll );",
            "name": "SymUnloadModule64"
        },
        {
            "signature": "DWORD IMAGEAPI UnDecorateSymbolName( [in] PCSTR name, [out] PSTR outputString, [in] DWORD maxStringLength, [in] DWORD flags );",
            "name": "UnDecorateSymbolName"
        },
        {
            "signature": "DWORD IMAGEAPI UnDecorateSymbolNameW( [in] PCWSTR name, [out] PWSTR outputString, [in] DWORD maxStringLength, [in] DWORD flags );",
            "name": "UnDecorateSymbolNameW"
        },
        {
            "signature": "BOOL IMAGEAPI UnmapDebugInformation( [in] PIMAGE_DEBUG_INFORMATION DebugInfo );",
            "name": "UnmapDebugInformation"
        }
    ],
    "Dbt.h": [],
    "Dciman.h": [
        {
            "signature": "DCIRVAL DCIBeginAccess( [in] LPDCISURFACEINFO pdci, [in] int x, [in] int y, [in] int dx, [in] int dy );",
            "name": "DCIBeginAccess"
        },
        {
            "signature": "void DCICloseProvider( [in] HDC hdc );",
            "name": "DCICloseProvider"
        },
        {
            "signature": "int DCICreatePrimary( [in] HDC hdc, [out] LPDCISURFACEINFO *lplpSurface );",
            "name": "DCICreatePrimary"
        },
        {
            "signature": "void DCIDestroy( [in] LPDCISURFACEINFO pdci );",
            "name": "DCIDestroy"
        },
        {
            "signature": "void DCIEndAccess( [in] LPDCISURFACEINFO pdci );",
            "name": "DCIEndAccess"
        },
        {
            "signature": "HDC DCIOpenProvider();",
            "name": "DCIOpenProvider"
        }
    ],
    "Dcommon.h": [],
    "Dcomp.h": [
        {
            "signature": "HRESULT DCompositionAttachMouseDragToHwnd( [in] IDCompositionVisual *visual, [in] HWND hwnd, [in] BOOL enable );",
            "name": "DCompositionAttachMouseDragToHwnd"
        },
        {
            "signature": "HRESULT DCompositionAttachMouseWheelToHwnd( [in] IDCompositionVisual *visual, [in] HWND hwnd, [in] BOOL enable );",
            "name": "DCompositionAttachMouseWheelToHwnd"
        },
        {
            "signature": "HRESULT DCompositionBoostCompositorClock( BOOL enable );",
            "name": "DCompositionBoostCompositorClock"
        },
        {
            "signature": "HRESULT DCompositionCreateDevice( [in] IDXGIDevice *dxgiDevice, [in] REFIID iid, [out] void **dcompositionDevice );",
            "name": "DCompositionCreateDevice"
        },
        {
            "signature": "HRESULT DCompositionCreateDevice2( [in, optional] IUnknown *renderingDevice, [in] REFIID iid, [out] void **dcompositionDevice );",
            "name": "DCompositionCreateDevice2"
        },
        {
            "signature": "HRESULT DCompositionCreateDevice3( [in, optional] IUnknown *renderingDevice, [in] REFIID iid, [out] void **dcompositionDevice );",
            "name": "DCompositionCreateDevice3"
        },
        {
            "signature": "HRESULT DCompositionCreateSurfaceHandle( [in] DWORD desiredAccess, [in, optional] SECURITY_ATTRIBUTES *securityAttributes, [out] HANDLE *surfaceHandle );",
            "name": "DCompositionCreateSurfaceHandle"
        },
        {
            "signature": "HRESULT DCompositionGetFrameId( COMPOSITION_FRAME_ID_TYPE frameIdType, COMPOSITION_FRAME_ID *frameId );",
            "name": "DCompositionGetFrameId"
        },
        {
            "signature": "HRESULT DCompositionGetStatistics( COMPOSITION_FRAME_ID frameId, COMPOSITION_FRAME_STATS *frameStats, UINT targetIdCount, COMPOSITION_TARGET_ID *targetIds, UINT *actualTargetIdCount );",
            "name": "DCompositionGetStatistics"
        },
        {
            "signature": "HRESULT DCompositionGetTargetStatistics( COMPOSITION_FRAME_ID frameId, const COMPOSITION_TARGET_ID *targetId, COMPOSITION_TARGET_STATS *targetStats );",
            "name": "DCompositionGetTargetStatistics"
        },
        {
            "signature": "DWORD DCompositionWaitForCompositorClock( UINT count, const HANDLE *handles, DWORD timeoutInMs );",
            "name": "DCompositionWaitForCompositorClock"
        }
    ],
    "Dcompanimation.h": [],
    "Dcomptypes.h": [],
    "Dde.h": [
        {
            "signature": "BOOL DdeSetQualityOfService( [in] HWND hwndClient, [in] const SECURITY_QUALITY_OF_SERVICE *pqosNew, [out] PSECURITY_QUALITY_OF_SERVICE pqosPrev );",
            "name": "DdeSetQualityOfService"
        },
        {
            "signature": "BOOL FreeDDElParam( [in] UINT msg, [in] LPARAM lParam );",
            "name": "FreeDDElParam"
        },
        {
            "signature": "BOOL ImpersonateDdeClientWindow( [in] HWND hWndClient, [in] HWND hWndServer );",
            "name": "ImpersonateDdeClientWindow"
        },
        {
            "signature": "LPARAM PackDDElParam( [in] UINT msg, [in] UINT_PTR uiLo, [in] UINT_PTR uiHi );",
            "name": "PackDDElParam"
        },
        {
            "signature": "LPARAM ReuseDDElParam( [in] LPARAM lParam, [in] UINT msgIn, [in] UINT msgOut, [in] UINT_PTR uiLo, [in] UINT_PTR uiHi );",
            "name": "ReuseDDElParam"
        },
        {
            "signature": "BOOL UnpackDDElParam( [in] UINT msg, [in] LPARAM lParam, [out] PUINT_PTR puiLo, [out] PUINT_PTR puiHi );",
            "name": "UnpackDDElParam"
        }
    ],
    "Ddeml.h": [
        {
            "signature": "BOOL DdeAbandonTransaction( [in] DWORD idInst, [in] HCONV hConv, [in] DWORD idTransaction );",
            "name": "DdeAbandonTransaction"
        },
        {
            "signature": "LPBYTE DdeAccessData( [in] HDDEDATA hData, [out, optional] LPDWORD pcbDataSize );",
            "name": "DdeAccessData"
        },
        {
            "signature": "HDDEDATA DdeAddData( [in] HDDEDATA hData, [in] LPBYTE pSrc, [in] DWORD cb, [in] DWORD cbOff );",
            "name": "DdeAddData"
        },
        {
            "signature": "HDDEDATA DdeClientTransaction( [in, optional] LPBYTE pData, [in] DWORD cbData, [in] HCONV hConv, [in, optional] HSZ hszItem, [in] UINT wFmt, [in] UINT wType, [in] DWORD dwTimeout, [out, optional] LPDWORD pdwResult );",
            "name": "DdeClientTransaction"
        },
        {
            "signature": "int DdeCmpStringHandles( [in] HSZ hsz1, [in] HSZ hsz2 );",
            "name": "DdeCmpStringHandles"
        },
        {
            "signature": "HCONV DdeConnect( [in] DWORD idInst, [in] HSZ hszService, [in] HSZ hszTopic, [in, optional] PCONVCONTEXT pCC );",
            "name": "DdeConnect"
        },
        {
            "signature": "HCONVLIST DdeConnectList( [in] DWORD idInst, [in] HSZ hszService, [in] HSZ hszTopic, [in] HCONVLIST hConvList, [in, optional] PCONVCONTEXT pCC );",
            "name": "DdeConnectList"
        },
        {
            "signature": "HDDEDATA DdeCreateDataHandle( [in] DWORD idInst, [in, optional] LPBYTE pSrc, [in] DWORD cb, [in] DWORD cbOff, [in, optional] HSZ hszItem, [in] UINT wFmt, [in] UINT afCmd );",
            "name": "DdeCreateDataHandle"
        },
        {
            "signature": "HSZ DdeCreateStringHandleA( [in] DWORD idInst, [in] LPCSTR psz, [in] int iCodePage );",
            "name": "DdeCreateStringHandleA"
        },
        {
            "signature": "HSZ DdeCreateStringHandleW( [in] DWORD idInst, [in] LPCWSTR psz, [in] int iCodePage );",
            "name": "DdeCreateStringHandleW"
        },
        {
            "signature": "BOOL DdeDisconnect( [in] HCONV hConv );",
            "name": "DdeDisconnect"
        },
        {
            "signature": "BOOL DdeDisconnectList( [in] HCONVLIST hConvList );",
            "name": "DdeDisconnectList"
        },
        {
            "signature": "BOOL DdeEnableCallback( [in] DWORD idInst, [in] HCONV hConv, [in] UINT wCmd );",
            "name": "DdeEnableCallback"
        },
        {
            "signature": "BOOL DdeFreeDataHandle( [in] HDDEDATA hData );",
            "name": "DdeFreeDataHandle"
        },
        {
            "signature": "BOOL DdeFreeStringHandle( [in] DWORD idInst, [in] HSZ hsz );",
            "name": "DdeFreeStringHandle"
        },
        {
            "signature": "DWORD DdeGetData( [in] HDDEDATA hData, [out, optional] LPBYTE pDst, [in] DWORD cbMax, [in] DWORD cbOff );",
            "name": "DdeGetData"
        },
        {
            "signature": "UINT DdeGetLastError( [in] DWORD idInst );",
            "name": "DdeGetLastError"
        },
        {
            "signature": "BOOL DdeImpersonateClient( [in] HCONV hConv );",
            "name": "DdeImpersonateClient"
        },
        {
            "signature": "UINT DdeInitializeA( [in, out] LPDWORD pidInst, [in] PFNCALLBACK pfnCallback, [in] DWORD afCmd, DWORD ulRes );",
            "name": "DdeInitializeA"
        },
        {
            "signature": "UINT DdeInitializeW( [in, out] LPDWORD pidInst, [in] PFNCALLBACK pfnCallback, [in] DWORD afCmd, DWORD ulRes );",
            "name": "DdeInitializeW"
        },
        {
            "signature": "BOOL DdeKeepStringHandle( [in] DWORD idInst, [in] HSZ hsz );",
            "name": "DdeKeepStringHandle"
        },
        {
            "signature": "HDDEDATA DdeNameService( [in] DWORD idInst, [in, optional] HSZ hsz1, [in, optional] HSZ hsz2, [in] UINT afCmd );",
            "name": "DdeNameService"
        },
        {
            "signature": "BOOL DdePostAdvise( [in] DWORD idInst, [in] HSZ hszTopic, [in] HSZ hszItem );",
            "name": "DdePostAdvise"
        },
        {
            "signature": "UINT DdeQueryConvInfo( [in] HCONV hConv, [in] DWORD idTransaction, [in, out] PCONVINFO pConvInfo );",
            "name": "DdeQueryConvInfo"
        },
        {
            "signature": "HCONV DdeQueryNextServer( [in] HCONVLIST hConvList, [in] HCONV hConvPrev );",
            "name": "DdeQueryNextServer"
        },
        {
            "signature": "DWORD DdeQueryStringA( [in] DWORD idInst, [in] HSZ hsz, [out, optional] LPSTR psz, [in] DWORD cchMax, [in] int iCodePage );",
            "name": "DdeQueryStringA"
        },
        {
            "signature": "DWORD DdeQueryStringW( [in] DWORD idInst, [in] HSZ hsz, [out, optional] LPWSTR psz, [in] DWORD cchMax, [in] int iCodePage );",
            "name": "DdeQueryStringW"
        },
        {
            "signature": "HCONV DdeReconnect( [in] HCONV hConv );",
            "name": "DdeReconnect"
        },
        {
            "signature": "BOOL DdeSetUserHandle( [in] HCONV hConv, [in] DWORD id, [in] DWORD_PTR hUser );",
            "name": "DdeSetUserHandle"
        },
        {
            "signature": "BOOL DdeUnaccessData( [in] HDDEDATA hData );",
            "name": "DdeUnaccessData"
        },
        {
            "signature": "BOOL DdeUninitialize( [in] DWORD idInst );",
            "name": "DdeUninitialize"
        },
        {
            "signature": "PFNCALLBACK Pfncallback; HDDEDATA Pfncallback( [in] UINT wType, [in] UINT wFmt, [in] HCONV hConv, [in] HSZ hsz1, [in] HSZ hsz2, [in] HDDEDATA hData, [in] ULONG_PTR dwData1, [in] ULONG_PTR dwData2 ) {...}",
            "name": "PFNCALLBACK callback"
        }
    ],
    "Ddkernel.h": [],
    "Ddkmapi.h": [
        {
            "signature": "LPDD_NOTIFYCALLBACK LpddNotifycallback; ULONG LpddNotifycallback( DWORD dwFlags, PVOID pContext, DWORD dwParam1, DWORD dwParam2 ) {...}",
            "name": "LPDD_NOTIFYCALLBACK callback"
        }
    ],
    "Ddpbackup.h": [],
    "Ddraw.h": [
        {
            "signature": "HRESULT DirectDrawCreate( [in] GUID *lpGUID, [out] LPDIRECTDRAW *lplpDD, [in] IUnknown *pUnkOuter );",
            "name": "DirectDrawCreate"
        },
        {
            "signature": "HRESULT DirectDrawCreateClipper( [in] DWORD dwFlags, [out] LPDIRECTDRAWCLIPPER *lplpDDClipper, [in] IUnknown *pUnkOuter );",
            "name": "DirectDrawCreateClipper"
        },
        {
            "signature": "HRESULT DirectDrawCreateEx( [in] GUID *lpGuid, [out] LPVOID *lplpDD, [in] REFIID iid, [in] IUnknown *pUnkOuter );",
            "name": "DirectDrawCreateEx"
        },
        {
            "signature": "HRESULT DirectDrawEnumerateA( [in] LPDDENUMCALLBACKA lpCallback, [in] LPVOID lpContext );",
            "name": "DirectDrawEnumerateA"
        },
        {
            "signature": "HRESULT DirectDrawEnumerateExA( [in] LPDDENUMCALLBACKEXA lpCallback, [in] LPVOID lpContext, [in] DWORD dwFlags );",
            "name": "DirectDrawEnumerateExA"
        },
        {
            "signature": "HRESULT DirectDrawEnumerateExW( [in] LPDDENUMCALLBACKEXW lpCallback, [in] LPVOID lpContext, [in] DWORD dwFlags );",
            "name": "DirectDrawEnumerateExW"
        },
        {
            "signature": "HRESULT DirectDrawEnumerateW( [in] LPDDENUMCALLBACKW lpCallback, [in] LPVOID lpContext );",
            "name": "DirectDrawEnumerateW"
        },
        {
            "signature": "LPDDENUMCALLBACKA Lpddenumcallbacka; BOOL Lpddenumcallbacka( GUID *unnamedParam1, LPSTR unnamedParam2, LPSTR unnamedParam3, LPVOID unnamedParam4 ) {...}",
            "name": "LPDDENUMCALLBACKA callback"
        },
        {
            "signature": "LPDDENUMCALLBACKEXA Lpddenumcallbackexa; BOOL Lpddenumcallbackexa( GUID *unnamedParam1, LPSTR unnamedParam2, LPSTR unnamedParam3, LPVOID unnamedParam4, HMONITOR unnamedParam5 ) {...}",
            "name": "LPDDENUMCALLBACKEXA callback"
        },
        {
            "signature": "LPDDENUMCALLBACKEXW Lpddenumcallbackexw; BOOL Lpddenumcallbackexw( GUID *unnamedParam1, LPWSTR unnamedParam2, LPWSTR unnamedParam3, LPVOID unnamedParam4, HMONITOR unnamedParam5 ) {...}",
            "name": "LPDDENUMCALLBACKEXW callback"
        },
        {
            "signature": "LPDDENUMCALLBACKW Lpddenumcallbackw; BOOL Lpddenumcallbackw( GUID *unnamedParam1, LPWSTR unnamedParam2, LPWSTR unnamedParam3, LPVOID unnamedParam4 ) {...}",
            "name": "LPDDENUMCALLBACKW callback"
        },
        {
            "signature": "LPDDENUMMODESCALLBACK Lpddenummodescallback; HRESULT Lpddenummodescallback( [in] LPDDSURFACEDESC unnamedParam1, [in] LPVOID unnamedParam2 ) {...}",
            "name": "LPDDENUMMODESCALLBACK callback"
        },
        {
            "signature": "LPDDENUMMODESCALLBACK2 Lpddenummodescallback2; HRESULT Lpddenummodescallback2( [in] LPDDSURFACEDESC2 unnamedParam1, [in] LPVOID unnamedParam2 ) {...}",
            "name": "LPDDENUMMODESCALLBACK2 callback"
        },
        {
            "signature": "LPDDENUMSURFACESCALLBACK Lpddenumsurfacescallback; HRESULT Lpddenumsurfacescallback( [in] LPDIRECTDRAWSURFACE unnamedParam1, [in] LPDDSURFACEDESC unnamedParam2, [in] LPVOID unnamedParam3 ) {...}",
            "name": "LPDDENUMSURFACESCALLBACK callback"
        },
        {
            "signature": "LPDDENUMSURFACESCALLBACK2 Lpddenumsurfacescallback2; HRESULT Lpddenumsurfacescallback2( [in] LPDIRECTDRAWSURFACE4 unnamedParam1, [in] LPDDSURFACEDESC2 unnamedParam2, [in] LPVOID unnamedParam3 ) {...}",
            "name": "LPDDENUMSURFACESCALLBACK2 callback"
        },
        {
            "signature": "LPDDENUMSURFACESCALLBACK7 Lpddenumsurfacescallback7; HRESULT Lpddenumsurfacescallback7( [in] LPDIRECTDRAWSURFACE7 unnamedParam1, [in] LPDDSURFACEDESC2 unnamedParam2, [in] LPVOID unnamedParam3 ) {...}",
            "name": "LPDDENUMSURFACESCALLBACK7 callback"
        }
    ],
    "Ddrawgdi.h": [
        {
            "signature": "BOOL DdAttachSurface( [in] LPDDRAWI_DDRAWSURFACE_LCL pSurfaceFrom, [in] LPDDRAWI_DDRAWSURFACE_LCL pSurfaceTo );",
            "name": "DdAttachSurface"
        },
        {
            "signature": "HBITMAP DdCreateDIBSection( HDC hdc, const BITMAPINFO *pbmi, UINT iUsage, VOID **ppvBits, HANDLE hSectionApp, DWORD dwOffset );",
            "name": "DdCreateDIBSection"
        },
        {
            "signature": "BOOL DdCreateDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal, HDC hdc );",
            "name": "DdCreateDirectDrawObject"
        },
        {
            "signature": "BOOL DdCreateSurfaceObject( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal, BOOL bPrimarySurface );",
            "name": "DdCreateSurfaceObject"
        },
        {
            "signature": "BOOL DdDeleteDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal );",
            "name": "DdDeleteDirectDrawObject"
        },
        {
            "signature": "BOOL DdDeleteSurfaceObject( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal );",
            "name": "DdDeleteSurfaceObject"
        },
        {
            "signature": "HDC DdGetDC( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal, LPPALETTEENTRY pColorTable );",
            "name": "DdGetDC"
        },
        {
            "signature": "HANDLE DdGetDxHandle( [in] LPDDRAWI_DIRECTDRAW_LCL pDDraw, [in] LPDDRAWI_DDRAWSURFACE_LCL pSurface, [in] BOOL bRelease );",
            "name": "DdGetDxHandle"
        },
        {
            "signature": "BOOL DdQueryDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal, LPDDHALINFO pHalInfo, LPDDHAL_DDCALLBACKS pDDCallbacks, LPDDHAL_DDSURFACECALLBACKS pDDSurfaceCallbacks, LPDDHAL_DDPALETTECALLBACKS pDDPaletteCallbacks, LPD3DHAL_CALLBACKS pD3dCallbacks, LPD3DHAL_GLOBALDRIVERDATA pD3dDriverData, LPDDHAL_DDEXEBUFCALLBACKS pD3dBufferCallbacks, LPDDSURFACEDESC pD3dTextureFormats, LPDWORD pdwFourCC, LPVIDMEM pvmList );",
            "name": "DdQueryDirectDrawObject"
        },
        {
            "signature": "ULONG DdQueryDisplaySettingsUniqueness();",
            "name": "DdQueryDisplaySettingsUniqueness"
        },
        {
            "signature": "BOOL DdReenableDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal, BOOL *pbNewMode );",
            "name": "DdReenableDirectDrawObject"
        },
        {
            "signature": "BOOL DdReleaseDC( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal );",
            "name": "DdReleaseDC"
        },
        {
            "signature": "BOOL DdResetVisrgn( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal, HWND hWnd );",
            "name": "DdResetVisrgn"
        },
        {
            "signature": "BOOL DdSetGammaRamp( [in] LPDDRAWI_DIRECTDRAW_LCL pDDraw, [in] HDC hdc, [in] LPVOID lpGammaRamp );",
            "name": "DdSetGammaRamp"
        },
        {
            "signature": "DWORD DdSwapTextureHandles( LPDDRAWI_DIRECTDRAW_LCL pDDraw, LPDDRAWI_DDRAWSURFACE_LCL pDDSLcl1, LPDDRAWI_DDRAWSURFACE_LCL pDDSLcl2 );",
            "name": "DdSwapTextureHandles"
        },
        {
            "signature": "void DdUnattachSurface( [in] LPDDRAWI_DDRAWSURFACE_LCL pSurface, [in] LPDDRAWI_DDRAWSURFACE_LCL pSurfaceAttached );",
            "name": "DdUnattachSurface"
        }
    ],
    "Ddrawi.h": [],
    "Ddrawint.h": [
        {
            "signature": "PDD_CANCREATESURFACE PddCancreatesurface; DWORD PddCancreatesurface( PDD_CANCREATESURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_CANCREATESURFACE callback"
        },
        {
            "signature": "PDD_COLORCB_COLORCONTROL PddColorcbColorcontrol; DWORD PddColorcbColorcontrol( PDD_COLORCONTROLDATA unnamedParam1 ) {...}",
            "name": "PDD_COLORCB_COLORCONTROL callback"
        },
        {
            "signature": "PDD_CREATEPALETTE PddCreatepalette; DWORD PddCreatepalette( PDD_CREATEPALETTEDATA unnamedParam1 ) {...}",
            "name": "PDD_CREATEPALETTE callback"
        },
        {
            "signature": "PDD_CREATESURFACE PddCreatesurface; DWORD PddCreatesurface( PDD_CREATESURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_CREATESURFACE callback"
        },
        {
            "signature": "PDD_CREATESURFACEEX PddCreatesurfaceex; DWORD PddCreatesurfaceex( PDD_CREATESURFACEEXDATA unnamedParam1 ) {...}",
            "name": "PDD_CREATESURFACEEX callback"
        },
        {
            "signature": "PDD_DESTROYDDLOCAL PddDestroyddlocal; DWORD PddDestroyddlocal( PDD_DESTROYDDLOCALDATA unnamedParam1 ) {...}",
            "name": "PDD_DESTROYDDLOCAL callback"
        },
        {
            "signature": "PDD_FLIPTOGDISURFACE PddFliptogdisurface; DWORD PddFliptogdisurface( PDD_FLIPTOGDISURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_FLIPTOGDISURFACE callback"
        },
        {
            "signature": "PDD_FREEDRIVERMEMORY PddFreedrivermemory; DWORD PddFreedrivermemory( PDD_FREEDRIVERMEMORYDATA unnamedParam1 ) {...}",
            "name": "PDD_FREEDRIVERMEMORY callback"
        },
        {
            "signature": "PDD_GETAVAILDRIVERMEMORY PddGetavaildrivermemory; DWORD PddGetavaildrivermemory( PDD_GETAVAILDRIVERMEMORYDATA unnamedParam1 ) {...}",
            "name": "PDD_GETAVAILDRIVERMEMORY callback"
        },
        {
            "signature": "PDD_GETDRIVERINFO PddGetdriverinfo; DWORD PddGetdriverinfo( PDD_GETDRIVERINFODATA unnamedParam1 ) {...}",
            "name": "PDD_GETDRIVERINFO callback"
        },
        {
            "signature": "PDD_GETDRIVERSTATE PddGetdriverstate; DWORD PddGetdriverstate( PDD_GETDRIVERSTATEDATA unnamedParam1 ) {...}",
            "name": "PDD_GETDRIVERSTATE callback"
        },
        {
            "signature": "PDD_GETSCANLINE PddGetscanline; DWORD PddGetscanline( PDD_GETSCANLINEDATA unnamedParam1 ) {...}",
            "name": "PDD_GETSCANLINE callback"
        },
        {
            "signature": "PDD_KERNELCB_SYNCSURFACE PddKernelcbSyncsurface; DWORD PddKernelcbSyncsurface( PDD_SYNCSURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_KERNELCB_SYNCSURFACE callback"
        },
        {
            "signature": "PDD_KERNELCB_SYNCVIDEOPORT PddKernelcbSyncvideoport; DWORD PddKernelcbSyncvideoport( PDD_SYNCVIDEOPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_KERNELCB_SYNCVIDEOPORT callback"
        },
        {
            "signature": "PDD_MAPMEMORY PddMapmemory; DWORD PddMapmemory( PDD_MAPMEMORYDATA unnamedParam1 ) {...}",
            "name": "PDD_MAPMEMORY callback"
        },
        {
            "signature": "PDD_MOCOMPCB_BEGINFRAME PddMocompcbBeginframe; DWORD PddMocompcbBeginframe( PDD_BEGINMOCOMPFRAMEDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_BEGINFRAME callback"
        },
        {
            "signature": "PDD_MOCOMPCB_CREATE PddMocompcbCreate; DWORD PddMocompcbCreate( PDD_CREATEMOCOMPDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_CREATE callback"
        },
        {
            "signature": "PDD_MOCOMPCB_DESTROY PddMocompcbDestroy; DWORD PddMocompcbDestroy( PDD_DESTROYMOCOMPDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_DESTROY callback"
        },
        {
            "signature": "PDD_MOCOMPCB_ENDFRAME PddMocompcbEndframe; DWORD PddMocompcbEndframe( PDD_ENDMOCOMPFRAMEDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_ENDFRAME callback"
        },
        {
            "signature": "PDD_MOCOMPCB_GETCOMPBUFFINFO PddMocompcbGetcompbuffinfo; DWORD PddMocompcbGetcompbuffinfo( PDD_GETMOCOMPCOMPBUFFDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_GETCOMPBUFFINFO callback"
        },
        {
            "signature": "PDD_MOCOMPCB_GETFORMATS PddMocompcbGetformats; DWORD PddMocompcbGetformats( PDD_GETMOCOMPFORMATSDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_GETFORMATS callback"
        },
        {
            "signature": "PDD_MOCOMPCB_GETGUIDS PddMocompcbGetguids; DWORD PddMocompcbGetguids( PDD_GETMOCOMPGUIDSDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_GETGUIDS callback"
        },
        {
            "signature": "PDD_MOCOMPCB_GETINTERNALINFO PddMocompcbGetinternalinfo; DWORD PddMocompcbGetinternalinfo( PDD_GETINTERNALMOCOMPDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_GETINTERNALINFO callback"
        },
        {
            "signature": "PDD_MOCOMPCB_QUERYSTATUS PddMocompcbQuerystatus; DWORD PddMocompcbQuerystatus( PDD_QUERYMOCOMPSTATUSDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_QUERYSTATUS callback"
        },
        {
            "signature": "PDD_MOCOMPCB_RENDER PddMocompcbRender; DWORD PddMocompcbRender( PDD_RENDERMOCOMPDATA unnamedParam1 ) {...}",
            "name": "PDD_MOCOMPCB_RENDER callback"
        },
        {
            "signature": "PDD_PALCB_DESTROYPALETTE PddPalcbDestroypalette; DWORD PddPalcbDestroypalette( PDD_DESTROYPALETTEDATA unnamedParam1 ) {...}",
            "name": "PDD_PALCB_DESTROYPALETTE callback"
        },
        {
            "signature": "PDD_PALCB_SETENTRIES PddPalcbSetentries; DWORD PddPalcbSetentries( PDD_SETENTRIESDATA unnamedParam1 ) {...}",
            "name": "PDD_PALCB_SETENTRIES callback"
        },
        {
            "signature": "PDD_SETEXCLUSIVEMODE PddSetexclusivemode; DWORD PddSetexclusivemode( PDD_SETEXCLUSIVEMODEDATA unnamedParam1 ) {...}",
            "name": "PDD_SETEXCLUSIVEMODE callback"
        },
        {
            "signature": "PDD_SURFCB_ADDATTACHEDSURFACE PddSurfcbAddattachedsurface; DWORD PddSurfcbAddattachedsurface( PDD_ADDATTACHEDSURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_ADDATTACHEDSURFACE callback"
        },
        {
            "signature": "PDD_SURFCB_BLT PddSurfcbBlt; DWORD PddSurfcbBlt( PDD_BLTDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_BLT callback"
        },
        {
            "signature": "PDD_SURFCB_DESTROYSURFACE PddSurfcbDestroysurface; DWORD PddSurfcbDestroysurface( PDD_DESTROYSURFACEDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_DESTROYSURFACE callback"
        },
        {
            "signature": "PDD_SURFCB_FLIP PddSurfcbFlip; DWORD PddSurfcbFlip( PDD_FLIPDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_FLIP callback"
        },
        {
            "signature": "PDD_SURFCB_GETBLTSTATUS PddSurfcbGetbltstatus; DWORD PddSurfcbGetbltstatus( PDD_GETBLTSTATUSDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_GETBLTSTATUS callback"
        },
        {
            "signature": "PDD_SURFCB_GETFLIPSTATUS PddSurfcbGetflipstatus; DWORD PddSurfcbGetflipstatus( PDD_GETFLIPSTATUSDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_GETFLIPSTATUS callback"
        },
        {
            "signature": "PDD_SURFCB_LOCK PddSurfcbLock; DWORD PddSurfcbLock( PDD_LOCKDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_LOCK callback"
        },
        {
            "signature": "PDD_SURFCB_SETCOLORKEY PddSurfcbSetcolorkey; DWORD PddSurfcbSetcolorkey( PDD_SETCOLORKEYDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_SETCOLORKEY callback"
        },
        {
            "signature": "PDD_SURFCB_SETOVERLAYPOSITION PddSurfcbSetoverlayposition; DWORD PddSurfcbSetoverlayposition( PDD_SETOVERLAYPOSITIONDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_SETOVERLAYPOSITION callback"
        },
        {
            "signature": "PDD_SURFCB_SETPALETTE PddSurfcbSetpalette; DWORD PddSurfcbSetpalette( PDD_SETPALETTEDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_SETPALETTE callback"
        },
        {
            "signature": "PDD_SURFCB_UNLOCK PddSurfcbUnlock; DWORD PddSurfcbUnlock( PDD_UNLOCKDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_UNLOCK callback"
        },
        {
            "signature": "PDD_SURFCB_UPDATEOVERLAY PddSurfcbUpdateoverlay; DWORD PddSurfcbUpdateoverlay( PDD_UPDATEOVERLAYDATA unnamedParam1 ) {...}",
            "name": "PDD_SURFCB_UPDATEOVERLAY callback"
        },
        {
            "signature": "PDD_VPORTCB_CANCREATEVIDEOPORT PddVportcbCancreatevideoport; DWORD PddVportcbCancreatevideoport( PDD_CANCREATEVPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_CANCREATEVIDEOPORT callback"
        },
        {
            "signature": "PDD_VPORTCB_COLORCONTROL PddVportcbColorcontrol; DWORD PddVportcbColorcontrol( PDD_VPORTCOLORDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_COLORCONTROL callback"
        },
        {
            "signature": "PDD_VPORTCB_CREATEVIDEOPORT PddVportcbCreatevideoport; DWORD PddVportcbCreatevideoport( PDD_CREATEVPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_CREATEVIDEOPORT callback"
        },
        {
            "signature": "PDD_VPORTCB_DESTROYVPORT PddVportcbDestroyvport; DWORD PddVportcbDestroyvport( PDD_DESTROYVPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_DESTROYVPORT callback"
        },
        {
            "signature": "PDD_VPORTCB_FLIP PddVportcbFlip; DWORD PddVportcbFlip( PDD_FLIPVPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_FLIP callback"
        },
        {
            "signature": "PDD_VPORTCB_GETBANDWIDTH PddVportcbGetbandwidth; DWORD PddVportcbGetbandwidth( PDD_GETVPORTBANDWIDTHDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETBANDWIDTH callback"
        },
        {
            "signature": "PDD_VPORTCB_GETFIELD PddVportcbGetfield; DWORD PddVportcbGetfield( PDD_GETVPORTFIELDDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETFIELD callback"
        },
        {
            "signature": "PDD_VPORTCB_GETFLIPSTATUS PddVportcbGetflipstatus; DWORD PddVportcbGetflipstatus( PDD_GETVPORTFLIPSTATUSDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETFLIPSTATUS callback"
        },
        {
            "signature": "PDD_VPORTCB_GETINPUTFORMATS PddVportcbGetinputformats; DWORD PddVportcbGetinputformats( PDD_GETVPORTINPUTFORMATDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETINPUTFORMATS callback"
        },
        {
            "signature": "PDD_VPORTCB_GETLINE PddVportcbGetline; DWORD PddVportcbGetline( PDD_GETVPORTLINEDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETLINE callback"
        },
        {
            "signature": "PDD_VPORTCB_GETOUTPUTFORMATS PddVportcbGetoutputformats; DWORD PddVportcbGetoutputformats( PDD_GETVPORTOUTPUTFORMATDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETOUTPUTFORMATS callback"
        },
        {
            "signature": "PDD_VPORTCB_GETSIGNALSTATUS PddVportcbGetsignalstatus; DWORD PddVportcbGetsignalstatus( PDD_GETVPORTSIGNALDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETSIGNALSTATUS callback"
        },
        {
            "signature": "PDD_VPORTCB_GETVPORTCONNECT PddVportcbGetvportconnect; DWORD PddVportcbGetvportconnect( PDD_GETVPORTCONNECTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_GETVPORTCONNECT callback"
        },
        {
            "signature": "PDD_VPORTCB_UPDATE PddVportcbUpdate; DWORD PddVportcbUpdate( PDD_UPDATEVPORTDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_UPDATE callback"
        },
        {
            "signature": "PDD_VPORTCB_WAITFORSYNC PddVportcbWaitforsync; DWORD PddVportcbWaitforsync( PDD_WAITFORVPORTSYNCDATA unnamedParam1 ) {...}",
            "name": "PDD_VPORTCB_WAITFORSYNC callback"
        },
        {
            "signature": "PDD_WAITFORVERTICALBLANK PddWaitforverticalblank; DWORD PddWaitforverticalblank( PDD_WAITFORVERTICALBLANKDATA unnamedParam1 ) {...}",
            "name": "PDD_WAITFORVERTICALBLANK callback"
        }
    ],
    "Debugapi.h": [
        {
            "signature": "BOOL CheckRemoteDebuggerPresent( [in] HANDLE hProcess, [in, out] PBOOL pbDebuggerPresent );",
            "name": "CheckRemoteDebuggerPresent"
        },
        {
            "signature": "BOOL ContinueDebugEvent( [in] DWORD dwProcessId, [in] DWORD dwThreadId, [in] DWORD dwContinueStatus );",
            "name": "ContinueDebugEvent"
        },
        {
            "signature": "BOOL DebugActiveProcess( [in] DWORD dwProcessId );",
            "name": "DebugActiveProcess"
        },
        {
            "signature": "BOOL DebugActiveProcessStop( [in] DWORD dwProcessId );",
            "name": "DebugActiveProcessStop"
        },
        {
            "signature": "void DebugBreak();",
            "name": "DebugBreak"
        },
        {
            "signature": "BOOL IsDebuggerPresent();",
            "name": "IsDebuggerPresent"
        },
        {
            "signature": "void OutputDebugStringA( [in, optional] LPCSTR lpOutputString );",
            "name": "OutputDebugStringA"
        },
        {
            "signature": "void OutputDebugStringW( [in, optional] LPCWSTR lpOutputString );",
            "name": "OutputDebugStringW"
        },
        {
            "signature": "BOOL WaitForDebugEvent( [out] LPDEBUG_EVENT lpDebugEvent, [in] DWORD dwMilliseconds );",
            "name": "WaitForDebugEvent"
        },
        {
            "signature": "BOOL WaitForDebugEventEx( [out] LPDEBUG_EVENT lpDebugEvent, [in] DWORD dwMilliseconds );",
            "name": "WaitForDebugEventEx"
        }
    ],
    "Deliveryoptimization.h": [],
    "Deviceaccess.h": [
        {
            "signature": "HRESULT CreateDeviceAccessInstance( [in] PCWSTR deviceInterfacePath, [in] DWORD desiredAccess, ICreateDeviceAccessAsync **createAsync );",
            "name": "CreateDeviceAccessInstance"
        }
    ],
    "Devicetopology.h": [],
    "Dhcpcsdk.h": [
        {
            "signature": "void DhcpCApiCleanup();",
            "name": "DhcpCApiCleanup"
        },
        {
            "signature": "DWORD DhcpCApiInitialize( [out] LPDWORD Version );",
            "name": "DhcpCApiInitialize"
        },
        {
            "signature": "DWORD DhcpDeRegisterParamChange( [in] DWORD Flags, [in] LPVOID Reserved, [in] LPVOID Event );",
            "name": "DhcpDeRegisterParamChange"
        },
        {
            "signature": "DWORD DhcpRegisterParamChange( [in] DWORD Flags, [in] LPVOID Reserved, [in] LPWSTR AdapterName, [in] LPDHCPCAPI_CLASSID ClassId, [in] DHCPCAPI_PARAMS_ARRAY Params, [in, out] LPVOID Handle );",
            "name": "DhcpRegisterParamChange"
        },
        {
            "signature": "DWORD DhcpRemoveDNSRegistrations();",
            "name": "DhcpRemoveDNSRegistrations"
        },
        {
            "signature": "DWORD DhcpRequestParams( [in] DWORD Flags, [in] LPVOID Reserved, [in] LPWSTR AdapterName, [in] LPDHCPCAPI_CLASSID ClassId, [in] DHCPCAPI_PARAMS_ARRAY SendParams, [in, out] DHCPCAPI_PARAMS_ARRAY RecdParams, [in] LPBYTE Buffer, [in, out] LPDWORD pSize, [in] LPWSTR RequestIdStr );",
            "name": "DhcpRequestParams"
        },
        {
            "signature": "DWORD DhcpUndoRequestParams( [in] DWORD Flags, [in] LPVOID Reserved, [in] LPWSTR AdapterName, [in] LPWSTR RequestIdStr );",
            "name": "DhcpUndoRequestParams"
        }
    ],
    "Dhcpsapi.h": [
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpAddFilterV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_FILTER_ADD_INFO *AddFilterInfo, [in] BOOL ForceFlag );",
            "name": "DhcpAddFilterV4"
        },
        {
            "signature": "DWORD DhcpAddServer( [in] DWORD Flags, [in] LPVOID IdInfo, [in] LPDHCP_SERVER_INFO NewServer, [in] LPVOID CallbackFn, [in] LPVOID CallbackData );",
            "name": "DhcpAddServer"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpAddSubnetElement( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA *AddElementInfo );",
            "name": "DhcpAddSubnetElement"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpAddSubnetElementV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA_V4 *AddElementInfo );",
            "name": "DhcpAddSubnetElementV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpAddSubnetElementV5( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA_V5 *AddElementInfo );",
            "name": "DhcpAddSubnetElementV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpAddSubnetElementV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] LPDHCP_SUBNET_ELEMENT_DATA_V6 AddElementInfo );",
            "name": "DhcpAddSubnetElementV6"
        },
        {
            "signature": "DWORD DhcpAuditLogGetParams( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [out] LPWSTR *AuditLogDir, [out] DWORD *DiskCheckInterval, [out] DWORD *MaxLogFilesSize, [out] DWORD *MinSpaceOnDisk );",
            "name": "DhcpAuditLogGetParams"
        },
        {
            "signature": "DWORD DhcpAuditLogSetParams( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPWSTR AuditLogDir, [in] DWORD DiskCheckInterval, [in] DWORD MaxLogFilesSize, [in] DWORD MinSpaceOnDisk );",
            "name": "DhcpAuditLogSetParams"
        },
        {
            "signature": "DWORD DhcpCreateClass( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPDHCP_CLASS_INFO ClassInfo );",
            "name": "DhcpCreateClass"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateClassV6( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPDHCP_CLASS_INFO_V6 ClassInfo );",
            "name": "DhcpCreateClassV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateClientInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO *ClientInfo );",
            "name": "DhcpCreateClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateClientInfoV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO_V4 *ClientInfo );",
            "name": "DhcpCreateClientInfoV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateClientInfoVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO_VQ *ClientInfo );",
            "name": "DhcpCreateClientInfoVQ"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateOption( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [in] DHCP_CONST DHCP_OPTION *OptionInfo );",
            "name": "DhcpCreateOption"
        },
        {
            "signature": "DWORD DhcpCreateOptionV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionId, [in, optional] LPWSTR ClassName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION OptionInfo );",
            "name": "DhcpCreateOptionV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateOptionV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionId, [in, optional] LPWSTR ClassName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION OptionInfo );",
            "name": "DhcpCreateOptionV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateSubnet( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_INFO *SubnetInfo );",
            "name": "DhcpCreateSubnet"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateSubnetV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] LPDHCP_SUBNET_INFO_V6 SubnetInfo );",
            "name": "DhcpCreateSubnetV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpCreateSubnetVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_INFO_VQ *SubnetInfo );",
            "name": "DhcpCreateSubnetVQ"
        },
        {
            "signature": "DWORD DhcpDeleteClass( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPWSTR ClassName );",
            "name": "DhcpDeleteClass"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteClassV6( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPWSTR ClassName );",
            "name": "DhcpDeleteClassV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteClientInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *ClientInfo );",
            "name": "DhcpDeleteClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteClientInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO_V6 *ClientInfo );",
            "name": "DhcpDeleteClientInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteFilterV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_ADDR_PATTERN *DeleteFilterInfo );",
            "name": "DhcpDeleteFilterV4"
        },
        {
            "signature": "DWORD DhcpDeleteServer( [in] DWORD Flags, [in] LPVOID IdInfo, [in] LPDHCP_SERVER_INFO NewServer, [in] LPVOID CallbackFn, [in] LPVOID CallbackData );",
            "name": "DhcpDeleteServer"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteSubnet( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpDeleteSubnet"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpDeleteSubnetV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpDeleteSubnetV6"
        },
        {
            "signature": "DWORD DhcpDeleteSuperScopeV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST LPWSTR SuperScopeName );",
            "name": "DhcpDeleteSuperScopeV4"
        },
        {
            "signature": "void DhcpDsCleanup();",
            "name": "DhcpDsCleanup"
        },
        {
            "signature": "DWORD DhcpDsInit();",
            "name": "DhcpDsInit"
        },
        {
            "signature": "DWORD DhcpEnumClasses( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLASS_INFO_ARRAY *ClassInfoArray, [out] DWORD *nRead, [out] DWORD *nTotal );",
            "name": "DhcpEnumClasses"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumClassesV6( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLASS_INFO_ARRAY_V6 *ClassInfoArray, [out] DWORD *nRead, [out] DWORD *nTotal );",
            "name": "DhcpEnumClassesV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumFilterV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in, out] LPDHCP_ADDR_PATTERN ResumeHandle, [in] DWORD PreferredMaximum, [in] DHCP_FILTER_LIST_TYPE ListType, [out] LPDHCP_FILTER_ENUM_INFO *EnumFilterInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumFilterV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumOptions( [in] DHCP_CONST WCHAR *ServerIpAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_ARRAY *Options, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptions"
        },
        {
            "signature": "DWORD DhcpEnumOptionsV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_ARRAY *Options, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptionsV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumOptionsV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_ARRAY *Options, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptionsV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumOptionValues( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_OPTION_SCOPE_INFO *ScopeInfo, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_VALUE_ARRAY *OptionValues, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptionValues"
        },
        {
            "signature": "DWORD DhcpEnumOptionValuesV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_VALUE_ARRAY *OptionValues, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptionValuesV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumOptionValuesV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DWORD Flags, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_OPTION_VALUE_ARRAY *OptionValues, [out] DWORD *OptionsRead, [out] DWORD *OptionsTotal );",
            "name": "DhcpEnumOptionValuesV6"
        },
        {
            "signature": "DWORD DhcpEnumServers( [in] DWORD Flags, [in] LPVOID IdInfo, [out] LPDHCP_SERVER_INFO_ARRAY *Servers, [in] LPVOID CallbackFn, [in] LPVOID CallbackData );",
            "name": "DhcpEnumServers"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClients( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_ARRAY *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClients"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClientsFilterStatusInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_FILTER_STATUS_INFO_ARRAY *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClientsFilterStatusInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClientsV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_ARRAY_V4 *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClientsV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClientsV5( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_ARRAY_V5 *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClientsV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClientsV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_IPV6_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_ARRAY_V6 *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClientsV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetClientsVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_ARRAY_VQ *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpEnumSubnetClientsVQ"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetElements( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_SUBNET_ELEMENT_TYPE EnumElementType, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_SUBNET_ELEMENT_INFO_ARRAY *EnumElementInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnetElements"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetElementsV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_SUBNET_ELEMENT_TYPE EnumElementType, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_SUBNET_ELEMENT_INFO_ARRAY_V4 *EnumElementInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnetElementsV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetElementsV5( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_SUBNET_ELEMENT_TYPE EnumElementType, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_SUBNET_ELEMENT_INFO_ARRAY_V5 *EnumElementInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnetElementsV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetElementsV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] DHCP_SUBNET_ELEMENT_TYPE_V6 EnumElementType, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_SUBNET_ELEMENT_INFO_ARRAY_V6 *EnumElementInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnetElementsV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnets( [in] DHCP_CONST WCHAR *ServerIpAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_IP_ARRAY *EnumInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnets"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpEnumSubnetsV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCPV6_IP_ARRAY *EnumInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpEnumSubnetsV6"
        },
        {
            "signature": "DWORD DhcpGetAllOptions( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [out] LPDHCP_ALL_OPTIONS *OptionStruct );",
            "name": "DhcpGetAllOptions"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetAllOptionsV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [out] LPDHCP_ALL_OPTIONS *OptionStruct );",
            "name": "DhcpGetAllOptionsV6"
        },
        {
            "signature": "DWORD DhcpGetAllOptionValues( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [out] LPDHCP_ALL_OPTION_VALUES *Values );",
            "name": "DhcpGetAllOptionValues"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetAllOptionValuesV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [out] LPDHCP_ALL_OPTION_VALUES *Values );",
            "name": "DhcpGetAllOptionValuesV6"
        },
        {
            "signature": "DWORD DhcpGetClassInfo( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPDHCP_CLASS_INFO PartialClassInfo, [out] LPDHCP_CLASS_INFO *FilledClassInfo );",
            "name": "DhcpGetClassInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetClientInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *SearchInfo, [out] LPDHCP_CLIENT_INFO *ClientInfo );",
            "name": "DhcpGetClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetClientInfoV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *SearchInfo, [out] LPDHCP_CLIENT_INFO_V4 *ClientInfo );",
            "name": "DhcpGetClientInfoV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetClientInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO_V6 *SearchInfo, [out] LPDHCP_CLIENT_INFO_V6 *ClientInfo );",
            "name": "DhcpGetClientInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetClientInfoVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *SearchInfo, [out] LPDHCP_CLIENT_INFO_VQ *ClientInfo );",
            "name": "DhcpGetClientInfoVQ"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetClientOptions( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS ClientIpAddress, [in] DHCP_IP_MASK ClientSubnetMask, [out] LPDHCP_OPTION_LIST *ClientOptions );",
            "name": "DhcpGetClientOptions"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetFilterV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] DHCP_FILTER_GLOBAL_INFO *GlobalFilterInfo );",
            "name": "DhcpGetFilterV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetMibInfoV5( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_MIB_INFO_V5 *MibInfo );",
            "name": "DhcpGetMibInfoV5"
        },
        {
            "signature": "DWORD DhcpGetMibInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_MIB_INFO_V6 *MibInfo );",
            "name": "DhcpGetMibInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetOptionInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [out] LPDHCP_OPTION *OptionInfo );",
            "name": "DhcpGetOptionInfo"
        },
        {
            "signature": "DWORD DhcpGetOptionInfoV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [out] LPDHCP_OPTION *OptionInfo );",
            "name": "DhcpGetOptionInfoV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetOptionInfoV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [out] LPDHCP_OPTION *OptionInfo );",
            "name": "DhcpGetOptionInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetOptionValue( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [in] DHCP_CONST DHCP_OPTION_SCOPE_INFO *ScopeInfo, [out] LPDHCP_OPTION_VALUE *OptionValue );",
            "name": "DhcpGetOptionValue"
        },
        {
            "signature": "DWORD DhcpGetOptionValueV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [out] LPDHCP_OPTION_VALUE *OptionValue );",
            "name": "DhcpGetOptionValueV5"
        },
        {
            "signature": "DWORD DhcpGetOptionValueV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [out] LPDHCP_OPTION_VALUE *OptionValue );",
            "name": "DhcpGetOptionValueV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetServerBindingInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] ULONG Flags, [out] LPDHCP_BIND_ELEMENT_ARRAY *BindElementsInfo );",
            "name": "DhcpGetServerBindingInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetServerBindingInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] ULONG Flags, [out] LPDHCPV6_BIND_ELEMENT_ARRAY *BindElementsInfo );",
            "name": "DhcpGetServerBindingInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetServerSpecificStrings( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_SERVER_SPECIFIC_STRINGS *ServerSpecificStrings );",
            "name": "DhcpGetServerSpecificStrings"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetSubnetDelayOffer( [in] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [out] USHORT *TimeDelayInMilliseconds );",
            "name": "DhcpGetSubnetDelayOffer"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetSubnetInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [out] LPDHCP_SUBNET_INFO *SubnetInfo );",
            "name": "DhcpGetSubnetInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetSubnetInfoV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [out] LPDHCP_SUBNET_INFO_V6 *SubnetInfo );",
            "name": "DhcpGetSubnetInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetSubnetInfoVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [out] LPDHCP_SUBNET_INFO_VQ *SubnetInfo );",
            "name": "DhcpGetSubnetInfoVQ"
        },
        {
            "signature": "DWORD DhcpGetSuperScopeInfoV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_SUPER_SCOPE_TABLE *SuperScopeTable );",
            "name": "DhcpGetSuperScopeInfoV4"
        },
        {
            "signature": "DWORD DhcpGetThreadOptions( [out] LPDWORD pFlags, [out] LPVOID Reserved );",
            "name": "DhcpGetThreadOptions"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpGetVersion( [in] LPWSTR ServerIpAddress, [out] LPDWORD MajorVersion, [out] LPDWORD MinorVersion );",
            "name": "DhcpGetVersion"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprAddV4PolicyCondition( [in, out] LPDHCP_POLICY Policy, [in] DWORD ParentExpr, [in] DHCP_POL_ATTR_TYPE Type, [in] DWORD OptionID, [in] DWORD SubOptionID, [in] LPWSTR VendorName, [in] DHCP_POL_COMPARATOR Operator, LPBYTE Value, [in] DWORD ValueLength, [out] DWORD *ConditionIndex );",
            "name": "DhcpHlprAddV4PolicyCondition"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprAddV4PolicyExpr( [in, out] LPDHCP_POLICY Policy, [in] DWORD ParentExpr, [in] DHCP_POL_LOGIC_OPER Operator, [out] DWORD *ExprIndex );",
            "name": "DhcpHlprAddV4PolicyExpr"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprAddV4PolicyRange( [in, out] LPDHCP_POLICY Policy, [in] LPDHCP_IP_RANGE Range );",
            "name": "DhcpHlprAddV4PolicyRange"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprCreateV4Policy( [in] LPWSTR PolicyName, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS Subnet, [in] DWORD ProcessingOrder, [in] DHCP_POL_LOGIC_OPER RootOperator, [in] LPWSTR Description, [in] BOOL Enabled, [out] LPDHCP_POLICY *Policy );",
            "name": "DhcpHlprCreateV4Policy"
        },
        {
            "signature": "VOID DHCP_API_FUNCTION DhcpHlprFreeV4Policy( [in, out] LPDHCP_POLICY Policy );",
            "name": "DhcpHlprFreeV4Policy"
        },
        {
            "signature": "BOOL DHCP_API_FUNCTION DhcpHlprIsV4PolicySingleUC( [in] LPDHCP_POLICY Policy );",
            "name": "DhcpHlprIsV4PolicySingleUC"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprIsV4PolicyValid( [in] LPDHCP_POLICY pPolicy );",
            "name": "DhcpHlprIsV4PolicyValid"
        },
        {
            "signature": "BOOL DHCP_API_FUNCTION DhcpHlprIsV4PolicyWellFormed( [in] LPDHCP_POLICY pPolicy );",
            "name": "DhcpHlprIsV4PolicyWellFormed"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprModifyV4PolicyExpr( [in, out] LPDHCP_POLICY Policy, [in] DHCP_POL_LOGIC_OPER Operator );",
            "name": "DhcpHlprModifyV4PolicyExpr"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpHlprResetV4PolicyExpr( [in, out] LPDHCP_POLICY Policy );",
            "name": "DhcpHlprResetV4PolicyExpr"
        },
        {
            "signature": "DWORD DhcpModifyClass( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPDHCP_CLASS_INFO ClassInfo );",
            "name": "DhcpModifyClass"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpModifyClassV6( [in] LPWSTR ServerIpAddress, [in] DWORD ReservedMustBeZero, [in] LPDHCP_CLASS_INFO_V6 ClassInfo );",
            "name": "DhcpModifyClassV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveOption( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID );",
            "name": "DhcpRemoveOption"
        },
        {
            "signature": "DWORD DhcpRemoveOptionV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName );",
            "name": "DhcpRemoveOptionV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveOptionV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName );",
            "name": "DhcpRemoveOptionV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveOptionValue( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [in] DHCP_CONST DHCP_OPTION_SCOPE_INFO *ScopeInfo );",
            "name": "DhcpRemoveOptionValue"
        },
        {
            "signature": "DWORD DhcpRemoveOptionValueV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo );",
            "name": "DhcpRemoveOptionValueV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveOptionValueV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo );",
            "name": "DhcpRemoveOptionValueV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveSubnetElement( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA *RemoveElementInfo, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpRemoveSubnetElement"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveSubnetElementV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA_V4 *RemoveElementInfo, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpRemoveSubnetElementV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveSubnetElementV5( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_ELEMENT_DATA_V5 *RemoveElementInfo, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpRemoveSubnetElementV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpRemoveSubnetElementV6( [in] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] LPDHCP_SUBNET_ELEMENT_DATA_V6 RemoveElementInfo, [in] DHCP_FORCE_FLAG ForceFlag );",
            "name": "DhcpRemoveSubnetElementV6"
        },
        {
            "signature": "VOID DHCP_API_FUNCTION DhcpRpcFreeMemory( PVOID BufferPointer );",
            "name": "DhcpRpcFreeMemory"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpScanDatabase( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DWORD FixFlag, [out] LPDHCP_SCAN_LIST *ScanList );",
            "name": "DhcpScanDatabase"
        },
        {
            "signature": "DWORD DhcpServerBackupDatabase( [in] LPWSTR ServerIpAddress, [in] LPWSTR Path );",
            "name": "DhcpServerBackupDatabase"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerGetConfig( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_SERVER_CONFIG_INFO *ConfigInfo );",
            "name": "DhcpServerGetConfig"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerGetConfigV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_SERVER_CONFIG_INFO_V4 *ConfigInfo );",
            "name": "DhcpServerGetConfigV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerGetConfigV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [out] LPDHCP_SERVER_CONFIG_INFO_V6 *ConfigInfo );",
            "name": "DhcpServerGetConfigV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerGetConfigVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [out] LPDHCP_SERVER_CONFIG_INFO_VQ *ConfigInfo );",
            "name": "DhcpServerGetConfigVQ"
        },
        {
            "signature": "DWORD DhcpServerQueryAttribute( [in] LPWSTR ServerIpAddr, [in] ULONG dwReserved, [in] DHCP_ATTRIB_ID DhcpAttribId, [out] LPDHCP_ATTRIB *pDhcpAttrib );",
            "name": "DhcpServerQueryAttribute"
        },
        {
            "signature": "DWORD DhcpServerQueryAttributes( [in] LPWSTR ServerIpAddr, [in] ULONG dwReserved, [in] ULONG dwAttribCount, [in] DHCP_ATTRIB_ID [] pDhcpAttribs, [out] LPDHCP_ATTRIB_ARRAY *pDhcpAttribArr );",
            "name": "DhcpServerQueryAttributes"
        },
        {
            "signature": "DWORD DhcpServerQueryDnsRegCredentials( [in] LPWSTR ServerIpAddress, [in] ULONG UnameSize, [out] LPWSTR Uname, [in] ULONG DomainSize, [out] LPWSTR Domain );",
            "name": "DhcpServerQueryDnsRegCredentials"
        },
        {
            "signature": "DWORD DhcpServerRedoAuthorization( [in] LPWSTR ServerIpAddr, [in] ULONG dwReserved );",
            "name": "DhcpServerRedoAuthorization"
        },
        {
            "signature": "DWORD DhcpServerRestoreDatabase( [in] LPWSTR ServerIpAddress, [in] LPWSTR Path );",
            "name": "DhcpServerRestoreDatabase"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerSetConfig( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DWORD FieldsToSet, [in] LPDHCP_SERVER_CONFIG_INFO ConfigInfo );",
            "name": "DhcpServerSetConfig"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerSetConfigV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DWORD FieldsToSet, [in] LPDHCP_SERVER_CONFIG_INFO_V4 ConfigInfo );",
            "name": "DhcpServerSetConfigV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerSetConfigV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [in] DWORD FieldsToSet, [in] LPDHCP_SERVER_CONFIG_INFO_V6 ConfigInfo );",
            "name": "DhcpServerSetConfigV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpServerSetConfigVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DWORD FieldsToSet, [in] LPDHCP_SERVER_CONFIG_INFO_VQ ConfigInfo );",
            "name": "DhcpServerSetConfigVQ"
        },
        {
            "signature": "DWORD DhcpServerSetDnsRegCredentialsV5( [in] LPWSTR ServerIpAddress, [in] LPWSTR Uname, [in] LPWSTR Domain, [in] LPWSTR Passwd );",
            "name": "DhcpServerSetDnsRegCredentialsV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetClientInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO *ClientInfo );",
            "name": "DhcpSetClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetClientInfoV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO_V4 *ClientInfo );",
            "name": "DhcpSetClientInfoV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetClientInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO_V6 *ClientInfo );",
            "name": "DhcpSetClientInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetClientInfoVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_CLIENT_INFO_VQ *ClientInfo );",
            "name": "DhcpSetClientInfoVQ"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetFilterV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_FILTER_GLOBAL_INFO *GlobalFilterInfo );",
            "name": "DhcpSetFilterV4"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetOptionInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [in] DHCP_CONST DHCP_OPTION *OptionInfo );",
            "name": "DhcpSetOptionInfo"
        },
        {
            "signature": "DWORD DhcpSetOptionInfoV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION OptionInfo );",
            "name": "DhcpSetOptionInfoV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetOptionInfoV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION OptionInfo );",
            "name": "DhcpSetOptionInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetOptionValue( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_OPTION_ID OptionID, [in] DHCP_CONST DHCP_OPTION_SCOPE_INFO *ScopeInfo, [in] DHCP_CONST DHCP_OPTION_DATA *OptionValue );",
            "name": "DhcpSetOptionValue"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetOptionValues( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_OPTION_SCOPE_INFO *ScopeInfo, [in] DHCP_CONST DHCP_OPTION_VALUE_ARRAY *OptionValues );",
            "name": "DhcpSetOptionValues"
        },
        {
            "signature": "DWORD DhcpSetOptionValuesV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [in] LPDHCP_OPTION_VALUE_ARRAY OptionValues );",
            "name": "DhcpSetOptionValuesV5"
        },
        {
            "signature": "DWORD DhcpSetOptionValueV5( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionId, [in, optional] LPWSTR ClassName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [in] LPDHCP_OPTION_DATA OptionValue );",
            "name": "DhcpSetOptionValueV5"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetOptionValueV6( [in] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionId, [in] LPWSTR ClassName, [in] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO6 ScopeInfo, [in] LPDHCP_OPTION_DATA OptionValue );",
            "name": "DhcpSetOptionValueV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetServerBindingInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] ULONG Flags, [in] LPDHCP_BIND_ELEMENT_ARRAY BindElementInfo );",
            "name": "DhcpSetServerBindingInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetServerBindingInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] ULONG Flags, [in] LPDHCPV6_BIND_ELEMENT_ARRAY BindElementInfo );",
            "name": "DhcpSetServerBindingInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetSubnetDelayOffer( [in] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] USHORT TimeDelayInMilliseconds );",
            "name": "DhcpSetSubnetDelayOffer"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetSubnetInfo( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_INFO *SubnetInfo );",
            "name": "DhcpSetSubnetInfo"
        },
        {
            "signature": "DWORD DhcpSetSubnetInfoV6( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] LPDHCP_SUBNET_INFO_V6 SubnetInfo );",
            "name": "DhcpSetSubnetInfoV6"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpSetSubnetInfoVQ( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] DHCP_CONST DHCP_SUBNET_INFO_VQ *SubnetInfo );",
            "name": "DhcpSetSubnetInfoVQ"
        },
        {
            "signature": "DWORD DhcpSetSuperScopeV4( [in] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_IP_ADDRESS SubnetAddress, [in, optional] DHCP_CONST LPWSTR SuperScopeName, [in] DHCP_CONST BOOL ChangeExisting );",
            "name": "DhcpSetSuperScopeV4"
        },
        {
            "signature": "DWORD DhcpSetThreadOptions( [in] DWORD Flags, [in] LPVOID Reserved );",
            "name": "DhcpSetThreadOptions"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4AddPolicyRange( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] LPWSTR PolicyName, [in] LPDHCP_IP_RANGE Range );",
            "name": "DhcpV4AddPolicyRange"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4CreateClientInfo( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST LPDHCP_CLIENT_INFO_PB ClientInfo );",
            "name": "DhcpV4CreateClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4CreatePolicy( [in, optional] LPWSTR ServerIpAddress, [in] LPDHCP_POLICY pPolicy );",
            "name": "DhcpV4CreatePolicy"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4DeletePolicy( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [in] LPWSTR PolicyName );",
            "name": "DhcpV4DeletePolicy"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4EnumPolicies( [in, optional] LPWSTR ServerIpAddress, [in, out] LPDWORD ResumeHandle, [in] DWORD PreferredMaximum, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [out] LPDHCP_POLICY_ARRAY *EnumInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpV4EnumPolicies"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4EnumSubnetClients( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_CLIENT_INFO_PB_ARRAY *ClientInfo, [out] DWORD *ClientsRead, [out] DWORD *ClientsTotal );",
            "name": "DhcpV4EnumSubnetClients"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4EnumSubnetReservations( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_RESERVATION_INFO_ARRAY *EnumElementInfo, [out] DWORD *ElementsRead, [out] DWORD *ElementsTotal );",
            "name": "DhcpV4EnumSubnetReservations"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverAddScopeToRelationship( [in, optional] LPWSTR ServerIpAddress, [in] LPDHCP_FAILOVER_RELATIONSHIP pRelationship );",
            "name": "DhcpV4FailoverAddScopeToRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverCreateRelationship( [in, optional] LPWSTR ServerIpAddress, [in] LPDHCP_FAILOVER_RELATIONSHIP pRelationship );",
            "name": "DhcpV4FailoverCreateRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverDeleteRelationship( [in, optional] LPWSTR ServerIpAddress, [in] LPWSTR pRelationshipName );",
            "name": "DhcpV4FailoverDeleteRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverDeleteScopeFromRelationship( [in, optional] LPWSTR ServerIpAddress, [in] LPDHCP_FAILOVER_RELATIONSHIP pRelationship );",
            "name": "DhcpV4FailoverDeleteScopeFromRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverEnumRelationship( [in, optional] LPWSTR ServerIpAddress, [in, out] DHCP_RESUME_HANDLE *ResumeHandle, [in] DWORD PreferredMaximum, [out] LPDHCP_FAILOVER_RELATIONSHIP_ARRAY *pRelationship, [out] LPDWORD RelationshipRead, [out] LPDWORD RelationshipTotal );",
            "name": "DhcpV4FailoverEnumRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetAddressStatus( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in, out] LPDWORD pStatus );",
            "name": "DhcpV4FailoverGetAddressStatus"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetClientInfo( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *SearchInfo, [out] LPDHCPV4_FAILOVER_CLIENT_INFO *ClientInfo );",
            "name": "DhcpV4FailoverGetClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetRelationship( [in, optional] LPWSTR ServerIpAddress, [in] LPWSTR pRelationshipName, [out] LPDHCP_FAILOVER_RELATIONSHIP *pRelationship );",
            "name": "DhcpV4FailoverGetRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetScopeRelationship( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS ScopeId, [out] LPDHCP_FAILOVER_RELATIONSHIP *pRelationship );",
            "name": "DhcpV4FailoverGetScopeRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetScopeStatistics( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS ScopeId, [out] LPDHCP_FAILOVER_STATISTICS *pStats );",
            "name": "DhcpV4FailoverGetScopeStatistics"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverGetSystemTime( [in, optional] LPWSTR ServerIpAddress, [out] LPDWORD pTime, LPDWORD pMaxAllowedDeltaTime );",
            "name": "DhcpV4FailoverGetSystemTime"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverSetRelationship( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPDHCP_FAILOVER_RELATIONSHIP pRelationship );",
            "name": "DhcpV4FailoverSetRelationship"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4FailoverTriggerAddrAllocation( [in, optional] LPWSTR ServerIpAddress, [in] LPWSTR pFailRelName );",
            "name": "DhcpV4FailoverTriggerAddrAllocation"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4GetAllOptionValues( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [out] LPDHCP_ALL_OPTION_VALUES_PB *Values );",
            "name": "DhcpV4GetAllOptionValues"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4GetClientInfo( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST DHCP_SEARCH_INFO *SearchInfo, [out] LPDHCP_CLIENT_INFO_PB *ClientInfo );",
            "name": "DhcpV4GetClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4GetFreeIPAddress( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS ScopeId, [in] DHCP_IP_ADDRESS StartIP, [in] DHCP_IP_ADDRESS EndIP, [in] DWORD NumFreeAddrReq, [out] LPDHCP_IP_ARRAY *IPAddrList );",
            "name": "DhcpV4GetFreeIPAddress"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4GetOptionValue( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in, optional] LPWSTR PolicyName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [out] LPDHCP_OPTION_VALUE *OptionValue );",
            "name": "DhcpV4GetOptionValue"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4GetPolicy( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [in] LPWSTR PolicyName, [out] LPDHCP_POLICY *Policy );",
            "name": "DhcpV4GetPolicy"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4QueryPolicyEnforcement( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [out] BOOL *Enabled );",
            "name": "DhcpV4QueryPolicyEnforcement"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4RemoveOptionValue( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionID, [in, optional] LPWSTR PolicyName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo );",
            "name": "DhcpV4RemoveOptionValue"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4RemovePolicyRange( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IP_ADDRESS SubnetAddress, [in] LPWSTR PolicyName, [in] LPDHCP_IP_RANGE Range );",
            "name": "DhcpV4RemovePolicyRange"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4SetOptionValue( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in] DHCP_OPTION_ID OptionId, [in, optional] LPWSTR PolicyName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [in] LPDHCP_OPTION_DATA OptionValue );",
            "name": "DhcpV4SetOptionValue"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4SetOptionValues( [in, optional] LPWSTR ServerIpAddress, [in] DWORD Flags, [in, optional] LPWSTR PolicyName, [in, optional] LPWSTR VendorName, [in] LPDHCP_OPTION_SCOPE_INFO ScopeInfo, [in] LPDHCP_OPTION_VALUE_ARRAY OptionValues );",
            "name": "DhcpV4SetOptionValues"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4SetPolicy( [in, optional] LPWSTR ServerIpAddress, [in] DWORD FieldsModified, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [in] LPWSTR PolicyName, [in] LPDHCP_POLICY Policy );",
            "name": "DhcpV4SetPolicy"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV4SetPolicyEnforcement( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fGlobalPolicy, [in] DHCP_IP_ADDRESS SubnetAddress, [in] BOOL Enable );",
            "name": "DhcpV4SetPolicyEnforcement"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV6CreateClientInfo( [in, optional] DHCP_CONST WCHAR *ServerIpAddress, [in] DHCP_CONST LPDHCP_CLIENT_INFO_V6 ClientInfo );",
            "name": "DhcpV6CreateClientInfo"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV6GetFreeIPAddress( [in, optional] LPWSTR ServerIpAddress, [in] DHCP_IPV6_ADDRESS ScopeId, [in] DHCP_IPV6_ADDRESS StartIP, [in] DHCP_IPV6_ADDRESS EndIP, [in] DWORD NumFreeAddrReq, [out] LPDHCPV6_IP_ARRAY *IPAddrList );",
            "name": "DhcpV6GetFreeIPAddress"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV6GetStatelessStatistics( [in, optional] LPWSTR ServerIpAddress, [out] LPDHCPV6_STATELESS_STATS *StatelessStats );",
            "name": "DhcpV6GetStatelessStatistics"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV6GetStatelessStoreParams( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fServerLevel, [in] DHCP_IPV6_ADDRESS SubnetAddress, [out] LPDHCPV6_STATELESS_PARAMS *Params );",
            "name": "DhcpV6GetStatelessStoreParams"
        },
        {
            "signature": "DWORD DHCP_API_FUNCTION DhcpV6SetStatelessStoreParams( [in, optional] LPWSTR ServerIpAddress, [in] BOOL fServerLevel, [in] DHCP_IPV6_ADDRESS SubnetAddress, [in] DWORD FieldModified, [in] LPDHCPV6_STATELESS_PARAMS Params );",
            "name": "DhcpV6SetStatelessStoreParams"
        }
    ],
    "Dhcpssdk.h": [
        {
            "signature": "LPDHCP_CONTROL LpdhcpControl; DWORD LpdhcpControl( [in] DWORD dwControlCode, [in] LPVOID lpReserved ) {...}",
            "name": "LPDHCP_CONTROL callback"
        },
        {
            "signature": "LPDHCP_DELETE_CLIENT LpdhcpDeleteClient; DWORD LpdhcpDeleteClient( [in] DWORD IpAddress, [in] LPBYTE HwAddress, [in] ULONG HwAddressLength, [in] DWORD Reserved, [in] DWORD ClientType ) {...}",
            "name": "LPDHCP_DELETE_CLIENT callback"
        },
        {
            "signature": "LPDHCP_DROP_SEND LpdhcpDropSend; DWORD LpdhcpDropSend( [in, out] LPBYTE *Packet, [in, out] DWORD *PacketSize, [in] DWORD ControlCode, [in] DWORD IpAddress, [in] LPVOID Reserved, [in] LPVOID PktContext ) {...}",
            "name": "LPDHCP_DROP_SEND callback"
        },
        {
            "signature": "LPDHCP_ENTRY_POINT_FUNC LpdhcpEntryPointFunc; DWORD LpdhcpEntryPointFunc( [in] LPWSTR ChainDlls, [in] DWORD CalloutVersion, [out] LPDHCP_CALLOUT_TABLE CalloutTbl ) {...}",
            "name": "LPDHCP_ENTRY_POINT_FUNC callback"
        },
        {
            "signature": "LPDHCP_GIVE_ADDRESS LpdhcpGiveAddress; DWORD LpdhcpGiveAddress( [in] LPBYTE Packet, [in] DWORD PacketSize, [in] DWORD ControlCode, [in] DWORD IpAddress, [in] DWORD AltAddress, [in] DWORD AddrType, [in] DWORD LeaseTime, [in] LPVOID Reserved, [in] LPVOID PktContext ) {...}",
            "name": "LPDHCP_GIVE_ADDRESS callback"
        },
        {
            "signature": "LPDHCP_HANDLE_OPTIONS LpdhcpHandleOptions; DWORD LpdhcpHandleOptions( [in] LPBYTE Packet, [in] DWORD PacketSize, [in] LPVOID Reserved, [in] LPVOID PktContext, [in, out] LPDHCP_SERVER_OPTIONS ServerOptions ) {...}",
            "name": "LPDHCP_HANDLE_OPTIONS callback"
        },
        {
            "signature": "LPDHCP_NEWPKT LpdhcpNewpkt; DWORD LpdhcpNewpkt( [in, out] LPBYTE *Packet, [in, out] DWORD *PacketSize, [in] DWORD IpAddress, [in] LPVOID Reserved, [in, out] LPVOID *PktContext, [out] LPBOOL ProcessIt ) {...}",
            "name": "LPDHCP_NEWPKT callback"
        },
        {
            "signature": "LPDHCP_PROB LpdhcpProb; DWORD LpdhcpProb( [in] LPBYTE Packet, [in] DWORD PacketSize, [in] DWORD ControlCode, [in] DWORD IpAddress, [in] DWORD AltAddress, [in] LPVOID Reserved, [in] LPVOID PktContext ) {...}",
            "name": "LPDHCP_PROB callback"
        }
    ],
    "Dhcpv6csdk.h": [
        {
            "signature": "void Dhcpv6CApiCleanup();",
            "name": "Dhcpv6CApiCleanup"
        },
        {
            "signature": "void Dhcpv6CApiInitialize( [out] LPDWORD Version );",
            "name": "Dhcpv6CApiInitialize"
        },
        {
            "signature": "DWORD Dhcpv6ReleasePrefix( [in] LPWSTR adapterName, [in] LPDHCPV6CAPI_CLASSID classId, [in] LPDHCPV6PrefixLeaseInformation leaseInfo );",
            "name": "Dhcpv6ReleasePrefix"
        },
        {
            "signature": "DWORD Dhcpv6RenewPrefix( [in] LPWSTR adapterName, [in] LPDHCPV6CAPI_CLASSID pclassId, [in, out] LPDHCPV6PrefixLeaseInformation prefixleaseInfo, [out] DWORD *pdwTimeToWait, [in] DWORD bValidatePrefix );",
            "name": "Dhcpv6RenewPrefix"
        },
        {
            "signature": "DWORD Dhcpv6RequestParams( BOOL forceNewInform, LPVOID reserved, LPWSTR adapterName, LPDHCPV6CAPI_CLASSID classId, DHCPV6CAPI_PARAMS_ARRAY recdParams, LPBYTE buffer, LPDWORD pSize );",
            "name": "Dhcpv6RequestParams"
        },
        {
            "signature": "DWORD Dhcpv6RequestPrefix( [in] LPWSTR adapterName, [in] LPDHCPV6CAPI_CLASSID pclassId, [in, out] LPDHCPV6PrefixLeaseInformation prefixleaseInfo, [out] DWORD *pdwTimeToWait );",
            "name": "Dhcpv6RequestPrefix"
        }
    ],
    "Diagnosticdataquery.h": [
        {
            "signature": "HRESULT DdqCancelDiagnosticRecordOperation( HDIAGNOSTIC_DATA_QUERY_SESSION hSession );",
            "name": "DdqCancelDiagnosticRecordOperation"
        },
        {
            "signature": "HRESULT DdqCloseSession( HDIAGNOSTIC_DATA_QUERY_SESSION hSession );",
            "name": "DdqCloseSession"
        },
        {
            "signature": "HRESULT DdqCreateSession( DdqAccessLevel accessLevel, HDIAGNOSTIC_DATA_QUERY_SESSION *hSession );",
            "name": "DdqCreateSession"
        },
        {
            "signature": "HRESULT DdqExtractDiagnosticReport( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, PCWSTR reportKey, PCWSTR destinationPath );",
            "name": "DdqExtractDiagnosticReport"
        },
        {
            "signature": "HRESULT DdqFreeDiagnosticRecordLocaleTags( HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription );",
            "name": "DdqFreeDiagnosticRecordLocaleTags"
        },
        {
            "signature": "HRESULT DdqFreeDiagnosticRecordPage( HDIAGNOSTIC_RECORD hRecord );",
            "name": "DdqFreeDiagnosticRecordPage"
        },
        {
            "signature": "HRESULT DdqFreeDiagnosticRecordProducerCategories( HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription );",
            "name": "DdqFreeDiagnosticRecordProducerCategories"
        },
        {
            "signature": "HRESULT DdqFreeDiagnosticRecordProducers( HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription );",
            "name": "DdqFreeDiagnosticRecordProducers"
        },
        {
            "signature": "HRESULT DdqFreeDiagnosticReport( HDIAGNOSTIC_REPORT hReport );",
            "name": "DdqFreeDiagnosticReport"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticDataAccessLevelAllowed( DdqAccessLevel *accessLevel );",
            "name": "DdqGetDiagnosticDataAccessLevelAllowed"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordAtIndex( HDIAGNOSTIC_RECORD hRecord, UINT32 index, DIAGNOSTIC_DATA_RECORD *record );",
            "name": "DdqGetDiagnosticRecordAtIndex"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordBinaryDistribution( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR *producerNames, UINT32 producerNameCount, UINT32 topNBinaries, DIAGNOSTIC_DATA_EVENT_BINARY_STATS **binaryStats, UINT32 *statCount );",
            "name": "DdqGetDiagnosticRecordBinaryDistribution"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordCategoryAtIndex( HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION *categoryDescription );",
            "name": "DdqGetDiagnosticRecordCategoryAtIndex"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordCategoryCount( HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION hCategoryDescription, UINT32 *categoryDescriptionCount );",
            "name": "DdqGetDiagnosticRecordCategoryCount"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordCount( HDIAGNOSTIC_RECORD hRecord, UINT32 *recordCount );",
            "name": "DdqGetDiagnosticRecordCount"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordLocaleTagAtIndex( HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION *tagDescription );",
            "name": "DdqGetDiagnosticRecordLocaleTagAtIndex"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordLocaleTagCount( HDIAGNOSTIC_EVENT_TAG_DESCRIPTION hTagDescription, UINT32 *tagDescriptionCount );",
            "name": "DdqGetDiagnosticRecordLocaleTagCount"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordLocaleTags( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR locale, HDIAGNOSTIC_EVENT_TAG_DESCRIPTION *hTagDescription );",
            "name": "DdqGetDiagnosticRecordLocaleTags"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordPage( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_SEARCH_CRITERIA * const searchCriteria, UINT32 offset, UINT32 pageRecordCount, INT64 baseRowId, HDIAGNOSTIC_RECORD *hRecord );",
            "name": "DdqGetDiagnosticRecordPage"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordPayload( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, INT64 rowId, PCWSTR *payload );",
            "name": "DdqGetDiagnosticRecordPayload"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordProducerAtIndex( HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription, UINT32 index, DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION *producerDescription );",
            "name": "DdqGetDiagnosticRecordProducerAtIndex"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordProducerCategories( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR producerName, HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION *hCategoryDescription );",
            "name": "DdqGetDiagnosticRecordProducerCategories"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordProducerCount( HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION hProducerDescription, UINT32 *producerDescriptionCount );",
            "name": "DdqGetDiagnosticRecordProducerCount"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordProducers( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION *hProducerDescription );",
            "name": "DdqGetDiagnosticRecordProducers"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordStats( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_SEARCH_CRITERIA const *searchCriteria, UINT32 *recordCount, INT64 *minRowId, INT64 *maxRowId );",
            "name": "DdqGetDiagnosticRecordStats"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordSummary( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const PCWSTR *producerNames, UINT32 producerNameCount, DIAGNOSTIC_DATA_GENERAL_STATS *generalStats );",
            "name": "DdqGetDiagnosticRecordSummary"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticRecordTagDistribution( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, PCWSTR *producerNames, UINT32 producerNameCount, DIAGNOSTIC_DATA_EVENT_TAG_STATS **tagStats, UINT32 *statCount );",
            "name": "DdqGetDiagnosticRecordTagDistribution"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticReport( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, HDIAGNOSTIC_REPORT *hReport );",
            "name": "DdqGetDiagnosticReport"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticReportAtIndex( HDIAGNOSTIC_REPORT hReport, UINT32 index, DIAGNOSTIC_REPORT_DATA *report );",
            "name": "DdqGetDiagnosticReportAtIndex"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticReportCount( HDIAGNOSTIC_REPORT hReport, UINT32 *reportCount );",
            "name": "DdqGetDiagnosticReportCount"
        },
        {
            "signature": "HRESULT DdqGetDiagnosticReportStoreReportCount( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, UINT32 reportStoreType, UINT32 *reportCount );",
            "name": "DdqGetDiagnosticReportStoreReportCount"
        },
        {
            "signature": "HRESULT DdqGetSessionAccessLevel( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DdqAccessLevel *accessLevel );",
            "name": "DdqGetSessionAccessLevel"
        },
        {
            "signature": "HRESULT DdqGetTranscriptConfiguration( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION *currentConfig );",
            "name": "DdqGetTranscriptConfiguration"
        },
        {
            "signature": "HRESULT DdqIsDiagnosticRecordSampledIn( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const GUID *providerGroup, const GUID *providerId, PCWSTR providerName, const UINT32 *eventId, PCWSTR eventName, const UINT32 *eventVersion, const UINT64 *eventKeywords, BOOL *isSampledIn );",
            "name": "DdqIsDiagnosticRecordSampledIn"
        },
        {
            "signature": "HRESULT DdqSetTranscriptConfiguration( HDIAGNOSTIC_DATA_QUERY_SESSION hSession, const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION *desiredConfig );",
            "name": "DdqSetTranscriptConfiguration"
        }
    ],
    "Diagnosticdataquerytypes.h": [],
    "Digitalv.h": [],
    "Dimm.h": [],
    "Dinput.h": [],
    "Dinputd.h": [],
    "Directmanipulation.h": [],
    "Directml.h": [
        {
            "signature": "HRESULT DMLCreateDevice( ID3D12Device *d3d12Device, DML_CREATE_DEVICE_FLAGS flags, REFIID riid, void **ppv );",
            "name": "DMLCreateDevice"
        },
        {
            "signature": "HRESULT DMLCreateDevice1( ID3D12Device *d3d12Device, DML_CREATE_DEVICE_FLAGS flags, DML_FEATURE_LEVEL minimumFeatureLevel, REFIID riid, void **ppv );",
            "name": "DMLCreateDevice1"
        }
    ],
    "Directxcollision.h": [
        {
            "signature": "ContainmentType XM_CALLCONV ContainedBy( FXMVECTOR V0, FXMVECTOR V1, FXMVECTOR V2, GXMVECTOR Plane0, HXMVECTOR Plane1, HXMVECTOR Plane2, CXMVECTOR Plane3, CXMVECTOR Plane4, CXMVECTOR Plane5 ) noexcept;",
            "name": "ContainedBy"
        },
        {
            "signature": "bool XM_CALLCONV Intersects( FXMVECTOR Origin, FXMVECTOR Direction, FXMVECTOR V0, GXMVECTOR V1, HXMVECTOR V2, float & Dist ) noexcept;",
            "name": "Intersects"
        },
        {
            "signature": "bool XM_CALLCONV Intersects( FXMVECTOR A0, FXMVECTOR A1, FXMVECTOR A2, GXMVECTOR B0, HXMVECTOR B1, HXMVECTOR B2 ) noexcept;",
            "name": "Intersects"
        },
        {
            "signature": "PlaneIntersectionType XM_CALLCONV Intersects( FXMVECTOR V0, FXMVECTOR V1, FXMVECTOR V2, GXMVECTOR Plane ) noexcept;",
            "name": "Intersects"
        }
    ],
    "Directxmath.h": [
        {
            "signature": "XMVECTOR XM_CALLCONV operator-( FXMVECTOR V ) noexcept;",
            "name": "operator-"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator-( FXMVECTOR V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator-"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator*( FXMVECTOR V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator*"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator*( FXMVECTOR V, float S ) noexcept;",
            "name": "operator*"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator*( float S, FXMVECTOR V ) noexcept;",
            "name": "operator*"
        },
        {
            "signature": "XMVECTOR &XM_CALLCONV operator*=( XMVECTOR & V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator*="
        },
        {
            "signature": "XMVECTOR & operator*=( XMVECTOR & V, float S ) noexcept;",
            "name": "operator*="
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator/( FXMVECTOR V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator/"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator/( FXMVECTOR V, float S ) noexcept;",
            "name": "operator/"
        },
        {
            "signature": "XMVECTOR &XM_CALLCONV operator/=( XMVECTOR & V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator/="
        },
        {
            "signature": "XMVECTOR & operator/=( XMVECTOR & V, float S ) noexcept;",
            "name": "operator/="
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator+( FXMVECTOR V ) noexcept;",
            "name": "operator+"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV operator+( FXMVECTOR V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator+"
        },
        {
            "signature": "XMVECTOR &XM_CALLCONV operator+=( XMVECTOR & V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator+="
        },
        {
            "signature": "XMVECTOR &XM_CALLCONV operator-=( XMVECTOR & V1, FXMVECTOR V2 ) noexcept;",
            "name": "operator-="
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorAdjustContrast( [in] FXMVECTOR C, [in] float Contrast ) noexcept;",
            "name": "XMColorAdjustContrast"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorAdjustSaturation( [in] FXMVECTOR C, [in] float Saturation ) noexcept;",
            "name": "XMColorAdjustSaturation"
        },
        {
            "signature": "bool XM_CALLCONV XMColorEqual( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorEqual"
        },
        {
            "signature": "bool XM_CALLCONV XMColorGreater( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorGreater"
        },
        {
            "signature": "bool XM_CALLCONV XMColorGreaterOrEqual( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorGreaterOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorHSLToRGB( [in] FXMVECTOR hsl ) noexcept;",
            "name": "XMColorHSLToRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorHSVToRGB( [in] FXMVECTOR hsv ) noexcept;",
            "name": "XMColorHSVToRGB"
        },
        {
            "signature": "bool XM_CALLCONV XMColorIsInfinite( [in] FXMVECTOR C ) noexcept;",
            "name": "XMColorIsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMColorIsNaN( [in] FXMVECTOR C ) noexcept;",
            "name": "XMColorIsNaN"
        },
        {
            "signature": "bool XM_CALLCONV XMColorLess( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorLess"
        },
        {
            "signature": "bool XM_CALLCONV XMColorLessOrEqual( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorLessOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorModulate( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorModulate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorNegative( [in] FXMVECTOR C ) noexcept;",
            "name": "XMColorNegative"
        },
        {
            "signature": "bool XM_CALLCONV XMColorNotEqual( [in] FXMVECTOR C1, [in] FXMVECTOR C2 ) noexcept;",
            "name": "XMColorNotEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToHSL( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToHSL"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToHSV( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToHSV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToSRGB( FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToSRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToXYZ( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToXYZ"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToYUV( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToYUV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToYUV_HD( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToYUV_HD"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorRGBToYUV_UHD( [in] FXMVECTOR rgb ) noexcept;",
            "name": "XMColorRGBToYUV_UHD"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorSRGBToRGB( FXMVECTOR srgb ) noexcept;",
            "name": "XMColorSRGBToRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorSRGBToXYZ( [in] FXMVECTOR srgb ) noexcept;",
            "name": "XMColorSRGBToXYZ"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorXYZToRGB( [in] FXMVECTOR xyz ) noexcept;",
            "name": "XMColorXYZToRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorXYZToSRGB( [in] FXMVECTOR xyz ) noexcept;",
            "name": "XMColorXYZToSRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorYUVToRGB( [in] FXMVECTOR yuv ) noexcept;",
            "name": "XMColorYUVToRGB"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorYUVToRGB_HD( [in] FXMVECTOR yuv ) noexcept;",
            "name": "XMColorYUVToRGB_HD"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMColorYUVToRGB_UHD( [in] FXMVECTOR yuv ) noexcept;",
            "name": "XMColorYUVToRGB_UHD"
        },
        {
            "signature": "bool XMComparisonAllFalse( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAllFalse"
        },
        {
            "signature": "bool XMComparisonAllInBounds( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAllInBounds"
        },
        {
            "signature": "bool XMComparisonAllTrue( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAllTrue"
        },
        {
            "signature": "bool XMComparisonAnyFalse( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAnyFalse"
        },
        {
            "signature": "bool XMComparisonAnyOutOfBounds( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAnyOutOfBounds"
        },
        {
            "signature": "bool XMComparisonAnyTrue( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonAnyTrue"
        },
        {
            "signature": "bool XMComparisonMixed( [in] uint32_t CR ) noexcept;",
            "name": "XMComparisonMixed"
        },
        {
            "signature": "float XMConvertToDegrees( [in] float fRadians ) noexcept;",
            "name": "XMConvertToDegrees"
        },
        {
            "signature": "float XMConvertToRadians( [in] float fDegrees ) noexcept;",
            "name": "XMConvertToRadians"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMConvertVectorFloatToInt( [in] FXMVECTOR VFloat, [in] uint32_t MulExponent ) noexcept;",
            "name": "XMConvertVectorFloatToInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMConvertVectorFloatToUInt( [in] FXMVECTOR VFloat, [in] uint32_t MulExponent ) noexcept;",
            "name": "XMConvertVectorFloatToUInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMConvertVectorIntToFloat( [in] FXMVECTOR VInt, [in] uint32_t DivExponent ) noexcept;",
            "name": "XMConvertVectorIntToFloat"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMConvertVectorUIntToFloat( [in] FXMVECTOR VUInt, [in] uint32_t DivExponent ) noexcept;",
            "name": "XMConvertVectorUIntToFloat"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMFresnelTerm( [in] FXMVECTOR CosIncidentAngle, [in] FXMVECTOR RefractionIndex ) noexcept;",
            "name": "XMFresnelTerm"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat( [in] const float *pSource ) noexcept;",
            "name": "XMLoadFloat"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat2( [in] const XMFLOAT2 *pSource ) noexcept;",
            "name": "XMLoadFloat2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat2A( [in] const XMFLOAT2A *pSource ) noexcept;",
            "name": "XMLoadFloat2A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat3( [in] const XMFLOAT3 *pSource ) noexcept;",
            "name": "XMLoadFloat3"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat3A( [in] const XMFLOAT3A *pSource ) noexcept;",
            "name": "XMLoadFloat3A"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat3x3( [in] const XMFLOAT3X3 *pSource ) noexcept;",
            "name": "XMLoadFloat3x3"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat3x4( const XMFLOAT3X4 *pSource ) noexcept;",
            "name": "XMLoadFloat3x4"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat3x4A( const XMFLOAT3X4A *pSource ) noexcept;",
            "name": "XMLoadFloat3x4A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat4( [in] const XMFLOAT4 *pSource ) noexcept;",
            "name": "XMLoadFloat4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat4A( [in] const XMFLOAT4A *pSource ) noexcept;",
            "name": "XMLoadFloat4A"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat4x3( [in] const XMFLOAT4X3 *pSource ) noexcept;",
            "name": "XMLoadFloat4x3"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat4x3A( [in] const XMFLOAT4X3A *pSource ) noexcept;",
            "name": "XMLoadFloat4x3A"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat4x4( [in] const XMFLOAT4X4 *pSource ) noexcept;",
            "name": "XMLoadFloat4x4"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMLoadFloat4x4A( [in] const XMFLOAT4X4A *pSource ) noexcept;",
            "name": "XMLoadFloat4x4A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt2( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt2A( [in] const uint32_t *PSource ) noexcept;",
            "name": "XMLoadInt2A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt3( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt3"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt3A( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt3A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt4( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadInt4A( [in] const uint32_t *pSource ) noexcept;",
            "name": "XMLoadInt4A"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadSInt2( [in] const XMINT2 *pSource ) noexcept;",
            "name": "XMLoadSInt2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadSInt3( [in] const XMINT3 *pSource ) noexcept;",
            "name": "XMLoadSInt3"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadSInt4( [in] const XMINT4 *pSource ) noexcept;",
            "name": "XMLoadSInt4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUInt2( [in] const XMUINT2 *pSource ) noexcept;",
            "name": "XMLoadUInt2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUInt3( [in] const XMUINT3 *pSource ) noexcept;",
            "name": "XMLoadUInt3"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUInt4( [in] const XMUINT4 *pSource ) noexcept;",
            "name": "XMLoadUInt4"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixAffineTransformation( [in] FXMVECTOR Scaling, [in] FXMVECTOR RotationOrigin, [in] FXMVECTOR RotationQuaternion, [in] GXMVECTOR Translation ) noexcept;",
            "name": "XMMatrixAffineTransformation"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixAffineTransformation2D( [in] FXMVECTOR Scaling, [in] FXMVECTOR RotationOrigin, [in] float Rotation, [in] FXMVECTOR Translation ) noexcept;",
            "name": "XMMatrixAffineTransformation2D"
        },
        {
            "signature": "bool XM_CALLCONV XMMatrixDecompose( [in, out] XMVECTOR *outScale, [in, out] XMVECTOR *outRotQuat, [in, out] XMVECTOR *outTrans, [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixDecompose"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMMatrixDeterminant( [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixDeterminant"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixIdentity() noexcept;",
            "name": "XMMatrixIdentity"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixInverse( [out, optional] XMVECTOR *pDeterminant, [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixInverse"
        },
        {
            "signature": "bool XM_CALLCONV XMMatrixIsIdentity( [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixIsIdentity"
        },
        {
            "signature": "bool XM_CALLCONV XMMatrixIsInfinite( [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixIsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMMatrixIsNaN( [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixIsNaN"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixLookAtLH( [in] FXMVECTOR EyePosition, [in] FXMVECTOR FocusPosition, [in] FXMVECTOR UpDirection ) noexcept;",
            "name": "XMMatrixLookAtLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixLookAtRH( [in] FXMVECTOR EyePosition, [in] FXMVECTOR FocusPosition, [in] FXMVECTOR UpDirection ) noexcept;",
            "name": "XMMatrixLookAtRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixLookToLH( [in] FXMVECTOR EyePosition, [in] FXMVECTOR EyeDirection, [in] FXMVECTOR UpDirection ) noexcept;",
            "name": "XMMatrixLookToLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixLookToRH( [in] FXMVECTOR EyePosition, [in] FXMVECTOR EyeDirection, [in] FXMVECTOR UpDirection ) noexcept;",
            "name": "XMMatrixLookToRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixMultiply( [in] FXMMATRIX M1, [in] CXMMATRIX M2 ) noexcept;",
            "name": "XMMatrixMultiply"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixMultiplyTranspose( [in] FXMMATRIX M1, [in] CXMMATRIX M2 ) noexcept;",
            "name": "XMMatrixMultiplyTranspose"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixOrthographicLH( [in] float ViewWidth, [in] float ViewHeight, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixOrthographicLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixOrthographicOffCenterLH( [in] float ViewLeft, [in] float ViewRight, [in] float ViewBottom, [in] float ViewTop, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixOrthographicOffCenterLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixOrthographicOffCenterRH( [in] float ViewLeft, [in] float ViewRight, [in] float ViewBottom, [in] float ViewTop, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixOrthographicOffCenterRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixOrthographicRH( [in] float ViewWidth, [in] float ViewHeight, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixOrthographicRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveFovLH( [in] float FovAngleY, [in] float AspectRatio, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveFovLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveFovRH( [in] float FovAngleY, [in] float AspectRatio, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveFovRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveLH( [in] float ViewWidth, [in] float ViewHeight, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveOffCenterLH( [in] float ViewLeft, [in] float ViewRight, [in] float ViewBottom, [in] float ViewTop, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveOffCenterLH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveOffCenterRH( [in] float ViewLeft, [in] float ViewRight, [in] float ViewBottom, [in] float ViewTop, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveOffCenterRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixPerspectiveRH( [in] float ViewWidth, [in] float ViewHeight, [in] float NearZ, [in] float FarZ ) noexcept;",
            "name": "XMMatrixPerspectiveRH"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixReflect( [in] FXMVECTOR ReflectionPlane ) noexcept;",
            "name": "XMMatrixReflect"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationAxis( [in] FXMVECTOR Axis, [in] float Angle ) noexcept;",
            "name": "XMMatrixRotationAxis"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationNormal( [in] FXMVECTOR NormalAxis, [in] float Angle ) noexcept;",
            "name": "XMMatrixRotationNormal"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationQuaternion( [in] FXMVECTOR Quaternion ) noexcept;",
            "name": "XMMatrixRotationQuaternion"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationRollPitchYaw( [in] float Pitch, [in] float Yaw, [in] float Roll ) noexcept;",
            "name": "XMMatrixRotationRollPitchYaw"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationRollPitchYawFromVector( [in] FXMVECTOR Angles ) noexcept;",
            "name": "XMMatrixRotationRollPitchYawFromVector"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationX( [in] float Angle ) noexcept;",
            "name": "XMMatrixRotationX"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationY( [in] float Angle ) noexcept;",
            "name": "XMMatrixRotationY"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixRotationZ( [in] float Angle ) noexcept;",
            "name": "XMMatrixRotationZ"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixScaling( [in] float ScaleX, [in] float ScaleY, [in] float ScaleZ ) noexcept;",
            "name": "XMMatrixScaling"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixScalingFromVector( [in] FXMVECTOR Scale ) noexcept;",
            "name": "XMMatrixScalingFromVector"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixSet( [in] float m00, [in] float m01, [in] float m02, [in] float m03, [in] float m10, [in] float m11, [in] float m12, [in] float m13, [in] float m20, [in] float m21, [in] float m22, [in] float m23, [in] float m30, [in] float m31, [in] float m32, [in] float m33 ) noexcept;",
            "name": "XMMatrixSet"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixShadow( [in] FXMVECTOR ShadowPlane, [in] FXMVECTOR LightPosition ) noexcept;",
            "name": "XMMatrixShadow"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixTransformation( [in] FXMVECTOR ScalingOrigin, [in] FXMVECTOR ScalingOrientationQuaternion, [in] FXMVECTOR Scaling, [in] GXMVECTOR RotationOrigin, [in] HXMVECTOR RotationQuaternion, [in] HXMVECTOR Translation ) noexcept;",
            "name": "XMMatrixTransformation"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixTransformation2D( [in] FXMVECTOR ScalingOrigin, [in] float ScalingOrientation, [in] FXMVECTOR Scaling, [in] FXMVECTOR RotationOrigin, [in] float Rotation, [in] GXMVECTOR Translation ) noexcept;",
            "name": "XMMatrixTransformation2D"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixTranslation( [in] float OffsetX, [in] float OffsetY, [in] float OffsetZ ) noexcept;",
            "name": "XMMatrixTranslation"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixTranslationFromVector( [in] FXMVECTOR Offset ) noexcept;",
            "name": "XMMatrixTranslationFromVector"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixTranspose( [in] FXMMATRIX M ) noexcept;",
            "name": "XMMatrixTranspose"
        },
        {
            "signature": "XMMATRIX XM_CALLCONV XMMatrixVectorTensorProduct( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMMatrixVectorTensorProduct"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneDot( [in] FXMVECTOR P, [in] FXMVECTOR V ) noexcept;",
            "name": "XMPlaneDot"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneDotCoord( [in] FXMVECTOR P, [in] FXMVECTOR V ) noexcept;",
            "name": "XMPlaneDotCoord"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneDotNormal( [in] FXMVECTOR P, [in] FXMVECTOR V ) noexcept;",
            "name": "XMPlaneDotNormal"
        },
        {
            "signature": "bool XM_CALLCONV XMPlaneEqual( [in] FXMVECTOR P1, [in] FXMVECTOR P2 ) noexcept;",
            "name": "XMPlaneEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneFromPointNormal( [in] FXMVECTOR Point, [in] FXMVECTOR Normal ) noexcept;",
            "name": "XMPlaneFromPointNormal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneFromPoints( [in] FXMVECTOR Point1, [in] FXMVECTOR Point2, [in] FXMVECTOR Point3 ) noexcept;",
            "name": "XMPlaneFromPoints"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneIntersectLine( [in] FXMVECTOR P, [in] FXMVECTOR LinePoint1, [in] FXMVECTOR LinePoint2 ) noexcept;",
            "name": "XMPlaneIntersectLine"
        },
        {
            "signature": "void XM_CALLCONV XMPlaneIntersectPlane( [out] XMVECTOR *pLinePoint1, [out] XMVECTOR *pLinePoint2, [in] FXMVECTOR P1, [in] FXMVECTOR P2 ) noexcept;",
            "name": "XMPlaneIntersectPlane"
        },
        {
            "signature": "bool XM_CALLCONV XMPlaneIsInfinite( [in] FXMVECTOR P ) noexcept;",
            "name": "XMPlaneIsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMPlaneIsNaN( [in] FXMVECTOR P ) noexcept;",
            "name": "XMPlaneIsNaN"
        },
        {
            "signature": "bool XM_CALLCONV XMPlaneNearEqual( [in] FXMVECTOR P1, [in] FXMVECTOR P2, [in] FXMVECTOR Epsilon ) noexcept;",
            "name": "XMPlaneNearEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneNormalize( [in] FXMVECTOR P ) noexcept;",
            "name": "XMPlaneNormalize"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneNormalizeEst( [in] FXMVECTOR P ) noexcept;",
            "name": "XMPlaneNormalizeEst"
        },
        {
            "signature": "bool XM_CALLCONV XMPlaneNotEqual( [in] FXMVECTOR P1, [in] FXMVECTOR P2 ) noexcept;",
            "name": "XMPlaneNotEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMPlaneTransform( [in] FXMVECTOR P, FXMMATRIX ITM ) noexcept;",
            "name": "XMPlaneTransform"
        },
        {
            "signature": "XMFLOAT4 *XM_CALLCONV XMPlaneTransformStream( [out] XMFLOAT4 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT4 *pInputStream, [in] size_t InputStride, [in] size_t PlaneCount, FXMMATRIX ITM ) noexcept;",
            "name": "XMPlaneTransformStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionBaryCentric( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR Q2, [in] float f, [in] float g ) noexcept;",
            "name": "XMQuaternionBaryCentric"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionBaryCentricV( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR Q2, [in] GXMVECTOR F, [in] HXMVECTOR G ) noexcept;",
            "name": "XMQuaternionBaryCentricV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionConjugate( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionConjugate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionDot( [in] FXMVECTOR Q1, [in] FXMVECTOR Q2 ) noexcept;",
            "name": "XMQuaternionDot"
        },
        {
            "signature": "bool XM_CALLCONV XMQuaternionEqual( [in] FXMVECTOR Q1, [in] FXMVECTOR Q2 ) noexcept;",
            "name": "XMQuaternionEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionExp( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionExp"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionIdentity() noexcept;",
            "name": "XMQuaternionIdentity"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionInverse( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionInverse"
        },
        {
            "signature": "bool XM_CALLCONV XMQuaternionIsIdentity( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionIsIdentity"
        },
        {
            "signature": "bool XM_CALLCONV XMQuaternionIsInfinite( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionIsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMQuaternionIsNaN( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionIsNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionLength( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionLengthSq( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionLengthSq"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionLn( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionLn"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionMultiply( [in] FXMVECTOR Q1, [in] FXMVECTOR Q2 ) noexcept;",
            "name": "XMQuaternionMultiply"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionNormalize( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionNormalize"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionNormalizeEst( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionNormalizeEst"
        },
        {
            "signature": "bool XM_CALLCONV XMQuaternionNotEqual( [in] FXMVECTOR Q1, [in] FXMVECTOR Q2 ) noexcept;",
            "name": "XMQuaternionNotEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionReciprocalLength( [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionReciprocalLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionRotationAxis( [in] FXMVECTOR Axis, [in] float Angle ) noexcept;",
            "name": "XMQuaternionRotationAxis"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionRotationMatrix( [in] FXMMATRIX M ) noexcept;",
            "name": "XMQuaternionRotationMatrix"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionRotationNormal( [in] FXMVECTOR NormalAxis, [in] float Angle ) noexcept;",
            "name": "XMQuaternionRotationNormal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionRotationRollPitchYaw( [in] float Pitch, [in] float Yaw, [in] float Roll ) noexcept;",
            "name": "XMQuaternionRotationRollPitchYaw"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionRotationRollPitchYawFromVector( [in] FXMVECTOR Angles ) noexcept;",
            "name": "XMQuaternionRotationRollPitchYawFromVector"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionSlerp( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] float t ) noexcept;",
            "name": "XMQuaternionSlerp"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionSlerpV( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR T ) noexcept;",
            "name": "XMQuaternionSlerpV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionSquad( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR Q2, [in] GXMVECTOR Q3, [in] float t ) noexcept;",
            "name": "XMQuaternionSquad"
        },
        {
            "signature": "void XM_CALLCONV XMQuaternionSquadSetup( [out] XMVECTOR *pA, [out] XMVECTOR *pB, [out] XMVECTOR *pC, [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR Q2, [in] GXMVECTOR Q3 ) noexcept;",
            "name": "XMQuaternionSquadSetup"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMQuaternionSquadV( [in] FXMVECTOR Q0, [in] FXMVECTOR Q1, [in] FXMVECTOR Q2, [in] GXMVECTOR Q3, [in] HXMVECTOR T ) noexcept;",
            "name": "XMQuaternionSquadV"
        },
        {
            "signature": "void XM_CALLCONV XMQuaternionToAxisAngle( [out] XMVECTOR *pAxis, [out] float *pAngle, [in] FXMVECTOR Q ) noexcept;",
            "name": "XMQuaternionToAxisAngle"
        },
        {
            "signature": "float XMScalarACos( [in] float Value ) noexcept;",
            "name": "XMScalarACos"
        },
        {
            "signature": "float XMScalarACosEst( [in] float Value ) noexcept;",
            "name": "XMScalarACosEst"
        },
        {
            "signature": "float XMScalarASin( [in] float Value ) noexcept;",
            "name": "XMScalarASin"
        },
        {
            "signature": "float XMScalarASinEst( [in] float Value ) noexcept;",
            "name": "XMScalarASinEst"
        },
        {
            "signature": "float XMScalarCos( [in] float Value ) noexcept;",
            "name": "XMScalarCos"
        },
        {
            "signature": "float XMScalarCosEst( [in] float Value ) noexcept;",
            "name": "XMScalarCosEst"
        },
        {
            "signature": "float XMScalarModAngle( [in] float Value ) noexcept;",
            "name": "XMScalarModAngle"
        },
        {
            "signature": "bool XMScalarNearEqual( [in] float S1, [in] float S2, [in] float Epsilon ) noexcept;",
            "name": "XMScalarNearEqual"
        },
        {
            "signature": "float XMScalarSin( [in] float Value ) noexcept;",
            "name": "XMScalarSin"
        },
        {
            "signature": "void XMScalarSinCos( [out] float *pSin, [out] float *pCos, [in] float Value ) noexcept;",
            "name": "XMScalarSinCos"
        },
        {
            "signature": "void XMScalarSinCosEst( [out] float *pSin, [out] float *pCos, [in] float Value ) noexcept;",
            "name": "XMScalarSinCosEst"
        },
        {
            "signature": "float XMScalarSinEst( [in] float Value ) noexcept;",
            "name": "XMScalarSinEst"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat( [out] float *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat2( [out] XMFLOAT2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat2A( [out] XMFLOAT2A *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat2A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3( [out] XMFLOAT3 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3A( [out] XMFLOAT3A *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat3A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3x3( [out] XMFLOAT3X3 *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat3x3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3x4( [out] XMFLOAT3X4 *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat3x4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3x4A( [out] XMFLOAT3X4A *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat3x4A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4( [out] XMFLOAT4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4A( [out] XMFLOAT4A *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat4A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4x3( [out] XMFLOAT4X3 *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat4x3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4x3A( [out] XMFLOAT4X3A *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat4x3A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4x4( [out] XMFLOAT4X4 *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat4x4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat4x4A( [out] XMFLOAT4X4A *pDestination, [in] FXMMATRIX M ) noexcept;",
            "name": "XMStoreFloat4x4A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt2( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt2A( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt2A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt3( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt3A( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt3A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt4( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreInt4A( [out] uint32_t *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreInt4A"
        },
        {
            "signature": "void XM_CALLCONV XMStoreSInt2( [out] XMINT2 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreSInt2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreSInt3( [out] XMINT3 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreSInt3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreSInt4( [out] XMINT4 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreSInt4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUInt2( [out] XMUINT2 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreUInt2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUInt3( [out] XMUINT3 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreUInt3"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUInt4( [out] XMUINT4 *pDestination, FXMVECTOR V ) noexcept;",
            "name": "XMStoreUInt4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2AngleBetweenNormals( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector2AngleBetweenNormals"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2AngleBetweenNormalsEst( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector2AngleBetweenNormalsEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2AngleBetweenVectors( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2AngleBetweenVectors"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2ClampLength( [in] FXMVECTOR V, [in] float LengthMin, [in] float LengthMax ) noexcept;",
            "name": "XMVector2ClampLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2ClampLengthV( [in] FXMVECTOR V, [in] FXMVECTOR LengthMin, [in] FXMVECTOR LengthMax ) noexcept;",
            "name": "XMVector2ClampLengthV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Cross( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2Cross"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Dot( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2Dot"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2Equal( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2Equal"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2EqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2EqualInt"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector2EqualIntR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2EqualIntR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector2EqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2EqualR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2Greater( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2Greater"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2GreaterOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2GreaterOrEqual"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector2GreaterOrEqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2GreaterOrEqualR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector2GreaterR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2GreaterR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2InBounds( [in] FXMVECTOR V, [in] FXMVECTOR Bounds ) noexcept;",
            "name": "XMVector2InBounds"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2IntersectLine( [in] FXMVECTOR Line1Point1, [in] FXMVECTOR Line1Point2, [in] FXMVECTOR Line2Point1, [in] GXMVECTOR Line2Point2 ) noexcept;",
            "name": "XMVector2IntersectLine"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2IsInfinite( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2IsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2IsNaN( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2IsNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Length( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2Length"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2LengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2LengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2LengthSq( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2LengthSq"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2Less( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2Less"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2LessOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2LessOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2LinePointDistance( [in] FXMVECTOR LinePoint1, [in] FXMVECTOR LinePoint2, [in] FXMVECTOR Point ) noexcept;",
            "name": "XMVector2LinePointDistance"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2NearEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR Epsilon ) noexcept;",
            "name": "XMVector2NearEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Normalize( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2Normalize"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2NormalizeEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2NormalizeEst"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2NotEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2NotEqual"
        },
        {
            "signature": "bool XM_CALLCONV XMVector2NotEqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector2NotEqualInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Orthogonal( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2Orthogonal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2ReciprocalLength( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2ReciprocalLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2ReciprocalLengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector2ReciprocalLengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Reflect( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal ) noexcept;",
            "name": "XMVector2Reflect"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Refract( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] float RefractionIndex ) noexcept;",
            "name": "XMVector2Refract"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2RefractV( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] FXMVECTOR RefractionIndex ) noexcept;",
            "name": "XMVector2RefractV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2Transform( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2Transform"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2TransformCoord( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2TransformCoord"
        },
        {
            "signature": "XMFLOAT2 *XM_CALLCONV XMVector2TransformCoordStream( [out] XMFLOAT2 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT2 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2TransformCoordStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector2TransformNormal( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2TransformNormal"
        },
        {
            "signature": "XMFLOAT2 *XM_CALLCONV XMVector2TransformNormalStream( [out] XMFLOAT2 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT2 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2TransformNormalStream"
        },
        {
            "signature": "XMFLOAT4 *XM_CALLCONV XMVector2TransformStream( [out] XMFLOAT4 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT2 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector2TransformStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3AngleBetweenNormals( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector3AngleBetweenNormals"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3AngleBetweenNormalsEst( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector3AngleBetweenNormalsEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3AngleBetweenVectors( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3AngleBetweenVectors"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3ClampLength( [in] FXMVECTOR V, [in] float LengthMin, [in] float LengthMax ) noexcept;",
            "name": "XMVector3ClampLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3ClampLengthV( [in] FXMVECTOR V, [in] FXMVECTOR LengthMin, [in] FXMVECTOR LengthMax ) noexcept;",
            "name": "XMVector3ClampLengthV"
        },
        {
            "signature": "void XM_CALLCONV XMVector3ComponentsFromNormal( [out] XMVECTOR *pParallel, [out] XMVECTOR *pPerpendicular, [in] FXMVECTOR V, [in] FXMVECTOR Normal ) noexcept;",
            "name": "XMVector3ComponentsFromNormal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Cross( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3Cross"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Dot( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3Dot"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3Equal( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3Equal"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3EqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3EqualInt"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector3EqualIntR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3EqualIntR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector3EqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3EqualR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3Greater( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3Greater"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3GreaterOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3GreaterOrEqual"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector3GreaterOrEqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3GreaterOrEqualR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector3GreaterR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3GreaterR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3InBounds( [in] FXMVECTOR V, [in] FXMVECTOR Bounds ) noexcept;",
            "name": "XMVector3InBounds"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3InverseRotate( [in] FXMVECTOR V, [in] FXMVECTOR RotationQuaternion ) noexcept;",
            "name": "XMVector3InverseRotate"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3IsInfinite( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3IsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3IsNaN( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3IsNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Length( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3Length"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3LengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3LengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3LengthSq( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3LengthSq"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3Less( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3Less"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3LessOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3LessOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3LinePointDistance( [in] FXMVECTOR LinePoint1, [in] FXMVECTOR LinePoint2, [in] FXMVECTOR Point ) noexcept;",
            "name": "XMVector3LinePointDistance"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3NearEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR Epsilon ) noexcept;",
            "name": "XMVector3NearEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Normalize( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3Normalize"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3NormalizeEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3NormalizeEst"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3NotEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3NotEqual"
        },
        {
            "signature": "bool XM_CALLCONV XMVector3NotEqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector3NotEqualInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Orthogonal( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3Orthogonal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Project( [in] FXMVECTOR V, [in] float ViewportX, [in] float ViewportY, [in] float ViewportWidth, [in] float ViewportHeight, [in] float ViewportMinZ, [in] float ViewportMaxZ, [in] FXMMATRIX Projection, [in] CXMMATRIX View, [in] CXMMATRIX World ) noexcept;",
            "name": "XMVector3Project"
        },
        {
            "signature": "XMFLOAT3 *XM_CALLCONV XMVector3ProjectStream( [out] XMFLOAT3 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT3 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] float ViewportX, [in] float ViewportY, [in] float ViewportWidth, [in] float ViewportHeight, [in] float ViewportMinZ, [in] float ViewportMaxZ, [in] FXMMATRIX Projection, [in] CXMMATRIX View, [in] CXMMATRIX World ) noexcept;",
            "name": "XMVector3ProjectStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3ReciprocalLength( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3ReciprocalLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3ReciprocalLengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector3ReciprocalLengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Reflect( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal ) noexcept;",
            "name": "XMVector3Reflect"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Refract( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] float RefractionIndex ) noexcept;",
            "name": "XMVector3Refract"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3RefractV( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] FXMVECTOR RefractionIndex ) noexcept;",
            "name": "XMVector3RefractV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Rotate( [in] FXMVECTOR V, [in] FXMVECTOR RotationQuaternion ) noexcept;",
            "name": "XMVector3Rotate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Transform( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3Transform"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3TransformCoord( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3TransformCoord"
        },
        {
            "signature": "XMFLOAT3 *XM_CALLCONV XMVector3TransformCoordStream( [out] XMFLOAT3 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT3 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3TransformCoordStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3TransformNormal( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3TransformNormal"
        },
        {
            "signature": "XMFLOAT3 *XM_CALLCONV XMVector3TransformNormalStream( [out] XMFLOAT3 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT3 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3TransformNormalStream"
        },
        {
            "signature": "XMFLOAT4 *XM_CALLCONV XMVector3TransformStream( [out] XMFLOAT4 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT3 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector3TransformStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector3Unproject( [in] FXMVECTOR V, [in] float ViewportX, [in] float ViewportY, [in] float ViewportWidth, [in] float ViewportHeight, [in] float ViewportMinZ, [in] float ViewportMaxZ, [in] FXMMATRIX Projection, [in] CXMMATRIX View, [in] CXMMATRIX World ) noexcept;",
            "name": "XMVector3Unproject"
        },
        {
            "signature": "XMFLOAT3 *XM_CALLCONV XMVector3UnprojectStream( [out] XMFLOAT3 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT3 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] float ViewportX, [in] float ViewportY, [in] float ViewportWidth, [in] float ViewportHeight, [in] float ViewportMinZ, [in] float ViewportMaxZ, [in] FXMMATRIX Projection, [in] CXMMATRIX View, [in] CXMMATRIX World ) noexcept;",
            "name": "XMVector3UnprojectStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4AngleBetweenNormals( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector4AngleBetweenNormals"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4AngleBetweenNormalsEst( [in] FXMVECTOR N1, [in] FXMVECTOR N2 ) noexcept;",
            "name": "XMVector4AngleBetweenNormalsEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4AngleBetweenVectors( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4AngleBetweenVectors"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4ClampLength( [in] FXMVECTOR V, [in] float LengthMin, [in] float LengthMax ) noexcept;",
            "name": "XMVector4ClampLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4ClampLengthV( [in] FXMVECTOR V, [in] FXMVECTOR LengthMin, [in] FXMVECTOR LengthMax ) noexcept;",
            "name": "XMVector4ClampLengthV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Cross( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR V3 ) noexcept;",
            "name": "XMVector4Cross"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Dot( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4Dot"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4Equal( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4Equal"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4EqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4EqualInt"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector4EqualIntR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4EqualIntR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector4EqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4EqualR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4Greater( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4Greater"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4GreaterOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4GreaterOrEqual"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector4GreaterOrEqualR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4GreaterOrEqualR"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVector4GreaterR( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4GreaterR"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4InBounds( [in] FXMVECTOR V, [in] FXMVECTOR Bounds ) noexcept;",
            "name": "XMVector4InBounds"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4IsInfinite( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4IsInfinite"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4IsNaN( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4IsNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Length( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4Length"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4LengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4LengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4LengthSq( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4LengthSq"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4Less( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4Less"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4LessOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4LessOrEqual"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4NearEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR Epsilon ) noexcept;",
            "name": "XMVector4NearEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Normalize( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4Normalize"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4NormalizeEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4NormalizeEst"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4NotEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4NotEqual"
        },
        {
            "signature": "bool XM_CALLCONV XMVector4NotEqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVector4NotEqualInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Orthogonal( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4Orthogonal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4ReciprocalLength( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4ReciprocalLength"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4ReciprocalLengthEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVector4ReciprocalLengthEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Reflect( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal ) noexcept;",
            "name": "XMVector4Reflect"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Refract( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] float RefractionIndex ) noexcept;",
            "name": "XMVector4Refract"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4RefractV( [in] FXMVECTOR Incident, [in] FXMVECTOR Normal, [in] FXMVECTOR RefractionIndex ) noexcept;",
            "name": "XMVector4RefractV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVector4Transform( [in] FXMVECTOR V, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector4Transform"
        },
        {
            "signature": "XMFLOAT4 *XM_CALLCONV XMVector4TransformStream( [out] XMFLOAT4 *pOutputStream, [in] size_t OutputStride, [in] const XMFLOAT4 *pInputStream, [in] size_t InputStride, [in] size_t VectorCount, [in] FXMMATRIX M ) noexcept;",
            "name": "XMVector4TransformStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorAbs( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorAbs"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorACos( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorACos"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorACosEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorACosEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorAdd( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorAdd"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorAddAngles( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorAddAngles"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorAndCInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorAndCInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorAndInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorAndInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorASin( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorASin"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorASinEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorASinEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorATan( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorATan"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorATan2( [in] FXMVECTOR Y, [in] FXMVECTOR X ) noexcept;",
            "name": "XMVectorATan2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorATan2Est( [in] FXMVECTOR Y, [in] FXMVECTOR X ) noexcept;",
            "name": "XMVectorATan2Est"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorATanEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorATanEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorBaryCentric( [in] FXMVECTOR Position0, [in] FXMVECTOR Position1, [in] FXMVECTOR Position2, [in] float f, [in] float g ) noexcept;",
            "name": "XMVectorBaryCentric"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorBaryCentricV( [in] FXMVECTOR Position0, [in] FXMVECTOR Position1, [in] FXMVECTOR Position2, [in] GXMVECTOR F, [in] HXMVECTOR G ) noexcept;",
            "name": "XMVectorBaryCentricV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCatmullRom( [in] FXMVECTOR Position0, [in] FXMVECTOR Position1, [in] FXMVECTOR Position2, [in] GXMVECTOR Position3, [in] float t ) noexcept;",
            "name": "XMVectorCatmullRom"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCatmullRomV( [in] FXMVECTOR Position0, [in] FXMVECTOR Position1, [in] FXMVECTOR Position2, [in] GXMVECTOR Position3, [in] HXMVECTOR T ) noexcept;",
            "name": "XMVectorCatmullRomV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCeiling( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorCeiling"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorClamp( [in] FXMVECTOR V, [in] FXMVECTOR Min, [in] FXMVECTOR Max ) noexcept;",
            "name": "XMVectorClamp"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCos( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorCos"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCosEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorCosEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorCosH( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorCosH"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorDivide( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorDivide"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorEqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorEqualInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorEqualIntR( [out] uint32_t *pCR, FXMVECTOR V, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorEqualIntR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorEqualR( [out] uint32_t *pCR, [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorEqualR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorExp( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorExp"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorExp10( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorExp10"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorExp2( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorExp2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorExpE( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorExpE"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorFalseInt() noexcept;",
            "name": "XMVectorFalseInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorFloor( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorFloor"
        },
        {
            "signature": "float XM_CALLCONV XMVectorGetByIndex( FXMVECTOR V, size_t i ) noexcept;",
            "name": "XMVectorGetByIndex"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetByIndexPtr( [out] float *f, FXMVECTOR V, size_t i ) noexcept;",
            "name": "XMVectorGetByIndexPtr"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVectorGetIntByIndex( FXMVECTOR V, size_t i ) noexcept;",
            "name": "XMVectorGetIntByIndex"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetIntByIndexPtr( [out] uint32_t *x, FXMVECTOR V, size_t i ) noexcept;",
            "name": "XMVectorGetIntByIndexPtr"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVectorGetIntW( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntW"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetIntWPtr( [out] uint32_t *w, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntWPtr"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVectorGetIntX( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntX"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetIntXPtr( [out] uint32_t *x, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntXPtr"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVectorGetIntY( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntY"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetIntYPtr( [out] uint32_t *y, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntYPtr"
        },
        {
            "signature": "uint32_t XM_CALLCONV XMVectorGetIntZ( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntZ"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetIntZPtr( [out] uint32_t *z, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetIntZPtr"
        },
        {
            "signature": "float XM_CALLCONV XMVectorGetW( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetW"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetWPtr( [out] float *w, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetWPtr"
        },
        {
            "signature": "float XM_CALLCONV XMVectorGetX( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetX"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetXPtr( [out] float *x, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetXPtr"
        },
        {
            "signature": "float XM_CALLCONV XMVectorGetY( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetY"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetYPtr( [out] float *y, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetYPtr"
        },
        {
            "signature": "float XM_CALLCONV XMVectorGetZ( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetZ"
        },
        {
            "signature": "void XM_CALLCONV XMVectorGetZPtr( [out] float *z, FXMVECTOR V ) noexcept;",
            "name": "XMVectorGetZPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorGreater( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorGreater"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorGreaterOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorGreaterOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorGreaterOrEqualR( [out] uint32_t *pCR, [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorGreaterOrEqualR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorGreaterR( [out] uint32_t *pCR, [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorGreaterR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorHermite( [in] FXMVECTOR Position0, [in] FXMVECTOR Tangent0, [in] FXMVECTOR Position1, [in] GXMVECTOR Tangent1, [in] float t ) noexcept;",
            "name": "XMVectorHermite"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorHermiteV( [in] FXMVECTOR Position0, [in] FXMVECTOR Tangent0, [in] FXMVECTOR Position1, [in] GXMVECTOR Tangent1, [in] HXMVECTOR T ) noexcept;",
            "name": "XMVectorHermiteV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorInBounds( [in] FXMVECTOR V, [in] FXMVECTOR Bounds ) noexcept;",
            "name": "XMVectorInBounds"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorInBoundsR( [out] uint32_t *pCR, [in] FXMVECTOR V, [in] FXMVECTOR Bounds ) noexcept;",
            "name": "XMVectorInBoundsR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorInsert( [in] FXMVECTOR VD, [in] FXMVECTOR VS, [in] uint32_t VSLeftRotateElements, [in] uint32_t Select0, [in] uint32_t Select1, [in] uint32_t Select2, [in] uint32_t Select3 ) noexcept;",
            "name": "XMVectorInsert"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorIsInfinite( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorIsInfinite"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorIsNaN( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorIsNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLerp( [in] FXMVECTOR V0, [in] FXMVECTOR V1, [in] float t ) noexcept;",
            "name": "XMVectorLerp"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLerpV( [in] FXMVECTOR V0, [in] FXMVECTOR V1, [in] FXMVECTOR T ) noexcept;",
            "name": "XMVectorLerpV"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLess( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorLess"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLessOrEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorLessOrEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLog( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorLog"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLog10( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorLog10"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLog2( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorLog2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorLogE( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorLogE"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMax( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMax"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMergeXY( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMergeXY"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMergeZW( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMergeZW"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMin( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMin"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMod( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMod"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorModAngles( [in] FXMVECTOR Angles ) noexcept;",
            "name": "XMVectorModAngles"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMultiply( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorMultiply"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorMultiplyAdd( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR V3 ) noexcept;",
            "name": "XMVectorMultiplyAdd"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNearEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR Epsilon ) noexcept;",
            "name": "XMVectorNearEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNegate( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorNegate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNegativeMultiplySubtract( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR V3 ) noexcept;",
            "name": "XMVectorNegativeMultiplySubtract"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNorInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorNorInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNotEqual( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorNotEqual"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorNotEqualInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorNotEqualInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorOrInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorOrInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorPermute( [in] FXMVECTOR V1, [in] FXMVECTOR V2, uint32_t PermuteX, uint32_t PermuteY, uint32_t PermuteZ, uint32_t PermuteW ) noexcept;",
            "name": "XMVectorPermute"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorPow( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorPow"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReciprocal( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorReciprocal"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReciprocalEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorReciprocalEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReciprocalSqrt( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorReciprocalSqrt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReciprocalSqrtEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorReciprocalSqrtEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReplicate( [in] float Value ) noexcept;",
            "name": "XMVectorReplicate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReplicateInt( [in] uint32_t Value ) noexcept;",
            "name": "XMVectorReplicateInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReplicateIntPtr( [in] const uint32_t *pValue ) noexcept;",
            "name": "XMVectorReplicateIntPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorReplicatePtr( [in] const float *pValue ) noexcept;",
            "name": "XMVectorReplicatePtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorRotateLeft( [in] FXMVECTOR V, [in] uint32_t Elements ) noexcept;",
            "name": "XMVectorRotateLeft"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorRotateRight( [in] FXMVECTOR V, [in] uint32_t Elements ) noexcept;",
            "name": "XMVectorRotateRight"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorRound( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorRound"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSaturate( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSaturate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorScale( [in] FXMVECTOR V, [in] float ScaleFactor ) noexcept;",
            "name": "XMVectorScale"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSelect( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] FXMVECTOR Control ) noexcept;",
            "name": "XMVectorSelect"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSelectControl( [in] uint32_t VectorIndex0, [in] uint32_t VectorIndex1, [in] uint32_t VectorIndex2, [in] uint32_t VectorIndex3 ) noexcept;",
            "name": "XMVectorSelectControl"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSet( [in] float x, [in] float y, [in] float z, [in] float w ) noexcept;",
            "name": "XMVectorSet"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetBinaryConstant( [in] uint32_t C0, [in] uint32_t C1, [in] uint32_t C2, [in] uint32_t C3 ) noexcept;",
            "name": "XMVectorSetBinaryConstant"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetByIndex( FXMVECTOR V, float f, size_t i ) noexcept;",
            "name": "XMVectorSetByIndex"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetByIndexPtr( FXMVECTOR V, [in] const float *f, size_t i ) noexcept;",
            "name": "XMVectorSetByIndexPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetInt( [in] uint32_t x, [in] uint32_t y, [in] uint32_t z, [in] uint32_t w ) noexcept;",
            "name": "XMVectorSetInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntByIndex( FXMVECTOR V, uint32_t x, size_t i ) noexcept;",
            "name": "XMVectorSetIntByIndex"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntByIndexPtr( FXMVECTOR V, [in] const uint32_t *x, size_t i ) noexcept;",
            "name": "XMVectorSetIntByIndexPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntW( [in] FXMVECTOR V, [in] uint32_t w ) noexcept;",
            "name": "XMVectorSetIntW"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntWPtr( FXMVECTOR V, [in] const uint32_t *w ) noexcept;",
            "name": "XMVectorSetIntWPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntX( [in] FXMVECTOR V, [in] uint32_t x ) noexcept;",
            "name": "XMVectorSetIntX"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntXPtr( FXMVECTOR V, [in] const uint32_t *x ) noexcept;",
            "name": "XMVectorSetIntXPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntY( [in] FXMVECTOR V, [in] uint32_t y ) noexcept;",
            "name": "XMVectorSetIntY"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntYPtr( FXMVECTOR V, [in] const uint32_t *y ) noexcept;",
            "name": "XMVectorSetIntYPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntZ( [in] FXMVECTOR V, [in] uint32_t z ) noexcept;",
            "name": "XMVectorSetIntZ"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetIntZPtr( FXMVECTOR V, [in] const uint32_t *z ) noexcept;",
            "name": "XMVectorSetIntZPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetW( [in] FXMVECTOR V, [in] float w ) noexcept;",
            "name": "XMVectorSetW"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetWPtr( FXMVECTOR V, [in] const float *w ) noexcept;",
            "name": "XMVectorSetWPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetX( [in] FXMVECTOR V, [in] float x ) noexcept;",
            "name": "XMVectorSetX"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetXPtr( FXMVECTOR V, [in] const float *x ) noexcept;",
            "name": "XMVectorSetXPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetY( [in] FXMVECTOR V, [in] float y ) noexcept;",
            "name": "XMVectorSetY"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetYPtr( FXMVECTOR V, [in] const float *y ) noexcept;",
            "name": "XMVectorSetYPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetZ( [in] FXMVECTOR V, [in] float z ) noexcept;",
            "name": "XMVectorSetZ"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSetZPtr( FXMVECTOR V, [in] const float *z ) noexcept;",
            "name": "XMVectorSetZPtr"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorShiftLeft( [in] FXMVECTOR V1, [in] FXMVECTOR V2, [in] uint32_t Elements ) noexcept;",
            "name": "XMVectorShiftLeft"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSin( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSin"
        },
        {
            "signature": "void XM_CALLCONV XMVectorSinCos( [out] XMVECTOR *pSin, [out] XMVECTOR *pCos, [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSinCos"
        },
        {
            "signature": "void XM_CALLCONV XMVectorSinCosEst( [out] XMVECTOR *pSin, [out] XMVECTOR *pCos, [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSinCosEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSinEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSinEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSinH( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSinH"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatConstant( [in] int32_t IntConstant, [in] uint32_t DivExponent ) noexcept;",
            "name": "XMVectorSplatConstant"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatConstantInt( [in] int32_t IntConstant ) noexcept;",
            "name": "XMVectorSplatConstantInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatEpsilon() noexcept;",
            "name": "XMVectorSplatEpsilon"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatInfinity() noexcept;",
            "name": "XMVectorSplatInfinity"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatOne() noexcept;",
            "name": "XMVectorSplatOne"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatQNaN() noexcept;",
            "name": "XMVectorSplatQNaN"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatSignMask() noexcept;",
            "name": "XMVectorSplatSignMask"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatW( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSplatW"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatX( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSplatX"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatY( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSplatY"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSplatZ( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSplatZ"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSqrt( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSqrt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSqrtEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSqrtEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSubtract( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorSubtract"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSubtractAngles( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorSubtractAngles"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSum( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorSum"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorSwizzle( [in] FXMVECTOR V, [in] uint32_t E0, [in] uint32_t E1, [in] uint32_t E2, [in] uint32_t E3 ) noexcept;",
            "name": "XMVectorSwizzle"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorTan( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorTan"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorTanEst( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorTanEst"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorTanH( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorTanH"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorTrueInt() noexcept;",
            "name": "XMVectorTrueInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorTruncate( [in] FXMVECTOR V ) noexcept;",
            "name": "XMVectorTruncate"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorXorInt( [in] FXMVECTOR V1, [in] FXMVECTOR V2 ) noexcept;",
            "name": "XMVectorXorInt"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMVectorZero() noexcept;",
            "name": "XMVectorZero"
        },
        {
            "signature": "bool XMVerifyCPUSupport() noexcept;",
            "name": "XMVerifyCPUSupport"
        }
    ],
    "Directxpackedvector.h": [
        {
            "signature": "HALF XMConvertFloatToHalf( [in] float Value ) noexcept;",
            "name": "XMConvertFloatToHalf"
        },
        {
            "signature": "HALF * XMConvertFloatToHalfStream( [out] HALF *pOutputStream, [in] size_t OutputStride, [in] const float *pInputStream, [in] size_t InputStride, [in] size_t FloatCount ) noexcept;",
            "name": "XMConvertFloatToHalfStream"
        },
        {
            "signature": "float XMConvertHalfToFloat( [in] HALF Value ) noexcept;",
            "name": "XMConvertHalfToFloat"
        },
        {
            "signature": "float * XMConvertHalfToFloatStream( [out] float *pOutputStream, [in] size_t OutputStride, [in] const HALF *pInputStream, [in] size_t InputStride, [in] size_t HalfCount ) noexcept;",
            "name": "XMConvertHalfToFloatStream"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadByte2( [in] const XMBYTE2 *pSource ) noexcept;",
            "name": "XMLoadByte2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadByte4( [in] const XMBYTE4 *pSource ) noexcept;",
            "name": "XMLoadByte4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadByteN2( [in] const XMBYTEN2 *pSource ) noexcept;",
            "name": "XMLoadByteN2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadByteN4( [in] const XMBYTEN4 *pSource ) noexcept;",
            "name": "XMLoadByteN4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadColor( [in] const XMCOLOR *pSource ) noexcept;",
            "name": "XMLoadColor"
        },
        {
            "signature": "XMVECTOR XM_DEPRECATED XM_CALLCONV XMLoadDec4( [in] const XMDEC4 *pSource ) noexcept;",
            "name": "XMLoadDec4"
        },
        {
            "signature": "XMVECTOR XM_DEPRECATED XM_CALLCONV XMLoadDecN4( [in] const XMDECN4 *pSource ) noexcept;",
            "name": "XMLoadDecN4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat3PK( [in] const XMFLOAT3PK *pSource ) noexcept;",
            "name": "XMLoadFloat3PK"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadFloat3SE( [in] const XMFLOAT3SE *pSource ) noexcept;",
            "name": "XMLoadFloat3SE"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadHalf2( [in] const XMHALF2 *pSource ) noexcept;",
            "name": "XMLoadHalf2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadHalf4( [in] const XMHALF4 *pSource ) noexcept;",
            "name": "XMLoadHalf4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadShort2( [in] const XMSHORT2 *pSource ) noexcept;",
            "name": "XMLoadShort2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadShort4( [in] const XMSHORT4 *pSource ) noexcept;",
            "name": "XMLoadShort4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadShortN2( [in] const XMSHORTN2 *pSource ) noexcept;",
            "name": "XMLoadShortN2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadShortN4( [in] const XMSHORTN4 *pSource ) noexcept;",
            "name": "XMLoadShortN4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadU555( [in] const XMU555 *pSource ) noexcept;",
            "name": "XMLoadU555"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadU565( [in] const XMU565 *pSource ) noexcept;",
            "name": "XMLoadU565"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUByte2( [in] const XMUBYTE2 *pSource ) noexcept;",
            "name": "XMLoadUByte2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUByte4( [in] const XMUBYTE4 *pSource ) noexcept;",
            "name": "XMLoadUByte4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUByteN2( [in] const XMUBYTEN2 *pSource ) noexcept;",
            "name": "XMLoadUByteN2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUByteN4( [in] const XMUBYTEN4 *pSource ) noexcept;",
            "name": "XMLoadUByteN4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUDec4( [in] const XMUDEC4 *pSource ) noexcept;",
            "name": "XMLoadUDec4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUDecN4( [in] const XMUDECN4 *pSource ) noexcept;",
            "name": "XMLoadUDecN4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUDecN4_XR( [in] const XMUDECN4 *pSource ) noexcept;",
            "name": "XMLoadUDecN4_XR"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUNibble4( [in] const XMUNIBBLE4 *pSource ) noexcept;",
            "name": "XMLoadUNibble4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUShort2( [in] const XMUSHORT2 *pSource ) noexcept;",
            "name": "XMLoadUShort2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUShort4( [in] const XMUSHORT4 *pSource ) noexcept;",
            "name": "XMLoadUShort4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUShortN2( [in] const XMUSHORTN2 *pSource ) noexcept;",
            "name": "XMLoadUShortN2"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadUShortN4( [in] const XMUSHORTN4 *pSource ) noexcept;",
            "name": "XMLoadUShortN4"
        },
        {
            "signature": "XMVECTOR XM_DEPRECATED XM_CALLCONV XMLoadXDec4( [in] const XMXDEC4 *pSource ) noexcept;",
            "name": "XMLoadXDec4"
        },
        {
            "signature": "XMVECTOR XM_CALLCONV XMLoadXDecN4( [in] const XMXDECN4 *pSource ) noexcept;",
            "name": "XMLoadXDecN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreByte2( [out] XMBYTE2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreByte2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreByte4( [out] XMBYTE4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreByte4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreByteN2( [out] XMBYTEN2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreByteN2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreByteN4( [out] XMBYTEN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreByteN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreColor( [out] XMCOLOR *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreColor"
        },
        {
            "signature": "void XM_DEPRECATED XM_CALLCONV XMStoreDec4( [out] XMDEC4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreDec4"
        },
        {
            "signature": "void XM_DEPRECATED XM_CALLCONV XMStoreDecN4( [out] XMDECN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreDecN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3PK( [out] XMFLOAT3PK *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat3PK"
        },
        {
            "signature": "void XM_CALLCONV XMStoreFloat3SE( [out] XMFLOAT3SE *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreFloat3SE"
        },
        {
            "signature": "void XM_CALLCONV XMStoreHalf2( [out] XMHALF2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreHalf2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreHalf4( [out] XMHALF4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreHalf4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreShort2( [out] XMSHORT2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreShort2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreShort4( [out] XMSHORT4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreShort4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreShortN2( [out] XMSHORTN2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreShortN2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreShortN4( [out] XMSHORTN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreShortN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreU555( [out] XMU555 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreU555"
        },
        {
            "signature": "void XM_CALLCONV XMStoreU565( [out] XMU565 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreU565"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUByte2( [out] XMUBYTE2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUByte2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUByte4( [out] XMUBYTE4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUByte4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUByteN2( [out] XMUBYTEN2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUByteN2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUByteN4( [out] XMUBYTEN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUByteN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUDec4( [out] XMUDEC4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUDec4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUDecN4( [out] XMUDECN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUDecN4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUDecN4_XR( [out] XMUDECN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUDecN4_XR"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUNibble4( [out] XMUNIBBLE4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUNibble4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUShort2( [out] XMUSHORT2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUShort2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUShort4( [out] XMUSHORT4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUShort4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUShortN2( [out] XMUSHORTN2 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUShortN2"
        },
        {
            "signature": "void XM_CALLCONV XMStoreUShortN4( [out] XMUSHORTN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreUShortN4"
        },
        {
            "signature": "void XM_DEPRECATED XM_CALLCONV XMStoreXDec4( [out] XMXDEC4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreXDec4"
        },
        {
            "signature": "void XM_CALLCONV XMStoreXDecN4( [out] XMXDECN4 *pDestination, [in] FXMVECTOR V ) noexcept;",
            "name": "XMStoreXDecN4"
        }
    ],
    "Dispatcherqueue.h": [
        {
            "signature": "HRESULT CreateDispatcherQueueController( [in] DispatcherQueueOptions options, [out] PDISPATCHERQUEUECONTROLLER *dispatcherQueueController );",
            "name": "CreateDispatcherQueueController"
        }
    ],
    "Dmemmgr.h": [
        {
            "signature": "FLATPTR HeapVidMemAllocAligned( [in] LPVIDMEM lpVidMem, [in] DWORD dwWidth, [in] DWORD dwHeight, [in] LPSURFACEALIGNMENT lpAlignment, [out] LPLONG lpNewPitch );",
            "name": "HeapVidMemAllocAligned"
        },
        {
            "signature": "void VidMemFree( [in] LPVMEMHEAP pvmh, [in] FLATPTR ptr );",
            "name": "VidMemFree"
        }
    ],
    "Dmerror.h": [],
    "Dmusics.h": [],
    "Docobj.h": [],
    "Documenttarget.h": [],
    "Dot1x.h": [],
    "Dpa_dsa.h": [
        {
            "signature": "HDPA DPA_Clone( [in] const HDPA hdpa, [in, out, optional] HDPA hdpaNew );",
            "name": "DPA_Clone"
        },
        {
            "signature": "HDPA DPA_Create( int cItemGrow );",
            "name": "DPA_Create"
        },
        {
            "signature": "HDPA DPA_CreateEx( [in] int cpGrow, [in, optional] HANDLE hheap );",
            "name": "DPA_CreateEx"
        },
        {
            "signature": "BOOL DPA_DeleteAllPtrs( HDPA hdpa );",
            "name": "DPA_DeleteAllPtrs"
        },
        {
            "signature": "PVOID DPA_DeletePtr( HDPA hdpa, int i );",
            "name": "DPA_DeletePtr"
        },
        {
            "signature": "BOOL DPA_Destroy( HDPA hdpa );",
            "name": "DPA_Destroy"
        },
        {
            "signature": "void DPA_DestroyCallback( HDPA hdpa, PFNDAENUMCALLBACK pfnCB, void *pData );",
            "name": "DPA_DestroyCallback"
        },
        {
            "signature": "void DPA_EnumCallback( HDPA hdpa, PFNDAENUMCALLBACK pfnCB, void *pData );",
            "name": "DPA_EnumCallback"
        },
        {
            "signature": "PVOID DPA_GetPtr( HDPA hdpa, INT_PTR i );",
            "name": "DPA_GetPtr"
        },
        {
            "signature": "int DPA_GetPtrIndex( [in] HDPA hdpa, [in] const void *p );",
            "name": "DPA_GetPtrIndex"
        },
        {
            "signature": "ULONGLONG DPA_GetSize( [in] HDPA hdpa );",
            "name": "DPA_GetSize"
        },
        {
            "signature": "BOOL DPA_Grow( [in] HDPA pdpa, [in] int cp );",
            "name": "DPA_Grow"
        },
        {
            "signature": "int DPA_InsertPtr( HDPA hdpa, int i, void *p );",
            "name": "DPA_InsertPtr"
        },
        {
            "signature": "HRESULT DPA_LoadStream( [out] HDPA *phdpa, [in] PFNDPASTREAM pfn, [in] IStream *pstream, [in] void *pvInstData );",
            "name": "DPA_LoadStream"
        },
        {
            "signature": "BOOL DPA_Merge( [in, out] HDPA hdpaDest, [in] HDPA hdpaSrc, [in] DWORD dwFlags, [in] PFNDACOMPARE pfnCompare, [in] PFNDPAMERGE pfnMerge, [in] LPARAM lParam );",
            "name": "DPA_Merge"
        },
        {
            "signature": "HRESULT DPA_SaveStream( [in] HDPA hdpa, [in] PFNDPASTREAM pfn, [in] IStream *pstream, [in] void *pvInstData );",
            "name": "DPA_SaveStream"
        },
        {
            "signature": "int DPA_Search( HDPA hdpa, void *pFind, int iStart, PFNDACOMPARE pfnCompare, LPARAM lParam, UINT options );",
            "name": "DPA_Search"
        },
        {
            "signature": "BOOL DPA_SetPtr( HDPA hdpa, int i, void *p );",
            "name": "DPA_SetPtr"
        },
        {
            "signature": "BOOL DPA_Sort( HDPA hdpa, PFNDACOMPARE pfnCompare, LPARAM lParam );",
            "name": "DPA_Sort"
        },
        {
            "signature": "HDSA DSA_Clone( [in] HDSA hdsa );",
            "name": "DSA_Clone"
        },
        {
            "signature": "HDSA DSA_Create( [in] int cbItem, [in] int cItemGrow );",
            "name": "DSA_Create"
        },
        {
            "signature": "BOOL DSA_DeleteAllItems( [in] HDSA hdsa );",
            "name": "DSA_DeleteAllItems"
        },
        {
            "signature": "BOOL DSA_DeleteItem( [in] HDSA hdsa, [in] int i );",
            "name": "DSA_DeleteItem"
        },
        {
            "signature": "BOOL DSA_Destroy( [in] HDSA hdsa );",
            "name": "DSA_Destroy"
        },
        {
            "signature": "void DSA_DestroyCallback( [in] HDSA hdsa, [in] PFNDAENUMCALLBACK pfnCB, [in] void *pData );",
            "name": "DSA_DestroyCallback"
        },
        {
            "signature": "void DSA_EnumCallback( [in] HDSA hdsa, [in] PFNDAENUMCALLBACK pfnCB, [in] void *pData );",
            "name": "DSA_EnumCallback"
        },
        {
            "signature": "BOOL DSA_GetItem( [in] HDSA hdsa, [in] int i, [out] void *pitem );",
            "name": "DSA_GetItem"
        },
        {
            "signature": "PVOID DSA_GetItemPtr( [in] HDSA hdsa, [in] int i );",
            "name": "DSA_GetItemPtr"
        },
        {
            "signature": "ULONGLONG DSA_GetSize( [in] HDSA hdsa );",
            "name": "DSA_GetSize"
        },
        {
            "signature": "int DSA_InsertItem( [in] HDSA hdsa, [in] int i, [in] const void *pitem );",
            "name": "DSA_InsertItem"
        },
        {
            "signature": "BOOL DSA_SetItem( [in] HDSA hdsa, [in] int i, [in] const void *pitem );",
            "name": "DSA_SetItem"
        },
        {
            "signature": "BOOL DSA_Sort( [in] HDSA pdsa, [in] PFNDACOMPARE pfnCompare, [in] LPARAM lParam );",
            "name": "DSA_Sort"
        },
        {
            "signature": "BOOL DSA_Sort( HDSA hdsa, PFNDACOMPARECONST pfnCompare, LPARAM lParam );",
            "name": "DSA_Sort"
        },
        {
            "signature": "PFNDACOMPARE Pfndacompare; int Pfndacompare( [in, optional] void *p1, [in, optional] void *p2, [in] LPARAM lParam ) {...}",
            "name": "PFNDACOMPARE callback"
        },
        {
            "signature": "PFNDACOMPARECONST Pfndacompareconst; int Pfndacompareconst( [in, optional] const void *p1, [in, optional] const void *p2, [in] LPARAM lParam ) {...}",
            "name": "PFNDACOMPARECONST callback"
        },
        {
            "signature": "PFNDAENUMCALLBACK Pfndaenumcallback; int Pfndaenumcallback( [in, optional] void *p, [in, optional] void *pData ) {...}",
            "name": "PFNDAENUMCALLBACK callback"
        },
        {
            "signature": "PFNDAENUMCALLBACKCONST Pfndaenumcallbackconst; int Pfndaenumcallbackconst( [in, optional] const void *p, [in, optional] void *pData ) {...}",
            "name": "PFNDAENUMCALLBACKCONST callback"
        },
        {
            "signature": "PFNDPAMERGE Pfndpamerge; void * Pfndpamerge( [in] UINT uMsg, [in] void *pvDest, [in] void *pvSrc, [in] LPARAM lParam ) {...}",
            "name": "PFNDPAMERGE callback"
        },
        {
            "signature": "PFNDPAMERGECONST Pfndpamergeconst; const void * Pfndpamergeconst( [in] UINT uMsg, [in] const void *pvDest, [in] const void *pvSrc, [in] LPARAM lParam ) {...}",
            "name": "PFNDPAMERGECONST callback"
        },
        {
            "signature": "PFNDPASTREAM Pfndpastream; HRESULT Pfndpastream( [in] DPASTREAMINFO *pinfo, [in] IStream *pstream, [in, optional] void *pvInstData ) {...}",
            "name": "PFNDPASTREAM callback"
        },
        {
            "signature": "BOOL Str_SetPtrW( [in, out] LPWSTR *ppsz, LPCWSTR psz );",
            "name": "Str_SetPtrW"
        }
    ],
    "Dpapi.h": [
        {
            "signature": "DPAPI_IMP BOOL CryptProtectData( [in] DATA_BLOB *pDataIn, [in, optional] LPCWSTR szDataDescr, [in, optional] DATA_BLOB *pOptionalEntropy, [in] PVOID pvReserved, [in, optional] CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, [in] DWORD dwFlags, [out] DATA_BLOB *pDataOut );",
            "name": "CryptProtectData"
        },
        {
            "signature": "DPAPI_IMP BOOL CryptProtectMemory( [in, out] LPVOID pDataIn, [in] DWORD cbDataIn, [in] DWORD dwFlags );",
            "name": "CryptProtectMemory"
        },
        {
            "signature": "DPAPI_IMP BOOL CryptUnprotectData( [in] DATA_BLOB *pDataIn, [out, optional] LPWSTR *ppszDataDescr, [in, optional] DATA_BLOB *pOptionalEntropy, PVOID pvReserved, [in, optional] CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct, [in] DWORD dwFlags, [out] DATA_BLOB *pDataOut );",
            "name": "CryptUnprotectData"
        },
        {
            "signature": "DPAPI_IMP BOOL CryptUnprotectMemory( [in, out] LPVOID pDataIn, [in] DWORD cbDataIn, [in] DWORD dwFlags );",
            "name": "CryptUnprotectMemory"
        },
        {
            "signature": "DPAPI_IMP BOOL CryptUpdateProtectedState( [in] PSID pOldSid, [in] LPCWSTR pwszOldPassword, [in] DWORD dwFlags, [out] DWORD *pdwSuccessCount, [out] DWORD *pdwFailureCount );",
            "name": "CryptUpdateProtectedState"
        }
    ],
    "Dragdropinterop.h": [],
    "Drt.h": [
        {
            "signature": "void DrtClose( [in] HDRT hDrt );",
            "name": "DrtClose"
        },
        {
            "signature": "HRESULT DrtContinueSearch( [in] HDRT_SEARCH_CONTEXT hSearchContext );",
            "name": "DrtContinueSearch"
        },
        {
            "signature": "HRESULT DrtCreateDerivedKey( [in] PCCERT_CONTEXT pLocalCert, [out] DRT_DATA *pKey );",
            "name": "DrtCreateDerivedKey"
        },
        {
            "signature": "HRESULT DrtCreateDerivedKeySecurityProvider( [in] PCCERT_CONTEXT pRootCert, [out] PCCERT_CONTEXT pLocalCert, DRT_SECURITY_PROVIDER **ppSecurityProvider );",
            "name": "DrtCreateDerivedKeySecurityProvider"
        },
        {
            "signature": "HRESULT DrtCreateDnsBootstrapResolver( [in] USHORT port, [in] PCWSTR pwszAddress, [out] DRT_BOOTSTRAP_PROVIDER **ppModule );",
            "name": "DrtCreateDnsBootstrapResolver"
        },
        {
            "signature": "HRESULT DrtCreateIpv6UdpTransport( DRT_SCOPE scope, ULONG dwScopeId, ULONG dwLocalityThreshold, [in, out] USHORT *pwPort, [out] HDRT_TRANSPORT *phTransport );",
            "name": "DrtCreateIpv6UdpTransport"
        },
        {
            "signature": "HRESULT DrtCreateNullSecurityProvider( [out] DRT_SECURITY_PROVIDER **ppSecurityProvider );",
            "name": "DrtCreateNullSecurityProvider"
        },
        {
            "signature": "HRESULT DrtCreatePnrpBootstrapResolver( [in] BOOL fPublish, [in] PCWSTR pwzPeerName, [in, optional] PCWSTR pwzCloudName, [in, optional] PCWSTR pwzPublishingIdentity, [out] DRT_BOOTSTRAP_PROVIDER **ppResolver );",
            "name": "DrtCreatePnrpBootstrapResolver"
        },
        {
            "signature": "void DrtDeleteDerivedKeySecurityProvider( [in] DRT_SECURITY_PROVIDER *pSecurityProvider );",
            "name": "DrtDeleteDerivedKeySecurityProvider"
        },
        {
            "signature": "void DrtDeleteDnsBootstrapResolver( [in] DRT_BOOTSTRAP_PROVIDER *pResolver );",
            "name": "DrtDeleteDnsBootstrapResolver"
        },
        {
            "signature": "HRESULT DrtDeleteIpv6UdpTransport( [in] HDRT_TRANSPORT hTransport );",
            "name": "DrtDeleteIpv6UdpTransport"
        },
        {
            "signature": "void DrtDeleteNullSecurityProvider( [in] DRT_SECURITY_PROVIDER *pSecurityProvider );",
            "name": "DrtDeleteNullSecurityProvider"
        },
        {
            "signature": "void DrtDeletePnrpBootstrapResolver( [in] DRT_BOOTSTRAP_PROVIDER *pResolver );",
            "name": "DrtDeletePnrpBootstrapResolver"
        },
        {
            "signature": "HRESULT DrtEndSearch( [in] HDRT_SEARCH_CONTEXT hSearchContext );",
            "name": "DrtEndSearch"
        },
        {
            "signature": "HRESULT DrtGetEventData( [in] HDRT hDrt, [out] ULONG ulEventDataLen, [out] DRT_EVENT_DATA *pEventData );",
            "name": "DrtGetEventData"
        },
        {
            "signature": "HRESULT DrtGetEventDataSize( [in] HDRT hDrt, [out] ULONG *pulEventDataLen );",
            "name": "DrtGetEventDataSize"
        },
        {
            "signature": "HRESULT DrtGetInstanceName( [in] HDRT hDrt, [in, out] ULONG ulcbInstanceNameSize, [out] PWSTR pwzDrtInstanceName );",
            "name": "DrtGetInstanceName"
        },
        {
            "signature": "HRESULT DrtGetInstanceNameSize( [in] HDRT hDrt, [out] ULONG *pulcbInstanceNameSize );",
            "name": "DrtGetInstanceNameSize"
        },
        {
            "signature": "HRESULT DrtGetSearchPath( [in] HDRT_SEARCH_CONTEXT hSearchContext, [in, out] ULONG ulSearchPathSize, [out] DRT_ADDRESS_LIST *pSearchPath );",
            "name": "DrtGetSearchPath"
        },
        {
            "signature": "HRESULT DrtGetSearchPathSize( [in] HDRT_SEARCH_CONTEXT hSearchContext, [out] ULONG *pulSearchPathSize );",
            "name": "DrtGetSearchPathSize"
        },
        {
            "signature": "HRESULT DrtGetSearchResult( [in] HDRT_SEARCH_CONTEXT hSearchContext, [out] ULONG ulSearchResultSize, DRT_SEARCH_RESULT *pSearchResult );",
            "name": "DrtGetSearchResult"
        },
        {
            "signature": "HRESULT DrtGetSearchResultSize( [in] HDRT_SEARCH_CONTEXT hSearchContext, [out] ULONG *pulSearchResultSize );",
            "name": "DrtGetSearchResultSize"
        },
        {
            "signature": "HRESULT DrtOpen( [in] const DRT_SETTINGS *pSettings, [in] HANDLE hEvent, [in, optional] const PVOID pvContext, [out] HDRT *phDrt );",
            "name": "DrtOpen"
        },
        {
            "signature": "HRESULT DrtRegisterKey( [in] HDRT hDrt, [in] DRT_REGISTRATION *pRegistration, [in, optional] PVOID pvKeyContext, [out] HDRT_REGISTRATION_CONTEXT *phKeyRegistration );",
            "name": "DrtRegisterKey"
        },
        {
            "signature": "HRESULT DrtStartSearch( [in] HDRT hDrt, [in] DRT_DATA *pKey, [in, optional] const DRT_SEARCH_INFO *pInfo, ULONG timeout, [in] HANDLE hEvent, [in, optional] const PVOID pvContext, [out] HDRT_SEARCH_CONTEXT *hSearchContext );",
            "name": "DrtStartSearch"
        },
        {
            "signature": "void DrtUnregisterKey( [in] HDRT_REGISTRATION_CONTEXT hKeyRegistration );",
            "name": "DrtUnregisterKey"
        },
        {
            "signature": "HRESULT DrtUpdateKey( [in] HDRT_REGISTRATION_CONTEXT hKeyRegistration, [in] DRT_DATA *pAppData );",
            "name": "DrtUpdateKey"
        }
    ],
    "Dsadmin.h": [],
    "Dsclient.h": [
        {
            "signature": "int DsBrowseForContainerA( [in] PDSBROWSEINFOA pInfo );",
            "name": "DsBrowseForContainerA"
        },
        {
            "signature": "int DsBrowseForContainerW( [in] PDSBROWSEINFOW pInfo );",
            "name": "DsBrowseForContainerW"
        },
        {
            "signature": "HRESULT DsGetFriendlyClassName( [in] LPCWSTR pszObjectClass, [in] LPWSTR pszBuffer, [in] UINT cchBuffer );",
            "name": "DsGetFriendlyClassName"
        },
        {
            "signature": "HICON DsGetIcon( [in] DWORD dwFlags, [in] LPCWSTR pszObjectClass, [in] INT cxImage, [in] INT cyImage );",
            "name": "DsGetIcon"
        },
        {
            "signature": "LPDSENUMATTRIBUTES Lpdsenumattributes; HRESULT Lpdsenumattributes( LPARAM lParam, LPCWSTR pszAttributeName, LPCWSTR pszDisplayName, DWORD dwFlags ) {...}",
            "name": "LPDSENUMATTRIBUTES callback"
        }
    ],
    "Dsgetdc.h": [
        {
            "signature": "DSGETDCAPI DWORD DsAddressToSiteNamesA( [in, optional] LPCSTR ComputerName, [in] DWORD EntryCount, [in] PSOCKET_ADDRESS SocketAddresses, [out] LPSTR **SiteNames );",
            "name": "DsAddressToSiteNamesA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsAddressToSiteNamesExA( [in, optional] LPCSTR ComputerName, [in] DWORD EntryCount, [in] PSOCKET_ADDRESS SocketAddresses, [out] LPSTR **SiteNames, [out] LPSTR **SubnetNames );",
            "name": "DsAddressToSiteNamesExA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsAddressToSiteNamesExW( [in, optional] LPCWSTR ComputerName, [in] DWORD EntryCount, [in] PSOCKET_ADDRESS SocketAddresses, [out] LPWSTR **SiteNames, [out] LPWSTR **SubnetNames );",
            "name": "DsAddressToSiteNamesExW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsAddressToSiteNamesW( [in, optional] LPCWSTR ComputerName, [in] DWORD EntryCount, [in] PSOCKET_ADDRESS SocketAddresses, [out] LPWSTR **SiteNames );",
            "name": "DsAddressToSiteNamesW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsDeregisterDnsHostRecordsA( [in, optional] LPSTR ServerName, [in, optional] LPSTR DnsDomainName, [in, optional] GUID *DomainGuid, [in, optional] GUID *DsaGuid, [in] LPSTR DnsHostName );",
            "name": "DsDeregisterDnsHostRecordsA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsDeregisterDnsHostRecordsW( [in, optional] LPWSTR ServerName, [in, optional] LPWSTR DnsDomainName, [in, optional] GUID *DomainGuid, [in, optional] GUID *DsaGuid, [in] LPWSTR DnsHostName );",
            "name": "DsDeregisterDnsHostRecordsW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsEnumerateDomainTrustsA( [in, optional] LPSTR ServerName, [in] ULONG Flags, [out] PDS_DOMAIN_TRUSTSA *Domains, [out] PULONG DomainCount );",
            "name": "DsEnumerateDomainTrustsA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsEnumerateDomainTrustsW( [in, optional] LPWSTR ServerName, [in] ULONG Flags, [out] PDS_DOMAIN_TRUSTSW *Domains, [out] PULONG DomainCount );",
            "name": "DsEnumerateDomainTrustsW"
        },
        {
            "signature": "DSGETDCAPI VOID DsGetDcCloseW( [in] HANDLE GetDcContextHandle );",
            "name": "DsGetDcCloseW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcNameA( [in] LPCSTR ComputerName, [in] LPCSTR DomainName, [in] GUID *DomainGuid, [in] LPCSTR SiteName, [in] ULONG Flags, [out] PDOMAIN_CONTROLLER_INFOA *DomainControllerInfo );",
            "name": "DsGetDcNameA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcNameW( [in] LPCWSTR ComputerName, [in] LPCWSTR DomainName, [in] GUID *DomainGuid, [in] LPCWSTR SiteName, [in] ULONG Flags, [out] PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo );",
            "name": "DsGetDcNameW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcNextA( [in] HANDLE GetDcContextHandle, [out, optional] PULONG SockAddressCount, [out, optional] LPSOCKET_ADDRESS *SockAddresses, [out, optional] LPSTR *DnsHostName );",
            "name": "DsGetDcNextA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcNextW( [in] HANDLE GetDcContextHandle, [out, optional] PULONG SockAddressCount, [out, optional] LPSOCKET_ADDRESS *SockAddresses, [out, optional] LPWSTR *DnsHostName );",
            "name": "DsGetDcNextW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcOpenA( [in] LPCSTR DnsName, [in] ULONG OptionFlags, [in, optional] LPCSTR SiteName, [in, optional] GUID *DomainGuid, [in, optional] LPCSTR DnsForestName, [in] ULONG DcFlags, [out] PHANDLE RetGetDcContext );",
            "name": "DsGetDcOpenA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcOpenW( [in] LPCWSTR DnsName, [in] ULONG OptionFlags, [in, optional] LPCWSTR SiteName, [in, optional] GUID *DomainGuid, [in, optional] LPCWSTR DnsForestName, [in] ULONG DcFlags, [out] PHANDLE RetGetDcContext );",
            "name": "DsGetDcOpenW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcSiteCoverageA( [in, optional] LPCSTR ServerName, [out] PULONG EntryCount, [out] LPSTR **SiteNames );",
            "name": "DsGetDcSiteCoverageA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetDcSiteCoverageW( [in, optional] LPCWSTR ServerName, [out] PULONG EntryCount, [out] LPWSTR **SiteNames );",
            "name": "DsGetDcSiteCoverageW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetForestTrustInformationW( [in, optional] LPCWSTR ServerName, [in, optional] LPCWSTR TrustedDomainName, [in] DWORD Flags, [out] PLSA_FOREST_TRUST_INFORMATION *ForestTrustInfo );",
            "name": "DsGetForestTrustInformationW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetSiteNameA( [in] LPCSTR ComputerName, [out] LPSTR *SiteName );",
            "name": "DsGetSiteNameA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsGetSiteNameW( [in] LPCWSTR ComputerName, [out] LPWSTR *SiteName );",
            "name": "DsGetSiteNameW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsMergeForestTrustInformationW( [in] LPCWSTR DomainName, [in] PLSA_FOREST_TRUST_INFORMATION NewForestTrustInfo, [in, optional] PLSA_FOREST_TRUST_INFORMATION OldForestTrustInfo, [out] PLSA_FOREST_TRUST_INFORMATION *MergedForestTrustInfo );",
            "name": "DsMergeForestTrustInformationW"
        },
        {
            "signature": "DSGETDCAPI DWORD DsValidateSubnetNameA( [in] LPCSTR SubnetName );",
            "name": "DsValidateSubnetNameA"
        },
        {
            "signature": "DSGETDCAPI DWORD DsValidateSubnetNameW( [in] LPCWSTR SubnetName );",
            "name": "DsValidateSubnetNameW"
        }
    ],
    "Dskquota.h": [],
    "Dsparse.h": [
        {
            "signature": "DSPARSE DWORD DsCrackSpnA( [in] LPCSTR pszSpn, [in, out, optional] LPDWORD pcServiceClass, [out, optional] LPSTR ServiceClass, [in, out, optional] LPDWORD pcServiceName, [out, optional] LPSTR ServiceName, [in, out, optional] LPDWORD pcInstanceName, [out, optional] LPSTR InstanceName, [out, optional] USHORT *pInstancePort );",
            "name": "DsCrackSpnA"
        },
        {
            "signature": "DSPARSE DWORD DsCrackSpnW( [in] LPCWSTR pszSpn, [in, out, optional] DWORD *pcServiceClass, [out, optional] LPWSTR ServiceClass, [in, out, optional] DWORD *pcServiceName, [out, optional] LPWSTR ServiceName, [in, out, optional] DWORD *pcInstanceName, [out, optional] LPWSTR InstanceName, [out, optional] USHORT *pInstancePort );",
            "name": "DsCrackSpnW"
        },
        {
            "signature": "DSPARSE BOOL DsCrackUnquotedMangledRdnA( [in] LPCSTR pszRDN, [in] DWORD cchRDN, [out, optional] GUID *pGuid, [out, optional] DS_MANGLE_FOR *peDsMangleFor );",
            "name": "DsCrackUnquotedMangledRdnA"
        },
        {
            "signature": "DSPARSE BOOL DsCrackUnquotedMangledRdnW( [in] LPCWSTR pszRDN, [in] DWORD cchRDN, [out, optional] GUID *pGuid, [out, optional] DS_MANGLE_FOR *peDsMangleFor );",
            "name": "DsCrackUnquotedMangledRdnW"
        },
        {
            "signature": "DSPARSE DWORD DsGetRdnW( [in, out] LPCWCH *ppDN, [in, out] DWORD *pcDN, [out] LPCWCH *ppKey, [out] DWORD *pcKey, [out] LPCWCH *ppVal, [out] DWORD *pcVal );",
            "name": "DsGetRdnW"
        },
        {
            "signature": "DSPARSE BOOL DsIsMangledDnA( [in] LPCSTR pszDn, [in] DS_MANGLE_FOR eDsMangleFor );",
            "name": "DsIsMangledDnA"
        },
        {
            "signature": "DSPARSE BOOL DsIsMangledDnW( [in] LPCWSTR pszDn, [in] DS_MANGLE_FOR eDsMangleFor );",
            "name": "DsIsMangledDnW"
        },
        {
            "signature": "DSPARSE BOOL DsIsMangledRdnValueA( [in] LPCSTR pszRdn, [in] DWORD cRdn, [in] DS_MANGLE_FOR eDsMangleForDesired );",
            "name": "DsIsMangledRdnValueA"
        },
        {
            "signature": "DSPARSE BOOL DsIsMangledRdnValueW( [in] LPCWSTR pszRdn, [in] DWORD cRdn, [in] DS_MANGLE_FOR eDsMangleForDesired );",
            "name": "DsIsMangledRdnValueW"
        },
        {
            "signature": "DSPARSE DWORD DsMakeSpnA( [in] LPCSTR ServiceClass, [in] LPCSTR ServiceName, [in, optional] LPCSTR InstanceName, [in] USHORT InstancePort, [in, optional] LPCSTR Referrer, [in, out] DWORD *pcSpnLength, [out] LPSTR pszSpn );",
            "name": "DsMakeSpnA"
        },
        {
            "signature": "DSPARSE DWORD DsMakeSpnW( [in] LPCWSTR ServiceClass, [in] LPCWSTR ServiceName, [in, optional] LPCWSTR InstanceName, [in] USHORT InstancePort, [in, optional] LPCWSTR Referrer, [in, out] DWORD *pcSpnLength, [out] LPWSTR pszSpn );",
            "name": "DsMakeSpnW"
        },
        {
            "signature": "DSPARSE DWORD DsQuoteRdnValueA( [in] DWORD cUnquotedRdnValueLength, [in] LPCCH psUnquotedRdnValue, [in, out] DWORD *pcQuotedRdnValueLength, [out] LPCH psQuotedRdnValue );",
            "name": "DsQuoteRdnValueA"
        },
        {
            "signature": "DSPARSE DWORD DsQuoteRdnValueW( [in] DWORD cUnquotedRdnValueLength, [in] LPCWCH psUnquotedRdnValue, [in, out] DWORD *pcQuotedRdnValueLength, [out] LPWCH psQuotedRdnValue );",
            "name": "DsQuoteRdnValueW"
        },
        {
            "signature": "DSPARSE DWORD DsUnquoteRdnValueA( [in] DWORD cQuotedRdnValueLength, [in] LPCCH psQuotedRdnValue, [in, out] DWORD *pcUnquotedRdnValueLength, [out] LPCH psUnquotedRdnValue );",
            "name": "DsUnquoteRdnValueA"
        },
        {
            "signature": "DSPARSE DWORD DsUnquoteRdnValueW( [in] DWORD cQuotedRdnValueLength, [in] LPCWCH psQuotedRdnValue, [in, out] DWORD *pcUnquotedRdnValueLength, [out] LPWCH psUnquotedRdnValue );",
            "name": "DsUnquoteRdnValueW"
        }
    ],
    "Dsquery.h": [],
    "Dsrole.h": [
        {
            "signature": "void DsRoleFreeMemory( [in] PVOID Buffer );",
            "name": "DsRoleFreeMemory"
        },
        {
            "signature": "DWORD DsRoleGetPrimaryDomainInformation( [in] LPCWSTR lpServer, [in] DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, [out] PBYTE *Buffer );",
            "name": "DsRoleGetPrimaryDomainInformation"
        }
    ],
    "Dssec.h": [
        {
            "signature": "HRESULT DSCreateISecurityInfoObject( [in] LPCWSTR pwszObjectPath, [in] LPCWSTR pwszObjectClass, [in] DWORD dwFlags, [out] LPSECURITYINFO *ppSI, [in, optional] PFNREADOBJECTSECURITY pfnReadSD, [in, optional] PFNWRITEOBJECTSECURITY pfnWriteSD, [in] LPARAM lpContext );",
            "name": "DSCreateISecurityInfoObject"
        },
        {
            "signature": "HRESULT DSCreateISecurityInfoObjectEx( [in] LPCWSTR pwszObjectPath, [in] LPCWSTR pwszObjectClass, [in] LPCWSTR pwszServer, [in] LPCWSTR pwszUserName, [in] LPCWSTR pwszPassword, [in] DWORD dwFlags, [out] LPSECURITYINFO *ppSI, [in, optional] PFNREADOBJECTSECURITY pfnReadSD, [in, optional] PFNWRITEOBJECTSECURITY pfnWriteSD, [in] LPARAM lpContext );",
            "name": "DSCreateISecurityInfoObjectEx"
        },
        {
            "signature": "HRESULT DSCreateSecurityPage( [in] LPCWSTR pwszObjectPath, [in, optional] LPCWSTR pwszObjectClass, [in] DWORD dwFlags, [out] HPROPSHEETPAGE *phPage, [in, optional] PFNREADOBJECTSECURITY pfnReadSD, [in, optional] PFNWRITEOBJECTSECURITY pfnWriteSD, [in] LPARAM lpContext );",
            "name": "DSCreateSecurityPage"
        },
        {
            "signature": "HRESULT DSEditSecurity( [in] HWND hwndOwner, [in] LPCWSTR pwszObjectPath, [in, optional] LPCWSTR pwszObjectClass, [in] DWORD dwFlags, [in, optional] LPCWSTR pwszCaption, [in, optional] PFNREADOBJECTSECURITY pfnReadSD, [in, optional] PFNWRITEOBJECTSECURITY pfnWriteSD, [in] LPARAM lpContext );",
            "name": "DSEditSecurity"
        }
    ],
    "Dvp.h": [],
    "Dwmapi.h": [
        {
            "signature": "HRESULT DwmAttachMilContent( [in] HWND hwnd );",
            "name": "DwmAttachMilContent"
        },
        {
            "signature": "BOOL DwmDefWindowProc( [in] HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam, [out] LRESULT *plResult );",
            "name": "DwmDefWindowProc"
        },
        {
            "signature": "HRESULT DwmDetachMilContent( [in] HWND hwnd );",
            "name": "DwmDetachMilContent"
        },
        {
            "signature": "HRESULT DwmEnableBlurBehindWindow( HWND hWnd, const DWM_BLURBEHIND *pBlurBehind );",
            "name": "DwmEnableBlurBehindWindow"
        },
        {
            "signature": "HRESULT DwmEnableComposition( UINT uCompositionAction );",
            "name": "DwmEnableComposition"
        },
        {
            "signature": "HRESULT DwmEnableMMCSS( BOOL fEnableMMCSS );",
            "name": "DwmEnableMMCSS"
        },
        {
            "signature": "HRESULT DwmExtendFrameIntoClientArea( HWND hWnd, [in] const MARGINS *pMarInset );",
            "name": "DwmExtendFrameIntoClientArea"
        },
        {
            "signature": "HRESULT DwmFlush();",
            "name": "DwmFlush"
        },
        {
            "signature": "HRESULT DwmGetColorizationColor( [out] DWORD *pcrColorization, [out] BOOL *pfOpaqueBlend );",
            "name": "DwmGetColorizationColor"
        },
        {
            "signature": "HRESULT DwmGetCompositionTimingInfo( HWND hwnd, [out] DWM_TIMING_INFO *pTimingInfo );",
            "name": "DwmGetCompositionTimingInfo"
        },
        {
            "signature": "HRESULT DwmGetGraphicsStreamClient( UINT uIndex, [out] UUID *pClientUuid );",
            "name": "DwmGetGraphicsStreamClient"
        },
        {
            "signature": "HRESULT DwmGetGraphicsStreamTransformHint( UINT uIndex, [out] MilMatrix3x2D *pTransform );",
            "name": "DwmGetGraphicsStreamTransformHint"
        },
        {
            "signature": "HRESULT DwmGetTransportAttributes( [out] BOOL *pfIsRemoting, [out] BOOL *pfIsConnected, [out] DWORD *pDwGeneration );",
            "name": "DwmGetTransportAttributes"
        },
        {
            "signature": "HRESULT DwmGetUnmetTabRequirements( [in, optional] HWND appWindow, DWM_TAB_WINDOW_REQUIREMENTS *value );",
            "name": "DwmGetUnmetTabRequirements"
        },
        {
            "signature": "HRESULT DwmGetWindowAttribute( HWND hwnd, DWORD dwAttribute, [out] PVOID pvAttribute, DWORD cbAttribute );",
            "name": "DwmGetWindowAttribute"
        },
        {
            "signature": "HRESULT DwmInvalidateIconicBitmaps( [in] HWND hwnd );",
            "name": "DwmInvalidateIconicBitmaps"
        },
        {
            "signature": "HRESULT DwmIsCompositionEnabled( [out] BOOL *pfEnabled );",
            "name": "DwmIsCompositionEnabled"
        },
        {
            "signature": "HRESULT DwmModifyPreviousDxFrameDuration( HWND hwnd, INT cRefreshes, BOOL fRelative );",
            "name": "DwmModifyPreviousDxFrameDuration"
        },
        {
            "signature": "HRESULT DwmQueryThumbnailSourceSize( HTHUMBNAIL hThumbnail, [out] PSIZE pSize );",
            "name": "DwmQueryThumbnailSourceSize"
        },
        {
            "signature": "HRESULT DwmRegisterThumbnail( HWND hwndDestination, HWND hwndSource, [out] PHTHUMBNAIL phThumbnailId );",
            "name": "DwmRegisterThumbnail"
        },
        {
            "signature": "HRESULT DwmRenderGesture( GESTURE_TYPE gt, [in] UINT cContacts, [in] const DWORD *pdwPointerID, [in] const POINT *pPoints );",
            "name": "DwmRenderGesture"
        },
        {
            "signature": "HRESULT DwmSetDxFrameDuration( HWND hwnd, INT cRefreshes );",
            "name": "DwmSetDxFrameDuration"
        },
        {
            "signature": "HRESULT DwmSetIconicLivePreviewBitmap( HWND hwnd, HBITMAP hbmp, [in, optional] POINT *pptClient, DWORD dwSITFlags );",
            "name": "DwmSetIconicLivePreviewBitmap"
        },
        {
            "signature": "HRESULT DwmSetIconicThumbnail( [in] HWND hwnd, [in] HBITMAP hbmp, [in] DWORD dwSITFlags );",
            "name": "DwmSetIconicThumbnail"
        },
        {
            "signature": "HRESULT DwmSetPresentParameters( HWND hwnd, [in, out] DWM_PRESENT_PARAMETERS *pPresentParams );",
            "name": "DwmSetPresentParameters"
        },
        {
            "signature": "HRESULT DwmSetWindowAttribute( HWND hwnd, DWORD dwAttribute, [in] LPCVOID pvAttribute, DWORD cbAttribute );",
            "name": "DwmSetWindowAttribute"
        },
        {
            "signature": "HRESULT DwmShowContact( DWORD dwPointerID, DWM_SHOWCONTACT eShowContact );",
            "name": "DwmShowContact"
        },
        {
            "signature": "HRESULT DwmTetherContact( DWORD dwPointerID, BOOL fEnable, POINT ptTether );",
            "name": "DwmTetherContact"
        },
        {
            "signature": "HRESULT DwmTransitionOwnedWindow( HWND hwnd, DWMTRANSITION_OWNEDWINDOW_TARGET target );",
            "name": "DwmTransitionOwnedWindow"
        },
        {
            "signature": "HRESULT DwmUnregisterThumbnail( HTHUMBNAIL hThumbnailId );",
            "name": "DwmUnregisterThumbnail"
        },
        {
            "signature": "HRESULT DwmUpdateThumbnailProperties( HTHUMBNAIL hThumbnailId, [in] const DWM_THUMBNAIL_PROPERTIES *ptnProperties );",
            "name": "DwmUpdateThumbnailProperties"
        }
    ],
    "Dwrite.h": [
        {
            "signature": "HRESULT DWriteCreateFactory( [in] DWRITE_FACTORY_TYPE factoryType, [in] REFIID iid, [out] IUnknown **factory );",
            "name": "DWriteCreateFactory"
        }
    ],
    "Dwrite_1.h": [],
    "Dwrite_2.h": [],
    "Dwrite_3.h": [],
    "Dxcore.h": [
        {
            "signature": "HRESULT DXCoreCreateAdapterFactory( REFIID riid, [out] void **ppvFactory );",
            "name": "DXCoreCreateAdapterFactory"
        }
    ],
    "Dxcore_interface.h": [
        {
            "signature": "PFN_DXCORE_NOTIFICATION_CALLBACK PfnDxcoreNotificationCallback; void PfnDxcoreNotificationCallback( DXCoreNotificationType notificationType, IUnknown *object, [in] void *context ) {...}",
            "name": "PFN_DXCORE_NOTIFICATION_CALLBACK callback"
        }
    ],
    "Dxgi.h": [
        {
            "signature": "HRESULT CreateDXGIFactory( REFIID riid, [out] void **ppFactory );",
            "name": "CreateDXGIFactory"
        },
        {
            "signature": "HRESULT CreateDXGIFactory1( REFIID riid, [out] void **ppFactory );",
            "name": "CreateDXGIFactory1"
        }
    ],
    "Dxgi1_2.h": [],
    "Dxgi1_3.h": [
        {
            "signature": "HRESULT CreateDXGIFactory2( UINT Flags, REFIID riid, [out] void **ppFactory );",
            "name": "CreateDXGIFactory2"
        },
        {
            "signature": "HRESULT DXGIGetDebugInterface1( UINT Flags, REFIID riid, [out] void **pDebug );",
            "name": "DXGIGetDebugInterface1"
        }
    ],
    "Dxgi1_4.h": [],
    "Dxgi1_5.h": [],
    "Dxgi1_6.h": [
        {
            "signature": "HRESULT DXGIDeclareAdapterRemovalSupport();",
            "name": "DXGIDeclareAdapterRemovalSupport"
        },
        {
            "signature": "HRESULT DXGIDisableVBlankVirtualization();",
            "name": "DXGIDisableVBlankVirtualization"
        }
    ],
    "Dxgicommon.h": [],
    "Dxgidebug.h": [
        {
            "signature": "HRESULT DXGIGetDebugInterface( REFIID riid, void **ppDebug );",
            "name": "DXGIGetDebugInterface"
        }
    ],
    "Dxgiformat.h": [],
    "Dxmini.h": [
        {
            "signature": "PDX_BOBNEXTFIELD PdxBobnextfield; DWORD PdxBobnextfield( PVOID unnamedParam1, PDDBOBNEXTFIELDINFO unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "PDX_BOBNEXTFIELD callback"
        },
        {
            "signature": "PDX_ENABLEIRQ PdxEnableirq; DWORD PdxEnableirq( PVOID unnamedParam1, PDDENABLEIRQINFO unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "PDX_ENABLEIRQ callback"
        },
        {
            "signature": "PDX_FLIPOVERLAY PdxFlipoverlay; DWORD PdxFlipoverlay( PVOID unnamedParam1, PDDFLIPOVERLAYINFO unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "PDX_FLIPOVERLAY callback"
        },
        {
            "signature": "PDX_FLIPVIDEOPORT PdxFlipvideoport; DWORD PdxFlipvideoport( PVOID unnamedParam1, PDDFLIPVIDEOPORTINFO unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "PDX_FLIPVIDEOPORT callback"
        },
        {
            "signature": "PDX_GETCURRENTAUTOFLIP PdxGetcurrentautoflip; DWORD PdxGetcurrentautoflip( PVOID unnamedParam1, PDDGETCURRENTAUTOFLIPININFO unnamedParam2, PDDGETCURRENTAUTOFLIPOUTINFO unnamedParam3 ) {...}",
            "name": "PDX_GETCURRENTAUTOFLIP callback"
        },
        {
            "signature": "PDX_GETIRQINFO PdxGetirqinfo; DWORD PdxGetirqinfo( PVOID unnamedParam1, PVOID unnamedParam2, PDDGETIRQINFO unnamedParam3 ) {...}",
            "name": "PDX_GETIRQINFO callback"
        },
        {
            "signature": "PDX_GETPOLARITY PdxGetpolarity; DWORD PdxGetpolarity( PVOID unnamedParam1, PDDGETPOLARITYININFO unnamedParam2, PDDGETPOLARITYOUTINFO unnamedParam3 ) {...}",
            "name": "PDX_GETPOLARITY callback"
        },
        {
            "signature": "PDX_GETPREVIOUSAUTOFLIP PdxGetpreviousautoflip; DWORD PdxGetpreviousautoflip( PVOID unnamedParam1, PDDGETPREVIOUSAUTOFLIPININFO unnamedParam2, PDDGETPREVIOUSAUTOFLIPOUTINFO unnamedParam3 ) {...}",
            "name": "PDX_GETPREVIOUSAUTOFLIP callback"
        },
        {
            "signature": "PDX_GETTRANSFERSTATUS PdxGettransferstatus; DWORD PdxGettransferstatus( PVOID unnamedParam1, PVOID unnamedParam2, PDDGETTRANSFEROUTINFO unnamedParam3 ) {...}",
            "name": "PDX_GETTRANSFERSTATUS callback"
        },
        {
            "signature": "PDX_IRQCALLBACK PdxIrqcallback; void PdxIrqcallback( PDX_IRQDATA pIrqData ) {...}",
            "name": "PDX_IRQCALLBACK callback"
        },
        {
            "signature": "PDX_LOCK PdxLock; DWORD PdxLock( PVOID unnamedParam1, PDDLOCKININFO unnamedParam2, PDDLOCKOUTINFO unnamedParam3 ) {...}",
            "name": "PDX_LOCK callback"
        },
        {
            "signature": "PDX_SETSTATE PdxSetstate; DWORD PdxSetstate( PVOID unnamedParam1, PDDSETSTATEININFO unnamedParam2, PDDSETSTATEOUTINFO unnamedParam3 ) {...}",
            "name": "PDX_SETSTATE callback"
        },
        {
            "signature": "PDX_SKIPNEXTFIELD PdxSkipnextfield; DWORD PdxSkipnextfield( PVOID unnamedParam1, PDDSKIPNEXTFIELDINFO unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "PDX_SKIPNEXTFIELD callback"
        },
        {
            "signature": "PDX_TRANSFER PdxTransfer; DWORD PdxTransfer( PVOID unnamedParam1, PDDTRANSFERININFO unnamedParam2, PDDTRANSFEROUTINFO unnamedParam3 ) {...}",
            "name": "PDX_TRANSFER callback"
        }
    ],
    "Dxva2api.h": [
        {
            "signature": "const DXVA2_Fixed32 DXVA2_Fixed32OpaqueAlpha();",
            "name": "DXVA2_Fixed32OpaqueAlpha"
        },
        {
            "signature": "const DXVA2_Fixed32 DXVA2_Fixed32TransparentAlpha();",
            "name": "DXVA2_Fixed32TransparentAlpha"
        },
        {
            "signature": "HRESULT DXVA2CreateDirect3DDeviceManager9( [out] UINT *pResetToken, [out] IDirect3DDeviceManager9 **ppDeviceManager );",
            "name": "DXVA2CreateDirect3DDeviceManager9"
        },
        {
            "signature": "HRESULT DXVA2CreateVideoService( IDirect3DDevice9 *pDD, REFIID riid, void **ppService );",
            "name": "DXVA2CreateVideoService"
        },
        {
            "signature": "float DXVA2FixedToFloat( [in] const DXVA2_Fixed32 _fixed_ );",
            "name": "DXVA2FixedToFloat"
        },
        {
            "signature": "DXVA2_Fixed32 DXVA2FloatToFixed( [in] const float _float_ );",
            "name": "DXVA2FloatToFixed"
        }
    ],
    "Dxva9typ.h": [],
    "Dxvahd.h": [
        {
            "signature": "HRESULT DXVAHD_CreateDevice( [in] IDirect3DDevice9Ex *pD3DDevice, [in] const DXVAHD_CONTENT_DESC *pContentDesc, [in] DXVAHD_DEVICE_USAGE Usage, [in] PDXVAHDSW_Plugin pPlugin, [out] IDXVAHD_Device **ppDevice );",
            "name": "DXVAHD_CreateDevice"
        },
        {
            "signature": "PDXVAHDSW_CreateDevice PdxvahdswCreatedevice; HRESULT PdxvahdswCreatedevice( [in] IDirect3DDevice9Ex *pD3DDevice, [out] HANDLE *phDevice ) {...}",
            "name": "PDXVAHDSW_CreateDevice callback"
        },
        {
            "signature": "PDXVAHDSW_CreateVideoProcessor PdxvahdswCreatevideoprocessor; HRESULT PdxvahdswCreatevideoprocessor( [in] HANDLE hDevice, [in] const GUID *pVPGuid, [out] HANDLE *phVideoProcessor ) {...}",
            "name": "PDXVAHDSW_CreateVideoProcessor callback"
        },
        {
            "signature": "PDXVAHDSW_DestroyDevice PdxvahdswDestroydevice; HRESULT PdxvahdswDestroydevice( [in] HANDLE hDevice ) {...}",
            "name": "PDXVAHDSW_DestroyDevice callback"
        },
        {
            "signature": "PDXVAHDSW_DestroyVideoProcessor PdxvahdswDestroyvideoprocessor; HRESULT PdxvahdswDestroyvideoprocessor( [in] HANDLE hVideoProcessor ) {...}",
            "name": "PDXVAHDSW_DestroyVideoProcessor callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessBltStatePrivate PdxvahdswGetvideoprocessbltstateprivate; HRESULT PdxvahdswGetvideoprocessbltstateprivate( [in] HANDLE hVideoProcessor, [in, out] DXVAHD_BLT_STATE_PRIVATE_DATA *pData ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessBltStatePrivate callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorCaps PdxvahdswGetvideoprocessorcaps; HRESULT PdxvahdswGetvideoprocessorcaps( [in] HANDLE hDevice, [in] const DXVAHD_CONTENT_DESC *pContentDesc, [in] DXVAHD_DEVICE_USAGE Usage, [in] UINT Count, [out] DXVAHD_VPCAPS *pCaps ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorCaps callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorCustomRates PdxvahdswGetvideoprocessorcustomrates; HRESULT PdxvahdswGetvideoprocessorcustomrates( [in] HANDLE hDevice, [in] const GUID *pVPGuid, [in] UINT Count, [out] DXVAHD_CUSTOM_RATE_DATA *pRates ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorCustomRates callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorDeviceCaps PdxvahdswGetvideoprocessordevicecaps; HRESULT PdxvahdswGetvideoprocessordevicecaps( [in] HANDLE hDevice, [in] const DXVAHD_CONTENT_DESC *pContentDesc, [in] DXVAHD_DEVICE_USAGE Usage, [out] DXVAHD_VPDEVCAPS *pCaps ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorDeviceCaps callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorFilterRange PdxvahdswGetvideoprocessorfilterrange; HRESULT PdxvahdswGetvideoprocessorfilterrange( [in] HANDLE hDevice, [in] DXVAHD_FILTER Filter, [out] DXVAHD_FILTER_RANGE_DATA *pRange ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorFilterRange callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorInputFormats PdxvahdswGetvideoprocessorinputformats; HRESULT PdxvahdswGetvideoprocessorinputformats( [in] HANDLE hDevice, [in] const DXVAHD_CONTENT_DESC *pContentDesc, [in] DXVAHD_DEVICE_USAGE Usage, [in] UINT Count, [out] D3DFORMAT *pFormats ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorInputFormats callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessorOutputFormats PdxvahdswGetvideoprocessoroutputformats; HRESULT PdxvahdswGetvideoprocessoroutputformats( [in] HANDLE hDevice, [in] const DXVAHD_CONTENT_DESC *pContentDesc, [in] DXVAHD_DEVICE_USAGE Usage, [in] UINT Count, [out] D3DFORMAT *pFormats ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessorOutputFormats callback"
        },
        {
            "signature": "PDXVAHDSW_GetVideoProcessStreamStatePrivate PdxvahdswGetvideoprocessstreamstateprivate; HRESULT PdxvahdswGetvideoprocessstreamstateprivate( [in] HANDLE hVideoProcessor, [in] UINT StreamNumber, [in, out] DXVAHD_STREAM_STATE_PRIVATE_DATA *pData ) {...}",
            "name": "PDXVAHDSW_GetVideoProcessStreamStatePrivate callback"
        },
        {
            "signature": "PDXVAHDSW_Plugin PdxvahdswPlugin; HRESULT PdxvahdswPlugin( [in] UINT Size, [out] void *pCallbacks ) {...}",
            "name": "PDXVAHDSW_Plugin callback"
        },
        {
            "signature": "PDXVAHDSW_ProposeVideoPrivateFormat PdxvahdswProposevideoprivateformat; HRESULT PdxvahdswProposevideoprivateformat( [in] HANDLE hDevice, [in, out] D3DFORMAT *pFormat ) {...}",
            "name": "PDXVAHDSW_ProposeVideoPrivateFormat callback"
        },
        {
            "signature": "PDXVAHDSW_SetVideoProcessBltState PdxvahdswSetvideoprocessbltstate; HRESULT PdxvahdswSetvideoprocessbltstate( [in] HANDLE hVideoProcessor, [in] DXVAHD_BLT_STATE State, [in] UINT DataSize, [in] const void *pData ) {...}",
            "name": "PDXVAHDSW_SetVideoProcessBltState callback"
        },
        {
            "signature": "PDXVAHDSW_SetVideoProcessStreamState PdxvahdswSetvideoprocessstreamstate; HRESULT PdxvahdswSetvideoprocessstreamstate( [in] HANDLE hVideoProcessor, [in] UINT StreamNumber, [in] DXVAHD_STREAM_STATE State, [in] UINT DataSize, [in] const void *pData ) {...}",
            "name": "PDXVAHDSW_SetVideoProcessStreamState callback"
        },
        {
            "signature": "PDXVAHDSW_VideoProcessBltHD PdxvahdswVideoprocessblthd; HRESULT PdxvahdswVideoprocessblthd( [in] HANDLE hVideoProcessor, [in] IDirect3DSurface9 *pOutputSurface, [in] UINT OutputFrame, [in] UINT StreamCount, [in] const DXVAHD_STREAM_DATA *pStreams ) {...}",
            "name": "PDXVAHDSW_VideoProcessBltHD callback"
        }
    ],
    "Eapauthenticatoractiondefine.h": [],
    "Eapauthenticatortypes.h": [],
    "Eaphostpeerconfigapis.h": [
        {
            "signature": "DWORD EapHostPeerConfigBlob2Xml( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwSizeOfConfigIn, [in] BYTE *pConfigIn, [out] IXMLDOMDocument2 **ppConfigDoc, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerConfigBlob2Xml"
        },
        {
            "signature": "DWORD EapHostPeerConfigXml2Blob( [in] DWORD dwFlags, [in] IXMLDOMNode *pConfigDoc, [out] DWORD *pdwSizeOfConfigOut, [out] BYTE **ppConfigOut, [out] EAP_METHOD_TYPE *pEapMethodType, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerConfigXml2Blob"
        },
        {
            "signature": "DWORD EapHostPeerCredentialsXml2Blob( [in] DWORD dwFlags, [in] IXMLDOMNode *pCredentialsDoc, [in] DWORD dwSizeOfConfigIn, [in] BYTE *pConfigIn, [out] DWORD *pdwSizeOfCredentialsOut, [out] BYTE **ppCredentialsOut, [out] EAP_METHOD_TYPE *pEapMethodType, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerCredentialsXml2Blob"
        },
        {
            "signature": "void EapHostPeerFreeErrorMemory( EAP_ERROR *pEapError );",
            "name": "EapHostPeerFreeErrorMemory"
        },
        {
            "signature": "void EapHostPeerFreeMemory( BYTE *pData );",
            "name": "EapHostPeerFreeMemory"
        },
        {
            "signature": "DWORD EapHostPeerGetMethodProperties( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] HANDLE hUserImpersonationToken, [in] DWORD dwEapConnDataSize, [in] const BYTE *pbEapConnData, [in] DWORD dwUserDataSize, [in] const BYTE *pbUserData, [out] EAP_METHOD_PROPERTY_ARRAY *pMethodPropertyArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetMethodProperties"
        },
        {
            "signature": "DWORD EapHostPeerGetMethods( [out] EAP_METHOD_INFO_ARRAY *pEapMethodInfoArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetMethods"
        },
        {
            "signature": "DWORD EapHostPeerInvokeConfigUI( [in] HWND hwndParent, [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwSizeOfConfigIn, [in] const BYTE *pConfigIn, [out] DWORD *pdwSizeOfConfigOut, [out] BYTE **ppConfigOut, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerInvokeConfigUI"
        },
        {
            "signature": "DWORD EapHostPeerInvokeIdentityUI( [in] DWORD dwVersion, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwFlags, [in] HWND hwndParent, [in] DWORD dwSizeofConnectionData, [in] const BYTE *pConnectionData, [in] DWORD dwSizeofUserData, [in] const BYTE *pUserData, [in, out] DWORD *pdwSizeOfUserDataOut, [out] BYTE **ppUserDataOut, [out] LPWSTR *ppwszIdentity, [out] EAP_ERROR **ppEapError, [in, out] LPVOID *ppvReserved );",
            "name": "EapHostPeerInvokeIdentityUI"
        },
        {
            "signature": "DWORD EapHostPeerInvokeInteractiveUI( [in] HWND hwndParent, [in] DWORD dwSizeofUIContextData, [in] const BYTE *pUIContextData, [out] DWORD *pdwSizeOfDataFromInteractiveUI, [out] BYTE **ppDataFromInteractiveUI, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerInvokeInteractiveUI"
        },
        {
            "signature": "DWORD EapHostPeerQueryCredentialInputFields( [in] HANDLE hUserImpersonationToken, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwFlags, [in] DWORD dwEapConnDataSize, [in] const BYTE *pbEapConnData, [out] EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigInputFieldArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerQueryCredentialInputFields"
        },
        {
            "signature": "DWORD EapHostPeerQueryInteractiveUIInputFields( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] DWORD dwSizeofUIContextData, [in] const BYTE *pUIContextData, [out] EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, [out] EAP_ERROR **ppEapError, [in, out] LPVOID *ppvReserved );",
            "name": "EapHostPeerQueryInteractiveUIInputFields"
        },
        {
            "signature": "DWORD EapHostPeerQueryUIBlobFromInteractiveUIInputFields( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] DWORD dwSizeofUIContextData, [in] const BYTE *pUIContextData, [in] const EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, [in, out] DWORD *pdwSizeOfDataFromInteractiveUI, [in, out] BYTE **ppDataFromInteractiveUI, [out] EAP_ERROR **ppEapError, [in, out] LPVOID *ppvReserved );",
            "name": "EapHostPeerQueryUIBlobFromInteractiveUIInputFields"
        },
        {
            "signature": "DWORD EapHostPeerQueryUserBlobFromCredentialInputFields( [in] HANDLE hUserImpersonationToken, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwFlags, [in] DWORD dwEapConnDataSize, [in] const BYTE *pbEapConnData, [in] const EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigInputFieldArray, [in, out] DWORD *pdwUserBlobSize, [in, out] BYTE **ppbUserBlob, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerQueryUserBlobFromCredentialInputFields"
        }
    ],
    "Eaphostpeertypes.h": [],
    "Eapmethodauthenticatorapis.h": [
        {
            "signature": "DWORD EapMethodAuthenticatorBeginSession( [in] DWORD dwFlags, [in] BYTE bInitialId, LPCWSTR pwszIdentity, [in] const EapAttributes * const pAttributeArray, [in] DWORD dwSizeofConnectionData, const BYTE * const pConnectionData, [in] DWORD dwMaxSendPacketSize, [out] EAP_SESSION_HANDLE *pSessionHandle, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorBeginSession"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorEndSession( [in] EAP_SESSION_HANDLE sessionHandle, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorEndSession"
        },
        {
            "signature": "void EapMethodAuthenticatorFreeErrorMemory( [in] EAP_ERROR *pEapError );",
            "name": "EapMethodAuthenticatorFreeErrorMemory"
        },
        {
            "signature": "void EapMethodAuthenticatorFreeMemory( [in] void *pUIContextData );",
            "name": "EapMethodAuthenticatorFreeMemory"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorGetAttributes( [in] EAP_SESSION_HANDLE sessionHandle, [out] EapAttributes *pAttribs, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorGetAttributes"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorGetInfo( [in] EAP_METHOD_TYPE *pEapType, [out] EAP_AUTHENTICATOR_METHOD_ROUTINES *pEapInfo, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorGetInfo"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorGetResult( [in] EAP_SESSION_HANDLE sessionHandle, [out] EAP_METHOD_AUTHENTICATOR_RESULT *pResult, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorGetResult"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorInitialize( [in] EAP_METHOD_TYPE *pEapType, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorInitialize"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorInvokeConfigUI( [in] EAP_METHOD_TYPE *pEapMethodType, [in] HWND hwndParent, [in] DWORD dwFlags, [in] LPCWSTR pwszMachineName, [in] DWORD dwSizeOfConfigIn, [in] BYTE *pConfigIn, [out] DWORD *pdwSizeOfConfigOut, [out] BYTE **ppConfigOut, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorInvokeConfigUI"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorReceivePacket( [in] EAP_SESSION_HANDLE sessionHandle, [in] DWORD cbReceivePacket, [in] const EapPacket * const pReceivePacket, [out] EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorReceivePacket"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorSendPacket( [in] EAP_SESSION_HANDLE sessionHandle, [in] BYTE bPacketId, [in, out] DWORD *pcbSendPacket, [out] EapPacket *pSendPacket, [out] EAP_AUTHENTICATOR_SEND_TIMEOUT *pTimeout, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorSendPacket"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorSetAttributes( [in] EAP_SESSION_HANDLE sessionHandle, [in] const EapAttributes * const pAttribs, [out] EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorSetAttributes"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorShutdown( [in] EAP_METHOD_TYPE *pEapType, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorShutdown"
        },
        {
            "signature": "DWORD EapMethodAuthenticatorUpdateInnerMethodParams( [in] EAP_SESSION_HANDLE sessionHandle, [in] DWORD dwFlags, [in] const WCHAR *pwszIdentity, [in] const EapAttributes * const pAttributeArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapMethodAuthenticatorUpdateInnerMethodParams"
        }
    ],
    "Eapmethodpeerapis.h": [
        {
            "signature": "DWORD EapPeerBeginSession( [in] DWORD dwFlags, [in] const EapAttributes * const pAttributeArray, [in] HANDLE hTokenImpersonateUser, [in] DWORD dwSizeofConnectionData, [in] BYTE *pConnectionData, [in] DWORD dwSizeofUserData, [in] BYTE *pUserData, [in] DWORD dwMaxSendPacketSize, [out] EAP_SESSION_HANDLE *pSessionHandle, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerBeginSession"
        },
        {
            "signature": "DWORD EapPeerConfigBlob2Xml( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] const BYTE *pConfigIn, [in] DWORD dwSizeOfConfigIn, [out] IXMLDOMDocument2 **ppConfigDoc, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerConfigBlob2Xml"
        },
        {
            "signature": "DWORD EapPeerConfigXml2Blob( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] IXMLDOMDocument2 *pConfigDoc, [out] BYTE **ppConfigOut, [out] DWORD *pdwSizeOfConfigOut, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerConfigXml2Blob"
        },
        {
            "signature": "DWORD EapPeerCredentialsXml2Blob( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] IXMLDOMDocument2 *pCredentialsDoc, [in] const BYTE *pConfigIn, [in] DWORD dwSizeOfConfigIn, [out] BYTE **ppCredentialsOut, [out] DWORD *pdwSizeOfCredentialsOut, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerCredentialsXml2Blob"
        },
        {
            "signature": "DWORD EapPeerEndSession( [in] EAP_SESSION_HANDLE sessionHandle, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerEndSession"
        },
        {
            "signature": "void EapPeerFreeErrorMemory( [in] EAP_ERROR *pEapError );",
            "name": "EapPeerFreeErrorMemory"
        },
        {
            "signature": "void EapPeerFreeMemory( [in] void *pUIContextData );",
            "name": "EapPeerFreeMemory"
        },
        {
            "signature": "DWORD EapPeerGetConfigBlobAndUserBlob( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] EapCredential eapCredential, [out] DWORD *pdwConfigBlobSize, [out] BYTE **ppConfigBlob, [out] DWORD *pdwUserBlobSize, [out] BYTE **ppUserBlob, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetConfigBlobAndUserBlob"
        },
        {
            "signature": "DWORD EapPeerGetIdentity( [in] DWORD dwFlags, [in] DWORD dwSizeofConnectionData, [in] const BYTE *pConnectionData, [in] DWORD dwSizeofUserData, [in] const BYTE *pUserData, [in] HANDLE hTokenImpersonateUser, [out] BOOL *pfInvokeUI, [in, out] DWORD *pdwSizeOfUserDataOut, [out] BYTE **ppUserDataOut, [out] LPWSTR *ppwszIdentity, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetIdentity"
        },
        {
            "signature": "DWORD EapPeerGetInfo( [in] EAP_TYPE *pEapType, [out] EAP_PEER_METHOD_ROUTINES *pEapInfo, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetInfo"
        },
        {
            "signature": "DWORD EapPeerGetMethodProperties( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] HANDLE hUserImpersonationToken, [in] DWORD dwSizeOfConnectionDataIn, [in] BYTE *pConnectionDataIn, [in] DWORD dwSizeOfUserDataIn, [in] BYTE *pUserDataIn, [out] EAP_METHOD_PROPERTY_ARRAY *pMethodPropertyArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetMethodProperties"
        },
        {
            "signature": "DWORD EapPeerGetResponseAttributes( [in] EAP_SESSION_HANDLE sessionHandle, [out] EapAttributes *pAttribs, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetResponseAttributes"
        },
        {
            "signature": "DWORD EapPeerGetResponsePacket( [in] EAP_SESSION_HANDLE sessionHandle, [in, out] DWORD *pcbSendPacket, [out] EapPacket *pSendPacket, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetResponsePacket"
        },
        {
            "signature": "DWORD EapPeerGetResult( [in] EAP_SESSION_HANDLE sessionHandle, [in] EapPeerMethodResultReason reason, [out] EapPeerMethodResult *ppResult, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetResult"
        },
        {
            "signature": "DWORD EapPeerGetUIContext( [in] EAP_SESSION_HANDLE sessionHandle, [out] DWORD *pdwSizeOfUIContextData, [out] BYTE **ppUIContextData, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerGetUIContext"
        },
        {
            "signature": "DWORD EapPeerInitialize( [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerInitialize"
        },
        {
            "signature": "DWORD EapPeerInvokeConfigUI( [in] EAP_METHOD_TYPE *pEapType, [in] HWND hwndParent, [in] DWORD dwFlags, [in] DWORD dwSizeOfConnectionDataIn, [in] BYTE *pConnectionDataIn, [out] DWORD *pdwSizeOfConnectionDataOut, [out] BYTE **ppConnectionDataOut, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerInvokeConfigUI"
        },
        {
            "signature": "DWORD EapPeerInvokeIdentityUI( [in] EAP_METHOD_TYPE *pEapType, [in] DWORD dwFlags, [in] HWND hwndParent, [in] DWORD dwSizeOfConnectionData, [in] const BYTE *pConnectionData, [out] DWORD dwSizeOfUserData, [in] const BYTE *pUserData, [out] DWORD *pdwSizeOfUserDataOut, [out] BYTE **ppUserDataOut, [out] LPWSTR *ppwszIdentity, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerInvokeIdentityUI"
        },
        {
            "signature": "DWORD EapPeerInvokeInteractiveUI( [in] EAP_METHOD_TYPE *pEapType, [in] HWND hwndParent, [in] DWORD dwSizeofUIContextData, [in] BYTE *pUIContextData, [out] DWORD *pdwSizeOfDataFromInteractiveUI, [out] BYTE **ppDataFromInteractiveUI, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerInvokeInteractiveUI"
        },
        {
            "signature": "DWORD EapPeerProcessRequestPacket( [in] EAP_SESSION_HANDLE sessionHandle, [in] DWORD cbReceivedPacket, [in] EapPacket *pReceivedPacket, [out] EapPeerMethodOutput *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerProcessRequestPacket"
        },
        {
            "signature": "DWORD EapPeerQueryCredentialInputFields( [in] HANDLE hUserImpersonationToken, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwFlags, [in] DWORD dwEapConnDataSize, [in] BYTE *pbEapConnData, [out] EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigFieldsArray, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerQueryCredentialInputFields"
        },
        {
            "signature": "DWORD EapPeerQueryInteractiveUIInputFields( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] DWORD dwSizeofUIContextData, [in] const BYTE *pUIContextData, [out] EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, [out] EAP_ERROR **ppEapError, [in, out] LPVOID *ppvReserved );",
            "name": "EapPeerQueryInteractiveUIInputFields"
        },
        {
            "signature": "DWORD EapPeerQueryUIBlobFromInteractiveUIInputFields( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] DWORD dwSizeofUIContextData, [in] const BYTE *pUIContextData, [in] const EAP_INTERACTIVE_UI_DATA *pEapInteractiveUIData, [out] DWORD *pdwSizeOfDataFromInteractiveUI, [out] BYTE **ppDataFromInteractiveUI, [out] EAP_ERROR **ppEapError, [in, out] LPVOID *ppvReserved );",
            "name": "EapPeerQueryUIBlobFromInteractiveUIInputFields"
        },
        {
            "signature": "DWORD EapPeerQueryUserBlobFromCredentialInputFields( [in] HANDLE hUserImpersonationToken, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwFlags, [in] DWORD dwEapConnDataSize, [in] BYTE *pbEapConnData, [in] const EAP_CONFIG_INPUT_FIELD_ARRAY *pEapConfigInputFieldArray, [in, out] DWORD *pdwUserBlobSize, [in, out] BYTE **ppbUserBlob, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerQueryUserBlobFromCredentialInputFields"
        },
        {
            "signature": "DWORD EapPeerSetCredentials( [in] EAP_SESSION_HANDLE sessionHandle, [in] LPWSTR pwszIdentity, [in] LPWSTR pwszPassword, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerSetCredentials"
        },
        {
            "signature": "DWORD EapPeerSetResponseAttributes( [in] EAP_SESSION_HANDLE sessionHandle, [in] EapAttributes *pAttribs, [out] EapPeerMethodOutput *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerSetResponseAttributes"
        },
        {
            "signature": "DWORD EapPeerSetUIContext( [in] EAP_SESSION_HANDLE sessionHandle, [in] DWORD dwSizeOfUIContextData, [in] const BYTE *pUIContextData, [in] EapPeerMethodOutput *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerSetUIContext"
        },
        {
            "signature": "DWORD EapPeerShutdown( [out] EAP_ERROR **ppEapError );",
            "name": "EapPeerShutdown"
        }
    ],
    "Eapmethodtypes.h": [],
    "Eappapis.h": [
        {
            "signature": "DWORD EapHostPeerBeginSession( [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapType, [in] const EapAttributes * const pAttributeArray, [in] HANDLE hTokenImpersonateUser, [in] DWORD dwSizeofConnectionData, [in] const BYTE * const pConnectionData, [in] DWORD dwSizeofUserData, [in] const BYTE * const pUserData, [in] DWORD dwMaxSendPacketSize, [in] const GUID * const pConnectionId, [in] NotificationHandler func, [in] void *pContextData, [out] EAP_SESSIONID *pSessionId, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerBeginSession"
        },
        {
            "signature": "DWORD EapHostPeerClearConnection( [in] GUID *pConnectionId, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerClearConnection"
        },
        {
            "signature": "DWORD EapHostPeerEndSession( [in] EAP_SESSIONID sessionHandle, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerEndSession"
        },
        {
            "signature": "void EapHostPeerFreeEapError( [in] EAP_ERROR *pEapError );",
            "name": "EapHostPeerFreeEapError"
        },
        {
            "signature": "void EapHostPeerFreeRuntimeMemory( [in] BYTE *pData );",
            "name": "EapHostPeerFreeRuntimeMemory"
        },
        {
            "signature": "DWORD EapHostPeerGetAuthStatus( [in] EAP_SESSIONID sessionHandle, [in] EapHostPeerAuthParams authParam, [out] DWORD *pcbAuthData, [out] BYTE **ppAuthData, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetAuthStatus"
        },
        {
            "signature": "DWORD EapHostPeerGetDataToUnplumbCredentials( [out] GUID *pConnectionIdThatLastSavedCreds, [out] __int3264 *phCredentialImpersonationToken, [out] EAP_SESSIONID sessionHandle, [in] EAP_ERROR **ppEapError, [out] BOOL *fSaveToCredMan );",
            "name": "EapHostPeerGetDataToUnplumbCredentials"
        },
        {
            "signature": "DWORD EapHostPeerGetIdentity( [in] DWORD dwVersion, [in] DWORD dwFlags, [in] EAP_METHOD_TYPE eapMethodType, [in] DWORD dwSizeofConnectionData, [in] const BYTE *pConnectionData, [in] DWORD dwSizeofUserData, [in] const BYTE *pUserData, [in] HANDLE hTokenImpersonateUser, [out] BOOL *pfInvokeUI, [in, out] DWORD *pdwSizeOfUserDataOut, [out] BYTE **ppUserDataOut, [out] LPWSTR *ppwszIdentity, [out] EAP_ERROR **ppEapError, [in, out] BYTE **ppvReserved );",
            "name": "EapHostPeerGetIdentity"
        },
        {
            "signature": "DWORD EapHostPeerGetResponseAttributes( [in] EAP_SESSIONID sessionHandle, [out] EapAttributes *pAttribs, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetResponseAttributes"
        },
        {
            "signature": "DWORD EapHostPeerGetResult( [in] EAP_SESSIONID sessionHandle, [in] EapHostPeerMethodResultReason reason, [out] EapHostPeerMethodResult *ppResult, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetResult"
        },
        {
            "signature": "DWORD EapHostPeerGetSendPacket( [in] EAP_SESSIONID sessionHandle, [out] DWORD *pcbSendPacket, [out] BYTE **ppSendPacket, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetSendPacket"
        },
        {
            "signature": "DWORD EapHostPeerGetUIContext( [in] EAP_SESSIONID sessionHandle, [out] DWORD *pdwSizeOfUIContextData, [out] BYTE **ppUIContextData, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerGetUIContext"
        },
        {
            "signature": "DWORD EapHostPeerInitialize();",
            "name": "EapHostPeerInitialize"
        },
        {
            "signature": "DWORD EapHostPeerProcessReceivedPacket( [in] EAP_SESSIONID sessionHandle, [in] DWORD cbReceivePacket, [in] const BYTE * const pReceivePacket, [out] EapHostPeerResponseAction *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerProcessReceivedPacket"
        },
        {
            "signature": "DWORD EapHostPeerSetResponseAttributes( [in] EAP_SESSIONID sessionHandle, [in] const EapAttributes * const pAttribs, [out] EapHostPeerResponseAction *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerSetResponseAttributes"
        },
        {
            "signature": "DWORD EapHostPeerSetUIContext( [in] EAP_SESSIONID sessionHandle, [in] DWORD dwSizeOfUIContextData, [in] const BYTE * const pUIContextData, [out] EapHostPeerResponseAction *pEapOutput, [out] EAP_ERROR **ppEapError );",
            "name": "EapHostPeerSetUIContext"
        },
        {
            "signature": "void EapHostPeerUninitialize();",
            "name": "EapHostPeerUninitialize"
        },
        {
            "signature": "NotificationHandler Notificationhandler; void Notificationhandler( [in] GUID connectionId, [in] void *pContextData ) {...}",
            "name": "NotificationHandler callback"
        }
    ],
    "Eaptypes.h": [],
    "Editionupgradehelper.h": [],
    "Edpwin32.h": [
        {
            "signature": "HRESULT ProtectFileToEnterpriseIdentity( [in] PCWSTR fileOrFolderPath, [in] PCWSTR identity );",
            "name": "ProtectFileToEnterpriseIdentity"
        }
    ],
    "Efswrtinterop.h": [],
    "Ehstorapi.h": [],
    "Ehstorextensions.h": [],
    "Elscore.h": [
        {
            "signature": "HRESULT MappingDoAction( [in, out] PMAPPING_PROPERTY_BAG pBag, [in] DWORD dwRangeIndex, [in] LPCWSTR pszActionId );",
            "name": "MappingDoAction"
        },
        {
            "signature": "HRESULT MappingFreePropertyBag( [in] PMAPPING_PROPERTY_BAG pBag );",
            "name": "MappingFreePropertyBag"
        },
        {
            "signature": "HRESULT MappingFreeServices( [in] PMAPPING_SERVICE_INFO pServiceInfo );",
            "name": "MappingFreeServices"
        },
        {
            "signature": "HRESULT MappingGetServices( [in, optional] PMAPPING_ENUM_OPTIONS pOptions, [out] PMAPPING_SERVICE_INFO *prgServices, [out] DWORD *pdwServicesCount );",
            "name": "MappingGetServices"
        },
        {
            "signature": "HRESULT MappingRecognizeText( [in] PMAPPING_SERVICE_INFO pServiceInfo, [in] LPCWSTR pszText, [in] DWORD dwLength, [in] DWORD dwIndex, [in, optional] PMAPPING_OPTIONS pOptions, [in, out] PMAPPING_PROPERTY_BAG pbag );",
            "name": "MappingRecognizeText"
        },
        {
            "signature": "PFN_MAPPINGCALLBACKPROC PfnMappingcallbackproc; void PfnMappingcallbackproc( [in] _MAPPING_PROPERTY_BAG *pBag, [in] LPVOID data, [in] DWORD dwDataSize, [in] HRESULT Result ) {...}",
            "name": "PFN_MAPPINGCALLBACKPROC callback"
        }
    ],
    "Emi.h": [],
    "Emptyvc.h": [],
    "Enclaveapi.h": [
        {
            "signature": "BOOL CallEnclave( [in] LPENCLAVE_ROUTINE lpRoutine, [in] LPVOID lpParameter, [in] BOOL fWaitForThread, [out] LPVOID *lpReturnValue );",
            "name": "CallEnclave"
        },
        {
            "signature": "LPVOID CreateEnclave( [in] HANDLE hProcess, [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] SIZE_T dwInitialCommitment, [in] DWORD flEnclaveType, [in] LPCVOID lpEnclaveInformation, [in] DWORD dwInfoLength, [out, optional] LPDWORD lpEnclaveError );",
            "name": "CreateEnclave"
        },
        {
            "signature": "BOOL DeleteEnclave( [in] LPVOID lpAddress );",
            "name": "DeleteEnclave"
        },
        {
            "signature": "BOOL InitializeEnclave( [in] HANDLE hProcess, [in] LPVOID lpAddress, [in] LPCVOID lpEnclaveInformation, [in] DWORD dwInfoLength, [in] LPDWORD lpEnclaveError );",
            "name": "InitializeEnclave"
        },
        {
            "signature": "BOOL IsEnclaveTypeSupported( [in] DWORD flEnclaveType );",
            "name": "IsEnclaveTypeSupported"
        },
        {
            "signature": "BOOL LoadEnclaveData( [in] HANDLE hProcess, [in] LPVOID lpAddress, [in] LPCVOID lpBuffer, [in] SIZE_T nSize, [in] DWORD flProtect, [in] LPCVOID lpPageInformation, [in] DWORD dwInfoLength, [out] PSIZE_T lpNumberOfBytesWritten, [out, optional] LPDWORD lpEnclaveError );",
            "name": "LoadEnclaveData"
        },
        {
            "signature": "BOOL LoadEnclaveImageA( [in] LPVOID lpEnclaveAddress, [in] LPCSTR lpImageName );",
            "name": "LoadEnclaveImageA"
        },
        {
            "signature": "BOOL LoadEnclaveImageW( [in] LPVOID lpEnclaveAddress, [in] LPCWSTR lpImageName );",
            "name": "LoadEnclaveImageW"
        },
        {
            "signature": "BOOL TerminateEnclave( [in] LPVOID lpAddress, [in] BOOL fWait );",
            "name": "TerminateEnclave"
        }
    ],
    "Endpointvolume.h": [],
    "Errhandlingapi.h": [
        {
            "signature": "PVOID AddVectoredContinueHandler( ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );",
            "name": "AddVectoredContinueHandler"
        },
        {
            "signature": "PVOID AddVectoredExceptionHandler( ULONG First, PVECTORED_EXCEPTION_HANDLER Handler );",
            "name": "AddVectoredExceptionHandler"
        },
        {
            "signature": "void FatalAppExitA( [in] UINT uAction, [in] LPCSTR lpMessageText );",
            "name": "FatalAppExitA"
        },
        {
            "signature": "void FatalAppExitW( [in] UINT uAction, [in] LPCWSTR lpMessageText );",
            "name": "FatalAppExitW"
        },
        {
            "signature": "UINT GetErrorMode();",
            "name": "GetErrorMode"
        },
        {
            "signature": "_Post_equals_last_error_ DWORD GetLastError();",
            "name": "GetLastError"
        },
        {
            "signature": "DWORD GetThreadErrorMode();",
            "name": "GetThreadErrorMode"
        },
        {
            "signature": "void RaiseException( [in] DWORD dwExceptionCode, [in] DWORD dwExceptionFlags, [in] DWORD nNumberOfArguments, [in] const ULONG_PTR *lpArguments );",
            "name": "RaiseException"
        },
        {
            "signature": "void RaiseFailFastException( [in, optional] PEXCEPTION_RECORD pExceptionRecord, [in, optional] PCONTEXT pContextRecord, [in] DWORD dwFlags );",
            "name": "RaiseFailFastException"
        },
        {
            "signature": "ULONG RemoveVectoredContinueHandler( PVOID Handle );",
            "name": "RemoveVectoredContinueHandler"
        },
        {
            "signature": "ULONG RemoveVectoredExceptionHandler( PVOID Handle );",
            "name": "RemoveVectoredExceptionHandler"
        },
        {
            "signature": "UINT SetErrorMode( [in] UINT uMode );",
            "name": "SetErrorMode"
        },
        {
            "signature": "void SetLastError( [in] DWORD dwErrCode );",
            "name": "SetLastError"
        },
        {
            "signature": "BOOL SetThreadErrorMode( [in] DWORD dwNewMode, [out] LPDWORD lpOldMode );",
            "name": "SetThreadErrorMode"
        },
        {
            "signature": "LPTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter( [in] LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter );",
            "name": "SetUnhandledExceptionFilter"
        },
        {
            "signature": "LONG UnhandledExceptionFilter( [in] _EXCEPTION_POINTERS *ExceptionInfo );",
            "name": "UnhandledExceptionFilter"
        }
    ],
    "Errorrep.h": [
        {
            "signature": "BOOL AddERExcludedApplicationA( [in] LPCSTR szApplication );",
            "name": "AddERExcludedApplicationA"
        },
        {
            "signature": "BOOL AddERExcludedApplicationW( LPCWSTR wszApplication );",
            "name": "AddERExcludedApplicationW"
        },
        {
            "signature": "EFaultRepRetVal ReportFault( [in] LPEXCEPTION_POINTERS pep, [in] DWORD dwOpt );",
            "name": "ReportFault"
        },
        {
            "signature": "HRESULT WerReportHang( [in] HWND hwndHungApp, [in, optional] PCWSTR pwzHungApplicationName );",
            "name": "WerReportHang"
        }
    ],
    "Errors.h": [
        {
            "signature": "AMOVIEAPI DWORD AMGetErrorTextA( HRESULT hr, LPSTR pbuffer, DWORD MaxLen );",
            "name": "AMGetErrorTextA"
        },
        {
            "signature": "AMOVIEAPI DWORD AMGetErrorTextW( HRESULT hr, LPWSTR pbuffer, DWORD MaxLen );",
            "name": "AMGetErrorTextW"
        }
    ],
    "Evalcom2.h": [
        {
            "signature": "LPDISPLAYVAL Lpdisplayval; BOOL Lpdisplayval( LPVOID pContext, [in] RESULTTYPES uiType, [in] LPCWSTR szwVal, [in] LPCWSTR szwDescription, [in] LPCWSTR szwLocation ) {...}",
            "name": "LPDISPLAYVAL callback"
        },
        {
            "signature": "LPEVALCOMCALLBACK Lpevalcomcallback; BOOL Lpevalcomcallback( [in] STATUSTYPES iStatus, LPCWSTR szData, LPVOID pContext ) {...}",
            "name": "LPEVALCOMCALLBACK callback"
        }
    ],
    "Evcoll.h": [
        {
            "signature": "BOOL EcClose( [in] EC_HANDLE Object );",
            "name": "EcClose"
        },
        {
            "signature": "BOOL EcDeleteSubscription( [in] LPCWSTR SubscriptionName, [in] DWORD Flags );",
            "name": "EcDeleteSubscription"
        },
        {
            "signature": "BOOL EcEnumNextSubscription( [in] EC_HANDLE SubscriptionEnum, [in] DWORD SubscriptionNameBufferSize, [in] LPWSTR SubscriptionNameBuffer, [out] PDWORD SubscriptionNameBufferUsed );",
            "name": "EcEnumNextSubscription"
        },
        {
            "signature": "BOOL EcGetObjectArrayProperty( [in] EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [in] EC_SUBSCRIPTION_PROPERTY_ID PropertyId, [in] DWORD ArrayIndex, [in] DWORD Flags, [in] DWORD PropertyValueBufferSize, [in] PEC_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EcGetObjectArrayProperty"
        },
        {
            "signature": "BOOL EcGetObjectArraySize( [in] EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [out] PDWORD ObjectArraySize );",
            "name": "EcGetObjectArraySize"
        },
        {
            "signature": "BOOL EcGetSubscriptionProperty( [in] EC_HANDLE Subscription, [in] EC_SUBSCRIPTION_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] DWORD PropertyValueBufferSize, [in] PEC_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EcGetSubscriptionProperty"
        },
        {
            "signature": "BOOL EcGetSubscriptionRunTimeStatus( [in] LPCWSTR SubscriptionName, [in] EC_SUBSCRIPTION_RUNTIME_STATUS_INFO_ID StatusInfoId, [in] LPCWSTR EventSourceName, [in] DWORD Flags, [in] DWORD StatusValueBufferSize, [in] PEC_VARIANT StatusValueBuffer, [out] PDWORD StatusValueBufferUsed );",
            "name": "EcGetSubscriptionRunTimeStatus"
        },
        {
            "signature": "BOOL EcInsertObjectArrayElement( [in] EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [in] DWORD ArrayIndex );",
            "name": "EcInsertObjectArrayElement"
        },
        {
            "signature": "EC_HANDLE EcOpenSubscription( [in] LPCWSTR SubscriptionName, [in] DWORD AccessMask, [in] DWORD Flags );",
            "name": "EcOpenSubscription"
        },
        {
            "signature": "EC_HANDLE EcOpenSubscriptionEnum( [in] DWORD Flags );",
            "name": "EcOpenSubscriptionEnum"
        },
        {
            "signature": "BOOL EcRemoveObjectArrayElement( [in] EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [in] DWORD ArrayIndex );",
            "name": "EcRemoveObjectArrayElement"
        },
        {
            "signature": "BOOL EcRetrySubscription( [in] LPCWSTR SubscriptionName, [in] LPCWSTR EventSourceName, [in] DWORD Flags );",
            "name": "EcRetrySubscription"
        },
        {
            "signature": "BOOL EcSaveSubscription( [in] EC_HANDLE Subscription, [in] DWORD Flags );",
            "name": "EcSaveSubscription"
        },
        {
            "signature": "BOOL EcSetObjectArrayProperty( [in] EC_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [in] EC_SUBSCRIPTION_PROPERTY_ID PropertyId, [in] DWORD ArrayIndex, [in] DWORD Flags, [in] PEC_VARIANT PropertyValue );",
            "name": "EcSetObjectArrayProperty"
        },
        {
            "signature": "BOOL EcSetSubscriptionProperty( [in] EC_HANDLE Subscription, [in] EC_SUBSCRIPTION_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] PEC_VARIANT PropertyValue );",
            "name": "EcSetSubscriptionProperty"
        }
    ],
    "Eventsys.h": [],
    "Eventtoken.h": [],
    "Evntcons.h": [
        {
            "signature": "EVNTCONS_INLINE VOID EtwGetTraitFromProviderTraits( [in] PVOID ProviderTraits, [in] UCHAR TraitType, [out] PVOID *Trait, [out] PUSHORT Size );",
            "name": "EtwGetTraitFromProviderTraits"
        },
        {
            "signature": "EVNTCONS_INLINE ULONG GetEventProcessorIndex( PCEVENT_RECORD EventRecord );",
            "name": "GetEventProcessorIndex"
        }
    ],
    "Evntprov.h": [
        {
            "signature": "ULONG EVNTAPI EventActivityIdControl( [in] ULONG ControlCode, [in, out] LPGUID ActivityId );",
            "name": "EventActivityIdControl"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE VOID EventDataDescCreate( [out] PEVENT_DATA_DESCRIPTOR EventDataDescriptor, [in] const VOID *DataPtr, [in] ULONG DataSize );",
            "name": "EventDataDescCreate"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE VOID EventDescCreate( [out] PEVENT_DESCRIPTOR EventDescriptor, [in] USHORT Id, [in] UCHAR Version, [in] UCHAR Channel, [in] UCHAR Level, [in] USHORT Task, [in] UCHAR Opcode, [in] ULONGLONG Keyword );",
            "name": "EventDescCreate"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE UCHAR EventDescGetChannel( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetChannel"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE USHORT EventDescGetId( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetId"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE ULONGLONG EventDescGetKeyword( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetKeyword"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE UCHAR EventDescGetLevel( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetLevel"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE UCHAR EventDescGetOpcode( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetOpcode"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE USHORT EventDescGetTask( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetTask"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE UCHAR EventDescGetVersion( [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescGetVersion"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescOrKeyword( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] ULONGLONG Keyword );",
            "name": "EventDescOrKeyword"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetChannel( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] UCHAR Channel );",
            "name": "EventDescSetChannel"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetId( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] USHORT Id );",
            "name": "EventDescSetId"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetKeyword( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] ULONGLONG Keyword );",
            "name": "EventDescSetKeyword"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetLevel( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] UCHAR Level );",
            "name": "EventDescSetLevel"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetOpcode( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] UCHAR Opcode );",
            "name": "EventDescSetOpcode"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetTask( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] USHORT Task );",
            "name": "EventDescSetTask"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE PEVENT_DESCRIPTOR EventDescSetVersion( [in] PEVENT_DESCRIPTOR EventDescriptor, [in] UCHAR Version );",
            "name": "EventDescSetVersion"
        },
        {
            "signature": "EVNTPROV_PFORCEINLINE VOID EventDescZero( [out] PEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventDescZero"
        },
        {
            "signature": "BOOLEAN EVNTAPI EventEnabled( [in] REGHANDLE RegHandle, [in] PCEVENT_DESCRIPTOR EventDescriptor );",
            "name": "EventEnabled"
        },
        {
            "signature": "BOOLEAN EVNTAPI EventProviderEnabled( [in] REGHANDLE RegHandle, [in] UCHAR Level, [in] ULONGLONG Keyword );",
            "name": "EventProviderEnabled"
        },
        {
            "signature": "ULONG EVNTAPI EventRegister( [in] LPCGUID ProviderId, [in, optional] PENABLECALLBACK EnableCallback, [in, optional] PVOID CallbackContext, [out] PREGHANDLE RegHandle );",
            "name": "EventRegister"
        },
        {
            "signature": "ULONG EVNTAPI EventSetInformation( [in] REGHANDLE RegHandle, [in] EVENT_INFO_CLASS InformationClass, [in] PVOID EventInformation, [in] ULONG InformationLength );",
            "name": "EventSetInformation"
        },
        {
            "signature": "ULONG EVNTAPI EventUnregister( [in] REGHANDLE RegHandle );",
            "name": "EventUnregister"
        },
        {
            "signature": "ULONG EVNTAPI EventWrite( [in] REGHANDLE RegHandle, [in] PCEVENT_DESCRIPTOR EventDescriptor, [in] ULONG UserDataCount, [in, optional] PEVENT_DATA_DESCRIPTOR UserData );",
            "name": "EventWrite"
        },
        {
            "signature": "ULONG EVNTAPI EventWriteEx( [in] REGHANDLE RegHandle, [in] PCEVENT_DESCRIPTOR EventDescriptor, [in] ULONG64 Filter, [in] ULONG Flags, [in, optional] LPCGUID ActivityId, [in, optional] LPCGUID RelatedActivityId, [in] ULONG UserDataCount, [in, optional] PEVENT_DATA_DESCRIPTOR UserData );",
            "name": "EventWriteEx"
        },
        {
            "signature": "ULONG EVNTAPI EventWriteString( [in] REGHANDLE RegHandle, [in] UCHAR Level, [in] ULONGLONG Keyword, [in] PCWSTR String );",
            "name": "EventWriteString"
        },
        {
            "signature": "ULONG EVNTAPI EventWriteTransfer( [in] REGHANDLE RegHandle, [in] PCEVENT_DESCRIPTOR EventDescriptor, [in, optional] LPCGUID ActivityId, [in, optional] LPCGUID RelatedActivityId, [in] ULONG UserDataCount, [in, optional] PEVENT_DATA_DESCRIPTOR UserData );",
            "name": "EventWriteTransfer"
        },
        {
            "signature": "PENABLECALLBACK Penablecallback; void Penablecallback( [in] LPCGUID SourceId, [in] ULONG IsEnabled, [in] UCHAR Level, [in] ULONGLONG MatchAnyKeyword, ULONGLONG MatchAllKeyword, [in, optional] PEVENT_FILTER_DESCRIPTOR FilterData, [in, optional] PVOID CallbackContext ) {...}",
            "name": "PENABLECALLBACK callback"
        }
    ],
    "Evntrace.h": [
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI CloseTrace( [in] TRACEHANDLE TraceHandle );",
            "name": "CloseTrace"
        },
        {
            "signature": "ULONG WMIAPI ControlTraceA( [in] TRACEHANDLE TraceHandle, [in] LPCSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties, [in] ULONG ControlCode );",
            "name": "ControlTraceA"
        },
        {
            "signature": "ULONG WMIAPI ControlTraceW( [in] TRACEHANDLE TraceHandle, [in] LPCWSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties, [in] ULONG ControlCode );",
            "name": "ControlTraceW"
        },
        {
            "signature": "ULONG WMIAPI CreateTraceInstanceId( [in] HANDLE RegHandle, [out] PEVENT_INSTANCE_INFO InstInfo );",
            "name": "CreateTraceInstanceId"
        },
        {
            "signature": "ULONG WMIAPI EnableTrace( [in] ULONG Enable, [in] ULONG EnableFlag, [in] ULONG EnableLevel, [in] LPCGUID ControlGuid, [in] TRACEHANDLE TraceHandle );",
            "name": "EnableTrace"
        },
        {
            "signature": "ULONG WMIAPI EnableTraceEx( [in] LPCGUID ProviderId, [in, optional] LPCGUID SourceId, [in] TRACEHANDLE TraceHandle, [in] ULONG IsEnabled, [in] UCHAR Level, [in] ULONGLONG MatchAnyKeyword, [in] ULONGLONG MatchAllKeyword, [in] ULONG EnableProperty, [in, optional] PEVENT_FILTER_DESCRIPTOR EnableFilterDesc );",
            "name": "EnableTraceEx"
        },
        {
            "signature": "ULONG WMIAPI EnableTraceEx2( [in] TRACEHANDLE TraceHandle, [in] LPCGUID ProviderId, [in] ULONG ControlCode, [in] UCHAR Level, [in] ULONGLONG MatchAnyKeyword, [in] ULONGLONG MatchAllKeyword, [in] ULONG Timeout, [in, optional] PENABLE_TRACE_PARAMETERS EnableParameters );",
            "name": "EnableTraceEx2"
        },
        {
            "signature": "ULONG WMIAPI EnumerateTraceGuids( [in, out] PTRACE_GUID_PROPERTIES *GuidPropertiesArray, [in] ULONG PropertyArrayCount, [out] PULONG GuidCount );",
            "name": "EnumerateTraceGuids"
        },
        {
            "signature": "ULONG WMIAPI EnumerateTraceGuidsEx( [in] TRACE_QUERY_INFO_CLASS TraceQueryInfoClass, [in] PVOID InBuffer, [in] ULONG InBufferSize, [out] PVOID OutBuffer, [in] ULONG OutBufferSize, [out] PULONG ReturnLength );",
            "name": "EnumerateTraceGuidsEx"
        },
        {
            "signature": "ULONG WMIAPI FlushTraceA( [in] TRACEHANDLE TraceHandle, [in] LPCSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties );",
            "name": "FlushTraceA"
        },
        {
            "signature": "ULONG WMIAPI FlushTraceW( [in] TRACEHANDLE TraceHandle, [in] LPCWSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties );",
            "name": "FlushTraceW"
        },
        {
            "signature": "ULONG WMIAPI GetTraceEnableFlags( [in] TRACEHANDLE TraceHandle );",
            "name": "GetTraceEnableFlags"
        },
        {
            "signature": "UCHAR WMIAPI GetTraceEnableLevel( [in] TRACEHANDLE TraceHandle );",
            "name": "GetTraceEnableLevel"
        },
        {
            "signature": "TRACEHANDLE WMIAPI GetTraceLoggerHandle( [in] PVOID Buffer );",
            "name": "GetTraceLoggerHandle"
        },
        {
            "signature": "TRACEHANDLE WMIAPI OpenTraceA( [in, out] PEVENT_TRACE_LOGFILEA Logfile );",
            "name": "OpenTraceA"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED TRACEHANDLE WMIAPI OpenTraceFromBufferStream( const ETW_OPEN_TRACE_OPTIONS *Options, PETW_BUFFER_COMPLETION_CALLBACK BufferCompletionCallback, void *BufferCompletionContext );",
            "name": "OpenTraceFromBufferStream"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED TRACEHANDLE WMIAPI OpenTraceFromFile( PCWSTR LogFileName, const ETW_OPEN_TRACE_OPTIONS *Options, TRACE_LOGFILE_HEADER *LogFileHeader );",
            "name": "OpenTraceFromFile"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED TRACEHANDLE WMIAPI OpenTraceFromRealTimeLogger( PCWSTR LoggerName, const ETW_OPEN_TRACE_OPTIONS *Options, TRACE_LOGFILE_HEADER *LogFileHeader );",
            "name": "OpenTraceFromRealTimeLogger"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED TRACEHANDLE WMIAPI OpenTraceFromRealTimeLoggerWithAllocationOptions( PCWSTR LoggerName, const ETW_OPEN_TRACE_OPTIONS *Options, ULONG_PTR AllocationSize, HANDLE MemoryPartitionHandle, TRACE_LOGFILE_HEADER *LogFileHeader );",
            "name": "OpenTraceFromRealTimeLoggerWithAllocationOptions"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED TRACEHANDLE WMIAPI OpenTraceW( [in, out] PEVENT_TRACE_LOGFILEW Logfile );",
            "name": "OpenTraceW"
        },
        {
            "signature": "PETW_BUFFER_CALLBACK PetwBufferCallback; BOOL PetwBufferCallback( const ETW_BUFFER_HEADER *Buffer, ULONG BufferSize, const ETW_BUFFER_CALLBACK_INFORMATION *ConsumerInfo, void *CallbackContext ) {...}",
            "name": "PETW_BUFFER_CALLBACK callback"
        },
        {
            "signature": "PETW_BUFFER_COMPLETION_CALLBACK PetwBufferCompletionCallback; void PetwBufferCompletionCallback( const ETW_BUFFER_HEADER *Buffer, void *CallbackContext ) {...}",
            "name": "PETW_BUFFER_COMPLETION_CALLBACK callback"
        },
        {
            "signature": "PEVENT_CALLBACK PeventCallback; void PeventCallback( [in] PEVENT_TRACE pEvent ) {...}",
            "name": "PEVENT_CALLBACK callback"
        },
        {
            "signature": "PEVENT_RECORD_CALLBACK PeventRecordCallback; void PeventRecordCallback( [in] PEVENT_RECORD EventRecord ) {...}",
            "name": "PEVENT_RECORD_CALLBACK callback"
        },
        {
            "signature": "PEVENT_TRACE_BUFFER_CALLBACKA PeventTraceBufferCallbacka; ULONG PeventTraceBufferCallbacka( PEVENT_TRACE_LOGFILEA Logfile ) {...}",
            "name": "PEVENT_TRACE_BUFFER_CALLBACKA callback"
        },
        {
            "signature": "PEVENT_TRACE_BUFFER_CALLBACKW PeventTraceBufferCallbackw; ULONG PeventTraceBufferCallbackw( PEVENT_TRACE_LOGFILEW Logfile ) {...}",
            "name": "PEVENT_TRACE_BUFFER_CALLBACKW callback"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI ProcessTrace( [in] PTRACEHANDLE HandleArray, [in] ULONG HandleCount, [in] LPFILETIME StartTime, [in] LPFILETIME EndTime );",
            "name": "ProcessTrace"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI ProcessTraceAddBufferToBufferStream( TRACEHANDLE TraceHandle, const ETW_BUFFER_HEADER *Buffer, ULONG BufferSize );",
            "name": "ProcessTraceAddBufferToBufferStream"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI ProcessTraceBufferDecrementReference( const ETW_BUFFER_HEADER *Buffer );",
            "name": "ProcessTraceBufferDecrementReference"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI ProcessTraceBufferIncrementReference( TRACEHANDLE TraceHandle, const ETW_BUFFER_HEADER *Buffer );",
            "name": "ProcessTraceBufferIncrementReference"
        },
        {
            "signature": "ULONG WMIAPI QueryAllTracesA( [out] PEVENT_TRACE_PROPERTIES *PropertyArray, [in] ULONG PropertyArrayCount, [out] PULONG LoggerCount );",
            "name": "QueryAllTracesA"
        },
        {
            "signature": "ULONG WMIAPI QueryAllTracesW( [out] PEVENT_TRACE_PROPERTIES *PropertyArray, [in] ULONG PropertyArrayCount, [out] PULONG LoggerCount );",
            "name": "QueryAllTracesW"
        },
        {
            "signature": "ULONG WMIAPI QueryTraceA( TRACEHANDLE TraceHandle, LPCSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "QueryTraceA"
        },
        {
            "signature": "ETW_APP_DECLSPEC_DEPRECATED ULONG WMIAPI QueryTraceProcessingHandle( [in] TRACEHANDLE ProcessingHandle, [in] ETW_PROCESS_HANDLE_INFO_TYPE InformationClass, [in, optional] PVOID InBuffer, [in] ULONG InBufferSize, [out, optional] PVOID OutBuffer, [in] ULONG OutBufferSize, [out] PULONG ReturnLength );",
            "name": "QueryTraceProcessingHandle"
        },
        {
            "signature": "ULONG WMIAPI QueryTraceW( TRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "QueryTraceW"
        },
        {
            "signature": "ULONG WMIAPI RegisterTraceGuidsA( [in] WMIDPREQUEST RequestAddress, [in] PVOID RequestContext, [in] LPCGUID ControlGuid, [in] ULONG GuidCount, [in, out] PTRACE_GUID_REGISTRATION TraceGuidReg, [in] LPCSTR MofImagePath, [in] LPCSTR MofResourceName, [out] PTRACEHANDLE RegistrationHandle );",
            "name": "RegisterTraceGuidsA"
        },
        {
            "signature": "ULONG WMIAPI RegisterTraceGuidsW( [in] WMIDPREQUEST RequestAddress, [in] PVOID RequestContext, [in] LPCGUID ControlGuid, [in] ULONG GuidCount, [in, out] PTRACE_GUID_REGISTRATION TraceGuidReg, [in] LPCWSTR MofImagePath, [in] LPCWSTR MofResourceName, [out] PTRACEHANDLE RegistrationHandle );",
            "name": "RegisterTraceGuidsW"
        },
        {
            "signature": "ULONG WMIAPI RemoveTraceCallback( [in] LPCGUID pGuid );",
            "name": "RemoveTraceCallback"
        },
        {
            "signature": "ULONG WMIAPI SetTraceCallback( [in] LPCGUID pGuid, [in] PEVENT_CALLBACK EventCallback );",
            "name": "SetTraceCallback"
        },
        {
            "signature": "ULONG WMIAPI StartTraceA( [out] PTRACEHANDLE TraceHandle, [in] LPCSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties );",
            "name": "StartTraceA"
        },
        {
            "signature": "ULONG WMIAPI StartTraceW( [out] PTRACEHANDLE TraceHandle, [in] LPCWSTR InstanceName, [in, out] PEVENT_TRACE_PROPERTIES Properties );",
            "name": "StartTraceW"
        },
        {
            "signature": "ULONG WMIAPI StopTraceA( TRACEHANDLE TraceHandle, LPCSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "StopTraceA"
        },
        {
            "signature": "ULONG WMIAPI StopTraceW( TRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "StopTraceW"
        },
        {
            "signature": "ULONG WMIAPI TraceEvent( [in] TRACEHANDLE TraceHandle, [in] PEVENT_TRACE_HEADER EventTrace );",
            "name": "TraceEvent"
        },
        {
            "signature": "ULONG WMIAPI TraceEventInstance( [in] TRACEHANDLE TraceHandle, [in] PEVENT_INSTANCE_HEADER EventTrace, [in] PEVENT_INSTANCE_INFO InstInfo, [in] PEVENT_INSTANCE_INFO ParentInstInfo );",
            "name": "TraceEventInstance"
        },
        {
            "signature": "ULONG TraceMessage( [in] TRACEHANDLE LoggerHandle, [in] ULONG MessageFlags, [in] LPCGUID MessageGuid, [in] USHORT MessageNumber, ... );",
            "name": "TraceMessage"
        },
        {
            "signature": "ULONG TraceMessageVa( [in] TRACEHANDLE LoggerHandle, [in] ULONG MessageFlags, [in] LPCGUID MessageGuid, [in] USHORT MessageNumber, [in] va_list MessageArgList );",
            "name": "TraceMessageVa"
        },
        {
            "signature": "ULONG WMIAPI TraceQueryInformation( [in] TRACEHANDLE SessionHandle, [in] TRACE_INFO_CLASS InformationClass, [out] PVOID TraceInformation, [in] ULONG InformationLength, [out, optional] PULONG ReturnLength );",
            "name": "TraceQueryInformation"
        },
        {
            "signature": "ULONG WMIAPI TraceSetInformation( [in] TRACEHANDLE SessionHandle, [in] TRACE_INFO_CLASS InformationClass, [in] PVOID TraceInformation, [in] ULONG InformationLength );",
            "name": "TraceSetInformation"
        },
        {
            "signature": "ULONG WMIAPI UnregisterTraceGuids( [in] TRACEHANDLE RegistrationHandle );",
            "name": "UnregisterTraceGuids"
        },
        {
            "signature": "ULONG WMIAPI UpdateTraceA( TRACEHANDLE TraceHandle, LPCSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "UpdateTraceA"
        },
        {
            "signature": "ULONG WMIAPI UpdateTraceW( TRACEHANDLE TraceHandle, LPCWSTR InstanceName, PEVENT_TRACE_PROPERTIES Properties );",
            "name": "UpdateTraceW"
        },
        {
            "signature": "WMIDPREQUEST Wmidprequest; ULONG Wmidprequest( [in] WMIDPREQUESTCODE RequestCode, PVOID RequestContext, ULONG *BufferSize, [in] PVOID Buffer ) {...}",
            "name": "WMIDPREQUEST callback"
        }
    ],
    "Evr.h": [
        {
            "signature": "MFCreateVideoMixer Mfcreatevideomixer; EVRPUBLIC Mfcreatevideomixer( IUnknown *pOwner, REFIID riidDevice, REFIID riid, void **ppv ) {...}",
            "name": "MFCreateVideoMixer callback"
        },
        {
            "signature": "MFCreateVideoMixerAndPresenter Mfcreatevideomixerandpresenter; EVRPUBLIC Mfcreatevideomixerandpresenter( [in] IUnknown *pMixerOwner, [in] IUnknown *pPresenterOwner, [in] REFIID riidMixer, [out] void **ppvVideoMixer, [in] REFIID riidPresenter, [out] void **ppvVideoPresenter ) {...}",
            "name": "MFCreateVideoMixerAndPresenter callback"
        },
        {
            "signature": "MFCreateVideoPresenter Mfcreatevideopresenter; EVRPUBLIC Mfcreatevideopresenter( [in] IUnknown *pOwner, [in] REFIID riidDevice, [in] REFIID riid, void **ppVideoPresenter ) {...}",
            "name": "MFCreateVideoPresenter callback"
        },
        {
            "signature": "MFCreateVideoRenderer Mfcreatevideorenderer; EVRPUBLIC Mfcreatevideorenderer( [in] REFIID riidRenderer, [out] void **ppVideoRenderer ) {...}",
            "name": "MFCreateVideoRenderer callback"
        },
        {
            "signature": "MFCreateVideoSampleAllocator Mfcreatevideosampleallocator; EVRPUBLIC Mfcreatevideosampleallocator( [in] REFIID riid, [out] void **ppSampleAllocator ) {...}",
            "name": "MFCreateVideoSampleAllocator callback"
        },
        {
            "signature": "MFCreateVideoSampleFromSurface Mfcreatevideosamplefromsurface; EVRPUBLIC Mfcreatevideosamplefromsurface( [in] IUnknown *pUnkSurface, [out] IMFSample **ppSample ) {...}",
            "name": "MFCreateVideoSampleFromSurface callback"
        }
    ],
    "Evr9.h": [],
    "Exdisp.h": [],
    "Expandedresources.h": [
        {
            "signature": "HRESULT GetExpandedResourceExclusiveCpuCount( [out] ULONG *exclusiveCpuCount );",
            "name": "GetExpandedResourceExclusiveCpuCount"
        },
        {
            "signature": "HRESULT HasExpandedResources( [out] BOOL *hasExpandedResources );",
            "name": "HasExpandedResources"
        },
        {
            "signature": "HRESULT ReleaseExclusiveCpuSets();",
            "name": "ReleaseExclusiveCpuSets"
        }
    ],
    "Exposeenums2managed.h": [],
    "Faxcom.h": [],
    "Faxcomex.h": [],
    "Faxdev.h": [
        {
            "signature": "BOOL FaxDevAbortOperation( [in] HANDLE FaxHandle );",
            "name": "FaxDevAbortOperation"
        },
        {
            "signature": "BOOL FaxDevEndJob( [in] HANDLE FaxHandle );",
            "name": "FaxDevEndJob"
        },
        {
            "signature": "BOOL FaxDevInitialize( [in] HLINEAPP LineAppHandle, [in] HANDLE HeapHandle, [out] PFAX_LINECALLBACK *LineCallbackFunction, [in] PFAX_SERVICE_CALLBACK FaxServiceCallback );",
            "name": "FaxDevInitialize"
        },
        {
            "signature": "BOOL FaxDevReceive( [in] HANDLE FaxHandle, [in] HCALL CallHandle, [in, out] PFAX_RECEIVE FaxReceive );",
            "name": "FaxDevReceive"
        },
        {
            "signature": "BOOL FaxDevReportStatus( [in] HANDLE FaxHandle, [out] PFAX_DEV_STATUS FaxStatus, [in] DWORD FaxStatusSize, [out] LPDWORD FaxStatusSizeRequired );",
            "name": "FaxDevReportStatus"
        },
        {
            "signature": "BOOL FaxDevSend( [in] HANDLE FaxHandle, [in] PFAX_SEND FaxSend, PFAX_SEND_CALLBACK FaxSendCallback );",
            "name": "FaxDevSend"
        },
        {
            "signature": "HRESULT FaxDevShutdown();",
            "name": "FaxDevShutdown"
        },
        {
            "signature": "BOOL FaxDevStartJob( [in] HLINE LineHandle, [in] DWORD DeviceId, [out] PHANDLE FaxHandle, [in] HANDLE CompletionPortHandle, [in] ULONG_PTR CompletionKey );",
            "name": "FaxDevStartJob"
        },
        {
            "signature": "BOOL FaxDevVirtualDeviceCreation( [out] LPDWORD DeviceCount, [out] LPWSTR DeviceNamePrefix, [out] LPDWORD DeviceIdPrefix, [in] HANDLE CompletionPort, [in] ULONG_PTR CompletionKey );",
            "name": "FaxDevVirtualDeviceCreation"
        },
        {
            "signature": "PFAX_LINECALLBACK PfaxLinecallback; void PfaxLinecallback( [in] HANDLE FaxHandle, [in] DWORD hDevice, [in] DWORD dwMessage, DWORD_PTR dwInstance, [in] DWORD_PTR dwParam1, [in] DWORD_PTR dwParam2, [in] DWORD_PTR dwParam3 ) {...}",
            "name": "PFAX_LINECALLBACK callback"
        },
        {
            "signature": "PFAX_SEND_CALLBACK PfaxSendCallback; BOOL PfaxSendCallback( [in] HANDLE FaxHandle, [in] HCALL CallHandle, [in] DWORD Reserved1, [in] DWORD Reserved2 ) {...}",
            "name": "PFAX_SEND_CALLBACK callback"
        }
    ],
    "Faxext.h": [
        {
            "signature": "HRESULT FaxExtConfigChange( [in] DWORD dwDeviceId, [in] LPCWSTR lpcwstrDataGUID, [in] LPBYTE lpData, [in] DWORD dwDataSize );",
            "name": "FaxExtConfigChange"
        },
        {
            "signature": "void FaxExtFreeBuffer( LPVOID lpvBuffer );",
            "name": "FaxExtFreeBuffer"
        },
        {
            "signature": "DWORD FaxExtGetData( [in] DWORD dwDeviceId, [in] FAX_ENUM_DEVICE_ID_SOURCE DevIdSrc, [in] LPCWSTR lpcwstrDataGUID, [out] LPBYTE *ppData, [out] LPDWORD lpdwDataSize );",
            "name": "FaxExtGetData"
        },
        {
            "signature": "HRESULT FaxExtInitializeConfig( [in] PFAX_EXT_GET_DATA unnamedParam1, [in] PFAX_EXT_SET_DATA unnamedParam2, [in] PFAX_EXT_REGISTER_FOR_EVENTS unnamedParam3, [in] PFAX_EXT_UNREGISTER_FOR_EVENTS unnamedParam4, [in] PFAX_EXT_FREE_BUFFER unnamedParam5 );",
            "name": "FaxExtInitializeConfig"
        },
        {
            "signature": "HANDLE FaxExtRegisterForEvents( [in] HINSTANCE hInst, [in] DWORD dwDeviceId, [in] FAX_ENUM_DEVICE_ID_SOURCE DevIdSrc, [in] LPCWSTR lpcwstrDataGUID, [in] PFAX_EXT_CONFIG_CHANGE lpConfigChangeCallback );",
            "name": "FaxExtRegisterForEvents"
        },
        {
            "signature": "DWORD FaxExtSetData( [in] HINSTANCE hInst, [in] DWORD dwDeviceId, [in] FAX_ENUM_DEVICE_ID_SOURCE DevIdSrc, [in] LPCWSTR lpcwstrDataGUID, [in] LPBYTE pData, [in] DWORD dwDataSize );",
            "name": "FaxExtSetData"
        },
        {
            "signature": "DWORD FaxExtUnregisterForEvents( HANDLE hNotification );",
            "name": "FaxExtUnregisterForEvents"
        }
    ],
    "Faxroute.h": [
        {
            "signature": "BOOL FaxRouteDeviceChangeNotification( [in] DWORD DeviceId, [in] BOOL NewDevice );",
            "name": "FaxRouteDeviceChangeNotification"
        },
        {
            "signature": "BOOL FaxRouteDeviceEnable( [in] LPCWSTR RoutingGuid, [in] DWORD DeviceId, [in] LONG Enabled );",
            "name": "FaxRouteDeviceEnable"
        },
        {
            "signature": "BOOL FaxRouteGetRoutingInfo( [in] LPCWSTR RoutingGuid, [in] DWORD DeviceId, [in] LPBYTE RoutingInfo, [out] LPDWORD RoutingInfoSize );",
            "name": "FaxRouteGetRoutingInfo"
        },
        {
            "signature": "BOOL FaxRouteInitialize( [in] HANDLE HeapHandle, [in] PFAX_ROUTE_CALLBACKROUTINES FaxRouteCallbackRoutines );",
            "name": "FaxRouteInitialize"
        },
        {
            "signature": "BOOL FaxRouteSetRoutingInfo( [in] LPCWSTR RoutingGuid, [in] DWORD DeviceId, [in] const BYTE *RoutingInfo, [in] DWORD RoutingInfoSize );",
            "name": "FaxRouteSetRoutingInfo"
        },
        {
            "signature": "PFAXROUTEADDFILE Pfaxrouteaddfile; LONG Pfaxrouteaddfile( [in] DWORD JobId, [in] LPCWSTR FileName, [in] GUID *Guid ) {...}",
            "name": "PFAXROUTEADDFILE callback"
        },
        {
            "signature": "PFAXROUTEDELETEFILE Pfaxroutedeletefile; LONG Pfaxroutedeletefile( [in] DWORD JobId, [in] LPCWSTR FileName ) {...}",
            "name": "PFAXROUTEDELETEFILE callback"
        },
        {
            "signature": "PFAXROUTEENUMFILE Pfaxrouteenumfile; BOOL Pfaxrouteenumfile( [in] DWORD JobId, [in] GUID *GuidOwner, [in] GUID *GuidCaller, [in] LPCWSTR FileName, [in, out] PVOID Context ) {...}",
            "name": "PFAXROUTEENUMFILE callback"
        },
        {
            "signature": "PFAXROUTEENUMFILES Pfaxrouteenumfiles; BOOL Pfaxrouteenumfiles( [in] DWORD JobId, [in] GUID *Guid, [in] PFAXROUTEENUMFILE FileEnumerator, [in, out] PVOID Context ) {...}",
            "name": "PFAXROUTEENUMFILES callback"
        },
        {
            "signature": "PFAXROUTEGETFILE Pfaxroutegetfile; BOOL Pfaxroutegetfile( [in] DWORD JobId, [in] DWORD Index, [out] LPWSTR FileNameBuffer, [in, out] LPDWORD RequiredSize ) {...}",
            "name": "PFAXROUTEGETFILE callback"
        },
        {
            "signature": "PFAXROUTEMETHOD Pfaxroutemethod; BOOL Pfaxroutemethod( const FAX_ROUTE *unnamedParam1, PVOID *unnamedParam2, LPDWORD unnamedParam3 ) {...}",
            "name": "PFAXROUTEMETHOD callback"
        },
        {
            "signature": "PFAXROUTEMODIFYROUTINGDATA Pfaxroutemodifyroutingdata; BOOL Pfaxroutemodifyroutingdata( [in] DWORD JobId, [in] LPCWSTR RoutingGuid, [in] LPBYTE RoutingData, [in] DWORD RoutingDataSize ) {...}",
            "name": "PFAXROUTEMODIFYROUTINGDATA callback"
        }
    ],
    "Fci.h": [
        {
            "signature": "BOOL DIAMONDAPI FCIAddFile( [in] HFCI hfci, [in] LPSTR pszSourceFile, [in] LPSTR pszFileName, [in] BOOL fExecute, [in] PFNFCIGETNEXTCABINET pfnfcignc, [in] PFNFCISTATUS pfnfcis, [in] PFNFCIGETOPENINFO pfnfcigoi, [in] TCOMP typeCompress );",
            "name": "FCIAddFile"
        },
        {
            "signature": "HFCI DIAMONDAPI FCICreate( [in, out] PERF perf, [in] PFNFCIFILEPLACED pfnfcifp, [in] PFNFCIALLOC pfna, [in] PFNFCIFREE pfnf, [in] PFNFCIOPEN pfnopen, [in] PFNFCIREAD pfnread, [in] PFNFCIWRITE pfnwrite, [in] PFNFCICLOSE pfnclose, [in] PFNFCISEEK pfnseek, [in] PFNFCIDELETE pfndelete, [in] PFNFCIGETTEMPFILE pfnfcigtf, [in] PCCAB pccab, [in, optional] void *pv );",
            "name": "FCICreate"
        },
        {
            "signature": "BOOL DIAMONDAPI FCIDestroy( [in] HFCI hfci );",
            "name": "FCIDestroy"
        },
        {
            "signature": "BOOL DIAMONDAPI FCIFlushCabinet( [in] HFCI hfci, [in] BOOL fGetNextCab, [in] PFNFCIGETNEXTCABINET pfnfcignc, [in] PFNFCISTATUS pfnfcis );",
            "name": "FCIFlushCabinet"
        },
        {
            "signature": "BOOL DIAMONDAPI FCIFlushFolder( [in] HFCI hfci, [in] PFNFCIGETNEXTCABINET pfnfcignc, [in] PFNFCISTATUS pfnfcis );",
            "name": "FCIFlushFolder"
        }
    ],
    "Fdi.h": [
        {
            "signature": "BOOL DIAMONDAPI FDICopy( [in] HFDI hfdi, [in] LPSTR pszCabinet, [in] LPSTR pszCabPath, [in] int flags, [in] PFNFDINOTIFY pfnfdin, [in] PFNFDIDECRYPT pfnfdid, [in, optional] void *pvUser );",
            "name": "FDICopy"
        },
        {
            "signature": "HFDI DIAMONDAPI FDICreate( [in] PFNALLOC pfnalloc, [in] PFNFREE pfnfree, [in] PFNOPEN pfnopen, [in] PFNREAD pfnread, [in] PFNWRITE pfnwrite, [in] PFNCLOSE pfnclose, [in] PFNSEEK pfnseek, [in] int cpuType, [in, out] PERF perf );",
            "name": "FDICreate"
        },
        {
            "signature": "BOOL DIAMONDAPI FDIDestroy( [in] HFDI hfdi );",
            "name": "FDIDestroy"
        },
        {
            "signature": "BOOL DIAMONDAPI FDIIsCabinet( [in] HFDI hfdi, [in] INT_PTR hf, [in, out] PFDICABINETINFO pfdici );",
            "name": "FDIIsCabinet"
        },
        {
            "signature": "BOOL DIAMONDAPI FDITruncateCabinet( [in] HFDI hfdi, [in] LPSTR pszCabinetName, [in] USHORT iFolderToDelete );",
            "name": "FDITruncateCabinet"
        }
    ],
    "Fdi_fci_types.h": [],
    "Featurestagingapi.h": [
        {
            "signature": "FEATURE_ENABLED_STATE GetFeatureEnabledState( UINT32 featureId, FEATURE_CHANGE_TIME changeTime );",
            "name": "GetFeatureEnabledState"
        },
        {
            "signature": "UINT32 GetFeatureVariant( UINT32 featureId, FEATURE_CHANGE_TIME changeTime, [out] UINT32 *payloadId, [out] BOOL *hasNotification );",
            "name": "GetFeatureVariant"
        },
        {
            "signature": "void RecordFeatureError( UINT32 featureId, [in] const FEATURE_ERROR *error );",
            "name": "RecordFeatureError"
        },
        {
            "signature": "void RecordFeatureUsage( UINT32 featureId, UINT32 kind, UINT32 addend, [in] PCSTR originName );",
            "name": "RecordFeatureUsage"
        },
        {
            "signature": "void SubscribeFeatureStateChangeNotification( [out] FEATURE_STATE_CHANGE_SUBSCRIPTION *subscription, [in] PFEATURE_STATE_CHANGE_CALLBACK callback, [in, optional] void *context );",
            "name": "SubscribeFeatureStateChangeNotification"
        },
        {
            "signature": "void UnsubscribeFeatureStateChangeNotification( [in] FEATURE_STATE_CHANGE_SUBSCRIPTION subscription );",
            "name": "UnsubscribeFeatureStateChangeNotification"
        }
    ],
    "Fhcfg.h": [],
    "Fhsvcctl.h": [
        {
            "signature": "HRESULT FhServiceBlockBackup( [in] FH_SERVICE_PIPE_HANDLE Pipe );",
            "name": "FhServiceBlockBackup"
        },
        {
            "signature": "HRESULT FhServiceClosePipe( [in] FH_SERVICE_PIPE_HANDLE Pipe );",
            "name": "FhServiceClosePipe"
        },
        {
            "signature": "HRESULT FhServiceOpenPipe( [in] BOOL StartServiceIfStopped, [out] FH_SERVICE_PIPE_HANDLE *Pipe );",
            "name": "FhServiceOpenPipe"
        },
        {
            "signature": "HRESULT FhServiceReloadConfiguration( [in] FH_SERVICE_PIPE_HANDLE Pipe );",
            "name": "FhServiceReloadConfiguration"
        },
        {
            "signature": "HRESULT FhServiceStartBackup( [in] FH_SERVICE_PIPE_HANDLE Pipe, [in] BOOL LowPriorityIo );",
            "name": "FhServiceStartBackup"
        },
        {
            "signature": "HRESULT FhServiceStopBackup( [in] FH_SERVICE_PIPE_HANDLE Pipe, [in] BOOL StopTracking );",
            "name": "FhServiceStopBackup"
        },
        {
            "signature": "HRESULT FhServiceUnblockBackup( [in] FH_SERVICE_PIPE_HANDLE Pipe );",
            "name": "FhServiceUnblockBackup"
        }
    ],
    "Fibersapi.h": [
        {
            "signature": "DWORD FlsAlloc( [in] PFLS_CALLBACK_FUNCTION lpCallback );",
            "name": "FlsAlloc"
        },
        {
            "signature": "BOOL FlsFree( [in] DWORD dwFlsIndex );",
            "name": "FlsFree"
        },
        {
            "signature": "PVOID FlsGetValue( [in] DWORD dwFlsIndex );",
            "name": "FlsGetValue"
        },
        {
            "signature": "BOOL FlsSetValue( [in] DWORD dwFlsIndex, [in, optional] PVOID lpFlsData );",
            "name": "FlsSetValue"
        },
        {
            "signature": "BOOL IsThreadAFiber();",
            "name": "IsThreadAFiber"
        }
    ],
    "Fileapi.h": [
        {
            "signature": "BOOL AreFileApisANSI();",
            "name": "AreFileApisANSI"
        },
        {
            "signature": "LONG CompareFileTime( [in] const FILETIME *lpFileTime1, [in] const FILETIME *lpFileTime2 );",
            "name": "CompareFileTime"
        },
        {
            "signature": "BOOL CreateDirectoryA( [in] LPCSTR lpPathName, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateDirectoryA"
        },
        {
            "signature": "BOOL CreateDirectoryW( [in] LPCWSTR lpPathName, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateDirectoryW"
        },
        {
            "signature": "HANDLE CreateFile2( [in] LPCWSTR lpFileName, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in] DWORD dwCreationDisposition, [in, optional] LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams );",
            "name": "CreateFile2"
        },
        {
            "signature": "HANDLE CreateFileA( [in] LPCSTR lpFileName, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD dwCreationDisposition, [in] DWORD dwFlagsAndAttributes, [in, optional] HANDLE hTemplateFile );",
            "name": "CreateFileA"
        },
        {
            "signature": "HANDLE CreateFileW( [in] LPCWSTR lpFileName, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD dwCreationDisposition, [in] DWORD dwFlagsAndAttributes, [in, optional] HANDLE hTemplateFile );",
            "name": "CreateFileW"
        },
        {
            "signature": "BOOL DefineDosDeviceW( [in] DWORD dwFlags, [in] LPCWSTR lpDeviceName, [in, optional] LPCWSTR lpTargetPath );",
            "name": "DefineDosDeviceW"
        },
        {
            "signature": "BOOL DeleteFileA( [in] LPCSTR lpFileName );",
            "name": "DeleteFileA"
        },
        {
            "signature": "BOOL DeleteFileW( [in] LPCWSTR lpFileName );",
            "name": "DeleteFileW"
        },
        {
            "signature": "BOOL DeleteVolumeMountPointW( [in] LPCWSTR lpszVolumeMountPoint );",
            "name": "DeleteVolumeMountPointW"
        },
        {
            "signature": "BOOL FileTimeToLocalFileTime( [in] const FILETIME *lpFileTime, [out] LPFILETIME lpLocalFileTime );",
            "name": "FileTimeToLocalFileTime"
        },
        {
            "signature": "BOOL FindClose( [in, out] HANDLE hFindFile );",
            "name": "FindClose"
        },
        {
            "signature": "BOOL FindCloseChangeNotification( [in] HANDLE hChangeHandle );",
            "name": "FindCloseChangeNotification"
        },
        {
            "signature": "HANDLE FindFirstChangeNotificationA( [in] LPCSTR lpPathName, [in] BOOL bWatchSubtree, [in] DWORD dwNotifyFilter );",
            "name": "FindFirstChangeNotificationA"
        },
        {
            "signature": "HANDLE FindFirstChangeNotificationW( [in] LPCWSTR lpPathName, [in] BOOL bWatchSubtree, [in] DWORD dwNotifyFilter );",
            "name": "FindFirstChangeNotificationW"
        },
        {
            "signature": "HANDLE FindFirstFileA( [in] LPCSTR lpFileName, [out] LPWIN32_FIND_DATAA lpFindFileData );",
            "name": "FindFirstFileA"
        },
        {
            "signature": "HANDLE FindFirstFileExA( [in] LPCSTR lpFileName, [in] FINDEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFindFileData, [in] FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, [in] DWORD dwAdditionalFlags );",
            "name": "FindFirstFileExA"
        },
        {
            "signature": "HANDLE FindFirstFileExW( [in] LPCWSTR lpFileName, [in] FINDEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFindFileData, [in] FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, [in] DWORD dwAdditionalFlags );",
            "name": "FindFirstFileExW"
        },
        {
            "signature": "HANDLE FindFirstFileNameW( [in] LPCWSTR lpFileName, [in] DWORD dwFlags, [in, out] LPDWORD StringLength, [in, out] PWSTR LinkName );",
            "name": "FindFirstFileNameW"
        },
        {
            "signature": "HANDLE FindFirstFileW( [in] LPCWSTR lpFileName, [out] LPWIN32_FIND_DATAW lpFindFileData );",
            "name": "FindFirstFileW"
        },
        {
            "signature": "HANDLE FindFirstStreamW( [in] LPCWSTR lpFileName, [in] STREAM_INFO_LEVELS InfoLevel, [out] LPVOID lpFindStreamData, DWORD dwFlags );",
            "name": "FindFirstStreamW"
        },
        {
            "signature": "HANDLE FindFirstVolumeW( [out] LPWSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "FindFirstVolumeW"
        },
        {
            "signature": "BOOL FindNextChangeNotification( [in] HANDLE hChangeHandle );",
            "name": "FindNextChangeNotification"
        },
        {
            "signature": "BOOL FindNextFileA( [in] HANDLE hFindFile, [out] LPWIN32_FIND_DATAA lpFindFileData );",
            "name": "FindNextFileA"
        },
        {
            "signature": "BOOL FindNextFileNameW( [in] HANDLE hFindStream, [in, out] LPDWORD StringLength, [in, out] PWSTR LinkName );",
            "name": "FindNextFileNameW"
        },
        {
            "signature": "BOOL FindNextFileW( [in] HANDLE hFindFile, [out] LPWIN32_FIND_DATAW lpFindFileData );",
            "name": "FindNextFileW"
        },
        {
            "signature": "BOOL FindNextStreamW( [in] HANDLE hFindStream, [out] LPVOID lpFindStreamData );",
            "name": "FindNextStreamW"
        },
        {
            "signature": "BOOL FindNextVolumeW( [in] HANDLE hFindVolume, [out] LPWSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "FindNextVolumeW"
        },
        {
            "signature": "BOOL FindVolumeClose( [in] HANDLE hFindVolume );",
            "name": "FindVolumeClose"
        },
        {
            "signature": "BOOL FlushFileBuffers( [in] HANDLE hFile );",
            "name": "FlushFileBuffers"
        },
        {
            "signature": "DWORD GetCompressedFileSizeA( [in] LPCSTR lpFileName, [out, optional] LPDWORD lpFileSizeHigh );",
            "name": "GetCompressedFileSizeA"
        },
        {
            "signature": "DWORD GetCompressedFileSizeW( [in] LPCWSTR lpFileName, [out, optional] LPDWORD lpFileSizeHigh );",
            "name": "GetCompressedFileSizeW"
        },
        {
            "signature": "BOOL GetDiskFreeSpaceA( [in] LPCSTR lpRootPathName, [out] LPDWORD lpSectorsPerCluster, [out] LPDWORD lpBytesPerSector, [out] LPDWORD lpNumberOfFreeClusters, [out] LPDWORD lpTotalNumberOfClusters );",
            "name": "GetDiskFreeSpaceA"
        },
        {
            "signature": "BOOL GetDiskFreeSpaceExA( [in, optional] LPCSTR lpDirectoryName, [out, optional] PULARGE_INTEGER lpFreeBytesAvailableToCaller, [out, optional] PULARGE_INTEGER lpTotalNumberOfBytes, [out, optional] PULARGE_INTEGER lpTotalNumberOfFreeBytes );",
            "name": "GetDiskFreeSpaceExA"
        },
        {
            "signature": "BOOL GetDiskFreeSpaceExW( [in, optional] LPCWSTR lpDirectoryName, [out, optional] PULARGE_INTEGER lpFreeBytesAvailableToCaller, [out, optional] PULARGE_INTEGER lpTotalNumberOfBytes, [out, optional] PULARGE_INTEGER lpTotalNumberOfFreeBytes );",
            "name": "GetDiskFreeSpaceExW"
        },
        {
            "signature": "BOOL GetDiskFreeSpaceW( [in] LPCWSTR lpRootPathName, [out] LPDWORD lpSectorsPerCluster, [out] LPDWORD lpBytesPerSector, [out] LPDWORD lpNumberOfFreeClusters, [out] LPDWORD lpTotalNumberOfClusters );",
            "name": "GetDiskFreeSpaceW"
        },
        {
            "signature": "UINT GetDriveTypeA( [in, optional] LPCSTR lpRootPathName );",
            "name": "GetDriveTypeA"
        },
        {
            "signature": "UINT GetDriveTypeW( [in, optional] LPCWSTR lpRootPathName );",
            "name": "GetDriveTypeW"
        },
        {
            "signature": "DWORD GetFileAttributesA( [in] LPCSTR lpFileName );",
            "name": "GetFileAttributesA"
        },
        {
            "signature": "BOOL GetFileAttributesExA( [in] LPCSTR lpFileName, [in] GET_FILEEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFileInformation );",
            "name": "GetFileAttributesExA"
        },
        {
            "signature": "BOOL GetFileAttributesExW( [in] LPCWSTR lpFileName, [in] GET_FILEEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFileInformation );",
            "name": "GetFileAttributesExW"
        },
        {
            "signature": "DWORD GetFileAttributesW( [in] LPCWSTR lpFileName );",
            "name": "GetFileAttributesW"
        },
        {
            "signature": "BOOL GetFileInformationByHandle( [in] HANDLE hFile, [out] LPBY_HANDLE_FILE_INFORMATION lpFileInformation );",
            "name": "GetFileInformationByHandle"
        },
        {
            "signature": "DWORD GetFileSize( [in] HANDLE hFile, [out, optional] LPDWORD lpFileSizeHigh );",
            "name": "GetFileSize"
        },
        {
            "signature": "BOOL GetFileSizeEx( [in] HANDLE hFile, [out] PLARGE_INTEGER lpFileSize );",
            "name": "GetFileSizeEx"
        },
        {
            "signature": "BOOL GetFileTime( [in] HANDLE hFile, [out, optional] LPFILETIME lpCreationTime, [out, optional] LPFILETIME lpLastAccessTime, [out, optional] LPFILETIME lpLastWriteTime );",
            "name": "GetFileTime"
        },
        {
            "signature": "DWORD GetFileType( [in] HANDLE hFile );",
            "name": "GetFileType"
        },
        {
            "signature": "DWORD GetFinalPathNameByHandleA( [in] HANDLE hFile, [out] LPSTR lpszFilePath, [in] DWORD cchFilePath, [in] DWORD dwFlags );",
            "name": "GetFinalPathNameByHandleA"
        },
        {
            "signature": "DWORD GetFinalPathNameByHandleW( [in] HANDLE hFile, [out] LPWSTR lpszFilePath, [in] DWORD cchFilePath, [in] DWORD dwFlags );",
            "name": "GetFinalPathNameByHandleW"
        },
        {
            "signature": "DWORD GetFullPathNameA( [in] LPCSTR lpFileName, [in] DWORD nBufferLength, [out] LPSTR lpBuffer, [out] LPSTR *lpFilePart );",
            "name": "GetFullPathNameA"
        },
        {
            "signature": "DWORD GetFullPathNameW( [in] LPCWSTR lpFileName, [in] DWORD nBufferLength, [out] LPWSTR lpBuffer, [out] LPWSTR *lpFilePart );",
            "name": "GetFullPathNameW"
        },
        {
            "signature": "DWORD GetLogicalDrives();",
            "name": "GetLogicalDrives"
        },
        {
            "signature": "DWORD GetLogicalDriveStringsW( [in] DWORD nBufferLength, [out] LPWSTR lpBuffer );",
            "name": "GetLogicalDriveStringsW"
        },
        {
            "signature": "DWORD GetLongPathNameA( [in] LPCSTR lpszShortPath, [out] LPSTR lpszLongPath, [in] DWORD cchBuffer );",
            "name": "GetLongPathNameA"
        },
        {
            "signature": "DWORD GetLongPathNameW( [in] LPCWSTR lpszShortPath, [out] LPWSTR lpszLongPath, [in] DWORD cchBuffer );",
            "name": "GetLongPathNameW"
        },
        {
            "signature": "DWORD GetShortPathNameW( [in] LPCWSTR lpszLongPath, [out] LPWSTR lpszShortPath, [in] DWORD cchBuffer );",
            "name": "GetShortPathNameW"
        },
        {
            "signature": "UINT GetTempFileNameA( [in] LPCSTR lpPathName, [in] LPCSTR lpPrefixString, [in] UINT uUnique, [out] LPSTR lpTempFileName );",
            "name": "GetTempFileNameA"
        },
        {
            "signature": "UINT GetTempFileNameW( [in] LPCWSTR lpPathName, [in] LPCWSTR lpPrefixString, [in] UINT uUnique, [out] LPWSTR lpTempFileName );",
            "name": "GetTempFileNameW"
        },
        {
            "signature": "DWORD GetTempPath2A( [in] DWORD BufferLength, [out] LPSTR Buffer );",
            "name": "GetTempPath2A"
        },
        {
            "signature": "DWORD GetTempPath2W( [in] DWORD BufferLength, [out] LPWSTR Buffer );",
            "name": "GetTempPath2W"
        },
        {
            "signature": "DWORD GetTempPathA( [in] DWORD nBufferLength, [out] LPSTR lpBuffer );",
            "name": "GetTempPathA"
        },
        {
            "signature": "DWORD GetTempPathW( [in] DWORD nBufferLength, [out] LPWSTR lpBuffer );",
            "name": "GetTempPathW"
        },
        {
            "signature": "BOOL GetVolumeInformationA( [in, optional] LPCSTR lpRootPathName, [out, optional] LPSTR lpVolumeNameBuffer, [in] DWORD nVolumeNameSize, [out, optional] LPDWORD lpVolumeSerialNumber, [out, optional] LPDWORD lpMaximumComponentLength, [out, optional] LPDWORD lpFileSystemFlags, [out, optional] LPSTR lpFileSystemNameBuffer, [in] DWORD nFileSystemNameSize );",
            "name": "GetVolumeInformationA"
        },
        {
            "signature": "BOOL GetVolumeInformationByHandleW( [in] HANDLE hFile, [out, optional] LPWSTR lpVolumeNameBuffer, [in] DWORD nVolumeNameSize, [out, optional] LPDWORD lpVolumeSerialNumber, [out, optional] LPDWORD lpMaximumComponentLength, [out, optional] LPDWORD lpFileSystemFlags, [out, optional] LPWSTR lpFileSystemNameBuffer, [in] DWORD nFileSystemNameSize );",
            "name": "GetVolumeInformationByHandleW"
        },
        {
            "signature": "BOOL GetVolumeInformationW( [in, optional] LPCWSTR lpRootPathName, [out, optional] LPWSTR lpVolumeNameBuffer, [in] DWORD nVolumeNameSize, [out, optional] LPDWORD lpVolumeSerialNumber, [out, optional] LPDWORD lpMaximumComponentLength, [out, optional] LPDWORD lpFileSystemFlags, [out, optional] LPWSTR lpFileSystemNameBuffer, [in] DWORD nFileSystemNameSize );",
            "name": "GetVolumeInformationW"
        },
        {
            "signature": "BOOL GetVolumeNameForVolumeMountPointW( [in] LPCWSTR lpszVolumeMountPoint, [out] LPWSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "GetVolumeNameForVolumeMountPointW"
        },
        {
            "signature": "BOOL GetVolumePathNamesForVolumeNameW( [in] LPCWSTR lpszVolumeName, [out] LPWCH lpszVolumePathNames, [in] DWORD cchBufferLength, [out] PDWORD lpcchReturnLength );",
            "name": "GetVolumePathNamesForVolumeNameW"
        },
        {
            "signature": "BOOL GetVolumePathNameW( [in] LPCWSTR lpszFileName, [out] LPWSTR lpszVolumePathName, [in] DWORD cchBufferLength );",
            "name": "GetVolumePathNameW"
        },
        {
            "signature": "BOOL LocalFileTimeToFileTime( [in] const FILETIME *lpLocalFileTime, [out] LPFILETIME lpFileTime );",
            "name": "LocalFileTimeToFileTime"
        },
        {
            "signature": "BOOL LockFile( [in] HANDLE hFile, [in] DWORD dwFileOffsetLow, [in] DWORD dwFileOffsetHigh, [in] DWORD nNumberOfBytesToLockLow, [in] DWORD nNumberOfBytesToLockHigh );",
            "name": "LockFile"
        },
        {
            "signature": "BOOL LockFileEx( [in] HANDLE hFile, [in] DWORD dwFlags, DWORD dwReserved, [in] DWORD nNumberOfBytesToLockLow, [in] DWORD nNumberOfBytesToLockHigh, [in, out] LPOVERLAPPED lpOverlapped );",
            "name": "LockFileEx"
        },
        {
            "signature": "DWORD QueryDosDeviceW( [in, optional] LPCWSTR lpDeviceName, [out] LPWSTR lpTargetPath, [in] DWORD ucchMax );",
            "name": "QueryDosDeviceW"
        },
        {
            "signature": "BOOL ReadFile( [in] HANDLE hFile, [out] LPVOID lpBuffer, [in] DWORD nNumberOfBytesToRead, [out, optional] LPDWORD lpNumberOfBytesRead, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "ReadFile"
        },
        {
            "signature": "BOOL ReadFileEx( [in] HANDLE hFile, [out, optional] LPVOID lpBuffer, [in] DWORD nNumberOfBytesToRead, [in, out] LPOVERLAPPED lpOverlapped, [in] LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "ReadFileEx"
        },
        {
            "signature": "BOOL ReadFileScatter( [in] HANDLE hFile, [in] FILE_SEGMENT_ELEMENT [] aSegmentArray, [in] DWORD nNumberOfBytesToRead, LPDWORD lpReserved, [in, out] LPOVERLAPPED lpOverlapped );",
            "name": "ReadFileScatter"
        },
        {
            "signature": "BOOL RemoveDirectoryA( [in] LPCSTR lpPathName );",
            "name": "RemoveDirectoryA"
        },
        {
            "signature": "BOOL RemoveDirectoryW( [in] LPCWSTR lpPathName );",
            "name": "RemoveDirectoryW"
        },
        {
            "signature": "BOOL SetEndOfFile( [in] HANDLE hFile );",
            "name": "SetEndOfFile"
        },
        {
            "signature": "void SetFileApisToANSI();",
            "name": "SetFileApisToANSI"
        },
        {
            "signature": "void SetFileApisToOEM();",
            "name": "SetFileApisToOEM"
        },
        {
            "signature": "BOOL SetFileAttributesA( [in] LPCSTR lpFileName, [in] DWORD dwFileAttributes );",
            "name": "SetFileAttributesA"
        },
        {
            "signature": "BOOL SetFileAttributesW( [in] LPCWSTR lpFileName, [in] DWORD dwFileAttributes );",
            "name": "SetFileAttributesW"
        },
        {
            "signature": "BOOL SetFileInformationByHandle( [in] HANDLE hFile, [in] FILE_INFO_BY_HANDLE_CLASS FileInformationClass, [in] LPVOID lpFileInformation, [in] DWORD dwBufferSize );",
            "name": "SetFileInformationByHandle"
        },
        {
            "signature": "BOOL SetFileIoOverlappedRange( [in] HANDLE FileHandle, [in] PUCHAR OverlappedRangeStart, [in] ULONG Length );",
            "name": "SetFileIoOverlappedRange"
        },
        {
            "signature": "DWORD SetFilePointer( [in] HANDLE hFile, [in] LONG lDistanceToMove, [in, out, optional] PLONG lpDistanceToMoveHigh, [in] DWORD dwMoveMethod );",
            "name": "SetFilePointer"
        },
        {
            "signature": "BOOL SetFilePointerEx( [in] HANDLE hFile, [in] LARGE_INTEGER liDistanceToMove, [out, optional] PLARGE_INTEGER lpNewFilePointer, [in] DWORD dwMoveMethod );",
            "name": "SetFilePointerEx"
        },
        {
            "signature": "BOOL SetFileTime( [in] HANDLE hFile, [in, optional] const FILETIME *lpCreationTime, [in, optional] const FILETIME *lpLastAccessTime, [in, optional] const FILETIME *lpLastWriteTime );",
            "name": "SetFileTime"
        },
        {
            "signature": "BOOL SetFileValidData( [in] HANDLE hFile, [in] LONGLONG ValidDataLength );",
            "name": "SetFileValidData"
        },
        {
            "signature": "BOOL UnlockFile( [in] HANDLE hFile, [in] DWORD dwFileOffsetLow, [in] DWORD dwFileOffsetHigh, [in] DWORD nNumberOfBytesToUnlockLow, [in] DWORD nNumberOfBytesToUnlockHigh );",
            "name": "UnlockFile"
        },
        {
            "signature": "BOOL UnlockFileEx( [in] HANDLE hFile, DWORD dwReserved, [in] DWORD nNumberOfBytesToUnlockLow, [in] DWORD nNumberOfBytesToUnlockHigh, [in, out] LPOVERLAPPED lpOverlapped );",
            "name": "UnlockFileEx"
        },
        {
            "signature": "BOOL WriteFile( [in] HANDLE hFile, [in] LPCVOID lpBuffer, [in] DWORD nNumberOfBytesToWrite, [out, optional] LPDWORD lpNumberOfBytesWritten, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "WriteFile"
        },
        {
            "signature": "BOOL WriteFileEx( [in] HANDLE hFile, [in, optional] LPCVOID lpBuffer, [in] DWORD nNumberOfBytesToWrite, [in, out] LPOVERLAPPED lpOverlapped, [in] LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WriteFileEx"
        },
        {
            "signature": "BOOL WriteFileGather( [in] HANDLE hFile, [in] FILE_SEGMENT_ELEMENT [] aSegmentArray, [in] DWORD nNumberOfBytesToWrite, LPDWORD lpReserved, [in, out] LPOVERLAPPED lpOverlapped );",
            "name": "WriteFileGather"
        }
    ],
    "Fileapifromapp.h": [
        {
            "signature": "WINSTORAGEAPI BOOL CopyFileFromAppW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName, BOOL bFailIfExists ) noexcept;",
            "name": "CopyFileFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL CreateDirectoryFromAppW( LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes ) noexcept;",
            "name": "CreateDirectoryFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI HANDLE CreateFile2FromAppW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationDisposition, LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams ) noexcept;",
            "name": "CreateFile2FromAppW"
        },
        {
            "signature": "WINSTORAGEAPI HANDLE CreateFileFromAppW( LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile ) noexcept;",
            "name": "CreateFileFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL DeleteFileFromAppW( LPCWSTR lpFileName ) noexcept;",
            "name": "DeleteFileFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI HANDLE FindFirstFileExFromAppW( LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags ) noexcept;",
            "name": "FindFirstFileExFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL GetFileAttributesExFromAppW( LPCWSTR lpFileName, GET_FILEEX_INFO_LEVELS fInfoLevelId, LPVOID lpFileInformation ) noexcept;",
            "name": "GetFileAttributesExFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL MoveFileFromAppW( LPCWSTR lpExistingFileName, LPCWSTR lpNewFileName ) noexcept;",
            "name": "MoveFileFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL RemoveDirectoryFromAppW( LPCWSTR lpPathName ) noexcept;",
            "name": "RemoveDirectoryFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL ReplaceFileFromAppW( LPCWSTR lpReplacedFileName, LPCWSTR lpReplacementFileName, LPCWSTR lpBackupFileName, DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved ) noexcept;",
            "name": "ReplaceFileFromAppW"
        },
        {
            "signature": "WINSTORAGEAPI BOOL SetFileAttributesFromAppW( LPCWSTR lpFileName, DWORD dwFileAttributes ) noexcept;",
            "name": "SetFileAttributesFromAppW"
        }
    ],
    "Filehc.h": [
        {
            "signature": "FILEHC_EXPORT BOOL AssociateContextWithName( [in] PNAME_CACHE_CONTEXT pNameCache, [in] LPBYTE lpbName, [in] DWORD cbName, [in] LPBYTE lpbData, [in] DWORD cbData, [in] PGENERIC_MAPPING pGenericMapping, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] FIO_CONTEXT *pContext, [in] BOOL fKeepReference );",
            "name": "AssociateContextWithName"
        },
        {
            "signature": "FILEHC_EXPORT PFIO_CONTEXT AssociateFileEx( [in] HANDLE hFile, [in] BOOL fStoreWithDots, [in] BOOL fStoredWithTerminatingDot );",
            "name": "AssociateFileEx"
        },
        {
            "signature": "CACHE_DESTROY_CALLBACK CacheDestroyCallback; void CacheDestroyCallback( [in] DWORD cb, [in] LPBYTE lpb ) {...}",
            "name": "CACHE_DESTROY_CALLBACK callback"
        },
        {
            "signature": "CACHE_READ_CALLBACK CacheReadCallback; BOOL CacheReadCallback( [in] DWORD cb, [in] LPBYTE lpb, [in] LPVOID lpvContext ) {...}",
            "name": "CACHE_READ_CALLBACK callback"
        },
        {
            "signature": "FIO_CONTEXT * CacheCreateFile( [in] LPSTR lpstrName, [in] FCACHE_CREATE_CALLBACK pfnCallBack, [in] LPVOID lpv, [in] BOOL fAsyncContext );",
            "name": "CacheCreateFile"
        },
        {
            "signature": "FIO_CONTEXT * CacheRichCreateFile( [in] LPSTR lpstrName, [in] FCACHE_RICHCREATE_CALLBACK pfnCallBack, [in] LPVOID lpv, [in] BOOL fAsyncContext );",
            "name": "CacheRichCreateFile"
        },
        {
            "signature": "FCACHE_CREATE_CALLBACK FcacheCreateCallback; HANDLE FcacheCreateCallback( [in] LPSTR lpstrName, [in] LPVOID lpvData, [out] DWORD *cbFileSize, [out] DWORD *cbFileSizeHigh ) {...}",
            "name": "FCACHE_CREATE_CALLBACK callback"
        },
        {
            "signature": "FCACHE_RICHCREATE_CALLBACK FcacheRichcreateCallback; HANDLE FcacheRichcreateCallback( [in] LPSTR lpstrName, [in] LPVOID lpvData, [out] DWORD *cbFileSize, [out] DWORD *cbFileSizeHigh, [out] BOOL *pfDidWeScanIt, [out] BOOL *pfIsStuffed, [out] BOOL *pfStoredWithDots, [out] BOOL *pfStoredWithTerminatingDot ) {...}",
            "name": "FCACHE_RICHCREATE_CALLBACK callback"
        },
        {
            "signature": "FILEHC_EXPORT PNAME_CACHE_CONTEXT FindOrCreateNameCache( [in] LPSTR lpstrName, [in] CACHE_KEY_COMPARE pfnKeyCompare, [in] CACHE_KEY_HASH pfnKeyHash, [in] CACHE_DESTROY_CALLBACK pfnKeyDestroy, [in] CACHE_DESTROY_CALLBACK pfnDataDestroy );",
            "name": "FindOrCreateNameCache"
        },
        {
            "signature": "FILEHC_EXPORT BOOL FindSyncContextFromName( [in] PNAME_CACHE_CONTEXT pNameCache, [in] LPBYTE lpbName, [in] DWORD cbName, [in] CACHE_READ_CALLBACK pfnCallback, [in] LPVOID lpvClientContext, [in] HANDLE hToken, [in] ACCESS_MASK accessMask, [out] FIO_CONTEXT **ppContext );",
            "name": "FindSyncContextFromName"
        },
        {
            "signature": "FILEHC_EXPORT BOOL GetDotStuffState( [in] FIO_CONTEXT *pContext, [in] BOOL fReads, [out] BOOL *pfStuffed, [out] BOOL *pfStoredWithDots );",
            "name": "GetDotStuffState"
        },
        {
            "signature": "FILEHC_EXPORT DWORD GetFileSizeFromContext( [in] FIO_CONTEXT *pContext, [out] DWORD *pcbFileSizeHigh );",
            "name": "GetFileSizeFromContext"
        },
        {
            "signature": "FILEHC_EXPORT BOOL InitializeCache();",
            "name": "InitializeCache"
        },
        {
            "signature": "FILEHC_EXPORT BOOL InsertFile( [in] LPSTR lpstrName, [in] FIO_CONTEXT *pContext, [in] BOOL fKeepReference );",
            "name": "InsertFile"
        },
        {
            "signature": "FILEHC_EXPORT BOOL InvalidateName( [in] PNAME_CACHE_CONTEXT pNameCache, [in] LPBYTE lpbName, [in] DWORD cbName );",
            "name": "InvalidateName"
        },
        {
            "signature": "FIO_CONTEXT * ProduceDotStuffedContext( [in] FIO_CONTEXT *pContext, [in] LPSTR lpstrName, [in] BOOL fWantItDotStuffed );",
            "name": "ProduceDotStuffedContext"
        },
        {
            "signature": "long ReleaseNameCache( PNAME_CACHE_CONTEXT pNameCache );",
            "name": "ReleaseNameCache"
        },
        {
            "signature": "FILEHC_EXPORT BOOL SetDotStuffingOnWrites( [in] FIO_CONTEXT *pContext, [in] BOOL fEnable, [in] BOOL fStripDots );",
            "name": "SetDotStuffingOnWrites"
        },
        {
            "signature": "void SetDotStuffState( [in] FIO_CONTEXT *pContext, [in] BOOL fKnown, [in] BOOL fRequiresStuffing );",
            "name": "SetDotStuffState"
        },
        {
            "signature": "FILEHC_EXPORT BOOL TerminateCache();",
            "name": "TerminateCache"
        }
    ],
    "Filter.h": [],
    "Filtereg.h": [],
    "Fltuser.h": [
        {
            "signature": "HRESULT FilterAttach( [in] LPCWSTR lpFilterName, [in] LPCWSTR lpVolumeName, [in, optional] LPCWSTR lpInstanceName, [in, optional] DWORD dwCreatedInstanceNameLength, [out, optional] LPWSTR lpCreatedInstanceName );",
            "name": "FilterAttach"
        },
        {
            "signature": "HRESULT FilterAttachAtAltitude( [in] LPCWSTR lpFilterName, [in] LPCWSTR lpVolumeName, [in] LPCWSTR lpAltitude, [in, optional] LPCWSTR lpInstanceName, [in, optional] DWORD dwCreatedInstanceNameLength, [out, optional] LPWSTR lpCreatedInstanceName );",
            "name": "FilterAttachAtAltitude"
        },
        {
            "signature": "HRESULT FilterClose( [in] HFILTER hFilter );",
            "name": "FilterClose"
        },
        {
            "signature": "HRESULT FilterConnectCommunicationPort( [in] LPCWSTR lpPortName, [in] DWORD dwOptions, [in, optional] LPCVOID lpContext, [in] WORD wSizeOfContext, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] HANDLE *hPort );",
            "name": "FilterConnectCommunicationPort"
        },
        {
            "signature": "HRESULT FilterCreate( [in] LPCWSTR lpFilterName, [out] HFILTER *hFilter );",
            "name": "FilterCreate"
        },
        {
            "signature": "HRESULT FilterDetach( [in] LPCWSTR lpFilterName, [in] LPCWSTR lpVolumeName, [in, optional] LPCWSTR lpInstanceName );",
            "name": "FilterDetach"
        },
        {
            "signature": "HRESULT FilterFindClose( [in] HANDLE hFilterFind );",
            "name": "FilterFindClose"
        },
        {
            "signature": "HRESULT FilterFindFirst( [in] FILTER_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned, [out] LPHANDLE lpFilterFind );",
            "name": "FilterFindFirst"
        },
        {
            "signature": "HRESULT FilterFindNext( [in] HANDLE hFilterFind, [in] FILTER_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterFindNext"
        },
        {
            "signature": "HRESULT FilterGetDosName( [in] LPCWSTR lpVolumeName, [out] LPWSTR lpDosName, [in] DWORD dwDosNameBufferSize );",
            "name": "FilterGetDosName"
        },
        {
            "signature": "HRESULT FilterGetInformation( [in] HFILTER hFilter, [in] FILTER_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterGetInformation"
        },
        {
            "signature": "HRESULT FilterGetMessage( [in] HANDLE hPort, [out] PFILTER_MESSAGE_HEADER lpMessageBuffer, [in] DWORD dwMessageBufferSize, [in, out] LPOVERLAPPED lpOverlapped );",
            "name": "FilterGetMessage"
        },
        {
            "signature": "HRESULT FilterInstanceClose( [in] HFILTER_INSTANCE hInstance );",
            "name": "FilterInstanceClose"
        },
        {
            "signature": "HRESULT FilterInstanceCreate( [in] LPCWSTR lpFilterName, [in] LPCWSTR lpVolumeName, [in, optional] LPCWSTR lpInstanceName, [out] HFILTER_INSTANCE *hInstance );",
            "name": "FilterInstanceCreate"
        },
        {
            "signature": "HRESULT FilterInstanceFindClose( [in] HANDLE hFilterInstanceFind );",
            "name": "FilterInstanceFindClose"
        },
        {
            "signature": "HRESULT FilterInstanceFindFirst( [in] LPCWSTR lpFilterName, [in] INSTANCE_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned, [out] LPHANDLE lpFilterInstanceFind );",
            "name": "FilterInstanceFindFirst"
        },
        {
            "signature": "HRESULT FilterInstanceFindNext( [in] HANDLE hFilterInstanceFind, [in] INSTANCE_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterInstanceFindNext"
        },
        {
            "signature": "HRESULT FilterInstanceGetInformation( [in] HFILTER_INSTANCE hInstance, [in] INSTANCE_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterInstanceGetInformation"
        },
        {
            "signature": "HRESULT FilterLoad( [in] LPCWSTR lpFilterName );",
            "name": "FilterLoad"
        },
        {
            "signature": "HRESULT FilterReplyMessage( [in] HANDLE hPort, [in] PFILTER_REPLY_HEADER lpReplyBuffer, [in] DWORD dwReplyBufferSize );",
            "name": "FilterReplyMessage"
        },
        {
            "signature": "HRESULT FilterSendMessage( [in] HANDLE hPort, [in, optional] LPVOID lpInBuffer, [in] DWORD dwInBufferSize, [out] LPVOID lpOutBuffer, [in] DWORD dwOutBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterSendMessage"
        },
        {
            "signature": "HRESULT FilterUnload( [in] LPCWSTR lpFilterName );",
            "name": "FilterUnload"
        },
        {
            "signature": "HRESULT FilterVolumeFindClose( [in] HANDLE hVolumeFind );",
            "name": "FilterVolumeFindClose"
        },
        {
            "signature": "HRESULT FilterVolumeFindFirst( [in] FILTER_VOLUME_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned, [out] PHANDLE lpVolumeFind );",
            "name": "FilterVolumeFindFirst"
        },
        {
            "signature": "HRESULT FilterVolumeFindNext( [in] HANDLE hVolumeFind, [in] FILTER_VOLUME_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterVolumeFindNext"
        },
        {
            "signature": "HRESULT FilterVolumeInstanceFindClose( [in] HANDLE hVolumeInstanceFind );",
            "name": "FilterVolumeInstanceFindClose"
        },
        {
            "signature": "HRESULT FilterVolumeInstanceFindFirst( [in] LPCWSTR lpVolumeName, [in] INSTANCE_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned, [out] LPHANDLE lpVolumeInstanceFind );",
            "name": "FilterVolumeInstanceFindFirst"
        },
        {
            "signature": "HRESULT FilterVolumeInstanceFindNext( [in] HANDLE hVolumeInstanceFind, [in] INSTANCE_INFORMATION_CLASS dwInformationClass, [out] LPVOID lpBuffer, [in] DWORD dwBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "FilterVolumeInstanceFindNext"
        }
    ],
    "Fontsub.h": [
        {
            "signature": "CFP_ALLOCPROC CfpAllocproc; void * CfpAllocproc( size_t unnamedParam1 ) {...}",
            "name": "CFP_ALLOCPROC callback"
        },
        {
            "signature": "CFP_FREEPROC CfpFreeproc; void CfpFreeproc( void *unnamedParam1 ) {...}",
            "name": "CFP_FREEPROC callback"
        },
        {
            "signature": "CFP_REALLOCPROC CfpReallocproc; void * CfpReallocproc( void *unnamedParam1, size_t unnamedParam2 ) {...}",
            "name": "CFP_REALLOCPROC callback"
        },
        {
            "signature": "unsigned long CreateFontPackage( [in] const unsigned char *puchSrcBuffer, [in] const unsigned long ulSrcBufferSize, [out] unsigned char **ppuchFontPackageBuffer, [out] unsigned long *pulFontPackageBufferSize, [out] unsigned long *pulBytesWritten, [in] const unsigned short usFlag, [in] const unsigned short usTTCIndex, [in] const unsigned short usSubsetFormat, [in] const unsigned short usSubsetLanguage, [in] const unsigned short usSubsetPlatform, [in] const unsigned short usSubsetEncoding, [in] const unsigned short *pusSubsetKeepList, [in] const unsigned short usSubsetListCount, [in] CFP_ALLOCPROC lpfnAllocate, [in] CFP_REALLOCPROC lpfnReAllocate, [in] CFP_FREEPROC lpfnFree, [in] void *lpvReserved );",
            "name": "CreateFontPackage"
        },
        {
            "signature": "unsigned long MergeFontPackage( [in] const unsigned char *puchMergeFontBuffer, [in] const unsigned long ulMergeFontBufferSize, [in] const unsigned char *puchFontPackageBuffer, [in] const unsigned long ulFontPackageBufferSize, [out] unsigned char **ppuchDestBuffer, [out] unsigned long *pulDestBufferSize, [out] unsigned long *pulBytesWritten, [in] const unsigned short usMode, [in] CFP_ALLOCPROC lpfnAllocate, [in] CFP_REALLOCPROC lpfnReAllocate, [in] CFP_FREEPROC lpfnFree, [in] void *lpvReserved );",
            "name": "MergeFontPackage"
        }
    ],
    "Frquery.h": [],
    "Fsrm.h": [],
    "Fsrmenums.h": [],
    "Fsrmpipeline.h": [],
    "Fsrmquota.h": [],
    "Fsrmreports.h": [],
    "Fsrmscreen.h": [],
    "Fsrmtlb.h": [],
    "Functiondiscoveryapi.h": [],
    "Functiondiscoveryconstraints.h": [],
    "Functiondiscoveryprovider.h": [],
    "Fwpmtypes.h": [],
    "Fwpmu.h": [
        {
            "signature": "FWPM_CALLOUT_CHANGE_CALLBACK0 FwpmCalloutChangeCallback0; void FwpmCalloutChangeCallback0( [in] void *context, [in] const FWPM_CALLOUT_CHANGE0 *change ) {...}",
            "name": "FWPM_CALLOUT_CHANGE_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_CONNECTION_CALLBACK0 FwpmConnectionCallback0; void FwpmConnectionCallback0( [in, out] void *context, [in] FWPM_CONNECTION_EVENT_TYPE eventType, [in] const FWPM_CONNECTION0 *connection ) {...}",
            "name": "FWPM_CONNECTION_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_DYNAMIC_KEYWORD_CALLBACK0 FwpmDynamicKeywordCallback0; void FwpmDynamicKeywordCallback0( void *notification, void *context ) {...}",
            "name": "FWPM_DYNAMIC_KEYWORD_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_FILTER_CHANGE_CALLBACK0 FwpmFilterChangeCallback0; void FwpmFilterChangeCallback0( [in] void *context, [in] const FWPM_FILTER_CHANGE0 *change ) {...}",
            "name": "FWPM_FILTER_CHANGE_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_NET_EVENT_CALLBACK0 FwpmNetEventCallback0; void FwpmNetEventCallback0( [in, out] void *context, [in] const FWPM_NET_EVENT1 *event ) {...}",
            "name": "FWPM_NET_EVENT_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_NET_EVENT_CALLBACK1 FwpmNetEventCallback1; void FwpmNetEventCallback1( [in, out] void *context, [in] const FWPM_NET_EVENT2 *event ) {...}",
            "name": "FWPM_NET_EVENT_CALLBACK1 callback"
        },
        {
            "signature": "FWPM_NET_EVENT_CALLBACK2 FwpmNetEventCallback2; void FwpmNetEventCallback2( [in, out] void *context, [in] const FWPM_NET_EVENT3 *event ) {...}",
            "name": "FWPM_NET_EVENT_CALLBACK2 callback"
        },
        {
            "signature": "FWPM_PROVIDER_CHANGE_CALLBACK0 FwpmProviderChangeCallback0; void FwpmProviderChangeCallback0( [in] void *context, [in] const FWPM_PROVIDER_CHANGE0 *change ) {...}",
            "name": "FWPM_PROVIDER_CHANGE_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 FwpmProviderContextChangeCallback0; void FwpmProviderContextChangeCallback0( [in] void *context, [in] const FWPM_PROVIDER_CONTEXT_CHANGE0 *change ) {...}",
            "name": "FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_SUBLAYER_CHANGE_CALLBACK0 FwpmSublayerChangeCallback0; void FwpmSublayerChangeCallback0( [in] void *context, [in] const FWPM_SUBLAYER_CHANGE0 *change ) {...}",
            "name": "FWPM_SUBLAYER_CHANGE_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_SYSTEM_PORTS_CALLBACK0 FwpmSystemPortsCallback0; void FwpmSystemPortsCallback0( [in, out] void *context, [in] const FWPM_SYSTEM_PORTS0 *sysPorts ) {...}",
            "name": "FWPM_SYSTEM_PORTS_CALLBACK0 callback"
        },
        {
            "signature": "FWPM_VSWITCH_EVENT_CALLBACK0 FwpmVswitchEventCallback0; DWORD FwpmVswitchEventCallback0( [in, out] void *context, [in] const FWPM_VSWITCH_EVENT0 *vSwitchEvent ) {...}",
            "name": "FWPM_VSWITCH_EVENT_CALLBACK0 callback"
        },
        {
            "signature": "DWORD FwpmCalloutAdd0( [in] HANDLE engineHandle, [in] const FWPM_CALLOUT0 *callout, [in, optional] PSECURITY_DESCRIPTOR sd, [out, optional] UINT32 *id );",
            "name": "FwpmCalloutAdd0"
        },
        {
            "signature": "DWORD FwpmCalloutCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_CALLOUT_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmCalloutCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmCalloutDeleteById0( [in] HANDLE engineHandle, [in] UINT32 id );",
            "name": "FwpmCalloutDeleteById0"
        },
        {
            "signature": "DWORD FwpmCalloutDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmCalloutDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmCalloutDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmCalloutDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmCalloutEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_CALLOUT0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmCalloutEnum0"
        },
        {
            "signature": "DWORD FwpmCalloutGetById0( [in] HANDLE engineHandle, [in] UINT32 id, [out] FWPM_CALLOUT0 **callout );",
            "name": "FwpmCalloutGetById0"
        },
        {
            "signature": "DWORD FwpmCalloutGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_CALLOUT0 **callout );",
            "name": "FwpmCalloutGetByKey0"
        },
        {
            "signature": "DWORD FwpmCalloutGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmCalloutGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmCalloutSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmCalloutSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmCalloutSubscribeChanges0( [in] HANDLE engineHandle, [in] const FWPM_CALLOUT_SUBSCRIPTION0 *subscription, [in] FWPM_CALLOUT_CHANGE_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *changeHandle );",
            "name": "FwpmCalloutSubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmCalloutSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_CALLOUT_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmCalloutSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmCalloutUnsubscribeChanges0( [in] HANDLE engineHandle, [in] HANDLE changeHandle );",
            "name": "FwpmCalloutUnsubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmConnectionCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_CONNECTION_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmConnectionCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmConnectionDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmConnectionDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmConnectionEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_CONNECTION0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmConnectionEnum0"
        },
        {
            "signature": "DWORD FwpmConnectionGetById0( [in] HANDLE engineHandle, [in] UINT64 id, [out] FWPM_CONNECTION0 **connection );",
            "name": "FwpmConnectionGetById0"
        },
        {
            "signature": "DWORD FwpmConnectionGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out] PSID *sidOwner, [out] PSID *sidGroup, [out] PACL *dacl, [out] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmConnectionGetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmConnectionSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmConnectionSetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmConnectionSubscribe0( [in] HANDLE engineHandle, [in] const FWPM_CONNECTION_SUBSCRIPTION0 *subscription, [in] FWPM_CONNECTION_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *eventsHandle );",
            "name": "FwpmConnectionSubscribe0"
        },
        {
            "signature": "DWORD FwpmConnectionSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_CONNECTION_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmConnectionSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmConnectionUnsubscribe0( [in] HANDLE engineHandle, [in, out] HANDLE eventsHandle );",
            "name": "FwpmConnectionUnsubscribe0"
        },
        {
            "signature": "DWORD FwpmDynamicKeywordSubscribe0( DWORD flags, FWPM_DYNAMIC_KEYWORD_CALLBACK0 callback, void *context, HANDLE *subscriptionHandle );",
            "name": "FwpmDynamicKeywordSubscribe0"
        },
        {
            "signature": "DWORD FwpmDynamicKeywordUnsubscribe0( HANDLE subscriptionHandle );",
            "name": "FwpmDynamicKeywordUnsubscribe0"
        },
        {
            "signature": "DWORD FwpmEngineClose0( [in] HANDLE engineHandle );",
            "name": "FwpmEngineClose0"
        },
        {
            "signature": "DWORD FwpmEngineGetOption0( [in] HANDLE engineHandle, [in] FWPM_ENGINE_OPTION option, [out] FWP_VALUE0 **value );",
            "name": "FwpmEngineGetOption0"
        },
        {
            "signature": "DWORD FwpmEngineGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmEngineGetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmEngineOpen0( [in, optional] const wchar_t *serverName, [in] UINT32 authnService, [in, optional] SEC_WINNT_AUTH_IDENTITY_W *authIdentity, [in, optional] const FWPM_SESSION0 *session, [out] HANDLE *engineHandle );",
            "name": "FwpmEngineOpen0"
        },
        {
            "signature": "DWORD FwpmEngineSetOption0( [in] HANDLE engineHandle, [in] FWPM_ENGINE_OPTION option, [in] const FWP_VALUE0 *newValue );",
            "name": "FwpmEngineSetOption0"
        },
        {
            "signature": "DWORD FwpmEngineSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmEngineSetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmFilterAdd0( [in] HANDLE engineHandle, [in] const FWPM_FILTER0 *filter, [in, optional] PSECURITY_DESCRIPTOR sd, [out, optional] UINT64 *id );",
            "name": "FwpmFilterAdd0"
        },
        {
            "signature": "DWORD FwpmFilterCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_FILTER_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmFilterCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmFilterDeleteById0( [in] HANDLE engineHandle, [in] UINT64 id );",
            "name": "FwpmFilterDeleteById0"
        },
        {
            "signature": "DWORD FwpmFilterDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmFilterDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmFilterDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmFilterDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmFilterEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_FILTER0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmFilterEnum0"
        },
        {
            "signature": "DWORD FwpmFilterGetById0( [in] HANDLE engineHandle, [in] UINT64 id, [out] FWPM_FILTER0 **filter );",
            "name": "FwpmFilterGetById0"
        },
        {
            "signature": "DWORD FwpmFilterGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_FILTER0 **filter );",
            "name": "FwpmFilterGetByKey0"
        },
        {
            "signature": "DWORD FwpmFilterGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmFilterGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmFilterSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmFilterSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmFilterSubscribeChanges0( [in] HANDLE engineHandle, [in] const FWPM_FILTER_SUBSCRIPTION0 *subscription, [in] FWPM_FILTER_CHANGE_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *changeHandle );",
            "name": "FwpmFilterSubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmFilterSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_FILTER_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmFilterSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmFilterUnsubscribeChanges0( [in] HANDLE engineHandle, [in] HANDLE changeHandle );",
            "name": "FwpmFilterUnsubscribeChanges0"
        },
        {
            "signature": "void FwpmFreeMemory0( [in, out] void **p );",
            "name": "FwpmFreeMemory0"
        },
        {
            "signature": "DWORD FwpmGetAppIdFromFileName0( [in] PCWSTR fileName, [out] FWP_BYTE_BLOB **appId );",
            "name": "FwpmGetAppIdFromFileName0"
        },
        {
            "signature": "DWORD FwpmIPsecTunnelAdd0( [in] HANDLE engineHandle, [in] UINT32 flags, [in, optional] const FWPM_PROVIDER_CONTEXT0 *mainModePolicy, [in] const FWPM_PROVIDER_CONTEXT0 *tunnelPolicy, [in] UINT32 numFilterConditions, [in] const FWPM_FILTER_CONDITION0 *filterConditions, [in, optional] PSECURITY_DESCRIPTOR sd );",
            "name": "FwpmIPsecTunnelAdd0"
        },
        {
            "signature": "DWORD FwpmIPsecTunnelAdd1( [in] HANDLE engineHandle, [in] UINT32 flags, [in, optional] const FWPM_PROVIDER_CONTEXT1 *mainModePolicy, [in] const FWPM_PROVIDER_CONTEXT1 *tunnelPolicy, [in] UINT32 numFilterConditions, [in] const FWPM_FILTER_CONDITION0 *filterConditions, [in, optional] const GUID *keyModKey, [in, optional] PSECURITY_DESCRIPTOR sd );",
            "name": "FwpmIPsecTunnelAdd1"
        },
        {
            "signature": "DWORD FwpmIPsecTunnelAdd2( [in] HANDLE engineHandle, [in] UINT32 flags, [in, optional] const FWPM_PROVIDER_CONTEXT2 *mainModePolicy, [in] const FWPM_PROVIDER_CONTEXT2 *tunnelPolicy, [in] UINT32 numFilterConditions, [in] const FWPM_FILTER_CONDITION0 *filterConditions, [in, optional] const GUID *keyModKey, [in, optional] PSECURITY_DESCRIPTOR sd );",
            "name": "FwpmIPsecTunnelAdd2"
        },
        {
            "signature": "DWORD FwpmIPsecTunnelDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmIPsecTunnelDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmLayerCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_LAYER_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmLayerCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmLayerDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmLayerDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmLayerEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_LAYER0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmLayerEnum0"
        },
        {
            "signature": "DWORD FwpmLayerGetById0( [in] HANDLE engineHandle, [in] UINT16 id, [out] FWPM_LAYER0 **layer );",
            "name": "FwpmLayerGetById0"
        },
        {
            "signature": "DWORD FwpmLayerGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_LAYER0 **layer );",
            "name": "FwpmLayerGetByKey0"
        },
        {
            "signature": "DWORD FwpmLayerGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmLayerGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmLayerSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmLayerSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmNetEventCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_NET_EVENT_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmNetEventCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmNetEventDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmNetEventDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmNetEventEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_NET_EVENT0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmNetEventEnum0"
        },
        {
            "signature": "DWORD FwpmNetEventEnum1( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_NET_EVENT1 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmNetEventEnum1"
        },
        {
            "signature": "DWORD FwpmNetEventEnum2( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_NET_EVENT2 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmNetEventEnum2"
        },
        {
            "signature": "DWORD FwpmNetEventEnum3( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_NET_EVENT3 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmNetEventEnum3"
        },
        {
            "signature": "DWORD FwpmNetEventsGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmNetEventsGetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmNetEventsSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmNetEventsSetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmNetEventSubscribe0( [in] HANDLE engineHandle, [in] const FWPM_NET_EVENT_SUBSCRIPTION0 *subscription, [in] FWPM_NET_EVENT_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *eventsHandle );",
            "name": "FwpmNetEventSubscribe0"
        },
        {
            "signature": "DWORD FwpmNetEventSubscribe1( [in] HANDLE engineHandle, [in] const FWPM_NET_EVENT_SUBSCRIPTION0 *subscription, [in] FWPM_NET_EVENT_CALLBACK1 callback, [in, optional] void *context, [out] HANDLE *eventsHandle );",
            "name": "FwpmNetEventSubscribe1"
        },
        {
            "signature": "DWORD FwpmNetEventSubscribe2( [in] HANDLE engineHandle, [in] const FWPM_NET_EVENT_SUBSCRIPTION0 *subscription, [in] FWPM_NET_EVENT_CALLBACK2 callback, [in, optional] void *context, [out] HANDLE *eventsHandle );",
            "name": "FwpmNetEventSubscribe2"
        },
        {
            "signature": "DWORD FwpmNetEventSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_NET_EVENT_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmNetEventSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmNetEventUnsubscribe0( [in] HANDLE engineHandle, [in, out] HANDLE eventsHandle );",
            "name": "FwpmNetEventUnsubscribe0"
        },
        {
            "signature": "DWORD FwpmProviderAdd0( [in] HANDLE engineHandle, [in] const FWPM_PROVIDER0 *provider, [in, optional] PSECURITY_DESCRIPTOR sd );",
            "name": "FwpmProviderAdd0"
        },
        {
            "signature": "DWORD FwpmProviderContextAdd0( [in] HANDLE engineHandle, [in] const FWPM_PROVIDER_CONTEXT0 *providerContext, [in, optional] PSECURITY_DESCRIPTOR sd, [out, optional] UINT64 *id );",
            "name": "FwpmProviderContextAdd0"
        },
        {
            "signature": "DWORD FwpmProviderContextAdd1( [in] HANDLE engineHandle, [in] const FWPM_PROVIDER_CONTEXT1 *providerContext, [in, optional] PSECURITY_DESCRIPTOR sd, [out, optional] UINT64 *id );",
            "name": "FwpmProviderContextAdd1"
        },
        {
            "signature": "DWORD FwpmProviderContextAdd2( [in] HANDLE engineHandle, [in] const FWPM_PROVIDER_CONTEXT2 *providerContext, [in, optional] PSECURITY_DESCRIPTOR sd, [out, optional] UINT64 *id );",
            "name": "FwpmProviderContextAdd2"
        },
        {
            "signature": "DWORD FwpmProviderContextCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmProviderContextCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmProviderContextDeleteById0( [in] HANDLE engineHandle, [in] UINT64 id );",
            "name": "FwpmProviderContextDeleteById0"
        },
        {
            "signature": "DWORD FwpmProviderContextDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmProviderContextDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmProviderContextDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmProviderContextDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmProviderContextEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_PROVIDER_CONTEXT0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmProviderContextEnum0"
        },
        {
            "signature": "DWORD FwpmProviderContextEnum1( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_PROVIDER_CONTEXT1 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmProviderContextEnum1"
        },
        {
            "signature": "DWORD FwpmProviderContextEnum2( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_PROVIDER_CONTEXT2 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmProviderContextEnum2"
        },
        {
            "signature": "DWORD FwpmProviderContextGetById0( [in] HANDLE engineHandle, [in] UINT64 id, [out] FWPM_PROVIDER_CONTEXT0 **providerContext );",
            "name": "FwpmProviderContextGetById0"
        },
        {
            "signature": "DWORD FwpmProviderContextGetById1( [in] HANDLE engineHandle, [in] UINT64 id, [out] FWPM_PROVIDER_CONTEXT1 **providerContext );",
            "name": "FwpmProviderContextGetById1"
        },
        {
            "signature": "DWORD FwpmProviderContextGetById2( [in] HANDLE engineHandle, [in] UINT64 id, [out] FWPM_PROVIDER_CONTEXT2 **providerContext );",
            "name": "FwpmProviderContextGetById2"
        },
        {
            "signature": "DWORD FwpmProviderContextGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_PROVIDER_CONTEXT0 **providerContext );",
            "name": "FwpmProviderContextGetByKey0"
        },
        {
            "signature": "DWORD FwpmProviderContextGetByKey1( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_PROVIDER_CONTEXT1 **providerContext );",
            "name": "FwpmProviderContextGetByKey1"
        },
        {
            "signature": "DWORD FwpmProviderContextGetByKey2( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_PROVIDER_CONTEXT2 **providerContext );",
            "name": "FwpmProviderContextGetByKey2"
        },
        {
            "signature": "DWORD FwpmProviderContextGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmProviderContextGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmProviderContextSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmProviderContextSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmProviderContextSubscribeChanges0( [in] HANDLE engineHandle, [in] const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 *subscription, [in] FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *changeHandle );",
            "name": "FwpmProviderContextSubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmProviderContextSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmProviderContextSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmProviderContextUnsubscribeChanges0( [in] HANDLE engineHandle, [in] HANDLE changeHandle );",
            "name": "FwpmProviderContextUnsubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmProviderCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_PROVIDER_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmProviderCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmProviderDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmProviderDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmProviderDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmProviderDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmProviderEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_PROVIDER0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmProviderEnum0"
        },
        {
            "signature": "DWORD FwpmProviderGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_PROVIDER0 **provider );",
            "name": "FwpmProviderGetByKey0"
        },
        {
            "signature": "DWORD FwpmProviderGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmProviderGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmProviderSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmProviderSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmProviderSubscribeChanges0( [in] HANDLE engineHandle, [in, optional] const FWPM_PROVIDER_SUBSCRIPTION0 *subscription, [in] FWPM_PROVIDER_CHANGE_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *changeHandle );",
            "name": "FwpmProviderSubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmProviderSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_PROVIDER_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmProviderSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmProviderUnsubscribeChanges0( [in] HANDLE engineHandle, [in] HANDLE changeHandle );",
            "name": "FwpmProviderUnsubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmSessionCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_SESSION_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmSessionCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmSessionDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmSessionDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmSessionEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_SESSION0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmSessionEnum0"
        },
        {
            "signature": "DWORD FwpmSubLayerAdd0( [in] HANDLE engineHandle, [in] const FWPM_SUBLAYER0 *subLayer, [in, optional] PSECURITY_DESCRIPTOR sd );",
            "name": "FwpmSubLayerAdd0"
        },
        {
            "signature": "DWORD FwpmSubLayerCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const FWPM_SUBLAYER_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "FwpmSubLayerCreateEnumHandle0"
        },
        {
            "signature": "DWORD FwpmSubLayerDeleteByKey0( [in] HANDLE engineHandle, [in] const GUID *key );",
            "name": "FwpmSubLayerDeleteByKey0"
        },
        {
            "signature": "DWORD FwpmSubLayerDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "FwpmSubLayerDestroyEnumHandle0"
        },
        {
            "signature": "DWORD FwpmSubLayerEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] FWPM_SUBLAYER0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "FwpmSubLayerEnum0"
        },
        {
            "signature": "DWORD FwpmSubLayerGetByKey0( [in] HANDLE engineHandle, [in] const GUID *key, [out] FWPM_SUBLAYER0 **subLayer );",
            "name": "FwpmSubLayerGetByKey0"
        },
        {
            "signature": "DWORD FwpmSubLayerGetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmSubLayerGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmSubLayerSetSecurityInfoByKey0( [in] HANDLE engineHandle, [in, optional] const GUID *key, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmSubLayerSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD FwpmSubLayerSubscribeChanges0( [in] HANDLE engineHandle, [in] const FWPM_SUBLAYER_SUBSCRIPTION0 *subscription, [in] FWPM_SUBLAYER_CHANGE_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *changeHandle );",
            "name": "FwpmSubLayerSubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmSubLayerSubscriptionsGet0( [in] HANDLE engineHandle, [out] FWPM_SUBLAYER_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "FwpmSubLayerSubscriptionsGet0"
        },
        {
            "signature": "DWORD FwpmSubLayerUnsubscribeChanges0( [in] HANDLE engineHandle, [in] HANDLE changeHandle );",
            "name": "FwpmSubLayerUnsubscribeChanges0"
        },
        {
            "signature": "DWORD FwpmSystemPortsGet0( [in, optional] HANDLE engineHandle, [out] FWPM_SYSTEM_PORTS0 **sysPorts );",
            "name": "FwpmSystemPortsGet0"
        },
        {
            "signature": "DWORD FwpmSystemPortsSubscribe0( [in, optional] HANDLE engineHandle, void *reserved, [in] FWPM_SYSTEM_PORTS_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *sysPortsHandle );",
            "name": "FwpmSystemPortsSubscribe0"
        },
        {
            "signature": "DWORD FwpmSystemPortsUnsubscribe0( [in, optional] HANDLE engineHandle, [in, out] HANDLE sysPortsHandle );",
            "name": "FwpmSystemPortsUnsubscribe0"
        },
        {
            "signature": "DWORD FwpmTransactionAbort0( [in] HANDLE engineHandle );",
            "name": "FwpmTransactionAbort0"
        },
        {
            "signature": "DWORD FwpmTransactionBegin0( [in] HANDLE engineHandle, [in] UINT32 flags );",
            "name": "FwpmTransactionBegin0"
        },
        {
            "signature": "DWORD FwpmTransactionCommit0( [in] HANDLE engineHandle );",
            "name": "FwpmTransactionCommit0"
        },
        {
            "signature": "DWORD FwpmvSwitchEventsGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out] PSID *sidOwner, [out] PSID *sidGroup, [out] PACL *dacl, [out] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "FwpmvSwitchEventsGetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmvSwitchEventsSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "FwpmvSwitchEventsSetSecurityInfo0"
        },
        {
            "signature": "DWORD FwpmvSwitchEventSubscribe0( [in] HANDLE engineHandle, [in] const FWPM_VSWITCH_EVENT_SUBSCRIPTION0 *subscription, [in] FWPM_VSWITCH_EVENT_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *subscriptionHandle );",
            "name": "FwpmvSwitchEventSubscribe0"
        },
        {
            "signature": "DWORD FwpmvSwitchEventUnsubscribe0( [in] HANDLE engineHandle, [in, out] HANDLE subscriptionHandle );",
            "name": "FwpmvSwitchEventUnsubscribe0"
        },
        {
            "signature": "DWORD IkeextGetStatistics0( [in] HANDLE engineHandle, [out] IKEEXT_STATISTICS0 *ikeextStatistics );",
            "name": "IkeextGetStatistics0"
        },
        {
            "signature": "DWORD IkeextGetStatistics1( [in] HANDLE engineHandle, [out] IKEEXT_STATISTICS1 *ikeextStatistics );",
            "name": "IkeextGetStatistics1"
        },
        {
            "signature": "DWORD IkeextSaCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const IKEEXT_SA_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "IkeextSaCreateEnumHandle0"
        },
        {
            "signature": "DWORD IkeextSaDbGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "IkeextSaDbGetSecurityInfo0"
        },
        {
            "signature": "DWORD IkeextSaDbSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "IkeextSaDbSetSecurityInfo0"
        },
        {
            "signature": "DWORD IkeextSaDeleteById0( [in] HANDLE engineHandle, [in] UINT64 id );",
            "name": "IkeextSaDeleteById0"
        },
        {
            "signature": "DWORD IkeextSaDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "IkeextSaDestroyEnumHandle0"
        },
        {
            "signature": "DWORD IkeextSaEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IKEEXT_SA_DETAILS0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IkeextSaEnum0"
        },
        {
            "signature": "DWORD IkeextSaEnum1( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IKEEXT_SA_DETAILS1 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IkeextSaEnum1"
        },
        {
            "signature": "DWORD IkeextSaEnum2( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IKEEXT_SA_DETAILS2 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IkeextSaEnum2"
        },
        {
            "signature": "DWORD IkeextSaGetById0( [in] HANDLE engineHandle, [in] UINT64 id, [out] IKEEXT_SA_DETAILS0 **sa );",
            "name": "IkeextSaGetById0"
        },
        {
            "signature": "DWORD IkeextSaGetById1( [in] HANDLE engineHandle, [in] UINT64 id, [in, optional] GUID *saLookupContext, [out] IKEEXT_SA_DETAILS1 **sa );",
            "name": "IkeextSaGetById1"
        },
        {
            "signature": "DWORD IkeextSaGetById2( [in] HANDLE engineHandle, [in] UINT64 id, [in, optional] GUID *saLookupContext, [out] IKEEXT_SA_DETAILS2 **sa );",
            "name": "IkeextSaGetById2"
        },
        {
            "signature": "IPSEC_KEY_MANAGER_DICTATE_KEY0 IpsecKeyManagerDictateKey0; DWORD IpsecKeyManagerDictateKey0( IPSEC_SA_DETAILS1 *inboundSaDetails, IPSEC_SA_DETAILS1 *outboundSaDetails, BOOL *keyingModuleGenKey ) {...}",
            "name": "IPSEC_KEY_MANAGER_DICTATE_KEY0 callback"
        },
        {
            "signature": "IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 IpsecKeyManagerKeyDictationCheck0; void IpsecKeyManagerKeyDictationCheck0( [in] const IKEEXT_TRAFFIC0 *ikeTraffic, [out] BOOL *willDictateKey, [out] UINT32 *weight ) {...}",
            "name": "IPSEC_KEY_MANAGER_KEY_DICTATION_CHECK0 callback"
        },
        {
            "signature": "IPSEC_KEY_MANAGER_NOTIFY_KEY0 IpsecKeyManagerNotifyKey0; void IpsecKeyManagerNotifyKey0( [in] const IPSEC_SA_DETAILS1 *inboundSa, [in] const IPSEC_SA_DETAILS1 *outboundSa ) {...}",
            "name": "IPSEC_KEY_MANAGER_NOTIFY_KEY0 callback"
        },
        {
            "signature": "IPSEC_SA_CONTEXT_CALLBACK0 IpsecSaContextCallback0; void IpsecSaContextCallback0( [in, out] void *context, [in] const IPSEC_SA_CONTEXT_CHANGE0 *change ) {...}",
            "name": "IPSEC_SA_CONTEXT_CALLBACK0 callback"
        },
        {
            "signature": "DWORD IPsecDospGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "IPsecDospGetSecurityInfo0"
        },
        {
            "signature": "DWORD IPsecDospGetStatistics0( [in] HANDLE engineHandle, [out] IPSEC_DOSP_STATISTICS0 *idpStatistics );",
            "name": "IPsecDospGetStatistics0"
        },
        {
            "signature": "DWORD IPsecDospSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "IPsecDospSetSecurityInfo0"
        },
        {
            "signature": "DWORD IPsecDospStateCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const IPSEC_DOSP_STATE_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "IPsecDospStateCreateEnumHandle0"
        },
        {
            "signature": "DWORD IPsecDospStateDestroyEnumHandle0( [in] HANDLE engineHandle, [in, out] HANDLE enumHandle );",
            "name": "IPsecDospStateDestroyEnumHandle0"
        },
        {
            "signature": "DWORD IPsecDospStateEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IPSEC_DOSP_STATE0 ***entries, [out] UINT32 *numEntries );",
            "name": "IPsecDospStateEnum0"
        },
        {
            "signature": "DWORD IPsecGetStatistics0( [in] HANDLE engineHandle, [out] IPSEC_STATISTICS0 *ipsecStatistics );",
            "name": "IPsecGetStatistics0"
        },
        {
            "signature": "DWORD IPsecGetStatistics1( [in] HANDLE engineHandle, [out] IPSEC_STATISTICS1 *ipsecStatistics );",
            "name": "IPsecGetStatistics1"
        },
        {
            "signature": "DWORD IPsecKeyManagerAddAndRegister0( [in] HANDLE engineHandle, [in] const IPSEC_KEY_MANAGER0 *keyManager, [in] const IPSEC_KEY_MANAGER_CALLBACKS0 *keyManagerCallbacks, [out] HANDLE *keyMgmtHandle );",
            "name": "IPsecKeyManagerAddAndRegister0"
        },
        {
            "signature": "DWORD IPsecKeyManagerGetSecurityInfoByKey0( [in] HANDLE engineHandle, const void *reserved, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "IPsecKeyManagerGetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD IPsecKeyManagerSetSecurityInfoByKey0( [in] HANDLE engineHandle, const void *reserved, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "IPsecKeyManagerSetSecurityInfoByKey0"
        },
        {
            "signature": "DWORD IPsecKeyManagersGet0( [in] HANDLE engineHandle, [out] IPSEC_KEY_MANAGER0 ***entries, [out] UINT32 *numEntries );",
            "name": "IPsecKeyManagersGet0"
        },
        {
            "signature": "DWORD IPsecKeyManagerUnregisterAndDelete0( [in] HANDLE engineHandle, [in] HANDLE keyMgmtHandle );",
            "name": "IPsecKeyManagerUnregisterAndDelete0"
        },
        {
            "signature": "DWORD IPsecSaContextAddInbound0( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_SA_BUNDLE0 *inboundBundle );",
            "name": "IPsecSaContextAddInbound0"
        },
        {
            "signature": "DWORD IPsecSaContextAddInbound1( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_SA_BUNDLE1 *inboundBundle );",
            "name": "IPsecSaContextAddInbound1"
        },
        {
            "signature": "DWORD IPsecSaContextAddOutbound0( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_SA_BUNDLE0 *outboundBundle );",
            "name": "IPsecSaContextAddOutbound0"
        },
        {
            "signature": "DWORD IPsecSaContextAddOutbound1( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_SA_BUNDLE1 *outboundBundle );",
            "name": "IPsecSaContextAddOutbound1"
        },
        {
            "signature": "DWORD IPsecSaContextCreate0( [in] HANDLE engineHandle, [in] const IPSEC_TRAFFIC0 *outboundTraffic, [out, optional] UINT64 *inboundFilterId, [out] UINT64 *id );",
            "name": "IPsecSaContextCreate0"
        },
        {
            "signature": "DWORD IPsecSaContextCreate1( [in] HANDLE engineHandle, [in] const IPSEC_TRAFFIC1 *outboundTraffic, [in, optional] const IPSEC_VIRTUAL_IF_TUNNEL_INFO0 *virtualIfTunnelInfo, [out, optional] UINT64 *inboundFilterId, [out] UINT64 *id );",
            "name": "IPsecSaContextCreate1"
        },
        {
            "signature": "DWORD IPsecSaContextCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "IPsecSaContextCreateEnumHandle0"
        },
        {
            "signature": "DWORD IPsecSaContextDeleteById0( [in] HANDLE engineHandle, [in] UINT64 id );",
            "name": "IPsecSaContextDeleteById0"
        },
        {
            "signature": "DWORD IPsecSaContextDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "IPsecSaContextDestroyEnumHandle0"
        },
        {
            "signature": "DWORD IPsecSaContextEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IPSEC_SA_CONTEXT0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IPsecSaContextEnum0"
        },
        {
            "signature": "DWORD IPsecSaContextEnum1( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IPSEC_SA_CONTEXT1 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IPsecSaContextEnum1"
        },
        {
            "signature": "DWORD IPsecSaContextExpire0( [in] HANDLE engineHandle, [in] UINT64 id );",
            "name": "IPsecSaContextExpire0"
        },
        {
            "signature": "DWORD IPsecSaContextGetById0( [in] HANDLE engineHandle, [in] UINT64 id, [out] IPSEC_SA_CONTEXT0 **saContext );",
            "name": "IPsecSaContextGetById0"
        },
        {
            "signature": "DWORD IPsecSaContextGetById1( [in] HANDLE engineHandle, [in] UINT64 id, [out] IPSEC_SA_CONTEXT1 **saContext );",
            "name": "IPsecSaContextGetById1"
        },
        {
            "signature": "DWORD IPsecSaContextGetSpi0( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_GETSPI0 *getSpi, [out] IPSEC_SA_SPI *inboundSpi );",
            "name": "IPsecSaContextGetSpi0"
        },
        {
            "signature": "DWORD IPsecSaContextGetSpi1( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_GETSPI1 *getSpi, [out] IPSEC_SA_SPI *inboundSpi );",
            "name": "IPsecSaContextGetSpi1"
        },
        {
            "signature": "DWORD IPsecSaContextSetSpi0( [in] HANDLE engineHandle, [in] UINT64 id, [in] const IPSEC_GETSPI1 *getSpi, [in] IPSEC_SA_SPI inboundSpi );",
            "name": "IPsecSaContextSetSpi0"
        },
        {
            "signature": "DWORD IPsecSaContextSubscribe0( [in] HANDLE engineHandle, [in] const IPSEC_SA_CONTEXT_SUBSCRIPTION0 *subscription, [in] IPSEC_SA_CONTEXT_CALLBACK0 callback, [in, optional] void *context, [out] HANDLE *eventsHandle );",
            "name": "IPsecSaContextSubscribe0"
        },
        {
            "signature": "DWORD IPsecSaContextSubscriptionsGet0( [in] HANDLE engineHandle, [out] IPSEC_SA_CONTEXT_SUBSCRIPTION0 ***entries, [out] UINT32 *numEntries );",
            "name": "IPsecSaContextSubscriptionsGet0"
        },
        {
            "signature": "DWORD IPsecSaContextUnsubscribe0( [in] HANDLE engineHandle, [in, out] HANDLE eventsHandle );",
            "name": "IPsecSaContextUnsubscribe0"
        },
        {
            "signature": "DWORD IPsecSaContextUpdate0( [in] HANDLE engineHandle, [in] UINT64 flags, [in] const IPSEC_SA_CONTEXT1 *newValues );",
            "name": "IPsecSaContextUpdate0"
        },
        {
            "signature": "DWORD IPsecSaCreateEnumHandle0( [in] HANDLE engineHandle, [in, optional] const IPSEC_SA_ENUM_TEMPLATE0 *enumTemplate, [out] HANDLE *enumHandle );",
            "name": "IPsecSaCreateEnumHandle0"
        },
        {
            "signature": "DWORD IPsecSaDbGetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [out, optional] PSID *sidOwner, [out, optional] PSID *sidGroup, [out, optional] PACL *dacl, [out, optional] PACL *sacl, [out] PSECURITY_DESCRIPTOR *securityDescriptor );",
            "name": "IPsecSaDbGetSecurityInfo0"
        },
        {
            "signature": "DWORD IPsecSaDbSetSecurityInfo0( [in] HANDLE engineHandle, [in] SECURITY_INFORMATION securityInfo, [in, optional] const SID *sidOwner, [in, optional] const SID *sidGroup, [in, optional] const ACL *dacl, [in, optional] const ACL *sacl );",
            "name": "IPsecSaDbSetSecurityInfo0"
        },
        {
            "signature": "DWORD IPsecSaDestroyEnumHandle0( [in] HANDLE engineHandle, [in] HANDLE enumHandle );",
            "name": "IPsecSaDestroyEnumHandle0"
        },
        {
            "signature": "DWORD IPsecSaEnum0( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IPSEC_SA_DETAILS0 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IPsecSaEnum0"
        },
        {
            "signature": "DWORD IPsecSaEnum1( [in] HANDLE engineHandle, [in] HANDLE enumHandle, [in] UINT32 numEntriesRequested, [out] IPSEC_SA_DETAILS1 ***entries, [out] UINT32 *numEntriesReturned );",
            "name": "IPsecSaEnum1"
        }
    ],
    "Fwpstypes.h": [],
    "Fwptypes.h": [],
    "Fxsutility.h": [
        {
            "signature": "BOOL CanSendToFaxRecipient();",
            "name": "CanSendToFaxRecipient"
        },
        {
            "signature": "DWORD SendToFaxRecipient( SendToMode sndMode, LPCWSTR lpFileName );",
            "name": "SendToFaxRecipient"
        }
    ],
    "Gamingdeviceinformation.h": [
        {
            "signature": "HRESULT GetGamingDeviceModelInformation( [out] GAMING_DEVICE_MODEL_INFORMATION *information );",
            "name": "GetGamingDeviceModelInformation"
        }
    ],
    "Gamingtcui.h": [
        {
            "signature": "HRESULT CheckGamingPrivilegeSilently( [in] UINT32 privilegeId, [in] HSTRING scope, [in] [in] HSTRING policy, [out] BOOL *hasPrivilege );",
            "name": "CheckGamingPrivilegeSilently"
        },
        {
            "signature": "HRESULT CheckGamingPrivilegeWithUI( [in] UINT32 privilegeId, [in] HSTRING scope, [in] HSTRING policy, [in, optional] HSTRING friendlyMessage, [in] GameUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "CheckGamingPrivilegeWithUI"
        },
        {
            "signature": "GameUICompletionRoutine Gameuicompletionroutine; void Gameuicompletionroutine( [in] HRESULT returnCode, [in, optional] void *context ) {...}",
            "name": "GameUICompletionRoutine callback"
        },
        {
            "signature": "PlayerPickerUICompletionRoutine Playerpickeruicompletionroutine; void Playerpickeruicompletionroutine( [in] HRESULT returnCode, [in, optional] void *context, [in] const HSTRING *selectedXuids, [in] size_t selectedXuidsCount ) {...}",
            "name": "PlayerPickerUICompletionRoutine callback"
        },
        {
            "signature": "HRESULT ProcessPendingGameUI( [in] BOOL waitForCompletion );",
            "name": "ProcessPendingGameUI"
        },
        {
            "signature": "HRESULT ShowChangeFriendRelationshipUI( [in] HSTRING targetUserXuid, [in] GameUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "ShowChangeFriendRelationshipUI"
        },
        {
            "signature": "HRESULT ShowGameInviteUI( [in] HSTRING serviceConfigurationId, [in] HSTRING sessionTemplateName, [in] HSTRING sessionId, [in] HSTRING invitationDisplayText, [in] GameUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "ShowGameInviteUI"
        },
        {
            "signature": "HRESULT ShowPlayerPickerUI( [in] HSTRING promptDisplayText, [in] const HSTRING *xuids, [in] size_t xuidsCount, [in, optional] const HSTRING *preSelectedXuids, [in] size_t preSelectedXuidsCount, [in] size_t minSelectionCount, [in] size_t maxSelectionCount, [in] PlayerPickerUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "ShowPlayerPickerUI"
        },
        {
            "signature": "HRESULT ShowProfileCardUI( [in] HSTRING targetUserXuid, [in] GameUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "ShowProfileCardUI"
        },
        {
            "signature": "HRESULT ShowTitleAchievementsUI( [in] UINT32 titleId, [in] GameUICompletionRoutine completionRoutine, [in, optional] void *context );",
            "name": "ShowTitleAchievementsUI"
        },
        {
            "signature": "BOOL TryCancelPendingGameUI();",
            "name": "TryCancelPendingGameUI"
        }
    ],
    "Gb18030.h": [
        {
            "signature": "DWORD NlsDllCodePageTranslation( [in] DWORD CodePage, [in] DWORD dwFlags, [in, out] LPSTR lpMultiByteStr, [in] int cchMultiByte, [in, out] LPWSTR lpWideCharStr, [in] int cchWideChar, [in] LPCPINFO lpCPInfo );",
            "name": "NlsDllCodePageTranslation"
        }
    ],
    "Gdiplusbase.h": [],
    "Gdiplusbrush.h": [],
    "Gdipluscolor.h": [],
    "Gdipluscolormatrix.h": [],
    "Gdipluseffects.h": [],
    "Gdiplusenums.h": [
        {
            "signature": "BOOL ObjectTypeIsValid( ObjectType type );",
            "name": "ObjectTypeIsValid"
        }
    ],
    "Gdiplusgraphics.h": [],
    "Gdiplusheaders.h": [],
    "Gdiplusimageattributes.h": [],
    "Gdiplusimagecodec.h": [
        {
            "signature": "Status GetImageDecoders( [in] UINT numDecoders, [in] UINT size, [out] ImageCodecInfo *decoders );",
            "name": "GetImageDecoders"
        },
        {
            "signature": "Status GetImageDecodersSize( [out] UINT *numDecoders, [out] UINT *size );",
            "name": "GetImageDecodersSize"
        },
        {
            "signature": "Status GetImageEncoders( [in] UINT numEncoders, [in] UINT size, [out] ImageCodecInfo *encoders );",
            "name": "GetImageEncoders"
        },
        {
            "signature": "Status GetImageEncodersSize( [out] UINT *numEncoders, [out] UINT *size );",
            "name": "GetImageEncodersSize"
        }
    ],
    "Gdiplusimaging.h": [],
    "Gdiplusinit.h": [
        {
            "signature": "DebugEventProc Debugeventproc; void Debugeventproc( DebugEventLevel level, CHAR *message ) {...}",
            "name": "DebugEventProc callback"
        },
        {
            "signature": "void GdiplusShutdown( ULONG_PTR token );",
            "name": "GdiplusShutdown"
        },
        {
            "signature": "Status GdiplusStartup( ULONG_PTR *token, const GdiplusStartupInput *input, GdiplusStartupOutput *output );",
            "name": "GdiplusStartup"
        },
        {
            "signature": "NotificationHookProc Notificationhookproc; Status Notificationhookproc( ULONG_PTR *token ) {...}",
            "name": "NotificationHookProc callback"
        },
        {
            "signature": "NotificationUnhookProc Notificationunhookproc; void Notificationunhookproc( ULONG_PTR token ) {...}",
            "name": "NotificationUnhookProc callback"
        }
    ],
    "Gdipluslinecaps.h": [],
    "Gdiplusmatrix.h": [],
    "Gdiplusmetaheader.h": [],
    "Gdipluspath.h": [],
    "Gdipluspen.h": [],
    "Gdipluspixelformats.h": [
        {
            "signature": "UINT GetPixelFormatSize( PixelFormat pixfmt );",
            "name": "GetPixelFormatSize"
        },
        {
            "signature": "BOOL IsAlphaPixelFormat( PixelFormat pixfmt );",
            "name": "IsAlphaPixelFormat"
        },
        {
            "signature": "BOOL IsCanonicalPixelFormat( PixelFormat pixfmt );",
            "name": "IsCanonicalPixelFormat"
        },
        {
            "signature": "BOOL IsExtendedPixelFormat( PixelFormat pixfmt );",
            "name": "IsExtendedPixelFormat"
        },
        {
            "signature": "BOOL IsIndexedPixelFormat( PixelFormat pixfmt );",
            "name": "IsIndexedPixelFormat"
        }
    ],
    "Gdiplusstringformat.h": [],
    "Gdiplustypes.h": [
        {
            "signature": "EnumerateMetafileProc Enumeratemetafileproc; BOOL Enumeratemetafileproc( EmfPlusRecordType unnamedParam1, UINT unnamedParam2, UINT unnamedParam3, const BYTE *unnamedParam4, VOID *unnamedParam5 ) {...}",
            "name": "EnumerateMetafileProc callback"
        },
        {
            "signature": "ImageAbort Imageabort; BOOL Imageabort( VOID *unnamedParam1 ) {...}",
            "name": "ImageAbort callback"
        }
    ],
    "Genericusbfnioctl.h": [],
    "Gpedit.h": [
        {
            "signature": "GPEDITAPI HRESULT BrowseForGPO( [in, out] LPGPOBROWSEINFO lpBrowseInfo );",
            "name": "BrowseForGPO"
        },
        {
            "signature": "GPEDITAPI HRESULT CreateGPOLink( [in] LPOLESTR lpGPO, [in] LPOLESTR lpContainer, [in] BOOL fHighPriority );",
            "name": "CreateGPOLink"
        },
        {
            "signature": "GPEDITAPI HRESULT DeleteAllGPOLinks( [in] LPOLESTR lpContainer );",
            "name": "DeleteAllGPOLinks"
        },
        {
            "signature": "GPEDITAPI HRESULT DeleteGPOLink( [in] LPOLESTR lpGPO, [in] LPOLESTR lpContainer );",
            "name": "DeleteGPOLink"
        },
        {
            "signature": "GPEDITAPI HRESULT ExportRSoPData( [in] LPOLESTR lpNameSpace, [in] LPOLESTR lpFileName );",
            "name": "ExportRSoPData"
        },
        {
            "signature": "GPEDITAPI HRESULT ImportRSoPData( [in] LPOLESTR lpNameSpace, [in] LPOLESTR lpFileName );",
            "name": "ImportRSoPData"
        }
    ],
    "Gpmgmt.h": [],
    "Guiddef.h": [],
    "Handleapi.h": [
        {
            "signature": "BOOL CloseHandle( [in] HANDLE hObject );",
            "name": "CloseHandle"
        },
        {
            "signature": "BOOL CompareObjectHandles( [in] HANDLE hFirstObjectHandle, [in] HANDLE hSecondObjectHandle );",
            "name": "CompareObjectHandles"
        },
        {
            "signature": "BOOL DuplicateHandle( [in] HANDLE hSourceProcessHandle, [in] HANDLE hSourceHandle, [in] HANDLE hTargetProcessHandle, [out] LPHANDLE lpTargetHandle, [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] DWORD dwOptions );",
            "name": "DuplicateHandle"
        },
        {
            "signature": "BOOL GetHandleInformation( [in] HANDLE hObject, [out] LPDWORD lpdwFlags );",
            "name": "GetHandleInformation"
        },
        {
            "signature": "BOOL SetHandleInformation( [in] HANDLE hObject, [in] DWORD dwMask, [in] DWORD dwFlags );",
            "name": "SetHandleInformation"
        }
    ],
    "Hbaapi.h": [
        {
            "signature": "void HBA_API HBA_CloseAdapter( HBA_HANDLE handle );",
            "name": "HBA_CloseAdapter"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_FreeLibrary();",
            "name": "HBA_FreeLibrary"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetAdapterAttributes( HBA_HANDLE Handle, HBA_ADAPTERATTRIBUTES *HbaAttributes );",
            "name": "HBA_GetAdapterAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetAdapterName( HBA_UINT32 AdapterIndex, PSTR AdapterName );",
            "name": "HBA_GetAdapterName"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetAdapterPortAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTATTRIBUTES *PortAttributes );",
            "name": "HBA_GetAdapterPortAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetBindingCapability( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY *Flags );",
            "name": "HBA_GetBindingCapability"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetBindingSupport( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY *Flags );",
            "name": "HBA_GetBindingSupport"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetDiscoveredPortAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 DiscoveredPortIndex, HBA_PORTATTRIBUTES *PortAttributes );",
            "name": "HBA_GetDiscoveredPortAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetEventBuffer( HBA_HANDLE Handle, PHBA_EVENTINFO EventBuffer, HBA_UINT32 *EventCount );",
            "name": "HBA_GetEventBuffer"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetFC4Statistics( HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT8 FC4type, HBA_FC4STATISTICS *Statistics );",
            "name": "HBA_GetFC4Statistics"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetFcpPersistentBinding( HBA_HANDLE Handle, PHBA_FCPBINDING Binding );",
            "name": "HBA_GetFcpPersistentBinding"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetFCPStatistics( HBA_HANDLE Handle, const HBA_SCSIID *Lunit, HBA_FC4STATISTICS *Statistics );",
            "name": "HBA_GetFCPStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetFcpTargetMapping( HBA_HANDLE Handle, PHBA_FCPTARGETMAPPING Mapping );",
            "name": "HBA_GetFcpTargetMapping"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetFcpTargetMappingV2( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_FCPTARGETMAPPINGV2 *Mapping );",
            "name": "HBA_GetFcpTargetMappingV2"
        },
        {
            "signature": "HBA_UINT32 HBA_API HBA_GetNumberOfAdapters();",
            "name": "HBA_GetNumberOfAdapters"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetPersistentBindingV2( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding );",
            "name": "HBA_GetPersistentBindingV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetPortAttributesByWWN( HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_PORTATTRIBUTES *PortAttributes );",
            "name": "HBA_GetPortAttributesByWWN"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetPortStatistics( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTSTATISTICS *PortStatistics );",
            "name": "HBA_GetPortStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetRNIDMgmtInfo( HBA_HANDLE Handle, HBA_MGMTINFO *pInfo );",
            "name": "HBA_GetRNIDMgmtInfo"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetSBStatistics( HBA_HANDLE HbaHandle, const HBA_SBDEVID *Device, PHBA_SBSTATISTICS Statistics );",
            "name": "HBA_GetSBStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_GetSBTargetMapping( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, PHBA_SBTARGETMAPPING Mapping );",
            "name": "HBA_GetSBTargetMapping"
        },
        {
            "signature": "HBA_UINT32 HBA_API HBA_GetVendorLibraryAttributes( HBA_UINT32 AdapterIndex, HBA_LIBRARYATTRIBUTES *Attributes );",
            "name": "HBA_GetVendorLibraryAttributes"
        },
        {
            "signature": "HBA_UINT32 HBA_API HBA_GetVersion();",
            "name": "HBA_GetVersion"
        },
        {
            "signature": "HBA_UINT32 HBA_API HBA_GetWrapperLibraryAttributes( HBA_LIBRARYATTRIBUTES *Attributes );",
            "name": "HBA_GetWrapperLibraryAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_LoadLibrary();",
            "name": "HBA_LoadLibrary"
        },
        {
            "signature": "HBA_HANDLE HBA_API HBA_OpenAdapter( PSTR AdapterName );",
            "name": "HBA_OpenAdapter"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_OpenAdapterByWWN( HBA_HANDLE *HbaHandle, HBA_WWN Wwn );",
            "name": "HBA_OpenAdapterByWWN"
        },
        {
            "signature": "void HBA_API HBA_RefreshAdapterConfiguration();",
            "name": "HBA_RefreshAdapterConfiguration"
        },
        {
            "signature": "void HBA_API HBA_RefreshInformation( HBA_HANDLE Handle );",
            "name": "HBA_RefreshInformation"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForAdapterAddEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "HBA_RegisterForAdapterAddEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForAdapterEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "HBA_RegisterForAdapterEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForAdapterPortEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType,HBA_UINT32 fabricPortID) callback, void *UserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "HBA_RegisterForAdapterPortEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForAdapterPortStatEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_PORTSTATISTICS stats, HBA_UINT32 statType, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "HBA_RegisterForAdapterPortStatEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForLinkEvents( void(* )(void *data,HBA_WWN adapterWWN,HBA_UINT32 eventType, void *pRLIRBuffer,HBA_UINT32 RLIRBufferSize) callback, void *userData, void *pRLIRBuffer, HBA_UINT32 RLIRBufferSize, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "HBA_RegisterForLinkEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterForTargetEvents( void(* )(void *pData,HBA_WWN hbaPortWWN,HBA_WWN discoveredPortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_CALLBACKHANDLE *pCallbackHandle, HBA_UINT32 AllTargets );",
            "name": "HBA_RegisterForTargetEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterLibrary( PHBA_ENTRYPOINTS entrypoints );",
            "name": "HBA_RegisterLibrary"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RegisterLibraryV2( PHBA_ENTRYPOINTSV2 entrypoints );",
            "name": "HBA_RegisterLibraryV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RemoveAllPersistentBindings( HBA_HANDLE Handle, HBA_WWN HbaPortWWN );",
            "name": "HBA_RemoveAllPersistentBindings"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RemoveCallback( HBA_CALLBACKHANDLE callbackHandle );",
            "name": "HBA_RemoveCallback"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_RemovePersistentBinding( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding );",
            "name": "HBA_RemovePersistentBinding"
        },
        {
            "signature": "void HBA_API HBA_ResetStatistics( HBA_HANDLE Handle, HBA_UINT32 PortIndex );",
            "name": "HBA_ResetStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SBDskGetCapacity( HBA_DEVICESELFDESC DeviceSelfDesc, PHBA_SBDSKCAPACITY PSbDskCapacity );",
            "name": "HBA_SBDskGetCapacity"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_ScsiInquiryV2( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_UINT64 FcLUN, HBA_UINT8 CDB_Byte1, HBA_UINT8 CDB_Byte2, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "HBA_ScsiInquiryV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_ScsiReadCapacityV2( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_UINT64 FcLUN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "HBA_ScsiReadCapacityV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_ScsiReportLUNsV2( HBA_HANDLE Hbahandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "HBA_ScsiReportLUNsV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendCTPassThru( HBA_HANDLE Handle, void *pReqBuffer, HBA_UINT32 ReqBufferSize, void *pRspBuffer, HBA_UINT32 RspBufferSize );",
            "name": "HBA_SendCTPassThru"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendCTPassThruV2( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, void *pReqBuffer, HBA_UINT32 ReqBufferSize, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendCTPassThruV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendLIRR( HBA_HANDLE Handle, HBA_WWN SourceWWN, HBA_WWN DestWWN, HBA_UINT8 Function, HBA_UINT8 Type, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendLIRR"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendReadCapacity( HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT64 FcLUN, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize );",
            "name": "HBA_SendReadCapacity"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendReportLUNs( HBA_HANDLE Handle, HBA_WWN PortWWN, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize );",
            "name": "HBA_SendReportLUNs"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendRLS( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendRLS"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendRNID( HBA_HANDLE Handle, HBA_WWN Wwn, HBA_WWNTYPE WnnType, void *pRspBuffer, HBA_UINT32 *RspBufferSize );",
            "name": "HBA_SendRNID"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendRNIDV2( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, HBA_UINT32 NodeIdDataFormat, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendRNIDV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendRPL( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Agent_wwn, HBA_UINT32 Agent_domain, HBA_UINT32 PortIndex, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendRPL"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendRPS( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Agent_wwn, HBA_UINT32 Agent_domain, HBA_WWN Object_wwn, HBA_UINT32 Object_port_number, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendRPS"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendScsiInquiry( HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT64 FcLUN, HBA_UINT8 EVPD, HBA_UINT32 PageCode, void *pRspBuffer, HBA_UINT32 RspBufferSize, void *pSenseBuffer, HBA_UINT32 SenseBufferSize );",
            "name": "HBA_SendScsiInquiry"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SendSRL( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN Wwn, HBA_UINT32 Domain, void *pRspBuffer, HBA_UINT32 *pRspBufferSize );",
            "name": "HBA_SendSRL"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SetBindingSupport( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_BIND_CAPABILITY Flags );",
            "name": "HBA_SetBindingSupport"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SetPersistentBindingV2( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, PHBA_FCPBINDING2 Binding );",
            "name": "HBA_SetPersistentBindingV2"
        },
        {
            "signature": "HBA_STATUS HBA_API HBA_SetRNIDMgmtInfo( HBA_HANDLE Handle, HBA_MGMTINFO *pInfo );",
            "name": "HBA_SetRNIDMgmtInfo"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetAdapterAttributes( HBA_HANDLE Handle, SMHBA_ADAPTERATTRIBUTES *AdapterAttributes );",
            "name": "SMHBA_GetAdapterAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetAdapterPortAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, SMHBA_PORTATTRIBUTES *PortAttributes );",
            "name": "SMHBA_GetAdapterPortAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetBindingCapability( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY *Flags );",
            "name": "SMHBA_GetBindingCapability"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetBindingSupport( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY *Flags );",
            "name": "SMHBA_GetBindingSupport"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetDiscoveredPortAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 DiscoveredPortIndex, SMHBA_PORTATTRIBUTES *PortAttributes );",
            "name": "SMHBA_GetDiscoveredPortAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetFCPhyAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_FC_PHY *PhyType );",
            "name": "SMHBA_GetFCPhyAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetLUNStatistics( HBA_HANDLE Handle, const HBA_SCSIID *Lunit, SMHBA_PROTOCOLSTATISTICS *ProtocolStatistics );",
            "name": "SMHBA_GetLUNStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetNumberOfPorts( HBA_HANDLE Handle, HBA_UINT32 *NumberOfPorts );",
            "name": "SMHBA_GetNumberOfPorts"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetPersistentBinding( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BINDING *Binding );",
            "name": "SMHBA_GetPersistentBinding"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetPhyStatistics( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_PHYSTATISTICS *PhyStatistics );",
            "name": "SMHBA_GetPhyStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetPortAttributesByWWN( HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_WWN DomainPortWWN, SMHBA_PORTATTRIBUTES *PortAttributes );",
            "name": "SMHBA_GetPortAttributesByWWN"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetPortType( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_PORTTYPE *PortType );",
            "name": "SMHBA_GetPortType"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetProtocolStatistics( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 ProtocolType, SMHBA_PROTOCOLSTATISTICS *ProtocolStatistics );",
            "name": "SMHBA_GetProtocolStatistics"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetSASPhyAttributes( HBA_HANDLE Handle, HBA_UINT32 PortIndex, HBA_UINT32 PhyIndex, SMHBA_SAS_PHY *PhyType );",
            "name": "SMHBA_GetSASPhyAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_GetTargetMapping( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_TARGETMAPPING *Mapping );",
            "name": "SMHBA_GetTargetMapping"
        },
        {
            "signature": "HBA_UINT32 HBA_API SMHBA_GetVendorLibraryAttributes( HBA_UINT32 AdapterIndex, SMHBA_LIBRARYATTRIBUTES *Attributes );",
            "name": "SMHBA_GetVendorLibraryAttributes"
        },
        {
            "signature": "HBA_UINT32 HBA_API SMHBA_GetVersion();",
            "name": "SMHBA_GetVersion"
        },
        {
            "signature": "HBA_UINT32 HBA_API SMHBA_GetWrapperLibraryAttributes( SMHBA_LIBRARYATTRIBUTES *Attributes );",
            "name": "SMHBA_GetWrapperLibraryAttributes"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForAdapterAddEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "SMHBA_RegisterForAdapterAddEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForAdapterEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "SMHBA_RegisterForAdapterEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForAdapterPhyStatEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 PhyIndex,HBA_UINT32 EventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 PhyIndex, SMHBA_PHYSTATISTICS Stats, HBA_UINT32 StatType, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "SMHBA_RegisterForAdapterPhyStatEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForAdapterPortEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 eventType,HBA_UINT32 fabricPortID) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 SpecificEventType, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "SMHBA_RegisterForAdapterPortEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForAdapterPortStatEvents( void(* )(void *pData,HBA_WWN PortWWN,HBA_UINT32 ProtocolType,HBA_UINT32 EventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN PortWWN, HBA_UINT32 ProtocolType, SMHBA_PROTOCOLSTATISTICS Stats, HBA_UINT32 StatType, HBA_CALLBACKHANDLE *pCallbackHandle );",
            "name": "SMHBA_RegisterForAdapterPortStatEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterForTargetEvents( void(* )(void *pData,HBA_WWN HbaPortWWN,HBA_WWN DiscoveredPortWWN,HBA_WWN DomainPortWWN,HBA_UINT32 EventType) callback, void *pUserData, HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_CALLBACKHANDLE *pCallbackHandle, HBA_UINT32 AllTargets );",
            "name": "SMHBA_RegisterForTargetEvents"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RegisterLibrary( PSMHBA_ENTRYPOINTS entrypoints );",
            "name": "SMHBA_RegisterLibrary"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RemoveAllPersistentBindings( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN );",
            "name": "SMHBA_RemoveAllPersistentBindings"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_RemovePersistentBinding( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, const SMHBA_BINDING *Binding );",
            "name": "SMHBA_RemovePersistentBinding"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_ScsiInquiry( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_SCSILUN SmhbaLUN, HBA_UINT8 CDB_Byte1, HBA_UINT8 CDB_Byte2, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "SMHBA_ScsiInquiry"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_ScsiReadCapacity( HBA_HANDLE HbaHandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, HBA_SCSILUN SmhbaLUN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "SMHBA_ScsiReadCapacity"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_ScsiReportLuns( HBA_HANDLE Hbahandle, HBA_WWN HbaPortWWN, HBA_WWN DiscoveredPortWWN, HBA_WWN DomainPortWWN, void *pRespBuffer, HBA_UINT32 *pRespBufferSize, HBA_UINT8 *pScsiStatus, void *pSenseBuffer, HBA_UINT32 *pSenseBufferSize );",
            "name": "SMHBA_ScsiReportLuns"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_SendECHO( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, void *ReqBuffer, HBA_UINT32 ReqBufferSize, void *RspBuffer, HBA_UINT32 *RspBufferSize );",
            "name": "SMHBA_SendECHO"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_SendSMPPassThru( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestPortWWN, HBA_WWN DomainPortWWN, void *ReqBuffer, HBA_UINT32 ReqBufferSize, void *RspBuffer, HBA_UINT32 *RspBufferSize );",
            "name": "SMHBA_SendSMPPassThru"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_SendTEST( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DestWWN, HBA_UINT32 DestFCID, void *ReqBuffer, HBA_UINT32 ReqBufferSize );",
            "name": "SMHBA_SendTEST"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_SetBindingSupport( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BIND_CAPABILITY Flags );",
            "name": "SMHBA_SetBindingSupport"
        },
        {
            "signature": "HBA_STATUS HBA_API SMHBA_SetPersistentBinding( HBA_HANDLE Handle, HBA_WWN HbaPortWWN, HBA_WWN DomainPortWWN, SMHBA_BINDING *Binding );",
            "name": "SMHBA_SetPersistentBinding"
        }
    ],
    "Heapapi.h": [
        {
            "signature": "HANDLE GetProcessHeap();",
            "name": "GetProcessHeap"
        },
        {
            "signature": "DWORD GetProcessHeaps( [in] DWORD NumberOfHeaps, [out] PHANDLE ProcessHeaps );",
            "name": "GetProcessHeaps"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR LPVOID HeapAlloc( [in] HANDLE hHeap, [in] DWORD dwFlags, [in] SIZE_T dwBytes );",
            "name": "HeapAlloc"
        },
        {
            "signature": "SIZE_T HeapCompact( [in] HANDLE hHeap, [in] DWORD dwFlags );",
            "name": "HeapCompact"
        },
        {
            "signature": "HANDLE HeapCreate( [in] DWORD flOptions, [in] SIZE_T dwInitialSize, [in] SIZE_T dwMaximumSize );",
            "name": "HeapCreate"
        },
        {
            "signature": "BOOL HeapDestroy( [in] HANDLE hHeap );",
            "name": "HeapDestroy"
        },
        {
            "signature": "BOOL HeapFree( [in] HANDLE hHeap, [in] DWORD dwFlags, [in] _Frees_ptr_opt_ LPVOID lpMem );",
            "name": "HeapFree"
        },
        {
            "signature": "BOOL HeapLock( [in] HANDLE hHeap );",
            "name": "HeapLock"
        },
        {
            "signature": "BOOL HeapQueryInformation( [in, optional] HANDLE HeapHandle, [in] HEAP_INFORMATION_CLASS HeapInformationClass, [out] PVOID HeapInformation, [in] SIZE_T HeapInformationLength, [out, optional] PSIZE_T ReturnLength );",
            "name": "HeapQueryInformation"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR LPVOID HeapReAlloc( [in] HANDLE hHeap, [in] DWORD dwFlags, [in] _Frees_ptr_opt_ LPVOID lpMem, [in] SIZE_T dwBytes );",
            "name": "HeapReAlloc"
        },
        {
            "signature": "BOOL HeapSetInformation( [in, optional] HANDLE HeapHandle, [in] HEAP_INFORMATION_CLASS HeapInformationClass, [in] PVOID HeapInformation, [in] SIZE_T HeapInformationLength );",
            "name": "HeapSetInformation"
        },
        {
            "signature": "SIZE_T HeapSize( [in] HANDLE hHeap, [in] DWORD dwFlags, [in] LPCVOID lpMem );",
            "name": "HeapSize"
        },
        {
            "signature": "BOOL HeapSummary( HANDLE hHeap, DWORD dwFlags, LPHEAP_SUMMARY lpSummary );",
            "name": "HeapSummary"
        },
        {
            "signature": "BOOL HeapUnlock( [in] HANDLE hHeap );",
            "name": "HeapUnlock"
        },
        {
            "signature": "BOOL HeapValidate( [in] HANDLE hHeap, [in] DWORD dwFlags, [in, optional] LPCVOID lpMem );",
            "name": "HeapValidate"
        },
        {
            "signature": "BOOL HeapWalk( [in] HANDLE hHeap, [in, out] LPPROCESS_HEAP_ENTRY lpEntry );",
            "name": "HeapWalk"
        }
    ],
    "Highlevelmonitorconfigurationapi.h": [
        {
            "signature": "_BOOL DegaussMonitor( [in] HANDLE hMonitor );",
            "name": "DegaussMonitor"
        },
        {
            "signature": "_BOOL GetMonitorBrightness( [in] HANDLE hMonitor, [out] LPDWORD pdwMinimumBrightness, [out] LPDWORD pdwCurrentBrightness, [out] LPDWORD pdwMaximumBrightness );",
            "name": "GetMonitorBrightness"
        },
        {
            "signature": "_BOOL GetMonitorCapabilities( [in] HANDLE hMonitor, [out] LPDWORD pdwMonitorCapabilities, [out] LPDWORD pdwSupportedColorTemperatures );",
            "name": "GetMonitorCapabilities"
        },
        {
            "signature": "_BOOL GetMonitorColorTemperature( [in] HANDLE hMonitor, [out] LPMC_COLOR_TEMPERATURE pctCurrentColorTemperature );",
            "name": "GetMonitorColorTemperature"
        },
        {
            "signature": "_BOOL GetMonitorContrast( [in] HANDLE hMonitor, [out] LPDWORD pdwMinimumContrast, [out] LPDWORD pdwCurrentContrast, [out] LPDWORD pdwMaximumContrast );",
            "name": "GetMonitorContrast"
        },
        {
            "signature": "_BOOL GetMonitorDisplayAreaPosition( [in] HANDLE hMonitor, [in] MC_POSITION_TYPE ptPositionType, [out] LPDWORD pdwMinimumPosition, [out] LPDWORD pdwCurrentPosition, [out] LPDWORD pdwMaximumPosition );",
            "name": "GetMonitorDisplayAreaPosition"
        },
        {
            "signature": "_BOOL GetMonitorDisplayAreaSize( [in] HANDLE hMonitor, [in] MC_SIZE_TYPE stSizeType, [out] LPDWORD pdwMinimumWidthOrHeight, [out] LPDWORD pdwCurrentWidthOrHeight, [out] LPDWORD pdwMaximumWidthOrHeight );",
            "name": "GetMonitorDisplayAreaSize"
        },
        {
            "signature": "_BOOL GetMonitorRedGreenOrBlueDrive( [in] HANDLE hMonitor, [in] MC_DRIVE_TYPE dtDriveType, [out] LPDWORD pdwMinimumDrive, [out] LPDWORD pdwCurrentDrive, [out] LPDWORD pdwMaximumDrive );",
            "name": "GetMonitorRedGreenOrBlueDrive"
        },
        {
            "signature": "_BOOL GetMonitorRedGreenOrBlueGain( [in] HANDLE hMonitor, [in] MC_GAIN_TYPE gtGainType, [out] LPDWORD pdwMinimumGain, [out] LPDWORD pdwCurrentGain, [out] LPDWORD pdwMaximumGain );",
            "name": "GetMonitorRedGreenOrBlueGain"
        },
        {
            "signature": "_BOOL GetMonitorTechnologyType( [in] HANDLE hMonitor, [out] LPMC_DISPLAY_TECHNOLOGY_TYPE pdtyDisplayTechnologyType );",
            "name": "GetMonitorTechnologyType"
        },
        {
            "signature": "_BOOL RestoreMonitorFactoryColorDefaults( [in] HANDLE hMonitor );",
            "name": "RestoreMonitorFactoryColorDefaults"
        },
        {
            "signature": "_BOOL RestoreMonitorFactoryDefaults( [in] HANDLE hMonitor );",
            "name": "RestoreMonitorFactoryDefaults"
        },
        {
            "signature": "_BOOL SaveCurrentMonitorSettings( [in] HANDLE hMonitor );",
            "name": "SaveCurrentMonitorSettings"
        },
        {
            "signature": "_BOOL SetMonitorBrightness( [in] HANDLE hMonitor, [in] DWORD dwNewBrightness );",
            "name": "SetMonitorBrightness"
        },
        {
            "signature": "_BOOL SetMonitorColorTemperature( [in] HANDLE hMonitor, [in] MC_COLOR_TEMPERATURE ctCurrentColorTemperature );",
            "name": "SetMonitorColorTemperature"
        },
        {
            "signature": "_BOOL SetMonitorContrast( [in] HANDLE hMonitor, [in] DWORD dwNewContrast );",
            "name": "SetMonitorContrast"
        },
        {
            "signature": "_BOOL SetMonitorDisplayAreaPosition( [in] HANDLE hMonitor, [in] MC_POSITION_TYPE ptPositionType, [in] DWORD dwNewPosition );",
            "name": "SetMonitorDisplayAreaPosition"
        },
        {
            "signature": "_BOOL SetMonitorDisplayAreaSize( [in] HANDLE hMonitor, [in] MC_SIZE_TYPE stSizeType, [in] DWORD dwNewDisplayAreaWidthOrHeight );",
            "name": "SetMonitorDisplayAreaSize"
        },
        {
            "signature": "_BOOL SetMonitorRedGreenOrBlueDrive( [in] HANDLE hMonitor, [in] MC_DRIVE_TYPE dtDriveType, [in] DWORD dwNewDrive );",
            "name": "SetMonitorRedGreenOrBlueDrive"
        },
        {
            "signature": "_BOOL SetMonitorRedGreenOrBlueGain( [in] HANDLE hMonitor, [in] MC_GAIN_TYPE gtGainType, [in] DWORD dwNewGain );",
            "name": "SetMonitorRedGreenOrBlueGain"
        }
    ],
    "Holographicspaceinterop.h": [],
    "Hrtfapoapi.h": [
        {
            "signature": "HRESULT CreateHrtfApo( [in] const HrtfApoInit *init, [out] IXAPO **xApo );",
            "name": "CreateHrtfApo"
        }
    ],
    "Hstring.h": [],
    "Htmlhelp.h": [
        {
            "signature": "HWND HtmlHelpA( [in, optional] HWND hwndCaller, [in] LPCSTR pszFile, [in] UINT uCommand, [in] DWORD_PTR dwData );",
            "name": "HtmlHelpA"
        },
        {
            "signature": "HWND HtmlHelpW( [in, optional] HWND hwndCaller, [in] LPCWSTR pszFile, [in] UINT uCommand, [in] DWORD_PTR dwData );",
            "name": "HtmlHelpW"
        }
    ],
    "Http.h": [
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpAddFragmentToCache( [in] HANDLE RequestQueueHandle, [in] PCWSTR UrlPrefix, [in] PHTTP_DATA_CHUNK DataChunk, [in] PHTTP_CACHE_POLICY CachePolicy, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpAddFragmentToCache"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpAddUrl( [in] HANDLE RequestQueueHandle, [in] PCWSTR FullyQualifiedUrl, PVOID Reserved );",
            "name": "HttpAddUrl"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpAddUrlToUrlGroup( [in] HTTP_URL_GROUP_ID UrlGroupId, [in] PCWSTR pFullyQualifiedUrl, [in, optional] HTTP_URL_CONTEXT UrlContext, [in] ULONG Reserved );",
            "name": "HttpAddUrlToUrlGroup"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCancelHttpRequest( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpCancelHttpRequest"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCloseRequestQueue( [in] HANDLE RequestQueueHandle );",
            "name": "HttpCloseRequestQueue"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCloseServerSession( [in] HTTP_SERVER_SESSION_ID ServerSessionId );",
            "name": "HttpCloseServerSession"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCloseUrlGroup( [in] HTTP_URL_GROUP_ID UrlGroupId );",
            "name": "HttpCloseUrlGroup"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCreateHttpHandle( [out] PHANDLE RequestQueueHandle, [in] ULONG Reserved );",
            "name": "HttpCreateHttpHandle"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCreateRequestQueue( [in] HTTPAPI_VERSION Version, [in, optional] PCWSTR Name, [in, optional] PSECURITY_ATTRIBUTES SecurityAttributes, [in, optional] ULONG Flags, [out] PHANDLE RequestQueueHandle );",
            "name": "HttpCreateRequestQueue"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCreateServerSession( [in] HTTPAPI_VERSION Version, [out] PHTTP_SERVER_SESSION_ID ServerSessionId, [in] ULONG Reserved );",
            "name": "HttpCreateServerSession"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpCreateUrlGroup( [in] HTTP_SERVER_SESSION_ID ServerSessionId, [out] PHTTP_URL_GROUP_ID pUrlGroupId, [in] ULONG Reserved );",
            "name": "HttpCreateUrlGroup"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpDeclarePush( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in] HTTP_VERB Verb, [in] PCWSTR Path, [in, optional] PCSTR Query, [in, optional] PHTTP_REQUEST_HEADERS Headers );",
            "name": "HttpDeclarePush"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpDelegateRequestEx( HANDLE RequestQueueHandle, HANDLE DelegateQueueHandle, HTTP_REQUEST_ID RequestId, HTTP_URL_GROUP_ID DelegateUrlGroupId, ULONG PropertyInfoSetSize, PHTTP_DELEGATE_REQUEST_PROPERTY_INFO PropertyInfoSet );",
            "name": "HttpDelegateRequestEx"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpDeleteServiceConfiguration( [in] HANDLE ServiceHandle, [in] HTTP_SERVICE_CONFIG_ID ConfigId, [in] PVOID pConfigInformation, [in] ULONG ConfigInformationLength, [in] LPOVERLAPPED pOverlapped );",
            "name": "HttpDeleteServiceConfiguration"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpFindUrlGroupId( PCWSTR FullyQualifiedUrl, HANDLE RequestQueueHandle, PHTTP_URL_GROUP_ID UrlGroupId );",
            "name": "HttpFindUrlGroupId"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpFlushResponseCache( [in] HANDLE RequestQueueHandle, [in] PCWSTR UrlPrefix, [in] ULONG Flags, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpFlushResponseCache"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpInitialize( [in] HTTPAPI_VERSION Version, [in] ULONG Flags, [in, out] PVOID pReserved );",
            "name": "HttpInitialize"
        },
        {
            "signature": "BOOL HttpIsFeatureSupported( HTTP_FEATURE_ID FeatureId );",
            "name": "HttpIsFeatureSupported"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpPrepareUrl( PVOID Reserved, ULONG Flags, [in] PCWSTR Url, [out] PWSTR *PreparedUrl );",
            "name": "HttpPrepareUrl"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpQueryRequestQueueProperty( HANDLE RequestQueueHandle, [in] HTTP_SERVER_PROPERTY Property, [out] PVOID PropertyInformation, [in] ULONG PropertyInformationLength, [in] ULONG Reserved1, [out, optional] PULONG ReturnLength, [in] PVOID Reserved2 );",
            "name": "HttpQueryRequestQueueProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpQueryServerSessionProperty( [in] HTTP_SERVER_SESSION_ID ServerSessionId, [in] HTTP_SERVER_PROPERTY Property, [out] PVOID PropertyInformation, [in] ULONG PropertyInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "HttpQueryServerSessionProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpQueryServiceConfiguration( [in] HANDLE ServiceHandle, [in] HTTP_SERVICE_CONFIG_ID ConfigId, [in, optional] PVOID pInput, [in, optional] ULONG InputLength, [in, out, optional] PVOID pOutput, [in, optional] ULONG OutputLength, [out, optional] PULONG pReturnLength, [in] LPOVERLAPPED pOverlapped );",
            "name": "HttpQueryServiceConfiguration"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpQueryUrlGroupProperty( [in] HTTP_URL_GROUP_ID UrlGroupId, [in] HTTP_SERVER_PROPERTY Property, [out] PVOID PropertyInformation, [in] ULONG PropertyInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "HttpQueryUrlGroupProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpReadFragmentFromCache( [in] HANDLE RequestQueueHandle, [in] PCWSTR UrlPrefix, [in] PHTTP_BYTE_RANGE ByteRange, [out] PVOID Buffer, [in] ULONG BufferLength, [out] PULONG BytesRead, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpReadFragmentFromCache"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpReceiveClientCertificate( [in] HANDLE RequestQueueHandle, [in] HTTP_CONNECTION_ID ConnectionId, [in] ULONG Flags, [out] PHTTP_SSL_CLIENT_CERT_INFO SslClientCertInfo, [in] ULONG SslClientCertInfoSize, [out, optional] PULONG BytesReceived, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpReceiveClientCertificate"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpReceiveHttpRequest( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in] ULONG Flags, [out] PHTTP_REQUEST RequestBuffer, [in] ULONG RequestBufferLength, [out, optional] PULONG BytesReturned, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpReceiveHttpRequest"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpReceiveRequestEntityBody( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in] ULONG Flags, [out] PVOID EntityBuffer, [in] ULONG EntityBufferLength, [out, optional] PULONG BytesReturned, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpReceiveRequestEntityBody"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpRemoveUrl( [in] HANDLE RequestQueueHandle, [in] PCWSTR FullyQualifiedUrl );",
            "name": "HttpRemoveUrl"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpRemoveUrlFromUrlGroup( [in] HTTP_URL_GROUP_ID UrlGroupId, [in] PCWSTR pFullyQualifiedUrl, [in] ULONG Flags );",
            "name": "HttpRemoveUrlFromUrlGroup"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSendHttpResponse( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in] ULONG Flags, [in] PHTTP_RESPONSE HttpResponse, [in, optional] PHTTP_CACHE_POLICY CachePolicy, [out] PULONG BytesSent, [in] PVOID Reserved1, [in] ULONG Reserved2, [in] LPOVERLAPPED Overlapped, [in, optional] PHTTP_LOG_DATA LogData );",
            "name": "HttpSendHttpResponse"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSendResponseEntityBody( [in] HANDLE RequestQueueHandle, [in] HTTP_REQUEST_ID RequestId, [in] ULONG Flags, [in] USHORT EntityChunkCount, [in] PHTTP_DATA_CHUNK EntityChunks, [out] PULONG BytesSent, [in] PVOID Reserved1, [in] ULONG Reserved2, [in] LPOVERLAPPED Overlapped, [in, optional] PHTTP_LOG_DATA LogData );",
            "name": "HttpSendResponseEntityBody"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSetRequestProperty( [in] HANDLE RequestQueueHandle, [in] HTTP_OPAQUE_ID Id, [in] HTTP_REQUEST_PROPERTY PropertyId, [in] PVOID Input, [in] ULONG InputPropertySize, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpSetRequestProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSetRequestQueueProperty( [in] HANDLE RequestQueueHandle, [in] HTTP_SERVER_PROPERTY Property, [in] PVOID PropertyInformation, [in] ULONG PropertyInformationLength, [in] ULONG Reserved1, [in] PVOID Reserved2 );",
            "name": "HttpSetRequestQueueProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSetServerSessionProperty( [in] HTTP_SERVER_SESSION_ID ServerSessionId, [in] HTTP_SERVER_PROPERTY Property, [in] PVOID PropertyInformation, [in] ULONG PropertyInformationLength );",
            "name": "HttpSetServerSessionProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSetServiceConfiguration( [in] HANDLE ServiceHandle, [in] HTTP_SERVICE_CONFIG_ID ConfigId, [in] PVOID pConfigInformation, [in] ULONG ConfigInformationLength, [in] LPOVERLAPPED pOverlapped );",
            "name": "HttpSetServiceConfiguration"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpSetUrlGroupProperty( [in] HTTP_URL_GROUP_ID UrlGroupId, [in] HTTP_SERVER_PROPERTY Property, [in] PVOID PropertyInformation, [in] ULONG PropertyInformationLength );",
            "name": "HttpSetUrlGroupProperty"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpShutdownRequestQueue( [in] HANDLE RequestQueueHandle );",
            "name": "HttpShutdownRequestQueue"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpTerminate( [in] ULONG Flags, [in, out] PVOID pReserved );",
            "name": "HttpTerminate"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpUpdateServiceConfiguration( [in] HANDLE Handle, [in] HTTP_SERVICE_CONFIG_ID ConfigId, [in] PVOID ConfigInfo, [in] ULONG ConfigInfoLength, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpUpdateServiceConfiguration"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpWaitForDemandStart( [in] HANDLE RequestQueueHandle, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "HttpWaitForDemandStart"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpWaitForDisconnect( [in] HANDLE RequestQueueHandle, [in] HTTP_CONNECTION_ID ConnectionId, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpWaitForDisconnect"
        },
        {
            "signature": "HTTPAPI_LINKAGE ULONG HttpWaitForDisconnectEx( [in] HANDLE RequestQueueHandle, [in] HTTP_CONNECTION_ID ConnectionId, ULONG Reserved, [in] LPOVERLAPPED Overlapped );",
            "name": "HttpWaitForDisconnectEx"
        }
    ],
    "Iaccess.h": [],
    "Iads.h": [],
    "Icftypes.h": [],
    "Icm.h": [
        {
            "signature": "BOOL AssociateColorProfileWithDeviceA( PCSTR pMachineName, PCSTR pProfileName, PCSTR pDeviceName );",
            "name": "AssociateColorProfileWithDeviceA"
        },
        {
            "signature": "BOOL AssociateColorProfileWithDeviceW( PCWSTR pMachineName, PCWSTR pProfileName, PCWSTR pDeviceName );",
            "name": "AssociateColorProfileWithDeviceW"
        },
        {
            "signature": "BOOL CheckBitmapBits( HTRANSFORM hColorTransform, PVOID pSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwStride, PBYTE paResult, PBMCALLBACKFN pfnCallback, LPARAM lpCallbackData );",
            "name": "CheckBitmapBits"
        },
        {
            "signature": "BOOL CheckColors( HTRANSFORM hColorTransform, PCOLOR paInputColors, DWORD nColors, COLORTYPE ctInput, PBYTE paResult );",
            "name": "CheckColors"
        },
        {
            "signature": "BOOL CloseColorProfile( HPROFILE hProfile );",
            "name": "CloseColorProfile"
        },
        {
            "signature": "BOOL CMCheckColors( HCMTRANSFORM hcmTransform, LPCOLOR lpaInputColors, DWORD nColors, COLORTYPE ctInput, LPBYTE lpaResult );",
            "name": "CMCheckColors"
        },
        {
            "signature": "BOOL CMCheckColorsInGamut( HCMTRANSFORM hcmTransform, RGBTRIPLE *lpaRGBTriple, LPBYTE lpaResult, UINT nCount );",
            "name": "CMCheckColorsInGamut"
        },
        {
            "signature": "BOOL CMCheckRGBs( HCMTRANSFORM hcmTransform, LPVOID lpSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwStride, LPBYTE lpaResult, PBMCALLBACKFN pfnCallback, LPARAM ulCallbackData );",
            "name": "CMCheckRGBs"
        },
        {
            "signature": "BOOL CMConvertColorNameToIndex( HPROFILE hProfile, PCOLOR_NAME paColorName, PDWORD paIndex, DWORD dwCount );",
            "name": "CMConvertColorNameToIndex"
        },
        {
            "signature": "BOOL CMConvertIndexToColorName( HPROFILE hProfile, PDWORD paIndex, PCOLOR_NAME paColorName, DWORD dwCount );",
            "name": "CMConvertIndexToColorName"
        },
        {
            "signature": "BOOL CMCreateDeviceLinkProfile( PHPROFILE pahProfiles, DWORD nProfiles, PDWORD padwIntents, DWORD nIntents, DWORD dwFlags, LPBYTE *lpProfileData );",
            "name": "CMCreateDeviceLinkProfile"
        },
        {
            "signature": "HCMTRANSFORM CMCreateMultiProfileTransform( PHPROFILE pahProfiles, DWORD nProfiles, PDWORD padwIntents, DWORD nIntents, DWORD dwFlags );",
            "name": "CMCreateMultiProfileTransform"
        },
        {
            "signature": "BOOL CMCreateProfile( LPLOGCOLORSPACEA lpColorSpace, LPDEVCHARACTER *lpProfileData );",
            "name": "CMCreateProfile"
        },
        {
            "signature": "BOOL CMCreateProfileW( LPLOGCOLORSPACEW lpColorSpace, LPDEVCHARACTER *lpProfileData );",
            "name": "CMCreateProfileW"
        },
        {
            "signature": "HCMTRANSFORM CMCreateTransform( LPLOGCOLORSPACEA lpColorSpace, LPDEVCHARACTER lpDevCharacter, LPDEVCHARACTER lpTargetDevCharacter );",
            "name": "CMCreateTransform"
        },
        {
            "signature": "HCMTRANSFORM CMCreateTransformExt( LPLOGCOLORSPACEA lpColorSpace, LPDEVCHARACTER lpDevCharacter, LPDEVCHARACTER lpTargetDevCharacter, DWORD dwFlags );",
            "name": "CMCreateTransformExt"
        },
        {
            "signature": "HCMTRANSFORM CMCreateTransformExtW( LPLOGCOLORSPACEW lpColorSpace, LPDEVCHARACTER lpDevCharacter, LPDEVCHARACTER lpTargetDevCharacter, DWORD dwFlags );",
            "name": "CMCreateTransformExtW"
        },
        {
            "signature": "HCMTRANSFORM CMCreateTransformW( LPLOGCOLORSPACEW lpColorSpace, LPDEVCHARACTER lpDevCharacter, LPDEVCHARACTER lpTargetDevCharacter );",
            "name": "CMCreateTransformW"
        },
        {
            "signature": "BOOL CMDeleteTransform( HCMTRANSFORM hcmTransform );",
            "name": "CMDeleteTransform"
        },
        {
            "signature": "DWORD CMGetInfo( DWORD dwInfo );",
            "name": "CMGetInfo"
        },
        {
            "signature": "BOOL CMGetNamedProfileInfo( HPROFILE hProfile, PNAMED_PROFILE_INFO pNamedProfileInfo );",
            "name": "CMGetNamedProfileInfo"
        },
        {
            "signature": "BOOL CMGetPS2ColorRenderingDictionary( HPROFILE hProfile, DWORD dwIntent, LPBYTE lpBuffer, LPDWORD lpcbSize, LPBOOL lpbBinary );",
            "name": "CMGetPS2ColorRenderingDictionary"
        },
        {
            "signature": "BOOL CMGetPS2ColorRenderingIntent( HPROFILE hProfile, DWORD dwIntent, LPBYTE lpBuffer, LPDWORD lpcbSize );",
            "name": "CMGetPS2ColorRenderingIntent"
        },
        {
            "signature": "BOOL CMGetPS2ColorSpaceArray( HPROFILE hProfile, DWORD dwIntent, DWORD dwCSAType, LPBYTE lpBuffer, LPDWORD lpcbSize, LPBOOL lpbBinary );",
            "name": "CMGetPS2ColorSpaceArray"
        },
        {
            "signature": "BOOL CMIsProfileValid( HPROFILE hProfile, LPBOOL lpbValid );",
            "name": "CMIsProfileValid"
        },
        {
            "signature": "BOOL CMTranslateColors( HCMTRANSFORM hcmTransform, LPCOLOR lpaInputColors, DWORD nColors, COLORTYPE ctInput, LPCOLOR lpaOutputColors, COLORTYPE ctOutput );",
            "name": "CMTranslateColors"
        },
        {
            "signature": "BOOL CMTranslateRGB( HCMTRANSFORM hcmTransform, COLORREF ColorRef, LPCOLORREF lpColorRef, DWORD dwFlags );",
            "name": "CMTranslateRGB"
        },
        {
            "signature": "BOOL CMTranslateRGBs( HCMTRANSFORM hcmTransform, LPVOID lpSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwStride, LPVOID lpDestBits, BMFORMAT bmOutput, DWORD dwTranslateDirection );",
            "name": "CMTranslateRGBs"
        },
        {
            "signature": "BOOL CMTranslateRGBsExt( HCMTRANSFORM hcmTransform, LPVOID lpSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwInputStride, LPVOID lpDestBits, BMFORMAT bmOutput, DWORD dwOutputStride, LPBMCALLBACKFN lpfnCallback, LPARAM ulCallbackData );",
            "name": "CMTranslateRGBsExt"
        },
        {
            "signature": "HRESULT ColorProfileAddDisplayAssociation( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR profileName, LUID targetAdapterID, UINT32 sourceID, BOOL setAsDefault, BOOL associateAsAdvancedColor );",
            "name": "ColorProfileAddDisplayAssociation"
        },
        {
            "signature": "HRESULT ColorProfileGetDisplayDefault( WCS_PROFILE_MANAGEMENT_SCOPE scope, LUID targetAdapterID, UINT32 sourceID, COLORPROFILETYPE profileType, COLORPROFILESUBTYPE profileSubType, LPWSTR *profileName );",
            "name": "ColorProfileGetDisplayDefault"
        },
        {
            "signature": "HRESULT ColorProfileGetDisplayList( WCS_PROFILE_MANAGEMENT_SCOPE scope, LUID targetAdapterID, UINT32 sourceID, LPWSTR **profileList, PDWORD profileCount );",
            "name": "ColorProfileGetDisplayList"
        },
        {
            "signature": "HRESULT ColorProfileGetDisplayUserScope( LUID targetAdapterID, UINT32 sourceID, WCS_PROFILE_MANAGEMENT_SCOPE *scope );",
            "name": "ColorProfileGetDisplayUserScope"
        },
        {
            "signature": "HRESULT ColorProfileRemoveDisplayAssociation( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR profileName, LUID targetAdapterID, UINT32 sourceID, BOOL dissociateAdvancedColor );",
            "name": "ColorProfileRemoveDisplayAssociation"
        },
        {
            "signature": "HRESULT ColorProfileSetDisplayDefaultAssociation( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR profileName, COLORPROFILETYPE profileType, COLORPROFILESUBTYPE profileSubType, LUID targetAdapterID, UINT32 sourceID );",
            "name": "ColorProfileSetDisplayDefaultAssociation"
        },
        {
            "signature": "BOOL ConvertColorNameToIndex( HPROFILE hProfile, PCOLOR_NAME paColorName, PDWORD paIndex, DWORD dwCount );",
            "name": "ConvertColorNameToIndex"
        },
        {
            "signature": "BOOL ConvertIndexToColorName( HPROFILE hProfile, PDWORD paIndex, PCOLOR_NAME paColorName, DWORD dwCount );",
            "name": "ConvertIndexToColorName"
        },
        {
            "signature": "HTRANSFORM CreateColorTransformA( LPLOGCOLORSPACEA pLogColorSpace, HPROFILE hDestProfile, HPROFILE hTargetProfile, DWORD dwFlags );",
            "name": "CreateColorTransformA"
        },
        {
            "signature": "HTRANSFORM CreateColorTransformW( LPLOGCOLORSPACEW pLogColorSpace, HPROFILE hDestProfile, HPROFILE hTargetProfile, DWORD dwFlags );",
            "name": "CreateColorTransformW"
        },
        {
            "signature": "BOOL CreateDeviceLinkProfile( PHPROFILE hProfile, DWORD nProfiles, PDWORD padwIntent, DWORD nIntents, DWORD dwFlags, PBYTE *pProfileData, DWORD indexPreferredCMM );",
            "name": "CreateDeviceLinkProfile"
        },
        {
            "signature": "HTRANSFORM CreateMultiProfileTransform( PHPROFILE pahProfiles, DWORD nProfiles, PDWORD padwIntent, DWORD nIntents, DWORD dwFlags, DWORD indexPreferredCMM );",
            "name": "CreateMultiProfileTransform"
        },
        {
            "signature": "BOOL CreateProfileFromLogColorSpaceA( LPLOGCOLORSPACEA pLogColorSpace, PBYTE *pProfile );",
            "name": "CreateProfileFromLogColorSpaceA"
        },
        {
            "signature": "BOOL CreateProfileFromLogColorSpaceW( LPLOGCOLORSPACEW pLogColorSpace, PBYTE *pProfile );",
            "name": "CreateProfileFromLogColorSpaceW"
        },
        {
            "signature": "BOOL DeleteColorTransform( HTRANSFORM hxform );",
            "name": "DeleteColorTransform"
        },
        {
            "signature": "BOOL DisassociateColorProfileFromDeviceA( PCSTR pMachineName, PCSTR pProfileName, PCSTR pDeviceName );",
            "name": "DisassociateColorProfileFromDeviceA"
        },
        {
            "signature": "BOOL DisassociateColorProfileFromDeviceW( PCWSTR pMachineName, PCWSTR pProfileName, PCWSTR pDeviceName );",
            "name": "DisassociateColorProfileFromDeviceW"
        },
        {
            "signature": "BOOL EnumColorProfilesA( PCSTR pMachineName, PENUMTYPEA pEnumRecord, PBYTE pEnumerationBuffer, PDWORD pdwSizeOfEnumerationBuffer, PDWORD pnProfiles );",
            "name": "EnumColorProfilesA"
        },
        {
            "signature": "BOOL EnumColorProfilesW( PCWSTR pMachineName, PENUMTYPEW pEnumRecord, PBYTE pEnumerationBuffer, PDWORD pdwSizeOfEnumerationBuffer, PDWORD pnProfiles );",
            "name": "EnumColorProfilesW"
        },
        {
            "signature": "DWORD GetCMMInfo( HTRANSFORM hColorTransform, DWORD unnamedParam2 );",
            "name": "GetCMMInfo"
        },
        {
            "signature": "BOOL GetColorDirectoryA( PCSTR pMachineName, PSTR pBuffer, PDWORD pdwSize );",
            "name": "GetColorDirectoryA"
        },
        {
            "signature": "BOOL GetColorDirectoryW( PCWSTR pMachineName, PWSTR pBuffer, PDWORD pdwSize );",
            "name": "GetColorDirectoryW"
        },
        {
            "signature": "BOOL GetColorProfileElement( HPROFILE hProfile, TAGTYPE tag, DWORD dwOffset, PDWORD pcbElement, PVOID pElement, PBOOL pbReference );",
            "name": "GetColorProfileElement"
        },
        {
            "signature": "BOOL GetColorProfileElementTag( HPROFILE hProfile, DWORD dwIndex, PTAGTYPE pTag );",
            "name": "GetColorProfileElementTag"
        },
        {
            "signature": "BOOL GetColorProfileFromHandle( HPROFILE hProfile, PBYTE pProfile, PDWORD pcbProfile );",
            "name": "GetColorProfileFromHandle"
        },
        {
            "signature": "BOOL GetColorProfileHeader( HPROFILE hProfile, PPROFILEHEADER pHeader );",
            "name": "GetColorProfileHeader"
        },
        {
            "signature": "BOOL GetCountColorProfileElements( HPROFILE hProfile, PDWORD pnElementCount );",
            "name": "GetCountColorProfileElements"
        },
        {
            "signature": "BOOL GetNamedProfileInfo( HPROFILE hProfile, PNAMED_PROFILE_INFO pNamedProfileInfo );",
            "name": "GetNamedProfileInfo"
        },
        {
            "signature": "BOOL GetPS2ColorRenderingDictionary( HPROFILE hProfile, DWORD dwIntent, PBYTE pPS2ColorRenderingDictionary, PDWORD pcbPS2ColorRenderingDictionary, PBOOL pbBinary );",
            "name": "GetPS2ColorRenderingDictionary"
        },
        {
            "signature": "BOOL GetPS2ColorRenderingIntent( HPROFILE hProfile, DWORD dwIntent, PBYTE pBuffer, PDWORD pcbPS2ColorRenderingIntent );",
            "name": "GetPS2ColorRenderingIntent"
        },
        {
            "signature": "BOOL GetPS2ColorSpaceArray( HPROFILE hProfile, DWORD dwIntent, DWORD dwCSAType, PBYTE pPS2ColorSpaceArray, PDWORD pcbPS2ColorSpaceArray, PBOOL pbBinary );",
            "name": "GetPS2ColorSpaceArray"
        },
        {
            "signature": "BOOL GetStandardColorSpaceProfileA( PCSTR pMachineName, DWORD dwSCS, PSTR pBuffer, PDWORD pcbSize );",
            "name": "GetStandardColorSpaceProfileA"
        },
        {
            "signature": "BOOL GetStandardColorSpaceProfileW( PCWSTR pMachineName, DWORD dwSCS, PWSTR pBuffer, PDWORD pcbSize );",
            "name": "GetStandardColorSpaceProfileW"
        },
        {
            "signature": "BOOL InstallColorProfileA( PCSTR pMachineName, PCSTR pProfileName );",
            "name": "InstallColorProfileA"
        },
        {
            "signature": "BOOL InstallColorProfileW( PCWSTR pMachineName, PCWSTR pProfileName );",
            "name": "InstallColorProfileW"
        },
        {
            "signature": "BOOL IsColorProfileTagPresent( HPROFILE hProfile, TAGTYPE tag, PBOOL pbPresent );",
            "name": "IsColorProfileTagPresent"
        },
        {
            "signature": "BOOL IsColorProfileValid( HPROFILE hProfile, PBOOL pbValid );",
            "name": "IsColorProfileValid"
        },
        {
            "signature": "HPROFILE OpenColorProfileA( PPROFILE pProfile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationMode );",
            "name": "OpenColorProfileA"
        },
        {
            "signature": "HPROFILE OpenColorProfileW( PPROFILE pProfile, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwCreationMode );",
            "name": "OpenColorProfileW"
        },
        {
            "signature": "PBMCALLBACKFN Pbmcallbackfn; BOOL Pbmcallbackfn( ULONG unnamedParam1, ULONG unnamedParam2, LPARAM unnamedParam3 ) {...}",
            "name": "PBMCALLBACKFN callback"
        },
        {
            "signature": "PCMSCALLBACKA Pcmscallbacka; BOOL Pcmscallbacka( _tagCOLORMATCHSETUPA *unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "PCMSCALLBACKA callback"
        },
        {
            "signature": "PCMSCALLBACKW Pcmscallbackw; BOOL Pcmscallbackw( _tagCOLORMATCHSETUPW *unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "PCMSCALLBACKW callback"
        },
        {
            "signature": "BOOL RegisterCMMA( PCSTR pMachineName, DWORD cmmID, PCSTR pCMMdll );",
            "name": "RegisterCMMA"
        },
        {
            "signature": "BOOL RegisterCMMW( PCWSTR pMachineName, DWORD cmmID, PCWSTR pCMMdll );",
            "name": "RegisterCMMW"
        },
        {
            "signature": "BOOL SelectCMM( DWORD dwCMMType );",
            "name": "SelectCMM"
        },
        {
            "signature": "BOOL SetColorProfileElement( HPROFILE hProfile, TAGTYPE tag, DWORD dwOffset, PDWORD pcbElement, PVOID pElement );",
            "name": "SetColorProfileElement"
        },
        {
            "signature": "BOOL SetColorProfileElementReference( HPROFILE hProfile, TAGTYPE newTag, TAGTYPE refTag );",
            "name": "SetColorProfileElementReference"
        },
        {
            "signature": "BOOL SetColorProfileElementSize( HPROFILE hProfile, TAGTYPE tagType, DWORD pcbElement );",
            "name": "SetColorProfileElementSize"
        },
        {
            "signature": "BOOL SetColorProfileHeader( HPROFILE hProfile, PPROFILEHEADER pHeader );",
            "name": "SetColorProfileHeader"
        },
        {
            "signature": "BOOL SetStandardColorSpaceProfileA( PCSTR pMachineName, DWORD dwProfileID, PCSTR pProfilename );",
            "name": "SetStandardColorSpaceProfileA"
        },
        {
            "signature": "BOOL SetStandardColorSpaceProfileW( PCWSTR pMachineName, DWORD dwProfileID, PCWSTR pProfileName );",
            "name": "SetStandardColorSpaceProfileW"
        },
        {
            "signature": "BOOL SetupColorMatchingA( PCOLORMATCHSETUPA pcms );",
            "name": "SetupColorMatchingA"
        },
        {
            "signature": "BOOL SetupColorMatchingW( PCOLORMATCHSETUPW pcms );",
            "name": "SetupColorMatchingW"
        },
        {
            "signature": "BOOL TranslateBitmapBits( HTRANSFORM hColorTransform, PVOID pSrcBits, BMFORMAT bmInput, DWORD dwWidth, DWORD dwHeight, DWORD dwInputStride, PVOID pDestBits, BMFORMAT bmOutput, DWORD dwOutputStride, PBMCALLBACKFN pfnCallBack, LPARAM ulCallbackData );",
            "name": "TranslateBitmapBits"
        },
        {
            "signature": "BOOL TranslateColors( HTRANSFORM hColorTransform, PCOLOR paInputColors, DWORD nColors, COLORTYPE ctInput, PCOLOR paOutputColors, COLORTYPE ctOutput );",
            "name": "TranslateColors"
        },
        {
            "signature": "BOOL UninstallColorProfileA( PCSTR pMachineName, PCSTR pProfileName, BOOL bDelete );",
            "name": "UninstallColorProfileA"
        },
        {
            "signature": "BOOL UninstallColorProfileW( PCWSTR pMachineName, PCWSTR pProfileName, BOOL bDelete );",
            "name": "UninstallColorProfileW"
        },
        {
            "signature": "BOOL UnregisterCMMA( PCSTR pMachineName, DWORD cmmID );",
            "name": "UnregisterCMMA"
        },
        {
            "signature": "BOOL UnregisterCMMW( PCWSTR pMachineName, DWORD cmmID );",
            "name": "UnregisterCMMW"
        },
        {
            "signature": "BOOL WcsAssociateColorProfileWithDevice( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR pProfileName, PCWSTR pDeviceName );",
            "name": "WcsAssociateColorProfileWithDevice"
        },
        {
            "signature": "BOOL WcsCheckColors( HTRANSFORM hColorTransform, DWORD nColors, DWORD nInputChannels, COLORDATATYPE cdtInput, DWORD cbInput, PVOID pInputData, PBYTE paResult );",
            "name": "WcsCheckColors"
        },
        {
            "signature": "HPROFILE WcsCreateIccProfile( HPROFILE hWcsProfile, DWORD dwOptions );",
            "name": "WcsCreateIccProfile"
        },
        {
            "signature": "BOOL WcsDisassociateColorProfileFromDevice( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR pProfileName, PCWSTR pDeviceName );",
            "name": "WcsDisassociateColorProfileFromDevice"
        },
        {
            "signature": "BOOL WcsEnumColorProfiles( WCS_PROFILE_MANAGEMENT_SCOPE scope, PENUMTYPEW pEnumRecord, PBYTE pBuffer, DWORD dwSize, PDWORD pnProfiles );",
            "name": "WcsEnumColorProfiles"
        },
        {
            "signature": "BOOL WcsEnumColorProfilesSize( WCS_PROFILE_MANAGEMENT_SCOPE scope, PENUMTYPEW pEnumRecord, PDWORD pdwSize );",
            "name": "WcsEnumColorProfilesSize"
        },
        {
            "signature": "BOOL WcsGetCalibrationManagementState( BOOL *pbIsEnabled );",
            "name": "WcsGetCalibrationManagementState"
        },
        {
            "signature": "BOOL WcsGetDefaultColorProfile( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR pDeviceName, COLORPROFILETYPE cptColorProfileType, COLORPROFILESUBTYPE cpstColorProfileSubType, DWORD dwProfileID, DWORD cbProfileName, LPWSTR pProfileName );",
            "name": "WcsGetDefaultColorProfile"
        },
        {
            "signature": "BOOL WcsGetDefaultColorProfileSize( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR pDeviceName, COLORPROFILETYPE cptColorProfileType, COLORPROFILESUBTYPE cpstColorProfileSubType, DWORD dwProfileID, PDWORD pcbProfileName );",
            "name": "WcsGetDefaultColorProfileSize"
        },
        {
            "signature": "BOOL WcsGetDefaultRenderingIntent( WCS_PROFILE_MANAGEMENT_SCOPE scope, PDWORD pdwRenderingIntent );",
            "name": "WcsGetDefaultRenderingIntent"
        },
        {
            "signature": "BOOL WcsGetUsePerUserProfiles( LPCWSTR pDeviceName, DWORD dwDeviceClass, PBOOL pUsePerUserProfiles );",
            "name": "WcsGetUsePerUserProfiles"
        },
        {
            "signature": "HPROFILE WcsOpenColorProfileA( PPROFILE pCDMPProfile, PPROFILE pCAMPProfile, PPROFILE pGMMPProfile, DWORD dwDesireAccess, DWORD dwShareMode, DWORD dwCreationMode, DWORD dwFlags );",
            "name": "WcsOpenColorProfileA"
        },
        {
            "signature": "HPROFILE WcsOpenColorProfileW( PPROFILE pCDMPProfile, PPROFILE pCAMPProfile, PPROFILE pGMMPProfile, DWORD dwDesireAccess, DWORD dwShareMode, DWORD dwCreationMode, DWORD dwFlags );",
            "name": "WcsOpenColorProfileW"
        },
        {
            "signature": "BOOL WcsSetCalibrationManagementState( BOOL bIsEnabled );",
            "name": "WcsSetCalibrationManagementState"
        },
        {
            "signature": "BOOL WcsSetDefaultColorProfile( WCS_PROFILE_MANAGEMENT_SCOPE scope, PCWSTR pDeviceName, COLORPROFILETYPE cptColorProfileType, COLORPROFILESUBTYPE cpstColorProfileSubType, DWORD dwProfileID, LPCWSTR pProfileName );",
            "name": "WcsSetDefaultColorProfile"
        },
        {
            "signature": "BOOL WcsSetDefaultRenderingIntent( WCS_PROFILE_MANAGEMENT_SCOPE scope, DWORD dwRenderingIntent );",
            "name": "WcsSetDefaultRenderingIntent"
        },
        {
            "signature": "BOOL WcsSetUsePerUserProfiles( LPCWSTR pDeviceName, DWORD dwDeviceClass, BOOL usePerUserProfiles );",
            "name": "WcsSetUsePerUserProfiles"
        },
        {
            "signature": "BOOL WcsTranslateColors( HTRANSFORM hColorTransform, DWORD nColors, DWORD nInputChannels, COLORDATATYPE cdtInput, DWORD cbInput, PVOID pInputData, DWORD nOutputChannels, COLORDATATYPE cdtOutput, DWORD cbOutput, PVOID pOutputData );",
            "name": "WcsTranslateColors"
        }
    ],
    "Icmpapi.h": [
        {
            "signature": "IPHLPAPI_DLL_LINKAGE HANDLE Icmp6CreateFile();",
            "name": "Icmp6CreateFile"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD Icmp6ParseReplies( [in] LPVOID ReplyBuffer, [in] DWORD ReplySize );",
            "name": "Icmp6ParseReplies"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD Icmp6SendEcho2( [in] HANDLE IcmpHandle, [in, optional] HANDLE Event, [in, optional] PIO_APC_ROUTINE ApcRoutine, [in, optional] PVOID ApcContext, [in] sockaddr_in6 *SourceAddress, [in] sockaddr_in6 *DestinationAddress, [in] LPVOID RequestData, [in] WORD RequestSize, [in, optional] PIP_OPTION_INFORMATION RequestOptions, [out] LPVOID ReplyBuffer, [in] DWORD ReplySize, [in] DWORD Timeout );",
            "name": "Icmp6SendEcho2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE BOOL IcmpCloseHandle( [in] HANDLE IcmpHandle );",
            "name": "IcmpCloseHandle"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE HANDLE IcmpCreateFile();",
            "name": "IcmpCreateFile"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IcmpParseReplies( [in] LPVOID ReplyBuffer, [in] DWORD ReplySize );",
            "name": "IcmpParseReplies"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IcmpSendEcho( [in] HANDLE IcmpHandle, [in] IPAddr DestinationAddress, [in] LPVOID RequestData, [in] WORD RequestSize, [in, optional] PIP_OPTION_INFORMATION RequestOptions, [out] LPVOID ReplyBuffer, [in] DWORD ReplySize, [in] DWORD Timeout );",
            "name": "IcmpSendEcho"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IcmpSendEcho2( [in] HANDLE IcmpHandle, [in, optional] HANDLE Event, [in, optional] PIO_APC_ROUTINE ApcRoutine, [in, optional] PVOID ApcContext, [in] IPAddr DestinationAddress, [in] LPVOID RequestData, [in] WORD RequestSize, [in, optional] PIP_OPTION_INFORMATION RequestOptions, [out] LPVOID ReplyBuffer, [in] DWORD ReplySize, [in] DWORD Timeout );",
            "name": "IcmpSendEcho2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IcmpSendEcho2Ex( [in] HANDLE IcmpHandle, [in, optional] HANDLE Event, [in, optional] PIO_APC_ROUTINE ApcRoutine, [in, optional] PVOID ApcContext, [in] IPAddr SourceAddress, [in] IPAddr DestinationAddress, [in] LPVOID RequestData, [in] WORD RequestSize, [in, optional] PIP_OPTION_INFORMATION RequestOptions, [out] LPVOID ReplyBuffer, [in] DWORD ReplySize, [in] DWORD Timeout );",
            "name": "IcmpSendEcho2Ex"
        }
    ],
    "Icodecapi.h": [],
    "Icontact.h": [],
    "Icontentprefetchertasktrigger.h": [],
    "Icwcfg.h": [
        {
            "signature": "DWORD CheckConnectionWizard( DWORD unnamedParam1, LPDWORD unnamedParam2 );",
            "name": "CheckConnectionWizard"
        },
        {
            "signature": "DWORD SetShellNext( [in] PSTR szShellNext );",
            "name": "SetShellNext"
        }
    ],
    "Identitycommon.h": [],
    "Identityprovider.h": [],
    "Identitystore.h": [],
    "Ifdef.h": [],
    "Ifmib.h": [],
    "Iketypes.h": [],
    "Imagehlp.h": [
        {
            "signature": "BOOL IMAGEAPI BindImage( [in] PCSTR ImageName, [in] PCSTR DllPath, [in] PCSTR SymbolPath );",
            "name": "BindImage"
        },
        {
            "signature": "BOOL IMAGEAPI BindImageEx( [in] DWORD Flags, [in] PCSTR ImageName, [in] PCSTR DllPath, [in] PCSTR SymbolPath, [in] PIMAGEHLP_STATUS_ROUTINE StatusRoutine );",
            "name": "BindImageEx"
        },
        {
            "signature": "PIMAGE_NT_HEADERS IMAGEAPI CheckSumMappedFile( [in] PVOID BaseAddress, [in] DWORD FileLength, [out] PDWORD HeaderSum, [out] PDWORD CheckSum );",
            "name": "CheckSumMappedFile"
        },
        {
            "signature": "DIGEST_FUNCTION DigestFunction; BOOL DigestFunction( [in] DIGEST_HANDLE refdata, [in] PBYTE pData, [in] DWORD dwLength ) {...}",
            "name": "DIGEST_FUNCTION callback"
        },
        {
            "signature": "BOOL IMAGEAPI GetImageConfigInformation( [in] PLOADED_IMAGE LoadedImage, [out] PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation );",
            "name": "GetImageConfigInformation"
        },
        {
            "signature": "DWORD IMAGEAPI GetImageUnusedHeaderBytes( [in] PLOADED_IMAGE LoadedImage, [out] PDWORD SizeUnusedHeaderBytes );",
            "name": "GetImageUnusedHeaderBytes"
        },
        {
            "signature": "BOOL IMAGEAPI ImageAddCertificate( [in] HANDLE FileHandle, [in] LPWIN_CERTIFICATE Certificate, [out] PDWORD Index );",
            "name": "ImageAddCertificate"
        },
        {
            "signature": "BOOL IMAGEAPI ImageEnumerateCertificates( [in] HANDLE FileHandle, [in] WORD TypeFilter, [out] PDWORD CertificateCount, [in, out] PDWORD Indices, [in, optional] DWORD IndexCount );",
            "name": "ImageEnumerateCertificates"
        },
        {
            "signature": "BOOL IMAGEAPI ImageGetCertificateData( [in] HANDLE FileHandle, [in] DWORD CertificateIndex, [out] LPWIN_CERTIFICATE Certificate, [in, out] PDWORD RequiredLength );",
            "name": "ImageGetCertificateData"
        },
        {
            "signature": "BOOL IMAGEAPI ImageGetCertificateHeader( [in] HANDLE FileHandle, [in] DWORD CertificateIndex, [in, out] LPWIN_CERTIFICATE Certificateheader );",
            "name": "ImageGetCertificateHeader"
        },
        {
            "signature": "BOOL IMAGEAPI ImageGetDigestStream( [in] HANDLE FileHandle, [in] DWORD DigestLevel, [in] DIGEST_FUNCTION DigestFunction, [in] DIGEST_HANDLE DigestHandle );",
            "name": "ImageGetDigestStream"
        },
        {
            "signature": "PLOADED_IMAGE IMAGEAPI ImageLoad( [in] PCSTR DllName, [in] PCSTR DllPath );",
            "name": "ImageLoad"
        },
        {
            "signature": "BOOL IMAGEAPI ImageRemoveCertificate( [in] HANDLE FileHandle, [in] DWORD Index );",
            "name": "ImageRemoveCertificate"
        },
        {
            "signature": "BOOL IMAGEAPI ImageUnload( [in] PLOADED_IMAGE LoadedImage );",
            "name": "ImageUnload"
        },
        {
            "signature": "BOOL IMAGEAPI MapAndLoad( [in] PCSTR ImageName, [in] PCSTR DllPath, [out] PLOADED_IMAGE LoadedImage, [in] BOOL DotDll, [in] BOOL ReadOnly );",
            "name": "MapAndLoad"
        },
        {
            "signature": "DWORD IMAGEAPI MapFileAndCheckSumA( [in] PCSTR Filename, [out] PDWORD HeaderSum, [out] PDWORD CheckSum );",
            "name": "MapFileAndCheckSumA"
        },
        {
            "signature": "DWORD IMAGEAPI MapFileAndCheckSumW( [in] PCWSTR Filename, [out] PDWORD HeaderSum, [out] PDWORD CheckSum );",
            "name": "MapFileAndCheckSumW"
        },
        {
            "signature": "PIMAGEHLP_STATUS_ROUTINE PimagehlpStatusRoutine; BOOL PimagehlpStatusRoutine( [in] IMAGEHLP_STATUS_REASON Reason, [in] PCSTR ImageName, [in] PCSTR DllName, [in] ULONG_PTR Va, [in] ULONG_PTR Parameter ) {...}",
            "name": "PIMAGEHLP_STATUS_ROUTINE callback"
        },
        {
            "signature": "BOOL IMAGEAPI ReBaseImage( [in] PCSTR CurrentImageName, [in] PCSTR SymbolPath, [in] BOOL fReBase, [in] BOOL fRebaseSysfileOk, [in] BOOL fGoingDown, [in] ULONG CheckImageSize, [out] ULONG *OldImageSize, [out] ULONG_PTR *OldImageBase, [out] ULONG *NewImageSize, [in, out] ULONG_PTR *NewImageBase, [in] ULONG TimeStamp );",
            "name": "ReBaseImage"
        },
        {
            "signature": "BOOL IMAGEAPI ReBaseImage64( [in] PCSTR CurrentImageName, [in] PCSTR SymbolPath, [in] BOOL fReBase, [in] BOOL fRebaseSysfileOk, [in] BOOL fGoingDown, [in] ULONG CheckImageSize, [out] ULONG *OldImageSize, [out] ULONG64 *OldImageBase, [out] ULONG *NewImageSize, [in, out] ULONG64 *NewImageBase, [in] ULONG TimeStamp );",
            "name": "ReBaseImage64"
        },
        {
            "signature": "BOOL IMAGEAPI SetImageConfigInformation( [in] PLOADED_IMAGE LoadedImage, [in] PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation );",
            "name": "SetImageConfigInformation"
        },
        {
            "signature": "BOOL IMAGEAPI SplitSymbols( [in] PSTR ImageName, [in] PCSTR SymbolsPath, [out] PSTR SymbolFilePath, [in] ULONG Flags );",
            "name": "SplitSymbols"
        },
        {
            "signature": "BOOL IMAGEAPI TouchFileTimes( [in] HANDLE FileHandle, [in] PSYSTEMTIME pSystemTime );",
            "name": "TouchFileTimes"
        },
        {
            "signature": "BOOL IMAGEAPI UnMapAndLoad( [in] PLOADED_IMAGE LoadedImage );",
            "name": "UnMapAndLoad"
        },
        {
            "signature": "BOOL IMAGEAPI UpdateDebugInfoFile( [in] PCSTR ImageFileName, [in] PCSTR SymbolPath, [out] PSTR DebugFilePath, [in] PIMAGE_NT_HEADERS32 NtHeaders );",
            "name": "UpdateDebugInfoFile"
        },
        {
            "signature": "BOOL IMAGEAPI UpdateDebugInfoFileEx( [in] PCSTR ImageFileName, [in] PCSTR SymbolPath, [out] PSTR DebugFilePath, [in] PIMAGE_NT_HEADERS32 NtHeaders, [in] DWORD OldCheckSum );",
            "name": "UpdateDebugInfoFileEx"
        }
    ],
    "Imagetranscode.h": [],
    "Imapi.h": [],
    "Imapi2.h": [],
    "Imapi2fs.h": [],
    "Ime.h": [
        {
            "signature": "LRESULT SendIMEMessageExA( HWND unnamedParam1, LPARAM unnamedParam2 );",
            "name": "SendIMEMessageExA"
        },
        {
            "signature": "LRESULT SendIMEMessageExW( HWND unnamedParam1, LPARAM unnamedParam2 );",
            "name": "SendIMEMessageExW"
        }
    ],
    "Imepad.h": [],
    "Imessagedispatcher.h": [],
    "Imm.h": [
        {
            "signature": "IMCENUMPROC Imcenumproc; BOOL Imcenumproc( HIMC unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "IMCENUMPROC callback"
        },
        {
            "signature": "HIMC ImmAssociateContext( HWND unnamedParam1, HIMC unnamedParam2 );",
            "name": "ImmAssociateContext"
        },
        {
            "signature": "BOOL ImmAssociateContextEx( [in] HWND unnamedParam1, [in] HIMC unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "ImmAssociateContextEx"
        },
        {
            "signature": "BOOL ImmConfigureIMEA( HKL unnamedParam1, HWND unnamedParam2, DWORD unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmConfigureIMEA"
        },
        {
            "signature": "BOOL ImmConfigureIMEW( HKL unnamedParam1, HWND unnamedParam2, DWORD unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmConfigureIMEW"
        },
        {
            "signature": "HIMC ImmCreateContext();",
            "name": "ImmCreateContext"
        },
        {
            "signature": "BOOL ImmDestroyContext( HIMC unnamedParam1 );",
            "name": "ImmDestroyContext"
        },
        {
            "signature": "BOOL ImmDisableIME( DWORD unnamedParam1 );",
            "name": "ImmDisableIME"
        },
        {
            "signature": "BOOL ImmDisableLegacyIME();",
            "name": "ImmDisableLegacyIME"
        },
        {
            "signature": "BOOL ImmDisableTextFrameService( [in] DWORD idThread );",
            "name": "ImmDisableTextFrameService"
        },
        {
            "signature": "BOOL ImmEnumInputContext( [in] DWORD idThread, [in] IMCENUMPROC lpfn, [in] LPARAM lParam );",
            "name": "ImmEnumInputContext"
        },
        {
            "signature": "UINT ImmEnumRegisterWordA( HKL unnamedParam1, REGISTERWORDENUMPROCA unnamedParam2, [in, optional] LPCSTR lpszReading, DWORD unnamedParam4, [in, optional] LPCSTR lpszRegister, LPVOID unnamedParam6 );",
            "name": "ImmEnumRegisterWordA"
        },
        {
            "signature": "UINT ImmEnumRegisterWordW( HKL unnamedParam1, REGISTERWORDENUMPROCW unnamedParam2, [in, optional] LPCWSTR lpszReading, DWORD unnamedParam4, [in, optional] LPCWSTR lpszRegister, LPVOID unnamedParam6 );",
            "name": "ImmEnumRegisterWordW"
        },
        {
            "signature": "LRESULT ImmEscapeA( HKL unnamedParam1, HIMC unnamedParam2, UINT unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmEscapeA"
        },
        {
            "signature": "LRESULT ImmEscapeW( HKL unnamedParam1, HIMC unnamedParam2, UINT unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmEscapeW"
        },
        {
            "signature": "DWORD ImmGetCandidateListA( HIMC unnamedParam1, [in] DWORD deIndex, [out, optional] LPCANDIDATELIST lpCandList, [in] DWORD dwBufLen );",
            "name": "ImmGetCandidateListA"
        },
        {
            "signature": "DWORD ImmGetCandidateListCountA( HIMC unnamedParam1, [out] LPDWORD lpdwListCount );",
            "name": "ImmGetCandidateListCountA"
        },
        {
            "signature": "DWORD ImmGetCandidateListCountW( HIMC unnamedParam1, [out] LPDWORD lpdwListCount );",
            "name": "ImmGetCandidateListCountW"
        },
        {
            "signature": "DWORD ImmGetCandidateListW( HIMC unnamedParam1, [in] DWORD deIndex, [out, optional] LPCANDIDATELIST lpCandList, [in] DWORD dwBufLen );",
            "name": "ImmGetCandidateListW"
        },
        {
            "signature": "BOOL ImmGetCandidateWindow( HIMC unnamedParam1, DWORD unnamedParam2, [out] LPCANDIDATEFORM lpCandidate );",
            "name": "ImmGetCandidateWindow"
        },
        {
            "signature": "BOOL ImmGetCompositionFontA( HIMC unnamedParam1, [out] LPLOGFONTA lplf );",
            "name": "ImmGetCompositionFontA"
        },
        {
            "signature": "BOOL ImmGetCompositionFontW( HIMC unnamedParam1, [out] LPLOGFONTW lplf );",
            "name": "ImmGetCompositionFontW"
        },
        {
            "signature": "LONG ImmGetCompositionStringA( HIMC unnamedParam1, DWORD unnamedParam2, [out, optional] LPVOID lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetCompositionStringA"
        },
        {
            "signature": "LONG ImmGetCompositionStringW( HIMC unnamedParam1, DWORD unnamedParam2, [out, optional] LPVOID lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetCompositionStringW"
        },
        {
            "signature": "BOOL ImmGetCompositionWindow( HIMC unnamedParam1, [out] LPCOMPOSITIONFORM lpCompForm );",
            "name": "ImmGetCompositionWindow"
        },
        {
            "signature": "HIMC ImmGetContext( HWND unnamedParam1 );",
            "name": "ImmGetContext"
        },
        {
            "signature": "DWORD ImmGetConversionListA( HKL unnamedParam1, HIMC unnamedParam2, [in] LPCSTR lpSrc, [out] LPCANDIDATELIST lpDst, [in] DWORD dwBufLen, [in] UINT uFlag );",
            "name": "ImmGetConversionListA"
        },
        {
            "signature": "DWORD ImmGetConversionListW( HKL unnamedParam1, HIMC unnamedParam2, [in] LPCWSTR lpSrc, [out] LPCANDIDATELIST lpDst, [in] DWORD dwBufLen, [in] UINT uFlag );",
            "name": "ImmGetConversionListW"
        },
        {
            "signature": "BOOL ImmGetConversionStatus( HIMC unnamedParam1, [out, optional] LPDWORD lpfdwConversion, [out, optional] LPDWORD lpfdwSentence );",
            "name": "ImmGetConversionStatus"
        },
        {
            "signature": "HWND ImmGetDefaultIMEWnd( HWND unnamedParam1 );",
            "name": "ImmGetDefaultIMEWnd"
        },
        {
            "signature": "UINT ImmGetDescriptionA( HKL unnamedParam1, [out, optional] LPSTR lpszDescription, [in] UINT uBufLen );",
            "name": "ImmGetDescriptionA"
        },
        {
            "signature": "UINT ImmGetDescriptionW( HKL unnamedParam1, [out, optional] LPWSTR lpszDescription, [in] UINT uBufLen );",
            "name": "ImmGetDescriptionW"
        },
        {
            "signature": "DWORD ImmGetGuideLineA( [in] HIMC unnamedParam1, [in] DWORD dwIndex, [out, optional] LPSTR lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetGuideLineA"
        },
        {
            "signature": "DWORD ImmGetGuideLineW( [in] HIMC unnamedParam1, [in] DWORD dwIndex, [out, optional] LPWSTR lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetGuideLineW"
        },
        {
            "signature": "UINT ImmGetIMEFileNameA( HKL unnamedParam1, [out, optional] LPSTR lpszFileName, [in] UINT uBufLen );",
            "name": "ImmGetIMEFileNameA"
        },
        {
            "signature": "UINT ImmGetIMEFileNameW( HKL unnamedParam1, [out, optional] LPWSTR lpszFileName, [in] UINT uBufLen );",
            "name": "ImmGetIMEFileNameW"
        },
        {
            "signature": "DWORD ImmGetImeMenuItemsA( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3, [out, optional] LPIMEMENUITEMINFOA lpImeParentMenu, [out, optional] LPIMEMENUITEMINFOA lpImeMenu, [in] DWORD dwSize );",
            "name": "ImmGetImeMenuItemsA"
        },
        {
            "signature": "DWORD ImmGetImeMenuItemsW( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3, [out, optional] LPIMEMENUITEMINFOW lpImeParentMenu, [out, optional] LPIMEMENUITEMINFOW lpImeMenu, [in] DWORD dwSize );",
            "name": "ImmGetImeMenuItemsW"
        },
        {
            "signature": "BOOL ImmGetOpenStatus( HIMC unnamedParam1 );",
            "name": "ImmGetOpenStatus"
        },
        {
            "signature": "DWORD ImmGetProperty( HKL unnamedParam1, DWORD unnamedParam2 );",
            "name": "ImmGetProperty"
        },
        {
            "signature": "UINT ImmGetRegisterWordStyleA( HKL unnamedParam1, [in] UINT nItem, [out] LPSTYLEBUFA lpStyleBuf );",
            "name": "ImmGetRegisterWordStyleA"
        },
        {
            "signature": "UINT ImmGetRegisterWordStyleW( HKL unnamedParam1, [in] UINT nItem, [out] LPSTYLEBUFW lpStyleBuf );",
            "name": "ImmGetRegisterWordStyleW"
        },
        {
            "signature": "BOOL ImmGetStatusWindowPos( HIMC unnamedParam1, [out] LPPOINT lpptPos );",
            "name": "ImmGetStatusWindowPos"
        },
        {
            "signature": "UINT ImmGetVirtualKey( HWND unnamedParam1 );",
            "name": "ImmGetVirtualKey"
        },
        {
            "signature": "HKL ImmInstallIMEA( [in] LPCSTR lpszIMEFileName, [in] LPCSTR lpszLayoutText );",
            "name": "ImmInstallIMEA"
        },
        {
            "signature": "HKL ImmInstallIMEW( [in] LPCWSTR lpszIMEFileName, [in] LPCWSTR lpszLayoutText );",
            "name": "ImmInstallIMEW"
        },
        {
            "signature": "BOOL ImmIsIME( HKL unnamedParam1 );",
            "name": "ImmIsIME"
        },
        {
            "signature": "BOOL ImmIsUIMessageA( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 );",
            "name": "ImmIsUIMessageA"
        },
        {
            "signature": "BOOL ImmIsUIMessageW( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 );",
            "name": "ImmIsUIMessageW"
        },
        {
            "signature": "BOOL ImmNotifyIME( HIMC unnamedParam1, [in] DWORD dwAction, [in] DWORD dwIndex, [in] DWORD dwValue );",
            "name": "ImmNotifyIME"
        },
        {
            "signature": "BOOL ImmRegisterWordA( HKL unnamedParam1, [in] LPCSTR lpszReading, DWORD unnamedParam3, [in] LPCSTR lpszRegister );",
            "name": "ImmRegisterWordA"
        },
        {
            "signature": "BOOL ImmRegisterWordW( HKL unnamedParam1, [in] LPCWSTR lpszReading, DWORD unnamedParam3, [in] LPCWSTR lpszRegister );",
            "name": "ImmRegisterWordW"
        },
        {
            "signature": "BOOL ImmReleaseContext( HWND unnamedParam1, HIMC unnamedParam2 );",
            "name": "ImmReleaseContext"
        },
        {
            "signature": "BOOL ImmSetCandidateWindow( HIMC unnamedParam1, [in] LPCANDIDATEFORM lpCandidate );",
            "name": "ImmSetCandidateWindow"
        },
        {
            "signature": "BOOL ImmSetCompositionFontA( HIMC unnamedParam1, [in] LPLOGFONTA lplf );",
            "name": "ImmSetCompositionFontA"
        },
        {
            "signature": "BOOL ImmSetCompositionFontW( HIMC unnamedParam1, [in] LPLOGFONTW lplf );",
            "name": "ImmSetCompositionFontW"
        },
        {
            "signature": "BOOL ImmSetCompositionStringA( HIMC unnamedParam1, [in] DWORD dwIndex, [in, optional] LPVOID lpComp, [in] DWORD dwCompLen, [in, optional] LPVOID lpRead, [in] DWORD dwReadLen );",
            "name": "ImmSetCompositionStringA"
        },
        {
            "signature": "BOOL ImmSetCompositionStringW( HIMC unnamedParam1, [in] DWORD dwIndex, [in, optional] LPVOID lpComp, [in] DWORD dwCompLen, [in, optional] LPVOID lpRead, [in] DWORD dwReadLen );",
            "name": "ImmSetCompositionStringW"
        },
        {
            "signature": "BOOL ImmSetCompositionWindow( HIMC unnamedParam1, [in] LPCOMPOSITIONFORM lpCompForm );",
            "name": "ImmSetCompositionWindow"
        },
        {
            "signature": "BOOL ImmSetConversionStatus( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "ImmSetConversionStatus"
        },
        {
            "signature": "BOOL ImmSetOpenStatus( HIMC unnamedParam1, BOOL unnamedParam2 );",
            "name": "ImmSetOpenStatus"
        },
        {
            "signature": "BOOL ImmSetStatusWindowPos( HIMC unnamedParam1, [in] LPPOINT lpptPos );",
            "name": "ImmSetStatusWindowPos"
        },
        {
            "signature": "BOOL ImmSimulateHotKey( HWND unnamedParam1, DWORD unnamedParam2 );",
            "name": "ImmSimulateHotKey"
        },
        {
            "signature": "BOOL ImmUnregisterWordA( HKL unnamedParam1, [in] LPCSTR lpszReading, DWORD unnamedParam3, [in] LPCSTR lpszUnregister );",
            "name": "ImmUnregisterWordA"
        },
        {
            "signature": "BOOL ImmUnregisterWordW( HKL unnamedParam1, [in] LPCWSTR lpszReading, DWORD unnamedParam3, [in] LPCWSTR lpszUnregister );",
            "name": "ImmUnregisterWordW"
        },
        {
            "signature": "REGISTERWORDENUMPROCA Registerwordenumproca; int Registerwordenumproca( [in] LPCSTR lpszReading, DWORD unnamedParam2, [in] LPCSTR lpszString, LPVOID unnamedParam4 ) {...}",
            "name": "REGISTERWORDENUMPROCA callback"
        },
        {
            "signature": "REGISTERWORDENUMPROCW Registerwordenumprocw; int Registerwordenumprocw( [in] LPCWSTR lpszReading, DWORD unnamedParam2, [in] LPCWSTR lpszString, LPVOID unnamedParam4 ) {...}",
            "name": "REGISTERWORDENUMPROCW callback"
        }
    ],
    "Immdev.h": [
        {
            "signature": "IMCENUMPROC Imcenumproc; BOOL Imcenumproc( HIMC unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "IMCENUMPROC callback"
        },
        {
            "signature": "HIMC ImmAssociateContext( HWND unnamedParam1, HIMC unnamedParam2 );",
            "name": "ImmAssociateContext"
        },
        {
            "signature": "BOOL ImmAssociateContextEx( [in] HWND unnamedParam1, [in] HIMC unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "ImmAssociateContextEx"
        },
        {
            "signature": "BOOL ImmConfigureIMEA( HKL unnamedParam1, HWND unnamedParam2, DWORD unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmConfigureIMEA"
        },
        {
            "signature": "BOOL ImmConfigureIMEW( HKL unnamedParam1, HWND unnamedParam2, DWORD unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmConfigureIMEW"
        },
        {
            "signature": "HIMC ImmCreateContext();",
            "name": "ImmCreateContext"
        },
        {
            "signature": "BOOL ImmDestroyContext( HIMC unnamedParam1 );",
            "name": "ImmDestroyContext"
        },
        {
            "signature": "BOOL ImmDisableIME( DWORD unnamedParam1 );",
            "name": "ImmDisableIME"
        },
        {
            "signature": "BOOL ImmDisableLegacyIME();",
            "name": "ImmDisableLegacyIME"
        },
        {
            "signature": "BOOL ImmDisableTextFrameService( [in] DWORD idThread );",
            "name": "ImmDisableTextFrameService"
        },
        {
            "signature": "BOOL ImmEnumInputContext( [in] DWORD idThread, [in] IMCENUMPROC lpfn, [in] LPARAM lParam );",
            "name": "ImmEnumInputContext"
        },
        {
            "signature": "UINT ImmEnumRegisterWordA( [in] HKL unnamedParam1, [in] REGISTERWORDENUMPROCA unnamedParam2, [in, optional] LPCSTR lpszReading, [in] DWORD unnamedParam4, [in, optional] LPCSTR lpszRegister, [in] LPVOID unnamedParam6 );",
            "name": "ImmEnumRegisterWordA"
        },
        {
            "signature": "UINT ImmEnumRegisterWordW( [in] HKL unnamedParam1, [in] REGISTERWORDENUMPROCW unnamedParam2, [in, optional] LPCWSTR lpszReading, [in] DWORD unnamedParam4, [in, optional] LPCWSTR lpszRegister, [in] LPVOID unnamedParam6 );",
            "name": "ImmEnumRegisterWordW"
        },
        {
            "signature": "LRESULT ImmEscapeA( HKL unnamedParam1, HIMC unnamedParam2, UINT unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmEscapeA"
        },
        {
            "signature": "LRESULT ImmEscapeW( HKL unnamedParam1, HIMC unnamedParam2, UINT unnamedParam3, LPVOID unnamedParam4 );",
            "name": "ImmEscapeW"
        },
        {
            "signature": "DWORD ImmGetCandidateListA( HIMC unnamedParam1, [in] DWORD deIndex, [out, optional] LPCANDIDATELIST lpCandList, [in] DWORD dwBufLen );",
            "name": "ImmGetCandidateListA"
        },
        {
            "signature": "DWORD ImmGetCandidateListCountA( HIMC unnamedParam1, [out] LPDWORD lpdwListCount );",
            "name": "ImmGetCandidateListCountA"
        },
        {
            "signature": "DWORD ImmGetCandidateListCountW( HIMC unnamedParam1, [out] LPDWORD lpdwListCount );",
            "name": "ImmGetCandidateListCountW"
        },
        {
            "signature": "DWORD ImmGetCandidateListW( HIMC unnamedParam1, [in] DWORD deIndex, [out, optional] LPCANDIDATELIST lpCandList, [in] DWORD dwBufLen );",
            "name": "ImmGetCandidateListW"
        },
        {
            "signature": "BOOL ImmGetCandidateWindow( HIMC unnamedParam1, DWORD unnamedParam2, [out] LPCANDIDATEFORM lpCandidate );",
            "name": "ImmGetCandidateWindow"
        },
        {
            "signature": "BOOL ImmGetCompositionFontA( HIMC unnamedParam1, [out] LPLOGFONTA lplf );",
            "name": "ImmGetCompositionFontA"
        },
        {
            "signature": "BOOL ImmGetCompositionFontW( HIMC unnamedParam1, [out] LPLOGFONTW lplf );",
            "name": "ImmGetCompositionFontW"
        },
        {
            "signature": "LONG ImmGetCompositionStringA( HIMC unnamedParam1, DWORD unnamedParam2, [out, optional] LPVOID lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetCompositionStringA"
        },
        {
            "signature": "LONG ImmGetCompositionStringW( HIMC unnamedParam1, DWORD unnamedParam2, [out, optional] LPVOID lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetCompositionStringW"
        },
        {
            "signature": "BOOL ImmGetCompositionWindow( HIMC unnamedParam1, [out] LPCOMPOSITIONFORM lpCompForm );",
            "name": "ImmGetCompositionWindow"
        },
        {
            "signature": "HIMC ImmGetContext( HWND unnamedParam1 );",
            "name": "ImmGetContext"
        },
        {
            "signature": "DWORD ImmGetConversionListA( HKL unnamedParam1, HIMC unnamedParam2, [in] LPCSTR lpSrc, [out] LPCANDIDATELIST lpDst, [in] DWORD dwBufLen, [in] UINT uFlag );",
            "name": "ImmGetConversionListA"
        },
        {
            "signature": "DWORD ImmGetConversionListW( HKL unnamedParam1, HIMC unnamedParam2, [in] LPCWSTR lpSrc, [out] LPCANDIDATELIST lpDst, [in] DWORD dwBufLen, [in] UINT uFlag );",
            "name": "ImmGetConversionListW"
        },
        {
            "signature": "BOOL ImmGetConversionStatus( HIMC unnamedParam1, [out, optional] LPDWORD lpfdwConversion, [out, optional] LPDWORD lpfdwSentence );",
            "name": "ImmGetConversionStatus"
        },
        {
            "signature": "HWND ImmGetDefaultIMEWnd( HWND unnamedParam1 );",
            "name": "ImmGetDefaultIMEWnd"
        },
        {
            "signature": "UINT ImmGetDescriptionA( HKL unnamedParam1, [out, optional] LPSTR lpszDescription, [in] UINT uBufLen );",
            "name": "ImmGetDescriptionA"
        },
        {
            "signature": "UINT ImmGetDescriptionW( HKL unnamedParam1, [out, optional] LPWSTR lpszDescription, [in] UINT uBufLen );",
            "name": "ImmGetDescriptionW"
        },
        {
            "signature": "DWORD ImmGetGuideLineA( [in] HIMC unnamedParam1, [in] DWORD dwIndex, [out, optional] LPSTR lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetGuideLineA"
        },
        {
            "signature": "DWORD ImmGetGuideLineW( [in] HIMC unnamedParam1, [in] DWORD dwIndex, [out, optional] LPWSTR lpBuf, [in] DWORD dwBufLen );",
            "name": "ImmGetGuideLineW"
        },
        {
            "signature": "UINT ImmGetIMEFileNameA( HKL unnamedParam1, [out, optional] LPSTR lpszFileName, [in] UINT uBufLen );",
            "name": "ImmGetIMEFileNameA"
        },
        {
            "signature": "UINT ImmGetIMEFileNameW( HKL unnamedParam1, [out, optional] LPWSTR lpszFileName, [in] UINT uBufLen );",
            "name": "ImmGetIMEFileNameW"
        },
        {
            "signature": "DWORD ImmGetImeMenuItemsA( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3, [out, optional] LPIMEMENUITEMINFOA lpImeParentMenu, [out, optional] LPIMEMENUITEMINFOA lpImeMenu, [in] DWORD dwSize );",
            "name": "ImmGetImeMenuItemsA"
        },
        {
            "signature": "DWORD ImmGetImeMenuItemsW( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3, [out, optional] LPIMEMENUITEMINFOW lpImeParentMenu, [out, optional] LPIMEMENUITEMINFOW lpImeMenu, [in] DWORD dwSize );",
            "name": "ImmGetImeMenuItemsW"
        },
        {
            "signature": "BOOL ImmGetOpenStatus( HIMC unnamedParam1 );",
            "name": "ImmGetOpenStatus"
        },
        {
            "signature": "DWORD ImmGetProperty( HKL unnamedParam1, DWORD unnamedParam2 );",
            "name": "ImmGetProperty"
        },
        {
            "signature": "UINT ImmGetRegisterWordStyleA( HKL unnamedParam1, [in] UINT nItem, [out] LPSTYLEBUFA lpStyleBuf );",
            "name": "ImmGetRegisterWordStyleA"
        },
        {
            "signature": "UINT ImmGetRegisterWordStyleW( HKL unnamedParam1, [in] UINT nItem, [out] LPSTYLEBUFW lpStyleBuf );",
            "name": "ImmGetRegisterWordStyleW"
        },
        {
            "signature": "BOOL ImmGetStatusWindowPos( HIMC unnamedParam1, [out] LPPOINT lpptPos );",
            "name": "ImmGetStatusWindowPos"
        },
        {
            "signature": "UINT ImmGetVirtualKey( HWND unnamedParam1 );",
            "name": "ImmGetVirtualKey"
        },
        {
            "signature": "HKL ImmInstallIMEA( [in] LPCSTR lpszIMEFileName, [in] LPCSTR lpszLayoutText );",
            "name": "ImmInstallIMEA"
        },
        {
            "signature": "HKL ImmInstallIMEW( [in] LPCWSTR lpszIMEFileName, [in] LPCWSTR lpszLayoutText );",
            "name": "ImmInstallIMEW"
        },
        {
            "signature": "BOOL ImmIsIME( HKL unnamedParam1 );",
            "name": "ImmIsIME"
        },
        {
            "signature": "BOOL ImmIsUIMessageA( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 );",
            "name": "ImmIsUIMessageA"
        },
        {
            "signature": "BOOL ImmIsUIMessageW( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 );",
            "name": "ImmIsUIMessageW"
        },
        {
            "signature": "BOOL ImmNotifyIME( HIMC unnamedParam1, [in] DWORD dwAction, [in] DWORD dwIndex, [in] DWORD dwValue );",
            "name": "ImmNotifyIME"
        },
        {
            "signature": "BOOL ImmRegisterWordA( HKL unnamedParam1, [in] LPCSTR lpszReading, DWORD unnamedParam3, [in] LPCSTR lpszRegister );",
            "name": "ImmRegisterWordA"
        },
        {
            "signature": "BOOL ImmRegisterWordW( HKL unnamedParam1, [in] LPCWSTR lpszReading, DWORD unnamedParam3, [in] LPCWSTR lpszRegister );",
            "name": "ImmRegisterWordW"
        },
        {
            "signature": "BOOL ImmReleaseContext( HWND unnamedParam1, HIMC unnamedParam2 );",
            "name": "ImmReleaseContext"
        },
        {
            "signature": "LRESULT ImmRequestMessageA( HIMC unnamedParam1, WPARAM unnamedParam2, LPARAM unnamedParam3 );",
            "name": "ImmRequestMessageA"
        },
        {
            "signature": "LRESULT ImmRequestMessageW( HIMC unnamedParam1, WPARAM unnamedParam2, LPARAM unnamedParam3 );",
            "name": "ImmRequestMessageW"
        },
        {
            "signature": "BOOL ImmSetCandidateWindow( HIMC unnamedParam1, [in] LPCANDIDATEFORM lpCandidate );",
            "name": "ImmSetCandidateWindow"
        },
        {
            "signature": "BOOL ImmSetCompositionFontA( HIMC unnamedParam1, [in] LPLOGFONTA lplf );",
            "name": "ImmSetCompositionFontA"
        },
        {
            "signature": "BOOL ImmSetCompositionFontW( HIMC unnamedParam1, [in] LPLOGFONTW lplf );",
            "name": "ImmSetCompositionFontW"
        },
        {
            "signature": "BOOL ImmSetCompositionStringA( HIMC unnamedParam1, [in] DWORD dwIndex, [in, optional] LPVOID lpComp, [in] DWORD dwCompLen, [in, optional] LPVOID lpRead, [in] DWORD dwReadLen );",
            "name": "ImmSetCompositionStringA"
        },
        {
            "signature": "BOOL ImmSetCompositionStringW( HIMC unnamedParam1, [in] DWORD dwIndex, [in, optional] LPVOID lpComp, [in] DWORD dwCompLen, [in, optional] LPVOID lpRead, [in] DWORD dwReadLen );",
            "name": "ImmSetCompositionStringW"
        },
        {
            "signature": "BOOL ImmSetCompositionWindow( HIMC unnamedParam1, [in] LPCOMPOSITIONFORM lpCompForm );",
            "name": "ImmSetCompositionWindow"
        },
        {
            "signature": "BOOL ImmSetConversionStatus( [in] HIMC unnamedParam1, [in] DWORD unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "ImmSetConversionStatus"
        },
        {
            "signature": "BOOL ImmSetOpenStatus( HIMC unnamedParam1, BOOL unnamedParam2 );",
            "name": "ImmSetOpenStatus"
        },
        {
            "signature": "BOOL ImmSetStatusWindowPos( HIMC unnamedParam1, [in] LPPOINT lpptPos );",
            "name": "ImmSetStatusWindowPos"
        },
        {
            "signature": "BOOL ImmSimulateHotKey( HWND unnamedParam1, DWORD unnamedParam2 );",
            "name": "ImmSimulateHotKey"
        },
        {
            "signature": "BOOL ImmUnregisterWordA( HKL unnamedParam1, [in] LPCSTR lpszReading, DWORD unnamedParam3, [in] LPCSTR lpszUnregister );",
            "name": "ImmUnregisterWordA"
        },
        {
            "signature": "BOOL ImmUnregisterWordW( HKL unnamedParam1, [in] LPCWSTR lpszReading, DWORD unnamedParam3, [in] LPCWSTR lpszUnregister );",
            "name": "ImmUnregisterWordW"
        },
        {
            "signature": "REGISTERWORDENUMPROCA Registerwordenumproca; int Registerwordenumproca( [in] LPCSTR lpszReading, [in] DWORD unnamedParam2, [in] LPCSTR lpszString, [in] LPVOID unnamedParam4 ) {...}",
            "name": "REGISTERWORDENUMPROCA callback"
        },
        {
            "signature": "REGISTERWORDENUMPROCW Registerwordenumprocw; int Registerwordenumprocw( [in] LPCWSTR lpszReading, [in] DWORD unnamedParam2, [in] LPCWSTR lpszString, [in] LPVOID unnamedParam4 ) {...}",
            "name": "REGISTERWORDENUMPROCW callback"
        }
    ],
    "In6addr.h": [],
    "Inaddr.h": [],
    "Indexsrv.h": [],
    "Infocard.h": [],
    "Infotech.h": [],
    "Inked.h": [],
    "Inkpresenterdesktop.h": [],
    "Inkrenderer.h": [],
    "Inputpaneinterop.h": [],
    "Inputpanelconfiguration.h": [],
    "Inputscope.h": [
        {
            "signature": "HRESULT SetInputScope( [in] HWND hwnd, [in] InputScope inputscope );",
            "name": "SetInputScope"
        },
        {
            "signature": "HRESULT SetInputScopes( [in] HWND hwnd, [in] const InputScope *pInputScopes, [in] UINT cInputScopes, [in] PWSTR *ppszPhraseList, [in] UINT cPhrases, [in] PWSTR pszRegExp, [in] PWSTR pszSRGS );",
            "name": "SetInputScopes"
        },
        {
            "signature": "HRESULT SetInputScopes2( [in] HWND hwnd, [in] const InputScope *pInputScopes, [in] UINT cInputScopes, [in] IEnumString *pEnumString, [in] PWSTR pszRegExp, [in] PWSTR pszSRGS );",
            "name": "SetInputScopes2"
        },
        {
            "signature": "HRESULT SetInputScopeXML( HWND hwnd, PWSTR pszXML );",
            "name": "SetInputScopeXML"
        }
    ],
    "Inspectable.h": [
        {
            "signature": "void HSTRING_UserFree( unsigned long *unnamedParam1, HSTRING *unnamedParam2 );",
            "name": "HSTRING_UserFree"
        },
        {
            "signature": "void HSTRING_UserFree64( [in] unsigned long *unnamedParam1, [in] HSTRING *unnamedParam2 );",
            "name": "HSTRING_UserFree64"
        },
        {
            "signature": "unsigned char * HSTRING_UserMarshal( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserMarshal"
        },
        {
            "signature": "unsigned char * HSTRING_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserMarshal64"
        },
        {
            "signature": "unsigned long HSTRING_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserSize"
        },
        {
            "signature": "unsigned long HSTRING_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserSize64"
        },
        {
            "signature": "unsigned char * HSTRING_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HSTRING_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserUnmarshal64"
        }
    ],
    "Instance.h": [],
    "Interactioncontext.h": [
        {
            "signature": "HRESULT AddPointerInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 pointerId );",
            "name": "AddPointerInteractionContext"
        },
        {
            "signature": "HRESULT BufferPointerPacketsInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 entriesCount, [in] const POINTER_INFO *pointerInfo );",
            "name": "BufferPointerPacketsInteractionContext"
        },
        {
            "signature": "HRESULT CreateInteractionContext( [out] HINTERACTIONCONTEXT *interactionContext );",
            "name": "CreateInteractionContext"
        },
        {
            "signature": "HRESULT DestroyInteractionContext( [in] HINTERACTIONCONTEXT interactionContext );",
            "name": "DestroyInteractionContext"
        },
        {
            "signature": "HRESULT GetCrossSlideParameterInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] CROSS_SLIDE_THRESHOLD threshold, [out] float *distance );",
            "name": "GetCrossSlideParameterInteractionContext"
        },
        {
            "signature": "HRESULT GetInertiaParameterInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] INERTIA_PARAMETER inertiaParameter, [out] float *value );",
            "name": "GetInertiaParameterInteractionContext"
        },
        {
            "signature": "HRESULT GetInteractionConfigurationInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 configurationCount, [out] INTERACTION_CONTEXT_CONFIGURATION *configuration );",
            "name": "GetInteractionConfigurationInteractionContext"
        },
        {
            "signature": "HRESULT GetMouseWheelParameterInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] MOUSE_WHEEL_PARAMETER parameter, [out] float *value );",
            "name": "GetMouseWheelParameterInteractionContext"
        },
        {
            "signature": "HRESULT GetPropertyInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] INTERACTION_CONTEXT_PROPERTY contextProperty, [out] UINT32 *value );",
            "name": "GetPropertyInteractionContext"
        },
        {
            "signature": "HRESULT GetStateInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] const POINTER_INFO *pointerInfo, [out] INTERACTION_STATE *state );",
            "name": "GetStateInteractionContext"
        },
        {
            "signature": "INTERACTION_CONTEXT_OUTPUT_CALLBACK InteractionContextOutputCallback; void InteractionContextOutputCallback( [in, optional] void *clientData, [in] const INTERACTION_CONTEXT_OUTPUT *output ) {...}",
            "name": "INTERACTION_CONTEXT_OUTPUT_CALLBACK callback"
        },
        {
            "signature": "HRESULT ProcessBufferedPacketsInteractionContext( [in] HINTERACTIONCONTEXT interactionContext );",
            "name": "ProcessBufferedPacketsInteractionContext"
        },
        {
            "signature": "HRESULT ProcessInertiaInteractionContext( [in] HINTERACTIONCONTEXT interactionContext );",
            "name": "ProcessInertiaInteractionContext"
        },
        {
            "signature": "HRESULT ProcessPointerFramesInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 entriesCount, [in] UINT32 pointerCount, [in] const POINTER_INFO *pointerInfo );",
            "name": "ProcessPointerFramesInteractionContext"
        },
        {
            "signature": "HRESULT RegisterOutputCallbackInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] INTERACTION_CONTEXT_OUTPUT_CALLBACK outputCallback, [in, optional] void *clientData );",
            "name": "RegisterOutputCallbackInteractionContext"
        },
        {
            "signature": "HRESULT RemovePointerInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 pointerId );",
            "name": "RemovePointerInteractionContext"
        },
        {
            "signature": "HRESULT ResetInteractionContext( [in] HINTERACTIONCONTEXT interactionContext );",
            "name": "ResetInteractionContext"
        },
        {
            "signature": "HRESULT SetCrossSlideParametersInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 parameterCount, [in] CROSS_SLIDE_PARAMETER *crossSlideParameters );",
            "name": "SetCrossSlideParametersInteractionContext"
        },
        {
            "signature": "HRESULT SetInertiaParameterInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] INERTIA_PARAMETER inertiaParameter, [in] float value );",
            "name": "SetInertiaParameterInteractionContext"
        },
        {
            "signature": "HRESULT SetInteractionConfigurationInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] UINT32 configurationCount, [in] const INTERACTION_CONTEXT_CONFIGURATION *configuration );",
            "name": "SetInteractionConfigurationInteractionContext"
        },
        {
            "signature": "HRESULT SetMouseWheelParameterInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] MOUSE_WHEEL_PARAMETER parameter, [in] float value );",
            "name": "SetMouseWheelParameterInteractionContext"
        },
        {
            "signature": "HRESULT SetPivotInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] float x, [in] float y, [in] float radius );",
            "name": "SetPivotInteractionContext"
        },
        {
            "signature": "HRESULT SetPropertyInteractionContext( [in] HINTERACTIONCONTEXT interactionContext, [in] INTERACTION_CONTEXT_PROPERTY contextProperty, [in] UINT32 value );",
            "name": "SetPropertyInteractionContext"
        },
        {
            "signature": "HRESULT StopInteractionContext( [in] HINTERACTIONCONTEXT interactionContext );",
            "name": "StopInteractionContext"
        }
    ],
    "Interlockedapi.h": [
        {
            "signature": "void InitializeSListHead( [in, out] PSLIST_HEADER ListHead );",
            "name": "InitializeSListHead"
        },
        {
            "signature": "PSLIST_ENTRY InterlockedFlushSList( [in, out] PSLIST_HEADER ListHead );",
            "name": "InterlockedFlushSList"
        },
        {
            "signature": "PSLIST_ENTRY InterlockedPopEntrySList( [in, out] PSLIST_HEADER ListHead );",
            "name": "InterlockedPopEntrySList"
        },
        {
            "signature": "PSLIST_ENTRY InterlockedPushEntrySList( [in, out] PSLIST_HEADER ListHead, [in, out] __drv_aliasesMem PSLIST_ENTRY ListEntry );",
            "name": "InterlockedPushEntrySList"
        },
        {
            "signature": "PSLIST_ENTRY InterlockedPushListSListEx( [in, out] PSLIST_HEADER ListHead, [in, out] PSLIST_ENTRY List, [in, out] PSLIST_ENTRY ListEnd, [in] ULONG Count );",
            "name": "InterlockedPushListSListEx"
        },
        {
            "signature": "USHORT QueryDepthSList( [in] PSLIST_HEADER ListHead );",
            "name": "QueryDepthSList"
        }
    ],
    "Intsafe.h": [
        {
            "signature": "HRESULT ByteToChar( [in] BYTE bOperand, [out] CHAR *pch );",
            "name": "ByteToChar"
        },
        {
            "signature": "HRESULT ByteToInt8( [in] BYTE bOperand, [out] INT8 *pi8Result );",
            "name": "ByteToInt8"
        },
        {
            "signature": "HRESULT DWordPtrAdd( [in] DWORD_PTR dwAugend, [in] DWORD_PTR dwAddend, [out] DWORD_PTR *pdwResult );",
            "name": "DWordPtrAdd"
        },
        {
            "signature": "HRESULT DWordPtrMult( [in] DWORD_PTR dwMultiplicand, [in] DWORD_PTR dwMultiplier, [out] DWORD_PTR *pdwResult );",
            "name": "DWordPtrMult"
        },
        {
            "signature": "HRESULT DWordPtrSub( [in] DWORD_PTR dwMinuend, [in] DWORD_PTR dwSubtrahend, [out] DWORD_PTR *pdwResult );",
            "name": "DWordPtrSub"
        },
        {
            "signature": "HRESULT Int8Add( [in] INT8 i8Augend, [in] INT8 i8Addend, [out] INT8 *pi8Result );",
            "name": "Int8Add"
        },
        {
            "signature": "HRESULT Int8Mult( [in] INT8 i8Multiplicand, [in] INT8 i8Multiplier, [out] INT8 *pi8Result );",
            "name": "Int8Mult"
        },
        {
            "signature": "HRESULT Int8Sub( [in] INT8 i8Minuend, [in] INT8 i8Subtrahend, [out] INT8 *pi8Result );",
            "name": "Int8Sub"
        },
        {
            "signature": "HRESULT Int8ToUChar( [in] INT8 i8Operand, [out] UCHAR *pch );",
            "name": "Int8ToUChar"
        },
        {
            "signature": "HRESULT Int8ToUInt( [in] INT8 i8Operand, [out] UINT *puResult );",
            "name": "Int8ToUInt"
        },
        {
            "signature": "HRESULT Int8ToUInt8( [in] INT8 i8Operand, [out] UINT8 *pu8Result );",
            "name": "Int8ToUInt8"
        },
        {
            "signature": "HRESULT Int8ToUIntPtr( [in] INT8 i8Operand, [out] UINT_PTR *puResult );",
            "name": "Int8ToUIntPtr"
        },
        {
            "signature": "HRESULT Int8ToULong( [in] INT8 i8Operand, [out] ULONG *pulResult );",
            "name": "Int8ToULong"
        },
        {
            "signature": "HRESULT Int8ToULongLong( [in] INT8 i8Operand, [out] ULONGLONG *pullResult );",
            "name": "Int8ToULongLong"
        },
        {
            "signature": "HRESULT Int8ToULongPtr( [in] INT8 i8Operand, [out] ULONG_PTR *pulResult );",
            "name": "Int8ToULongPtr"
        },
        {
            "signature": "HRESULT Int8ToUShort( [in] INT8 i8Operand, [out] USHORT *pusResult );",
            "name": "Int8ToUShort"
        },
        {
            "signature": "HRESULT IntAdd( [in] INT iAugend, [in] INT iAddend, [out] INT *piResult );",
            "name": "IntAdd"
        },
        {
            "signature": "HRESULT IntMult( [in] INT iMultiplicand, [in] INT iMultiplier, [out] INT *piResult );",
            "name": "IntMult"
        },
        {
            "signature": "HRESULT IntPtrAdd( [in] INT_PTR iAugend, [in] INT_PTR iAddend, [out] INT_PTR *piResult );",
            "name": "IntPtrAdd"
        },
        {
            "signature": "HRESULT IntPtrMult( [in] INT_PTR iMultiplicand, [in] INT_PTR iMultiplier, [out] INT_PTR *piResult );",
            "name": "IntPtrMult"
        },
        {
            "signature": "HRESULT IntPtrSub( [in] INT_PTR iMinuend, [in] INT_PTR iSubtrahend, [out] INT_PTR *piResult );",
            "name": "IntPtrSub"
        },
        {
            "signature": "HRESULT IntPtrToChar( [in] INT_PTR iOperand, [out] CHAR *pch );",
            "name": "IntPtrToChar"
        },
        {
            "signature": "HRESULT IntPtrToInt( [in] INT_PTR iOperand, [out] INT *piResult );",
            "name": "IntPtrToInt"
        },
        {
            "signature": "HRESULT IntPtrToInt8( [in] INT_PTR iOperand, [out] INT8 *pi8Result );",
            "name": "IntPtrToInt8"
        },
        {
            "signature": "HRESULT IntPtrToLong( [in] INT_PTR iOperand, [out] LONG *plResult );",
            "name": "IntPtrToLong"
        },
        {
            "signature": "HRESULT IntPtrToLongPtr( [in] INT_PTR iOperand, [out] LONG_PTR *plResult );",
            "name": "IntPtrToLongPtr"
        },
        {
            "signature": "HRESULT IntPtrToShort( [in] INT_PTR iOperand, [out] SHORT *psResult );",
            "name": "IntPtrToShort"
        },
        {
            "signature": "HRESULT IntPtrToUChar( [in] INT_PTR iOperand, [out] UCHAR *pch );",
            "name": "IntPtrToUChar"
        },
        {
            "signature": "HRESULT IntPtrToUInt( [in] INT_PTR iOperand, [out] UINT *puResult );",
            "name": "IntPtrToUInt"
        },
        {
            "signature": "HRESULT IntPtrToUInt8( [in] INT_PTR iOperand, [out] UINT8 *pui8Result );",
            "name": "IntPtrToUInt8"
        },
        {
            "signature": "HRESULT IntPtrToUIntPtr( [in] INT_PTR iOperand, [out] UINT_PTR *puResult );",
            "name": "IntPtrToUIntPtr"
        },
        {
            "signature": "HRESULT IntPtrToULong( [in] INT_PTR iOperand, [out] ULONG *pulResult );",
            "name": "IntPtrToULong"
        },
        {
            "signature": "HRESULT IntPtrToULongLong( [in] INT_PTR iOperand, [out] ULONGLONG *pullResult );",
            "name": "IntPtrToULongLong"
        },
        {
            "signature": "HRESULT IntPtrToULongPtr( [in] INT_PTR iOperand, [out] ULONG_PTR *pulResult );",
            "name": "IntPtrToULongPtr"
        },
        {
            "signature": "HRESULT IntPtrToUShort( [in] INT_PTR iOperand, [out] USHORT *pusResult );",
            "name": "IntPtrToUShort"
        },
        {
            "signature": "HRESULT IntSub( [in] INT iMinuend, [in] INT iSubtrahend, [out] INT *piResult );",
            "name": "IntSub"
        },
        {
            "signature": "HRESULT IntToChar( [in] INT iOperand, [out] CHAR *pch );",
            "name": "IntToChar"
        },
        {
            "signature": "HRESULT IntToInt8( [in] INT iOperand, [out] INT8 *pi8Result );",
            "name": "IntToInt8"
        },
        {
            "signature": "HRESULT IntToShort( [in] INT iOperand, [out] SHORT *psResult );",
            "name": "IntToShort"
        },
        {
            "signature": "HRESULT IntToUChar( [in] INT iOperand, [out] UCHAR *pch );",
            "name": "IntToUChar"
        },
        {
            "signature": "HRESULT IntToUInt( [in] INT iOperand, [out] UINT *puResult );",
            "name": "IntToUInt"
        },
        {
            "signature": "HRESULT IntToUInt8( [in] INT iOperand, [out] UINT8 *pui8Result );",
            "name": "IntToUInt8"
        },
        {
            "signature": "HRESULT IntToULong( [in] INT iOperand, [out] ULONG *pulResult );",
            "name": "IntToULong"
        },
        {
            "signature": "HRESULT IntToULongLong( [in] INT iOperand, [out] ULONGLONG *pullResult );",
            "name": "IntToULongLong"
        },
        {
            "signature": "HRESULT IntToUShort( [in] INT iOperand, [out] USHORT *pusResult );",
            "name": "IntToUShort"
        },
        {
            "signature": "HRESULT LongAdd( [in] LONG lAugend, [in] LONG lAddend, [out] LONG *plResult );",
            "name": "LongAdd"
        },
        {
            "signature": "HRESULT LongLongAdd( [in] LONGLONG llAugend, [in] LONGLONG llAddend, [out] LONGLONG *pllResult );",
            "name": "LongLongAdd"
        },
        {
            "signature": "HRESULT LongLongMult( [in] LONGLONG llMultiplicand, [in] LONGLONG llMultiplier, [out] LONGLONG *pllResult );",
            "name": "LongLongMult"
        },
        {
            "signature": "HRESULT LongLongSub( [in] LONGLONG llMinuend, [in] LONGLONG llSubtrahend, [out] LONGLONG *pllResult );",
            "name": "LongLongSub"
        },
        {
            "signature": "HRESULT LongLongToChar( [in] LONGLONG llOperand, [out] CHAR *pch );",
            "name": "LongLongToChar"
        },
        {
            "signature": "HRESULT LongLongToInt( [in] LONGLONG llOperand, [out] INT *piResult );",
            "name": "LongLongToInt"
        },
        {
            "signature": "HRESULT LongLongToInt8( [in] LONGLONG llOperand, [out] INT8 *pi8Result );",
            "name": "LongLongToInt8"
        },
        {
            "signature": "HRESULT LongLongToIntPtr( [in] LONGLONG llOperand, [out] INT_PTR *piResult );",
            "name": "LongLongToIntPtr"
        },
        {
            "signature": "HRESULT LongLongToLong( [in] LONGLONG llOperand, [out] LONG *plResult );",
            "name": "LongLongToLong"
        },
        {
            "signature": "HRESULT LongLongToLongPtr( [in] LONGLONG llOperand, [out] LONG_PTR *plResult );",
            "name": "LongLongToLongPtr"
        },
        {
            "signature": "HRESULT LongLongToShort( [in] LONGLONG llOperand, [out] SHORT *psResult );",
            "name": "LongLongToShort"
        },
        {
            "signature": "HRESULT LongLongToUChar( [in] LONGLONG llOperand, [out] UCHAR *pch );",
            "name": "LongLongToUChar"
        },
        {
            "signature": "HRESULT LongLongToUInt( [in] LONGLONG llOperand, [out] UINT *puResult );",
            "name": "LongLongToUInt"
        },
        {
            "signature": "HRESULT LongLongToUInt8( [in] LONGLONG llOperand, [out] UINT8 *pu8Result );",
            "name": "LongLongToUInt8"
        },
        {
            "signature": "HRESULT LongLongToULong( [in] LONGLONG llOperand, [out] ULONG *pulResult );",
            "name": "LongLongToULong"
        },
        {
            "signature": "HRESULT LongLongToULongLong( [in] LONGLONG llOperand, [out] ULONGLONG *pullResult );",
            "name": "LongLongToULongLong"
        },
        {
            "signature": "HRESULT LongLongToUShort( [in] LONGLONG llOperand, [out] USHORT *pusResult );",
            "name": "LongLongToUShort"
        },
        {
            "signature": "HRESULT LongMult( [in] LONG lMultiplicand, [in] LONG lMultiplier, [out] LONG *plResult );",
            "name": "LongMult"
        },
        {
            "signature": "HRESULT LongPtrAdd( [in] LONG_PTR lAugend, [in] LONG_PTR lAddend, [out] LONG_PTR *plResult );",
            "name": "LongPtrAdd"
        },
        {
            "signature": "HRESULT LongPtrMult( [in] LONG_PTR lMultiplicand, [in] LONG_PTR lMultiplier, [out] LONG_PTR *plResult );",
            "name": "LongPtrMult"
        },
        {
            "signature": "HRESULT LongPtrSub( [in] LONG_PTR lMinuend, [in] LONG_PTR lSubtrahend, [out] LONG_PTR *plResult );",
            "name": "LongPtrSub"
        },
        {
            "signature": "HRESULT LongPtrToChar( [in] LONG_PTR lOperand, [out] CHAR *pch );",
            "name": "LongPtrToChar"
        },
        {
            "signature": "HRESULT LongPtrToInt( [in] LONG_PTR lOperand, [out] INT *piResult );",
            "name": "LongPtrToInt"
        },
        {
            "signature": "HRESULT LongPtrToInt8( [in] LONG_PTR lOperand, [out] INT8 *pi8Result );",
            "name": "LongPtrToInt8"
        },
        {
            "signature": "HRESULT LongPtrToIntPtr( [in] LONG_PTR lOperand, [out] INT_PTR *piResult );",
            "name": "LongPtrToIntPtr"
        },
        {
            "signature": "HRESULT LongPtrToLong( [in] LONG_PTR lOperand, [out] LONG *plResult );",
            "name": "LongPtrToLong"
        },
        {
            "signature": "HRESULT LongPtrToShort( [in] LONG_PTR lOperand, [out] SHORT *psResult );",
            "name": "LongPtrToShort"
        },
        {
            "signature": "HRESULT LongPtrToUChar( [in] LONG_PTR lOperand, [out] UCHAR *pch );",
            "name": "LongPtrToUChar"
        },
        {
            "signature": "HRESULT LongPtrToUInt( [in] LONG_PTR lOperand, [out] UINT *puResult );",
            "name": "LongPtrToUInt"
        },
        {
            "signature": "HRESULT LongPtrToUInt8( [in] LONG_PTR lOperand, [out] UINT8 *pui8Result );",
            "name": "LongPtrToUInt8"
        },
        {
            "signature": "HRESULT LongPtrToUIntPtr( [in] LONG_PTR lOperand, [out] UINT_PTR *puResult );",
            "name": "LongPtrToUIntPtr"
        },
        {
            "signature": "HRESULT LongPtrToULong( [in] LONG_PTR lOperand, [out] ULONG *pulResult );",
            "name": "LongPtrToULong"
        },
        {
            "signature": "HRESULT LongPtrToULongLong( [in] LONG_PTR lOperand, [out] ULONGLONG *pullResult );",
            "name": "LongPtrToULongLong"
        },
        {
            "signature": "HRESULT LongPtrToULongPtr( [in] LONG_PTR lOperand, [out] ULONG_PTR *pulResult );",
            "name": "LongPtrToULongPtr"
        },
        {
            "signature": "HRESULT LongPtrToUShort( [in] LONG_PTR lOperand, [out] USHORT *pusResult );",
            "name": "LongPtrToUShort"
        },
        {
            "signature": "HRESULT LongSub( [in] LONG lMinuend, [in] LONG lSubtrahend, [out] LONG *plResult );",
            "name": "LongSub"
        },
        {
            "signature": "HRESULT LongToChar( [in] LONG lOperand, [out] CHAR *pch );",
            "name": "LongToChar"
        },
        {
            "signature": "HRESULT LongToInt( [in] LONG lOperand, [out] INT *piResult );",
            "name": "LongToInt"
        },
        {
            "signature": "HRESULT LongToInt8( [in] LONG lOperand, [out] INT8 *pi8Result );",
            "name": "LongToInt8"
        },
        {
            "signature": "HRESULT LongToIntPtr( [in] LONG lOperand, [out] INT_PTR *piResult );",
            "name": "LongToIntPtr"
        },
        {
            "signature": "HRESULT LongToShort( [in] LONG lOperand, [out] SHORT *psResult );",
            "name": "LongToShort"
        },
        {
            "signature": "HRESULT LongToUChar( [in] LONG lOperand, [out] UCHAR *pch );",
            "name": "LongToUChar"
        },
        {
            "signature": "HRESULT LongToUInt( [in] LONG lOperand, [out] UINT *puResult );",
            "name": "LongToUInt"
        },
        {
            "signature": "HRESULT LongToUInt8( [in] LONG lOperand, [out] UINT8 *pui8Result );",
            "name": "LongToUInt8"
        },
        {
            "signature": "HRESULT LongToUIntPtr( [in] LONG lOperand, [out] UINT_PTR *puResult );",
            "name": "LongToUIntPtr"
        },
        {
            "signature": "HRESULT LongToULong( [in] LONG lOperand, [out] ULONG *pulResult );",
            "name": "LongToULong"
        },
        {
            "signature": "HRESULT LongToULongLong( [in] LONG lOperand, [out] ULONGLONG *pullResult );",
            "name": "LongToULongLong"
        },
        {
            "signature": "HRESULT LongToULongPtr( [in] LONG lOperand, [out] ULONG_PTR *pulResult );",
            "name": "LongToULongPtr"
        },
        {
            "signature": "HRESULT LongToUShort( [in] LONG lOperand, [out] USHORT *pusResult );",
            "name": "LongToUShort"
        },
        {
            "signature": "HRESULT PtrdiffTAdd( [in] ptrdiff_t Augend, [in] ptrdiff_t Addend, [out] ptrdiff_t *pResult );",
            "name": "PtrdiffTAdd"
        },
        {
            "signature": "HRESULT PtrdiffTMult( [in] ptrdiff_t Multiplicand, [in] ptrdiff_t Multiplier, [out] ptrdiff_t *pResult );",
            "name": "PtrdiffTMult"
        },
        {
            "signature": "HRESULT PtrdiffTSub( [in] ptrdiff_t Minuend, [in] ptrdiff_t Subtrahend, [out] ptrdiff_t *pResult );",
            "name": "PtrdiffTSub"
        },
        {
            "signature": "HRESULT ShortAdd( [in] SHORT sAugend, [in] SHORT sAddend, [out] SHORT *psResult );",
            "name": "ShortAdd"
        },
        {
            "signature": "HRESULT ShortMult( [in] SHORT sMultiplicand, [in] SHORT sMultiplier, [out] SHORT *psResult );",
            "name": "ShortMult"
        },
        {
            "signature": "HRESULT ShortSub( [in] SHORT sMinuend, [in] SHORT sSubtrahend, [out] SHORT *psResult );",
            "name": "ShortSub"
        },
        {
            "signature": "HRESULT ShortToChar( [in] SHORT sOperand, [out] CHAR *pch );",
            "name": "ShortToChar"
        },
        {
            "signature": "HRESULT ShortToDWordPtr( [in] SHORT sOperand, [out] DWORD_PTR *pdwResult );",
            "name": "ShortToDWordPtr"
        },
        {
            "signature": "HRESULT ShortToInt8( [in] SHORT sOperand, [out] INT8 *pi8Result );",
            "name": "ShortToInt8"
        },
        {
            "signature": "HRESULT ShortToUChar( [in] SHORT sOperand, [out] UCHAR *pch );",
            "name": "ShortToUChar"
        },
        {
            "signature": "HRESULT ShortToUInt( [in] SHORT sOperand, [out] UINT *puResult );",
            "name": "ShortToUInt"
        },
        {
            "signature": "HRESULT ShortToUInt8( [in] SHORT sOperand, [out] UINT8 *pui8Result );",
            "name": "ShortToUInt8"
        },
        {
            "signature": "HRESULT ShortToUIntPtr( [in] SHORT sOperand, [out] UINT_PTR *puResult );",
            "name": "ShortToUIntPtr"
        },
        {
            "signature": "HRESULT ShortToULong( [in] SHORT sOperand, [out] ULONG *pulResult );",
            "name": "ShortToULong"
        },
        {
            "signature": "HRESULT ShortToULongLong( [in] SHORT sOperand, [out] ULONGLONG *pullResult );",
            "name": "ShortToULongLong"
        },
        {
            "signature": "HRESULT ShortToULongPtr( [in] SHORT sOperand, [out] ULONG_PTR *pulResult );",
            "name": "ShortToULongPtr"
        },
        {
            "signature": "HRESULT ShortToUShort( [in] SHORT sOperand, [out] USHORT *pusResult );",
            "name": "ShortToUShort"
        },
        {
            "signature": "HRESULT SizeTAdd( [in] size_t Augend, [in] size_t Addend, [out] size_t *pResult );",
            "name": "SizeTAdd"
        },
        {
            "signature": "HRESULT SizeTMult( [in] size_t Multiplicand, [in] size_t Multiplier, [out] size_t *pResult );",
            "name": "SizeTMult"
        },
        {
            "signature": "HRESULT SizeTSub( [in] size_t Minuend, [in] size_t Subtrahend, [out] size_t *pResult );",
            "name": "SizeTSub"
        },
        {
            "signature": "HRESULT SSIZETAdd( [in] SSIZE_T Augend, [in] SSIZE_T Addend, [out] SSIZE_T *pResult );",
            "name": "SSIZETAdd"
        },
        {
            "signature": "HRESULT SSIZETMult( [in] SSIZE_T Multiplicand, [in] SSIZE_T Multiplier, [out] SSIZE_T *pResult );",
            "name": "SSIZETMult"
        },
        {
            "signature": "HRESULT SSIZETSub( [in] SSIZE_T Minuend, [in] SSIZE_T Subtrahend, [out] SSIZE_T *pResult );",
            "name": "SSIZETSub"
        },
        {
            "signature": "HRESULT UInt8Add( [in] UINT8 u8Augend, [in] UINT8 u8Addend, [out] UINT8 *pu8Result );",
            "name": "UInt8Add"
        },
        {
            "signature": "HRESULT UInt8Mult( [in] UINT8 u8Multiplicand, [in] UINT8 u8Multiplier, [out] UINT8 *pu8Result );",
            "name": "UInt8Mult"
        },
        {
            "signature": "HRESULT UInt8Sub( [in] UINT8 u8Minuend, [in] UINT8 u8Subtrahend, [out] UINT8 *pu8Result );",
            "name": "UInt8Sub"
        },
        {
            "signature": "HRESULT UInt8ToChar( [in] UINT8 u8Operand, [out] CHAR *pch );",
            "name": "UInt8ToChar"
        },
        {
            "signature": "HRESULT UInt8ToInt8( [in] UINT8 u8Operand, [out] INT8 *pi8Result );",
            "name": "UInt8ToInt8"
        },
        {
            "signature": "HRESULT UIntAdd( [in] UINT uAugend, [in] UINT uAddend, [out] UINT *puResult );",
            "name": "UIntAdd"
        },
        {
            "signature": "HRESULT UIntMult( [in] UINT uMultiplicand, [in] UINT uMultiplier, [out] UINT *puResult );",
            "name": "UIntMult"
        },
        {
            "signature": "HRESULT UIntPtrAdd( [in] UINT_PTR uAugend, [in] UINT_PTR uAddend, [out] UINT_PTR *puResult );",
            "name": "UIntPtrAdd"
        },
        {
            "signature": "HRESULT UIntPtrMult( [in] UINT_PTR uMultiplicand, [in] UINT_PTR uMultiplier, [out] UINT_PTR *puResult );",
            "name": "UIntPtrMult"
        },
        {
            "signature": "HRESULT UIntPtrSub( [in] UINT_PTR uMinuend, [in] UINT_PTR uSubtrahend, [out] UINT_PTR *puResult );",
            "name": "UIntPtrSub"
        },
        {
            "signature": "HRESULT UIntPtrToChar( [in] UINT_PTR uOperand, [out] CHAR *pch );",
            "name": "UIntPtrToChar"
        },
        {
            "signature": "HRESULT UIntPtrToInt( [in] UINT_PTR uOperand, [out] INT *piResult );",
            "name": "UIntPtrToInt"
        },
        {
            "signature": "HRESULT UIntPtrToInt16( [in] UINT_PTR uOperand, [out] INT16 *pi16Result );",
            "name": "UIntPtrToInt16"
        },
        {
            "signature": "HRESULT UIntPtrToInt8( [in] UINT_PTR uOperand, [out] INT8 *pi8Result );",
            "name": "UIntPtrToInt8"
        },
        {
            "signature": "HRESULT UIntPtrToIntPtr( [in] UINT_PTR uOperand, [out] INT_PTR *piResult );",
            "name": "UIntPtrToIntPtr"
        },
        {
            "signature": "HRESULT UIntPtrToLong( [in] UINT_PTR uOperand, [out] LONG *plResult );",
            "name": "UIntPtrToLong"
        },
        {
            "signature": "HRESULT UIntPtrToLongLong( [in] UINT_PTR uOperand, [out] LONGLONG *pllResult );",
            "name": "UIntPtrToLongLong"
        },
        {
            "signature": "HRESULT UIntPtrToLongPtr( [in] UINT_PTR uOperand, [out] LONG_PTR *plResult );",
            "name": "UIntPtrToLongPtr"
        },
        {
            "signature": "HRESULT UIntPtrToShort( [in] UINT_PTR uOperand, [out] SHORT *psResult );",
            "name": "UIntPtrToShort"
        },
        {
            "signature": "HRESULT UIntPtrToUChar( [in] UINT_PTR uOperand, [out] UCHAR *pch );",
            "name": "UIntPtrToUChar"
        },
        {
            "signature": "HRESULT UIntPtrToUInt( [in] UINT_PTR uOperand, [out] UINT *puResult );",
            "name": "UIntPtrToUInt"
        },
        {
            "signature": "HRESULT UIntPtrToUInt16( [in] UINT_PTR uOperand, [out] UINT16 *pu16Result );",
            "name": "UIntPtrToUInt16"
        },
        {
            "signature": "HRESULT UIntPtrToUInt8( [in] UINT_PTR uOperand, [out] UINT8 *pu8Result );",
            "name": "UIntPtrToUInt8"
        },
        {
            "signature": "HRESULT UIntPtrToULong( [in] UINT_PTR uOperand, [out] ULONG *pulResult );",
            "name": "UIntPtrToULong"
        },
        {
            "signature": "HRESULT UIntPtrToUShort( [in] UINT_PTR uOperand, [out] USHORT *pusResult );",
            "name": "UIntPtrToUShort"
        },
        {
            "signature": "HRESULT UIntSub( [in] UINT uMinuend, [in] UINT uSubtrahend, [out] UINT *puResult );",
            "name": "UIntSub"
        },
        {
            "signature": "HRESULT UIntToChar( [in] UINT uOperand, [out] CHAR *pch );",
            "name": "UIntToChar"
        },
        {
            "signature": "HRESULT UIntToInt( [in] UINT uOperand, [out] INT *piResult );",
            "name": "UIntToInt"
        },
        {
            "signature": "HRESULT UIntToInt8( [in] UINT uOperand, [out] INT8 *pi8Result );",
            "name": "UIntToInt8"
        },
        {
            "signature": "HRESULT UIntToIntPtr( [in] UINT uOperand, [out] INT_PTR *piResult );",
            "name": "UIntToIntPtr"
        },
        {
            "signature": "HRESULT UIntToLong( [in] UINT uOperand, [out] LONG *plResult );",
            "name": "UIntToLong"
        },
        {
            "signature": "HRESULT UIntToLongPtr( [in] UINT uOperand, [out] LONG_PTR *plResult );",
            "name": "UIntToLongPtr"
        },
        {
            "signature": "HRESULT UIntToShort( [in] UINT uOperand, [out] SHORT *psResult );",
            "name": "UIntToShort"
        },
        {
            "signature": "HRESULT UIntToUChar( [in] UINT uOperand, [out] UCHAR *pch );",
            "name": "UIntToUChar"
        },
        {
            "signature": "HRESULT UIntToUInt8( [in] UINT uOperand, [out] UINT8 *pui8Result );",
            "name": "UIntToUInt8"
        },
        {
            "signature": "HRESULT UIntToUShort( [in] UINT uOperand, [out] USHORT *pusResult );",
            "name": "UIntToUShort"
        },
        {
            "signature": "HRESULT ULongAdd( [in] ULONG ulAugend, [in] ULONG ulAddend, [out] ULONG *pulResult );",
            "name": "ULongAdd"
        },
        {
            "signature": "HRESULT ULongLongAdd( [in] ULONGLONG ullAugend, [in] ULONGLONG ullAddend, [out] ULONGLONG *pullResult );",
            "name": "ULongLongAdd"
        },
        {
            "signature": "HRESULT ULongLongMult( [in] ULONGLONG ullMultiplicand, [in] ULONGLONG ullMultiplier, [out] ULONGLONG *pullResult );",
            "name": "ULongLongMult"
        },
        {
            "signature": "HRESULT ULongLongSub( [in] ULONGLONG ullMinuend, [in] ULONGLONG ullSubtrahend, [out] ULONGLONG *pullResult );",
            "name": "ULongLongSub"
        },
        {
            "signature": "HRESULT ULongLongToChar( [in] ULONGLONG ullOperand, [out] CHAR *pch );",
            "name": "ULongLongToChar"
        },
        {
            "signature": "HRESULT ULongLongToInt( [in] ULONGLONG ullOperand, [out] INT *piResult );",
            "name": "ULongLongToInt"
        },
        {
            "signature": "HRESULT ULongLongToInt8( [in] ULONGLONG ullOperand, [out] INT8 *pi8Result );",
            "name": "ULongLongToInt8"
        },
        {
            "signature": "HRESULT ULongLongToLong( [in] ULONGLONG ullOperand, [out] LONG *plResult );",
            "name": "ULongLongToLong"
        },
        {
            "signature": "HRESULT ULongLongToLongLong( [in] ULONGLONG ullOperand, [out] LONGLONG *pllResult );",
            "name": "ULongLongToLongLong"
        },
        {
            "signature": "HRESULT ULongLongToLongPtr( [in] ULONGLONG ullOperand, [out] LONG_PTR *plResult );",
            "name": "ULongLongToLongPtr"
        },
        {
            "signature": "HRESULT ULongLongToShort( [in] ULONGLONG ullOperand, [out] SHORT *psResult );",
            "name": "ULongLongToShort"
        },
        {
            "signature": "HRESULT ULongLongToUChar( [in] ULONGLONG ullOperand, [out] UCHAR *pch );",
            "name": "ULongLongToUChar"
        },
        {
            "signature": "HRESULT ULongLongToUInt( [in] ULONGLONG ullOperand, [out] UINT *puResult );",
            "name": "ULongLongToUInt"
        },
        {
            "signature": "HRESULT ULongLongToUInt8( [in] ULONGLONG ullOperand, [out] UINT8 *pu8Result );",
            "name": "ULongLongToUInt8"
        },
        {
            "signature": "HRESULT ULongLongToUIntPtr( [in] ULONGLONG ullOperand, [out] UINT_PTR *puResult );",
            "name": "ULongLongToUIntPtr"
        },
        {
            "signature": "HRESULT ULongLongToULong( [in] ULONGLONG ullOperand, [out] ULONG *pulResult );",
            "name": "ULongLongToULong"
        },
        {
            "signature": "HRESULT ULongLongToULongPtr( [in] ULONGLONG ullOperand, [out] ULONG_PTR *pulResult );",
            "name": "ULongLongToULongPtr"
        },
        {
            "signature": "HRESULT ULongLongToUShort( [in] ULONGLONG ullOperand, [out] USHORT *pusResult );",
            "name": "ULongLongToUShort"
        },
        {
            "signature": "HRESULT ULongMult( [in] ULONG ulMultiplicand, [in] ULONG ulMultiplier, [out] ULONG *pulResult );",
            "name": "ULongMult"
        },
        {
            "signature": "HRESULT ULongPtrAdd( [in] ULONG_PTR ulAugend, [in] ULONG_PTR ulAddend, [out] ULONG_PTR *pulResult );",
            "name": "ULongPtrAdd"
        },
        {
            "signature": "HRESULT ULongPtrMult( [in] ULONG_PTR ulMultiplicand, [in] ULONG_PTR ulMultiplier, [out] ULONG_PTR *pulResult );",
            "name": "ULongPtrMult"
        },
        {
            "signature": "HRESULT ULongPtrSub( [in] ULONG_PTR ulMinuend, [in] ULONG_PTR ulSubtrahend, [out] ULONG_PTR *pulResult );",
            "name": "ULongPtrSub"
        },
        {
            "signature": "HRESULT ULongPtrToChar( [in] ULONG_PTR ulOperand, [out] CHAR *pch );",
            "name": "ULongPtrToChar"
        },
        {
            "signature": "HRESULT ULongPtrToInt( [in] ULONG_PTR ulOperand, [out] INT *piResult );",
            "name": "ULongPtrToInt"
        },
        {
            "signature": "HRESULT ULongPtrToInt8( [in] ULONG_PTR ulOperand, [out] INT8 *pi8Result );",
            "name": "ULongPtrToInt8"
        },
        {
            "signature": "HRESULT ULongPtrToIntPtr( [in] ULONG_PTR ulOperand, [out] INT_PTR *piResult );",
            "name": "ULongPtrToIntPtr"
        },
        {
            "signature": "HRESULT ULongPtrToLong( [in] ULONG_PTR ulOperand, [out] LONG *plResult );",
            "name": "ULongPtrToLong"
        },
        {
            "signature": "HRESULT ULongPtrToLongLong( [in] ULONG_PTR ulOperand, [out] LONGLONG *pllResult );",
            "name": "ULongPtrToLongLong"
        },
        {
            "signature": "HRESULT ULongPtrToLongPtr( [in] ULONG_PTR ulOperand, [out] LONG_PTR *plResult );",
            "name": "ULongPtrToLongPtr"
        },
        {
            "signature": "HRESULT ULongPtrToShort( [in] ULONG_PTR ulOperand, [out] SHORT *psResult );",
            "name": "ULongPtrToShort"
        },
        {
            "signature": "HRESULT ULongPtrToUChar( [in] ULONG_PTR ulOperand, [out] UCHAR *pch );",
            "name": "ULongPtrToUChar"
        },
        {
            "signature": "HRESULT ULongPtrToUInt( [in] ULONG_PTR ulOperand, [out] UINT *puResult );",
            "name": "ULongPtrToUInt"
        },
        {
            "signature": "HRESULT ULongPtrToUInt8( [in] ULONG_PTR ulOperand, [out] UINT8 *pui8Result );",
            "name": "ULongPtrToUInt8"
        },
        {
            "signature": "HRESULT ULongPtrToUIntPtr( [in] ULONG_PTR ulOperand, [out] UINT_PTR *puResult );",
            "name": "ULongPtrToUIntPtr"
        },
        {
            "signature": "HRESULT ULongPtrToULong( [in] ULONG_PTR ulOperand, [out] ULONG *pulResult );",
            "name": "ULongPtrToULong"
        },
        {
            "signature": "HRESULT ULongPtrToUShort( [in] ULONG_PTR ulOperand, [out] USHORT *pusResult );",
            "name": "ULongPtrToUShort"
        },
        {
            "signature": "HRESULT ULongSub( [in] ULONG ulMinuend, [in] ULONG ulSubtrahend, [out] ULONG *pulResult );",
            "name": "ULongSub"
        },
        {
            "signature": "HRESULT ULongToChar( [in] ULONG ulOperand, [out] CHAR *pch );",
            "name": "ULongToChar"
        },
        {
            "signature": "HRESULT ULongToInt( [in] ULONG ulOperand, [out] INT *piResult );",
            "name": "ULongToInt"
        },
        {
            "signature": "HRESULT ULongToInt8( [in] ULONG ulOperand, [out] INT8 *pi8Result );",
            "name": "ULongToInt8"
        },
        {
            "signature": "HRESULT ULongToIntPtr( [in] ULONG ulOperand, [out] INT_PTR *piResult );",
            "name": "ULongToIntPtr"
        },
        {
            "signature": "HRESULT ULongToLong( [in] ULONG ulOperand, [out] LONG *plResult );",
            "name": "ULongToLong"
        },
        {
            "signature": "HRESULT ULongToLongPtr( [in] ULONG ulOperand, [out] LONG_PTR *plResult );",
            "name": "ULongToLongPtr"
        },
        {
            "signature": "HRESULT ULongToShort( [in] ULONG ulOperand, [out] SHORT *psResult );",
            "name": "ULongToShort"
        },
        {
            "signature": "HRESULT ULongToUChar( [in] ULONG ulOperand, [out] UCHAR *pch );",
            "name": "ULongToUChar"
        },
        {
            "signature": "HRESULT ULongToUInt( [in] ULONG ulOperand, [out] UINT *puResult );",
            "name": "ULongToUInt"
        },
        {
            "signature": "HRESULT ULongToUInt8( [in] ULONG ulOperand, [out] UINT8 *pui8Result );",
            "name": "ULongToUInt8"
        },
        {
            "signature": "HRESULT ULongToUIntPtr( [in] ULONG ulOperand, [out] UINT_PTR *puiResult );",
            "name": "ULongToUIntPtr"
        },
        {
            "signature": "HRESULT ULongToUShort( [in] ULONG ulOperand, [out] USHORT *pusResult );",
            "name": "ULongToUShort"
        },
        {
            "signature": "HRESULT UShortAdd( [in] USHORT usAugend, [in] USHORT usAddend, [out] USHORT *pusResult );",
            "name": "UShortAdd"
        },
        {
            "signature": "HRESULT UShortMult( [in] USHORT usMultiplicand, [in] USHORT usMultiplier, [out] USHORT *pusResult );",
            "name": "UShortMult"
        },
        {
            "signature": "HRESULT UShortSub( [in] USHORT usMinuend, [in] USHORT usSubtrahend, [out] USHORT *pusResult );",
            "name": "UShortSub"
        },
        {
            "signature": "HRESULT UShortToChar( [in] USHORT usOperand, [out] CHAR *pch );",
            "name": "UShortToChar"
        },
        {
            "signature": "HRESULT UShortToInt8( [in] USHORT usOperand, [out] INT8 *pi8Result );",
            "name": "UShortToInt8"
        },
        {
            "signature": "HRESULT UShortToShort( [in] USHORT usOperand, [out] SHORT *psResult );",
            "name": "UShortToShort"
        },
        {
            "signature": "HRESULT UShortToUChar( [in] USHORT usOperand, [out] UCHAR *pch );",
            "name": "UShortToUChar"
        },
        {
            "signature": "HRESULT UShortToUInt8( [in] USHORT usOperand, [out] UINT8 *pui8Result );",
            "name": "UShortToUInt8"
        }
    ],
    "Intshcut.h": [
        {
            "signature": "INTSHCUTAPI BOOL InetIsOffline( DWORD dwFlags );",
            "name": "InetIsOffline"
        },
        {
            "signature": "INTSHCUTAPI HRESULT MIMEAssociationDialogA( HWND hwndParent, DWORD dwInFlags, PCSTR pcszFile, PCSTR pcszMIMEContentType, [out] PSTR pszAppBuf, UINT ucAppBufLen );",
            "name": "MIMEAssociationDialogA"
        },
        {
            "signature": "INTSHCUTAPI HRESULT MIMEAssociationDialogW( HWND hwndParent, DWORD dwInFlags, PCWSTR pcszFile, PCWSTR pcszMIMEContentType, [out] PWSTR pszAppBuf, UINT ucAppBufLen );",
            "name": "MIMEAssociationDialogW"
        },
        {
            "signature": "INTSHCUTAPI HRESULT TranslateURLA( PCSTR pcszURL, DWORD dwInFlags, [out] PSTR *ppszTranslatedURL );",
            "name": "TranslateURLA"
        },
        {
            "signature": "INTSHCUTAPI HRESULT TranslateURLW( PCWSTR pcszURL, DWORD dwInFlags, [out] PWSTR *ppszTranslatedURL );",
            "name": "TranslateURLW"
        },
        {
            "signature": "INTSHCUTAPI HRESULT URLAssociationDialogA( HWND hwndParent, DWORD dwInFlags, PCSTR pcszFile, PCSTR pcszURL, [out] PSTR pszAppBuf, UINT ucAppBufLen );",
            "name": "URLAssociationDialogA"
        },
        {
            "signature": "INTSHCUTAPI HRESULT URLAssociationDialogW( HWND hwndParent, DWORD dwInFlags, PCWSTR pcszFile, PCWSTR pcszURL, [out] PWSTR pszAppBuf, UINT ucAppBufLen );",
            "name": "URLAssociationDialogW"
        }
    ],
    "Ioapiset.h": [
        {
            "signature": "BOOL CancelIo( [in] HANDLE hFile );",
            "name": "CancelIo"
        },
        {
            "signature": "BOOL CancelIoEx( [in] HANDLE hFile, [in, optional] LPOVERLAPPED lpOverlapped );",
            "name": "CancelIoEx"
        },
        {
            "signature": "BOOL CancelSynchronousIo( [in] HANDLE hThread );",
            "name": "CancelSynchronousIo"
        },
        {
            "signature": "HANDLE CreateIoCompletionPort( [in] HANDLE FileHandle, [in, optional] HANDLE ExistingCompletionPort, [in] ULONG_PTR CompletionKey, [in] DWORD NumberOfConcurrentThreads );",
            "name": "CreateIoCompletionPort"
        },
        {
            "signature": "BOOL DeviceIoControl( [in] HANDLE hDevice, [in] DWORD dwIoControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out, optional] LPDWORD lpBytesReturned, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "DeviceIoControl"
        },
        {
            "signature": "BOOL GetOverlappedResult( [in] HANDLE hFile, [in] LPOVERLAPPED lpOverlapped, [out] LPDWORD lpNumberOfBytesTransferred, [in] BOOL bWait );",
            "name": "GetOverlappedResult"
        },
        {
            "signature": "BOOL GetOverlappedResultEx( [in] HANDLE hFile, [in] LPOVERLAPPED lpOverlapped, [out] LPDWORD lpNumberOfBytesTransferred, [in] DWORD dwMilliseconds, [in] BOOL bAlertable );",
            "name": "GetOverlappedResultEx"
        },
        {
            "signature": "BOOL GetQueuedCompletionStatus( [in] HANDLE CompletionPort, LPDWORD lpNumberOfBytesTransferred, [out] PULONG_PTR lpCompletionKey, [out] LPOVERLAPPED *lpOverlapped, [in] DWORD dwMilliseconds );",
            "name": "GetQueuedCompletionStatus"
        },
        {
            "signature": "BOOL GetQueuedCompletionStatusEx( [in] HANDLE CompletionPort, [out] LPOVERLAPPED_ENTRY lpCompletionPortEntries, [in] ULONG ulCount, [out] PULONG ulNumEntriesRemoved, [in] DWORD dwMilliseconds, [in] BOOL fAlertable );",
            "name": "GetQueuedCompletionStatusEx"
        },
        {
            "signature": "BOOL PostQueuedCompletionStatus( [in] HANDLE CompletionPort, [in] DWORD dwNumberOfBytesTransferred, [in] ULONG_PTR dwCompletionKey, [in, optional] LPOVERLAPPED lpOverlapped );",
            "name": "PostQueuedCompletionStatus"
        }
    ],
    "Ioringapi.h": [
        {
            "signature": "HRESULT BuildIoRingCancelRequest( HIORING ioRing, IORING_HANDLE_REF file, UINT_PTR opToCancel, UINT_PTR userData );",
            "name": "BuildIoRingCancelRequest"
        },
        {
            "signature": "HRESULT BuildIoRingReadFile( HIORING ioRing, IORING_HANDLE_REF fileRef, IORING_BUFFER_REF dataRef, UINT32 numberOfBytesToRead, UINT64 fileOffset, UINT_PTR userData, IORING_SQE_FLAGS sqeFlags );",
            "name": "BuildIoRingReadFile"
        },
        {
            "signature": "HRESULT BuildIoRingRegisterBuffers( HIORING ioRing, UINT32 count, IORING_BUFFER_INFO const [] buffers, UINT_PTR userData );",
            "name": "BuildIoRingRegisterBuffers"
        },
        {
            "signature": "HRESULT BuildIoRingRegisterFileHandles( HIORING ioRing, UINT32 count, HANDLE const [] handles, UINT_PTR userData );",
            "name": "BuildIoRingRegisterFileHandles"
        },
        {
            "signature": "HRESULT CloseIoRing( HIORING ioRing );",
            "name": "CloseIoRing"
        },
        {
            "signature": "HRESULT CreateIoRing( IORING_VERSION ioringVersion, IORING_CREATE_FLAGS flags, UINT32 submissionQueueSize, UINT32 completionQueueSize, HIORING *h );",
            "name": "CreateIoRing"
        },
        {
            "signature": "HRESULT GetIoRingInfo( HIORING ioRing, IORING_INFO *info );",
            "name": "GetIoRingInfo"
        },
        {
            "signature": "BOOL IsIoRingOpSupported( HIORING ioRing, IORING_OP_CODE op );",
            "name": "IsIoRingOpSupported"
        },
        {
            "signature": "HRESULT PopIoRingCompletion( HIORING ioRing, IORING_CQE *cqe );",
            "name": "PopIoRingCompletion"
        },
        {
            "signature": "HRESULT QueryIoRingCapabilities( IORING_CAPABILITIES *capabilities );",
            "name": "QueryIoRingCapabilities"
        },
        {
            "signature": "HRESULT SetIoRingCompletionEvent( HIORING ioRing, HANDLE hEvent );",
            "name": "SetIoRingCompletionEvent"
        },
        {
            "signature": "HRESULT SubmitIoRing( HIORING ioRing, UINT32 waitOperations, UINT32 milliseconds, UINT32 *submittedEntries );",
            "name": "SubmitIoRing"
        }
    ],
    "Ip2string.h": [
        {
            "signature": "NTSYSAPI PSTR RtlEthernetAddressToStringA( [in] const DL_EUI48 *Addr, [out] PSTR S );",
            "name": "RtlEthernetAddressToStringA"
        },
        {
            "signature": "NTSYSAPI PWSTR RtlEthernetAddressToStringW( [in] const DL_EUI48 *Addr, [out] PWSTR S );",
            "name": "RtlEthernetAddressToStringW"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlEthernetStringToAddressA( [in] PCSTR S, [out] PCSTR *Terminator, [out] DL_EUI48 *Addr );",
            "name": "RtlEthernetStringToAddressA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlEthernetStringToAddressW( [in] PCWSTR S, [out] LPCWSTR *Terminator, [out] DL_EUI48 *Addr );",
            "name": "RtlEthernetStringToAddressW"
        },
        {
            "signature": "NTSYSAPI PSTR RtlIpv4AddressToStringA( [in] const in_addr *Addr, [out] PSTR S );",
            "name": "RtlIpv4AddressToStringA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4AddressToStringExA( [in] const in_addr *Address, [in] USHORT Port, [out] PSTR AddressString, [in, out] PULONG AddressStringLength );",
            "name": "RtlIpv4AddressToStringExA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4AddressToStringExW( [in] const in_addr *Address, [in] USHORT Port, [out] PWSTR AddressString, [in, out] PULONG AddressStringLength );",
            "name": "RtlIpv4AddressToStringExW"
        },
        {
            "signature": "NTSYSAPI PWSTR RtlIpv4AddressToStringW( [in] const in_addr *Addr, [out] PWSTR S );",
            "name": "RtlIpv4AddressToStringW"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4StringToAddressA( [in] PCSTR S, [in] BOOLEAN Strict, [out] PCSTR *Terminator, [out] in_addr *Addr );",
            "name": "RtlIpv4StringToAddressA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4StringToAddressExA( [in] PCSTR AddressString, [in] BOOLEAN Strict, [out] in_addr *Address, [out] PUSHORT Port );",
            "name": "RtlIpv4StringToAddressExA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4StringToAddressExW( [in] PCWSTR AddressString, [in] BOOLEAN Strict, [out] in_addr *Address, [out] PUSHORT Port );",
            "name": "RtlIpv4StringToAddressExW"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv4StringToAddressW( [in] PCWSTR S, [in] BOOLEAN Strict, [out] LPCWSTR *Terminator, [out] in_addr *Addr );",
            "name": "RtlIpv4StringToAddressW"
        },
        {
            "signature": "NTSYSAPI PSTR RtlIpv6AddressToStringA( [in] const in6_addr *Addr, [out] PSTR S );",
            "name": "RtlIpv6AddressToStringA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6AddressToStringExA( [in] const in6_addr *Address, [in] ULONG ScopeId, [in] USHORT Port, [out] PSTR AddressString, [in, out] PULONG AddressStringLength );",
            "name": "RtlIpv6AddressToStringExA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6AddressToStringExW( [in] const in6_addr *Address, [in] ULONG ScopeId, [in] USHORT Port, [out] PWSTR AddressString, [in, out] PULONG AddressStringLength );",
            "name": "RtlIpv6AddressToStringExW"
        },
        {
            "signature": "NTSYSAPI PWSTR RtlIpv6AddressToStringW( [in] const in6_addr *Addr, [out] PWSTR S );",
            "name": "RtlIpv6AddressToStringW"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6StringToAddressA( [in] PCSTR S, [out] PCSTR *Terminator, [out] in6_addr *Addr );",
            "name": "RtlIpv6StringToAddressA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6StringToAddressExA( [in] PCSTR AddressString, [out] in6_addr *Address, [out] PULONG ScopeId, [out] PUSHORT Port );",
            "name": "RtlIpv6StringToAddressExA"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6StringToAddressExW( [in] PCWSTR AddressString, [out] in6_addr *Address, [out] PULONG ScopeId, [out] PUSHORT Port );",
            "name": "RtlIpv6StringToAddressExW"
        },
        {
            "signature": "NTSYSAPI NTSTATUS RtlIpv6StringToAddressW( [in] PCWSTR S, [out] PCWSTR *Terminator, [out] in6_addr *Addr );",
            "name": "RtlIpv6StringToAddressW"
        }
    ],
    "Ipexport.h": [],
    "Iphlpapi.h": [
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD AddIPAddress( [in] IPAddr Address, [in] IPMask IpMask, [in] DWORD IfIndex, [out] PULONG NTEContext, [out] PULONG NTEInstance );",
            "name": "AddIPAddress"
        },
        {
            "signature": "DWORD AllocateAndGetTcpExTableFromStack( [out] PVOID *ppTcpTable, [in] BOOL bOrder, [in] HANDLE hHeap, [in] DWORD dwFlags, [in] DWORD dwFamily );",
            "name": "AllocateAndGetTcpExTableFromStack"
        },
        {
            "signature": "DWORD AllocateAndGetUdpExTableFromStack( [out] PVOID *ppUdpTable, [in] BOOL bOrder, [in] HANDLE hHeap, [in] DWORD dwFlags, [in] DWORD dwFamily );",
            "name": "AllocateAndGetUdpExTableFromStack"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID CancelIfTimestampConfigChange( [in] HIFTIMESTAMPCHANGE NotificationHandle );",
            "name": "CancelIfTimestampConfigChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE BOOL CancelIPChangeNotify( [in] LPOVERLAPPED notifyOverlapped );",
            "name": "CancelIPChangeNotify"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD CaptureInterfaceHardwareCrossTimestamp( const NET_LUID *InterfaceLuid, PINTERFACE_HARDWARE_CROSSTIMESTAMP CrossTimestamp );",
            "name": "CaptureInterfaceHardwareCrossTimestamp"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD CreateIpForwardEntry( [in] PMIB_IPFORWARDROW pRoute );",
            "name": "CreateIpForwardEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD CreateIpNetEntry( [in] PMIB_IPNETROW pArpEntry );",
            "name": "CreateIpNetEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG CreatePersistentTcpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts, [out] PULONG64 Token );",
            "name": "CreatePersistentTcpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG CreatePersistentUdpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts, [out] PULONG64 Token );",
            "name": "CreatePersistentUdpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD CreateProxyArpEntry( [in] DWORD dwAddress, [in] DWORD dwMask, [in] DWORD dwIfIndex );",
            "name": "CreateProxyArpEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD DeleteIPAddress( [in] ULONG NTEContext );",
            "name": "DeleteIPAddress"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD DeleteIpForwardEntry( [in] PMIB_IPFORWARDROW pRoute );",
            "name": "DeleteIpForwardEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD DeleteIpNetEntry( [in] PMIB_IPNETROW pArpEntry );",
            "name": "DeleteIpNetEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG DeletePersistentTcpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts );",
            "name": "DeletePersistentTcpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG DeletePersistentUdpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts );",
            "name": "DeletePersistentUdpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD DeleteProxyArpEntry( [in] DWORD dwAddress, [in] DWORD dwMask, [in] DWORD dwIfIndex );",
            "name": "DeleteProxyArpEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD DisableMediaSense( HANDLE *pHandle, OVERLAPPED *pOverLapped );",
            "name": "DisableMediaSense"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD EnableRouter( HANDLE *pHandle, OVERLAPPED *pOverlapped );",
            "name": "EnableRouter"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD FlushIpNetTable( [in] DWORD dwIfIndex );",
            "name": "FlushIpNetTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetAdapterIndex( [in] LPWSTR AdapterName, [in, out] PULONG IfIndex );",
            "name": "GetAdapterIndex"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE PIP_ADAPTER_ORDER_MAP GetAdapterOrderMap();",
            "name": "GetAdapterOrderMap"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetAdaptersAddresses( [in] ULONG Family, [in] ULONG Flags, [in] PVOID Reserved, [in, out] PIP_ADAPTER_ADDRESSES AdapterAddresses, [in, out] PULONG SizePointer );",
            "name": "GetAdaptersAddresses"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetAdaptersInfo( [out] PIP_ADAPTER_INFO AdapterInfo, [in, out] PULONG SizePointer );",
            "name": "GetAdaptersInfo"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetBestInterface( [in] IPAddr dwDestAddr, [out] PDWORD pdwBestIfIndex );",
            "name": "GetBestInterface"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetBestInterfaceEx( [in] sockaddr *pDestAddr, [out] PDWORD pdwBestIfIndex );",
            "name": "GetBestInterfaceEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetBestRoute( [in] DWORD dwDestAddr, [in] DWORD dwSourceAddr, [out] PMIB_IPFORWARDROW pBestRoute );",
            "name": "GetBestRoute"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetExtendedTcpTable( [out] PVOID pTcpTable, [in, out] PDWORD pdwSize, [in] BOOL bOrder, [in] ULONG ulAf, [in] TCP_TABLE_CLASS TableClass, [in] ULONG Reserved );",
            "name": "GetExtendedTcpTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetExtendedUdpTable( [out] PVOID pUdpTable, [in, out] PDWORD pdwSize, [in] BOOL bOrder, [in] ULONG ulAf, [in] UDP_TABLE_CLASS TableClass, [in] ULONG Reserved );",
            "name": "GetExtendedUdpTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetFriendlyIfIndex( [in] DWORD IfIndex );",
            "name": "GetFriendlyIfIndex"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetIcmpStatistics( [out] PMIB_ICMP Statistics );",
            "name": "GetIcmpStatistics"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetIcmpStatisticsEx( [out] PMIB_ICMP_EX Statistics, [in] ULONG Family );",
            "name": "GetIcmpStatisticsEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetIfEntry( [in, out] PMIB_IFROW pIfRow );",
            "name": "GetIfEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetIfTable( [out] PMIB_IFTABLE pIfTable, [in, out] PULONG pdwSize, [in] BOOL bOrder );",
            "name": "GetIfTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetInterfaceActiveTimestampCapabilities( const NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites );",
            "name": "GetInterfaceActiveTimestampCapabilities"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetInterfaceCurrentTimestampCapabilities( [in] const NET_LUID *InterfaceLuid, [in, out] PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites );",
            "name": "GetInterfaceCurrentTimestampCapabilities"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetInterfaceHardwareTimestampCapabilities( [in] const NET_LUID *InterfaceLuid, [in, out] PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites );",
            "name": "GetInterfaceHardwareTimestampCapabilities"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetInterfaceInfo( [out] PIP_INTERFACE_INFO pIfTable, [in, out] PULONG dwOutBufLen );",
            "name": "GetInterfaceInfo"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetInterfaceSupportedTimestampCapabilities( const NET_LUID *InterfaceLuid, PINTERFACE_TIMESTAMP_CAPABILITIES TimestampCapabilites );",
            "name": "GetInterfaceSupportedTimestampCapabilities"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetIpAddrTable( [out] PMIB_IPADDRTABLE pIpAddrTable, [in, out] PULONG pdwSize, [in] BOOL bOrder );",
            "name": "GetIpAddrTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetIpErrorString( [in] IP_STATUS ErrorCode, [out] PWSTR Buffer, [in, out] PDWORD Size );",
            "name": "GetIpErrorString"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetIpForwardTable( [out] PMIB_IPFORWARDTABLE pIpForwardTable, [in, out] PULONG pdwSize, [in] BOOL bOrder );",
            "name": "GetIpForwardTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetIpNetTable( [out] PMIB_IPNETTABLE IpNetTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetIpNetTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetIpStatistics( [out] PMIB_IPSTATS Statistics );",
            "name": "GetIpStatistics"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetIpStatisticsEx( [out] PMIB_IPSTATS Statistics, [in] ULONG Family );",
            "name": "GetIpStatisticsEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetNetworkParams( [out] PFIXED_INFO pFixedInfo, [in] PULONG pOutBufLen );",
            "name": "GetNetworkParams"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetNumberOfInterfaces( [out] PDWORD pdwNumIf );",
            "name": "GetNumberOfInterfaces"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetOwnerModuleFromTcp6Entry( [in] PMIB_TCP6ROW_OWNER_MODULE pTcpEntry, [in] TCPIP_OWNER_MODULE_INFO_CLASS Class, [out] PVOID pBuffer, [in, out] PDWORD pdwSize );",
            "name": "GetOwnerModuleFromTcp6Entry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetOwnerModuleFromTcpEntry( [in] PMIB_TCPROW_OWNER_MODULE pTcpEntry, [in] TCPIP_OWNER_MODULE_INFO_CLASS Class, [out] PVOID pBuffer, [in, out] PDWORD pdwSize );",
            "name": "GetOwnerModuleFromTcpEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetOwnerModuleFromUdp6Entry( [in] PMIB_UDP6ROW_OWNER_MODULE pUdpEntry, [in] TCPIP_OWNER_MODULE_INFO_CLASS Class, [out] PVOID pBuffer, [in, out] PDWORD pdwSize );",
            "name": "GetOwnerModuleFromUdp6Entry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetOwnerModuleFromUdpEntry( [in] PMIB_UDPROW_OWNER_MODULE pUdpEntry, [in] TCPIP_OWNER_MODULE_INFO_CLASS Class, [out] PVOID pBuffer, [in, out] PDWORD pdwSize );",
            "name": "GetOwnerModuleFromUdpEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetPerAdapterInfo( [in] ULONG IfIndex, [out] PIP_PER_ADAPTER_INFO pPerAdapterInfo, [in] PULONG pOutBufLen );",
            "name": "GetPerAdapterInfo"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetPerTcp6ConnectionEStats( PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, [out] PUCHAR Rw, ULONG RwVersion, ULONG RwSize, [out] PUCHAR Ros, ULONG RosVersion, ULONG RosSize, [out] PUCHAR Rod, ULONG RodVersion, ULONG RodSize );",
            "name": "GetPerTcp6ConnectionEStats"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetPerTcpConnectionEStats( PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, [out] PUCHAR Rw, ULONG RwVersion, ULONG RwSize, [out] PUCHAR Ros, ULONG RosVersion, ULONG RosSize, [out] PUCHAR Rod, ULONG RodVersion, ULONG RodSize );",
            "name": "GetPerTcpConnectionEStats"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE BOOL GetRTTAndHopCount( [in] IPAddr DestIpAddress, [out] PULONG HopCount, [in] ULONG MaxHops, [out] PULONG RTT );",
            "name": "GetRTTAndHopCount"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcp6Table( [out] PMIB_TCP6TABLE TcpTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetTcp6Table"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcp6Table2( [out] PMIB_TCP6TABLE2 TcpTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetTcp6Table2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcpStatistics( [out] PMIB_TCPSTATS Statistics );",
            "name": "GetTcpStatistics"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcpStatisticsEx( [out] PMIB_TCPSTATS Statistics, [in] ULONG Family );",
            "name": "GetTcpStatisticsEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcpStatisticsEx2( [out] PMIB_TCPSTATS2 Statistics, [in] ULONG Family );",
            "name": "GetTcpStatisticsEx2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcpTable( [out] PMIB_TCPTABLE TcpTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetTcpTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetTcpTable2( [out] PMIB_TCPTABLE2 TcpTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetTcpTable2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetUdp6Table( [out] PMIB_UDP6TABLE Udp6Table, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetUdp6Table"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetUdpStatistics( [out] PMIB_UDPSTATS Stats );",
            "name": "GetUdpStatistics"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetUdpStatisticsEx( [out] PMIB_UDPSTATS Statistics, [in] ULONG Family );",
            "name": "GetUdpStatisticsEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetUdpStatisticsEx2( [out] PMIB_UDPSTATS2 Statistics, [in] ULONG Family );",
            "name": "GetUdpStatisticsEx2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG GetUdpTable( [out] PMIB_UDPTABLE UdpTable, [in, out] PULONG SizePointer, [in] BOOL Order );",
            "name": "GetUdpTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD GetUniDirectionalAdapterInfo( [out] PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo, [out] PULONG dwOutBufLen );",
            "name": "GetUniDirectionalAdapterInfo"
        },
        {
            "signature": "INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK InterfaceTimestampConfigChangeCallback; void InterfaceTimestampConfigChangeCallback( PVOID CallerContext ) {...}",
            "name": "INTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK callback"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IpReleaseAddress( [in] PIP_ADAPTER_INDEX_MAP AdapterInfo );",
            "name": "IpReleaseAddress"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD IpRenewAddress( [in] PIP_ADAPTER_INDEX_MAP AdapterInfo );",
            "name": "IpRenewAddress"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG LookupPersistentTcpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts, [out] PULONG64 Token );",
            "name": "LookupPersistentTcpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG LookupPersistentUdpPortReservation( [in] USHORT StartPort, [in] USHORT NumberOfPorts, [out] PULONG64 Token );",
            "name": "LookupPersistentUdpPortReservation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD NhpAllocateAndGetInterfaceInfoFromStack( IP_INTERFACE_NAME_INFO **ppTable, PDWORD pdwCount, BOOL bOrder, HANDLE hHeap, DWORD dwFlags );",
            "name": "NhpAllocateAndGetInterfaceInfoFromStack"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD NotifyAddrChange( [out] PHANDLE Handle, [in] LPOVERLAPPED overlapped );",
            "name": "NotifyAddrChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD NotifyIfTimestampConfigChange( [in, optional] PVOID CallerContext, [in] PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, [out] HIFTIMESTAMPCHANGE *NotificationHandle );",
            "name": "NotifyIfTimestampConfigChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD NotifyRouteChange( [out] PHANDLE Handle, [in] LPOVERLAPPED overlapped );",
            "name": "NotifyRouteChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD ParseNetworkString( [in] const WCHAR *NetworkString, [in] DWORD Types, [out, optional] PNET_ADDRESS_INFO AddressInfo, [out, optional] USHORT *PortNumber, [out, optional] BYTE *PrefixLength );",
            "name": "ParseNetworkString"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD RegisterInterfaceTimestampConfigChange( PINTERFACE_TIMESTAMP_CONFIG_CHANGE_CALLBACK Callback, PVOID CallerContext, HIFTIMESTAMPCHANGE *NotificationHandle );",
            "name": "RegisterInterfaceTimestampConfigChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG ResolveNeighbor( [in] SOCKADDR *NetworkAddress, [out] PVOID PhysicalAddress, [in, out] PULONG PhysicalAddressLength );",
            "name": "ResolveNeighbor"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD RestoreMediaSense( OVERLAPPED *pOverlapped, [optional] LPDWORD lpdwEnableCount );",
            "name": "RestoreMediaSense"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SendARP( [in] IPAddr DestIP, [in] IPAddr SrcIP, [out] PVOID pMacAddr, [in, out] PULONG PhyAddrLen );",
            "name": "SendARP"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetIfEntry( [in] PMIB_IFROW pIfRow );",
            "name": "SetIfEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetIpForwardEntry( [in] PMIB_IPFORWARDROW pRoute );",
            "name": "SetIpForwardEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetIpNetEntry( [in] PMIB_IPNETROW pArpEntry );",
            "name": "SetIpNetEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetIpStatistics( [in] PMIB_IPSTATS pIpStats );",
            "name": "SetIpStatistics"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG SetIpStatisticsEx( [in] PMIB_IPSTATS Statistics, ULONG Family );",
            "name": "SetIpStatisticsEx"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetIpTTL( [in] UINT nTTL );",
            "name": "SetIpTTL"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG SetPerTcp6ConnectionEStats( PMIB_TCP6ROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset );",
            "name": "SetPerTcp6ConnectionEStats"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE ULONG SetPerTcpConnectionEStats( PMIB_TCPROW Row, TCP_ESTATS_TYPE EstatsType, PUCHAR Rw, ULONG RwVersion, ULONG RwSize, ULONG Offset );",
            "name": "SetPerTcpConnectionEStats"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD SetTcpEntry( [in] PMIB_TCPROW pTcpRow );",
            "name": "SetTcpEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE DWORD UnenableRouter( OVERLAPPED *pOverlapped, [out, optional] LPDWORD lpdwEnableCount );",
            "name": "UnenableRouter"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID UnregisterInterfaceTimestampConfigChange( HIFTIMESTAMPCHANGE NotificationHandle );",
            "name": "UnregisterInterfaceTimestampConfigChange"
        }
    ],
    "Ipmib.h": [],
    "Iprtrmib.h": [],
    "Ipsectypes.h": [],
    "Iptypes.h": [],
    "Ipxrtdef.h": [],
    "Iscsidsc.h": [
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiConnectionA( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in] PVOID Reserved, [in, optional] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALA TargetPortal, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ULONG KeySize, [in, optional] PCHAR Key, [out, optional] PISCSI_UNIQUE_CONNECTION_ID ConnectionId );",
            "name": "AddIScsiConnectionA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiConnectionW( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in] PVOID Reserved, [in, optional] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALW TargetPortal, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ULONG KeySize, [in, optional] PCHAR Key, [out, optional] PISCSI_UNIQUE_CONNECTION_ID ConnectionId );",
            "name": "AddIScsiConnectionW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiSendTargetPortalA( [in, optional] PSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, PISCSI_TARGET_PORTALA Portal );",
            "name": "AddIScsiSendTargetPortalA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiSendTargetPortalW( [in, optional] PWSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, PISCSI_TARGET_PORTALW Portal );",
            "name": "AddIScsiSendTargetPortalW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiStaticTargetA( [in] PSTR TargetName, [in, optional] PSTR TargetAlias, [in] ISCSI_TARGET_FLAGS TargetFlags, [in] BOOLEAN Persist, [in, optional] PISCSI_TARGET_MAPPINGA Mappings, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] PISCSI_TARGET_PORTAL_GROUPA PortalGroup );",
            "name": "AddIScsiStaticTargetA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddIScsiStaticTargetW( [in] PWSTR TargetName, [in, optional] PWSTR TargetAlias, [in] ISCSI_TARGET_FLAGS TargetFlags, [in] BOOLEAN Persist, [in, optional] PISCSI_TARGET_MAPPINGW Mappings, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] PISCSI_TARGET_PORTAL_GROUPW PortalGroup );",
            "name": "AddIScsiStaticTargetW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddISNSServerA( [in] PSTR Address );",
            "name": "AddISNSServerA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddISNSServerW( [in] PWSTR Address );",
            "name": "AddISNSServerW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddPersistentIScsiDeviceA( [in] PSTR DevicePath );",
            "name": "AddPersistentIScsiDeviceA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddPersistentIScsiDeviceW( [in] PWSTR DevicePath );",
            "name": "AddPersistentIScsiDeviceW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddRadiusServerA( [in] PSTR Address );",
            "name": "AddRadiusServerA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API AddRadiusServerW( [in] PWSTR Address );",
            "name": "AddRadiusServerW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ClearPersistentIScsiDevices();",
            "name": "ClearPersistentIScsiDevices"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetDevicesForIScsiSessionA( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in, out] ULONG *DeviceCount, [out] PISCSI_DEVICE_ON_SESSIONA Devices );",
            "name": "GetDevicesForIScsiSessionA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetDevicesForIScsiSessionW( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in, out] ULONG *DeviceCount, [out] PISCSI_DEVICE_ON_SESSIONW Devices );",
            "name": "GetDevicesForIScsiSessionW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiIKEInfoA( [in, optional] PSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PULONG Reserved, [in] PIKE_AUTHENTICATION_INFORMATION AuthInfo );",
            "name": "GetIScsiIKEInfoA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiIKEInfoW( [in, optional] PWSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PULONG Reserved, [in] PIKE_AUTHENTICATION_INFORMATION AuthInfo );",
            "name": "GetIScsiIKEInfoW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiInitiatorNodeNameA( PCHAR InitiatorNodeName );",
            "name": "GetIScsiInitiatorNodeNameA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiInitiatorNodeNameW( PWCHAR InitiatorNodeName );",
            "name": "GetIScsiInitiatorNodeNameW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiSessionListA( [in, out] ULONG *BufferSize, [out] ULONG *SessionCount, [out] PISCSI_SESSION_INFOA SessionInfo );",
            "name": "GetIScsiSessionListA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiSessionListW( [in, out] ULONG *BufferSize, [out] ULONG *SessionCount, [out] PISCSI_SESSION_INFOW SessionInfo );",
            "name": "GetIScsiSessionListW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiTargetInformationA( [in] PSTR TargetName, [in, optional] PSTR DiscoveryMechanism, [in] TARGET_INFORMATION_CLASS InfoClass, [in, out] PULONG BufferSize, [out] PVOID Buffer );",
            "name": "GetIScsiTargetInformationA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiTargetInformationW( [in] PWSTR TargetName, [in, optional] PWSTR DiscoveryMechanism, [in] TARGET_INFORMATION_CLASS InfoClass, [in, out] PULONG BufferSize, [out] PVOID Buffer );",
            "name": "GetIScsiTargetInformationW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API GetIScsiVersionInformation( PISCSI_VERSION_INFO VersionInfo );",
            "name": "GetIScsiVersionInformation"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API LoginIScsiTargetA( [in] PSTR TargetName, [in] BOOLEAN IsInformationalSession, [in, optional] PSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in, optional] PISCSI_TARGET_PORTALA TargetPortal, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, [in, optional] PISCSI_TARGET_MAPPINGA Mappings, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ULONG KeySize, [in, optional] PCHAR Key, [in] BOOLEAN IsPersistent, [out] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [out] PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId );",
            "name": "LoginIScsiTargetA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API LoginIScsiTargetW( [in] PWSTR TargetName, [in] BOOLEAN IsInformationalSession, [in, optional] PWSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in, optional] PISCSI_TARGET_PORTALW TargetPortal, [in, optional] ISCSI_SECURITY_FLAGS SecurityFlags, [in, optional] PISCSI_TARGET_MAPPINGW Mappings, [in, optional] PISCSI_LOGIN_OPTIONS LoginOptions, [in, optional] ULONG KeySize, [in, optional] PCHAR Key, [in] BOOLEAN IsPersistent, [out] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [out] PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId );",
            "name": "LoginIScsiTargetW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API LogoutIScsiTarget( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId );",
            "name": "LogoutIScsiTarget"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RefreshIScsiSendTargetPortalA( [in, optional] PSTR InitiatorInstance, [in] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALA Portal );",
            "name": "RefreshIScsiSendTargetPortalA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RefreshIScsiSendTargetPortalW( [in, optional] PWSTR InitiatorInstance, [in] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALW Portal );",
            "name": "RefreshIScsiSendTargetPortalW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RefreshISNSServerA( [in] PSTR Address );",
            "name": "RefreshISNSServerA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RefreshISNSServerW( [in] PWSTR Address );",
            "name": "RefreshISNSServerW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiConnection( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in] PISCSI_UNIQUE_CONNECTION_ID ConnectionId );",
            "name": "RemoveIScsiConnection"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiPersistentTargetA( [in] PSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in] PSTR TargetName, [in] PISCSI_TARGET_PORTALA Portal );",
            "name": "RemoveIScsiPersistentTargetA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiPersistentTargetW( [in] PWSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in] PWSTR TargetName, [in] PISCSI_TARGET_PORTALW Portal );",
            "name": "RemoveIScsiPersistentTargetW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiSendTargetPortalA( [in, optional] PSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALA Portal );",
            "name": "RemoveIScsiSendTargetPortalA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiSendTargetPortalW( [in, optional] PWSTR InitiatorInstance, [in, optional] ULONG InitiatorPortNumber, [in] PISCSI_TARGET_PORTALW Portal );",
            "name": "RemoveIScsiSendTargetPortalW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiStaticTargetA( [in] PSTR TargetName );",
            "name": "RemoveIScsiStaticTargetA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveIScsiStaticTargetW( [in] PWSTR TargetName );",
            "name": "RemoveIScsiStaticTargetW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveISNSServerA( [in] PSTR Address );",
            "name": "RemoveISNSServerA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveISNSServerW( [in] PWSTR Address );",
            "name": "RemoveISNSServerW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemovePersistentIScsiDeviceA( [in] PSTR DevicePath );",
            "name": "RemovePersistentIScsiDeviceA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemovePersistentIScsiDeviceW( [in] PWSTR DevicePath );",
            "name": "RemovePersistentIScsiDeviceW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveRadiusServerA( [in] PSTR Address );",
            "name": "RemoveRadiusServerA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API RemoveRadiusServerW( [in] PWSTR Address );",
            "name": "RemoveRadiusServerW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportActiveIScsiTargetMappingsA( [in, out] PULONG BufferSize, [out] PULONG MappingCount, [out] PISCSI_TARGET_MAPPINGA Mappings );",
            "name": "ReportActiveIScsiTargetMappingsA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportActiveIScsiTargetMappingsW( [in, out] PULONG BufferSize, [out] PULONG MappingCount, [out] PISCSI_TARGET_MAPPINGW Mappings );",
            "name": "ReportActiveIScsiTargetMappingsW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiInitiatorListA( [in, out] PULONG BufferSize, [out] PCHAR Buffer );",
            "name": "ReportIScsiInitiatorListA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiInitiatorListW( [in, out] ULONG *BufferSize, [out] PWCHAR Buffer );",
            "name": "ReportIScsiInitiatorListW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiPersistentLoginsA( [out] ULONG *Count, [in, out] PPERSISTENT_ISCSI_LOGIN_INFOA PersistentLoginInfo, [in, out] PULONG BufferSizeInBytes );",
            "name": "ReportIScsiPersistentLoginsA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiPersistentLoginsW( [out] ULONG *Count, [in, out] PPERSISTENT_ISCSI_LOGIN_INFOW PersistentLoginInfo, [in, out] PULONG BufferSizeInBytes );",
            "name": "ReportIScsiPersistentLoginsW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiSendTargetPortalsA( [out] PULONG PortalCount, [in, out] PISCSI_TARGET_PORTAL_INFOA PortalInfo );",
            "name": "ReportIScsiSendTargetPortalsA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiSendTargetPortalsExA( [out] PULONG PortalCount, [in, out] PULONG PortalInfoSize, [in, out] PISCSI_TARGET_PORTAL_INFO_EXA PortalInfo );",
            "name": "ReportIScsiSendTargetPortalsExA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiSendTargetPortalsExW( [out] PULONG PortalCount, [in, out] PULONG PortalInfoSize, [in, out] PISCSI_TARGET_PORTAL_INFO_EXW PortalInfo );",
            "name": "ReportIScsiSendTargetPortalsExW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiSendTargetPortalsW( [out] PULONG PortalCount, [in, out] PISCSI_TARGET_PORTAL_INFOW PortalInfo );",
            "name": "ReportIScsiSendTargetPortalsW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiTargetPortalsA( [in, optional] PSTR InitiatorName, [in] PSTR TargetName, [in, optional] PUSHORT TargetPortalTag, [in, out] PULONG ElementCount, [out] PISCSI_TARGET_PORTALA Portals );",
            "name": "ReportIScsiTargetPortalsA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiTargetPortalsW( [in, optional] PWSTR InitiatorName, [in] PWSTR TargetName, [in, optional] PUSHORT TargetPortalTag, [in, out] PULONG ElementCount, [out] PISCSI_TARGET_PORTALW Portals );",
            "name": "ReportIScsiTargetPortalsW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiTargetsA( [in] BOOLEAN ForceUpdate, [in, out] PULONG BufferSize, [out] PCHAR Buffer );",
            "name": "ReportIScsiTargetsA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportIScsiTargetsW( [in] BOOLEAN ForceUpdate, [in, out] PULONG BufferSize, [out] PWCHAR Buffer );",
            "name": "ReportIScsiTargetsW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportISNSServerListA( [in, out] PULONG BufferSizeInChar, [out] PCHAR Buffer );",
            "name": "ReportISNSServerListA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportISNSServerListW( [in, out] PULONG BufferSizeInChar, [out] PWCHAR Buffer );",
            "name": "ReportISNSServerListW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportPersistentIScsiDevicesA( [in, out] PULONG BufferSizeInChar, [out] PCHAR Buffer );",
            "name": "ReportPersistentIScsiDevicesA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportPersistentIScsiDevicesW( [in, out] PULONG BufferSizeInChar, [out] PWCHAR Buffer );",
            "name": "ReportPersistentIScsiDevicesW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportRadiusServerListA( [in, out] PULONG BufferSizeInChar, [out, optional] PCHAR Buffer );",
            "name": "ReportRadiusServerListA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API ReportRadiusServerListW( [in, out] PULONG BufferSizeInChar, [out, optional] PWCHAR Buffer );",
            "name": "ReportRadiusServerListW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SendScsiInquiry( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in] ULONGLONG Lun, [in] UCHAR EvpdCmddt, [in] UCHAR PageCode, [out] PUCHAR ScsiStatus, [in, out] PULONG ResponseSize, [out] PUCHAR ResponseBuffer, [in, out] PULONG SenseSize, [out] PUCHAR SenseBuffer );",
            "name": "SendScsiInquiry"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SendScsiReadCapacity( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [in] ULONGLONG Lun, [out] PUCHAR ScsiStatus, [in, out] PULONG ResponseSize, [out] PUCHAR ResponseBuffer, [in, out] PULONG SenseSize, [out] PUCHAR SenseBuffer );",
            "name": "SendScsiReadCapacity"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SendScsiReportLuns( [in] PISCSI_UNIQUE_SESSION_ID UniqueSessionId, [out] PUCHAR ScsiStatus, [in, out] PULONG ResponseSize, [out] PUCHAR ResponseBuffer, [in, out] PULONG SenseSize, [out] PUCHAR SenseBuffer );",
            "name": "SendScsiReportLuns"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiGroupPresharedKey( [in] ULONG KeyLength, [in] PUCHAR Key, BOOLEAN Persist );",
            "name": "SetIScsiGroupPresharedKey"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiIKEInfoA( [in] PSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PIKE_AUTHENTICATION_INFORMATION AuthInfo, [in] BOOLEAN Persist );",
            "name": "SetIScsiIKEInfoA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiIKEInfoW( [in] PWSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PIKE_AUTHENTICATION_INFORMATION AuthInfo, [in] BOOLEAN Persist );",
            "name": "SetIScsiIKEInfoW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiInitiatorCHAPSharedSecret( [in] ULONG SharedSecretLength, [in] PUCHAR SharedSecret );",
            "name": "SetIScsiInitiatorCHAPSharedSecret"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiInitiatorNodeNameA( PSTR InitiatorNodeName );",
            "name": "SetIScsiInitiatorNodeNameA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiInitiatorNodeNameW( PWSTR InitiatorNodeName );",
            "name": "SetIScsiInitiatorNodeNameW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiInitiatorRADIUSSharedSecret( [in] ULONG SharedSecretLength, [in] PUCHAR SharedSecret );",
            "name": "SetIScsiInitiatorRADIUSSharedSecret"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiTunnelModeOuterAddressA( [in, optional] PSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PSTR DestinationAddress, [in] PSTR OuterModeAddress, [in] BOOLEAN Persist );",
            "name": "SetIScsiTunnelModeOuterAddressA"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetIScsiTunnelModeOuterAddressW( [in, optional] PWSTR InitiatorName, [in] ULONG InitiatorPortNumber, [in] PWSTR DestinationAddress, [in] PWSTR OuterModeAddress, [in] BOOLEAN Persist );",
            "name": "SetIScsiTunnelModeOuterAddressW"
        },
        {
            "signature": "ISDSC_STATUS ISDSC_API SetupPersistentIScsiDevices();",
            "name": "SetupPersistentIScsiDevices"
        }
    ],
    "Isolatedapplauncher.h": [],
    "Isysmon.h": [],
    "Iwscapi.h": [],
    "Jobapi.h": [
        {
            "signature": "BOOL IsProcessInJob( [in] HANDLE ProcessHandle, [in, optional] HANDLE JobHandle, [out] PBOOL Result );",
            "name": "IsProcessInJob"
        }
    ],
    "Jobapi2.h": [
        {
            "signature": "BOOL AssignProcessToJobObject( [in] HANDLE hJob, [in] HANDLE hProcess );",
            "name": "AssignProcessToJobObject"
        },
        {
            "signature": "HANDLE CreateJobObjectW( [in, optional] LPSECURITY_ATTRIBUTES lpJobAttributes, [in, optional] LPCWSTR lpName );",
            "name": "CreateJobObjectW"
        },
        {
            "signature": "void FreeMemoryJobObject( [in] _Frees_ptr_ VOID *Buffer );",
            "name": "FreeMemoryJobObject"
        },
        {
            "signature": "HANDLE OpenJobObjectW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpName );",
            "name": "OpenJobObjectW"
        },
        {
            "signature": "BOOL QueryInformationJobObject( [in, optional] HANDLE hJob, [in] JOBOBJECTINFOCLASS JobObjectInformationClass, [out] LPVOID lpJobObjectInformation, [in] DWORD cbJobObjectInformationLength, [out, optional] LPDWORD lpReturnLength );",
            "name": "QueryInformationJobObject"
        },
        {
            "signature": "DWORD QueryIoRateControlInformationJobObject( [in, optional] HANDLE hJob, [in, optional] PCWSTR VolumeName, [out] JOBOBJECT_IO_RATE_CONTROL_INFORMATION **InfoBlocks, [out] ULONG *InfoBlockCount );",
            "name": "QueryIoRateControlInformationJobObject"
        },
        {
            "signature": "BOOL SetInformationJobObject( [in] HANDLE hJob, [in] JOBOBJECTINFOCLASS JobObjectInformationClass, [in] LPVOID lpJobObjectInformation, [in] DWORD cbJobObjectInformationLength );",
            "name": "SetInformationJobObject"
        },
        {
            "signature": "DWORD SetIoRateControlInformationJobObject( [in] HANDLE hJob, [in] JOBOBJECT_IO_RATE_CONTROL_INFORMATION *IoRateControlInfo );",
            "name": "SetIoRateControlInformationJobObject"
        },
        {
            "signature": "BOOL TerminateJobObject( [in] HANDLE hJob, [in] UINT uExitCode );",
            "name": "TerminateJobObject"
        }
    ],
    "Joystickapi.h": [
        {
            "signature": "MMRESULT joyConfigChanged( DWORD dwFlags );",
            "name": "joyConfigChanged"
        },
        {
            "signature": "MMRESULT joyGetDevCaps( UINT uJoyID, LPJOYCAPS pjc, UINT cbjc );",
            "name": "joyGetDevCaps"
        },
        {
            "signature": "MMRESULT joyGetDevCapsA( UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc );",
            "name": "joyGetDevCapsA"
        },
        {
            "signature": "MMRESULT joyGetDevCapsW( UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc );",
            "name": "joyGetDevCapsW"
        },
        {
            "signature": "UINT joyGetNumDevs();",
            "name": "joyGetNumDevs"
        },
        {
            "signature": "MMRESULT joyGetPos( UINT uJoyID, LPJOYINFO pji );",
            "name": "joyGetPos"
        },
        {
            "signature": "MMRESULT joyGetPosEx( UINT uJoyID, LPJOYINFOEX pji );",
            "name": "joyGetPosEx"
        },
        {
            "signature": "MMRESULT joyGetThreshold( UINT uJoyID, LPUINT puThreshold );",
            "name": "joyGetThreshold"
        },
        {
            "signature": "MMRESULT joyReleaseCapture( UINT uJoyID );",
            "name": "joyReleaseCapture"
        },
        {
            "signature": "MMRESULT joySetCapture( HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged );",
            "name": "joySetCapture"
        },
        {
            "signature": "MMRESULT joySetThreshold( UINT uJoyID, UINT uThreshold );",
            "name": "joySetThreshold"
        }
    ],
    "Keycredmgr.h": [
        {
            "signature": "void KeyCredentialManagerFreeInformation( [in] KeyCredentialManagerInfo *keyCredentialManagerInfo );",
            "name": "KeyCredentialManagerFreeInformation"
        },
        {
            "signature": "HRESULT KeyCredentialManagerGetInformation( [out] KeyCredentialManagerInfo **keyCredentialManagerInfo );",
            "name": "KeyCredentialManagerGetInformation"
        },
        {
            "signature": "HRESULT KeyCredentialManagerGetOperationErrorStates( [in] KeyCredentialManagerOperationType keyCredentialManagerOperationType, [out] BOOL *isReady, [out] KeyCredentialManagerOperationErrorStates *keyCredentialManagerOperationErrorStates );",
            "name": "KeyCredentialManagerGetOperationErrorStates"
        },
        {
            "signature": "HRESULT KeyCredentialManagerShowUIOperation( [in] HWND hWndOwner, [in] KeyCredentialManagerOperationType keyCredentialManagerOperationType );",
            "name": "KeyCredentialManagerShowUIOperation"
        }
    ],
    "Ksopmapi.h": [],
    "Ktmtypes.h": [],
    "Ktmw32.h": [
        {
            "signature": "BOOL CommitComplete( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "CommitComplete"
        },
        {
            "signature": "BOOL CommitEnlistment( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "CommitEnlistment"
        },
        {
            "signature": "BOOL CommitTransaction( [in] HANDLE TransactionHandle );",
            "name": "CommitTransaction"
        },
        {
            "signature": "BOOL CommitTransactionAsync( [in] HANDLE TransactionHandle );",
            "name": "CommitTransactionAsync"
        },
        {
            "signature": "HANDLE CreateEnlistment( [in, optional] LPSECURITY_ATTRIBUTES lpEnlistmentAttributes, [in] HANDLE ResourceManagerHandle, [in] HANDLE TransactionHandle, [in] NOTIFICATION_MASK NotificationMask, [in, optional] DWORD CreateOptions, [in, optional] PVOID EnlistmentKey );",
            "name": "CreateEnlistment"
        },
        {
            "signature": "HANDLE CreateResourceManager( [in, optional] LPSECURITY_ATTRIBUTES lpResourceManagerAttributes, [in] LPGUID ResourceManagerId, [in, optional] DWORD CreateOptions, [in] HANDLE TmHandle, [in, optional] LPWSTR Description );",
            "name": "CreateResourceManager"
        },
        {
            "signature": "HANDLE CreateTransaction( [in, optional] LPSECURITY_ATTRIBUTES lpTransactionAttributes, [in, optional] LPGUID UOW, [in, optional] DWORD CreateOptions, [in, optional] DWORD IsolationLevel, [in, optional] DWORD IsolationFlags, [in, optional] DWORD Timeout, [in, optional] LPWSTR Description );",
            "name": "CreateTransaction"
        },
        {
            "signature": "HANDLE CreateTransactionManager( [in, optional] LPSECURITY_ATTRIBUTES lpTransactionAttributes, [in, optional] LPWSTR LogFileName, [in, optional] ULONG CreateOptions, [in, optional] ULONG CommitStrength );",
            "name": "CreateTransactionManager"
        },
        {
            "signature": "BOOL GetCurrentClockTransactionManager( [in] HANDLE TransactionManagerHandle, [out] PLARGE_INTEGER TmVirtualClock );",
            "name": "GetCurrentClockTransactionManager"
        },
        {
            "signature": "BOOL GetEnlistmentId( [in] HANDLE EnlistmentHandle, [out] LPGUID EnlistmentId );",
            "name": "GetEnlistmentId"
        },
        {
            "signature": "BOOL GetEnlistmentRecoveryInformation( [in] HANDLE EnlistmentHandle, [in] ULONG BufferSize, [out] PVOID Buffer, [out, optional] PULONG BufferUsed );",
            "name": "GetEnlistmentRecoveryInformation"
        },
        {
            "signature": "BOOL GetNotificationResourceManager( [in] HANDLE ResourceManagerHandle, [out] PTRANSACTION_NOTIFICATION TransactionNotification, [in] ULONG NotificationLength, [in, optional] DWORD dwMilliseconds, [out, optional] PULONG ReturnLength );",
            "name": "GetNotificationResourceManager"
        },
        {
            "signature": "BOOL GetNotificationResourceManagerAsync( [in] HANDLE ResourceManagerHandle, [out] PTRANSACTION_NOTIFICATION TransactionNotification, [in] ULONG TransactionNotificationLength, [out] PULONG ReturnLength, [in] LPOVERLAPPED lpOverlapped );",
            "name": "GetNotificationResourceManagerAsync"
        },
        {
            "signature": "BOOL GetTransactionId( [in] HANDLE TransactionHandle, [out] LPGUID TransactionId );",
            "name": "GetTransactionId"
        },
        {
            "signature": "BOOL GetTransactionInformation( [in] HANDLE TransactionHandle, [out, optional] PDWORD Outcome, [out, optional] PDWORD IsolationLevel, [out, optional] PDWORD IsolationFlags, [out, optional] PDWORD Timeout, [in] DWORD BufferLength, [out, optional] LPWSTR Description );",
            "name": "GetTransactionInformation"
        },
        {
            "signature": "BOOL GetTransactionManagerId( [in] HANDLE TransactionManagerHandle, [out] LPGUID TransactionManagerId );",
            "name": "GetTransactionManagerId"
        },
        {
            "signature": "HANDLE OpenEnlistment( [in] DWORD dwDesiredAccess, [in] HANDLE ResourceManagerHandle, [in] LPGUID EnlistmentId );",
            "name": "OpenEnlistment"
        },
        {
            "signature": "HANDLE OpenResourceManager( [in] DWORD dwDesiredAccess, [in] HANDLE TmHandle, [in] LPGUID ResourceManagerId );",
            "name": "OpenResourceManager"
        },
        {
            "signature": "HANDLE OpenTransaction( [in] DWORD dwDesiredAccess, [in] LPGUID TransactionId );",
            "name": "OpenTransaction"
        },
        {
            "signature": "HANDLE OpenTransactionManager( [in] LPWSTR LogFileName, [in] ACCESS_MASK DesiredAccess, [in, optional] ULONG OpenOptions );",
            "name": "OpenTransactionManager"
        },
        {
            "signature": "HANDLE OpenTransactionManagerById( [in] LPGUID TransactionManagerId, [in] ACCESS_MASK DesiredAccess, [in, optional] ULONG OpenOptions );",
            "name": "OpenTransactionManagerById"
        },
        {
            "signature": "BOOL PrepareComplete( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "PrepareComplete"
        },
        {
            "signature": "BOOL PrepareEnlistment( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "PrepareEnlistment"
        },
        {
            "signature": "BOOL PrePrepareComplete( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "PrePrepareComplete"
        },
        {
            "signature": "BOOL PrePrepareEnlistment( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "PrePrepareEnlistment"
        },
        {
            "signature": "BOOL ReadOnlyEnlistment( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "ReadOnlyEnlistment"
        },
        {
            "signature": "BOOL RecoverEnlistment( [in] HANDLE EnlistmentHandle, [in, optional] PVOID EnlistmentKey );",
            "name": "RecoverEnlistment"
        },
        {
            "signature": "BOOL RecoverResourceManager( [in] HANDLE ResourceManagerHandle );",
            "name": "RecoverResourceManager"
        },
        {
            "signature": "BOOL RecoverTransactionManager( [in] HANDLE TransactionManagerHandle );",
            "name": "RecoverTransactionManager"
        },
        {
            "signature": "BOOL RenameTransactionManager( [in] LPWSTR LogFileName, [in] LPGUID ExistingTransactionManagerGuid );",
            "name": "RenameTransactionManager"
        },
        {
            "signature": "BOOL RollbackComplete( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "RollbackComplete"
        },
        {
            "signature": "BOOL RollbackEnlistment( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "RollbackEnlistment"
        },
        {
            "signature": "BOOL RollbackTransaction( [in] HANDLE TransactionHandle );",
            "name": "RollbackTransaction"
        },
        {
            "signature": "BOOL RollbackTransactionAsync( [in] HANDLE TransactionHandle );",
            "name": "RollbackTransactionAsync"
        },
        {
            "signature": "BOOL RollforwardTransactionManager( [in] HANDLE TransactionManagerHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "RollforwardTransactionManager"
        },
        {
            "signature": "BOOL SetEnlistmentRecoveryInformation( [in] HANDLE EnlistmentHandle, [in] ULONG BufferSize, [in] PVOID Buffer );",
            "name": "SetEnlistmentRecoveryInformation"
        },
        {
            "signature": "BOOL SetResourceManagerCompletionPort( [in] HANDLE ResourceManagerHandle, [in] HANDLE IoCompletionPortHandle, [in] ULONG_PTR CompletionKey );",
            "name": "SetResourceManagerCompletionPort"
        },
        {
            "signature": "BOOL SetTransactionInformation( [in] HANDLE TransactionHandle, [in, optional] DWORD IsolationLevel, [in, optional] DWORD IsolationFlags, [in, optional] DWORD Timeout, [in, optional] LPWSTR Description );",
            "name": "SetTransactionInformation"
        },
        {
            "signature": "BOOL SinglePhaseReject( [in] HANDLE EnlistmentHandle, [in] PLARGE_INTEGER TmVirtualClock );",
            "name": "SinglePhaseReject"
        }
    ],
    "L2cmn.h": [],
    "Libloaderapi.h": [
        {
            "signature": "DLL_DIRECTORY_COOKIE AddDllDirectory( [in] PCWSTR NewDirectory );",
            "name": "AddDllDirectory"
        },
        {
            "signature": "BOOL DisableThreadLibraryCalls( [in] HMODULE hLibModule );",
            "name": "DisableThreadLibraryCalls"
        },
        {
            "signature": "ENUMRESNAMEPROCA Enumresnameproca; BOOL Enumresnameproca( [in, optional] HMODULE hModule, LPCSTR lpType, LPSTR lpName, [in] LONG_PTR lParam ) {...}",
            "name": "ENUMRESNAMEPROCA callback"
        },
        {
            "signature": "ENUMRESNAMEPROCW Enumresnameprocw; BOOL Enumresnameprocw( [in, optional] HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, [in] LONG_PTR lParam ) {...}",
            "name": "ENUMRESNAMEPROCW callback"
        },
        {
            "signature": "BOOL EnumResourceLanguagesExA( [in] HMODULE hModule, [in] LPCSTR lpType, [in] LPCSTR lpName, [in] ENUMRESLANGPROCA lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceLanguagesExA"
        },
        {
            "signature": "BOOL EnumResourceLanguagesExW( [in] HMODULE hModule, [in] LPCWSTR lpType, [in] LPCWSTR lpName, [in] ENUMRESLANGPROCW lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceLanguagesExW"
        },
        {
            "signature": "BOOL EnumResourceNamesA( [in, optional] HMODULE hModule, [in] LPCSTR lpType, [in] ENUMRESNAMEPROCA lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceNamesA"
        },
        {
            "signature": "BOOL EnumResourceNamesExA( [in, optional] HMODULE hModule, LPCSTR lpType, [in] ENUMRESNAMEPROCA lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceNamesExA"
        },
        {
            "signature": "BOOL EnumResourceNamesExW( [in, optional] HMODULE hModule, LPCWSTR lpType, [in] ENUMRESNAMEPROCW lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceNamesExW"
        },
        {
            "signature": "BOOL EnumResourceNamesW( [in, optional] HMODULE hModule, [in] LPCWSTR lpType, [in] ENUMRESNAMEPROCW lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceNamesW"
        },
        {
            "signature": "BOOL EnumResourceTypesExA( [in, optional] HMODULE hModule, [in] ENUMRESTYPEPROCA lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceTypesExA"
        },
        {
            "signature": "BOOL EnumResourceTypesExW( [in, optional] HMODULE hModule, [in] ENUMRESTYPEPROCW lpEnumFunc, [in] LONG_PTR lParam, [in] DWORD dwFlags, [in] LANGID LangId );",
            "name": "EnumResourceTypesExW"
        },
        {
            "signature": "ENUMRESTYPEPROCA Enumrestypeproca; BOOL Enumrestypeproca( [in, optional] HMODULE hModule, LPSTR lpType, [in] LONG_PTR lParam ) {...}",
            "name": "ENUMRESTYPEPROCA callback"
        },
        {
            "signature": "ENUMRESTYPEPROCW Enumrestypeprocw; BOOL Enumrestypeprocw( [in, optional] HMODULE hModule, LPWSTR lpType, [in] LONG_PTR lParam ) {...}",
            "name": "ENUMRESTYPEPROCW callback"
        },
        {
            "signature": "HRSRC FindResourceExW( [in, optional] HMODULE hModule, [in] LPCWSTR lpType, [in] LPCWSTR lpName, [in] WORD wLanguage );",
            "name": "FindResourceExW"
        },
        {
            "signature": "HRSRC FindResourceW( [in, optional] HMODULE hModule, [in] LPCWSTR lpName, [in] LPCWSTR lpType );",
            "name": "FindResourceW"
        },
        {
            "signature": "int FindStringOrdinal( [in] DWORD dwFindStringOrdinalFlags, [in] LPCWSTR lpStringSource, [in] int cchSource, [in] LPCWSTR lpStringValue, [in] int cchValue, [in] BOOL bIgnoreCase );",
            "name": "FindStringOrdinal"
        },
        {
            "signature": "BOOL FreeLibrary( [in] HMODULE hLibModule );",
            "name": "FreeLibrary"
        },
        {
            "signature": "void FreeLibraryAndExitThread( [in] HMODULE hLibModule, [in] DWORD dwExitCode );",
            "name": "FreeLibraryAndExitThread"
        },
        {
            "signature": "BOOL FreeResource( [in] HGLOBAL hResData );",
            "name": "FreeResource"
        },
        {
            "signature": "DWORD GetModuleFileNameA( [in, optional] HMODULE hModule, [out] LPSTR lpFilename, [in] DWORD nSize );",
            "name": "GetModuleFileNameA"
        },
        {
            "signature": "DWORD GetModuleFileNameW( [in, optional] HMODULE hModule, [out] LPWSTR lpFilename, [in] DWORD nSize );",
            "name": "GetModuleFileNameW"
        },
        {
            "signature": "HMODULE GetModuleHandleA( [in, optional] LPCSTR lpModuleName );",
            "name": "GetModuleHandleA"
        },
        {
            "signature": "BOOL GetModuleHandleExA( [in] DWORD dwFlags, [in, optional] LPCSTR lpModuleName, [out] HMODULE *phModule );",
            "name": "GetModuleHandleExA"
        },
        {
            "signature": "BOOL GetModuleHandleExW( [in] DWORD dwFlags, [in, optional] LPCWSTR lpModuleName, [out] HMODULE *phModule );",
            "name": "GetModuleHandleExW"
        },
        {
            "signature": "HMODULE GetModuleHandleW( [in, optional] LPCWSTR lpModuleName );",
            "name": "GetModuleHandleW"
        },
        {
            "signature": "FARPROC GetProcAddress( [in] HMODULE hModule, [in] LPCSTR lpProcName );",
            "name": "GetProcAddress"
        },
        {
            "signature": "HMODULE LoadLibraryA( [in] LPCSTR lpLibFileName );",
            "name": "LoadLibraryA"
        },
        {
            "signature": "HMODULE LoadLibraryExA( [in] LPCSTR lpLibFileName, HANDLE hFile, [in] DWORD dwFlags );",
            "name": "LoadLibraryExA"
        },
        {
            "signature": "HMODULE LoadLibraryExW( [in] LPCWSTR lpLibFileName, HANDLE hFile, [in] DWORD dwFlags );",
            "name": "LoadLibraryExW"
        },
        {
            "signature": "HMODULE LoadLibraryW( [in] LPCWSTR lpLibFileName );",
            "name": "LoadLibraryW"
        },
        {
            "signature": "HGLOBAL LoadResource( [in, optional] HMODULE hModule, [in] HRSRC hResInfo );",
            "name": "LoadResource"
        },
        {
            "signature": "LPVOID LockResource( [in] HGLOBAL hResData );",
            "name": "LockResource"
        },
        {
            "signature": "BOOL RemoveDllDirectory( [in] DLL_DIRECTORY_COOKIE Cookie );",
            "name": "RemoveDllDirectory"
        },
        {
            "signature": "BOOL SetDefaultDllDirectories( [in] DWORD DirectoryFlags );",
            "name": "SetDefaultDllDirectories"
        },
        {
            "signature": "DWORD SizeofResource( [in, optional] HMODULE hModule, [in] HRSRC hResInfo );",
            "name": "SizeofResource"
        }
    ],
    "Libloaderapi2.h": [
        {
            "signature": "BOOL QueryOptionalDelayLoadedAPI( [in] HMODULE hParentModule, [in] LPCSTR lpDllName, [in] LPCSTR lpProcName, DWORD Reserved );",
            "name": "QueryOptionalDelayLoadedAPI"
        }
    ],
    "Lmaccess.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION I_NetLogonControl2( [in, optional] LPCWSTR ServerName, [in] DWORD FunctionCode, [in] DWORD QueryLevel, [in] LPBYTE Data, [out] LPBYTE *Buffer );",
            "name": "I_NetLogonControl2"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessAdd( LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err );",
            "name": "NetAccessAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessDel( LPCWSTR servername, LPCWSTR resource );",
            "name": "NetAccessDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessEnum( LPCWSTR servername, LPCWSTR BasePath, DWORD Recursive, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle );",
            "name": "NetAccessEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessGetInfo( LPCWSTR servername, LPCWSTR resource, DWORD level, LPBYTE *bufptr );",
            "name": "NetAccessGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessGetUserPerms( LPCWSTR servername, LPCWSTR UGname, LPCWSTR resource, LPDWORD Perms );",
            "name": "NetAccessGetUserPerms"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAccessSetInfo( LPCWSTR servername, LPCWSTR resource, DWORD level, LPBYTE buf, LPDWORD parm_err );",
            "name": "NetAccessSetInfo"
        },
        {
            "signature": "NTSTATUS NetAddServiceAccount( [in, optional] LPWSTR ServerName, [in] LPWSTR AccountName, [in] LPWSTR Password, [in] DWORD Flags );",
            "name": "NetAddServiceAccount"
        },
        {
            "signature": "NTSTATUS NetEnumerateServiceAccounts( [in, optional] LPWSTR ServerName, [in] DWORD Flags, [out] DWORD *AccountsCount, [out] PZPWSTR *Accounts );",
            "name": "NetEnumerateServiceAccounts"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGetAnyDCName( LPCWSTR ServerName, LPCWSTR DomainName, LPBYTE *Buffer );",
            "name": "NetGetAnyDCName"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGetDCName( LPCWSTR ServerName, LPCWSTR DomainName, LPBYTE *Buffer );",
            "name": "NetGetDCName"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGetDisplayInformationIndex( [in] LPCWSTR ServerName, [in] DWORD Level, [in] LPCWSTR Prefix, [out] LPDWORD Index );",
            "name": "NetGetDisplayInformationIndex"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupAdd( [in] LPCWSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetGroupAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupAddUser( [in] LPCWSTR servername, [in] LPCWSTR GroupName, [in] LPCWSTR username );",
            "name": "NetGroupAddUser"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupDel( [in] LPCWSTR servername, [in] LPCWSTR groupname );",
            "name": "NetGroupDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupDelUser( [in] LPCWSTR servername, [in] LPCWSTR GroupName, [in] LPCWSTR Username );",
            "name": "NetGroupDelUser"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupEnum( [in] LPCWSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD_PTR resume_handle );",
            "name": "NetGroupEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupGetInfo( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetGroupGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupGetUsers( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD_PTR ResumeHandle );",
            "name": "NetGroupGetUsers"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupSetInfo( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetGroupSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGroupSetUsers( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [in] DWORD totalentries );",
            "name": "NetGroupSetUsers"
        },
        {
            "signature": "NTSTATUS NetIsServiceAccount( [in, optional] LPWSTR ServerName, [in] LPWSTR AccountName, [out] BOOL *IsService );",
            "name": "NetIsServiceAccount"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupAdd( [in] LPCWSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetLocalGroupAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupAddMember( LPCWSTR servername, LPCWSTR groupname, PSID membersid );",
            "name": "NetLocalGroupAddMember"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupAddMembers( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [in] DWORD totalentries );",
            "name": "NetLocalGroupAddMembers"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupDel( [in] LPCWSTR servername, [in] LPCWSTR groupname );",
            "name": "NetLocalGroupDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupDelMember( LPCWSTR servername, LPCWSTR groupname, PSID membersid );",
            "name": "NetLocalGroupDelMember"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupDelMembers( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [in] DWORD totalentries );",
            "name": "NetLocalGroupDelMembers"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupEnum( [in] LPCWSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD_PTR resumehandle );",
            "name": "NetLocalGroupEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupGetInfo( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetLocalGroupGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupGetMembers( [in] LPCWSTR servername, [in] LPCWSTR localgroupname, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD_PTR resumehandle );",
            "name": "NetLocalGroupGetMembers"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupSetInfo( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetLocalGroupSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetLocalGroupSetMembers( [in] LPCWSTR servername, [in] LPCWSTR groupname, [in] DWORD level, [in] LPBYTE buf, [in] DWORD totalentries );",
            "name": "NetLocalGroupSetMembers"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetQueryDisplayInformation( [in] LPCWSTR ServerName, [in] DWORD Level, [in] DWORD Index, [in] DWORD EntriesRequested, [in] DWORD PreferredMaximumLength, [out] LPDWORD ReturnedEntryCount, [out] PVOID *SortedBuffer );",
            "name": "NetQueryDisplayInformation"
        },
        {
            "signature": "NTSTATUS NetQueryServiceAccount( [in, optional] LPWSTR ServerName, [in] LPWSTR AccountName, [in] DWORD InfoLevel, [out] PBYTE *Buffer );",
            "name": "NetQueryServiceAccount"
        },
        {
            "signature": "NTSTATUS NetRemoveServiceAccount( [in, optional] LPWSTR ServerName, [in] LPWSTR AccountName, [in] DWORD Flags );",
            "name": "NetRemoveServiceAccount"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserAdd( [in] LPCWSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetUserAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserChangePassword( [in] LPCWSTR domainname, [in] LPCWSTR username, [in] LPCWSTR oldpassword, [in] LPCWSTR newpassword );",
            "name": "NetUserChangePassword"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserDel( [in] LPCWSTR servername, [in] LPCWSTR username );",
            "name": "NetUserDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserEnum( [in] LPCWSTR servername, [in] DWORD level, [in] DWORD filter, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD resume_handle );",
            "name": "NetUserEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserGetGroups( [in] LPCWSTR servername, [in] LPCWSTR username, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries );",
            "name": "NetUserGetGroups"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserGetInfo( [in] LPCWSTR servername, [in] LPCWSTR username, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetUserGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserGetLocalGroups( [in] LPCWSTR servername, [in] LPCWSTR username, [in] DWORD level, [in] DWORD flags, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries );",
            "name": "NetUserGetLocalGroups"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserModalsGet( [in, optional] LPCWSTR servername, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetUserModalsGet"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserModalsSet( [in] LPCWSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetUserModalsSet"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserSetGroups( [in] LPCWSTR servername, [in] LPCWSTR username, [in] DWORD level, [in] LPBYTE buf, [in] DWORD num_entries );",
            "name": "NetUserSetGroups"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUserSetInfo( [in] LPCWSTR servername, [in] LPCWSTR username, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetUserSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetValidatePasswordPolicy( [in] LPCWSTR ServerName, [in] LPVOID Qualifier, [in] NET_VALIDATE_PASSWORD_TYPE ValidationType, [in] LPVOID InputArg, [out] LPVOID *OutputArg );",
            "name": "NetValidatePasswordPolicy"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetValidatePasswordPolicyFree( [in] LPVOID *OutputArg );",
            "name": "NetValidatePasswordPolicyFree"
        }
    ],
    "Lmalert.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAlertRaise( [in] LPCWSTR AlertType, [in] LPVOID Buffer, [in] DWORD BufferSize );",
            "name": "NetAlertRaise"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAlertRaiseEx( [in] LPCWSTR AlertType, [in] LPVOID VariableInfo, [in] DWORD VariableInfoSize, [in] LPCWSTR ServiceName );",
            "name": "NetAlertRaiseEx"
        }
    ],
    "Lmapibuf.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetApiBufferAllocate( [in] DWORD ByteCount, [out] LPVOID *Buffer );",
            "name": "NetApiBufferAllocate"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetApiBufferFree( [in] _Frees_ptr_opt_ LPVOID Buffer );",
            "name": "NetApiBufferFree"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetApiBufferReallocate( [in] _Frees_ptr_opt_ LPVOID OldBuffer, [in] DWORD NewByteCount, [out] LPVOID *NewBuffer );",
            "name": "NetApiBufferReallocate"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetApiBufferSize( [in] LPVOID Buffer, [out] LPDWORD ByteCount );",
            "name": "NetApiBufferSize"
        }
    ],
    "Lmat.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetScheduleJobAdd( [in, optional] LPCWSTR Servername, [in] LPBYTE Buffer, [out] LPDWORD JobId );",
            "name": "NetScheduleJobAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetScheduleJobDel( [in, optional] LPCWSTR Servername, [in] DWORD MinJobId, [in] DWORD MaxJobId );",
            "name": "NetScheduleJobDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetScheduleJobEnum( [in, optional] LPCWSTR Servername, [out] LPBYTE *PointerToBuffer, [in] DWORD PrefferedMaximumLength, [out] LPDWORD EntriesRead, [out] LPDWORD TotalEntries, [in, out] LPDWORD ResumeHandle );",
            "name": "NetScheduleJobEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetScheduleJobGetInfo( [in, optional] LPCWSTR Servername, [in] DWORD JobId, [out] LPBYTE *PointerToBuffer );",
            "name": "NetScheduleJobGetInfo"
        }
    ],
    "Lmaudit.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAuditClear( LPCWSTR server, LPCWSTR backupfile, LPCWSTR service );",
            "name": "NetAuditClear"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAuditRead( LPCWSTR server, LPCWSTR service, LPHLOG auditloghandle, DWORD offset, LPDWORD reserved1, DWORD reserved2, DWORD offsetflag, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD bytesread, LPDWORD totalavailable );",
            "name": "NetAuditRead"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAuditWrite( DWORD type, LPBYTE buf, DWORD numbytes, LPCWSTR service, LPBYTE reserved );",
            "name": "NetAuditWrite"
        }
    ],
    "Lmconfig.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetConfigGet( LPCWSTR server, LPCWSTR component, LPCWSTR parameter, LPBYTE *bufptr );",
            "name": "NetConfigGet"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetConfigGetAll( LPCWSTR server, LPCWSTR component, LPBYTE *bufptr );",
            "name": "NetConfigGetAll"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetConfigSet( LPCWSTR server, LPCWSTR reserved1, LPCWSTR component, DWORD level, DWORD reserved2, LPBYTE buf, DWORD reserved3 );",
            "name": "NetConfigSet"
        }
    ],
    "Lmdfs.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsAdd( [in] LPWSTR DfsEntryPath, [in] LPWSTR ServerName, [in] LPWSTR ShareName, [in, optional] LPWSTR Comment, [in] DWORD Flags );",
            "name": "NetDfsAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsAddFtRoot( [in] LPWSTR ServerName, [in] LPWSTR RootShare, [in] LPWSTR FtDfsName, [in, optional] LPWSTR Comment, [in] DWORD Flags );",
            "name": "NetDfsAddFtRoot"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsAddRootTarget( [in] LPWSTR pDfsPath, [in, optional] LPWSTR pTargetPath, [in] ULONG MajorVersion, [in, optional] LPWSTR pComment, [in] ULONG Flags );",
            "name": "NetDfsAddRootTarget"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsAddStdRoot( [in] LPWSTR ServerName, [in] LPWSTR RootShare, [in, optional] LPWSTR Comment, [in] DWORD Flags );",
            "name": "NetDfsAddStdRoot"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsEnum( [in] LPWSTR DfsName, [in] DWORD Level, [in] DWORD PrefMaxLen, [out] LPBYTE *Buffer, [out] LPDWORD EntriesRead, [in, out] LPDWORD ResumeHandle );",
            "name": "NetDfsEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetClientInfo( [in] LPWSTR DfsEntryPath, [in, optional] LPWSTR ServerName, [in, optional] LPWSTR ShareName, [in] DWORD Level, [out] LPBYTE *Buffer );",
            "name": "NetDfsGetClientInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetFtContainerSecurity( [in] LPWSTR DomainName, [in] SECURITY_INFORMATION SecurityInformation, [out] PSECURITY_DESCRIPTOR *ppSecurityDescriptor, [out] LPDWORD lpcbSecurityDescriptor );",
            "name": "NetDfsGetFtContainerSecurity"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetInfo( [in] LPWSTR DfsEntryPath, [in, optional] LPWSTR ServerName, [in, optional] LPWSTR ShareName, [in] DWORD Level, [out] LPBYTE *Buffer );",
            "name": "NetDfsGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetSecurity( [in] LPWSTR DfsEntryPath, [in] SECURITY_INFORMATION SecurityInformation, [out] PSECURITY_DESCRIPTOR *ppSecurityDescriptor, [out] LPDWORD lpcbSecurityDescriptor );",
            "name": "NetDfsGetSecurity"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetStdContainerSecurity( [in] LPWSTR MachineName, [in] SECURITY_INFORMATION SecurityInformation, [out] PSECURITY_DESCRIPTOR *ppSecurityDescriptor, [out] LPDWORD lpcbSecurityDescriptor );",
            "name": "NetDfsGetStdContainerSecurity"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsGetSupportedNamespaceVersion( [in] DFS_NAMESPACE_VERSION_ORIGIN Origin, [in] PWSTR pName, [out] PDFS_SUPPORTED_NAMESPACE_VERSION_INFO *ppVersionInfo );",
            "name": "NetDfsGetSupportedNamespaceVersion"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsMove( [in] LPWSTR OldDfsEntryPath, [in] LPWSTR NewDfsEntryPath, [in] ULONG Flags );",
            "name": "NetDfsMove"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsRemove( [in] LPWSTR DfsEntryPath, [in, optional] LPWSTR ServerName, [in, optional] LPWSTR ShareName );",
            "name": "NetDfsRemove"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsRemoveFtRoot( [in] LPWSTR ServerName, [in] LPWSTR RootShare, [in] LPWSTR FtDfsName, DWORD Flags );",
            "name": "NetDfsRemoveFtRoot"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsRemoveFtRootForced( [in] LPWSTR DomainName, [in] LPWSTR ServerName, [in] LPWSTR RootShare, [in] LPWSTR FtDfsName, DWORD Flags );",
            "name": "NetDfsRemoveFtRootForced"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsRemoveRootTarget( [in] LPWSTR pDfsPath, [in, optional] LPWSTR pTargetPath, [in] ULONG Flags );",
            "name": "NetDfsRemoveRootTarget"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsRemoveStdRoot( [in] LPWSTR ServerName, [in] LPWSTR RootShare, [in] DWORD Flags );",
            "name": "NetDfsRemoveStdRoot"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsSetClientInfo( [in] LPWSTR DfsEntryPath, [in, optional] LPWSTR ServerName, [in, optional] LPWSTR ShareName, [in] DWORD Level, [in] LPBYTE Buffer );",
            "name": "NetDfsSetClientInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsSetFtContainerSecurity( [in] LPWSTR DomainName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "NetDfsSetFtContainerSecurity"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsSetInfo( [in] LPWSTR DfsEntryPath, [in, optional] LPWSTR ServerName, [in, optional] LPWSTR ShareName, [in] DWORD Level, [in] LPBYTE Buffer );",
            "name": "NetDfsSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsSetSecurity( [in] LPWSTR DfsEntryPath, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "NetDfsSetSecurity"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetDfsSetStdContainerSecurity( [in] LPWSTR MachineName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "NetDfsSetStdContainerSecurity"
        }
    ],
    "Lmerrlog.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetErrorLogClear( LPCWSTR UncServerName, LPCWSTR BackupFile, LPBYTE Reserved );",
            "name": "NetErrorLogClear"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetErrorLogRead( LPCWSTR UncServerName, LPWSTR Reserved1, LPHLOG ErrorLogHandle, DWORD Offset, LPDWORD Reserved2, DWORD Reserved3, DWORD OffsetFlag, LPBYTE *BufPtr, DWORD PrefMaxSize, LPDWORD BytesRead, LPDWORD TotalAvailable );",
            "name": "NetErrorLogRead"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetErrorLogWrite( LPBYTE Reserved1, DWORD Code, LPCWSTR Component, LPBYTE Buffer, DWORD NumBytes, LPBYTE MsgBuf, DWORD StrCount, LPBYTE Reserved2 );",
            "name": "NetErrorLogWrite"
        }
    ],
    "Lmjoin.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetAddAlternateComputerName( [in, optional] LPCWSTR Server, [in] LPCWSTR AlternateName, [in, optional] LPCWSTR DomainAccount, [in, optional] LPCWSTR DomainAccountPassword, [in] ULONG Reserved );",
            "name": "NetAddAlternateComputerName"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetCreateProvisioningPackage( [in] PNETSETUP_PROVISIONING_PARAMS pProvisioningParams, [out, optional] PBYTE *ppPackageBinData, [out, optional] DWORD *pdwPackageBinDataSize, [out, optional] LPWSTR *ppPackageTextData );",
            "name": "NetCreateProvisioningPackage"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetEnumerateComputerNames( [in, optional] LPCWSTR Server, [in] NET_COMPUTER_NAME_TYPE NameType, [in] ULONG Reserved, [out] PDWORD EntryCount, [out] LPWSTR **ComputerNames );",
            "name": "NetEnumerateComputerNames"
        },
        {
            "signature": "VOID NET_API_FUNCTION NetFreeAadJoinInformation( [in, optional] PDSREG_JOIN_INFO pJoinInfo );",
            "name": "NetFreeAadJoinInformation"
        },
        {
            "signature": "HRESULT NET_API_FUNCTION NetGetAadJoinInformation( [in, optional] LPCWSTR pcszTenantId, [out] PDSREG_JOIN_INFO *ppJoinInfo );",
            "name": "NetGetAadJoinInformation"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGetJoinableOUs( [in] LPCWSTR lpServer, [in] LPCWSTR lpDomain, [in] LPCWSTR lpAccount, [in] LPCWSTR lpPassword, [out] DWORD *OUCount, [out] LPWSTR **OUs );",
            "name": "NetGetJoinableOUs"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetGetJoinInformation( [in] LPCWSTR lpServer, [out] LPWSTR *lpNameBuffer, [out] PNETSETUP_JOIN_STATUS BufferType );",
            "name": "NetGetJoinInformation"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetJoinDomain( [in] LPCWSTR lpServer, [in] LPCWSTR lpDomain, [in] LPCWSTR lpMachineAccountOU, [in] LPCWSTR lpAccount, [in] LPCWSTR lpPassword, [in] DWORD fJoinOptions );",
            "name": "NetJoinDomain"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetProvisionComputerAccount( [in] LPCWSTR lpDomain, [in] LPCWSTR lpMachineName, [in, optional] LPCWSTR lpMachineAccountOU, [in, optional] LPCWSTR lpDcName, [in] DWORD dwOptions, [out, optional] PBYTE *pProvisionBinData, [out, optional] DWORD *pdwProvisionBinDataSize, [out, optional] LPWSTR *pProvisionTextData );",
            "name": "NetProvisionComputerAccount"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRemoveAlternateComputerName( [in, optional] LPCWSTR Server, [in] LPCWSTR AlternateName, [in, optional] LPCWSTR DomainAccount, [in, optional] LPCWSTR DomainAccountPassword, [in] ULONG Reserved );",
            "name": "NetRemoveAlternateComputerName"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRenameMachineInDomain( [in] LPCWSTR lpServer, [in] LPCWSTR lpNewMachineName, [in] LPCWSTR lpAccount, [in] LPCWSTR lpPassword, [in] DWORD fRenameOptions );",
            "name": "NetRenameMachineInDomain"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRequestOfflineDomainJoin( [in] BYTE *pProvisionBinData, [in] DWORD cbProvisionBinDataSize, [in] DWORD dwOptions, [in] LPCWSTR lpWindowsPath );",
            "name": "NetRequestOfflineDomainJoin"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRequestProvisioningPackageInstall( [in] BYTE *pPackageBinData, [in] DWORD dwPackageBinDataSize, [in] DWORD dwProvisionOptions, [in] LPCWSTR lpWindowsPath, PVOID pvReserved );",
            "name": "NetRequestProvisioningPackageInstall"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetSetPrimaryComputerName( [in, optional] LPCWSTR Server, [in] LPCWSTR PrimaryName, [in, optional] LPCWSTR DomainAccount, [in, optional] LPCWSTR DomainAccountPassword, [in] ULONG Reserved );",
            "name": "NetSetPrimaryComputerName"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUnjoinDomain( [in] LPCWSTR lpServer, [in] LPCWSTR lpAccount, [in] LPCWSTR lpPassword, [in] DWORD fUnjoinOptions );",
            "name": "NetUnjoinDomain"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetValidateName( [in] LPCWSTR lpServer, [in] LPCWSTR lpName, [in] LPCWSTR lpAccount, [in] LPCWSTR lpPassword, [in] NETSETUP_NAME_TYPE NameType );",
            "name": "NetValidateName"
        }
    ],
    "Lmmsg.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetMessageBufferSend( [in] LPCWSTR servername, [in] LPCWSTR msgname, [in] LPCWSTR fromname, [in] LPBYTE buf, [in] DWORD buflen );",
            "name": "NetMessageBufferSend"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetMessageNameAdd( [in] LPCWSTR servername, [in] LPCWSTR msgname );",
            "name": "NetMessageNameAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetMessageNameDel( [in] LPCWSTR servername, [in] LPCWSTR msgname );",
            "name": "NetMessageNameDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetMessageNameEnum( [in] LPCWSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetMessageNameEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetMessageNameGetInfo( [in] LPCWSTR servername, [in] LPCWSTR msgname, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetMessageNameGetInfo"
        }
    ],
    "Lmremutl.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRemoteComputerSupports( [in] LPCWSTR UncServerName, [in] DWORD OptionsWanted, [out] LPDWORD OptionsSupported );",
            "name": "NetRemoteComputerSupports"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetRemoteTOD( [in] LPCWSTR UncServerName, [out] LPBYTE *BufferPtr );",
            "name": "NetRemoteTOD"
        }
    ],
    "Lmserver.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerComputerNameAdd( [in] LMSTR ServerName, [in] LMSTR EmulatedDomainName, [in] LMSTR EmulatedServerName );",
            "name": "NetServerComputerNameAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerComputerNameDel( [in] LMSTR ServerName, [in] LMSTR EmulatedServerName );",
            "name": "NetServerComputerNameDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerDiskEnum( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetServerDiskEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerEnum( [in, optional] LMCSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in] DWORD servertype, [in, optional] LMCSTR domain, [in, out, optional] LPDWORD resume_handle );",
            "name": "NetServerEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerGetInfo( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetServerGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerSetInfo( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD ParmError );",
            "name": "NetServerSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerTransportAdd( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE bufptr );",
            "name": "NetServerTransportAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerTransportAddEx( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE bufptr );",
            "name": "NetServerTransportAddEx"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerTransportDel( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE bufptr );",
            "name": "NetServerTransportDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServerTransportEnum( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetServerTransportEnum"
        },
        {
            "signature": "BOOL NET_API_FUNCTION SetServiceBits( [in] SERVICE_STATUS_HANDLE hServiceStatus, [in] DWORD dwServiceBits, [in] BOOL bSetBitsOn, [in] BOOL bUpdateImmediately );",
            "name": "SetServiceBits"
        }
    ],
    "Lmshare.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetConnectionEnum( [in] LMSTR servername, [in] LMSTR qualifier, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetConnectionEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetFileClose( [in] LMSTR servername, [in] DWORD fileid );",
            "name": "NetFileClose"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetFileEnum( [in] LMSTR servername, [in] LMSTR basepath, [in] LMSTR username, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] PDWORD_PTR resume_handle );",
            "name": "NetFileEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetFileGetInfo( [in] LMSTR servername, [in] DWORD fileid, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetFileGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetSessionDel( [in] LMSTR servername, [in] LMSTR UncClientName, [in] LMSTR username );",
            "name": "NetSessionDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetSessionEnum( [in] LMSTR servername, [in] LMSTR UncClientName, [in] LMSTR username, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetSessionEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetSessionGetInfo( [in] LMSTR servername, [in] LMSTR UncClientName, [in] LMSTR username, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetSessionGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareAdd( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetShareAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareCheck( [in] LMSTR servername, [in] LMSTR device, [out] LPDWORD type );",
            "name": "NetShareCheck"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareDel( [in] LMSTR servername, [in] LMSTR netname, DWORD reserved );",
            "name": "NetShareDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareDelEx( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE buf );",
            "name": "NetShareDelEx"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareEnum( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetShareEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareGetInfo( [in] LMSTR servername, [in] LMSTR netname, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetShareGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetShareSetInfo( [in] LMSTR servername, [in] LMSTR netname, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetShareSetInfo"
        }
    ],
    "Lmstats.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetStatisticsGet( [in] LPTSTR ServerName, [in] LPTSTR Service, [in] DWORD Level, [in] DWORD Options, [out] LPBYTE *Buffer );",
            "name": "NetStatisticsGet"
        }
    ],
    "Lmsvc.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServiceControl( LPCWSTR servername, LPCWSTR service, DWORD opcode, DWORD arg, LPBYTE *bufptr );",
            "name": "NetServiceControl"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServiceEnum( LPCWSTR servername, DWORD level, LPBYTE *bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle );",
            "name": "NetServiceEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServiceGetInfo( LPCWSTR servername, LPCWSTR service, DWORD level, LPBYTE *bufptr );",
            "name": "NetServiceGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetServiceInstall( LPCWSTR servername, LPCWSTR service, DWORD argc, LPCWSTR [] argv, LPBYTE *bufptr );",
            "name": "NetServiceInstall"
        }
    ],
    "Lmuse.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUseAdd( [in] LPTSTR servername, [in] DWORD LevelFlags, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetUseAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUseDel( [in] LMSTR UncServerName, [in] LMSTR UseName, [in] DWORD ForceLevelFlags );",
            "name": "NetUseDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUseEnum( [in] LMSTR UncServerName, [in] DWORD LevelFlags, [out] LPBYTE *BufPtr, [in] DWORD PreferedMaximumSize, [out] LPDWORD EntriesRead, [out] LPDWORD TotalEntries, [in, out] LPDWORD ResumeHandle );",
            "name": "NetUseEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetUseGetInfo( [in] LMSTR UncServerName, [in] LMSTR UseName, [in] DWORD LevelFlags, [out] LPBYTE *bufptr );",
            "name": "NetUseGetInfo"
        }
    ],
    "Lmwksta.h": [
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaGetInfo( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetWkstaGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaSetInfo( [in] LMSTR servername, [in] DWORD level, [in] LPBYTE buffer, [out] LPDWORD parm_err );",
            "name": "NetWkstaSetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaTransportAdd( [in] LPTSTR servername, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetWkstaTransportAdd"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaTransportDel( [in] LMSTR servername, [in] LMSTR transportname, [in] DWORD ucond );",
            "name": "NetWkstaTransportDel"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaTransportEnum( [in] LPTSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resume_handle );",
            "name": "NetWkstaTransportEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaUserEnum( [in] LMSTR servername, [in] DWORD level, [out] LPBYTE *bufptr, [in] DWORD prefmaxlen, [out] LPDWORD entriesread, [out] LPDWORD totalentries, [in, out] LPDWORD resumehandle );",
            "name": "NetWkstaUserEnum"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaUserGetInfo( LMSTR reserved, [in] DWORD level, [out] LPBYTE *bufptr );",
            "name": "NetWkstaUserGetInfo"
        },
        {
            "signature": "NET_API_STATUS NET_API_FUNCTION NetWkstaUserSetInfo( LMSTR reserved, [in] DWORD level, [in] LPBYTE buf, [out] LPDWORD parm_err );",
            "name": "NetWkstaUserSetInfo"
        }
    ],
    "Loadperf.h": [
        {
            "signature": "LOADPERF_FUNCTION InstallPerfDllA( [in] LPCSTR szComputerName, [in] LPCSTR lpIniFile, [in] ULONG_PTR dwFlags );",
            "name": "InstallPerfDllA"
        },
        {
            "signature": "LOADPERF_FUNCTION InstallPerfDllW( [in] LPCWSTR szComputerName, [in] LPCWSTR lpIniFile, [in] ULONG_PTR dwFlags );",
            "name": "InstallPerfDllW"
        },
        {
            "signature": "LOADPERF_FUNCTION LoadPerfCounterTextStringsA( [in] LPSTR lpCommandLine, [in] BOOL bQuietModeArg );",
            "name": "LoadPerfCounterTextStringsA"
        },
        {
            "signature": "LOADPERF_FUNCTION LoadPerfCounterTextStringsW( [in] LPWSTR lpCommandLine, [in] BOOL bQuietModeArg );",
            "name": "LoadPerfCounterTextStringsW"
        },
        {
            "signature": "LOADPERF_FUNCTION UnloadPerfCounterTextStringsA( [in] LPSTR lpCommandLine, [in] BOOL bQuietModeArg );",
            "name": "UnloadPerfCounterTextStringsA"
        },
        {
            "signature": "LOADPERF_FUNCTION UnloadPerfCounterTextStringsW( [in] LPWSTR lpCommandLine, [in] BOOL bQuietModeArg );",
            "name": "UnloadPerfCounterTextStringsW"
        }
    ],
    "Locationapi.h": [],
    "Lowlevelmonitorconfigurationapi.h": [
        {
            "signature": "_BOOL CapabilitiesRequestAndCapabilitiesReply( [in] HANDLE hMonitor, [out] LPSTR pszASCIICapabilitiesString, [in] DWORD dwCapabilitiesStringLengthInCharacters );",
            "name": "CapabilitiesRequestAndCapabilitiesReply"
        },
        {
            "signature": "_BOOL GetCapabilitiesStringLength( [in] HANDLE hMonitor, [out] LPDWORD pdwCapabilitiesStringLengthInCharacters );",
            "name": "GetCapabilitiesStringLength"
        },
        {
            "signature": "_BOOL GetTimingReport( [in] HANDLE hMonitor, [out] LPMC_TIMING_REPORT pmtrMonitorTimingReport );",
            "name": "GetTimingReport"
        },
        {
            "signature": "_BOOL GetVCPFeatureAndVCPFeatureReply( [in] HANDLE hMonitor, [in] BYTE bVCPCode, [out] LPMC_VCP_CODE_TYPE pvct, [out] LPDWORD pdwCurrentValue, [out] LPDWORD pdwMaximumValue );",
            "name": "GetVCPFeatureAndVCPFeatureReply"
        },
        {
            "signature": "_BOOL SaveCurrentSettings( [in] HANDLE hMonitor );",
            "name": "SaveCurrentSettings"
        },
        {
            "signature": "_BOOL SetVCPFeature( [in] HANDLE hMonitor, [in] BYTE bVCPCode, [in] DWORD dwNewValue );",
            "name": "SetVCPFeature"
        }
    ],
    "Lpmapi.h": [
        {
            "signature": "CBADMITRESULT Cbadmitresult; ULONG * Cbadmitresult( [in] LPM_HANDLE LpmHandle, [in] RHANDLE RequestHandle, [in] ULONG ulPcmActionFlags, [in] int LpmError, [in] int PolicyDecisionsCount, [in] POLICY_DECISION *pPolicyDecisions ) {...}",
            "name": "CBADMITRESULT callback"
        },
        {
            "signature": "CBGETRSVPOBJECTS Cbgetrsvpobjects; ULONG * Cbgetrsvpobjects( [in] LPM_HANDLE LpmHandle, [in] RHANDLE RequestHandle, [in] int LpmError, [in] int RsvpObjectsCount, [in] RsvpObjHdr **ppRsvpObjects ) {...}",
            "name": "CBGETRSVPOBJECTS callback"
        },
        {
            "signature": "ULONG LPM_AdmitRsvpMsg( [in] RHANDLE PcmReqHandle, [in] RSVP_HOP *pRecvdIntf, [in] RSVP_MSG_OBJS *pRsvpMsgObjs, [in] int RcvdRsvpMsgLength, [in] UCHAR *RcvdRsvpMsg, [out] ULONG *pulPcmActionFlags, [out] POLICY_DECISION *pPolicyDecisions, [out] void *Reserved );",
            "name": "LPM_AdmitRsvpMsg"
        },
        {
            "signature": "void LPM_CommitResv( [in] RSVP_SESSION *RsvpSession, [in] RSVP_HOP *FlowInstalledIntf, [in] RESV_STYLE *RsvpStyle, [in] int FilterSpecCount, [in] FILTER_SPEC **ppFilterSpecList, [in] IS_FLOWSPEC *pMergedFlowSpec, [in] ULONG CommitDecision );",
            "name": "LPM_CommitResv"
        },
        {
            "signature": "ULONG LPM_Deinitialize( LPM_HANDLE LpmHandle );",
            "name": "LPM_Deinitialize"
        },
        {
            "signature": "void LPM_DeleteState( [in] RSVP_HOP *pRcvdIfAddr, [in] MSG_TYPE RsvpMsgType, [in] RSVP_SESSION *pRsvpSession, [in] RSVP_HOP *pRsvpFromHop, [in] RESV_STYLE *pResvStyle, [in] int FilterSpecCount, [in] FILTER_SPEC **ppFilterSpecList, [in] int TearDownReason );",
            "name": "LPM_DeleteState"
        },
        {
            "signature": "ULONG LPM_GetRsvpObjects( [in] RHANDLE PcmReqHandle, [in] ULONG MaxPdSize, [in] RSVP_HOP *SendingIntfAddr, [in] RSVP_MSG_OBJS *pRsvpMsgObjs, [out] int *pRsvpObjectsCount, [out] RsvpObjHdr ***pppRsvpObjects, [out] void *Reserved );",
            "name": "LPM_GetRsvpObjects"
        },
        {
            "signature": "ULONG LPM_Initialize( [in] LPM_HANDLE LpmHandle, [in] LPM_INIT_INFO *pLpmInitInfo, [out] DWORD *pLpmVersionNumber, [out] PETYPE *pSupportedPeType, [out] VOID *Reserved );",
            "name": "LPM_Initialize"
        },
        {
            "signature": "BOOL LPM_IpAddressTable( [in] ULONG cIpAddrTable, [in] LPMIPTABLE *pIpAddrTable );",
            "name": "LPM_IpAddressTable"
        },
        {
            "signature": "PALLOCMEM Pallocmem; void * Pallocmem( [in] DWORD Size, char *szFileName, DWORD nLine ) {...}",
            "name": "PALLOCMEM callback"
        },
        {
            "signature": "PFREEMEM Pfreemem; void Pfreemem( [in] void *pv, char *szFileName, DWORD nLine ) {...}",
            "name": "PFREEMEM callback"
        }
    ],
    "Lsalookup.h": [],
    "Lzexpand.h": [
        {
            "signature": "INT GetExpandedNameA( [in] LPSTR lpszSource, [out] LPSTR lpszBuffer );",
            "name": "GetExpandedNameA"
        },
        {
            "signature": "INT GetExpandedNameW( [in] LPWSTR lpszSource, [out] LPWSTR lpszBuffer );",
            "name": "GetExpandedNameW"
        },
        {
            "signature": "void LZClose( [in] INT hFile );",
            "name": "LZClose"
        },
        {
            "signature": "LONG LZCopy( [in] INT hfSource, [in] INT hfDest );",
            "name": "LZCopy"
        },
        {
            "signature": "INT LZInit( [in] INT hfSource );",
            "name": "LZInit"
        },
        {
            "signature": "INT LZOpenFileA( [in] LPSTR lpFileName, [out] LPOFSTRUCT lpReOpenBuf, [in] WORD wStyle );",
            "name": "LZOpenFileA"
        },
        {
            "signature": "INT LZOpenFileW( [in] LPWSTR lpFileName, [out] LPOFSTRUCT lpReOpenBuf, [in] WORD wStyle );",
            "name": "LZOpenFileW"
        },
        {
            "signature": "INT LZRead( [in] INT hFile, [out] CHAR *lpBuffer, [in] INT cbRead );",
            "name": "LZRead"
        },
        {
            "signature": "LONG LZSeek( [in] INT hFile, [in] LONG lOffset, [in] INT iOrigin );",
            "name": "LZSeek"
        }
    ],
    "Madcapcl.h": [
        {
            "signature": "void McastApiCleanup();",
            "name": "McastApiCleanup"
        },
        {
            "signature": "DWORD McastApiStartup( [in] PDWORD Version );",
            "name": "McastApiStartup"
        },
        {
            "signature": "DWORD McastEnumerateScopes( [in] IP_ADDR_FAMILY AddrFamily, [in] BOOL ReQuery, [in, out] PMCAST_SCOPE_ENTRY pScopeList, [in, out] PDWORD pScopeLen, [out] PDWORD pScopeCount );",
            "name": "McastEnumerateScopes"
        },
        {
            "signature": "DWORD McastGenUID( [in] LPMCAST_CLIENT_UID pRequestID );",
            "name": "McastGenUID"
        },
        {
            "signature": "DWORD McastReleaseAddress( [in] IP_ADDR_FAMILY AddrFamily, [in] LPMCAST_CLIENT_UID pRequestID, [in] PMCAST_LEASE_REQUEST pReleaseRequest );",
            "name": "McastReleaseAddress"
        },
        {
            "signature": "DWORD McastRenewAddress( [in] IP_ADDR_FAMILY AddrFamily, [in] LPMCAST_CLIENT_UID pRequestID, [in] PMCAST_LEASE_REQUEST pRenewRequest, [in, out] PMCAST_LEASE_RESPONSE pRenewResponse );",
            "name": "McastRenewAddress"
        },
        {
            "signature": "DWORD McastRequestAddress( [in] IP_ADDR_FAMILY AddrFamily, [in] LPMCAST_CLIENT_UID pRequestID, [in] PMCAST_SCOPE_CTX pScopeCtx, [in] PMCAST_LEASE_REQUEST pAddrRequest, [in, out] PMCAST_LEASE_RESPONSE pAddrResponse );",
            "name": "McastRequestAddress"
        }
    ],
    "Magnification.h": [
        {
            "signature": "BOOL MagGetColorEffect( [in] HWND hwnd, [out] PMAGCOLOREFFECT pEffect );",
            "name": "MagGetColorEffect"
        },
        {
            "signature": "BOOL MagGetFullscreenColorEffect( [out] PMAGCOLOREFFECT pEffect );",
            "name": "MagGetFullscreenColorEffect"
        },
        {
            "signature": "BOOL MagGetFullscreenTransform( [out] float *pMagLevel, [out] int *pxOffset, [out] int *pyOffset );",
            "name": "MagGetFullscreenTransform"
        },
        {
            "signature": "MagImageScalingCallback MagGetImageScalingCallback( [in] HWND hwnd );",
            "name": "MagGetImageScalingCallback"
        },
        {
            "signature": "BOOL MagGetInputTransform( [out] BOOL *pfEnabled, [out] LPRECT pRectSource, [out] LPRECT pRectDest );",
            "name": "MagGetInputTransform"
        },
        {
            "signature": "int MagGetWindowFilterList( [in] HWND hwnd, [out] DWORD *pdwFilterMode, [in] int count, [out] HWND *pHWND );",
            "name": "MagGetWindowFilterList"
        },
        {
            "signature": "BOOL MagGetWindowSource( [in] HWND hwnd, [out] RECT *pRect );",
            "name": "MagGetWindowSource"
        },
        {
            "signature": "BOOL MagGetWindowTransform( [in] HWND hwnd, [out] PMAGTRANSFORM pTransform );",
            "name": "MagGetWindowTransform"
        },
        {
            "signature": "MagImageScalingCallback Magimagescalingcallback; BOOL Magimagescalingcallback( [in] HWND hwnd, [in] void *srcdata, [in] MAGIMAGEHEADER srcheader, [out] void *destdata, [in] MAGIMAGEHEADER destheader, [in] RECT unclipped, [in] RECT clipped, [in] HRGN dirty ) {...}",
            "name": "MagImageScalingCallback callback"
        },
        {
            "signature": "BOOL MagInitialize();",
            "name": "MagInitialize"
        },
        {
            "signature": "BOOL MagSetColorEffect( [in] HWND hwnd, [in] PMAGCOLOREFFECT pEffect );",
            "name": "MagSetColorEffect"
        },
        {
            "signature": "BOOL MagSetFullscreenColorEffect( [in] PMAGCOLOREFFECT pEffect );",
            "name": "MagSetFullscreenColorEffect"
        },
        {
            "signature": "BOOL MagSetFullscreenTransform( [in] float magLevel, [in] int xOffset, [in] int yOffset );",
            "name": "MagSetFullscreenTransform"
        },
        {
            "signature": "BOOL MagSetImageScalingCallback( [in] HWND hwnd, [in] MagImageScalingCallback callback );",
            "name": "MagSetImageScalingCallback"
        },
        {
            "signature": "BOOL MagSetInputTransform( [in] BOOL fEnabled, [in] const LPRECT pRectSource, [in] const LPRECT pRectDest );",
            "name": "MagSetInputTransform"
        },
        {
            "signature": "BOOL MagSetWindowFilterList( [in] HWND hwnd, [in] DWORD dwFilterMode, [in] int count, [in] HWND *pHWND );",
            "name": "MagSetWindowFilterList"
        },
        {
            "signature": "BOOL MagSetWindowSource( [in] HWND hwnd, [in] RECT rect );",
            "name": "MagSetWindowSource"
        },
        {
            "signature": "BOOL MagSetWindowTransform( [in] HWND hwnd, [out] PMAGTRANSFORM pTransform );",
            "name": "MagSetWindowTransform"
        },
        {
            "signature": "BOOL MagShowSystemCursor( [in] BOOL fShowCursor );",
            "name": "MagShowSystemCursor"
        },
        {
            "signature": "BOOL MagUninitialize();",
            "name": "MagUninitialize"
        }
    ],
    "Manipulations.h": [],
    "Mapi.h": [
        {
            "signature": "MAPIADDRESS Mapiaddress; ULONG Mapiaddress( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] LPSTR lpszCaption, [in] ULONG nEditFields, [in] LPSTR lpszLabels, [in] ULONG nRecips, [in] lpMapiRecipDesc lpRecips, [in] FLAGS flFlags, ULONG ulReserved, [out] LPULONG lpnNewRecips, lpMapiRecipDesc *lppNewRecips ) {...}",
            "name": "MAPIADDRESS callback"
        },
        {
            "signature": "MAPIDELETEMAIL Mapideletemail; ULONG Mapideletemail( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] LPSTR lpszMessageID, FLAGS flFlags, ULONG ulReserved ) {...}",
            "name": "MAPIDELETEMAIL callback"
        },
        {
            "signature": "MAPIDETAILS Mapidetails; ULONG Mapidetails( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] lpMapiRecipDesc lpRecip, [in] FLAGS flFlags, ULONG ulReserved ) {...}",
            "name": "MAPIDETAILS callback"
        },
        {
            "signature": "MAPIFINDNEXT Mapifindnext; ULONG Mapifindnext( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] LPSTR lpszMessageType, [in] LPSTR lpszSeedMessageID, [in] FLAGS flFlags, ULONG ulReserved, [out] LPSTR lpszMessageID ) {...}",
            "name": "MAPIFINDNEXT callback"
        },
        {
            "signature": "ULONG MAPIFreeBuffer( [in] LPVOID pv );",
            "name": "MAPIFreeBuffer"
        },
        {
            "signature": "MAPILOGOFF Mapilogoff; ULONG Mapilogoff( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, FLAGS flFlags, ULONG ulReserved ) {...}",
            "name": "MAPILOGOFF callback"
        },
        {
            "signature": "MAPILOGON Mapilogon; ULONG Mapilogon( [in] ULONG_PTR ulUIParam, [in, optional] LPSTR lpszProfileName, [in, optional] LPSTR lpszPassword, [in] FLAGS flFlags, ULONG ulReserved, [out] LPLHANDLE lplhSession ) {...}",
            "name": "MAPILOGON callback"
        },
        {
            "signature": "MAPIREADMAIL Mapireadmail; ULONG Mapireadmail( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] LPSTR lpszMessageID, [in] FLAGS flFlags, ULONG ulReserved, lpMapiMessage *lppMessage ) {...}",
            "name": "MAPIREADMAIL callback"
        },
        {
            "signature": "MAPIRESOLVENAME Mapiresolvename; ULONG Mapiresolvename( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] LPSTR lpszName, [in] FLAGS flFlags, ULONG ulReserved, lpMapiRecipDesc *lppRecip ) {...}",
            "name": "MAPIRESOLVENAME callback"
        },
        {
            "signature": "MAPISAVEMAIL Mapisavemail; ULONG Mapisavemail( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] lpMapiMessage lpMessage, [in] FLAGS flFlags, ULONG ulReserved, [in] LPSTR lpszMessageID ) {...}",
            "name": "MAPISAVEMAIL callback"
        },
        {
            "signature": "MAPISENDDOCUMENTS Mapisenddocuments; ULONG Mapisenddocuments( [in] ULONG_PTR ulUIParam, [in] LPSTR lpszDelimChar, [in] LPSTR lpszFilePaths, [in] LPSTR lpszFileNames, ULONG ulReserved ) {...}",
            "name": "MAPISENDDOCUMENTS callback"
        },
        {
            "signature": "MAPISENDMAIL Mapisendmail; ULONG Mapisendmail( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] lpMapiMessage lpMessage, [in] FLAGS flFlags, ULONG ulReserved ) {...}",
            "name": "MAPISENDMAIL callback"
        },
        {
            "signature": "MAPISENDMAILW Mapisendmailw; ULONG Mapisendmailw( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] lpMapiMessageW lpMessage, [in] FLAGS flFlags, ULONG ulReserved ) {...}",
            "name": "MAPISENDMAILW callback"
        }
    ],
    "Mapiunicodehelp.h": [
        {
            "signature": "ULONG MAPISendMailHelper( [in] LHANDLE lhSession, [in] ULONG_PTR ulUIParam, [in] lpMapiMessageW lpMessage, [in] FLAGS flFlags, [in] ULONG ulReserved );",
            "name": "MAPISendMailHelper"
        }
    ],
    "Mbnapi.h": [],
    "Mcx.h": [],
    "Mdhcp.h": [],
    "Mdmregistration.h": [
        {
            "signature": "HRESULT DiscoverManagementService( [in] LPCWSTR pszUPN, [out] PMANAGEMENT_SERVICE_INFO *ppMgmtInfo );",
            "name": "DiscoverManagementService"
        },
        {
            "signature": "HRESULT DiscoverManagementServiceEx( [in] LPCWSTR pszUPN, [in] LPCWSTR pszDiscoveryServiceCandidate, [out] PMANAGEMENT_SERVICE_INFO *ppMgmtInfo );",
            "name": "DiscoverManagementServiceEx"
        },
        {
            "signature": "HRESULT GetDeviceManagementConfigInfo( PCWSTR providerID, DWORD *configStringBufferLength, PWSTR configString );",
            "name": "GetDeviceManagementConfigInfo"
        },
        {
            "signature": "HRESULT GetDeviceRegistrationInfo( [in] REGISTRATION_INFORMATION_CLASS DeviceInformationClass, [out] PVOID *ppDeviceRegistrationInfo );",
            "name": "GetDeviceRegistrationInfo"
        },
        {
            "signature": "HRESULT GetManagementAppHyperlink( [in] DWORD cchHyperlink, LPWSTR pszHyperlink );",
            "name": "GetManagementAppHyperlink"
        },
        {
            "signature": "HRESULT IsDeviceRegisteredWithManagement( [out] BOOL *pfIsDeviceRegisteredWithManagement, [in, optional] DWORD cchUPN, [out, optional] LPWSTR pszUPN );",
            "name": "IsDeviceRegisteredWithManagement"
        },
        {
            "signature": "HRESULT IsManagementRegistrationAllowed( [out] BOOL *pfIsManagementRegistrationAllowed );",
            "name": "IsManagementRegistrationAllowed"
        },
        {
            "signature": "HRESULT RegisterDeviceWithManagement( [in] LPCWSTR pszUPN, [in] LPCWSTR ppszMDMServiceUri, [in] LPCWSTR ppzsAccessToken );",
            "name": "RegisterDeviceWithManagement"
        },
        {
            "signature": "HRESULT RegisterDeviceWithManagementUsingAADCredentials( [in] HANDLE UserToken );",
            "name": "RegisterDeviceWithManagementUsingAADCredentials"
        },
        {
            "signature": "HRESULT RegisterDeviceWithManagementUsingAADDeviceCredentials();",
            "name": "RegisterDeviceWithManagementUsingAADDeviceCredentials"
        },
        {
            "signature": "HRESULT SetDeviceManagementConfigInfo( PCWSTR providerID, PCWSTR configString );",
            "name": "SetDeviceManagementConfigInfo"
        },
        {
            "signature": "HRESULT SetManagedExternally( [in] BOOL IsManagedExternally );",
            "name": "SetManagedExternally"
        },
        {
            "signature": "HRESULT UnregisterDeviceWithManagement( LPCWSTR enrollmentID );",
            "name": "UnregisterDeviceWithManagement"
        }
    ],
    "Memoryapi.h": [
        {
            "signature": "BOOL AllocateUserPhysicalPages( [in] HANDLE hProcess, [in, out] PULONG_PTR NumberOfPages, [out] PULONG_PTR PageArray );",
            "name": "AllocateUserPhysicalPages"
        },
        {
            "signature": "BOOL AllocateUserPhysicalPagesNuma( [in] HANDLE hProcess, [in, out] PULONG_PTR NumberOfPages, [out] PULONG_PTR PageArray, [in] DWORD nndPreferred );",
            "name": "AllocateUserPhysicalPagesNuma"
        },
        {
            "signature": "HANDLE CreateFileMapping2( HANDLE File, SECURITY_ATTRIBUTES *SecurityAttributes, ULONG DesiredAccess, ULONG PageProtection, ULONG AllocationAttributes, ULONG64 MaximumSize, PCWSTR Name, MEM_EXTENDED_PARAMETER *ExtendedParameters, ULONG ParameterCount );",
            "name": "CreateFileMapping2"
        },
        {
            "signature": "HANDLE CreateFileMappingFromApp( [in] HANDLE hFile, [in, optional] PSECURITY_ATTRIBUTES SecurityAttributes, [in] ULONG PageProtection, [in] ULONG64 MaximumSize, [in, optional] PCWSTR Name );",
            "name": "CreateFileMappingFromApp"
        },
        {
            "signature": "HANDLE CreateFileMappingNumaW( [in] HANDLE hFile, [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes, [in] DWORD flProtect, [in] DWORD dwMaximumSizeHigh, [in] DWORD dwMaximumSizeLow, [in, optional] LPCWSTR lpName, [in] DWORD nndPreferred );",
            "name": "CreateFileMappingNumaW"
        },
        {
            "signature": "HANDLE CreateFileMappingW( [in] HANDLE hFile, [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes, [in] DWORD flProtect, [in] DWORD dwMaximumSizeHigh, [in] DWORD dwMaximumSizeLow, [in, optional] LPCWSTR lpName );",
            "name": "CreateFileMappingW"
        },
        {
            "signature": "HANDLE CreateMemoryResourceNotification( [in] MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType );",
            "name": "CreateMemoryResourceNotification"
        },
        {
            "signature": "DWORD DiscardVirtualMemory( [in] PVOID VirtualAddress, [in] SIZE_T Size );",
            "name": "DiscardVirtualMemory"
        },
        {
            "signature": "BOOL FlushViewOfFile( [in] LPCVOID lpBaseAddress, [in] SIZE_T dwNumberOfBytesToFlush );",
            "name": "FlushViewOfFile"
        },
        {
            "signature": "BOOL FreeUserPhysicalPages( [in] HANDLE hProcess, [in, out] PULONG_PTR NumberOfPages, [in] PULONG_PTR PageArray );",
            "name": "FreeUserPhysicalPages"
        },
        {
            "signature": "SIZE_T GetLargePageMinimum();",
            "name": "GetLargePageMinimum"
        },
        {
            "signature": "BOOL GetMemoryErrorHandlingCapabilities( [out] PULONG Capabilities );",
            "name": "GetMemoryErrorHandlingCapabilities"
        },
        {
            "signature": "BOOL GetProcessWorkingSetSize( [in] HANDLE hProcess, [out] PSIZE_T lpMinimumWorkingSetSize, [out] PSIZE_T lpMaximumWorkingSetSize );",
            "name": "GetProcessWorkingSetSize"
        },
        {
            "signature": "BOOL GetProcessWorkingSetSizeEx( [in] HANDLE hProcess, [out] PSIZE_T lpMinimumWorkingSetSize, [out] PSIZE_T lpMaximumWorkingSetSize, [out] PDWORD Flags );",
            "name": "GetProcessWorkingSetSizeEx"
        },
        {
            "signature": "BOOL GetSystemFileCacheSize( [out] PSIZE_T lpMinimumFileCacheSize, [out] PSIZE_T lpMaximumFileCacheSize, [out] PDWORD lpFlags );",
            "name": "GetSystemFileCacheSize"
        },
        {
            "signature": "UINT GetWriteWatch( [in] DWORD dwFlags, [in] PVOID lpBaseAddress, [in] SIZE_T dwRegionSize, [out] PVOID *lpAddresses, [in, out] ULONG_PTR *lpdwCount, [out] LPDWORD lpdwGranularity );",
            "name": "GetWriteWatch"
        },
        {
            "signature": "BOOL MapUserPhysicalPages( [in] PVOID VirtualAddress, [in] ULONG_PTR NumberOfPages, [in] PULONG_PTR PageArray );",
            "name": "MapUserPhysicalPages"
        },
        {
            "signature": "LPVOID MapViewOfFile( [in] HANDLE hFileMappingObject, [in] DWORD dwDesiredAccess, [in] DWORD dwFileOffsetHigh, [in] DWORD dwFileOffsetLow, [in] SIZE_T dwNumberOfBytesToMap );",
            "name": "MapViewOfFile"
        },
        {
            "signature": "PVOID MapViewOfFile2( [in] HANDLE FileMappingHandle, [in] HANDLE ProcessHandle, [in] ULONG64 Offset, [in, optional] PVOID BaseAddress, [in] SIZE_T ViewSize, [in] ULONG AllocationType, [in] ULONG PageProtection );",
            "name": "MapViewOfFile2"
        },
        {
            "signature": "PVOID MapViewOfFile3( [in] HANDLE FileMapping, [in] HANDLE Process, [in, optional] PVOID BaseAddress, [in] ULONG64 Offset, [in] SIZE_T ViewSize, [in] ULONG AllocationType, [in] ULONG PageProtection, [in, out, optional] MEM_EXTENDED_PARAMETER *ExtendedParameters, [in] ULONG ParameterCount );",
            "name": "MapViewOfFile3"
        },
        {
            "signature": "PVOID MapViewOfFile3FromApp( [in] HANDLE FileMapping, [in] HANDLE Process, [in, optional] PVOID BaseAddress, [in] ULONG64 Offset, [in] SIZE_T ViewSize, [in] ULONG AllocationType, [in] ULONG PageProtection, [in, out, optional] MEM_EXTENDED_PARAMETER *ExtendedParameters, [in] ULONG ParameterCount );",
            "name": "MapViewOfFile3FromApp"
        },
        {
            "signature": "LPVOID MapViewOfFileEx( [in] HANDLE hFileMappingObject, [in] DWORD dwDesiredAccess, [in] DWORD dwFileOffsetHigh, [in] DWORD dwFileOffsetLow, [in] SIZE_T dwNumberOfBytesToMap, [in, optional] LPVOID lpBaseAddress );",
            "name": "MapViewOfFileEx"
        },
        {
            "signature": "PVOID MapViewOfFileFromApp( [in] HANDLE hFileMappingObject, [in] ULONG DesiredAccess, [in] ULONG64 FileOffset, [in] SIZE_T NumberOfBytesToMap );",
            "name": "MapViewOfFileFromApp"
        },
        {
            "signature": "PVOID MapViewOfFileNuma2( [in] HANDLE FileMappingHandle, [in] HANDLE ProcessHandle, [in] ULONG64 Offset, [in, optional] PVOID BaseAddress, [in] SIZE_T ViewSize, [in] ULONG AllocationType, [in] ULONG PageProtection, [in] ULONG PreferredNode );",
            "name": "MapViewOfFileNuma2"
        },
        {
            "signature": "DWORD OfferVirtualMemory( [in] PVOID VirtualAddress, [in] SIZE_T Size, [in] OFFER_PRIORITY Priority );",
            "name": "OfferVirtualMemory"
        },
        {
            "signature": "HANDLE OpenFileMappingFromApp( [in] ULONG DesiredAccess, [in] BOOL InheritHandle, [in] PCWSTR Name );",
            "name": "OpenFileMappingFromApp"
        },
        {
            "signature": "HANDLE OpenFileMappingW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpName );",
            "name": "OpenFileMappingW"
        },
        {
            "signature": "BOOL PrefetchVirtualMemory( [in] HANDLE hProcess, [in] ULONG_PTR NumberOfEntries, [in] PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses, [in] ULONG Flags );",
            "name": "PrefetchVirtualMemory"
        },
        {
            "signature": "BOOL QueryMemoryResourceNotification( [in] HANDLE ResourceNotificationHandle, [out] PBOOL ResourceState );",
            "name": "QueryMemoryResourceNotification"
        },
        {
            "signature": "BOOL QueryVirtualMemoryInformation( [in] HANDLE Process, [in] const VOID *VirtualAddress, [in] WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass, [out] PVOID MemoryInformation, [in] SIZE_T MemoryInformationSize, [out, optional] PSIZE_T ReturnSize );",
            "name": "QueryVirtualMemoryInformation"
        },
        {
            "signature": "BOOL ReadProcessMemory( [in] HANDLE hProcess, [in] LPCVOID lpBaseAddress, [out] LPVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesRead );",
            "name": "ReadProcessMemory"
        },
        {
            "signature": "DWORD ReclaimVirtualMemory( [in] void const *VirtualAddress, [in] SIZE_T Size );",
            "name": "ReclaimVirtualMemory"
        },
        {
            "signature": "PVOID RegisterBadMemoryNotification( [in] PBAD_MEMORY_CALLBACK_ROUTINE Callback );",
            "name": "RegisterBadMemoryNotification"
        },
        {
            "signature": "UINT ResetWriteWatch( [in] LPVOID lpBaseAddress, [in] SIZE_T dwRegionSize );",
            "name": "ResetWriteWatch"
        },
        {
            "signature": "BOOL SetProcessValidCallTargets( [in] HANDLE hProcess, [in] PVOID VirtualAddress, [in] SIZE_T RegionSize, [in] ULONG NumberOfOffsets, [in, out] PCFG_CALL_TARGET_INFO OffsetInformation );",
            "name": "SetProcessValidCallTargets"
        },
        {
            "signature": "BOOL SetProcessWorkingSetSize( [in] HANDLE hProcess, [in] SIZE_T dwMinimumWorkingSetSize, [in] SIZE_T dwMaximumWorkingSetSize );",
            "name": "SetProcessWorkingSetSize"
        },
        {
            "signature": "BOOL SetProcessWorkingSetSizeEx( [in] HANDLE hProcess, [in] SIZE_T dwMinimumWorkingSetSize, [in] SIZE_T dwMaximumWorkingSetSize, [in] DWORD Flags );",
            "name": "SetProcessWorkingSetSizeEx"
        },
        {
            "signature": "BOOL SetSystemFileCacheSize( [in] SIZE_T MinimumFileCacheSize, [in] SIZE_T MaximumFileCacheSize, [in] DWORD Flags );",
            "name": "SetSystemFileCacheSize"
        },
        {
            "signature": "BOOL UnmapViewOfFile( [in] LPCVOID lpBaseAddress );",
            "name": "UnmapViewOfFile"
        },
        {
            "signature": "BOOL UnmapViewOfFile2( [in] HANDLE Process, [in] PVOID BaseAddress, [in] ULONG UnmapFlags );",
            "name": "UnmapViewOfFile2"
        },
        {
            "signature": "BOOL UnmapViewOfFileEx( [in] PVOID BaseAddress, [in] ULONG UnmapFlags );",
            "name": "UnmapViewOfFileEx"
        },
        {
            "signature": "BOOL UnregisterBadMemoryNotification( [in] PVOID RegistrationHandle );",
            "name": "UnregisterBadMemoryNotification"
        },
        {
            "signature": "LPVOID VirtualAlloc( [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect );",
            "name": "VirtualAlloc"
        },
        {
            "signature": "PVOID VirtualAlloc2( [in, optional] HANDLE Process, [in, optional] PVOID BaseAddress, [in] SIZE_T Size, [in] ULONG AllocationType, [in] ULONG PageProtection, [in, out, optional] MEM_EXTENDED_PARAMETER *ExtendedParameters, [in] ULONG ParameterCount );",
            "name": "VirtualAlloc2"
        },
        {
            "signature": "PVOID VirtualAlloc2FromApp( [in, optional] HANDLE Process, [in, optional] PVOID BaseAddress, [in] SIZE_T Size, [in] ULONG AllocationType, [in] ULONG PageProtection, [in, out, optional] MEM_EXTENDED_PARAMETER *ExtendedParameters, [in] ULONG ParameterCount );",
            "name": "VirtualAlloc2FromApp"
        },
        {
            "signature": "LPVOID VirtualAllocEx( [in] HANDLE hProcess, [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect );",
            "name": "VirtualAllocEx"
        },
        {
            "signature": "LPVOID VirtualAllocExNuma( [in] HANDLE hProcess, [in, optional] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flAllocationType, [in] DWORD flProtect, [in] DWORD nndPreferred );",
            "name": "VirtualAllocExNuma"
        },
        {
            "signature": "PVOID VirtualAllocFromApp( [in, optional] PVOID BaseAddress, [in] SIZE_T Size, [in] ULONG AllocationType, [in] ULONG Protection );",
            "name": "VirtualAllocFromApp"
        },
        {
            "signature": "BOOL VirtualFree( [in] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD dwFreeType );",
            "name": "VirtualFree"
        },
        {
            "signature": "BOOL VirtualFreeEx( [in] HANDLE hProcess, [in] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD dwFreeType );",
            "name": "VirtualFreeEx"
        },
        {
            "signature": "BOOL VirtualLock( [in] LPVOID lpAddress, [in] SIZE_T dwSize );",
            "name": "VirtualLock"
        },
        {
            "signature": "BOOL VirtualProtect( [in] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flNewProtect, [out] PDWORD lpflOldProtect );",
            "name": "VirtualProtect"
        },
        {
            "signature": "BOOL VirtualProtectEx( [in] HANDLE hProcess, [in] LPVOID lpAddress, [in] SIZE_T dwSize, [in] DWORD flNewProtect, [out] PDWORD lpflOldProtect );",
            "name": "VirtualProtectEx"
        },
        {
            "signature": "BOOL VirtualProtectFromApp( [in] PVOID Address, [in] SIZE_T Size, [in] ULONG NewProtection, [out] PULONG OldProtection );",
            "name": "VirtualProtectFromApp"
        },
        {
            "signature": "SIZE_T VirtualQuery( [in, optional] LPCVOID lpAddress, [out] PMEMORY_BASIC_INFORMATION lpBuffer, [in] SIZE_T dwLength );",
            "name": "VirtualQuery"
        },
        {
            "signature": "SIZE_T VirtualQueryEx( [in] HANDLE hProcess, [in, optional] LPCVOID lpAddress, [out] PMEMORY_BASIC_INFORMATION lpBuffer, [in] SIZE_T dwLength );",
            "name": "VirtualQueryEx"
        },
        {
            "signature": "BOOL VirtualUnlock( [in] LPVOID lpAddress, [in] SIZE_T dwSize );",
            "name": "VirtualUnlock"
        },
        {
            "signature": "BOOL WriteProcessMemory( [in] HANDLE hProcess, [in] LPVOID lpBaseAddress, [in] LPCVOID lpBuffer, [in] SIZE_T nSize, [out] SIZE_T *lpNumberOfBytesWritten );",
            "name": "WriteProcessMemory"
        }
    ],
    "Memorybuffer.h": [],
    "Mergemod.h": [],
    "Messagedispatcherapi.h": [
        {
            "signature": "void CoHandlePriorityEventsFromMessagePump();",
            "name": "CoHandlePriorityEventsFromMessagePump"
        },
        {
            "signature": "void CoSetMessageDispatcher( [in, optional] PMessageDispatcher pMessageDispatcher );",
            "name": "CoSetMessageDispatcher"
        }
    ],
    "Methodco.h": [],
    "Mfapi.h": [
        {
            "signature": "HRESULT MFAddPeriodicCallback( [in] MFPERIODICCALLBACK Callback, [in] IUnknown *pContext, [out] DWORD *pdwKey );",
            "name": "MFAddPeriodicCallback"
        },
        {
            "signature": "HRESULT MFAllocateSerialWorkQueue( [in] DWORD dwWorkQueue, [out] DWORD *pdwWorkQueue );",
            "name": "MFAllocateSerialWorkQueue"
        },
        {
            "signature": "HRESULT MFAllocateWorkQueue( [out] DWORD *pdwWorkQueue );",
            "name": "MFAllocateWorkQueue"
        },
        {
            "signature": "HRESULT MFAllocateWorkQueueEx( [in] MFASYNC_WORKQUEUE_TYPE WorkQueueType, [out] DWORD *pdwWorkQueue );",
            "name": "MFAllocateWorkQueueEx"
        },
        {
            "signature": "HRESULT MFAverageTimePerFrameToFrameRate( [in] UINT64 unAverageTimePerFrame, [out] UINT32 *punNumerator, [out] UINT32 *punDenominator );",
            "name": "MFAverageTimePerFrameToFrameRate"
        },
        {
            "signature": "HRESULT MFBeginCreateFile( [in] MF_FILE_ACCESSMODE AccessMode, [in] MF_FILE_OPENMODE OpenMode, [in] MF_FILE_FLAGS fFlags, [in] LPCWSTR pwszFilePath, [in] IMFAsyncCallback *pCallback, [in] IUnknown *pState, [out] IUnknown **ppCancelCookie );",
            "name": "MFBeginCreateFile"
        },
        {
            "signature": "HRESULT MFBeginRegisterWorkQueueWithMMCSS( [in] DWORD dwWorkQueueId, [in] LPCWSTR wszClass, [in] DWORD dwTaskId, [in] IMFAsyncCallback *pDoneCallback, [in] IUnknown *pDoneState );",
            "name": "MFBeginRegisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT MFBeginRegisterWorkQueueWithMMCSSEx( [in] DWORD dwWorkQueueId, [in] LPCWSTR wszClass, [in] DWORD dwTaskId, [in] LONG lPriority, [in] IMFAsyncCallback *pDoneCallback, [in] IUnknown *pDoneState );",
            "name": "MFBeginRegisterWorkQueueWithMMCSSEx"
        },
        {
            "signature": "HRESULT MFBeginUnregisterWorkQueueWithMMCSS( [in] DWORD dwWorkQueueId, [in] IMFAsyncCallback *pDoneCallback, [in] IUnknown *pDoneState );",
            "name": "MFBeginUnregisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT MFCalculateBitmapImageSize( [in] const BITMAPINFOHEADER *pBMIH, [in] UINT32 cbBufSize, [out] UINT32 *pcbImageSize, [out] BOOL *pbKnown );",
            "name": "MFCalculateBitmapImageSize"
        },
        {
            "signature": "HRESULT MFCalculateImageSize( [in] REFGUID guidSubtype, [in] UINT32 unWidth, [in] UINT32 unHeight, [out] UINT32 *pcbImageSize );",
            "name": "MFCalculateImageSize"
        },
        {
            "signature": "HRESULT MFCancelCreateFile( [in] IUnknown *pCancelCookie );",
            "name": "MFCancelCreateFile"
        },
        {
            "signature": "HRESULT MFCancelWorkItem( [in] MFWORKITEM_KEY Key );",
            "name": "MFCancelWorkItem"
        },
        {
            "signature": "HRESULT MFCombineSamples( IMFSample *pSample, IMFSample *pSampleToAdd, DWORD dwMaxMergedDurationInMS, BOOL *pMerged );",
            "name": "MFCombineSamples"
        },
        {
            "signature": "BOOL MFCompareFullToPartialMediaType( IMFMediaType *pMFTypeFull, IMFMediaType *pMFTypePartial );",
            "name": "MFCompareFullToPartialMediaType"
        },
        {
            "signature": "HRESULT MFConvertColorInfoFromDXVA( [in, out] MFVIDEOFORMAT *pToFormat, [in] DWORD dwFromDXVA );",
            "name": "MFConvertColorInfoFromDXVA"
        },
        {
            "signature": "HRESULT MFConvertColorInfoToDXVA( [out] DWORD *pdwToDXVA, [in] const MFVIDEOFORMAT *pFromFormat );",
            "name": "MFConvertColorInfoToDXVA"
        },
        {
            "signature": "HRESULT MFConvertFromFP16Array( [in] float *pDest, [in] const WORD *pSrc, [in] DWORD dwCount );",
            "name": "MFConvertFromFP16Array"
        },
        {
            "signature": "HRESULT MFConvertToFP16Array( [in] WORD *pDest, [in] const float *pSrc, [in] DWORD dwCount );",
            "name": "MFConvertToFP16Array"
        },
        {
            "signature": "HRESULT MFCopyImage( [in] BYTE *pDest, [in] LONG lDestStride, [in] const BYTE *pSrc, [in] LONG lSrcStride, [in] DWORD dwWidthInBytes, [in] DWORD dwLines );",
            "name": "MFCopyImage"
        },
        {
            "signature": "HRESULT MFCreate2DMediaBuffer( [in] DWORD dwWidth, [in] DWORD dwHeight, [in] DWORD dwFourCC, [in] BOOL fBottomUp, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreate2DMediaBuffer"
        },
        {
            "signature": "HRESULT MFCreateAlignedMemoryBuffer( DWORD cbMaxLength, DWORD cbAligment, IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateAlignedMemoryBuffer"
        },
        {
            "signature": "HRESULT MFCreateAMMediaTypeFromMFMediaType( IMFMediaType *pMFType, GUID guidFormatBlockType, AM_MEDIA_TYPE **ppAMType );",
            "name": "MFCreateAMMediaTypeFromMFMediaType"
        },
        {
            "signature": "HRESULT MFCreateAsyncResult( IUnknown *punkObject, IMFAsyncCallback *pCallback, IUnknown *punkState, IMFAsyncResult **ppAsyncResult );",
            "name": "MFCreateAsyncResult"
        },
        {
            "signature": "HRESULT MFCreateAttributes( [out] IMFAttributes **ppMFAttributes, [in] UINT32 cInitialSize );",
            "name": "MFCreateAttributes"
        },
        {
            "signature": "HRESULT MFCreateAudioMediaType( [in] const WAVEFORMATEX *pAudioFormat, [out] IMFAudioMediaType **ppIAudioMediaType );",
            "name": "MFCreateAudioMediaType"
        },
        {
            "signature": "HRESULT MFCreateCollection( [out] IMFCollection **ppIMFCollection );",
            "name": "MFCreateCollection"
        },
        {
            "signature": "HRESULT MFCreateDXGIDeviceManager( [out] UINT *resetToken, [out] IMFDXGIDeviceManager **ppDeviceManager );",
            "name": "MFCreateDXGIDeviceManager"
        },
        {
            "signature": "HRESULT MFCreateDXGISurfaceBuffer( [in] REFIID riid, [in] IUnknown *punkSurface, [in] UINT uSubresourceIndex, [in] BOOL fBottomUpWhenLinear, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateDXGISurfaceBuffer"
        },
        {
            "signature": "HRESULT MFCreateDXSurfaceBuffer( [in] REFIID riid, [in] IUnknown *punkSurface, [in] BOOL fBottomUpWhenLinear, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateDXSurfaceBuffer"
        },
        {
            "signature": "HRESULT MFCreateEventQueue( IMFMediaEventQueue **ppMediaEventQueue );",
            "name": "MFCreateEventQueue"
        },
        {
            "signature": "HRESULT MFCreateFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, LPCWSTR pwszFileURL, IMFByteStream **ppIByteStream );",
            "name": "MFCreateFile"
        },
        {
            "signature": "HRESULT MFCreateLegacyMediaBufferOnMFMediaBuffer( IMFSample *pSample, IMFMediaBuffer *pMFMediaBuffer, DWORD cbOffset, IMediaBuffer **ppMediaBuffer );",
            "name": "MFCreateLegacyMediaBufferOnMFMediaBuffer"
        },
        {
            "signature": "HRESULT MFCreateMediaBufferFromMediaType( [in] IMFMediaType *pMediaType, [in] LONGLONG llDuration, [in] DWORD dwMinLength, [in] DWORD dwMinAlignment, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateMediaBufferFromMediaType"
        },
        {
            "signature": "HRESULT MFCreateMediaBufferWrapper( [in] IMFMediaBuffer *pBuffer, [in] DWORD cbOffset, [in] DWORD dwLength, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateMediaBufferWrapper"
        },
        {
            "signature": "HRESULT MFCreateMediaEvent( MediaEventType met, REFGUID guidExtendedType, HRESULT hrStatus, const PROPVARIANT *pvValue, IMFMediaEvent **ppEvent );",
            "name": "MFCreateMediaEvent"
        },
        {
            "signature": "HRESULT MFCreateMediaExtensionActivate( [in] PCWSTR szActivatableClassId, [in] IUnknown *pConfiguration, [in] REFIID riid, [out] LPVOID *ppvObject );",
            "name": "MFCreateMediaExtensionActivate"
        },
        {
            "signature": "HRESULT MFCreateMediaType( IMFMediaType **ppMFType );",
            "name": "MFCreateMediaType"
        },
        {
            "signature": "HRESULT MFCreateMediaTypeFromRepresentation( [in] GUID guidRepresentation, [in] LPVOID pvRepresentation, [out] IMFMediaType **ppIMediaType );",
            "name": "MFCreateMediaTypeFromRepresentation"
        },
        {
            "signature": "HRESULT MFCreateMemoryBuffer( DWORD cbMaxLength, IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateMemoryBuffer"
        },
        {
            "signature": "HRESULT MFCreateMFByteStreamWrapper( [in] IMFByteStream *pStream, [in] IMFByteStream **ppStreamWrapper );",
            "name": "MFCreateMFByteStreamWrapper"
        },
        {
            "signature": "HRESULT MFCreateMFVideoFormatFromMFMediaType( [in] IMFMediaType *pMFType, [out] MFVIDEOFORMAT **ppMFVF, [out] UINT32 *pcbSize );",
            "name": "MFCreateMFVideoFormatFromMFMediaType"
        },
        {
            "signature": "HRESULT MFCreateMuxStreamAttributes( [in] IMFCollection *pAttributesToMux, [out] IMFAttributes **ppMuxAttribs );",
            "name": "MFCreateMuxStreamAttributes"
        },
        {
            "signature": "HRESULT MFCreateMuxStreamMediaType( [in] IMFCollection *pMediaTypesToMux, [out] IMFMediaType **ppMuxMediaType );",
            "name": "MFCreateMuxStreamMediaType"
        },
        {
            "signature": "HRESULT MFCreateMuxStreamSample( [in] IMFCollection *pSamplesToMux, [out] IMFSample **ppMuxSample );",
            "name": "MFCreateMuxStreamSample"
        },
        {
            "signature": "HRESULT MFCreateSample( IMFSample **ppIMFSample );",
            "name": "MFCreateSample"
        },
        {
            "signature": "HRESULT MFCreateTempFile( MF_FILE_ACCESSMODE AccessMode, MF_FILE_OPENMODE OpenMode, MF_FILE_FLAGS fFlags, IMFByteStream **ppIByteStream );",
            "name": "MFCreateTempFile"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaType( [in] const MFVIDEOFORMAT *pVideoFormat, [out] IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaType"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaTypeFromBitMapInfoHeader( const BITMAPINFOHEADER *pbmihBitMapInfoHeader, DWORD dwPixelAspectRatioX, DWORD dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, QWORD VideoFlags, QWORD qwFramesPerSecondNumerator, QWORD qwFramesPerSecondDenominator, DWORD dwMaxBitRate, IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaTypeFromBitMapInfoHeader"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaTypeFromBitMapInfoHeaderEx( [in] const BITMAPINFOHEADER *pbmihBitMapInfoHeader, [in] UINT32 cbBitMapInfoHeader, DWORD dwPixelAspectRatioX, DWORD dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, QWORD VideoFlags, DWORD dwFramesPerSecondNumerator, DWORD dwFramesPerSecondDenominator, DWORD dwMaxBitRate, [out] IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaTypeFromBitMapInfoHeaderEx"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaTypeFromSubtype( [in] const GUID *pAMSubtype, [out] IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaTypeFromSubtype"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaTypeFromVideoInfoHeader( const KS_VIDEOINFOHEADER *pVideoInfoHeader, DWORD cbVideoInfoHeader, DWORD dwPixelAspectRatioX, DWORD dwPixelAspectRatioY, MFVideoInterlaceMode InterlaceMode, QWORD VideoFlags, const GUID *pSubtype, IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaTypeFromVideoInfoHeader"
        },
        {
            "signature": "HRESULT MFCreateVideoMediaTypeFromVideoInfoHeader2( const KS_VIDEOINFOHEADER2 *pVideoInfoHeader, DWORD cbVideoInfoHeader, QWORD AdditionalVideoFlags, const GUID *pSubtype, IMFVideoMediaType **ppIVideoMediaType );",
            "name": "MFCreateVideoMediaTypeFromVideoInfoHeader2"
        },
        {
            "signature": "HRESULT MFCreateVideoSampleAllocatorEx( [in] REFIID riid, [out] void **ppSampleAllocator );",
            "name": "MFCreateVideoSampleAllocatorEx"
        },
        {
            "signature": "HRESULT MFCreateWaveFormatExFromMFMediaType( IMFMediaType *pMFType, WAVEFORMATEX **ppWF, UINT32 *pcbSize, UINT32 Flags );",
            "name": "MFCreateWaveFormatExFromMFMediaType"
        },
        {
            "signature": "HRESULT MFCreateWICBitmapBuffer( [in] REFIID riid, [in] IUnknown *punkSurface, [out] IMFMediaBuffer **ppBuffer );",
            "name": "MFCreateWICBitmapBuffer"
        },
        {
            "signature": "HRESULT MFEndCreateFile( [in] IMFAsyncResult *pResult, [out] IMFByteStream **ppFile );",
            "name": "MFEndCreateFile"
        },
        {
            "signature": "HRESULT MFEndRegisterWorkQueueWithMMCSS( [in] IMFAsyncResult *pResult, [in] DWORD *pdwTaskId );",
            "name": "MFEndRegisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT MFEndUnregisterWorkQueueWithMMCSS( [in] IMFAsyncResult *pResult );",
            "name": "MFEndUnregisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT MFFrameRateToAverageTimePerFrame( [in] UINT32 unNumerator, [in] UINT32 unDenominator, [out] UINT64 *punAverageTimePerFrame );",
            "name": "MFFrameRateToAverageTimePerFrame"
        },
        {
            "signature": "HRESULT MFGetAttribute2UINT32asUINT64( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [out] UINT32 *punHigh32, [out] UINT32 *punLow32 );",
            "name": "MFGetAttribute2UINT32asUINT64"
        },
        {
            "signature": "double MFGetAttributeDouble( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] double fDefault );",
            "name": "MFGetAttributeDouble"
        },
        {
            "signature": "HRESULT MFGetAttributeRatio( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [out] UINT32 *punNumerator, [out] UINT32 *punDenominator );",
            "name": "MFGetAttributeRatio"
        },
        {
            "signature": "HRESULT MFGetAttributesAsBlob( [in] IMFAttributes *pAttributes, [out] UINT8 *pBuf, [in] UINT cbBufSize );",
            "name": "MFGetAttributesAsBlob"
        },
        {
            "signature": "HRESULT MFGetAttributesAsBlobSize( [in] IMFAttributes *pAttributes, [out] UINT32 *pcbBufSize );",
            "name": "MFGetAttributesAsBlobSize"
        },
        {
            "signature": "HRESULT MFGetAttributeSize( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [out] UINT32 *punWidth, [out] UINT32 *punHeight );",
            "name": "MFGetAttributeSize"
        },
        {
            "signature": "HRESULT MFGetAttributeString( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [out] PWSTR *ppsz );",
            "name": "MFGetAttributeString"
        },
        {
            "signature": "UINT32 MFGetAttributeUINT32( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] UINT32 unDefault );",
            "name": "MFGetAttributeUINT32"
        },
        {
            "signature": "UINT64 MFGetAttributeUINT64( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] UINT64 unDefault );",
            "name": "MFGetAttributeUINT64"
        },
        {
            "signature": "HRESULT MFGetContentProtectionSystemCLSID( [in] REFGUID guidProtectionSystemID, [out] CLSID *pclsid );",
            "name": "MFGetContentProtectionSystemCLSID"
        },
        {
            "signature": "HRESULT MFGetMFTMerit( [in, out] IUnknown *pMFT, [in] UINT32 cbVerifier, [in] const BYTE *verifier, [out] DWORD *merit );",
            "name": "MFGetMFTMerit"
        },
        {
            "signature": "HRESULT MFGetPlaneSize( [in] DWORD format, [in] DWORD dwWidth, [in] DWORD dwHeight, [out] DWORD *pdwPlaneSize );",
            "name": "MFGetPlaneSize"
        },
        {
            "signature": "HRESULT MFGetPluginControl( [out] IMFPluginControl **ppPluginControl );",
            "name": "MFGetPluginControl"
        },
        {
            "signature": "HRESULT MFGetStrideForBitmapInfoHeader( [in] DWORD format, [in] DWORD dwWidth, [out] LONG *pStride );",
            "name": "MFGetStrideForBitmapInfoHeader"
        },
        {
            "signature": "HRESULT MFGetTimerPeriodicity( [out] DWORD *Periodicity );",
            "name": "MFGetTimerPeriodicity"
        },
        {
            "signature": "DWORD MFGetUncompressedVideoFormat( [in] const MFVIDEOFORMAT *pVideoFormat );",
            "name": "MFGetUncompressedVideoFormat"
        },
        {
            "signature": "HRESULT MFGetWorkQueueMMCSSClass( [in] DWORD dwWorkQueueId, [out] LPWSTR pwszClass, [in, out] DWORD *pcchClass );",
            "name": "MFGetWorkQueueMMCSSClass"
        },
        {
            "signature": "HRESULT MFGetWorkQueueMMCSSPriority( [in] DWORD dwWorkQueueId, [out] LONG *lPriority );",
            "name": "MFGetWorkQueueMMCSSPriority"
        },
        {
            "signature": "HRESULT MFGetWorkQueueMMCSSTaskId( [in] DWORD dwWorkQueueId, [out] LPDWORD pdwTaskId );",
            "name": "MFGetWorkQueueMMCSSTaskId"
        },
        {
            "signature": "void * MFHeapAlloc( [in] size_t nSize, [in] ULONG dwFlags, [in] char *pszFile, [in] int line, [in] EAllocationType eat );",
            "name": "MFHeapAlloc"
        },
        {
            "signature": "void MFHeapFree( [in] void *pv );",
            "name": "MFHeapFree"
        },
        {
            "signature": "HRESULT MFInitAMMediaTypeFromMFMediaType( IMFMediaType *pMFType, GUID guidFormatBlockType, AM_MEDIA_TYPE *pAMType );",
            "name": "MFInitAMMediaTypeFromMFMediaType"
        },
        {
            "signature": "HRESULT MFInitAttributesFromBlob( [in] IMFAttributes *pAttributes, [in] const UINT8 *pBuf, [in] UINT cbBufSize );",
            "name": "MFInitAttributesFromBlob"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromAMMediaType( IMFMediaType *pMFType, const AM_MEDIA_TYPE *pAMType );",
            "name": "MFInitMediaTypeFromAMMediaType"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromMFVideoFormat( IMFMediaType *pMFType, const MFVIDEOFORMAT *pMFVF, UINT32 cbBufSize );",
            "name": "MFInitMediaTypeFromMFVideoFormat"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromMPEG1VideoInfo( IMFMediaType *pMFType, const MPEG1VIDEOINFO *pMP1VI, UINT32 cbBufSize, const GUID *pSubtype );",
            "name": "MFInitMediaTypeFromMPEG1VideoInfo"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromMPEG2VideoInfo( IMFMediaType *pMFType, const MPEG2VIDEOINFO *pMP2VI, UINT32 cbBufSize, const GUID *pSubtype );",
            "name": "MFInitMediaTypeFromMPEG2VideoInfo"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromVideoInfoHeader( IMFMediaType *pMFType, const VIDEOINFOHEADER *pVIH, UINT32 cbBufSize, const GUID *pSubtype );",
            "name": "MFInitMediaTypeFromVideoInfoHeader"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromVideoInfoHeader2( IMFMediaType *pMFType, const VIDEOINFOHEADER2 *pVIH2, UINT32 cbBufSize, const GUID *pSubtype );",
            "name": "MFInitMediaTypeFromVideoInfoHeader2"
        },
        {
            "signature": "HRESULT MFInitMediaTypeFromWaveFormatEx( IMFMediaType *pMFType, const WAVEFORMATEX *pWaveFormat, UINT32 cbBufSize );",
            "name": "MFInitMediaTypeFromWaveFormatEx"
        },
        {
            "signature": "HRESULT MFInitVideoFormat( [out] MFVIDEOFORMAT *pVideoFormat, [in] MFStandardVideoFormat type );",
            "name": "MFInitVideoFormat"
        },
        {
            "signature": "HRESULT MFInitVideoFormat_RGB( [in] MFVIDEOFORMAT *pVideoFormat, [in] DWORD dwWidth, [in] DWORD dwHeight, [in] DWORD D3Dfmt );",
            "name": "MFInitVideoFormat_RGB"
        },
        {
            "signature": "HRESULT MFInvokeCallback( IMFAsyncResult *pAsyncResult );",
            "name": "MFInvokeCallback"
        },
        {
            "signature": "BOOL MFIsFormatYUV( [in] DWORD Format );",
            "name": "MFIsFormatYUV"
        },
        {
            "signature": "LONGLONG MFllMulDiv( LONGLONG a, LONGLONG b, LONGLONG c, LONGLONG d );",
            "name": "MFllMulDiv"
        },
        {
            "signature": "HRESULT MFLockDXGIDeviceManager( [out] UINT *pResetToken, [out] IMFDXGIDeviceManager **ppManager );",
            "name": "MFLockDXGIDeviceManager"
        },
        {
            "signature": "HRESULT MFLockPlatform();",
            "name": "MFLockPlatform"
        },
        {
            "signature": "HRESULT MFLockSharedWorkQueue( [in] PCWSTR wszClass, [in] LONG BasePriority, [in, out] DWORD *pdwTaskId, [out] DWORD *pID );",
            "name": "MFLockSharedWorkQueue"
        },
        {
            "signature": "HRESULT MFLockWorkQueue( [in] DWORD dwWorkQueue );",
            "name": "MFLockWorkQueue"
        },
        {
            "signature": "DXGI_FORMAT MFMapDX9FormatToDXGIFormat( [in] DWORD dx9 );",
            "name": "MFMapDX9FormatToDXGIFormat"
        },
        {
            "signature": "DWORD MFMapDXGIFormatToDX9Format( [in] DXGI_FORMAT dx11 );",
            "name": "MFMapDXGIFormatToDX9Format"
        },
        {
            "signature": "MFPERIODICCALLBACK Mfperiodiccallback; void Mfperiodiccallback( [in] IUnknown *pContext ) {...}",
            "name": "MFPERIODICCALLBACK callback"
        },
        {
            "signature": "HRESULT MFPutWaitingWorkItem( [in] HANDLE hEvent, [in] LONG Priority, [in] IMFAsyncResult *pResult, [out] MFWORKITEM_KEY *pKey );",
            "name": "MFPutWaitingWorkItem"
        },
        {
            "signature": "HRESULT MFPutWorkItem( [in] DWORD dwQueue, [in] IMFAsyncCallback *pCallback, [in] IUnknown *pState );",
            "name": "MFPutWorkItem"
        },
        {
            "signature": "HRESULT MFPutWorkItem2( [in] DWORD dwQueue, [in] LONG Priority, [in] IMFAsyncCallback *pCallback, [in] IUnknown *pState );",
            "name": "MFPutWorkItem2"
        },
        {
            "signature": "HRESULT MFPutWorkItemEx( [in] DWORD dwQueue, [in] IMFAsyncResult *pResult );",
            "name": "MFPutWorkItemEx"
        },
        {
            "signature": "HRESULT MFPutWorkItemEx2( [in] DWORD dwQueue, [in] LONG Priority, [in] IMFAsyncResult *pResult );",
            "name": "MFPutWorkItemEx2"
        },
        {
            "signature": "HRESULT MFRegisterLocalByteStreamHandler( [in] PCWSTR szFileExtension, [in] PCWSTR szMimeType, [in] IMFActivate *pActivate );",
            "name": "MFRegisterLocalByteStreamHandler"
        },
        {
            "signature": "HRESULT MFRegisterLocalSchemeHandler( [in] PCWSTR szScheme, [in] IMFActivate *pActivate );",
            "name": "MFRegisterLocalSchemeHandler"
        },
        {
            "signature": "HRESULT MFRegisterPlatformWithMMCSS( [in] PCWSTR wszClass, [in, out] DWORD *pdwTaskId, [in] LONG lPriority );",
            "name": "MFRegisterPlatformWithMMCSS"
        },
        {
            "signature": "HRESULT MFRemovePeriodicCallback( [in] DWORD dwKey );",
            "name": "MFRemovePeriodicCallback"
        },
        {
            "signature": "HRESULT MFScheduleWorkItem( [in] IMFAsyncCallback *pCallback, [in] IUnknown *pState, [in] INT64 Timeout, [out] MFWORKITEM_KEY *pKey );",
            "name": "MFScheduleWorkItem"
        },
        {
            "signature": "HRESULT MFScheduleWorkItemEx( [in] IMFAsyncResult *pResult, [in] INT64 Timeout, [out] MFWORKITEM_KEY *pKey );",
            "name": "MFScheduleWorkItemEx"
        },
        {
            "signature": "HRESULT MFSetAttribute2UINT32asUINT64( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] UINT32 unHigh32, [in] UINT32 unLow32 );",
            "name": "MFSetAttribute2UINT32asUINT64"
        },
        {
            "signature": "HRESULT MFSetAttributeRatio( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] UINT32 unNumerator, [in] UINT32 unDenominator );",
            "name": "MFSetAttributeRatio"
        },
        {
            "signature": "HRESULT MFSetAttributeSize( [in] IMFAttributes *pAttributes, [in] REFGUID guidKey, [in] UINT32 unWidth, [in] UINT32 unHeight );",
            "name": "MFSetAttributeSize"
        },
        {
            "signature": "HRESULT MFShutdown();",
            "name": "MFShutdown"
        },
        {
            "signature": "HRESULT MFSplitSample( IMFSample *pSample, IMFSample **pOutputSamples, DWORD dwOutputSampleMaxCount, DWORD *pdwOutputSampleCount );",
            "name": "MFSplitSample"
        },
        {
            "signature": "HRESULT MFStartup( ULONG Version, DWORD dwFlags );",
            "name": "MFStartup"
        },
        {
            "signature": "HRESULT MFTEnum( [in] GUID guidCategory, [in] UINT32 Flags, [in] MFT_REGISTER_TYPE_INFO *pInputType, [in] MFT_REGISTER_TYPE_INFO *pOutputType, [in] IMFAttributes *pAttributes, [out] CLSID **ppclsidMFT, [out] UINT32 *pcMFTs );",
            "name": "MFTEnum"
        },
        {
            "signature": "HRESULT MFTEnum2( [in] GUID guidCategory, [in] UINT32 Flags, [in] const MFT_REGISTER_TYPE_INFO *pInputType, [in] const MFT_REGISTER_TYPE_INFO *pOutputType, [in, optional] IMFAttributes *pAttributes, [out] IMFActivate ***pppMFTActivate, [out] UINT32 *pnumMFTActivate );",
            "name": "MFTEnum2"
        },
        {
            "signature": "HRESULT MFTEnumEx( [in] GUID guidCategory, [in] UINT32 Flags, [in] const MFT_REGISTER_TYPE_INFO *pInputType, [in] const MFT_REGISTER_TYPE_INFO *pOutputType, [out] IMFActivate ***pppMFTActivate, [out] UINT32 *pnumMFTActivate );",
            "name": "MFTEnumEx"
        },
        {
            "signature": "HRESULT MFTGetInfo( [in] CLSID clsidMFT, [out] LPWSTR *pszName, [out] MFT_REGISTER_TYPE_INFO **ppInputTypes, [out] UINT32 *pcInputTypes, [out] MFT_REGISTER_TYPE_INFO **ppOutputTypes, [out] UINT32 *pcOutputTypes, [out] IMFAttributes **ppAttributes );",
            "name": "MFTGetInfo"
        },
        {
            "signature": "HRESULT MFTRegister( [in] CLSID clsidMFT, [in] GUID guidCategory, [in] LPWSTR pszName, [in] UINT32 Flags, [in] UINT32 cInputTypes, [in] MFT_REGISTER_TYPE_INFO *pInputTypes, [in] UINT32 cOutputTypes, [in] MFT_REGISTER_TYPE_INFO *pOutputTypes, [in] IMFAttributes *pAttributes );",
            "name": "MFTRegister"
        },
        {
            "signature": "HRESULT MFTRegisterLocal( [in] IClassFactory *pClassFactory, [in] REFGUID guidCategory, [in] LPCWSTR pszName, [in] UINT32 Flags, [in] UINT32 cInputTypes, [in] const MFT_REGISTER_TYPE_INFO *pInputTypes, [in] UINT32 cOutputTypes, [in] const MFT_REGISTER_TYPE_INFO *pOutputTypes );",
            "name": "MFTRegisterLocal"
        },
        {
            "signature": "HRESULT MFTRegisterLocalByCLSID( [in] REFCLSID clisdMFT, [in] REFGUID guidCategory, [in] LPCWSTR pszName, [in] UINT32 Flags, [in] UINT32 cInputTypes, [in] const MFT_REGISTER_TYPE_INFO *pInputTypes, [in] UINT32 cOutputTypes, [in] const MFT_REGISTER_TYPE_INFO *pOutputTypes );",
            "name": "MFTRegisterLocalByCLSID"
        },
        {
            "signature": "HRESULT MFTUnregister( [in] CLSID clsidMFT );",
            "name": "MFTUnregister"
        },
        {
            "signature": "HRESULT MFTUnregisterLocal( [in] IClassFactory *pClassFactory );",
            "name": "MFTUnregisterLocal"
        },
        {
            "signature": "HRESULT MFTUnregisterLocalByCLSID( [in] CLSID clsidMFT );",
            "name": "MFTUnregisterLocalByCLSID"
        },
        {
            "signature": "HRESULT MFUnlockDXGIDeviceManager();",
            "name": "MFUnlockDXGIDeviceManager"
        },
        {
            "signature": "HRESULT MFUnlockPlatform();",
            "name": "MFUnlockPlatform"
        },
        {
            "signature": "HRESULT MFUnlockWorkQueue( [in] DWORD dwWorkQueue );",
            "name": "MFUnlockWorkQueue"
        },
        {
            "signature": "HRESULT MFUnregisterPlatformFromMMCSS();",
            "name": "MFUnregisterPlatformFromMMCSS"
        },
        {
            "signature": "HRESULT MFUnwrapMediaType( IMFMediaType *pWrap, IMFMediaType **ppOrig );",
            "name": "MFUnwrapMediaType"
        },
        {
            "signature": "HRESULT MFValidateMediaTypeSize( [in] GUID FormatType, [in] UINT8 *pBlock, [in] UINT32 cbSize );",
            "name": "MFValidateMediaTypeSize"
        },
        {
            "signature": "HRESULT MFWrapMediaType( IMFMediaType *pOrig, REFGUID MajorType, REFGUID SubType, IMFMediaType **ppWrap );",
            "name": "MFWrapMediaType"
        },
        {
            "signature": "UINT64 Pack2UINT32AsUINT64( [in] UINT32 unHigh, [in] UINT32 unLow );",
            "name": "Pack2UINT32AsUINT64"
        },
        {
            "signature": "UINT64 PackRatio( [in] INT32 nNumerator, [in] UINT32 unDenominator );",
            "name": "PackRatio"
        },
        {
            "signature": "UINT64 PackSize( [in] UINT32 unWidth, [in] UINT32 unHeight );",
            "name": "PackSize"
        },
        {
            "signature": "void Unpack2UINT32AsUINT64( [in] UINT64 unPacked, [out] UINT32 *punHigh, [out] UINT32 *punLow );",
            "name": "Unpack2UINT32AsUINT64"
        },
        {
            "signature": "void UnpackRatio( [in] UINT64 unPacked, [out] INT32 *pnNumerator, [out] UINT32 *punDenominator );",
            "name": "UnpackRatio"
        },
        {
            "signature": "void UnpackSize( [in] UINT64 unPacked, [out] UINT32 *punWidth, [out] UINT32 *punHeight );",
            "name": "UnpackSize"
        }
    ],
    "Mfcaptureengine.h": [],
    "Mfcontentdecryptionmodule.h": [
        {
            "signature": "HRESULT MFCreateEncryptedMediaExtensionsStoreActivate( IMFPMPHostApp *pmpHost, IStream *objectStream, LPCWSTR classId, IMFActivate **activate );",
            "name": "MFCreateEncryptedMediaExtensionsStoreActivate"
        }
    ],
    "Mfd3d12.h": [
        {
            "signature": "HRESULT MFCreateD3D12SynchronizationObject( ID3D12Device *pDevice, REFIID riid, void **ppvSyncObject );",
            "name": "MFCreateD3D12SynchronizationObject"
        }
    ],
    "Mfidl.h": [
        {
            "signature": "HRESULT CreateNamedPropertyStore( [out] INamedPropertyStore **ppStore );",
            "name": "CreateNamedPropertyStore"
        },
        {
            "signature": "HRESULT CreatePropertyStore( [out] IPropertyStore **ppStore );",
            "name": "CreatePropertyStore"
        },
        {
            "signature": "HRESULT MFCreate3GPMediaSink( [in] IMFByteStream *pIByteStream, [in] IMFMediaType *pVideoMediaType, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppIMediaSink );",
            "name": "MFCreate3GPMediaSink"
        },
        {
            "signature": "HRESULT MFCreateAC3MediaSink( [in] IMFByteStream *pTargetByteStream, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppMediaSink );",
            "name": "MFCreateAC3MediaSink"
        },
        {
            "signature": "HRESULT MFCreateADTSMediaSink( [in] IMFByteStream *pTargetByteStream, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppMediaSink );",
            "name": "MFCreateADTSMediaSink"
        },
        {
            "signature": "HRESULT MFCreateAggregateSource( [in] IMFCollection *pSourceCollection, [out] IMFMediaSource **ppAggSource );",
            "name": "MFCreateAggregateSource"
        },
        {
            "signature": "HRESULT MFCreateAudioRenderer( [in] IMFAttributes *pAudioAttributes, [out] IMFMediaSink **ppSink );",
            "name": "MFCreateAudioRenderer"
        },
        {
            "signature": "HRESULT MFCreateAudioRendererActivate( [out] IMFActivate **ppActivate );",
            "name": "MFCreateAudioRendererActivate"
        },
        {
            "signature": "HRESULT MFCreateAVIMediaSink( [in] IMFByteStream *pIByteStream, [in] IMFMediaType *pVideoMediaType, [in, optional] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppIMediaSink );",
            "name": "MFCreateAVIMediaSink"
        },
        {
            "signature": "HRESULT MFCreateCameraControlMonitor( [in] LPCWSTR symbolicLink, [in] IMFCameraControlNotify *callback, [out] IMFCameraControlMonitor **ppCameraControlMonitor );",
            "name": "MFCreateCameraControlMonitor"
        },
        {
            "signature": "HRESULT MFCreateCameraOcclusionStateMonitor( LPCWSTR symbolicLink, IMFCameraOcclusionStateReportCallback *callback, IMFCameraOcclusionStateMonitor **occlusionStateMonitor );",
            "name": "MFCreateCameraOcclusionStateMonitor"
        },
        {
            "signature": "HRESULT MFCreateContentDecryptorContext( [in] REFGUID guidMediaProtectionSystemId, [in, optional] IMFDXGIDeviceManager *pD3DManager, [in] IMFContentProtectionDevice *pContentProtectionDevice, [out] IMFContentDecryptorContext **ppContentDecryptorContext );",
            "name": "MFCreateContentDecryptorContext"
        },
        {
            "signature": "HRESULT MFCreateContentProtectionDevice( [in] REFGUID ProtectionSystemId, [out] IMFContentProtectionDevice **ContentProtectionDevice );",
            "name": "MFCreateContentProtectionDevice"
        },
        {
            "signature": "HRESULT MFCreateCredentialCache( IMFNetCredentialCache **ppCache );",
            "name": "MFCreateCredentialCache"
        },
        {
            "signature": "HRESULT MFCreateDeviceSource( [in] IMFAttributes *pAttributes, [out] IMFMediaSource **ppSource );",
            "name": "MFCreateDeviceSource"
        },
        {
            "signature": "HRESULT MFCreateDeviceSourceActivate( [in] IMFAttributes *pAttributes, [out] IMFActivate **ppActivate );",
            "name": "MFCreateDeviceSourceActivate"
        },
        {
            "signature": "HRESULT MFCreateFMPEG4MediaSink( [in] IMFByteStream *pIByteStream, [in] IMFMediaType *pVideoMediaType, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppIMediaSink );",
            "name": "MFCreateFMPEG4MediaSink"
        },
        {
            "signature": "HRESULT MFCreateMediaSession( IMFAttributes *pConfiguration, IMFMediaSession **ppMediaSession );",
            "name": "MFCreateMediaSession"
        },
        {
            "signature": "HRESULT MFCreateMediaTypeFromProperties( [in] IUnknown *punkStream, [out] IMFMediaType **ppMediaType );",
            "name": "MFCreateMediaTypeFromProperties"
        },
        {
            "signature": "HRESULT MFCreateMFByteStreamOnStream( [in] IStream *pStream, [out] IMFByteStream **ppByteStream );",
            "name": "MFCreateMFByteStreamOnStream"
        },
        {
            "signature": "HRESULT MFCreateMFByteStreamOnStreamEx( [in] IUnknown *punkStream, [out] IMFByteStream **ppByteStream );",
            "name": "MFCreateMFByteStreamOnStreamEx"
        },
        {
            "signature": "HRESULT MFCreateMP3MediaSink( [in] IMFByteStream *pTargetByteStream, [out] IMFMediaSink **ppMediaSink );",
            "name": "MFCreateMP3MediaSink"
        },
        {
            "signature": "HRESULT MFCreateMPEG4MediaSink( [in] IMFByteStream *pIByteStream, [in] IMFMediaType *pVideoMediaType, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppIMediaSink );",
            "name": "MFCreateMPEG4MediaSink"
        },
        {
            "signature": "HRESULT MFCreateMuxSink( [in] GUID guidOutputSubType, [in] IMFAttributes *pOutputAttributes, [in] IMFByteStream *pOutputByteStream, [out] IMFMediaSink **ppMuxSink );",
            "name": "MFCreateMuxSink"
        },
        {
            "signature": "HRESULT MFCreateNetSchemePlugin( [in] REFIID riid, [out] LPVOID *ppvHandler );",
            "name": "MFCreateNetSchemePlugin"
        },
        {
            "signature": "HRESULT MFCreatePMPMediaSession( DWORD dwCreationFlags, IMFAttributes *pConfiguration, IMFMediaSession **ppMediaSession, IMFActivate **ppEnablerActivate );",
            "name": "MFCreatePMPMediaSession"
        },
        {
            "signature": "HRESULT MFCreatePMPServer( [in] DWORD dwCreationFlags, [out] IMFPMPServer **ppPMPServer );",
            "name": "MFCreatePMPServer"
        },
        {
            "signature": "HRESULT MFCreatePresentationClock( IMFPresentationClock **ppPresentationClock );",
            "name": "MFCreatePresentationClock"
        },
        {
            "signature": "HRESULT MFCreatePresentationDescriptor( DWORD cStreamDescriptors, IMFStreamDescriptor **apStreamDescriptors, IMFPresentationDescriptor **ppPresentationDescriptor );",
            "name": "MFCreatePresentationDescriptor"
        },
        {
            "signature": "HRESULT MFCreatePropertiesFromMediaType( [in] IMFMediaType *pMediaType, [in] REFIID riid, [out] void **ppv );",
            "name": "MFCreatePropertiesFromMediaType"
        },
        {
            "signature": "HRESULT MFCreateProtectedEnvironmentAccess( [out] IMFProtectedEnvironmentAccess **ppAccess );",
            "name": "MFCreateProtectedEnvironmentAccess"
        },
        {
            "signature": "HRESULT MFCreateProxyLocator( [in] LPCWSTR pszProtocol, [in] IPropertyStore *pProxyConfig, [out] IMFNetProxyLocator **ppProxyLocator );",
            "name": "MFCreateProxyLocator"
        },
        {
            "signature": "HRESULT MFCreateRelativePanelWatcher( PCWSTR videoDeviceId, PCWSTR displayMonitorDeviceId, IMFRelativePanelWatcher **ppRelativePanelWatcher );",
            "name": "MFCreateRelativePanelWatcher"
        },
        {
            "signature": "HRESULT MFCreateRemoteDesktopPlugin( IMFRemoteDesktopPlugin **ppPlugin );",
            "name": "MFCreateRemoteDesktopPlugin"
        },
        {
            "signature": "HRESULT MFCreateSampleCopierMFT( [out] IMFTransform **ppCopierMFT );",
            "name": "MFCreateSampleCopierMFT"
        },
        {
            "signature": "HRESULT MFCreateSampleGrabberSinkActivate( IMFMediaType *pIMFMediaType, IMFSampleGrabberSinkCallback *pIMFSampleGrabberSinkCallback, IMFActivate **ppIActivate );",
            "name": "MFCreateSampleGrabberSinkActivate"
        },
        {
            "signature": "HRESULT MFCreateSensorActivityMonitor( [in] IMFSensorActivitiesReportCallback *pCallback, [out] IMFSensorActivityMonitor **ppActivityMonitor );",
            "name": "MFCreateSensorActivityMonitor"
        },
        {
            "signature": "HRESULT MFCreateSensorGroup( LPCWSTR SensorGroupSymbolicLink, [out] IMFSensorGroup **ppSensorGroup );",
            "name": "MFCreateSensorGroup"
        },
        {
            "signature": "HRESULT MFCreateSensorProfile( [in] REFGUID ProfileType, [in, out] UINT32 ProfileIndex, [in, optional] LPCWSTR Constraints, [out] IMFSensorProfile **ppProfile );",
            "name": "MFCreateSensorProfile"
        },
        {
            "signature": "HRESULT MFCreateSensorProfileCollection( [out] IMFSensorProfileCollection **ppSensorProfile );",
            "name": "MFCreateSensorProfileCollection"
        },
        {
            "signature": "HRESULT MFCreateSensorStream( DWORD StreamId, [in, optional] IMFAttributes *pAttributes, [in] IMFCollection *pMediaTypeCollection, [out] IMFSensorStream **ppStream );",
            "name": "MFCreateSensorStream"
        },
        {
            "signature": "HRESULT MFCreateSequencerSegmentOffset( [in] MFSequencerElementId dwId, [in] MFTIME hnsOffset, [out] PROPVARIANT *pvarSegmentOffset );",
            "name": "MFCreateSequencerSegmentOffset"
        },
        {
            "signature": "HRESULT MFCreateSequencerSource( IUnknown *pReserved, IMFSequencerSource **ppSequencerSource );",
            "name": "MFCreateSequencerSource"
        },
        {
            "signature": "HRESULT MFCreateSimpleTypeHandler( [out] IMFMediaTypeHandler **ppHandler );",
            "name": "MFCreateSimpleTypeHandler"
        },
        {
            "signature": "HRESULT MFCreateSourceResolver( [out] IMFSourceResolver **ppISourceResolver );",
            "name": "MFCreateSourceResolver"
        },
        {
            "signature": "HRESULT MFCreateStandardQualityManager( [out] IMFQualityManager **ppQualityManager );",
            "name": "MFCreateStandardQualityManager"
        },
        {
            "signature": "HRESULT MFCreateStreamDescriptor( DWORD dwStreamIdentifier, DWORD cMediaTypes, IMFMediaType **apMediaTypes, IMFStreamDescriptor **ppDescriptor );",
            "name": "MFCreateStreamDescriptor"
        },
        {
            "signature": "HRESULT MFCreateStreamOnMFByteStream( [in] IMFByteStream *pByteStream, [out] IStream **ppStream );",
            "name": "MFCreateStreamOnMFByteStream"
        },
        {
            "signature": "HRESULT MFCreateStreamOnMFByteStreamEx( [in] IMFByteStream *pByteStream, [in] REFIID riid, [out] void **ppv );",
            "name": "MFCreateStreamOnMFByteStreamEx"
        },
        {
            "signature": "HRESULT MFCreateSystemTimeSource( IMFPresentationTimeSource **ppSystemTimeSource );",
            "name": "MFCreateSystemTimeSource"
        },
        {
            "signature": "HRESULT MFCreateTopoLoader( IMFTopoLoader **ppObj );",
            "name": "MFCreateTopoLoader"
        },
        {
            "signature": "HRESULT MFCreateTopology( IMFTopology **ppTopo );",
            "name": "MFCreateTopology"
        },
        {
            "signature": "HRESULT MFCreateTopologyNode( [in] MF_TOPOLOGY_TYPE NodeType, [out] IMFTopologyNode **ppNode );",
            "name": "MFCreateTopologyNode"
        },
        {
            "signature": "HRESULT MFCreateTrackedSample( [out] IMFTrackedSample **ppMFSample );",
            "name": "MFCreateTrackedSample"
        },
        {
            "signature": "HRESULT MFCreateTranscodeProfile( [out] IMFTranscodeProfile **ppTranscodeProfile );",
            "name": "MFCreateTranscodeProfile"
        },
        {
            "signature": "HRESULT MFCreateTranscodeSinkActivate( [out] IMFActivate **ppActivate );",
            "name": "MFCreateTranscodeSinkActivate"
        },
        {
            "signature": "HRESULT MFCreateTranscodeTopology( [in] IMFMediaSource *pSrc, [in] LPCWSTR pwszOutputFilePath, [in] IMFTranscodeProfile *pProfile, [out] IMFTopology **ppTranscodeTopo );",
            "name": "MFCreateTranscodeTopology"
        },
        {
            "signature": "HRESULT MFCreateTranscodeTopologyFromByteStream( [in] IMFMediaSource *pSrc, [in] IMFByteStream *pOutputStream, [in] IMFTranscodeProfile *pProfile, [out] IMFTopology **ppTranscodeTopo );",
            "name": "MFCreateTranscodeTopologyFromByteStream"
        },
        {
            "signature": "HRESULT MFCreateVideoRendererActivate( [in] HWND hwndVideo, [out] IMFActivate **ppActivate );",
            "name": "MFCreateVideoRendererActivate"
        },
        {
            "signature": "HRESULT MFCreateWAVEMediaSink( [in] IMFByteStream *pTargetByteStream, [in] IMFMediaType *pAudioMediaType, [out] IMFMediaSink **ppMediaSink );",
            "name": "MFCreateWAVEMediaSink"
        },
        {
            "signature": "HRESULT MFDeserializePresentationDescriptor( DWORD cbData, BYTE *pbData, IMFPresentationDescriptor **ppPD );",
            "name": "MFDeserializePresentationDescriptor"
        },
        {
            "signature": "HRESULT MFEnumDeviceSources( [in] IMFAttributes *pAttributes, [out] IMFActivate ***pppSourceActivate, [out] UINT32 *pcSourceActivate );",
            "name": "MFEnumDeviceSources"
        },
        {
            "signature": "HRESULT MFGetLocalId( [in] const BYTE *verifier, UINT32 size, [in] LPWSTR *id );",
            "name": "MFGetLocalId"
        },
        {
            "signature": "HRESULT MFGetService( IUnknown *punkObject, REFGUID guidService, REFIID riid, LPVOID *ppvObject );",
            "name": "MFGetService"
        },
        {
            "signature": "HRESULT MFGetSupportedMimeTypes( [out] PROPVARIANT *pPropVarMimeTypeArray );",
            "name": "MFGetSupportedMimeTypes"
        },
        {
            "signature": "HRESULT MFGetSupportedSchemes( [out] PROPVARIANT *pPropVarSchemeArray );",
            "name": "MFGetSupportedSchemes"
        },
        {
            "signature": "HRESULT MFGetSystemId( [out] IMFSystemId **ppId );",
            "name": "MFGetSystemId"
        },
        {
            "signature": "MFTIME MFGetSystemTime();",
            "name": "MFGetSystemTime"
        },
        {
            "signature": "HRESULT MFGetTopoNodeCurrentType( IMFTopologyNode *pNode, DWORD dwStreamIndex, BOOL fOutput, [out] IMFMediaType **ppType );",
            "name": "MFGetTopoNodeCurrentType"
        },
        {
            "signature": "HRESULT MFIsContentProtectionDeviceSupported( [in] REFGUID ProtectionSystemId, [out] BOOL *isSupported );",
            "name": "MFIsContentProtectionDeviceSupported"
        },
        {
            "signature": "HRESULT MFLoadSignedLibrary( [in] LPCWSTR pszName, [out] IMFSignedLibrary **ppLib );",
            "name": "MFLoadSignedLibrary"
        },
        {
            "signature": "HRESULT MFRequireProtectedEnvironment( [in] IMFPresentationDescriptor *pPresentationDescriptor );",
            "name": "MFRequireProtectedEnvironment"
        },
        {
            "signature": "HRESULT MFSerializePresentationDescriptor( IMFPresentationDescriptor *pPD, DWORD *pcbData, BYTE **ppbData );",
            "name": "MFSerializePresentationDescriptor"
        },
        {
            "signature": "HRESULT MFShutdownObject( IUnknown *pUnk );",
            "name": "MFShutdownObject"
        },
        {
            "signature": "HRESULT MFTranscodeGetAudioOutputAvailableTypes( [in] REFGUID guidSubType, [in] DWORD dwMFTFlags, [in] IMFAttributes *pCodecConfig, [out] IMFCollection **ppAvailableTypes );",
            "name": "MFTranscodeGetAudioOutputAvailableTypes"
        }
    ],
    "Mfmediacapture.h": [],
    "Mfmediaengine.h": [],
    "Mfmp2dlna.h": [],
    "Mfobjects.h": [
        {
            "signature": "HRESULT MFDeserializeAttributesFromStream( IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm );",
            "name": "MFDeserializeAttributesFromStream"
        },
        {
            "signature": "HRESULT MFSerializeAttributesToStream( IMFAttributes *pAttr, DWORD dwOptions, IStream *pStm );",
            "name": "MFSerializeAttributesToStream"
        }
    ],
    "Mfplay.h": [
        {
            "signature": "HRESULT MFPCreateMediaPlayer( [in] LPCWSTR pwszURL, [in] BOOL fStartPlayback, [in] MFP_CREATION_OPTIONS creationOptions, [in] IMFPMediaPlayerCallback *pCallback, [in] HWND hWnd, [out] IMFPMediaPlayer **ppMediaPlayer );",
            "name": "MFPCreateMediaPlayer"
        }
    ],
    "Mfreadwrite.h": [
        {
            "signature": "HRESULT MFCreateSinkWriterFromMediaSink( [in] IMFMediaSink *pMediaSink, [in] IMFAttributes *pAttributes, [out] IMFSinkWriter **ppSinkWriter );",
            "name": "MFCreateSinkWriterFromMediaSink"
        },
        {
            "signature": "HRESULT MFCreateSinkWriterFromURL( [in] LPCWSTR pwszOutputURL, [in] IMFByteStream *pByteStream, [in] IMFAttributes *pAttributes, [out] IMFSinkWriter **ppSinkWriter );",
            "name": "MFCreateSinkWriterFromURL"
        },
        {
            "signature": "HRESULT MFCreateSourceReaderFromByteStream( [in] IMFByteStream *pByteStream, [in] IMFAttributes *pAttributes, [out] IMFSourceReader **ppSourceReader );",
            "name": "MFCreateSourceReaderFromByteStream"
        },
        {
            "signature": "HRESULT MFCreateSourceReaderFromMediaSource( [in] IMFMediaSource *pMediaSource, [in] IMFAttributes *pAttributes, [out] IMFSourceReader **ppSourceReader );",
            "name": "MFCreateSourceReaderFromMediaSource"
        },
        {
            "signature": "HRESULT MFCreateSourceReaderFromURL( [in] LPCWSTR pwszURL, [in] IMFAttributes *pAttributes, [out] IMFSourceReader **ppSourceReader );",
            "name": "MFCreateSourceReaderFromURL"
        }
    ],
    "Mfsharingengine.h": [],
    "Mfspatialaudio.h": [],
    "Mftransform.h": [
        {
            "signature": "HRESULT MFCreateTransformActivate( [out] IMFActivate **ppActivate );",
            "name": "MFCreateTransformActivate"
        }
    ],
    "Mfvirtualcamera.h": [
        {
            "signature": "HRESULT MFCreateVirtualCamera( MFVirtualCameraType type, MFVirtualCameraLifetime lifetime, MFVirtualCameraAccess access, LPCWSTR friendlyName, LPCWSTR sourceId, const GUID *categories, ULONG categoryCount, IMFVirtualCamera **virtualCamera );",
            "name": "MFCreateVirtualCamera"
        },
        {
            "signature": "HRESULT MFIsVirtualCameraTypeSupported( MFVirtualCameraType type, BOOL *supported );",
            "name": "MFIsVirtualCameraTypeSupported"
        }
    ],
    "Mgm.h": [
        {
            "signature": "DWORD MgmAddGroupMembershipEntry( [in] HANDLE hProtocol, [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopIPAddr, [in] DWORD dwFlags );",
            "name": "MgmAddGroupMembershipEntry"
        },
        {
            "signature": "DWORD MgmDeleteGroupMembershipEntry( [in] HANDLE hProtocol, [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopIPAddr, [in] DWORD dwFlags );",
            "name": "MgmDeleteGroupMembershipEntry"
        },
        {
            "signature": "DWORD MgmDeRegisterMProtocol( [in] HANDLE hProtocol );",
            "name": "MgmDeRegisterMProtocol"
        },
        {
            "signature": "DWORD MgmGetFirstMfe( [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, [in, out] PDWORD pdwNumEntries );",
            "name": "MgmGetFirstMfe"
        },
        {
            "signature": "DWORD MgmGetFirstMfeStats( [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, [in, out] PDWORD pdwNumEntries, DWORD dwFlags );",
            "name": "MgmGetFirstMfeStats"
        },
        {
            "signature": "DWORD MgmGetMfe( [in] PMIB_IPMCAST_MFE pimm, [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer );",
            "name": "MgmGetMfe"
        },
        {
            "signature": "DWORD MgmGetMfeStats( [in] PMIB_IPMCAST_MFE pimm, [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, DWORD dwFlags );",
            "name": "MgmGetMfeStats"
        },
        {
            "signature": "DWORD MgmGetNextMfe( [in] PMIB_IPMCAST_MFE pimmStart, [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, [in, out] PDWORD pdwNumEntries );",
            "name": "MgmGetNextMfe"
        },
        {
            "signature": "DWORD MgmGetNextMfeStats( [in] PMIB_IPMCAST_MFE pimmStart, [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, [in, out] PDWORD pdwNumEntries, DWORD dwFlags );",
            "name": "MgmGetNextMfeStats"
        },
        {
            "signature": "DWORD MgmGetProtocolOnInterface( [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr, [in, out] PDWORD pdwIfProtocolId, [in, out] PDWORD pdwIfComponentId );",
            "name": "MgmGetProtocolOnInterface"
        },
        {
            "signature": "DWORD MgmGroupEnumerationEnd( [in] HANDLE hEnum );",
            "name": "MgmGroupEnumerationEnd"
        },
        {
            "signature": "DWORD MgmGroupEnumerationGetNext( [in] HANDLE hEnum, [in, out] PDWORD pdwBufferSize, [in, out] PBYTE pbBuffer, [in, out] PDWORD pdwNumEntries );",
            "name": "MgmGroupEnumerationGetNext"
        },
        {
            "signature": "DWORD MgmGroupEnumerationStart( [in] HANDLE hProtocol, [in] MGM_ENUM_TYPES metEnumType, [out] HANDLE *phEnumHandle );",
            "name": "MgmGroupEnumerationStart"
        },
        {
            "signature": "DWORD MgmRegisterMProtocol( [in] PROUTING_PROTOCOL_CONFIG prpiInfo, [in] DWORD dwProtocolId, [in] DWORD dwComponentId, [out] HANDLE *phProtocol );",
            "name": "MgmRegisterMProtocol"
        },
        {
            "signature": "DWORD MgmReleaseInterfaceOwnership( [in] HANDLE hProtocol, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr );",
            "name": "MgmReleaseInterfaceOwnership"
        },
        {
            "signature": "DWORD MgmSetMfe( [in] HANDLE hProtocol, [in] PMIB_IPMCAST_MFE pmimm );",
            "name": "MgmSetMfe"
        },
        {
            "signature": "DWORD MgmTakeInterfaceOwnership( [in] HANDLE hProtocol, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr );",
            "name": "MgmTakeInterfaceOwnership"
        },
        {
            "signature": "PMGM_CREATION_ALERT_CALLBACK PmgmCreationAlertCallback; DWORD PmgmCreationAlertCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwInIfIndex, [in] DWORD dwInIfNextHopAddr, [in] DWORD dwIfCount, [in, out] PMGM_IF_ENTRY pmieOutIfList ) {...}",
            "name": "PMGM_CREATION_ALERT_CALLBACK callback"
        },
        {
            "signature": "PMGM_DISABLE_IGMP_CALLBACK PmgmDisableIgmpCallback; DWORD PmgmDisableIgmpCallback( [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr ) {...}",
            "name": "PMGM_DISABLE_IGMP_CALLBACK callback"
        },
        {
            "signature": "PMGM_ENABLE_IGMP_CALLBACK PmgmEnableIgmpCallback; DWORD PmgmEnableIgmpCallback( [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr ) {...}",
            "name": "PMGM_ENABLE_IGMP_CALLBACK callback"
        },
        {
            "signature": "PMGM_JOIN_ALERT_CALLBACK PmgmJoinAlertCallback; DWORD PmgmJoinAlertCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] BOOL bMemberUpdate ) {...}",
            "name": "PMGM_JOIN_ALERT_CALLBACK callback"
        },
        {
            "signature": "PMGM_LOCAL_JOIN_CALLBACK PmgmLocalJoinCallback; DWORD PmgmLocalJoinCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr ) {...}",
            "name": "PMGM_LOCAL_JOIN_CALLBACK callback"
        },
        {
            "signature": "PMGM_LOCAL_LEAVE_CALLBACK PmgmLocalLeaveCallback; DWORD PmgmLocalLeaveCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr ) {...}",
            "name": "PMGM_LOCAL_LEAVE_CALLBACK callback"
        },
        {
            "signature": "PMGM_PRUNE_ALERT_CALLBACK PmgmPruneAlertCallback; DWORD PmgmPruneAlertCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr, [in] BOOL bMemberDelete, [in, out] PDWORD pdwTimeout ) {...}",
            "name": "PMGM_PRUNE_ALERT_CALLBACK callback"
        },
        {
            "signature": "PMGM_RPF_CALLBACK PmgmRpfCallback; DWORD PmgmRpfCallback( [in] DWORD dwSourceAddr, [in] DWORD dwSourceMask, [in] DWORD dwGroupAddr, [in] DWORD dwGroupMask, [in, out] PDWORD pdwInIfIndex, [in, out] PDWORD pdwInIfNextHopAddr, [in, out] PDWORD pdwUpStreamNbr, [in] DWORD dwHdrSize, [in] PBYTE pbPacketHdr, [in, out] PBYTE pbRoute ) {...}",
            "name": "PMGM_RPF_CALLBACK callback"
        },
        {
            "signature": "PMGM_WRONG_IF_CALLBACK PmgmWrongIfCallback; DWORD PmgmWrongIfCallback( [in] DWORD dwSourceAddr, [in] DWORD dwGroupAddr, [in] DWORD dwIfIndex, [in] DWORD dwIfNextHopAddr, [in] DWORD dwHdrSize, [in] PBYTE pbPacketHdr ) {...}",
            "name": "PMGM_WRONG_IF_CALLBACK callback"
        }
    ],
    "Mgmtapi.h": [
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrClose( [in] LPSNMP_MGR_SESSION session );",
            "name": "SnmpMgrClose"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrCtl( [in] LPSNMP_MGR_SESSION session, [in] DWORD dwCtlCode, [in] LPVOID lpvInBuffer, [in] DWORD cbInBuffer, [out] LPVOID lpvOUTBuffer, [out] DWORD cbOUTBuffer, [out] LPDWORD lpcbBytesReturned );",
            "name": "SnmpMgrCtl"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrGetTrap( [out] AsnObjectIdentifier *enterprise, [out] AsnNetworkAddress *IPAddress, [out] AsnInteger *genericTrap, [out] AsnInteger *specificTrap, [out] AsnTimeticks *timeStamp, [out] RFC1157VarBindList *variableBindings );",
            "name": "SnmpMgrGetTrap"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrGetTrapEx( [out] AsnObjectIdentifier *enterprise, [out] AsnNetworkAddress *agentAddress, [out] AsnNetworkAddress *sourceAddress, [out] AsnInteger *genericTrap, [out] AsnInteger *specificTrap, [out] AsnOctetString *community, [out] AsnTimeticks *timeStamp, [out] RFC1157VarBindList *variableBindings );",
            "name": "SnmpMgrGetTrapEx"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrOidToStr( [in] AsnObjectIdentifier *oid, [out] LPSTR *string );",
            "name": "SnmpMgrOidToStr"
        },
        {
            "signature": "LPSNMP_MGR_SESSION SNMP_FUNC_TYPE SnmpMgrOpen( [in] LPSTR lpAgentAddress, [in] LPSTR lpAgentCommunity, [in] INT nTimeOut, [in] INT nRetries );",
            "name": "SnmpMgrOpen"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpMgrRequest( [in] LPSNMP_MGR_SESSION session, [in] BYTE requestType, [in, out] RFC1157VarBindList *variableBindings, [out] AsnInteger *errorStatus, [out] AsnInteger *errorIndex );",
            "name": "SnmpMgrRequest"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrStrToOid( [in] LPSTR string, [out] AsnObjectIdentifier *oid );",
            "name": "SnmpMgrStrToOid"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpMgrTrapListen( [out] HANDLE *phTrapAvailable );",
            "name": "SnmpMgrTrapListen"
        }
    ],
    "Micaut.h": [],
    "Midles.h": [
        {
            "signature": "RPC_STATUS MesBufferHandleReset( handle_t Handle, unsigned long HandleStyle, MIDL_ES_CODE Operation, char **pBuffer, unsigned long BufferSize, unsigned long *pEncodedSize );",
            "name": "MesBufferHandleReset"
        },
        {
            "signature": "RPC_STATUS MesDecodeBufferHandleCreate( char *Buffer, unsigned long BufferSize, handle_t *pHandle );",
            "name": "MesDecodeBufferHandleCreate"
        },
        {
            "signature": "RPC_STATUS MesDecodeIncrementalHandleCreate( void *UserState, MIDL_ES_READ ReadFn, handle_t *pHandle );",
            "name": "MesDecodeIncrementalHandleCreate"
        },
        {
            "signature": "RPC_STATUS MesEncodeDynBufferHandleCreate( char **pBuffer, unsigned long *pEncodedSize, handle_t *pHandle );",
            "name": "MesEncodeDynBufferHandleCreate"
        },
        {
            "signature": "RPC_STATUS MesEncodeFixedBufferHandleCreate( char *pBuffer, unsigned long BufferSize, unsigned long *pEncodedSize, handle_t *pHandle );",
            "name": "MesEncodeFixedBufferHandleCreate"
        },
        {
            "signature": "RPC_STATUS MesEncodeIncrementalHandleCreate( void *UserState, MIDL_ES_ALLOC AllocFn, MIDL_ES_WRITE WriteFn, handle_t *pHandle );",
            "name": "MesEncodeIncrementalHandleCreate"
        },
        {
            "signature": "RPC_STATUS MesHandleFree( handle_t Handle );",
            "name": "MesHandleFree"
        },
        {
            "signature": "RPC_STATUS MesIncrementalHandleReset( handle_t Handle, void *UserState, MIDL_ES_ALLOC AllocFn, MIDL_ES_WRITE WriteFn, MIDL_ES_READ ReadFn, MIDL_ES_CODE Operation );",
            "name": "MesIncrementalHandleReset"
        },
        {
            "signature": "RPC_STATUS MesInqProcEncodingId( handle_t Handle, PRPC_SYNTAX_IDENTIFIER pInterfaceId, unsigned long *pProcNum );",
            "name": "MesInqProcEncodingId"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrMesProcEncodeDecode2( handle_t Handle, const MIDL_STUB_DESC *pStubDesc, PFORMAT_STRING pFormatString, ... );",
            "name": "NdrMesProcEncodeDecode2"
        }
    ],
    "Mileffects.h": [],
    "Minidumpapiset.h": [
        {
            "signature": "MINIDUMP_CALLBACK_ROUTINE MinidumpCallbackRoutine; BOOL MinidumpCallbackRoutine( [in] PVOID CallbackParam, [in] PMINIDUMP_CALLBACK_INPUT CallbackInput, [in, out] PMINIDUMP_CALLBACK_OUTPUT CallbackOutput ) {...}",
            "name": "MINIDUMP_CALLBACK_ROUTINE callback"
        },
        {
            "signature": "BOOL MiniDumpReadDumpStream( [in] PVOID BaseOfDump, [in] ULONG StreamNumber, [out] PMINIDUMP_DIRECTORY *Dir, [out] PVOID *StreamPointer, [out] ULONG *StreamSize );",
            "name": "MiniDumpReadDumpStream"
        },
        {
            "signature": "BOOL MiniDumpWriteDump( [in] HANDLE hProcess, [in] DWORD ProcessId, [in] HANDLE hFile, [in] MINIDUMP_TYPE DumpType, [in] PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, [in] PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, [in] PMINIDUMP_CALLBACK_INFORMATION CallbackParam );",
            "name": "MiniDumpWriteDump"
        }
    ],
    "Minwinbase.h": [
        {
            "signature": "LPOVERLAPPED_COMPLETION_ROUTINE LpoverlappedCompletionRoutine; void LpoverlappedCompletionRoutine( [in] DWORD dwErrorCode, [in] DWORD dwNumberOfBytesTransfered, [in, out] LPOVERLAPPED lpOverlapped ) {...}",
            "name": "LPOVERLAPPED_COMPLETION_ROUTINE callback"
        }
    ],
    "Mmc.h": [
        {
            "signature": "HRESULT MMCFreeNotifyHandle( [in] LONG_PTR lNotifyHandle );",
            "name": "MMCFreeNotifyHandle"
        },
        {
            "signature": "HRESULT MMCPropertyChangeNotify( [in] LONG_PTR lNotifyHandle, [in] LPARAM param );",
            "name": "MMCPropertyChangeNotify"
        },
        {
            "signature": "HRESULT MMCPropertyHelp( LPOLESTR pszHelpTopic );",
            "name": "MMCPropertyHelp"
        },
        {
            "signature": "HRESULT MMCPropPageCallback( void *vpsp );",
            "name": "MMCPropPageCallback"
        }
    ],
    "Mmcobj.h": [],
    "Mmddk.h": [
        {
            "signature": "DWORD mmGetCurrentTask();",
            "name": "mmGetCurrentTask"
        },
        {
            "signature": "void mmTaskBlock( DWORD h );",
            "name": "mmTaskBlock"
        },
        {
            "signature": "UINT mmTaskCreate( LPTASKCALLBACK lpfn, HANDLE *lph, DWORD_PTR dwInst );",
            "name": "mmTaskCreate"
        },
        {
            "signature": "BOOL mmTaskSignal( DWORD h );",
            "name": "mmTaskSignal"
        },
        {
            "signature": "void mmTaskYield();",
            "name": "mmTaskYield"
        }
    ],
    "Mmdeviceapi.h": [
        {
            "signature": "HRESULT ActivateAudioInterfaceAsync( [in] LPCWSTR deviceInterfacePath, [in] REFIID riid, [in] PROPVARIANT *activationParams, [in] IActivateAudioInterfaceCompletionHandler *completionHandler, IActivateAudioInterfaceAsyncOperation **activationOperation );",
            "name": "ActivateAudioInterfaceAsync"
        }
    ],
    "Mmeapi.h": [
        {
            "signature": "MMRESULT auxGetDevCaps( UINT uDeviceID, LPAUXCAPS pac, UINT cbac );",
            "name": "auxGetDevCaps"
        },
        {
            "signature": "MMRESULT auxGetDevCapsA( UINT_PTR uDeviceID, LPAUXCAPSA pac, UINT cbac );",
            "name": "auxGetDevCapsA"
        },
        {
            "signature": "MMRESULT auxGetDevCapsW( UINT_PTR uDeviceID, LPAUXCAPSW pac, UINT cbac );",
            "name": "auxGetDevCapsW"
        },
        {
            "signature": "UINT auxGetNumDevs();",
            "name": "auxGetNumDevs"
        },
        {
            "signature": "MMRESULT auxGetVolume( UINT uDeviceID, LPDWORD pdwVolume );",
            "name": "auxGetVolume"
        },
        {
            "signature": "MMRESULT auxOutMessage( UINT uDeviceID, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "auxOutMessage"
        },
        {
            "signature": "MMRESULT auxSetVolume( UINT uDeviceID, DWORD dwVolume );",
            "name": "auxSetVolume"
        },
        {
            "signature": "MMRESULT midiConnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved );",
            "name": "midiConnect"
        },
        {
            "signature": "MMRESULT midiDisconnect( HMIDI hmi, HMIDIOUT hmo, LPVOID pReserved );",
            "name": "midiDisconnect"
        },
        {
            "signature": "MMRESULT midiInAddBuffer( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiInAddBuffer"
        },
        {
            "signature": "MMRESULT midiInClose( HMIDIIN hmi );",
            "name": "midiInClose"
        },
        {
            "signature": "MMRESULT midiInGetDevCaps( UINT uDeviceID, LPMIDIINCAPS pmic, UINT cbmic );",
            "name": "midiInGetDevCaps"
        },
        {
            "signature": "MMRESULT midiInGetDevCapsA( UINT_PTR uDeviceID, LPMIDIINCAPSA pmic, UINT cbmic );",
            "name": "midiInGetDevCapsA"
        },
        {
            "signature": "MMRESULT midiInGetDevCapsW( UINT_PTR uDeviceID, LPMIDIINCAPSW pmic, UINT cbmic );",
            "name": "midiInGetDevCapsW"
        },
        {
            "signature": "MMRESULT midiInGetErrorText( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "midiInGetErrorText"
        },
        {
            "signature": "MMRESULT midiInGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "midiInGetErrorTextA"
        },
        {
            "signature": "MMRESULT midiInGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText );",
            "name": "midiInGetErrorTextW"
        },
        {
            "signature": "MMRESULT midiInGetID( HMIDIIN hmi, LPUINT puDeviceID );",
            "name": "midiInGetID"
        },
        {
            "signature": "UINT midiInGetNumDevs();",
            "name": "midiInGetNumDevs"
        },
        {
            "signature": "MMRESULT midiInMessage( HMIDIIN hmi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "midiInMessage"
        },
        {
            "signature": "MMRESULT midiInOpen( LPHMIDIIN phmi, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "midiInOpen"
        },
        {
            "signature": "MMRESULT midiInPrepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiInPrepareHeader"
        },
        {
            "signature": "MMRESULT midiInReset( HMIDIIN hmi );",
            "name": "midiInReset"
        },
        {
            "signature": "MMRESULT midiInStart( HMIDIIN hmi );",
            "name": "midiInStart"
        },
        {
            "signature": "MMRESULT midiInStop( HMIDIIN hmi );",
            "name": "midiInStop"
        },
        {
            "signature": "MMRESULT midiInUnprepareHeader( HMIDIIN hmi, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiInUnprepareHeader"
        },
        {
            "signature": "MMRESULT midiOutCacheDrumPatches( HMIDIOUT hmo, UINT uPatch, LPWORD pwkya, UINT fuCache );",
            "name": "midiOutCacheDrumPatches"
        },
        {
            "signature": "MMRESULT midiOutCachePatches( HMIDIOUT hmo, UINT uBank, LPWORD pwpa, UINT fuCache );",
            "name": "midiOutCachePatches"
        },
        {
            "signature": "MMRESULT midiOutClose( HMIDIOUT hmo );",
            "name": "midiOutClose"
        },
        {
            "signature": "MMRESULT midiOutGetDevCaps( UINT uDeviceID, LPMIDIOUTCAPS pmoc, UINT cbmoc );",
            "name": "midiOutGetDevCaps"
        },
        {
            "signature": "MMRESULT midiOutGetDevCapsA( UINT_PTR uDeviceID, LPMIDIOUTCAPSA pmoc, UINT cbmoc );",
            "name": "midiOutGetDevCapsA"
        },
        {
            "signature": "MMRESULT midiOutGetDevCapsW( UINT_PTR uDeviceID, LPMIDIOUTCAPSW pmoc, UINT cbmoc );",
            "name": "midiOutGetDevCapsW"
        },
        {
            "signature": "MMRESULT midiOutGetErrorText( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "midiOutGetErrorText"
        },
        {
            "signature": "MMRESULT midiOutGetErrorTextA( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "midiOutGetErrorTextA"
        },
        {
            "signature": "MMRESULT midiOutGetErrorTextW( MMRESULT mmrError, LPWSTR pszText, UINT cchText );",
            "name": "midiOutGetErrorTextW"
        },
        {
            "signature": "MMRESULT midiOutGetID( HMIDIOUT hmo, LPUINT puDeviceID );",
            "name": "midiOutGetID"
        },
        {
            "signature": "UINT midiOutGetNumDevs();",
            "name": "midiOutGetNumDevs"
        },
        {
            "signature": "MMRESULT midiOutGetVolume( HMIDIOUT hmo, LPDWORD pdwVolume );",
            "name": "midiOutGetVolume"
        },
        {
            "signature": "MMRESULT midiOutLongMsg( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiOutLongMsg"
        },
        {
            "signature": "MMRESULT midiOutMessage( HMIDIOUT hmo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "midiOutMessage"
        },
        {
            "signature": "MMRESULT midiOutOpen( LPHMIDIOUT phmo, UINT uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "midiOutOpen"
        },
        {
            "signature": "MMRESULT midiOutPrepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiOutPrepareHeader"
        },
        {
            "signature": "MMRESULT midiOutReset( HMIDIOUT hmo );",
            "name": "midiOutReset"
        },
        {
            "signature": "MMRESULT midiOutSetVolume( HMIDIOUT hmo, DWORD dwVolume );",
            "name": "midiOutSetVolume"
        },
        {
            "signature": "MMRESULT midiOutShortMsg( HMIDIOUT hmo, DWORD dwMsg );",
            "name": "midiOutShortMsg"
        },
        {
            "signature": "MMRESULT midiOutUnprepareHeader( HMIDIOUT hmo, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiOutUnprepareHeader"
        },
        {
            "signature": "MMRESULT midiStreamClose( HMIDISTRM hms );",
            "name": "midiStreamClose"
        },
        {
            "signature": "MMRESULT midiStreamOpen( LPHMIDISTRM phms, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "midiStreamOpen"
        },
        {
            "signature": "MMRESULT midiStreamOut( HMIDISTRM hms, LPMIDIHDR pmh, UINT cbmh );",
            "name": "midiStreamOut"
        },
        {
            "signature": "MMRESULT midiStreamPause( HMIDISTRM hms );",
            "name": "midiStreamPause"
        },
        {
            "signature": "MMRESULT midiStreamPosition( HMIDISTRM hms, LPMMTIME lpmmt, UINT cbmmt );",
            "name": "midiStreamPosition"
        },
        {
            "signature": "MMRESULT midiStreamProperty( HMIDISTRM hms, LPBYTE lppropdata, DWORD dwProperty );",
            "name": "midiStreamProperty"
        },
        {
            "signature": "MMRESULT midiStreamRestart( HMIDISTRM hms );",
            "name": "midiStreamRestart"
        },
        {
            "signature": "MMRESULT midiStreamStop( HMIDISTRM hms );",
            "name": "midiStreamStop"
        },
        {
            "signature": "MMRESULT mixerClose( HMIXER hmx );",
            "name": "mixerClose"
        },
        {
            "signature": "MMRESULT mixerGetControlDetails( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails );",
            "name": "mixerGetControlDetails"
        },
        {
            "signature": "MMRESULT mixerGetControlDetailsA( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails );",
            "name": "mixerGetControlDetailsA"
        },
        {
            "signature": "MMRESULT mixerGetControlDetailsW( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails );",
            "name": "mixerGetControlDetailsW"
        },
        {
            "signature": "MMRESULT mixerGetDevCaps( UINT uMxId, LPMIXERCAPS pmxcaps, UINT cbmxcaps );",
            "name": "mixerGetDevCaps"
        },
        {
            "signature": "MMRESULT mixerGetDevCapsA( UINT_PTR uMxId, LPMIXERCAPSA pmxcaps, UINT cbmxcaps );",
            "name": "mixerGetDevCapsA"
        },
        {
            "signature": "MMRESULT mixerGetDevCapsW( UINT_PTR uMxId, LPMIXERCAPSW pmxcaps, UINT cbmxcaps );",
            "name": "mixerGetDevCapsW"
        },
        {
            "signature": "MMRESULT mixerGetID( HMIXEROBJ hmxobj, UINT *puMxId, DWORD fdwId );",
            "name": "mixerGetID"
        },
        {
            "signature": "MMRESULT mixerGetLineControls( HMIXEROBJ hmxobj, LPMIXERLINECONTROLS pmxlc, DWORD fdwControls );",
            "name": "mixerGetLineControls"
        },
        {
            "signature": "MMRESULT mixerGetLineControlsA( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSA pmxlc, DWORD fdwControls );",
            "name": "mixerGetLineControlsA"
        },
        {
            "signature": "MMRESULT mixerGetLineControlsW( HMIXEROBJ hmxobj, LPMIXERLINECONTROLSW pmxlc, DWORD fdwControls );",
            "name": "mixerGetLineControlsW"
        },
        {
            "signature": "MMRESULT mixerGetLineInfo( HMIXEROBJ hmxobj, LPMIXERLINE pmxl, DWORD fdwInfo );",
            "name": "mixerGetLineInfo"
        },
        {
            "signature": "MMRESULT mixerGetLineInfoA( HMIXEROBJ hmxobj, LPMIXERLINEA pmxl, DWORD fdwInfo );",
            "name": "mixerGetLineInfoA"
        },
        {
            "signature": "MMRESULT mixerGetLineInfoW( HMIXEROBJ hmxobj, LPMIXERLINEW pmxl, DWORD fdwInfo );",
            "name": "mixerGetLineInfoW"
        },
        {
            "signature": "UINT mixerGetNumDevs();",
            "name": "mixerGetNumDevs"
        },
        {
            "signature": "DWORD mixerMessage( HMIXER hmx, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2 );",
            "name": "mixerMessage"
        },
        {
            "signature": "MMRESULT mixerOpen( LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "mixerOpen"
        },
        {
            "signature": "MMRESULT mixerSetControlDetails( HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails );",
            "name": "mixerSetControlDetails"
        },
        {
            "signature": "MMRESULT waveInAddBuffer( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveInAddBuffer"
        },
        {
            "signature": "MMRESULT waveInClose( HWAVEIN hwi );",
            "name": "waveInClose"
        },
        {
            "signature": "MMRESULT waveInGetDevCaps( UINT uDeviceID, LPWAVEINCAPS pwic, UINT cbwic );",
            "name": "waveInGetDevCaps"
        },
        {
            "signature": "MMRESULT waveInGetErrorText( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "waveInGetErrorText"
        },
        {
            "signature": "MMRESULT waveInGetID( HWAVEIN hwi, LPUINT puDeviceID );",
            "name": "waveInGetID"
        },
        {
            "signature": "UINT waveInGetNumDevs();",
            "name": "waveInGetNumDevs"
        },
        {
            "signature": "MMRESULT waveInGetPosition( HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt );",
            "name": "waveInGetPosition"
        },
        {
            "signature": "MMRESULT waveInMessage( HWAVEIN hwi, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "waveInMessage"
        },
        {
            "signature": "MMRESULT waveInOpen( LPHWAVEIN phwi, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "waveInOpen"
        },
        {
            "signature": "MMRESULT waveInPrepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveInPrepareHeader"
        },
        {
            "signature": "MMRESULT waveInReset( HWAVEIN hwi );",
            "name": "waveInReset"
        },
        {
            "signature": "MMRESULT waveInStart( HWAVEIN hwi );",
            "name": "waveInStart"
        },
        {
            "signature": "MMRESULT waveInStop( HWAVEIN hwi );",
            "name": "waveInStop"
        },
        {
            "signature": "MMRESULT waveInUnprepareHeader( HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveInUnprepareHeader"
        },
        {
            "signature": "MMRESULT waveOutBreakLoop( HWAVEOUT hwo );",
            "name": "waveOutBreakLoop"
        },
        {
            "signature": "MMRESULT waveOutClose( HWAVEOUT hwo );",
            "name": "waveOutClose"
        },
        {
            "signature": "MMRESULT waveOutGetDevCaps( UINT uDeviceID, LPWAVEOUTCAPS pwoc, UINT cbwoc );",
            "name": "waveOutGetDevCaps"
        },
        {
            "signature": "MMRESULT waveOutGetErrorText( MMRESULT mmrError, LPSTR pszText, UINT cchText );",
            "name": "waveOutGetErrorText"
        },
        {
            "signature": "MMRESULT waveOutGetID( HWAVEOUT hwo, LPUINT puDeviceID );",
            "name": "waveOutGetID"
        },
        {
            "signature": "UINT waveOutGetNumDevs();",
            "name": "waveOutGetNumDevs"
        },
        {
            "signature": "MMRESULT waveOutGetPitch( HWAVEOUT hwo, LPDWORD pdwPitch );",
            "name": "waveOutGetPitch"
        },
        {
            "signature": "MMRESULT waveOutGetPlaybackRate( HWAVEOUT hwo, LPDWORD pdwRate );",
            "name": "waveOutGetPlaybackRate"
        },
        {
            "signature": "MMRESULT waveOutGetPosition( HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt );",
            "name": "waveOutGetPosition"
        },
        {
            "signature": "MMRESULT waveOutGetVolume( HWAVEOUT hwo, LPDWORD pdwVolume );",
            "name": "waveOutGetVolume"
        },
        {
            "signature": "MMRESULT waveOutMessage( HWAVEOUT hwo, UINT uMsg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "waveOutMessage"
        },
        {
            "signature": "MMRESULT waveOutOpen( LPHWAVEOUT phwo, UINT uDeviceID, LPCWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "waveOutOpen"
        },
        {
            "signature": "MMRESULT waveOutPause( HWAVEOUT hwo );",
            "name": "waveOutPause"
        },
        {
            "signature": "MMRESULT waveOutPrepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveOutPrepareHeader"
        },
        {
            "signature": "MMRESULT waveOutReset( HWAVEOUT hwo );",
            "name": "waveOutReset"
        },
        {
            "signature": "MMRESULT waveOutRestart( HWAVEOUT hwo );",
            "name": "waveOutRestart"
        },
        {
            "signature": "MMRESULT waveOutSetPitch( HWAVEOUT hwo, DWORD dwPitch );",
            "name": "waveOutSetPitch"
        },
        {
            "signature": "MMRESULT waveOutSetPlaybackRate( HWAVEOUT hwo, DWORD dwRate );",
            "name": "waveOutSetPlaybackRate"
        },
        {
            "signature": "MMRESULT waveOutSetVolume( HWAVEOUT hwo, DWORD dwVolume );",
            "name": "waveOutSetVolume"
        },
        {
            "signature": "MMRESULT waveOutUnprepareHeader( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveOutUnprepareHeader"
        },
        {
            "signature": "MMRESULT waveOutWrite( HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh );",
            "name": "waveOutWrite"
        }
    ],
    "Mmiscapi.h": [
        {
            "signature": "LRESULT CloseDriver( [in] HDRVR hDriver, [in] LPARAM lParam1, [in] LPARAM lParam2 );",
            "name": "CloseDriver"
        },
        {
            "signature": "LRESULT DefDriverProc( DWORD_PTR dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2 );",
            "name": "DefDriverProc"
        },
        {
            "signature": "BOOL DriverCallback( DWORD_PTR dwCallback, DWORD dwFlags, HDRVR hDevice, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dwParam1, DWORD_PTR dwParam2 );",
            "name": "DriverCallback"
        },
        {
            "signature": "DRIVERPROC Driverproc; LRESULT Driverproc( DWORD_PTR unnamedParam1, HDRVR unnamedParam2, UINT unnamedParam3, LPARAM unnamedParam4, LPARAM unnamedParam5 ) {...}",
            "name": "DRIVERPROC callback"
        },
        {
            "signature": "LRESULT DrvDefDriverProc( DWORD dwDriverIdentifier, HDRVR hdrvr, UINT uMsg, LPARAM lParam1, LPARAM lParam2 );",
            "name": "DrvDefDriverProc"
        },
        {
            "signature": "HMODULE DrvGetModuleHandle( [in] HDRVR hDriver );",
            "name": "DrvGetModuleHandle"
        },
        {
            "signature": "HMODULE GetDriverModuleHandle( [in] HDRVR hDriver );",
            "name": "GetDriverModuleHandle"
        },
        {
            "signature": "MMRESULT mmioAdvance( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuAdvance );",
            "name": "mmioAdvance"
        },
        {
            "signature": "MMRESULT mmioAscend( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuAscend );",
            "name": "mmioAscend"
        },
        {
            "signature": "MMRESULT mmioClose( HMMIO hmmio, UINT fuClose );",
            "name": "mmioClose"
        },
        {
            "signature": "MMRESULT mmioCreateChunk( HMMIO hmmio, LPMMCKINFO pmmcki, UINT fuCreate );",
            "name": "mmioCreateChunk"
        },
        {
            "signature": "MMRESULT mmioDescend( HMMIO hmmio, LPMMCKINFO pmmcki, const MMCKINFO *pmmckiParent, UINT fuDescend );",
            "name": "mmioDescend"
        },
        {
            "signature": "MMRESULT mmioFlush( HMMIO hmmio, UINT fuFlush );",
            "name": "mmioFlush"
        },
        {
            "signature": "MMRESULT mmioGetInfo( HMMIO hmmio, LPMMIOINFO pmmioinfo, UINT fuInfo );",
            "name": "mmioGetInfo"
        },
        {
            "signature": "LPMMIOPROC mmioInstallIOProc( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags );",
            "name": "mmioInstallIOProc"
        },
        {
            "signature": "LPMMIOPROC mmioInstallIOProcA( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags );",
            "name": "mmioInstallIOProcA"
        },
        {
            "signature": "LPMMIOPROC mmioInstallIOProcW( FOURCC fccIOProc, LPMMIOPROC pIOProc, DWORD dwFlags );",
            "name": "mmioInstallIOProcW"
        },
        {
            "signature": "HMMIO mmioOpen( LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen );",
            "name": "mmioOpen"
        },
        {
            "signature": "HMMIO mmioOpenA( LPSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen );",
            "name": "mmioOpenA"
        },
        {
            "signature": "HMMIO mmioOpenW( LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen );",
            "name": "mmioOpenW"
        },
        {
            "signature": "MMIOPROC Mmioproc; LRESULT Mmioproc( LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2 ) {...}",
            "name": "MMIOPROC callback"
        },
        {
            "signature": "LONG mmioRead( HMMIO hmmio, HPSTR pch, LONG cch );",
            "name": "mmioRead"
        },
        {
            "signature": "MMRESULT mmioRename( LPCSTR pszFileName, LPCSTR pszNewFileName, const MMIOINFO *pmmioinfo, DWORD fdwRename );",
            "name": "mmioRename"
        },
        {
            "signature": "MMRESULT mmioRenameA( LPCSTR pszFileName, LPCSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename );",
            "name": "mmioRenameA"
        },
        {
            "signature": "MMRESULT mmioRenameW( LPCWSTR pszFileName, LPCWSTR pszNewFileName, LPCMMIOINFO pmmioinfo, DWORD fdwRename );",
            "name": "mmioRenameW"
        },
        {
            "signature": "LONG mmioSeek( HMMIO hmmio, LONG lOffset, int iOrigin );",
            "name": "mmioSeek"
        },
        {
            "signature": "LRESULT mmioSendMessage( HMMIO hmmio, UINT uMsg, LPARAM lParam1, LPARAM lParam2 );",
            "name": "mmioSendMessage"
        },
        {
            "signature": "MMRESULT mmioSetBuffer( HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT fuBuffer );",
            "name": "mmioSetBuffer"
        },
        {
            "signature": "MMRESULT mmioSetInfo( HMMIO hmmio, LPCMMIOINFO pmmioinfo, UINT fuInfo );",
            "name": "mmioSetInfo"
        },
        {
            "signature": "FOURCC mmioStringToFOURCC( LPCSTR sz, UINT uFlags );",
            "name": "mmioStringToFOURCC"
        },
        {
            "signature": "FOURCC mmioStringToFOURCCA( LPCSTR sz, UINT uFlags );",
            "name": "mmioStringToFOURCCA"
        },
        {
            "signature": "FOURCC mmioStringToFOURCCW( LPCWSTR sz, UINT uFlags );",
            "name": "mmioStringToFOURCCW"
        },
        {
            "signature": "LONG mmioWrite( HMMIO hmmio, const char _huge *pch, LONG cch );",
            "name": "mmioWrite"
        },
        {
            "signature": "HDRVR OpenDriver( [in] LPCWSTR szDriverName, [in] LPCWSTR szSectionName, [in] LPARAM lParam2 );",
            "name": "OpenDriver"
        },
        {
            "signature": "LRESULT SendDriverMessage( [in] HDRVR hDriver, [in] UINT message, [in, out] LPARAM lParam1, [in, out] LPARAM lParam2 );",
            "name": "SendDriverMessage"
        },
        {
            "signature": "LONG sndOpenSound( LPCWSTR EventName, LPCWSTR AppName, INT32 Flags, PHANDLE FileHandle );",
            "name": "sndOpenSound"
        }
    ],
    "Mmreg.h": [],
    "Mmsystem.h": [],
    "Mobsync.h": [],
    "Mpconfig.h": [],
    "Mprapi.h": [
        {
            "signature": "BOOL MprAdminAcceptNewConnection( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1 );",
            "name": "MprAdminAcceptNewConnection"
        },
        {
            "signature": "BOOL MprAdminAcceptNewConnection2( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1, [in] RAS_CONNECTION_2 *pRasConnection2 );",
            "name": "MprAdminAcceptNewConnection2"
        },
        {
            "signature": "BOOL MprAdminAcceptNewConnection3( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1, [in] RAS_CONNECTION_2 *pRasConnection2, [in] RAS_CONNECTION_3 *pRasConnection3 );",
            "name": "MprAdminAcceptNewConnection3"
        },
        {
            "signature": "BOOL MprAdminAcceptNewConnectionEx( [in] RAS_CONNECTION_EX *pRasConn );",
            "name": "MprAdminAcceptNewConnectionEx"
        },
        {
            "signature": "BOOL MprAdminAcceptNewLink( [in] RAS_PORT_0 *pRasPort0, [in] RAS_PORT_1 *pRasPort1 );",
            "name": "MprAdminAcceptNewLink"
        },
        {
            "signature": "BOOL MprAdminAcceptReauthentication( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1, [in] RAS_CONNECTION_2 *pRasConnection2, [in] RAS_CONNECTION_3 *pRasConnection3 );",
            "name": "MprAdminAcceptReauthentication"
        },
        {
            "signature": "BOOL MprAdminAcceptReauthenticationEx( [in] RAS_CONNECTION_EX *pRasConn );",
            "name": "MprAdminAcceptReauthenticationEx"
        },
        {
            "signature": "DWORD MprAdminBufferFree( [in] LPVOID pBuffer );",
            "name": "MprAdminBufferFree"
        },
        {
            "signature": "DWORD MprAdminConnectionClearStats( [in] RAS_SERVER_HANDLE hRasServer, [in] HANDLE hRasConnection );",
            "name": "MprAdminConnectionClearStats"
        },
        {
            "signature": "DWORD MprAdminConnectionEnum( [in] RAS_SERVER_HANDLE hRasServer, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in] LPDWORD lpdwResumeHandle );",
            "name": "MprAdminConnectionEnum"
        },
        {
            "signature": "DWORD MprAdminConnectionEnumEx( [in] RAS_SERVER_HANDLE hRasServer, [in] PMPRAPI_OBJECT_HEADER pObjectHeader, [in] DWORD dwPreferedMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [out] PRAS_CONNECTION_EX *ppRasConn, [in] LPDWORD lpdwResumeHandle );",
            "name": "MprAdminConnectionEnumEx"
        },
        {
            "signature": "DWORD MprAdminConnectionGetInfo( [in] RAS_SERVER_HANDLE hRasServer, [in] DWORD dwLevel, [in] HANDLE hRasConnection, [out] LPBYTE *lplpbBuffer );",
            "name": "MprAdminConnectionGetInfo"
        },
        {
            "signature": "DWORD MprAdminConnectionGetInfoEx( [in] RAS_SERVER_HANDLE hRasServer, [in] HANDLE hRasConnection, [out] PRAS_CONNECTION_EX pRasConnection );",
            "name": "MprAdminConnectionGetInfoEx"
        },
        {
            "signature": "void MprAdminConnectionHangupNotification( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1 );",
            "name": "MprAdminConnectionHangupNotification"
        },
        {
            "signature": "void MprAdminConnectionHangupNotification2( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1, [in] RAS_CONNECTION_2 *pRasConnection2 );",
            "name": "MprAdminConnectionHangupNotification2"
        },
        {
            "signature": "void MprAdminConnectionHangupNotification3( [in] RAS_CONNECTION_0 *pRasConnection0, [in] RAS_CONNECTION_1 *pRasConnection1, [in] RAS_CONNECTION_2 *pRasConnection2, [in] RAS_CONNECTION_3 *pRasConnection3 );",
            "name": "MprAdminConnectionHangupNotification3"
        },
        {
            "signature": "void MprAdminConnectionHangupNotificationEx( [in] RAS_CONNECTION_EX *pRasConn );",
            "name": "MprAdminConnectionHangupNotificationEx"
        },
        {
            "signature": "DWORD MprAdminConnectionRemoveQuarantine( [in] HANDLE hRasServer, [in] HANDLE hRasConnection, [in] BOOL fIsIpAddress );",
            "name": "MprAdminConnectionRemoveQuarantine"
        },
        {
            "signature": "DWORD MprAdminDeregisterConnectionNotification( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hEventNotification );",
            "name": "MprAdminDeregisterConnectionNotification"
        },
        {
            "signature": "DWORD MprAdminDeviceEnum( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer, [out] LPDWORD lpdwTotalEntries );",
            "name": "MprAdminDeviceEnum"
        },
        {
            "signature": "DWORD MprAdminEstablishDomainRasServer( [in] LPWSTR pszDomain, [in] LPWSTR pszMachine, [in] BOOL bEnable );",
            "name": "MprAdminEstablishDomainRasServer"
        },
        {
            "signature": "DWORD MprAdminGetErrorString( [in] DWORD dwError, [out] LPWSTR *lplpwsErrorString );",
            "name": "MprAdminGetErrorString"
        },
        {
            "signature": "DWORD MprAdminGetIpAddressForUser( [in] WCHAR *lpwszUserName, [in] WCHAR *lpwszPortName, [in, out] DWORD *lpdwIpAddress, [out] BOOL *bNotifyRelease );",
            "name": "MprAdminGetIpAddressForUser"
        },
        {
            "signature": "DWORD MprAdminGetIpv6AddressForUser( [in] WCHAR *lpwszUserName, [in] WCHAR *lpwszPortName, [in, out] IN6_ADDR *lpdwIpv6Address, [out] BOOL *bNotifyRelease );",
            "name": "MprAdminGetIpv6AddressForUser"
        },
        {
            "signature": "DWORD MprAdminGetPDCServer( [in] LPCWSTR lpszDomain, [in] LPCWSTR lpszServer, [out] LPWSTR lpszPDCServer );",
            "name": "MprAdminGetPDCServer"
        },
        {
            "signature": "DWORD MprAdminInitializeDll();",
            "name": "MprAdminInitializeDll"
        },
        {
            "signature": "DWORD MprAdminInitializeDllEx( PMPRAPI_ADMIN_DLL_CALLBACKS pAdminCallbacks );",
            "name": "MprAdminInitializeDllEx"
        },
        {
            "signature": "DWORD MprAdminInterfaceConnect( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] HANDLE hEvent, [in] BOOL fSynchronous );",
            "name": "MprAdminInterfaceConnect"
        },
        {
            "signature": "DWORD MprAdminInterfaceCreate( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer, [out] HANDLE *phInterface );",
            "name": "MprAdminInterfaceCreate"
        },
        {
            "signature": "DWORD MprAdminInterfaceDelete( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface );",
            "name": "MprAdminInterfaceDelete"
        },
        {
            "signature": "DWORD MprAdminInterfaceDeviceGetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwIndex, [in] DWORD dwLevel, [out] LPBYTE *lplpBuffer );",
            "name": "MprAdminInterfaceDeviceGetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceDeviceSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwIndex, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprAdminInterfaceDeviceSetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceDisconnect( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface );",
            "name": "MprAdminInterfaceDisconnect"
        },
        {
            "signature": "DWORD MprAdminInterfaceEnum( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in] LPDWORD lpdwResumeHandle );",
            "name": "MprAdminInterfaceEnum"
        },
        {
            "signature": "DWORD MprAdminInterfaceGetCredentials( [in] LPWSTR lpwsServer, [in] LPWSTR lpwsInterfaceName, [out] LPWSTR lpwsUserName, [out] LPWSTR lpwsPassword, [out] LPWSTR lpwsDomainName );",
            "name": "MprAdminInterfaceGetCredentials"
        },
        {
            "signature": "DWORD MprAdminInterfaceGetCredentialsEx( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer );",
            "name": "MprAdminInterfaceGetCredentialsEx"
        },
        {
            "signature": "DWORD MprAdminInterfaceGetCustomInfoEx( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [out] PMPR_IF_CUSTOMINFOEX pCustomInfo );",
            "name": "MprAdminInterfaceGetCustomInfoEx"
        },
        {
            "signature": "DWORD MprAdminInterfaceGetHandle( [in] MPR_SERVER_HANDLE hMprServer, [in] LPWSTR lpwsInterfaceName, [out] HANDLE *phInterface, [in] BOOL fIncludeClientInterfaces );",
            "name": "MprAdminInterfaceGetHandle"
        },
        {
            "signature": "DWORD MprAdminInterfaceGetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwLevel, [in] LPBYTE *lplpbBuffer );",
            "name": "MprAdminInterfaceGetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceQueryUpdateResult( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwProtocolId, [out] LPDWORD lpdwUpdateResult );",
            "name": "MprAdminInterfaceQueryUpdateResult"
        },
        {
            "signature": "DWORD MprAdminInterfaceSetCredentials( [in] LPWSTR lpwsServer, [in] LPWSTR lpwsInterfaceName, [in] LPWSTR lpwsUserName, [in] LPWSTR lpwsDomainName, [in] LPWSTR lpwsPassword );",
            "name": "MprAdminInterfaceSetCredentials"
        },
        {
            "signature": "DWORD MprAdminInterfaceSetCredentialsEx( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprAdminInterfaceSetCredentialsEx"
        },
        {
            "signature": "DWORD MprAdminInterfaceSetCustomInfoEx( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] PMPR_IF_CUSTOMINFOEX pCustomInfo );",
            "name": "MprAdminInterfaceSetCustomInfoEx"
        },
        {
            "signature": "DWORD MprAdminInterfaceSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprAdminInterfaceSetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceTransportAdd( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwTransportId, [in] LPBYTE pInterfaceInfo, [in] DWORD dwInterfaceInfoSize );",
            "name": "MprAdminInterfaceTransportAdd"
        },
        {
            "signature": "DWORD MprAdminInterfaceTransportGetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwTransportId, [out] LPBYTE *ppInterfaceInfo, [out, optional] LPDWORD lpdwInterfaceInfoSize );",
            "name": "MprAdminInterfaceTransportGetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceTransportRemove( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwTransportId );",
            "name": "MprAdminInterfaceTransportRemove"
        },
        {
            "signature": "DWORD MprAdminInterfaceTransportSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwTransportId, [in] LPBYTE pInterfaceInfo, [in] DWORD dwInterfaceInfoSize );",
            "name": "MprAdminInterfaceTransportSetInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceUpdatePhonebookInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface );",
            "name": "MprAdminInterfaceUpdatePhonebookInfo"
        },
        {
            "signature": "DWORD MprAdminInterfaceUpdateRoutes( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hInterface, [in] DWORD dwProtocolId, [in] HANDLE hEvent );",
            "name": "MprAdminInterfaceUpdateRoutes"
        },
        {
            "signature": "DWORD MprAdminIsDomainRasServer( [in] LPWSTR pszDomain, [in] LPWSTR pszMachine, [out] PBOOL pbIsRasServer );",
            "name": "MprAdminIsDomainRasServer"
        },
        {
            "signature": "DWORD MprAdminIsServiceInitialized( [in] LPWSTR lpwsServerName, [in] BOOL *fIsServiceInitialized );",
            "name": "MprAdminIsServiceInitialized"
        },
        {
            "signature": "BOOL MprAdminIsServiceRunning( [in] LPWSTR lpwsServerName );",
            "name": "MprAdminIsServiceRunning"
        },
        {
            "signature": "void MprAdminLinkHangupNotification( [in] RAS_PORT_0 *pRasPort0, [in] RAS_PORT_1 *pRasPort1 );",
            "name": "MprAdminLinkHangupNotification"
        },
        {
            "signature": "DWORD MprAdminMIBBufferFree( [in] LPVOID pBuffer );",
            "name": "MprAdminMIBBufferFree"
        },
        {
            "signature": "DWORD MprAdminMIBEntryCreate( [in] MIB_SERVER_HANDLE hMibServer, [out] DWORD dwPid, [in] DWORD dwRoutingPid, [in] LPVOID lpEntry, [in] DWORD dwEntrySize );",
            "name": "MprAdminMIBEntryCreate"
        },
        {
            "signature": "DWORD MprAdminMIBEntryDelete( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpEntry, [in] DWORD dwEntrySize );",
            "name": "MprAdminMIBEntryDelete"
        },
        {
            "signature": "DWORD MprAdminMIBEntryGet( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpInEntry, [in] DWORD dwInEntrySize, [out] LPVOID *lplpOutEntry, [out] LPDWORD lpOutEntrySize );",
            "name": "MprAdminMIBEntryGet"
        },
        {
            "signature": "DWORD MprAdminMIBEntryGetFirst( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpInEntry, [in] DWORD dwInEntrySize, [out] LPVOID *lplpOutEntry, [out] LPDWORD lpOutEntrySize );",
            "name": "MprAdminMIBEntryGetFirst"
        },
        {
            "signature": "DWORD MprAdminMIBEntryGetNext( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpInEntry, [in] DWORD dwInEntrySize, [out] LPVOID *lplpOutEntry, [out] LPDWORD lpOutEntrySize );",
            "name": "MprAdminMIBEntryGetNext"
        },
        {
            "signature": "DWORD MprAdminMIBEntrySet( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpEntry, [in] DWORD dwEntrySize );",
            "name": "MprAdminMIBEntrySet"
        },
        {
            "signature": "DWORD MprAdminMIBGetTrapInfo( [in] MIB_SERVER_HANDLE hMibServer, [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] LPVOID lpInData, [in] DWORD dwInDataSize, [out] LPVOID *lplpOutData, [in, out] LPDWORD lpOutDataSize );",
            "name": "MprAdminMIBGetTrapInfo"
        },
        {
            "signature": "DWORD MprAdminMIBServerConnect( [in] LPWSTR lpwsServerName, [out] MIB_SERVER_HANDLE *phMibServer );",
            "name": "MprAdminMIBServerConnect"
        },
        {
            "signature": "void MprAdminMIBServerDisconnect( [in] MIB_SERVER_HANDLE hMibServer );",
            "name": "MprAdminMIBServerDisconnect"
        },
        {
            "signature": "DWORD MprAdminMIBSetTrapInfo( [in] DWORD dwProtocolId, [in] DWORD dwRoutingPid, [in] HANDLE hEvent, [in] LPVOID lpInData, [in] DWORD dwInDataSize, [out] LPVOID *lplpOutData, [in, out] LPDWORD lpOutDataSize );",
            "name": "MprAdminMIBSetTrapInfo"
        },
        {
            "signature": "DWORD MprAdminPortClearStats( [in] RAS_SERVER_HANDLE hRasServer, [in] HANDLE hPort );",
            "name": "MprAdminPortClearStats"
        },
        {
            "signature": "DWORD MprAdminPortDisconnect( [in] RAS_SERVER_HANDLE hRasServer, [in] HANDLE hPort );",
            "name": "MprAdminPortDisconnect"
        },
        {
            "signature": "DWORD MprAdminPortEnum( [in] RAS_SERVER_HANDLE hRasServer, [in] DWORD dwLevel, [in] HANDLE hRasConnection, [out] LPBYTE *lplpbBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in] LPDWORD lpdwResumeHandle );",
            "name": "MprAdminPortEnum"
        },
        {
            "signature": "DWORD MprAdminPortGetInfo( [in] RAS_SERVER_HANDLE hRasServer, [in] DWORD dwLevel, [in] HANDLE hPort, [out] LPBYTE *lplpbBuffer );",
            "name": "MprAdminPortGetInfo"
        },
        {
            "signature": "DWORD MprAdminPortReset( [in] RAS_SERVER_HANDLE hRasServer, [in] HANDLE hPort );",
            "name": "MprAdminPortReset"
        },
        {
            "signature": "DWORD MprAdminRegisterConnectionNotification( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hEventNotification );",
            "name": "MprAdminRegisterConnectionNotification"
        },
        {
            "signature": "void MprAdminReleaseIpAddress( [in] WCHAR *lpszUserName, [in] WCHAR *lpszPortName, [in] DWORD *lpdwIpAddress );",
            "name": "MprAdminReleaseIpAddress"
        },
        {
            "signature": "void MprAdminReleaseIpv6AddressForUser( [in] WCHAR *lpszUserName, [in] WCHAR *lpszPortName, [in] IN6_ADDR *lpdwIpv6Address );",
            "name": "MprAdminReleaseIpv6AddressForUser"
        },
        {
            "signature": "DWORD MprAdminSendUserMessage( [in] MPR_SERVER_HANDLE hMprServer, [in] HANDLE hConnection, [in] LPWSTR lpwszMessage );",
            "name": "MprAdminSendUserMessage"
        },
        {
            "signature": "DWORD MprAdminServerConnect( [in, optional] LPWSTR lpwsServerName, [out] MPR_SERVER_HANDLE *phMprServer );",
            "name": "MprAdminServerConnect"
        },
        {
            "signature": "void MprAdminServerDisconnect( [in] MPR_SERVER_HANDLE hMprServer );",
            "name": "MprAdminServerDisconnect"
        },
        {
            "signature": "DWORD MprAdminServerGetCredentials( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer );",
            "name": "MprAdminServerGetCredentials"
        },
        {
            "signature": "DWORD MprAdminServerGetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer );",
            "name": "MprAdminServerGetInfo"
        },
        {
            "signature": "DWORD MprAdminServerGetInfoEx( [in] MPR_SERVER_HANDLE hMprServer, [out] MPR_SERVER_EX *pServerInfo );",
            "name": "MprAdminServerGetInfoEx"
        },
        {
            "signature": "DWORD MprAdminServerSetCredentials( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprAdminServerSetCredentials"
        },
        {
            "signature": "DWORD MprAdminServerSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprAdminServerSetInfo"
        },
        {
            "signature": "DWORD MprAdminServerSetInfoEx( [in] MPR_SERVER_HANDLE hMprServer, [in] MPR_SERVER_SET_CONFIG_EX *pServerInfo );",
            "name": "MprAdminServerSetInfoEx"
        },
        {
            "signature": "DWORD MprAdminTerminateDll();",
            "name": "MprAdminTerminateDll"
        },
        {
            "signature": "DWORD MprAdminTransportCreate( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwTransportId, [in, optional] LPWSTR lpwsTransportName, [in] LPBYTE pGlobalInfo, [in] DWORD dwGlobalInfoSize, [in, optional] LPBYTE pClientInterfaceInfo, [in, optional] DWORD dwClientInterfaceInfoSize, [in] LPWSTR lpwsDLLPath );",
            "name": "MprAdminTransportCreate"
        },
        {
            "signature": "DWORD MprAdminTransportGetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwTransportId, [out, optional] LPBYTE *ppGlobalInfo, [out, optional] LPDWORD lpdwGlobalInfoSize, [out, optional] LPBYTE *ppClientInterfaceInfo, [out, optional] LPDWORD lpdwClientInterfaceInfoSize );",
            "name": "MprAdminTransportGetInfo"
        },
        {
            "signature": "DWORD MprAdminTransportSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwTransportId, [in, optional] LPBYTE pGlobalInfo, [in] DWORD dwGlobalInfoSize, [in, optional] LPBYTE pClientInterfaceInfo, [in] DWORD dwClientInterfaceInfoSize );",
            "name": "MprAdminTransportSetInfo"
        },
        {
            "signature": "DWORD MprAdminUserGetInfo( [in] LPCWSTR lpszServer, [in] LPCWSTR lpszUser, [in] DWORD dwLevel, [out] LPBYTE lpbBuffer );",
            "name": "MprAdminUserGetInfo"
        },
        {
            "signature": "DWORD MprAdminUserSetInfo( [in] LPCWSTR lpszServer, [in] LPCWSTR lpszUser, [in] DWORD dwLevel, [in] const LPBYTE lpbBuffer );",
            "name": "MprAdminUserSetInfo"
        },
        {
            "signature": "DWORD MprConfigBufferFree( [in] LPVOID pBuffer );",
            "name": "MprConfigBufferFree"
        },
        {
            "signature": "DWORD MprConfigFilterGetInfo( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [in] DWORD dwTransportId, [out] LPBYTE lpBuffer );",
            "name": "MprConfigFilterGetInfo"
        },
        {
            "signature": "DWORD MprConfigFilterSetInfo( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [in] DWORD dwTransportId, [in] LPBYTE lpBuffer );",
            "name": "MprConfigFilterSetInfo"
        },
        {
            "signature": "DWORD MprConfigGetFriendlyName( [in] HANDLE hMprConfig, [in] PWSTR pszGuidName, [out] PWCHAR pszBuffer, [in] DWORD dwBufferSize );",
            "name": "MprConfigGetFriendlyName"
        },
        {
            "signature": "DWORD MprConfigGetGuidName( [in] HANDLE hMprConfig, [in] PWSTR pszFriendlyName, [out] PWCHAR pszBuffer, [in] DWORD dwBufferSize );",
            "name": "MprConfigGetGuidName"
        },
        {
            "signature": "DWORD MprConfigInterfaceCreate( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer, [out] HANDLE *phRouterInterface );",
            "name": "MprConfigInterfaceCreate"
        },
        {
            "signature": "DWORD MprConfigInterfaceDelete( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface );",
            "name": "MprConfigInterfaceDelete"
        },
        {
            "signature": "DWORD MprConfigInterfaceEnum( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [in, out] LPBYTE *lplpBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in, out, optional] LPDWORD lpdwResumeHandle );",
            "name": "MprConfigInterfaceEnum"
        },
        {
            "signature": "DWORD MprConfigInterfaceGetCustomInfoEx( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [out] PMPR_IF_CUSTOMINFOEX pCustomInfo );",
            "name": "MprConfigInterfaceGetCustomInfoEx"
        },
        {
            "signature": "DWORD MprConfigInterfaceGetHandle( [in] HANDLE hMprConfig, [in] LPWSTR lpwsInterfaceName, [out] HANDLE *phRouterInterface );",
            "name": "MprConfigInterfaceGetHandle"
        },
        {
            "signature": "DWORD MprConfigInterfaceGetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] DWORD dwLevel, [in, out] LPBYTE *lplpBuffer, [out] LPDWORD lpdwBufferSize );",
            "name": "MprConfigInterfaceGetInfo"
        },
        {
            "signature": "DWORD MprConfigInterfaceSetCustomInfoEx( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] PMPR_IF_CUSTOMINFOEX pCustomInfo );",
            "name": "MprConfigInterfaceSetCustomInfoEx"
        },
        {
            "signature": "DWORD MprConfigInterfaceSetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprConfigInterfaceSetInfo"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportAdd( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] DWORD dwTransportId, [in, optional] LPWSTR lpwsTransportName, [in] LPBYTE pInterfaceInfo, [in] DWORD dwInterfaceInfoSize, [out] HANDLE *phRouterIfTransport );",
            "name": "MprConfigInterfaceTransportAdd"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportEnum( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] DWORD dwLevel, [in, out] LPBYTE *lplpBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in, out, optional] LPDWORD lpdwResumeHandle );",
            "name": "MprConfigInterfaceTransportEnum"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportGetHandle( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] DWORD dwTransportId, [out] HANDLE *phRouterIfTransport );",
            "name": "MprConfigInterfaceTransportGetHandle"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportGetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] HANDLE hRouterIfTransport, [in, out, optional] LPBYTE *ppInterfaceInfo, [out, optional] LPDWORD lpdwInterfaceInfoSize );",
            "name": "MprConfigInterfaceTransportGetInfo"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportRemove( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] HANDLE hRouterIfTransport );",
            "name": "MprConfigInterfaceTransportRemove"
        },
        {
            "signature": "DWORD MprConfigInterfaceTransportSetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterInterface, [in] HANDLE hRouterIfTransport, [in, optional] LPBYTE pInterfaceInfo, [in, optional] DWORD dwInterfaceInfoSize );",
            "name": "MprConfigInterfaceTransportSetInfo"
        },
        {
            "signature": "DWORD MprConfigServerBackup( [in] HANDLE hMprConfig, [in] LPWSTR lpwsPath );",
            "name": "MprConfigServerBackup"
        },
        {
            "signature": "DWORD MprConfigServerConnect( [in] LPWSTR lpwsServerName, [out] HANDLE *phMprConfig );",
            "name": "MprConfigServerConnect"
        },
        {
            "signature": "void MprConfigServerDisconnect( [in] HANDLE hMprConfig );",
            "name": "MprConfigServerDisconnect"
        },
        {
            "signature": "DWORD MprConfigServerGetInfo( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [out] LPBYTE *lplpbBuffer );",
            "name": "MprConfigServerGetInfo"
        },
        {
            "signature": "DWORD MprConfigServerGetInfoEx( [in] HANDLE hMprConfig, [out] MPR_SERVER_EX *pServerInfo );",
            "name": "MprConfigServerGetInfoEx"
        },
        {
            "signature": "DWORD MprConfigServerInstall( [in] DWORD dwLevel, [in] PVOID pBuffer );",
            "name": "MprConfigServerInstall"
        },
        {
            "signature": "DWORD MprConfigServerRestore( [in] HANDLE hMprConfig, [in] LPWSTR lpwsPath );",
            "name": "MprConfigServerRestore"
        },
        {
            "signature": "DWORD MprConfigServerSetInfo( [in] MPR_SERVER_HANDLE hMprServer, [in] DWORD dwLevel, [in] LPBYTE lpbBuffer );",
            "name": "MprConfigServerSetInfo"
        },
        {
            "signature": "DWORD MprConfigServerSetInfoEx( [in] HANDLE hMprConfig, [in] MPR_SERVER_SET_CONFIG_EX *pSetServerConfig );",
            "name": "MprConfigServerSetInfoEx"
        },
        {
            "signature": "DWORD MprConfigTransportCreate( [in] HANDLE hMprConfig, [in] DWORD dwTransportId, [in, optional] LPWSTR lpwsTransportName, [in] LPBYTE pGlobalInfo, [in] DWORD dwGlobalInfoSize, [in, optional] LPBYTE pClientInterfaceInfo, [in, optional] DWORD dwClientInterfaceInfoSize, [in, optional] LPWSTR lpwsDLLPath, [out] HANDLE *phRouterTransport );",
            "name": "MprConfigTransportCreate"
        },
        {
            "signature": "DWORD MprConfigTransportDelete( [in] HANDLE hMprConfig, [in] HANDLE hRouterTransport );",
            "name": "MprConfigTransportDelete"
        },
        {
            "signature": "DWORD MprConfigTransportEnum( [in] HANDLE hMprConfig, [in] DWORD dwLevel, [in, out] LPBYTE *lplpBuffer, [in] DWORD dwPrefMaxLen, [out] LPDWORD lpdwEntriesRead, [out] LPDWORD lpdwTotalEntries, [in, out, optional] LPDWORD lpdwResumeHandle );",
            "name": "MprConfigTransportEnum"
        },
        {
            "signature": "DWORD MprConfigTransportGetHandle( [in] HANDLE hMprConfig, [in] DWORD dwTransportId, [out] HANDLE *phRouterTransport );",
            "name": "MprConfigTransportGetHandle"
        },
        {
            "signature": "DWORD MprConfigTransportGetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterTransport, [in, out, optional] LPBYTE *ppGlobalInfo, [out, optional] LPDWORD lpdwGlobalInfoSize, [in, out, optional] LPBYTE *ppClientInterfaceInfo, [out, optional] LPDWORD lpdwClientInterfaceInfoSize, [in, out, optional] LPWSTR *lplpwsDLLPath );",
            "name": "MprConfigTransportGetInfo"
        },
        {
            "signature": "DWORD MprConfigTransportSetInfo( [in] HANDLE hMprConfig, [in] HANDLE hRouterTransport, [in, optional] LPBYTE pGlobalInfo, [in, optional] DWORD dwGlobalInfoSize, [in, optional] LPBYTE pClientInterfaceInfo, [in, optional] DWORD dwClientInterfaceInfoSize, [in, optional] LPWSTR lpwsDLLPath );",
            "name": "MprConfigTransportSetInfo"
        },
        {
            "signature": "DWORD MprInfoBlockAdd( [in] LPVOID lpHeader, [in] DWORD dwInfoType, [in] DWORD dwItemSize, [in] DWORD dwItemCount, [in] LPBYTE lpItemData, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoBlockAdd"
        },
        {
            "signature": "DWORD MprInfoBlockFind( [in] LPVOID lpHeader, [in] DWORD dwInfoType, [out] LPDWORD lpdwItemSize, [out] LPDWORD lpdwItemCount, [out] LPBYTE *lplpItemData );",
            "name": "MprInfoBlockFind"
        },
        {
            "signature": "DWORD MprInfoBlockQuerySize( [in] LPVOID lpHeader );",
            "name": "MprInfoBlockQuerySize"
        },
        {
            "signature": "DWORD MprInfoBlockRemove( [in] LPVOID lpHeader, [in] DWORD dwInfoType, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoBlockRemove"
        },
        {
            "signature": "DWORD MprInfoBlockSet( [in] LPVOID lpHeader, [in] DWORD dwInfoType, [in] DWORD dwItemSize, [in] DWORD dwItemCount, [in] LPBYTE lpItemData, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoBlockSet"
        },
        {
            "signature": "DWORD MprInfoCreate( [in] DWORD dwVersion, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoCreate"
        },
        {
            "signature": "DWORD MprInfoDelete( [in] LPVOID lpHeader );",
            "name": "MprInfoDelete"
        },
        {
            "signature": "DWORD MprInfoDuplicate( [in] LPVOID lpHeader, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoDuplicate"
        },
        {
            "signature": "DWORD MprInfoRemoveAll( [in] LPVOID lpHeader, [out] LPVOID *lplpNewHeader );",
            "name": "MprInfoRemoveAll"
        }
    ],
    "Msaatext.h": [],
    "Msacm.h": [
        {
            "signature": "MMRESULT ACMAPI acmDriverAdd( LPHACMDRIVERID phadid, HINSTANCE hinstModule, LPARAM lParam, DWORD dwPriority, DWORD fdwAdd );",
            "name": "acmDriverAdd"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverAddA( LPHACMDRIVERID phadid, HINSTANCE hinstModule, LPARAM lParam, DWORD dwPriority, DWORD fdwAdd );",
            "name": "acmDriverAddA"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverAddW( LPHACMDRIVERID phadid, HINSTANCE hinstModule, LPARAM lParam, DWORD dwPriority, DWORD fdwAdd );",
            "name": "acmDriverAddW"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverClose( HACMDRIVER had, DWORD fdwClose );",
            "name": "acmDriverClose"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverDetails( HACMDRIVERID hadid, LPACMDRIVERDETAILS padd, DWORD fdwDetails );",
            "name": "acmDriverDetails"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverDetailsA( HACMDRIVERID hadid, LPACMDRIVERDETAILSA padd, DWORD fdwDetails );",
            "name": "acmDriverDetailsA"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverDetailsW( HACMDRIVERID hadid, LPACMDRIVERDETAILSW padd, DWORD fdwDetails );",
            "name": "acmDriverDetailsW"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverEnum( ACMDRIVERENUMCB fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmDriverEnum"
        },
        {
            "signature": "ACMDRIVERENUMCB Acmdriverenumcb; BOOL Acmdriverenumcb( HACMDRIVERID hadid, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMDRIVERENUMCB callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverID( HACMOBJ hao, LPHACMDRIVERID phadid, DWORD fdwDriverID );",
            "name": "acmDriverID"
        },
        {
            "signature": "LRESULT ACMAPI acmDriverMessage( HACMDRIVER had, UINT uMsg, LPARAM lParam1, LPARAM lParam2 );",
            "name": "acmDriverMessage"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverOpen( LPHACMDRIVER phad, HACMDRIVERID hadid, DWORD fdwOpen );",
            "name": "acmDriverOpen"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverPriority( HACMDRIVERID hadid, DWORD dwPriority, DWORD fdwPriority );",
            "name": "acmDriverPriority"
        },
        {
            "signature": "ACMDRIVERPROC Acmdriverproc; LRESULT Acmdriverproc( DWORD_PTR unnamedParam1, HACMDRIVERID unnamedParam2, UINT unnamedParam3, LPARAM unnamedParam4, LPARAM unnamedParam5 ) {...}",
            "name": "ACMDRIVERPROC callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmDriverRemove( HACMDRIVERID hadid, DWORD fdwRemove );",
            "name": "acmDriverRemove"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterChoose( LPACMFILTERCHOOSE pafltrc );",
            "name": "acmFilterChoose"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterChooseA( LPACMFILTERCHOOSEA pafltrc );",
            "name": "acmFilterChooseA"
        },
        {
            "signature": "ACMFILTERCHOOSEHOOKPROC Acmfilterchoosehookproc; UINT Acmfilterchoosehookproc( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) {...}",
            "name": "ACMFILTERCHOOSEHOOKPROC callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterChooseW( LPACMFILTERCHOOSEW pafltrc );",
            "name": "acmFilterChooseW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterDetails( HACMDRIVER had, LPACMFILTERDETAILS pafd, DWORD fdwDetails );",
            "name": "acmFilterDetails"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterDetailsA( HACMDRIVER had, LPACMFILTERDETAILSA pafd, DWORD fdwDetails );",
            "name": "acmFilterDetailsA"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterDetailsW( HACMDRIVER had, LPACMFILTERDETAILSW pafd, DWORD fdwDetails );",
            "name": "acmFilterDetailsW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterEnum( HACMDRIVER had, LPACMFILTERDETAILS pafd, ACMFILTERENUMCB fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterEnum"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterEnumA( HACMDRIVER had, LPACMFILTERDETAILSA pafd, ACMFILTERENUMCBA fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterEnumA"
        },
        {
            "signature": "ACMFILTERENUMCB Acmfilterenumcb; BOOL Acmfilterenumcb( HACMDRIVERID hadid, LPACMFILTERDETAILS pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERENUMCB callback"
        },
        {
            "signature": "ACMFILTERENUMCBA Acmfilterenumcba; BOOL Acmfilterenumcba( HACMDRIVERID hadid, LPACMFILTERDETAILSA pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERENUMCBA callback"
        },
        {
            "signature": "ACMFILTERENUMCBW Acmfilterenumcbw; BOOL Acmfilterenumcbw( HACMDRIVERID hadid, LPACMFILTERDETAILSW pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERENUMCBW callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterEnumW( HACMDRIVER had, LPACMFILTERDETAILSW pafd, ACMFILTERENUMCBW fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterEnumW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagDetails( HACMDRIVER had, LPACMFILTERTAGDETAILS paftd, DWORD fdwDetails );",
            "name": "acmFilterTagDetails"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagDetailsA( HACMDRIVER had, LPACMFILTERTAGDETAILSA paftd, DWORD fdwDetails );",
            "name": "acmFilterTagDetailsA"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagDetailsW( HACMDRIVER had, LPACMFILTERTAGDETAILSW paftd, DWORD fdwDetails );",
            "name": "acmFilterTagDetailsW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagEnum( HACMDRIVER had, LPACMFILTERTAGDETAILS paftd, ACMFILTERTAGENUMCB fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterTagEnum"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagEnumA( HACMDRIVER had, LPACMFILTERTAGDETAILSA paftd, ACMFILTERTAGENUMCBA fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterTagEnumA"
        },
        {
            "signature": "ACMFILTERTAGENUMCB Acmfiltertagenumcb; BOOL Acmfiltertagenumcb( HACMDRIVERID hadid, LPACMFILTERTAGDETAILS paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERTAGENUMCB callback"
        },
        {
            "signature": "ACMFILTERTAGENUMCBA Acmfiltertagenumcba; BOOL Acmfiltertagenumcba( HACMDRIVERID hadid, LPACMFILTERTAGDETAILSA paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERTAGENUMCBA callback"
        },
        {
            "signature": "ACMFILTERTAGENUMCBW Acmfiltertagenumcbw; BOOL Acmfiltertagenumcbw( HACMDRIVERID hadid, LPACMFILTERTAGDETAILSW paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFILTERTAGENUMCBW callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFilterTagEnumW( HACMDRIVER had, LPACMFILTERTAGDETAILSW paftd, ACMFILTERTAGENUMCBW fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFilterTagEnumW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatChoose( LPACMFORMATCHOOSE pafmtc );",
            "name": "acmFormatChoose"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatChooseA( LPACMFORMATCHOOSEA pafmtc );",
            "name": "acmFormatChooseA"
        },
        {
            "signature": "ACMFORMATCHOOSEHOOKPROC Acmformatchoosehookproc; UINT Acmformatchoosehookproc( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam ) {...}",
            "name": "ACMFORMATCHOOSEHOOKPROC callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatChooseW( LPACMFORMATCHOOSEW pafmtc );",
            "name": "acmFormatChooseW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatDetails( HACMDRIVER had, LPACMFORMATDETAILS pafd, DWORD fdwDetails );",
            "name": "acmFormatDetails"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatDetailsA( HACMDRIVER had, LPACMFORMATDETAILSA pafd, DWORD fdwDetails );",
            "name": "acmFormatDetailsA"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatDetailsW( HACMDRIVER had, LPACMFORMATDETAILSW pafd, DWORD fdwDetails );",
            "name": "acmFormatDetailsW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatEnum( HACMDRIVER had, LPACMFORMATDETAILS pafd, ACMFORMATENUMCB fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatEnum"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatEnumA( HACMDRIVER had, LPACMFORMATDETAILSA pafd, ACMFORMATENUMCBA fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatEnumA"
        },
        {
            "signature": "ACMFORMATENUMCB Acmformatenumcb; BOOL Acmformatenumcb( HACMDRIVERID hadid, LPACMFORMATDETAILS pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATENUMCB callback"
        },
        {
            "signature": "ACMFORMATENUMCBA Acmformatenumcba; BOOL Acmformatenumcba( HACMDRIVERID hadid, LPACMFORMATDETAILSA pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATENUMCBA callback"
        },
        {
            "signature": "ACMFORMATENUMCBW Acmformatenumcbw; BOOL Acmformatenumcbw( HACMDRIVERID hadid, LPACMFORMATDETAILSW pafd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATENUMCBW callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatEnumW( HACMDRIVER had, LPACMFORMATDETAILSW pafd, ACMFORMATENUMCBW fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatEnumW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatSuggest( HACMDRIVER had, LPWAVEFORMATEX pwfxSrc, LPWAVEFORMATEX pwfxDst, DWORD cbwfxDst, DWORD fdwSuggest );",
            "name": "acmFormatSuggest"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagDetails( HACMDRIVER had, LPACMFORMATTAGDETAILS paftd, DWORD fdwDetails );",
            "name": "acmFormatTagDetails"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagDetailsA( HACMDRIVER had, LPACMFORMATTAGDETAILSA paftd, DWORD fdwDetails );",
            "name": "acmFormatTagDetailsA"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagDetailsW( HACMDRIVER had, LPACMFORMATTAGDETAILSW paftd, DWORD fdwDetails );",
            "name": "acmFormatTagDetailsW"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagEnum( HACMDRIVER had, LPACMFORMATTAGDETAILS paftd, ACMFORMATTAGENUMCB fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatTagEnum"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagEnumA( HACMDRIVER had, LPACMFORMATTAGDETAILSA paftd, ACMFORMATTAGENUMCBA fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatTagEnumA"
        },
        {
            "signature": "ACMFORMATTAGENUMCB Acmformattagenumcb; BOOL Acmformattagenumcb( HACMDRIVERID hadid, LPACMFORMATTAGDETAILS paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATTAGENUMCB callback"
        },
        {
            "signature": "ACMFORMATTAGENUMCBA Acmformattagenumcba; BOOL Acmformattagenumcba( HACMDRIVERID hadid, LPACMFORMATTAGDETAILSA paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATTAGENUMCBA callback"
        },
        {
            "signature": "ACMFORMATTAGENUMCBW Acmformattagenumcbw; BOOL Acmformattagenumcbw( HACMDRIVERID hadid, LPACMFORMATTAGDETAILSW paftd, DWORD_PTR dwInstance, DWORD fdwSupport ) {...}",
            "name": "ACMFORMATTAGENUMCBW callback"
        },
        {
            "signature": "MMRESULT ACMAPI acmFormatTagEnumW( HACMDRIVER had, LPACMFORMATTAGDETAILSW paftd, ACMFORMATTAGENUMCBW fnCallback, DWORD_PTR dwInstance, DWORD fdwEnum );",
            "name": "acmFormatTagEnumW"
        },
        {
            "signature": "DWORD ACMAPI acmGetVersion();",
            "name": "acmGetVersion"
        },
        {
            "signature": "MMRESULT ACMAPI acmMetrics( HACMOBJ hao, UINT uMetric, LPVOID pMetric );",
            "name": "acmMetrics"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamClose( HACMSTREAM has, DWORD fdwClose );",
            "name": "acmStreamClose"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamConvert( HACMSTREAM has, LPACMSTREAMHEADER pash, DWORD fdwConvert );",
            "name": "acmStreamConvert"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamMessage( HACMSTREAM has, UINT uMsg, LPARAM lParam1, LPARAM lParam2 );",
            "name": "acmStreamMessage"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamOpen( LPHACMSTREAM phas, HACMDRIVER had, LPWAVEFORMATEX pwfxSrc, LPWAVEFORMATEX pwfxDst, LPWAVEFILTER pwfltr, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen );",
            "name": "acmStreamOpen"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamPrepareHeader( HACMSTREAM has, LPACMSTREAMHEADER pash, DWORD fdwPrepare );",
            "name": "acmStreamPrepareHeader"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamReset( HACMSTREAM has, DWORD fdwReset );",
            "name": "acmStreamReset"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamSize( HACMSTREAM has, DWORD cbInput, LPDWORD pdwOutputBytes, DWORD fdwSize );",
            "name": "acmStreamSize"
        },
        {
            "signature": "MMRESULT ACMAPI acmStreamUnprepareHeader( HACMSTREAM has, LPACMSTREAMHEADER pash, DWORD fdwUnprepare );",
            "name": "acmStreamUnprepareHeader"
        }
    ],
    "Msajtransport.h": [
        {
            "signature": "BOOL AllJoynCloseBusHandle( [in] HANDLE busHandle );",
            "name": "AllJoynCloseBusHandle"
        },
        {
            "signature": "HANDLE AllJoynConnectToBus( [in, optional] PCWSTR connectionSpec );",
            "name": "AllJoynConnectToBus"
        },
        {
            "signature": "BOOL AllJoynEnumEvents( [in] HANDLE connectedBusHandle, [in, optional] HANDLE eventToReset, [out] PDWORD eventTypes );",
            "name": "AllJoynEnumEvents"
        },
        {
            "signature": "BOOL AllJoynEventSelect( [in] HANDLE connectedBusHandle, [in] HANDLE eventHandle, [in] DWORD eventTypes );",
            "name": "AllJoynEventSelect"
        },
        {
            "signature": "BOOL AllJoynReceiveFromBus( [in] HANDLE connectedBusHandle, [out] PVOID buffer, [in] DWORD bytesToRead, [out, optional] PDWORD bytesTransferred, [in, out] PVOID reserved );",
            "name": "AllJoynReceiveFromBus"
        },
        {
            "signature": "BOOL AllJoynSendToBus( [in] HANDLE connectedBusHandle, [in] const VOID *buffer, [in] DWORD bytesToWrite, [out, optional] PDWORD bytesTransferred, [in, out] PVOID reserved );",
            "name": "AllJoynSendToBus"
        }
    ],
    "Msapofxproxy.h": [],
    "Mscat.h": [
        {
            "signature": "BOOL CryptCATAdminAcquireContext( [out] HCATADMIN *phCatAdmin, [in] const GUID *pgSubsystem, [in] DWORD dwFlags );",
            "name": "CryptCATAdminAcquireContext"
        },
        {
            "signature": "BOOL CryptCATAdminAcquireContext2( [out] HCATADMIN *phCatAdmin, [in, optional] const GUID *pgSubsystem, [in, optional] PCWSTR pwszHashAlgorithm, [in, optional] PCCERT_STRONG_SIGN_PARA pStrongHashPolicy, DWORD dwFlags );",
            "name": "CryptCATAdminAcquireContext2"
        },
        {
            "signature": "HCATINFO CryptCATAdminAddCatalog( [in] HCATADMIN hCatAdmin, [in] PWSTR pwszCatalogFile, [in] PWSTR pwszSelectBaseName, [in] DWORD dwFlags );",
            "name": "CryptCATAdminAddCatalog"
        },
        {
            "signature": "BOOL CryptCATAdminCalcHashFromFileHandle( [in] HANDLE hFile, [in, out] DWORD *pcbHash, [in] BYTE *pbHash, [in] DWORD dwFlags );",
            "name": "CryptCATAdminCalcHashFromFileHandle"
        },
        {
            "signature": "BOOL CryptCATAdminCalcHashFromFileHandle2( [in] HCATADMIN hCatAdmin, [in] HANDLE hFile, [in, out] DWORD *pcbHash, BYTE *pbHash, DWORD dwFlags );",
            "name": "CryptCATAdminCalcHashFromFileHandle2"
        },
        {
            "signature": "HCATINFO CryptCATAdminEnumCatalogFromHash( [in] HCATADMIN hCatAdmin, [in] BYTE *pbHash, [in] DWORD cbHash, [in] DWORD dwFlags, [in] HCATINFO *phPrevCatInfo );",
            "name": "CryptCATAdminEnumCatalogFromHash"
        },
        {
            "signature": "BOOL CryptCATAdminReleaseCatalogContext( [in] HCATADMIN hCatAdmin, [in] HCATINFO hCatInfo, [in] DWORD dwFlags );",
            "name": "CryptCATAdminReleaseCatalogContext"
        },
        {
            "signature": "BOOL CryptCATAdminReleaseContext( [in] HCATADMIN hCatAdmin, [in] DWORD dwFlags );",
            "name": "CryptCATAdminReleaseContext"
        },
        {
            "signature": "BOOL CryptCATAdminRemoveCatalog( [in] HCATADMIN hCatAdmin, [in] LPCWSTR pwszCatalogFile, [in] DWORD dwFlags );",
            "name": "CryptCATAdminRemoveCatalog"
        },
        {
            "signature": "BOOL CryptCATAdminResolveCatalogPath( [in] HCATADMIN hCatAdmin, [in] WCHAR *pwszCatalogFile, [in, out] CATALOG_INFO *psCatInfo, [in] DWORD dwFlags );",
            "name": "CryptCATAdminResolveCatalogPath"
        },
        {
            "signature": "BOOL CryptCATCatalogInfoFromContext( [in] HCATINFO hCatInfo, [in, out] CATALOG_INFO *psCatInfo, [in] DWORD dwFlags );",
            "name": "CryptCATCatalogInfoFromContext"
        },
        {
            "signature": "BOOL CryptCATCDFClose( [in] CRYPTCATCDF *pCDF );",
            "name": "CryptCATCDFClose"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATCDFEnumCatAttributes( [in] CRYPTCATCDF *pCDF, [in] CRYPTCATATTRIBUTE *pPrevAttr, [in] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError );",
            "name": "CryptCATCDFEnumCatAttributes"
        },
        {
            "signature": "CRYPTCATCDF * CryptCATCDFOpen( [in] LPWSTR pwszFilePath, [in, optional] PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError );",
            "name": "CryptCATCDFOpen"
        },
        {
            "signature": "BOOL CryptCATClose( [in] HANDLE hCatalog );",
            "name": "CryptCATClose"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATEnumerateAttr( [in] HANDLE hCatalog, [in] CRYPTCATMEMBER *pCatMember, [in] CRYPTCATATTRIBUTE *pPrevAttr );",
            "name": "CryptCATEnumerateAttr"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATEnumerateCatAttr( [in] HANDLE hCatalog, [in] CRYPTCATATTRIBUTE *pPrevAttr );",
            "name": "CryptCATEnumerateCatAttr"
        },
        {
            "signature": "CRYPTCATMEMBER * CryptCATEnumerateMember( [in] HANDLE hCatalog, [in] CRYPTCATMEMBER *pPrevMember );",
            "name": "CryptCATEnumerateMember"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATGetAttrInfo( [in] HANDLE hCatalog, [in] CRYPTCATMEMBER *pCatMember, [in] LPWSTR pwszReferenceTag );",
            "name": "CryptCATGetAttrInfo"
        },
        {
            "signature": "CRYPTCATMEMBER * CryptCATGetMemberInfo( [in] HANDLE hCatalog, [in] LPWSTR pwszReferenceTag );",
            "name": "CryptCATGetMemberInfo"
        },
        {
            "signature": "HANDLE CryptCATHandleFromStore( [in] CRYPTCATSTORE *pCatStore );",
            "name": "CryptCATHandleFromStore"
        },
        {
            "signature": "HANDLE CryptCATOpen( [in] LPWSTR pwszFileName, [in] DWORD fdwOpenFlags, [in] HCRYPTPROV hProv, [in] DWORD dwPublicVersion, [in] DWORD dwEncodingType );",
            "name": "CryptCATOpen"
        },
        {
            "signature": "BOOL CryptCATPersistStore( [in] HANDLE hCatalog );",
            "name": "CryptCATPersistStore"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATPutAttrInfo( [in] HANDLE hCatalog, [in] CRYPTCATMEMBER *pCatMember, [in] LPWSTR pwszReferenceTag, [in] DWORD dwAttrTypeAndAction, [in] DWORD cbData, [in] BYTE *pbData );",
            "name": "CryptCATPutAttrInfo"
        },
        {
            "signature": "CRYPTCATATTRIBUTE * CryptCATPutCatAttrInfo( [in] HANDLE hCatalog, [in] LPWSTR pwszReferenceTag, [in] DWORD dwAttrTypeAndAction, [in] DWORD cbData, [in] BYTE *pbData );",
            "name": "CryptCATPutCatAttrInfo"
        },
        {
            "signature": "CRYPTCATMEMBER * CryptCATPutMemberInfo( [in] HANDLE hCatalog, [in, optional] LPWSTR pwszFileName, [in] LPWSTR pwszReferenceTag, [in] GUID *pgSubjectType, [in] DWORD dwCertVersion, [in] DWORD cbSIPIndirectData, [in] BYTE *pbSIPIndirectData );",
            "name": "CryptCATPutMemberInfo"
        },
        {
            "signature": "CRYPTCATSTORE * CryptCATStoreFromHandle( [in] HANDLE hCatalog );",
            "name": "CryptCATStoreFromHandle"
        },
        {
            "signature": "BOOL IsCatalogFile( [in, optional] HANDLE hFile, [in, optional] WCHAR *pwszFileName );",
            "name": "IsCatalogFile"
        },
        {
            "signature": "PFN_CDF_PARSE_ERROR_CALLBACK PfnCdfParseErrorCallback; void PfnCdfParseErrorCallback( [in] DWORD dwErrorArea, [in] DWORD dwLocalError, [in] WCHAR *pwszLine ) {...}",
            "name": "PFN_CDF_PARSE_ERROR_CALLBACK callback"
        }
    ],
    "Mschapp.h": [
        {
            "signature": "DWORD MSChapSrvChangePassword( [in] PWSTR ServerName, [in] PWSTR UserName, [in] BOOLEAN LmOldPresent, [in] PLM_OWF_PASSWORD LmOldOwfPassword, [in] PLM_OWF_PASSWORD LmNewOwfPassword, [in] PNT_OWF_PASSWORD NtOldOwfPassword, [in] PNT_OWF_PASSWORD NtNewOwfPassword );",
            "name": "MSChapSrvChangePassword"
        },
        {
            "signature": "DWORD MSChapSrvChangePassword2( [in] PWSTR ServerName, [in] PWSTR UserName, [in] PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldNt, [in] PENCRYPTED_NT_OWF_PASSWORD OldNtOwfPasswordEncryptedWithNewNt, [in] BOOLEAN LmPresent, [in] PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldLm, [in] PENCRYPTED_LM_OWF_PASSWORD OldLmOwfPasswordEncryptedWithNewLmOrNt );",
            "name": "MSChapSrvChangePassword2"
        }
    ],
    "Msclus.h": [],
    "Msctf.h": [
        {
            "signature": "HRESULT TF_CreateCategoryMgr( [out] ITfCategoryMgr **ppcat );",
            "name": "TF_CreateCategoryMgr"
        },
        {
            "signature": "HRESULT TF_CreateDisplayAttributeMgr( [out] ITfDisplayAttributeMgr **ppdam );",
            "name": "TF_CreateDisplayAttributeMgr"
        },
        {
            "signature": "HRESULT TF_CreateInputProcessorProfiles( [out] ITfInputProcessorProfiles **ppipr );",
            "name": "TF_CreateInputProcessorProfiles"
        },
        {
            "signature": "HRESULT TF_CreateLangBarItemMgr( [out] ITfLangBarItemMgr **pplbim );",
            "name": "TF_CreateLangBarItemMgr"
        },
        {
            "signature": "HRESULT TF_CreateLangBarMgr( [out] ITfLangBarMgr **pppbm );",
            "name": "TF_CreateLangBarMgr"
        },
        {
            "signature": "HRESULT TF_CreateThreadMgr( [out] ITfThreadMgr **pptim );",
            "name": "TF_CreateThreadMgr"
        },
        {
            "signature": "HRESULT TF_GetThreadMgr( [out] ITfThreadMgr **pptim );",
            "name": "TF_GetThreadMgr"
        }
    ],
    "Msctfmonitorapi.h": [
        {
            "signature": "HRESULT InitLocalMsCtfMonitor( [in] DWORD dwFlags );",
            "name": "InitLocalMsCtfMonitor"
        },
        {
            "signature": "HRESULT UninitLocalMsCtfMonitor();",
            "name": "UninitLocalMsCtfMonitor"
        }
    ],
    "Msdrm.h": [
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAcquireAdvisories( [in] DRMHSESSION hLicenseStorage, [in] PWSTR wszLicense, [in, optional] PWSTR wszURL, [in] VOID *pvContext );",
            "name": "DRMAcquireAdvisories"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAcquireIssuanceLicenseTemplate( [in] DRMHSESSION hClient, [in] UINT uFlags, [in] VOID *pvReserved, [in] UINT cTemplates, [in, optional] PWSTR *pwszTemplateIds, [in] PWSTR wszUrl, [in] VOID *pvContext );",
            "name": "DRMAcquireIssuanceLicenseTemplate"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAcquireLicense( [in] DRMHSESSION hSession, [in] UINT uFlags, [in] PWSTR wszGroupIdentityCredential, [in] PWSTR wszRequestedRights, [in] PWSTR wszCustomData, [in] PWSTR wszURL, [in] VOID *pvContext );",
            "name": "DRMAcquireLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMActivate( [in] DRMHSESSION hClient, [in] UINT uFlags, [in] UINT uLangID, [in] DRM_ACTSERV_INFO *pActServInfo, [in] VOID *pvContext, [in] HWND hParentWnd );",
            "name": "DRMActivate"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAddLicense( [in] DRMHSESSION hLicenseStorage, [in] UINT uFlags, [in] PWSTR wszLicense );",
            "name": "DRMAddLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAddRightWithUser( [in] DRMPUBHANDLE hIssuanceLicense, [in] DRMPUBHANDLE hRight, [in] DRMPUBHANDLE hUser );",
            "name": "DRMAddRightWithUser"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMAttest( [in] DRMHANDLE hEnablingPrincipal, [in] PWSTR wszData, [in] DRMATTESTTYPE eType, [in, out] UINT *pcAttestedBlob, [out] PWSTR wszAttestedBlob );",
            "name": "DRMAttest"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCheckSecurity( [in] DRMENVHANDLE hEnv, [in] UINT cLevel );",
            "name": "DRMCheckSecurity"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMClearAllRights( [in] DRMPUBHANDLE hIssuanceLicense );",
            "name": "DRMClearAllRights"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCloseEnvironmentHandle( [in] DRMENVHANDLE hEnv );",
            "name": "DRMCloseEnvironmentHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCloseHandle( [in] DRMHANDLE handle );",
            "name": "DRMCloseHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMClosePubHandle( [in] DRMPUBHANDLE hPub );",
            "name": "DRMClosePubHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCloseQueryHandle( [in] DRMQUERYHANDLE hQuery );",
            "name": "DRMCloseQueryHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCloseSession( [in] DRMHSESSION hSession );",
            "name": "DRMCloseSession"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMConstructCertificateChain( [in] UINT cCertificates, [in] PWSTR *rgwszCertificates, [in, out] UINT *pcChain, [out] PWSTR wszChain );",
            "name": "DRMConstructCertificateChain"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateBoundLicense( [in] DRMENVHANDLE hEnv, [in] DRMBOUNDLICENSEPARAMS *pParams, [in] PWSTR wszLicenseChain, [out] DRMHANDLE *phBoundLicense, [out] DRMHANDLE *phErrorLog );",
            "name": "DRMCreateBoundLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateClientSession( [in] DRMCALLBACK pfnCallback, [in] UINT uCallbackVersion, [in] PWSTR wszGroupIDProviderType, [in, optional] PWSTR wszGroupID, [out] DRMHSESSION *phClient );",
            "name": "DRMCreateClientSession"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingBitsDecryptor( [in] DRMHANDLE hBoundLicense, [in, optional] PWSTR wszRight, [in] DRMHANDLE hAuxLib, [in, optional] PWSTR wszAuxPlug, [out] DRMHANDLE *phDecryptor );",
            "name": "DRMCreateEnablingBitsDecryptor"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingBitsEncryptor( [in] DRMHANDLE hBoundLicense, [in, optional] PWSTR wszRight, [in] DRMHANDLE hAuxLib, [in, optional] PWSTR wszAuxPlug, [out] DRMHANDLE *phEncryptor );",
            "name": "DRMCreateEnablingBitsEncryptor"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingPrincipal( [in] DRMENVHANDLE hEnv, [in] DRMHANDLE hLibrary, [in] PWSTR wszObject, [in] DRMID *pidPrincipal, [in] PWSTR wszCredentials, [out] DRMHANDLE *phEnablingPrincipal );",
            "name": "DRMCreateEnablingPrincipal"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateIssuanceLicense( [in] SYSTEMTIME *pstTimeFrom, [in] SYSTEMTIME *pstTimeUntil, [in] PWSTR wszReferralInfoName, [in] PWSTR wszReferralInfoURL, [in, optional] DRMPUBHANDLE hOwner, [in] PWSTR wszIssuanceLicense, [in] DRMHANDLE hBoundLicense, [out] DRMPUBHANDLE *phIssuanceLicense );",
            "name": "DRMCreateIssuanceLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateLicenseStorageSession( [in] DRMENVHANDLE hEnv, [in] DRMHANDLE hDefaultLibrary, [in] DRMHSESSION hClient, [in] UINT uFlags, [in] PWSTR wszIssuanceLicense, [out] DRMHSESSION *phLicenseStorage );",
            "name": "DRMCreateLicenseStorageSession"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateRight( [in] PWSTR wszRightName, [in] SYSTEMTIME *pstFrom, [in] SYSTEMTIME *pstUntil, [in] UINT cExtendedInfo, [in] PWSTR *pwszExtendedInfoName, [in] PWSTR *pwszExtendedInfoValue, [out] DRMPUBHANDLE *phRight );",
            "name": "DRMCreateRight"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMCreateUser( [in] PWSTR wszUserName, [in] PWSTR wszUserId, [in] PWSTR wszUserIdType, [out] DRMPUBHANDLE *phUser );",
            "name": "DRMCreateUser"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDecode( [in] PWSTR wszAlgID, [in] PWSTR wszEncodedString, [in] UINT *puDecodedDataLen, [out] BYTE *pbDecodedData );",
            "name": "DRMDecode"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDeconstructCertificateChain( [in] PWSTR wszChain, [in] UINT iWhich, [in, out] UINT *pcCert, [out] PWSTR wszCert );",
            "name": "DRMDeconstructCertificateChain"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDecrypt( [in] DRMHANDLE hCryptoProvider, [in] UINT iPosition, [in] UINT cNumInBytes, [in] BYTE *pbInData, [in, out] UINT *pcNumOutBytes, [out] BYTE *pbOutData );",
            "name": "DRMDecrypt"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDeleteLicense( [in] DRMHSESSION hSession, [in] PWSTR wszLicenseId );",
            "name": "DRMDeleteLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDuplicateEnvironmentHandle( [in] DRMENVHANDLE hToCopy, [out] DRMENVHANDLE *phCopy );",
            "name": "DRMDuplicateEnvironmentHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDuplicateHandle( [in] DRMHANDLE hToCopy, [out] DRMHANDLE *phCopy );",
            "name": "DRMDuplicateHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDuplicatePubHandle( [in] DRMPUBHANDLE hPubIn, [out] DRMPUBHANDLE *phPubOut );",
            "name": "DRMDuplicatePubHandle"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMDuplicateSession( [in] DRMHSESSION hSessionIn, [out] DRMHSESSION *phSessionOut );",
            "name": "DRMDuplicateSession"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMEncode( [in] PWSTR wszAlgID, [in] UINT uDataLen, [in] BYTE *pbDecodedData, [in, out] UINT *puEncodedStringLen, [out] PWSTR wszEncodedString );",
            "name": "DRMEncode"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMEncrypt( [in] DRMHANDLE hCryptoProvider, [in] UINT iPosition, [in] UINT cNumInBytes, [in] BYTE *pbInData, [in, out] UINT *pcNumOutBytes, [out] BYTE *pbOutData );",
            "name": "DRMEncrypt"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMEnumerateLicense( [in] DRMHSESSION hSession, [in] UINT uFlags, [in] UINT uIndex, [in, out] BOOL *pfSharedFlag, [in, out] UINT *puCertificateDataLen, [out] PWSTR wszCertificateData );",
            "name": "DRMEnumerateLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetApplicationSpecificData( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uIndex, [in, out] UINT *puNameLength, [out] PWSTR wszName, [in, out] UINT *puValueLength, [out] PWSTR wszValue );",
            "name": "DRMGetApplicationSpecificData"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseAttribute( [in] DRMHANDLE hQueryRoot, [in] PWSTR wszAttribute, [in] UINT iWhich, [out] DRMENCODINGTYPE *peEncoding, [in, out] UINT *pcBuffer, [out] BYTE *pbBuffer );",
            "name": "DRMGetBoundLicenseAttribute"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseAttributeCount( [in] DRMHANDLE hQueryRoot, [in] PWSTR wszAttribute, [out] UINT *pcAttributes );",
            "name": "DRMGetBoundLicenseAttributeCount"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseObject( [in] DRMHANDLE hQueryRoot, [in] PWSTR wszSubObjectType, [in] UINT iWhich, [out] DRMHANDLE *phSubObject );",
            "name": "DRMGetBoundLicenseObject"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseObjectCount( [in] DRMHANDLE hQueryRoot, [in] PWSTR wszSubObjectType, [out] UINT *pcSubObjects );",
            "name": "DRMGetBoundLicenseObjectCount"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetCertificateChainCount( [in] PWSTR wszChain, [out] UINT *pcCertCount );",
            "name": "DRMGetCertificateChainCount"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetClientVersion( [in] DRM_CLIENT_VERSION_INFO *pDRMClientVersionInfo );",
            "name": "DRMGetClientVersion"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetEnvironmentInfo( [in] DRMENVHANDLE handle, [in] PWSTR wszAttribute, [out] DRMENCODINGTYPE *peEncoding, [in, out] UINT *pcBuffer, [out] BYTE *pbBuffer );",
            "name": "DRMGetEnvironmentInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetInfo( [in] DRMHANDLE handle, [in] PWSTR wszAttribute, [out] DRMENCODINGTYPE *peEncoding, [in, out] UINT *pcBuffer, [out] BYTE *pbBuffer );",
            "name": "DRMGetInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetIntervalTime( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT *pcDays );",
            "name": "DRMGetIntervalTime"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetIssuanceLicenseInfo( [in] DRMPUBHANDLE hIssuanceLicense, [out] SYSTEMTIME *pstTimeFrom, [out] SYSTEMTIME *pstTimeUntil, [in] UINT uFlags, [in, out] UINT *puDistributionPointNameLength, [out] PWSTR wszDistributionPointName, [in, out] UINT *puDistributionPointURLLength, [out] PWSTR wszDistributionPointURL, [out] DRMPUBHANDLE *phOwner, [out] BOOL *pfOfficial );",
            "name": "DRMGetIssuanceLicenseInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetIssuanceLicenseTemplate( [in] DRMPUBHANDLE hIssuanceLicense, [in, out] UINT *puIssuanceLicenseTemplateLength, [out] PWSTR wszIssuanceLicenseTemplate );",
            "name": "DRMGetIssuanceLicenseTemplate"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetMetaData( [in] DRMPUBHANDLE hIssuanceLicense, [in, out] UINT *puContentIdLength, [out, optional] PWSTR wszContentId, [in, out] UINT *puContentIdTypeLength, [out, optional] PWSTR wszContentIdType, [in, out, optional] UINT *puSKUIdLength, [out, optional] PWSTR wszSKUId, [in, out, optional] UINT *puSKUIdTypeLength, [out, optional] PWSTR wszSKUIdType, [in, out, optional] UINT *puContentTypeLength, [out, optional] PWSTR wszContentType, [in, out, optional] UINT *puContentNameLength, [out, optional] PWSTR wszContentName );",
            "name": "DRMGetMetaData"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetNameAndDescription( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uIndex, [out] UINT *pulcid, [in, out] UINT *puNameLength, [out] PWSTR wszName, [in, out] UINT *puDescriptionLength, [out] PWSTR wszDescription );",
            "name": "DRMGetNameAndDescription"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetOwnerLicense( [in] DRMPUBHANDLE hIssuanceLicense, [in, out] UINT *puOwnerLicenseLength, [out] PWSTR wszOwnerLicense );",
            "name": "DRMGetOwnerLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetProcAddress( [in] DRMHANDLE hLibrary, [in] PWSTR wszProcName, [out] FARPROC *ppfnProcAddress );",
            "name": "DRMGetProcAddress"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetRevocationPoint( [in] DRMPUBHANDLE hIssuanceLicense, [in, out] UINT *puIdLength, [out] PWSTR wszId, [in, out] UINT *puIdTypeLength, [out] PWSTR wszIdType, [in, out] UINT *puURLLength, [out] PWSTR wszRL, [out] SYSTEMTIME *pstFrequency, [in, out] UINT *puNameLength, [out] PWSTR wszName, [in, out] UINT *puPublicKeyLength, [out] PWSTR wszPublicKey );",
            "name": "DRMGetRevocationPoint"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetRightExtendedInfo( [in] DRMPUBHANDLE hRight, [in] UINT uIndex, [in, out] UINT *puExtendedInfoNameLength, [out] PWSTR wszExtendedInfoName, [in, out] UINT *puExtendedInfoValueLength, [out] PWSTR wszExtendedInfoValue );",
            "name": "DRMGetRightExtendedInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetRightInfo( [in] DRMPUBHANDLE hRight, [in, out] UINT *puRightNameLength, [out] PWSTR wszRightName, [out] SYSTEMTIME *pstFrom, [out] SYSTEMTIME *pstUntil );",
            "name": "DRMGetRightInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetSecurityProvider( [in] UINT uFlags, [in, out] UINT *puTypeLen, [out] PWSTR wszType, [in, out] UINT *puPathLen, [out] PWSTR wszPath );",
            "name": "DRMGetSecurityProvider"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetServiceLocation( [in, optional] DRMHSESSION hClient, [in] UINT uServiceType, [in] UINT uServiceLocation, [in] PWSTR wszIssuanceLicense, [in, out] UINT *puServiceURLLength, [out] PWSTR wszServiceURL );",
            "name": "DRMGetServiceLocation"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetSignedIssuanceLicense( [in] DRMENVHANDLE hEnv, [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uFlags, [in] BYTE *pbSymKey, [in] UINT cbSymKey, [in] PWSTR wszSymKeyType, [in] PWSTR wszClientLicensorCertificate, [in] DRMCALLBACK pfnCallback, [in] PWSTR wszURL, [in] VOID *pvContext );",
            "name": "DRMGetSignedIssuanceLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetSignedIssuanceLicenseEx( [in] DRMENVHANDLE hEnv, [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uFlags, [in] BYTE *pbSymKey, [in] UINT cbSymKey, [in] PWSTR wszSymKeyType, [in] PVOID pvReserved, [in] DRMHANDLE hEnablingPrincipal, [in] DRMHANDLE hBoundLicenseCLC, [in] DRMCALLBACK pfnCallback, [in] PVOID pvContext );",
            "name": "DRMGetSignedIssuanceLicenseEx"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetTime( [in] DRMENVHANDLE hEnv, [in] DRMTIMETYPE eTimerIdType, [out] SYSTEMTIME *poTimeObject );",
            "name": "DRMGetTime"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseAttribute( [in] DRMQUERYHANDLE hQueryRoot, [in] PWSTR wszAttributeType, [in] UINT iWhich, [out] DRMENCODINGTYPE *peEncoding, [in, out] UINT *pcBuffer, [out] BYTE *pbBuffer );",
            "name": "DRMGetUnboundLicenseAttribute"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseAttributeCount( [in] DRMQUERYHANDLE hQueryRoot, [in] PWSTR wszAttributeType, [out] UINT *pcAttributes );",
            "name": "DRMGetUnboundLicenseAttributeCount"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseObject( [in] DRMQUERYHANDLE hQueryRoot, [in] PWSTR wszSubObjectType, [in] UINT iIndex, [out] DRMQUERYHANDLE *phSubQuery );",
            "name": "DRMGetUnboundLicenseObject"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseObjectCount( [in] DRMQUERYHANDLE hQueryRoot, [in] PWSTR wszSubObjectType, [out] UINT *pcSubObjects );",
            "name": "DRMGetUnboundLicenseObjectCount"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUsagePolicy( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uIndex, [out] DRM_USAGEPOLICY_TYPE *peUsagePolicyType, [out] BOOL *pfExclusion, [in, out] UINT *puNameLength, [out] PWSTR wszName, [in, out] UINT *puMinVersionLength, [out] PWSTR wszMinVersion, [in, out] UINT *puMaxVersionLength, [out] PWSTR wszMaxVersion, [in, out] UINT *puPublicKeyLength, [out] PWSTR wszPublicKey, [in, out] UINT *puDigestAlgorithmLength, [out] PWSTR wszDigestAlgorithm, [in, out] UINT *pcbDigest, [out] BYTE *pbDigest );",
            "name": "DRMGetUsagePolicy"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUserInfo( [in] DRMPUBHANDLE hUser, [in, out] UINT *puUserNameLength, [out] PWSTR wszUserName, [in, out] UINT *puUserIdLength, [out] PWSTR wszUserId, [in, out] UINT *puUserIdTypeLength, [out] PWSTR wszUserIdType );",
            "name": "DRMGetUserInfo"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUserRights( [in] DRMPUBHANDLE hIssuanceLicense, [in] DRMPUBHANDLE hUser, [in] UINT uIndex, [out] DRMPUBHANDLE *phRight );",
            "name": "DRMGetUserRights"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMGetUsers( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT uIndex, [out] DRMPUBHANDLE *phUser );",
            "name": "DRMGetUsers"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMInitEnvironment( [in] DRMSECURITYPROVIDERTYPE eSecurityProviderType, [in] DRMSPECTYPE eSpecification, [in] PWSTR wszSecurityProvider, [in] PWSTR wszManifestCredentials, [in] PWSTR wszMachineCredentials, [out] DRMENVHANDLE *phEnv, [out] DRMHANDLE *phDefaultLibrary );",
            "name": "DRMInitEnvironment"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMIsActivated( [in] DRMHSESSION hClient, [in] UINT uFlags, [in] DRM_ACTSERV_INFO *pActServInfo );",
            "name": "DRMIsActivated"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMIsWindowProtected( [in] HWND hwnd, [out] BOOL *pfProtected );",
            "name": "DRMIsWindowProtected"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMLoadLibrary( [in] DRMENVHANDLE hEnv, [in] DRMSPECTYPE eSpecification, [in] PWSTR wszLibraryProvider, [in] PWSTR wszCredentials, [out] DRMHANDLE *phLibrary );",
            "name": "DRMLoadLibrary"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMParseUnboundLicense( [in] PWSTR wszCertificate, [out] DRMQUERYHANDLE *phQueryRoot );",
            "name": "DRMParseUnboundLicense"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMRegisterContent( [in] BOOL fRegister );",
            "name": "DRMRegisterContent"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMRegisterProtectedWindow( [in] DRMENVHANDLE hEnv, [in] HWND hwnd );",
            "name": "DRMRegisterProtectedWindow"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMRegisterRevocationList( [in] DRMENVHANDLE hEnv, [in] PWSTR wszRevocationList );",
            "name": "DRMRegisterRevocationList"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMRepair();",
            "name": "DRMRepair"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetApplicationSpecificData( [in] DRMPUBHANDLE hIssuanceLicense, [in] BOOL fDelete, [in] PWSTR wszName, [in] PWSTR wszValue );",
            "name": "DRMSetApplicationSpecificData"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetGlobalOptions( [in] DRMGLOBALOPTIONS eGlobalOptions, [in] LPVOID pvdata, [in] DWORD dwlen );",
            "name": "DRMSetGlobalOptions"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetIntervalTime( [in] DRMPUBHANDLE hIssuanceLicense, [in] UINT cDays );",
            "name": "DRMSetIntervalTime"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetMetaData( [in] DRMPUBHANDLE hIssuanceLicense, [in] PWSTR wszContentId, [in] PWSTR wszContentIdType, [in, optional] PWSTR wszSKUId, [in, optional] PWSTR wszSKUIdType, [in, optional] PWSTR wszContentType, [in, optional] PWSTR wszContentName );",
            "name": "DRMSetMetaData"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetNameAndDescription( [in] DRMPUBHANDLE hIssuanceLicense, [in] BOOL fDelete, [in] UINT lcid, [in] PWSTR wszName, [in] PWSTR wszDescription );",
            "name": "DRMSetNameAndDescription"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetRevocationPoint( [in] DRMPUBHANDLE hIssuanceLicense, [in] BOOL fDelete, [in] PWSTR wszId, [in] PWSTR wszIdType, [in] PWSTR wszURL, [in] SYSTEMTIME *pstFrequency, [in] PWSTR wszName, [in] PWSTR wszPublicKey );",
            "name": "DRMSetRevocationPoint"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMSetUsagePolicy( [in] DRMPUBHANDLE hIssuanceLicense, [in] DRM_USAGEPOLICY_TYPE eUsagePolicyType, [in] BOOL fDelete, [in] BOOL fExclusion, [in] PWSTR wszName, [in] PWSTR wszMinVersion, [in] PWSTR wszMaxVersion, [in] PWSTR wszPublicKey, [in] PWSTR wszDigestAlgorithm, [in] BYTE *pbDigest, [in] UINT cbDigest );",
            "name": "DRMSetUsagePolicy"
        },
        {
            "signature": "DRMEXPORT HRESULT UDAPICALL DRMVerify( [in] PWSTR wszData, [in, out] UINT *pcAttestedData, [out] PWSTR wszAttestedData, [out] DRMATTESTTYPE *peType, [in, out] UINT *pcPrincipal, [out] PWSTR wszPrincipal, [in, out] UINT *pcManifest, [out] PWSTR wszManifest );",
            "name": "DRMVerify"
        }
    ],
    "Msdrmdefs.h": [
        {
            "signature": "DRMCALLBACK Drmcallback; HRESULT Drmcallback( DRM_STATUS_MSG unnamedParam1, HRESULT unnamedParam2, void *unnamedParam3, void *unnamedParam4 ) {...}",
            "name": "DRMCALLBACK callback"
        }
    ],
    "Msi.h": [
        {
            "signature": "INSTALLUI_HANDLER_RECORD InstalluiHandlerRecord; int InstalluiHandlerRecord( LPVOID pvContext, UINT iMessageType, MSIHANDLE hRecord ) {...}",
            "name": "INSTALLUI_HANDLER_RECORD callback"
        },
        {
            "signature": "INSTALLUI_HANDLERA InstalluiHandlera; int InstalluiHandlera( LPVOID pvContext, UINT iMessageType, LPCSTR szMessage ) {...}",
            "name": "INSTALLUI_HANDLERA callback"
        },
        {
            "signature": "INSTALLUI_HANDLERW InstalluiHandlerw; int InstalluiHandlerw( LPVOID pvContext, UINT iMessageType, LPCWSTR szMessage ) {...}",
            "name": "INSTALLUI_HANDLERW callback"
        },
        {
            "signature": "UINT MsiAdvertiseProductA( [in] LPCSTR szPackagePath, [in] LPCSTR szScriptfilePath, [in] LPCSTR szTransforms, [in] LANGID lgidLanguage );",
            "name": "MsiAdvertiseProductA"
        },
        {
            "signature": "UINT MsiAdvertiseProductExA( [in] LPCSTR szPackagePath, [in] LPCSTR szScriptfilePath, [in] LPCSTR szTransforms, [in] LANGID lgidLanguage, [in] DWORD dwPlatform, [in] DWORD dwOptions );",
            "name": "MsiAdvertiseProductExA"
        },
        {
            "signature": "UINT MsiAdvertiseProductExW( [in] LPCWSTR szPackagePath, [in] LPCWSTR szScriptfilePath, [in] LPCWSTR szTransforms, [in] LANGID lgidLanguage, [in] DWORD dwPlatform, [in] DWORD dwOptions );",
            "name": "MsiAdvertiseProductExW"
        },
        {
            "signature": "UINT MsiAdvertiseProductW( [in] LPCWSTR szPackagePath, [in] LPCWSTR szScriptfilePath, [in] LPCWSTR szTransforms, [in] LANGID lgidLanguage );",
            "name": "MsiAdvertiseProductW"
        },
        {
            "signature": "UINT MsiAdvertiseScriptA( [in] LPCSTR szScriptFile, [in] DWORD dwFlags, [in] PHKEY phRegData, [in] BOOL fRemoveItems );",
            "name": "MsiAdvertiseScriptA"
        },
        {
            "signature": "UINT MsiAdvertiseScriptW( [in] LPCWSTR szScriptFile, [in] DWORD dwFlags, [in] PHKEY phRegData, [in] BOOL fRemoveItems );",
            "name": "MsiAdvertiseScriptW"
        },
        {
            "signature": "UINT MsiApplyMultiplePatchesA( [in] LPCSTR szPatchPackages, [in, optional] LPCSTR szProductCode, [in, optional] LPCSTR szPropertiesList );",
            "name": "MsiApplyMultiplePatchesA"
        },
        {
            "signature": "UINT MsiApplyMultiplePatchesW( [in] LPCWSTR szPatchPackages, [in, optional] LPCWSTR szProductCode, [in, optional] LPCWSTR szPropertiesList );",
            "name": "MsiApplyMultiplePatchesW"
        },
        {
            "signature": "UINT MsiApplyPatchA( [in] LPCSTR szPatchPackage, [in] LPCSTR szInstallPackage, [in] INSTALLTYPE eInstallType, [in] LPCSTR szCommandLine );",
            "name": "MsiApplyPatchA"
        },
        {
            "signature": "UINT MsiApplyPatchW( [in] LPCWSTR szPatchPackage, [in] LPCWSTR szInstallPackage, [in] INSTALLTYPE eInstallType, [in] LPCWSTR szCommandLine );",
            "name": "MsiApplyPatchW"
        },
        {
            "signature": "UINT MsiBeginTransactionA( [in] LPCSTR szName, [in] DWORD dwTransactionAttributes, [out] MSIHANDLE *phTransactionHandle, [out] HANDLE *phChangeOfOwnerEvent );",
            "name": "MsiBeginTransactionA"
        },
        {
            "signature": "UINT MsiBeginTransactionW( [in] LPCWSTR szName, [in] DWORD dwTransactionAttributes, [out] MSIHANDLE *phTransactionHandle, [out] HANDLE *phChangeOfOwnerEvent );",
            "name": "MsiBeginTransactionW"
        },
        {
            "signature": "UINT MsiCloseAllHandles();",
            "name": "MsiCloseAllHandles"
        },
        {
            "signature": "UINT MsiCloseHandle( [in] MSIHANDLE hAny );",
            "name": "MsiCloseHandle"
        },
        {
            "signature": "UINT MsiCollectUserInfoA( [in] LPCSTR szProduct );",
            "name": "MsiCollectUserInfoA"
        },
        {
            "signature": "UINT MsiCollectUserInfoW( [in] LPCWSTR szProduct );",
            "name": "MsiCollectUserInfoW"
        },
        {
            "signature": "UINT MsiConfigureFeatureA( [in] LPCSTR szProduct, [in] LPCSTR szFeature, [in] INSTALLSTATE eInstallState );",
            "name": "MsiConfigureFeatureA"
        },
        {
            "signature": "UINT MsiConfigureFeatureW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature, [in] INSTALLSTATE eInstallState );",
            "name": "MsiConfigureFeatureW"
        },
        {
            "signature": "UINT MsiConfigureProductA( [in] LPCSTR szProduct, [in] int iInstallLevel, [in] INSTALLSTATE eInstallState );",
            "name": "MsiConfigureProductA"
        },
        {
            "signature": "UINT MsiConfigureProductExA( [in] LPCSTR szProduct, [in] int iInstallLevel, [in] INSTALLSTATE eInstallState, [in] LPCSTR szCommandLine );",
            "name": "MsiConfigureProductExA"
        },
        {
            "signature": "UINT MsiConfigureProductExW( [in] LPCWSTR szProduct, [in] int iInstallLevel, [in] INSTALLSTATE eInstallState, [in] LPCWSTR szCommandLine );",
            "name": "MsiConfigureProductExW"
        },
        {
            "signature": "UINT MsiConfigureProductW( [in] LPCWSTR szProduct, [in] int iInstallLevel, [in] INSTALLSTATE eInstallState );",
            "name": "MsiConfigureProductW"
        },
        {
            "signature": "UINT MsiDetermineApplicablePatchesA( [in] LPCSTR szProductPackagePath, [in] DWORD cPatchInfo, [in] PMSIPATCHSEQUENCEINFOA pPatchInfo );",
            "name": "MsiDetermineApplicablePatchesA"
        },
        {
            "signature": "UINT MsiDetermineApplicablePatchesW( [in] LPCWSTR szProductPackagePath, [in] DWORD cPatchInfo, [in] PMSIPATCHSEQUENCEINFOW pPatchInfo );",
            "name": "MsiDetermineApplicablePatchesW"
        },
        {
            "signature": "UINT MsiDeterminePatchSequenceA( [in] LPCSTR szProductCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD cPatchInfo, [in] PMSIPATCHSEQUENCEINFOA pPatchInfo );",
            "name": "MsiDeterminePatchSequenceA"
        },
        {
            "signature": "UINT MsiDeterminePatchSequenceW( [in] LPCWSTR szProductCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD cPatchInfo, [in] PMSIPATCHSEQUENCEINFOW pPatchInfo );",
            "name": "MsiDeterminePatchSequenceW"
        },
        {
            "signature": "UINT MsiEnableLogA( [in] DWORD dwLogMode, [in] LPCSTR szLogFile, [in] DWORD dwLogAttributes );",
            "name": "MsiEnableLogA"
        },
        {
            "signature": "UINT MsiEnableLogW( [in] DWORD dwLogMode, [in] LPCWSTR szLogFile, [in] DWORD dwLogAttributes );",
            "name": "MsiEnableLogW"
        },
        {
            "signature": "UINT MsiEndTransaction( [in] DWORD dwTransactionState );",
            "name": "MsiEndTransaction"
        },
        {
            "signature": "UINT MsiEnumClientsA( [in] LPCSTR szComponent, [in] DWORD iProductIndex, [out] LPSTR lpProductBuf );",
            "name": "MsiEnumClientsA"
        },
        {
            "signature": "UINT MsiEnumClientsExA( [in] LPCSTR szComponent, [in, optional] LPCSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwProductIndex, [out, optional] CHAR [39] szProductBuf, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPSTR szSid, [in, out, optional] LPDWORD pcchSid );",
            "name": "MsiEnumClientsExA"
        },
        {
            "signature": "UINT MsiEnumClientsExW( [in] LPCWSTR szComponent, [in, optional] LPCWSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwProductIndex, [out, optional] WCHAR [39] szProductBuf, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPWSTR szSid, [in, out, optional] LPDWORD pcchSid );",
            "name": "MsiEnumClientsExW"
        },
        {
            "signature": "UINT MsiEnumClientsW( [in] LPCWSTR szComponent, [in] DWORD iProductIndex, [out] LPWSTR lpProductBuf );",
            "name": "MsiEnumClientsW"
        },
        {
            "signature": "UINT MsiEnumComponentQualifiersA( [in] LPCSTR szComponent, [in] DWORD iIndex, [out] LPSTR lpQualifierBuf, [in, out] LPDWORD pcchQualifierBuf, [out] LPSTR lpApplicationDataBuf, [in, out] LPDWORD pcchApplicationDataBuf );",
            "name": "MsiEnumComponentQualifiersA"
        },
        {
            "signature": "UINT MsiEnumComponentQualifiersW( [in] LPCWSTR szComponent, [in] DWORD iIndex, [out] LPWSTR lpQualifierBuf, [in, out] LPDWORD pcchQualifierBuf, [out] LPWSTR lpApplicationDataBuf, [in, out] LPDWORD pcchApplicationDataBuf );",
            "name": "MsiEnumComponentQualifiersW"
        },
        {
            "signature": "UINT MsiEnumComponentsA( [in] DWORD iComponentIndex, [out] LPSTR lpComponentBuf );",
            "name": "MsiEnumComponentsA"
        },
        {
            "signature": "UINT MsiEnumComponentsExA( [in, optional] LPCSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwIndex, [out, optional] CHAR [39] szInstalledComponentCode, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPSTR szSid, [in, out] LPDWORD pcchSid );",
            "name": "MsiEnumComponentsExA"
        },
        {
            "signature": "UINT MsiEnumComponentsExW( [in, optional] LPCWSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwIndex, [out, optional] WCHAR [39] szInstalledComponentCode, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPWSTR szSid, [in, out] LPDWORD pcchSid );",
            "name": "MsiEnumComponentsExW"
        },
        {
            "signature": "UINT MsiEnumComponentsW( [in] DWORD iComponentIndex, [out] LPWSTR lpComponentBuf );",
            "name": "MsiEnumComponentsW"
        },
        {
            "signature": "UINT MsiEnumFeaturesA( [in] LPCSTR szProduct, [in] DWORD iFeatureIndex, [out] LPSTR lpFeatureBuf, [out] LPSTR lpParentBuf );",
            "name": "MsiEnumFeaturesA"
        },
        {
            "signature": "UINT MsiEnumFeaturesW( [in] LPCWSTR szProduct, [in] DWORD iFeatureIndex, [out] LPWSTR lpFeatureBuf, [out] LPWSTR lpParentBuf );",
            "name": "MsiEnumFeaturesW"
        },
        {
            "signature": "UINT MsiEnumPatchesA( [in] LPCSTR szProduct, [in] DWORD iPatchIndex, [out] LPSTR lpPatchBuf, [out] LPSTR lpTransformsBuf, [in, out] LPDWORD pcchTransformsBuf );",
            "name": "MsiEnumPatchesA"
        },
        {
            "signature": "UINT MsiEnumPatchesExA( [in, optional] LPCSTR szProductCode, [in, optional] LPCSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwFilter, [in] DWORD dwIndex, [out, optional] CHAR [39] szPatchCode, [out, optional] CHAR [39] szTargetProductCode, [out, optional] MSIINSTALLCONTEXT *pdwTargetProductContext, [out, optional] LPSTR szTargetUserSid, [in, out, optional] LPDWORD pcchTargetUserSid );",
            "name": "MsiEnumPatchesExA"
        },
        {
            "signature": "UINT MsiEnumPatchesExW( [in, optional] LPCWSTR szProductCode, [in, optional] LPCWSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwFilter, [in] DWORD dwIndex, [out, optional] WCHAR [39] szPatchCode, [out, optional] WCHAR [39] szTargetProductCode, [out, optional] MSIINSTALLCONTEXT *pdwTargetProductContext, [out, optional] LPWSTR szTargetUserSid, [in, out, optional] LPDWORD pcchTargetUserSid );",
            "name": "MsiEnumPatchesExW"
        },
        {
            "signature": "UINT MsiEnumPatchesW( [in] LPCWSTR szProduct, [in] DWORD iPatchIndex, [out] LPWSTR lpPatchBuf, [out] LPWSTR lpTransformsBuf, [in, out] LPDWORD pcchTransformsBuf );",
            "name": "MsiEnumPatchesW"
        },
        {
            "signature": "UINT MsiEnumProductsA( [in] DWORD iProductIndex, [out] LPSTR lpProductBuf );",
            "name": "MsiEnumProductsA"
        },
        {
            "signature": "UINT MsiEnumProductsExA( [in, optional] LPCSTR szProductCode, [in] LPCSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwIndex, [out, optional] CHAR [39] szInstalledProductCode, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPSTR szSid, [in, out, optional] LPDWORD pcchSid );",
            "name": "MsiEnumProductsExA"
        },
        {
            "signature": "UINT MsiEnumProductsExW( [in, optional] LPCWSTR szProductCode, [in] LPCWSTR szUserSid, [in] DWORD dwContext, [in] DWORD dwIndex, [out, optional] WCHAR [39] szInstalledProductCode, [out, optional] MSIINSTALLCONTEXT *pdwInstalledContext, [out, optional] LPWSTR szSid, [in, out, optional] LPDWORD pcchSid );",
            "name": "MsiEnumProductsExW"
        },
        {
            "signature": "UINT MsiEnumProductsW( [in] DWORD iProductIndex, [out] LPWSTR lpProductBuf );",
            "name": "MsiEnumProductsW"
        },
        {
            "signature": "UINT MsiEnumRelatedProductsA( [in] LPCSTR lpUpgradeCode, [in] DWORD dwReserved, [in] DWORD iProductIndex, [out] LPSTR lpProductBuf );",
            "name": "MsiEnumRelatedProductsA"
        },
        {
            "signature": "UINT MsiEnumRelatedProductsW( [in] LPCWSTR lpUpgradeCode, [in] DWORD dwReserved, [in] DWORD iProductIndex, [out] LPWSTR lpProductBuf );",
            "name": "MsiEnumRelatedProductsW"
        },
        {
            "signature": "UINT MsiExtractPatchXMLDataA( [in] LPCSTR szPatchPath, [in] DWORD dwReserved, [out, optional] LPSTR szXMLData, [in, out, optional] LPDWORD pcchXMLData );",
            "name": "MsiExtractPatchXMLDataA"
        },
        {
            "signature": "UINT MsiExtractPatchXMLDataW( [in] LPCWSTR szPatchPath, [in] DWORD dwReserved, [out, optional] LPWSTR szXMLData, [in, out, optional] LPDWORD pcchXMLData );",
            "name": "MsiExtractPatchXMLDataW"
        },
        {
            "signature": "INSTALLSTATE MsiGetComponentPathA( [in] LPCSTR szProduct, [in] LPCSTR szComponent, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchBuf );",
            "name": "MsiGetComponentPathA"
        },
        {
            "signature": "INSTALLSTATE MsiGetComponentPathExA( [in] LPCSTR szProductCode, [in] LPCSTR szComponentCode, [in, optional] LPCSTR szUserSid, [in, optional] MSIINSTALLCONTEXT dwContext, [out, optional] LPSTR lpOutPathBuffer, [in, out, optional] LPDWORD pcchOutPathBuffer );",
            "name": "MsiGetComponentPathExA"
        },
        {
            "signature": "INSTALLSTATE MsiGetComponentPathExW( [in] LPCWSTR szProductCode, [in] LPCWSTR szComponentCode, [in, optional] LPCWSTR szUserSid, [in, optional] MSIINSTALLCONTEXT dwContext, [out, optional] LPWSTR lpOutPathBuffer, [in, out, optional] LPDWORD pcchOutPathBuffer );",
            "name": "MsiGetComponentPathExW"
        },
        {
            "signature": "INSTALLSTATE MsiGetComponentPathW( [in] LPCWSTR szProduct, [in] LPCWSTR szComponent, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchBuf );",
            "name": "MsiGetComponentPathW"
        },
        {
            "signature": "UINT MsiGetFeatureInfoA( [in] MSIHANDLE hProduct, [in] LPCSTR szFeature, [out, optional] LPDWORD lpAttributes, [out, optional] LPSTR lpTitleBuf, [in, out, optional] LPDWORD pcchTitleBuf, [out, optional] LPSTR lpHelpBuf, [in, out, optional] LPDWORD pcchHelpBuf );",
            "name": "MsiGetFeatureInfoA"
        },
        {
            "signature": "UINT MsiGetFeatureInfoW( [in] MSIHANDLE hProduct, [in] LPCWSTR szFeature, [out, optional] LPDWORD lpAttributes, [out, optional] LPWSTR lpTitleBuf, [in, out, optional] LPDWORD pcchTitleBuf, [out, optional] LPWSTR lpHelpBuf, [in, out, optional] LPDWORD pcchHelpBuf );",
            "name": "MsiGetFeatureInfoW"
        },
        {
            "signature": "UINT MsiGetFeatureUsageA( [in] LPCSTR szProduct, [in] LPCSTR szFeature, [out] LPDWORD pdwUseCount, [out] LPWORD pwDateUsed );",
            "name": "MsiGetFeatureUsageA"
        },
        {
            "signature": "UINT MsiGetFeatureUsageW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature, [out] LPDWORD pdwUseCount, [out] LPWORD pwDateUsed );",
            "name": "MsiGetFeatureUsageW"
        },
        {
            "signature": "UINT MsiGetFileHashA( [in] LPCSTR szFilePath, [in] DWORD dwOptions, [out] PMSIFILEHASHINFO pHash );",
            "name": "MsiGetFileHashA"
        },
        {
            "signature": "UINT MsiGetFileHashW( [in] LPCWSTR szFilePath, [in] DWORD dwOptions, [out] PMSIFILEHASHINFO pHash );",
            "name": "MsiGetFileHashW"
        },
        {
            "signature": "HRESULT MsiGetFileSignatureInformationA( [in] LPCSTR szSignedObjectPath, [in] DWORD dwFlags, [out] PCCERT_CONTEXT *ppcCertContext, [out] LPBYTE pbHashData, [in, out] LPDWORD pcbHashData );",
            "name": "MsiGetFileSignatureInformationA"
        },
        {
            "signature": "HRESULT MsiGetFileSignatureInformationW( [in] LPCWSTR szSignedObjectPath, [in] DWORD dwFlags, [out] PCCERT_CONTEXT *ppcCertContext, [out] LPBYTE pbHashData, [in, out] LPDWORD pcbHashData );",
            "name": "MsiGetFileSignatureInformationW"
        },
        {
            "signature": "UINT MsiGetFileVersionA( [in] LPCSTR szFilePath, [out] LPSTR lpVersionBuf, [in, out] LPDWORD pcchVersionBuf, [out] LPSTR lpLangBuf, [in, out] LPDWORD pcchLangBuf );",
            "name": "MsiGetFileVersionA"
        },
        {
            "signature": "UINT MsiGetFileVersionW( [in] LPCWSTR szFilePath, [out] LPWSTR lpVersionBuf, [in, out] LPDWORD pcchVersionBuf, [out] LPWSTR lpLangBuf, [in, out] LPDWORD pcchLangBuf );",
            "name": "MsiGetFileVersionW"
        },
        {
            "signature": "UINT MsiGetPatchFileListA( [in] LPCSTR szProductCode, [in] LPCSTR szPatchPackages, [in, out] LPDWORD pcFiles, [in, out] MSIHANDLE **pphFileRecords );",
            "name": "MsiGetPatchFileListA"
        },
        {
            "signature": "UINT MsiGetPatchFileListW( [in] LPCWSTR szProductCode, [in] LPCWSTR szPatchPackages, [in, out] LPDWORD pcFiles, [in, out] MSIHANDLE **pphFileRecords );",
            "name": "MsiGetPatchFileListW"
        },
        {
            "signature": "UINT MsiGetPatchInfoA( [in] LPCSTR szPatch, [in] LPCSTR szAttribute, [out] LPSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetPatchInfoA"
        },
        {
            "signature": "UINT MsiGetPatchInfoExA( [in] LPCSTR szPatchCode, [in] LPCSTR szProductCode, [in] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCSTR szProperty, [out, optional] LPSTR lpValue, [in, out] LPDWORD pcchValue );",
            "name": "MsiGetPatchInfoExA"
        },
        {
            "signature": "UINT MsiGetPatchInfoExW( [in] LPCWSTR szPatchCode, [in] LPCWSTR szProductCode, [in] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCWSTR szProperty, [out, optional] LPWSTR lpValue, [in, out] LPDWORD pcchValue );",
            "name": "MsiGetPatchInfoExW"
        },
        {
            "signature": "UINT MsiGetPatchInfoW( [in] LPCWSTR szPatch, [in] LPCWSTR szAttribute, [out] LPWSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetPatchInfoW"
        },
        {
            "signature": "UINT MsiGetProductCodeA( [in] LPCSTR szComponent, [out] LPSTR lpBuf39 );",
            "name": "MsiGetProductCodeA"
        },
        {
            "signature": "UINT MsiGetProductCodeW( [in] LPCWSTR szComponent, [out] LPWSTR lpBuf39 );",
            "name": "MsiGetProductCodeW"
        },
        {
            "signature": "UINT MsiGetProductInfoA( [in] LPCSTR szProduct, [in] LPCSTR szAttribute, [out] LPSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetProductInfoA"
        },
        {
            "signature": "UINT MsiGetProductInfoExA( [in] LPCSTR szProductCode, [in] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCSTR szProperty, [out, optional] LPSTR szValue, [in, out, optional] LPDWORD pcchValue );",
            "name": "MsiGetProductInfoExA"
        },
        {
            "signature": "UINT MsiGetProductInfoExW( [in] LPCWSTR szProductCode, [in] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCWSTR szProperty, [out, optional] LPWSTR szValue, [in, out, optional] LPDWORD pcchValue );",
            "name": "MsiGetProductInfoExW"
        },
        {
            "signature": "UINT MsiGetProductInfoFromScriptA( [in] LPCSTR szScriptFile, [out] LPSTR lpProductBuf39, [out] LANGID *plgidLanguage, [out] LPDWORD pdwVersion, [out] LPSTR lpNameBuf, [in, out] LPDWORD pcchNameBuf, [out] LPSTR lpPackageBuf, [in, out] LPDWORD pcchPackageBuf );",
            "name": "MsiGetProductInfoFromScriptA"
        },
        {
            "signature": "UINT MsiGetProductInfoFromScriptW( [in] LPCWSTR szScriptFile, [out] LPWSTR lpProductBuf39, [out] LANGID *plgidLanguage, [out] LPDWORD pdwVersion, [out] LPWSTR lpNameBuf, [in, out] LPDWORD pcchNameBuf, [out] LPWSTR lpPackageBuf, [in, out] LPDWORD pcchPackageBuf );",
            "name": "MsiGetProductInfoFromScriptW"
        },
        {
            "signature": "UINT MsiGetProductInfoW( [in] LPCWSTR szProduct, [in] LPCWSTR szAttribute, [out] LPWSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetProductInfoW"
        },
        {
            "signature": "UINT MsiGetProductPropertyA( [in] MSIHANDLE hProduct, [in] LPCSTR szProperty, [out] LPSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetProductPropertyA"
        },
        {
            "signature": "UINT MsiGetProductPropertyW( [in] MSIHANDLE hProduct, [in] LPCWSTR szProperty, [out] LPWSTR lpValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetProductPropertyW"
        },
        {
            "signature": "UINT MsiGetShortcutTargetA( [in] LPCSTR szShortcutPath, [out] LPSTR szProductCode, [out] LPSTR szFeatureId, [out] LPSTR szComponentCode );",
            "name": "MsiGetShortcutTargetA"
        },
        {
            "signature": "UINT MsiGetShortcutTargetW( [in] LPCWSTR szShortcutPath, [out] LPWSTR szProductCode, [out] LPWSTR szFeatureId, [out] LPWSTR szComponentCode );",
            "name": "MsiGetShortcutTargetW"
        },
        {
            "signature": "USERINFOSTATE MsiGetUserInfoA( [in] LPCSTR szProduct, [out] LPSTR lpUserNameBuf, [in, out] LPDWORD pcchUserNameBuf, [out] LPSTR lpOrgNameBuf, [in, out] LPDWORD pcchOrgNameBuf, [in] LPSTR lpSerialBuf, [in, out] LPDWORD pcchSerialBuf );",
            "name": "MsiGetUserInfoA"
        },
        {
            "signature": "USERINFOSTATE MsiGetUserInfoW( [in] LPCWSTR szProduct, [out] LPWSTR lpUserNameBuf, [in, out] LPDWORD pcchUserNameBuf, [out] LPWSTR lpOrgNameBuf, [in, out] LPDWORD pcchOrgNameBuf, [in] LPWSTR lpSerialBuf, [in, out] LPDWORD pcchSerialBuf );",
            "name": "MsiGetUserInfoW"
        },
        {
            "signature": "UINT MsiInstallMissingComponentA( [in] LPCSTR szProduct, [in] LPCSTR szComponent, [in] INSTALLSTATE eInstallState );",
            "name": "MsiInstallMissingComponentA"
        },
        {
            "signature": "UINT MsiInstallMissingComponentW( [in] LPCWSTR szProduct, [in] LPCWSTR szComponent, [in] INSTALLSTATE eInstallState );",
            "name": "MsiInstallMissingComponentW"
        },
        {
            "signature": "UINT MsiInstallMissingFileA( [in] LPCSTR szProduct, [in] LPCSTR szFile );",
            "name": "MsiInstallMissingFileA"
        },
        {
            "signature": "UINT MsiInstallMissingFileW( [in] LPCWSTR szProduct, [in] LPCWSTR szFile );",
            "name": "MsiInstallMissingFileW"
        },
        {
            "signature": "UINT MsiInstallProductA( [in] LPCSTR szPackagePath, [in] LPCSTR szCommandLine );",
            "name": "MsiInstallProductA"
        },
        {
            "signature": "UINT MsiInstallProductW( [in] LPCWSTR szPackagePath, [in] LPCWSTR szCommandLine );",
            "name": "MsiInstallProductW"
        },
        {
            "signature": "UINT MsiIsProductElevatedA( [in] LPCSTR szProduct, [out] BOOL *pfElevated );",
            "name": "MsiIsProductElevatedA"
        },
        {
            "signature": "UINT MsiIsProductElevatedW( [in] LPCWSTR szProduct, [out] BOOL *pfElevated );",
            "name": "MsiIsProductElevatedW"
        },
        {
            "signature": "UINT MsiJoinTransaction( [in] MSIHANDLE hTransactionHandle, [in] DWORD dwTransactionAttributes, [out] HANDLE *phChangeOfOwnerEvent );",
            "name": "MsiJoinTransaction"
        },
        {
            "signature": "INSTALLSTATE MsiLocateComponentA( [in] LPCSTR szComponent, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchBuf );",
            "name": "MsiLocateComponentA"
        },
        {
            "signature": "INSTALLSTATE MsiLocateComponentW( [in] LPCWSTR szComponent, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchBuf );",
            "name": "MsiLocateComponentW"
        },
        {
            "signature": "UINT MsiNotifySidChangeA( [in] LPCSTR pOldSid, [in] LPCSTR pNewSid );",
            "name": "MsiNotifySidChangeA"
        },
        {
            "signature": "UINT MsiNotifySidChangeW( [in] LPCWSTR pOldSid, [in] LPCWSTR pNewSid );",
            "name": "MsiNotifySidChangeW"
        },
        {
            "signature": "UINT MsiOpenPackageA( [in] LPCSTR szPackagePath, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenPackageA"
        },
        {
            "signature": "UINT MsiOpenPackageExA( [in] LPCSTR szPackagePath, [in] DWORD dwOptions, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenPackageExA"
        },
        {
            "signature": "UINT MsiOpenPackageExW( [in] LPCWSTR szPackagePath, [in] DWORD dwOptions, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenPackageExW"
        },
        {
            "signature": "UINT MsiOpenPackageW( [in] LPCWSTR szPackagePath, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenPackageW"
        },
        {
            "signature": "UINT MsiOpenProductA( [in] LPCSTR szProduct, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenProductA"
        },
        {
            "signature": "UINT MsiOpenProductW( [in] LPCWSTR szProduct, [out] MSIHANDLE *hProduct );",
            "name": "MsiOpenProductW"
        },
        {
            "signature": "UINT MsiProcessAdvertiseScriptA( [in] LPCSTR szScriptFile, [in] LPCSTR szIconFolder, [in] HKEY hRegData, [in] BOOL fShortcuts, [in] BOOL fRemoveItems );",
            "name": "MsiProcessAdvertiseScriptA"
        },
        {
            "signature": "UINT MsiProcessAdvertiseScriptW( [in] LPCWSTR szScriptFile, [in] LPCWSTR szIconFolder, [in] HKEY hRegData, [in] BOOL fShortcuts, [in] BOOL fRemoveItems );",
            "name": "MsiProcessAdvertiseScriptW"
        },
        {
            "signature": "UINT MsiProvideAssemblyA( [in] LPCSTR szAssemblyName, [in] LPCSTR szAppContext, [in] DWORD dwInstallMode, [in] DWORD dwAssemblyInfo, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideAssemblyA"
        },
        {
            "signature": "UINT MsiProvideAssemblyW( [in] LPCWSTR szAssemblyName, [in] LPCWSTR szAppContext, [in] DWORD dwInstallMode, [in] DWORD dwAssemblyInfo, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideAssemblyW"
        },
        {
            "signature": "UINT MsiProvideComponentA( [in] LPCSTR szProduct, [in] LPCSTR szFeature, [in] LPCSTR szComponent, [in] DWORD dwInstallMode, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideComponentA"
        },
        {
            "signature": "UINT MsiProvideComponentW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature, [in] LPCWSTR szComponent, [in] DWORD dwInstallMode, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideComponentW"
        },
        {
            "signature": "UINT MsiProvideQualifiedComponentA( [in] LPCSTR szCategory, [in] LPCSTR szQualifier, [in] DWORD dwInstallMode, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideQualifiedComponentA"
        },
        {
            "signature": "UINT MsiProvideQualifiedComponentExA( [in] LPCSTR szCategory, [in] LPCSTR szQualifier, [in] DWORD dwInstallMode, [in] LPCSTR szProduct, [in] DWORD dwUnused1, [in] DWORD dwUnused2, [out] LPSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideQualifiedComponentExA"
        },
        {
            "signature": "UINT MsiProvideQualifiedComponentExW( [in] LPCWSTR szCategory, [in] LPCWSTR szQualifier, [in] DWORD dwInstallMode, [in] LPCWSTR szProduct, [in] DWORD dwUnused1, [in] DWORD dwUnused2, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideQualifiedComponentExW"
        },
        {
            "signature": "UINT MsiProvideQualifiedComponentW( [in] LPCWSTR szCategory, [in] LPCWSTR szQualifier, [in] DWORD dwInstallMode, [out] LPWSTR lpPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiProvideQualifiedComponentW"
        },
        {
            "signature": "UINT MsiQueryComponentStateA( [in] LPCSTR szProductCode, [in] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCSTR szComponentCode, [out] INSTALLSTATE *pdwState );",
            "name": "MsiQueryComponentStateA"
        },
        {
            "signature": "UINT MsiQueryComponentStateW( [in] LPCWSTR szProductCode, [in] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCWSTR szComponentCode, [out] INSTALLSTATE *pdwState );",
            "name": "MsiQueryComponentStateW"
        },
        {
            "signature": "INSTALLSTATE MsiQueryFeatureStateA( [in] LPCSTR szProduct, [in] LPCSTR szFeature );",
            "name": "MsiQueryFeatureStateA"
        },
        {
            "signature": "UINT MsiQueryFeatureStateExA( [in] LPCSTR szProductCode, [in] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCSTR szFeature, [out, optional] INSTALLSTATE *pdwState );",
            "name": "MsiQueryFeatureStateExA"
        },
        {
            "signature": "UINT MsiQueryFeatureStateExW( [in] LPCWSTR szProductCode, [in] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] LPCWSTR szFeature, [out, optional] INSTALLSTATE *pdwState );",
            "name": "MsiQueryFeatureStateExW"
        },
        {
            "signature": "INSTALLSTATE MsiQueryFeatureStateW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature );",
            "name": "MsiQueryFeatureStateW"
        },
        {
            "signature": "INSTALLSTATE MsiQueryProductStateA( [in] LPCSTR szProduct );",
            "name": "MsiQueryProductStateA"
        },
        {
            "signature": "INSTALLSTATE MsiQueryProductStateW( [in] LPCWSTR szProduct );",
            "name": "MsiQueryProductStateW"
        },
        {
            "signature": "UINT MsiReinstallFeatureA( [in] LPCSTR szProduct, [in] LPCSTR szFeature, [in] DWORD dwReinstallMode );",
            "name": "MsiReinstallFeatureA"
        },
        {
            "signature": "UINT MsiReinstallFeatureW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature, [in] DWORD dwReinstallMode );",
            "name": "MsiReinstallFeatureW"
        },
        {
            "signature": "UINT MsiReinstallProductA( [in] LPCSTR szProduct, [in] DWORD szReinstallMode );",
            "name": "MsiReinstallProductA"
        },
        {
            "signature": "UINT MsiReinstallProductW( [in] LPCWSTR szProduct, [in] DWORD szReinstallMode );",
            "name": "MsiReinstallProductW"
        },
        {
            "signature": "UINT MsiRemovePatchesA( [in] LPCSTR szPatchList, [in] LPCSTR szProductCode, [in] INSTALLTYPE eUninstallType, [in, optional] LPCSTR szPropertyList );",
            "name": "MsiRemovePatchesA"
        },
        {
            "signature": "UINT MsiRemovePatchesW( [in] LPCWSTR szPatchList, [in] LPCWSTR szProductCode, [in] INSTALLTYPE eUninstallType, [in, optional] LPCWSTR szPropertyList );",
            "name": "MsiRemovePatchesW"
        },
        {
            "signature": "INSTALLUI_HANDLERA MsiSetExternalUIA( [in] INSTALLUI_HANDLERA puiHandler, [in] DWORD dwMessageFilter, [in] LPVOID pvContext );",
            "name": "MsiSetExternalUIA"
        },
        {
            "signature": "UINT MsiSetExternalUIRecord( [in] INSTALLUI_HANDLER_RECORD puiHandler, [in] DWORD dwMessageFilter, [in] LPVOID pvContext, [out, optional] PINSTALLUI_HANDLER_RECORD ppuiPrevHandler );",
            "name": "MsiSetExternalUIRecord"
        },
        {
            "signature": "INSTALLUI_HANDLERW MsiSetExternalUIW( [in] INSTALLUI_HANDLERW puiHandler, [in] DWORD dwMessageFilter, [in] LPVOID pvContext );",
            "name": "MsiSetExternalUIW"
        },
        {
            "signature": "INSTALLUILEVEL MsiSetInternalUI( [in] INSTALLUILEVEL dwUILevel, [in, out] HWND *phWnd );",
            "name": "MsiSetInternalUI"
        },
        {
            "signature": "UINT MsiSourceListAddMediaDiskA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwDiskId, [in] LPCSTR szVolumeLabel, [in, optional] LPCSTR szDiskPrompt );",
            "name": "MsiSourceListAddMediaDiskA"
        },
        {
            "signature": "UINT MsiSourceListAddMediaDiskW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwDiskId, [in] LPCWSTR szVolumeLabel, [in, optional] LPCWSTR szDiskPrompt );",
            "name": "MsiSourceListAddMediaDiskW"
        },
        {
            "signature": "UINT MsiSourceListAddSourceA( [in] LPCSTR szProduct, [in] LPCSTR szUserName, [in] DWORD dwReserved, [in] LPCSTR szSource );",
            "name": "MsiSourceListAddSourceA"
        },
        {
            "signature": "UINT MsiSourceListAddSourceExA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCSTR szSource, [in, optional] DWORD dwIndex );",
            "name": "MsiSourceListAddSourceExA"
        },
        {
            "signature": "UINT MsiSourceListAddSourceExW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCWSTR szSource, [in, optional] DWORD dwIndex );",
            "name": "MsiSourceListAddSourceExW"
        },
        {
            "signature": "UINT MsiSourceListAddSourceW( [in] LPCWSTR szProduct, [in] LPCWSTR szUserName, [in] DWORD dwReserved, [in] LPCWSTR szSource );",
            "name": "MsiSourceListAddSourceW"
        },
        {
            "signature": "UINT MsiSourceListClearAllA( [in] LPCSTR szProduct, [in] LPCSTR szUserName, [in] DWORD dwReserved );",
            "name": "MsiSourceListClearAllA"
        },
        {
            "signature": "UINT MsiSourceListClearAllExA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions );",
            "name": "MsiSourceListClearAllExA"
        },
        {
            "signature": "UINT MsiSourceListClearAllExW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions );",
            "name": "MsiSourceListClearAllExW"
        },
        {
            "signature": "UINT MsiSourceListClearAllW( [in] LPCWSTR szProduct, [in] LPCWSTR szUserName, [in] DWORD dwReserved );",
            "name": "MsiSourceListClearAllW"
        },
        {
            "signature": "UINT MsiSourceListClearMediaDiskA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwDiskId );",
            "name": "MsiSourceListClearMediaDiskA"
        },
        {
            "signature": "UINT MsiSourceListClearMediaDiskW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwDiskId );",
            "name": "MsiSourceListClearMediaDiskW"
        },
        {
            "signature": "UINT MsiSourceListClearSourceA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCSTR szSource );",
            "name": "MsiSourceListClearSourceA"
        },
        {
            "signature": "UINT MsiSourceListClearSourceW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCWSTR szSource );",
            "name": "MsiSourceListClearSourceW"
        },
        {
            "signature": "UINT MsiSourceListEnumMediaDisksA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwIndex, [out, optional] LPDWORD pdwDiskId, [out, optional] LPSTR szVolumeLabel, [in, out, optional] LPDWORD pcchVolumeLabel, [out, optional] LPSTR szDiskPrompt, [in, out, optional] LPDWORD pcchDiskPrompt );",
            "name": "MsiSourceListEnumMediaDisksA"
        },
        {
            "signature": "UINT MsiSourceListEnumMediaDisksW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwIndex, [out, optional] LPDWORD pdwDiskId, [out, optional] LPWSTR szVolumeLabel, [in, out, optional] LPDWORD pcchVolumeLabel, [out, optional] LPWSTR szDiskPrompt, [in, out, optional] LPDWORD pcchDiskPrompt );",
            "name": "MsiSourceListEnumMediaDisksW"
        },
        {
            "signature": "UINT MsiSourceListEnumSourcesA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwIndex, [in, optional] LPSTR szSource, [in, out, optional] LPDWORD pcchSource );",
            "name": "MsiSourceListEnumSourcesA"
        },
        {
            "signature": "UINT MsiSourceListEnumSourcesW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] DWORD dwIndex, [in, optional] LPWSTR szSource, [in, out, optional] LPDWORD pcchSource );",
            "name": "MsiSourceListEnumSourcesW"
        },
        {
            "signature": "UINT MsiSourceListForceResolutionA( [in] LPCSTR szProduct, [in] LPCSTR szUserName, [in] DWORD dwReserved );",
            "name": "MsiSourceListForceResolutionA"
        },
        {
            "signature": "UINT MsiSourceListForceResolutionExA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions );",
            "name": "MsiSourceListForceResolutionExA"
        },
        {
            "signature": "UINT MsiSourceListForceResolutionExW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions );",
            "name": "MsiSourceListForceResolutionExW"
        },
        {
            "signature": "UINT MsiSourceListForceResolutionW( [in] LPCWSTR szProduct, [in] LPCWSTR szUserName, [in] DWORD dwReserved );",
            "name": "MsiSourceListForceResolutionW"
        },
        {
            "signature": "UINT MsiSourceListGetInfoA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCSTR szProperty, [out, optional] LPSTR szValue, [in, out, optional] LPDWORD pcchValue );",
            "name": "MsiSourceListGetInfoA"
        },
        {
            "signature": "UINT MsiSourceListGetInfoW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCWSTR szProperty, [out, optional] LPWSTR szValue, [in, out, optional] LPDWORD pcchValue );",
            "name": "MsiSourceListGetInfoW"
        },
        {
            "signature": "UINT MsiSourceListSetInfoA( [in] LPCSTR szProductCodeOrPatchCode, [in, optional] LPCSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCSTR szProperty, [in] LPCSTR szValue );",
            "name": "MsiSourceListSetInfoA"
        },
        {
            "signature": "UINT MsiSourceListSetInfoW( [in] LPCWSTR szProductCodeOrPatchCode, [in, optional] LPCWSTR szUserSid, [in] MSIINSTALLCONTEXT dwContext, [in] DWORD dwOptions, [in] LPCWSTR szProperty, [in] LPCWSTR szValue );",
            "name": "MsiSourceListSetInfoW"
        },
        {
            "signature": "INSTALLSTATE MsiUseFeatureA( [in] LPCSTR szProduct, [in] LPCSTR szFeature );",
            "name": "MsiUseFeatureA"
        },
        {
            "signature": "INSTALLSTATE MsiUseFeatureExA( [in] LPCSTR szProduct, [in] LPCSTR szFeature, [in] DWORD dwInstallMode, [in] DWORD dwReserved );",
            "name": "MsiUseFeatureExA"
        },
        {
            "signature": "INSTALLSTATE MsiUseFeatureExW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature, [in] DWORD dwInstallMode, [in] DWORD dwReserved );",
            "name": "MsiUseFeatureExW"
        },
        {
            "signature": "INSTALLSTATE MsiUseFeatureW( [in] LPCWSTR szProduct, [in] LPCWSTR szFeature );",
            "name": "MsiUseFeatureW"
        },
        {
            "signature": "UINT MsiVerifyPackageA( [in] LPCSTR szPackagePath );",
            "name": "MsiVerifyPackageA"
        },
        {
            "signature": "UINT MsiVerifyPackageW( [in] LPCWSTR szPackagePath );",
            "name": "MsiVerifyPackageW"
        }
    ],
    "Msime.h": [
        {
            "signature": "HRESULT CreateIFECommonInstance( [out] VOID **ppvObj );",
            "name": "CreateIFECommonInstance"
        },
        {
            "signature": "HRESULT CreateIFEDictionaryInstance( [out] VOID **ppvObj );",
            "name": "CreateIFEDictionaryInstance"
        },
        {
            "signature": "HRESULT CreateIFELanguageInstance( [in] REFCLSID clsid, [out] VOID **ppvObj );",
            "name": "CreateIFELanguageInstance"
        }
    ],
    "Msimeapi.h": [],
    "Msinkaut.h": [],
    "Msinkaut15.h": [],
    "Msiquery.h": [
        {
            "signature": "MSIHANDLE MsiCreateRecord( [in] UINT cParams );",
            "name": "MsiCreateRecord"
        },
        {
            "signature": "UINT MsiCreateTransformSummaryInfoA( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseReference, [in] LPCSTR szTransformFile, [in] int iErrorConditions, [in] int iValidation );",
            "name": "MsiCreateTransformSummaryInfoA"
        },
        {
            "signature": "UINT MsiCreateTransformSummaryInfoW( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseReference, [in] LPCWSTR szTransformFile, [in] int iErrorConditions, [in] int iValidation );",
            "name": "MsiCreateTransformSummaryInfoW"
        },
        {
            "signature": "UINT MsiDatabaseApplyTransformA( [in] MSIHANDLE hDatabase, [in] LPCSTR szTransformFile, [in] int iErrorConditions );",
            "name": "MsiDatabaseApplyTransformA"
        },
        {
            "signature": "UINT MsiDatabaseApplyTransformW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szTransformFile, [in] int iErrorConditions );",
            "name": "MsiDatabaseApplyTransformW"
        },
        {
            "signature": "UINT MsiDatabaseCommit( [in] MSIHANDLE hDatabase );",
            "name": "MsiDatabaseCommit"
        },
        {
            "signature": "UINT MsiDatabaseExportA( [in] MSIHANDLE hDatabase, [in] LPCSTR szTableName, [in] LPCSTR szFolderPath, [in] LPCSTR szFileName );",
            "name": "MsiDatabaseExportA"
        },
        {
            "signature": "UINT MsiDatabaseExportW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szTableName, [in] LPCWSTR szFolderPath, [in] LPCWSTR szFileName );",
            "name": "MsiDatabaseExportW"
        },
        {
            "signature": "UINT MsiDatabaseGenerateTransformA( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseReference, [in] LPCSTR szTransformFile, [in] int iReserved1, [in] int iReserved2 );",
            "name": "MsiDatabaseGenerateTransformA"
        },
        {
            "signature": "UINT MsiDatabaseGenerateTransformW( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseReference, [in] LPCWSTR szTransformFile, [in] int iReserved1, [in] int iReserved2 );",
            "name": "MsiDatabaseGenerateTransformW"
        },
        {
            "signature": "UINT MsiDatabaseGetPrimaryKeysA( [in] MSIHANDLE hDatabase, [in] LPCSTR szTableName, [out] MSIHANDLE *phRecord );",
            "name": "MsiDatabaseGetPrimaryKeysA"
        },
        {
            "signature": "UINT MsiDatabaseGetPrimaryKeysW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szTableName, [out] MSIHANDLE *phRecord );",
            "name": "MsiDatabaseGetPrimaryKeysW"
        },
        {
            "signature": "UINT MsiDatabaseImportA( [in] MSIHANDLE hDatabase, [in] LPCSTR szFolderPath, [in] LPCSTR szFileName );",
            "name": "MsiDatabaseImportA"
        },
        {
            "signature": "UINT MsiDatabaseImportW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szFolderPath, [in] LPCWSTR szFileName );",
            "name": "MsiDatabaseImportW"
        },
        {
            "signature": "MSICONDITION MsiDatabaseIsTablePersistentA( [in] MSIHANDLE hDatabase, [in] LPCSTR szTableName );",
            "name": "MsiDatabaseIsTablePersistentA"
        },
        {
            "signature": "MSICONDITION MsiDatabaseIsTablePersistentW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szTableName );",
            "name": "MsiDatabaseIsTablePersistentW"
        },
        {
            "signature": "UINT MsiDatabaseMergeA( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseMerge, [in] LPCSTR szTableName );",
            "name": "MsiDatabaseMergeA"
        },
        {
            "signature": "UINT MsiDatabaseMergeW( [in] MSIHANDLE hDatabase, [in] MSIHANDLE hDatabaseMerge, [in] LPCWSTR szTableName );",
            "name": "MsiDatabaseMergeW"
        },
        {
            "signature": "UINT MsiDatabaseOpenViewA( [in] MSIHANDLE hDatabase, [in] LPCSTR szQuery, [out] MSIHANDLE *phView );",
            "name": "MsiDatabaseOpenViewA"
        },
        {
            "signature": "UINT MsiDatabaseOpenViewW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szQuery, [out] MSIHANDLE *phView );",
            "name": "MsiDatabaseOpenViewW"
        },
        {
            "signature": "UINT MsiDoActionA( [in] MSIHANDLE hInstall, [in] LPCSTR szAction );",
            "name": "MsiDoActionA"
        },
        {
            "signature": "UINT MsiDoActionW( [in] MSIHANDLE hInstall, [in] LPCWSTR szAction );",
            "name": "MsiDoActionW"
        },
        {
            "signature": "UINT MsiEnableUIPreview( [in] MSIHANDLE hDatabase, [out] MSIHANDLE *phPreview );",
            "name": "MsiEnableUIPreview"
        },
        {
            "signature": "UINT MsiEnumComponentCostsA( [in] MSIHANDLE hInstall, [in] LPCSTR szComponent, [in] DWORD dwIndex, [in] INSTALLSTATE iState, [out] LPSTR szDriveBuf, [in, out] LPDWORD pcchDriveBuf, [out] LPINT piCost, [out] LPINT piTempCost );",
            "name": "MsiEnumComponentCostsA"
        },
        {
            "signature": "UINT MsiEnumComponentCostsW( [in] MSIHANDLE hInstall, [in] LPCWSTR szComponent, [in] DWORD dwIndex, [in] INSTALLSTATE iState, [out] LPWSTR szDriveBuf, [in, out] LPDWORD pcchDriveBuf, [out] LPINT piCost, [out] LPINT piTempCost );",
            "name": "MsiEnumComponentCostsW"
        },
        {
            "signature": "MSICONDITION MsiEvaluateConditionA( [in] MSIHANDLE hInstall, [in] LPCSTR szCondition );",
            "name": "MsiEvaluateConditionA"
        },
        {
            "signature": "MSICONDITION MsiEvaluateConditionW( [in] MSIHANDLE hInstall, [in] LPCWSTR szCondition );",
            "name": "MsiEvaluateConditionW"
        },
        {
            "signature": "UINT MsiFormatRecordA( [in] MSIHANDLE hInstall, [in] MSIHANDLE hRecord, [out] LPSTR szResultBuf, [in, out] LPDWORD pcchResultBuf );",
            "name": "MsiFormatRecordA"
        },
        {
            "signature": "UINT MsiFormatRecordW( [in] MSIHANDLE hInstall, [in] MSIHANDLE hRecord, [out] LPWSTR szResultBuf, [in, out] LPDWORD pcchResultBuf );",
            "name": "MsiFormatRecordW"
        },
        {
            "signature": "MSIHANDLE MsiGetActiveDatabase( [in] MSIHANDLE hInstall );",
            "name": "MsiGetActiveDatabase"
        },
        {
            "signature": "UINT MsiGetComponentStateA( [in] MSIHANDLE hInstall, [in] LPCSTR szComponent, [out] INSTALLSTATE *piInstalled, [out] INSTALLSTATE *piAction );",
            "name": "MsiGetComponentStateA"
        },
        {
            "signature": "UINT MsiGetComponentStateW( [in] MSIHANDLE hInstall, [in] LPCWSTR szComponent, [out] INSTALLSTATE *piInstalled, [out] INSTALLSTATE *piAction );",
            "name": "MsiGetComponentStateW"
        },
        {
            "signature": "MSIDBSTATE MsiGetDatabaseState( [in] MSIHANDLE hDatabase );",
            "name": "MsiGetDatabaseState"
        },
        {
            "signature": "UINT MsiGetFeatureCostA( [in] MSIHANDLE hInstall, [in] LPCSTR szFeature, [in] MSICOSTTREE iCostTree, [in] INSTALLSTATE iState, [out] LPINT piCost );",
            "name": "MsiGetFeatureCostA"
        },
        {
            "signature": "UINT MsiGetFeatureCostW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFeature, [in] MSICOSTTREE iCostTree, [in] INSTALLSTATE iState, [out] LPINT piCost );",
            "name": "MsiGetFeatureCostW"
        },
        {
            "signature": "UINT MsiGetFeatureStateA( [in] MSIHANDLE hInstall, [in] LPCSTR szFeature, [out] INSTALLSTATE *piInstalled, [out] INSTALLSTATE *piAction );",
            "name": "MsiGetFeatureStateA"
        },
        {
            "signature": "UINT MsiGetFeatureStateW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFeature, [out] INSTALLSTATE *piInstalled, [out] INSTALLSTATE *piAction );",
            "name": "MsiGetFeatureStateW"
        },
        {
            "signature": "UINT MsiGetFeatureValidStatesA( [in] MSIHANDLE hInstall, [in] LPCSTR szFeature, [out] LPDWORD lpInstallStates );",
            "name": "MsiGetFeatureValidStatesA"
        },
        {
            "signature": "UINT MsiGetFeatureValidStatesW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFeature, [out] LPDWORD lpInstallStates );",
            "name": "MsiGetFeatureValidStatesW"
        },
        {
            "signature": "LANGID MsiGetLanguage( [in] MSIHANDLE hInstall );",
            "name": "MsiGetLanguage"
        },
        {
            "signature": "MSIHANDLE MsiGetLastErrorRecord();",
            "name": "MsiGetLastErrorRecord"
        },
        {
            "signature": "BOOL MsiGetMode( [in] MSIHANDLE hInstall, [in] MSIRUNMODE eRunMode );",
            "name": "MsiGetMode"
        },
        {
            "signature": "UINT MsiGetPropertyA( [in] MSIHANDLE hInstall, [in] LPCSTR szName, [out] LPSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetPropertyA"
        },
        {
            "signature": "UINT MsiGetPropertyW( [in] MSIHANDLE hInstall, [in] LPCWSTR szName, [out] LPWSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiGetPropertyW"
        },
        {
            "signature": "UINT MsiGetSourcePathA( [in] MSIHANDLE hInstall, [in] LPCSTR szFolder, [out] LPSTR szPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiGetSourcePathA"
        },
        {
            "signature": "UINT MsiGetSourcePathW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFolder, [out] LPWSTR szPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiGetSourcePathW"
        },
        {
            "signature": "UINT MsiGetSummaryInformationA( [in] MSIHANDLE hDatabase, [in] LPCSTR szDatabasePath, [in] UINT uiUpdateCount, [out] MSIHANDLE *phSummaryInfo );",
            "name": "MsiGetSummaryInformationA"
        },
        {
            "signature": "UINT MsiGetSummaryInformationW( [in] MSIHANDLE hDatabase, [in] LPCWSTR szDatabasePath, [in] UINT uiUpdateCount, [out] MSIHANDLE *phSummaryInfo );",
            "name": "MsiGetSummaryInformationW"
        },
        {
            "signature": "UINT MsiGetTargetPathA( [in] MSIHANDLE hInstall, [in] LPCSTR szFolder, [out] LPSTR szPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiGetTargetPathA"
        },
        {
            "signature": "UINT MsiGetTargetPathW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFolder, [out] LPWSTR szPathBuf, [in, out] LPDWORD pcchPathBuf );",
            "name": "MsiGetTargetPathW"
        },
        {
            "signature": "UINT MsiOpenDatabaseA( [in] LPCSTR szDatabasePath, [in] LPCSTR szPersist, [out] MSIHANDLE *phDatabase );",
            "name": "MsiOpenDatabaseA"
        },
        {
            "signature": "UINT MsiOpenDatabaseW( [in] LPCWSTR szDatabasePath, [in] LPCWSTR szPersist, [out] MSIHANDLE *phDatabase );",
            "name": "MsiOpenDatabaseW"
        },
        {
            "signature": "UINT MsiPreviewBillboardA( [in] MSIHANDLE hPreview, [in] LPCSTR szControlName, [in] LPCSTR szBillboard );",
            "name": "MsiPreviewBillboardA"
        },
        {
            "signature": "UINT MsiPreviewBillboardW( [in] MSIHANDLE hPreview, [in] LPCWSTR szControlName, [in] LPCWSTR szBillboard );",
            "name": "MsiPreviewBillboardW"
        },
        {
            "signature": "UINT MsiPreviewDialogA( [in] MSIHANDLE hPreview, [in] LPCSTR szDialogName );",
            "name": "MsiPreviewDialogA"
        },
        {
            "signature": "UINT MsiPreviewDialogW( [in] MSIHANDLE hPreview, [in] LPCWSTR szDialogName );",
            "name": "MsiPreviewDialogW"
        },
        {
            "signature": "int MsiProcessMessage( [in] MSIHANDLE hInstall, [in] INSTALLMESSAGE eMessageType, [in] MSIHANDLE hRecord );",
            "name": "MsiProcessMessage"
        },
        {
            "signature": "UINT MsiRecordClearData( [in] MSIHANDLE hRecord );",
            "name": "MsiRecordClearData"
        },
        {
            "signature": "UINT MsiRecordDataSize( [in] MSIHANDLE hRecord, [in] UINT iField );",
            "name": "MsiRecordDataSize"
        },
        {
            "signature": "UINT MsiRecordGetFieldCount( [in] MSIHANDLE hRecord );",
            "name": "MsiRecordGetFieldCount"
        },
        {
            "signature": "int MsiRecordGetInteger( [in] MSIHANDLE hRecord, [in] UINT iField );",
            "name": "MsiRecordGetInteger"
        },
        {
            "signature": "UINT MsiRecordGetStringA( [in] MSIHANDLE hRecord, [in] UINT iField, [out] LPSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiRecordGetStringA"
        },
        {
            "signature": "UINT MsiRecordGetStringW( [in] MSIHANDLE hRecord, [in] UINT iField, [out] LPWSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiRecordGetStringW"
        },
        {
            "signature": "BOOL MsiRecordIsNull( [in] MSIHANDLE hRecord, [in] UINT iField );",
            "name": "MsiRecordIsNull"
        },
        {
            "signature": "UINT MsiRecordReadStream( [in] MSIHANDLE hRecord, [in] UINT iField, [out] char *szDataBuf, [in, out] LPDWORD pcbDataBuf );",
            "name": "MsiRecordReadStream"
        },
        {
            "signature": "UINT MsiRecordSetInteger( [in] MSIHANDLE hRecord, [in] UINT iField, [in] int iValue );",
            "name": "MsiRecordSetInteger"
        },
        {
            "signature": "UINT MsiRecordSetStreamA( [in] MSIHANDLE hRecord, [in] UINT iField, [in] LPCSTR szFilePath );",
            "name": "MsiRecordSetStreamA"
        },
        {
            "signature": "UINT MsiRecordSetStreamW( [in] MSIHANDLE hRecord, [in] UINT iField, [in] LPCWSTR szFilePath );",
            "name": "MsiRecordSetStreamW"
        },
        {
            "signature": "UINT MsiRecordSetStringA( [in] MSIHANDLE hRecord, [in] UINT iField, [in] LPCSTR szValue );",
            "name": "MsiRecordSetStringA"
        },
        {
            "signature": "UINT MsiRecordSetStringW( [in] MSIHANDLE hRecord, [in] UINT iField, [in] LPCWSTR szValue );",
            "name": "MsiRecordSetStringW"
        },
        {
            "signature": "UINT MsiSequenceA( [in] MSIHANDLE hInstall, [in] LPCSTR szTable, [in] INT iSequenceMode );",
            "name": "MsiSequenceA"
        },
        {
            "signature": "UINT MsiSequenceW( [in] MSIHANDLE hInstall, [in] LPCWSTR szTable, [in] INT iSequenceMode );",
            "name": "MsiSequenceW"
        },
        {
            "signature": "UINT MsiSetComponentStateA( [in] MSIHANDLE hInstall, [in] LPCSTR szComponent, [in] INSTALLSTATE iState );",
            "name": "MsiSetComponentStateA"
        },
        {
            "signature": "UINT MsiSetComponentStateW( [in] MSIHANDLE hInstall, [in] LPCWSTR szComponent, [in] INSTALLSTATE iState );",
            "name": "MsiSetComponentStateW"
        },
        {
            "signature": "UINT MsiSetFeatureAttributesA( [in] MSIHANDLE hInstall, [in] LPCSTR szFeature, [in] DWORD dwAttributes );",
            "name": "MsiSetFeatureAttributesA"
        },
        {
            "signature": "UINT MsiSetFeatureAttributesW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFeature, [in] DWORD dwAttributes );",
            "name": "MsiSetFeatureAttributesW"
        },
        {
            "signature": "UINT MsiSetFeatureStateA( [in] MSIHANDLE hInstall, [in] LPCSTR szFeature, [in] INSTALLSTATE iState );",
            "name": "MsiSetFeatureStateA"
        },
        {
            "signature": "UINT MsiSetFeatureStateW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFeature, [in] INSTALLSTATE iState );",
            "name": "MsiSetFeatureStateW"
        },
        {
            "signature": "UINT MsiSetInstallLevel( [in] MSIHANDLE hInstall, [in] int iInstallLevel );",
            "name": "MsiSetInstallLevel"
        },
        {
            "signature": "UINT MsiSetMode( [in] MSIHANDLE hInstall, [in] MSIRUNMODE eRunMode, [in] BOOL fState );",
            "name": "MsiSetMode"
        },
        {
            "signature": "UINT MsiSetPropertyA( [in] MSIHANDLE hInstall, [in] LPCSTR szName, [in] LPCSTR szValue );",
            "name": "MsiSetPropertyA"
        },
        {
            "signature": "UINT MsiSetPropertyW( [in] MSIHANDLE hInstall, [in] LPCWSTR szName, [in] LPCWSTR szValue );",
            "name": "MsiSetPropertyW"
        },
        {
            "signature": "UINT MsiSetTargetPathA( [in] MSIHANDLE hInstall, [in] LPCSTR szFolder, [in] LPCSTR szFolderPath );",
            "name": "MsiSetTargetPathA"
        },
        {
            "signature": "UINT MsiSetTargetPathW( [in] MSIHANDLE hInstall, [in] LPCWSTR szFolder, [in] LPCWSTR szFolderPath );",
            "name": "MsiSetTargetPathW"
        },
        {
            "signature": "UINT MsiSummaryInfoGetPropertyA( [in] MSIHANDLE hSummaryInfo, [in] UINT uiProperty, [out] PUINT puiDataType, [out] LPINT piValue, [out] FILETIME *pftValue, [out] LPSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiSummaryInfoGetPropertyA"
        },
        {
            "signature": "UINT MsiSummaryInfoGetPropertyCount( [in] MSIHANDLE hSummaryInfo, [out] PUINT puiPropertyCount );",
            "name": "MsiSummaryInfoGetPropertyCount"
        },
        {
            "signature": "UINT MsiSummaryInfoGetPropertyW( [in] MSIHANDLE hSummaryInfo, [in] UINT uiProperty, [out] PUINT puiDataType, [out] LPINT piValue, [out] FILETIME *pftValue, [out] LPWSTR szValueBuf, [in, out] LPDWORD pcchValueBuf );",
            "name": "MsiSummaryInfoGetPropertyW"
        },
        {
            "signature": "UINT MsiSummaryInfoPersist( [in] MSIHANDLE hSummaryInfo );",
            "name": "MsiSummaryInfoPersist"
        },
        {
            "signature": "UINT MsiSummaryInfoSetPropertyA( [in] MSIHANDLE hSummaryInfo, [in] UINT uiProperty, [in] UINT uiDataType, [in] INT iValue, [in] FILETIME *pftValue, [in] LPCSTR szValue );",
            "name": "MsiSummaryInfoSetPropertyA"
        },
        {
            "signature": "UINT MsiSummaryInfoSetPropertyW( [in] MSIHANDLE hSummaryInfo, [in] UINT uiProperty, [in] UINT uiDataType, [in] INT iValue, [in] FILETIME *pftValue, [in] LPCWSTR szValue );",
            "name": "MsiSummaryInfoSetPropertyW"
        },
        {
            "signature": "UINT MsiVerifyDiskSpace( [in] MSIHANDLE hInstall );",
            "name": "MsiVerifyDiskSpace"
        },
        {
            "signature": "UINT MsiViewClose( [in] MSIHANDLE hView );",
            "name": "MsiViewClose"
        },
        {
            "signature": "UINT MsiViewExecute( [in] MSIHANDLE hView, [in] MSIHANDLE hRecord );",
            "name": "MsiViewExecute"
        },
        {
            "signature": "UINT MsiViewFetch( [in] MSIHANDLE hView, [out] MSIHANDLE *phRecord );",
            "name": "MsiViewFetch"
        },
        {
            "signature": "UINT MsiViewGetColumnInfo( [in] MSIHANDLE hView, [in] MSICOLINFO eColumnInfo, [out] MSIHANDLE *phRecord );",
            "name": "MsiViewGetColumnInfo"
        },
        {
            "signature": "MSIDBERROR MsiViewGetErrorA( [in] MSIHANDLE hView, [out] LPSTR szColumnNameBuffer, [in, out] LPDWORD pcchBuf );",
            "name": "MsiViewGetErrorA"
        },
        {
            "signature": "MSIDBERROR MsiViewGetErrorW( [in] MSIHANDLE hView, [out] LPWSTR szColumnNameBuffer, [in, out] LPDWORD pcchBuf );",
            "name": "MsiViewGetErrorW"
        },
        {
            "signature": "UINT MsiViewModify( [in] MSIHANDLE hView, [in] MSIMODIFY eModifyMode, [in] MSIHANDLE hRecord );",
            "name": "MsiViewModify"
        }
    ],
    "Msopc.h": [],
    "Msp.h": [],
    "Mspaddr.h": [
        {
            "signature": "HRESULT CreateMSPCallHelper( CMSPAddress *pCMSPAddress, MSP_HANDLE htCall, DWORD dwReserved, DWORD dwMediaType, IUnknown *pOuterUnknown, IUnknown **ppMSPCall, T **ppCMSPCall );",
            "name": "CreateMSPCallHelper"
        },
        {
            "signature": "HRESULT ShutdownMSPCallHelper( IUnknown *pUnknown, T **ppCMSPCall );",
            "name": "ShutdownMSPCallHelper"
        }
    ],
    "Mspcall.h": [],
    "Msports.h": [
        {
            "signature": "LONG ComDBClaimNextFreePort( [in] HCOMDB HComDB, [out] LPDWORD ComNumber );",
            "name": "ComDBClaimNextFreePort"
        },
        {
            "signature": "LONG ComDBClaimPort( [in] HCOMDB HComDB, [in] DWORD ComNumber, [in] BOOL ForceClaim, [out, optional] PBOOL Forced );",
            "name": "ComDBClaimPort"
        },
        {
            "signature": "LONG ComDBClose( [in] HCOMDB HComDB );",
            "name": "ComDBClose"
        },
        {
            "signature": "LONG ComDBGetCurrentPortUsage( [in] HCOMDB HComDB, [out, optional] PBYTE Buffer, [in] DWORD BufferSize, [in] ULONG ReportType, [out, optional] LPDWORD MaxPortsReported );",
            "name": "ComDBGetCurrentPortUsage"
        },
        {
            "signature": "LONG ComDBOpen( [out] PHCOMDB PHComDB );",
            "name": "ComDBOpen"
        },
        {
            "signature": "LONG ComDBReleasePort( [in] HCOMDB HComDB, [in] DWORD ComNumber );",
            "name": "ComDBReleasePort"
        },
        {
            "signature": "LONG ComDBResizeDatabase( [in] HCOMDB HComDB, [in] DWORD NewSize );",
            "name": "ComDBResizeDatabase"
        },
        {
            "signature": "LONG SerialDisplayAdvancedSettings( [in] HWND ParentHwnd, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SerialDisplayAdvancedSettings"
        }
    ],
    "Mspstrm.h": [],
    "Msrdc.h": [],
    "Mssip.h": [
        {
            "signature": "BOOL CryptSIPAddProvider( [in] SIP_ADD_NEWPROVIDER *psNewProv );",
            "name": "CryptSIPAddProvider"
        },
        {
            "signature": "BOOL CryptSIPCreateIndirectData( [in] SIP_SUBJECTINFO *pSubjectInfo, [in, out] DWORD *pcbIndirectData, [out] SIP_INDIRECT_DATA *pIndirectData );",
            "name": "CryptSIPCreateIndirectData"
        },
        {
            "signature": "BOOL CryptSIPGetCaps( [in] SIP_SUBJECTINFO *pSubjInfo, [in, out] SIP_CAP_SET *pCaps );",
            "name": "CryptSIPGetCaps"
        },
        {
            "signature": "BOOL CryptSIPGetSignedDataMsg( [in] SIP_SUBJECTINFO *pSubjectInfo, [out] DWORD *pdwEncodingType, [in] DWORD dwIndex, [in, out] DWORD *pcbSignedDataMsg, [out] BYTE *pbSignedDataMsg );",
            "name": "CryptSIPGetSignedDataMsg"
        },
        {
            "signature": "BOOL CryptSIPLoad( [in] const GUID *pgSubject, [in] DWORD dwFlags, [in, out] SIP_DISPATCH_INFO *pSipDispatch );",
            "name": "CryptSIPLoad"
        },
        {
            "signature": "BOOL CryptSIPPutSignedDataMsg( [in] SIP_SUBJECTINFO *pSubjectInfo, [in] DWORD dwEncodingType, [out] DWORD *pdwIndex, [in] DWORD cbSignedDataMsg, [in] BYTE *pbSignedDataMsg );",
            "name": "CryptSIPPutSignedDataMsg"
        },
        {
            "signature": "BOOL CryptSIPRemoveProvider( [in] GUID *pgProv );",
            "name": "CryptSIPRemoveProvider"
        },
        {
            "signature": "BOOL CryptSIPRemoveSignedDataMsg( [in] SIP_SUBJECTINFO *pSubjectInfo, [in] DWORD dwIndex );",
            "name": "CryptSIPRemoveSignedDataMsg"
        },
        {
            "signature": "BOOL CryptSIPRetrieveSubjectGuid( [in] LPCWSTR FileName, [in, optional] HANDLE hFileIn, [out] GUID *pgSubject );",
            "name": "CryptSIPRetrieveSubjectGuid"
        },
        {
            "signature": "BOOL CryptSIPRetrieveSubjectGuidForCatalogFile( [in] LPCWSTR FileName, [in, optional] HANDLE hFileIn, [out] GUID *pgSubject );",
            "name": "CryptSIPRetrieveSubjectGuidForCatalogFile"
        },
        {
            "signature": "BOOL CryptSIPVerifyIndirectData( [in] SIP_SUBJECTINFO *pSubjectInfo, [in] SIP_INDIRECT_DATA *pIndirectData );",
            "name": "CryptSIPVerifyIndirectData"
        },
        {
            "signature": "pCryptSIPGetCaps Pcryptsipgetcaps; BOOL Pcryptsipgetcaps( [in] SIP_SUBJECTINFO *pSubjInfo, [in, out] SIP_CAP_SET *pCaps ) {...}",
            "name": "pCryptSIPGetCaps callback"
        },
        {
            "signature": "pfnIsFileSupported Pfnisfilesupported; BOOL Pfnisfilesupported( [in] HANDLE hFile, [out] GUID *pgSubject ) {...}",
            "name": "pfnIsFileSupported callback"
        },
        {
            "signature": "pfnIsFileSupportedName Pfnisfilesupportedname; BOOL Pfnisfilesupportedname( [in] WCHAR *pwszFileName, [out] GUID *pgSubject ) {...}",
            "name": "pfnIsFileSupportedName callback"
        }
    ],
    "Mstask.h": [],
    "Mstcpip.h": [],
    "Mswmdm.h": [],
    "Mswsock.h": [
        {
            "signature": "BOOL AcceptEx( [in] SOCKET sListenSocket, [in] SOCKET sAcceptSocket, [in] PVOID lpOutputBuffer, [in] DWORD dwReceiveDataLength, [in] DWORD dwLocalAddressLength, [in] DWORD dwRemoteAddressLength, [out] LPDWORD lpdwBytesReceived, [in] LPOVERLAPPED lpOverlapped );",
            "name": "AcceptEx"
        },
        {
            "signature": "void GetAcceptExSockaddrs( [in] PVOID lpOutputBuffer, [in] DWORD dwReceiveDataLength, [in] DWORD dwLocalAddressLength, [in] DWORD dwRemoteAddressLength, [out] sockaddr **LocalSockaddr, [out] LPINT LocalSockaddrLength, [out] sockaddr **RemoteSockaddr, [out] LPINT RemoteSockaddrLength );",
            "name": "GetAcceptExSockaddrs"
        },
        {
            "signature": "LPFN_CONNECTEX LpfnConnectex; BOOL LpfnConnectex( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [in, optional] PVOID lpSendBuffer, [in] DWORD dwSendDataLength, [out] LPDWORD lpdwBytesSent, [in] LPOVERLAPPED lpOverlapped ) {...}",
            "name": "LPFN_CONNECTEX callback"
        },
        {
            "signature": "LPFN_DISCONNECTEX LpfnDisconnectex; BOOL LpfnDisconnectex( SOCKET s, LPOVERLAPPED lpOverlapped, DWORD dwFlags, DWORD dwReserved ) {...}",
            "name": "LPFN_DISCONNECTEX callback"
        },
        {
            "signature": "LPFN_RIOCLOSECOMPLETIONQUEUE LpfnRioclosecompletionqueue; void LpfnRioclosecompletionqueue( RIO_CQ CQ ) {...}",
            "name": "LPFN_RIOCLOSECOMPLETIONQUEUE callback"
        },
        {
            "signature": "LPFN_RIOCREATECOMPLETIONQUEUE LpfnRiocreatecompletionqueue; RIO_CQ LpfnRiocreatecompletionqueue( DWORD QueueSize, PRIO_NOTIFICATION_COMPLETION NotificationCompletion ) {...}",
            "name": "LPFN_RIOCREATECOMPLETIONQUEUE callback"
        },
        {
            "signature": "LPFN_RIOCREATEREQUESTQUEUE LpfnRiocreaterequestqueue; RIO_RQ LpfnRiocreaterequestqueue( SOCKET Socket, ULONG MaxOutstandingReceive, ULONG MaxReceiveDataBuffers, ULONG MaxOutstandingSend, ULONG MaxSendDataBuffers, RIO_CQ ReceiveCQ, RIO_CQ SendCQ, PVOID SocketContext ) {...}",
            "name": "LPFN_RIOCREATEREQUESTQUEUE callback"
        },
        {
            "signature": "LPFN_RIODEQUEUECOMPLETION LpfnRiodequeuecompletion; ULONG LpfnRiodequeuecompletion( RIO_CQ CQ, PRIORESULT Array, ULONG ArraySize ) {...}",
            "name": "LPFN_RIODEQUEUECOMPLETION callback"
        },
        {
            "signature": "LPFN_RIODEREGISTERBUFFER LpfnRioderegisterbuffer; void LpfnRioderegisterbuffer( RIO_BUFFERID BufferId ) {...}",
            "name": "LPFN_RIODEREGISTERBUFFER callback"
        },
        {
            "signature": "LPFN_RIONOTIFY LpfnRionotify; INT LpfnRionotify( RIO_CQ CQ ) {...}",
            "name": "LPFN_RIONOTIFY callback"
        },
        {
            "signature": "LPFN_RIORECEIVE LpfnRioreceive; BOOL LpfnRioreceive( RIO_RQ SocketQueue, PRIO_BUF pData, ULONG DataBufferCount, DWORD Flags, PVOID RequestContext ) {...}",
            "name": "LPFN_RIORECEIVE callback"
        },
        {
            "signature": "LPFN_RIORECEIVEEX LpfnRioreceiveex; int LpfnRioreceiveex( RIO_RQ SocketQueue, PRIO_BUF pData, ULONG DataBufferCount, PRIO_BUF pLocalAddress, PRIO_BUF pRemoteAddress, PRIO_BUF pControlContext, PRIO_BUF pFlags, DWORD Flags, PVOID RequestContext ) {...}",
            "name": "LPFN_RIORECEIVEEX callback"
        },
        {
            "signature": "LPFN_RIOREGISTERBUFFER LpfnRioregisterbuffer; RIO_BUFFERID LpfnRioregisterbuffer( PCHAR DataBuffer, DWORD DataLength ) {...}",
            "name": "LPFN_RIOREGISTERBUFFER callback"
        },
        {
            "signature": "LPFN_RIORESIZECOMPLETIONQUEUE LpfnRioresizecompletionqueue; BOOL LpfnRioresizecompletionqueue( RIO_CQ CQ, DWORD QueueSize ) {...}",
            "name": "LPFN_RIORESIZECOMPLETIONQUEUE callback"
        },
        {
            "signature": "LPFN_RIORESIZEREQUESTQUEUE LpfnRioresizerequestqueue; BOOL LpfnRioresizerequestqueue( RIO_RQ RQ, DWORD MaxOutstandingReceive, DWORD MaxOutstandingSend ) {...}",
            "name": "LPFN_RIORESIZEREQUESTQUEUE callback"
        },
        {
            "signature": "LPFN_RIOSEND LpfnRiosend; BOOL LpfnRiosend( RIO_RQ SocketQueue, PRIO_BUF pData, ULONG DataBufferCount, DWORD Flags, PVOID RequestContext ) {...}",
            "name": "LPFN_RIOSEND callback"
        },
        {
            "signature": "LPFN_RIOSENDEX LpfnRiosendex; BOOL LpfnRiosendex( RIO_RQ SocketQueue, PRIO_BUF pData, ULONG DataBufferCount, PRIO_BUF pLocalAddress, PRIO_BUF pRemoteAddress, PRIO_BUF pControlContext, PRIO_BUF pFlags, DWORD Flags, PVOID RequestContext ) {...}",
            "name": "LPFN_RIOSENDEX callback"
        },
        {
            "signature": "LPFN_TRANSMITPACKETS LpfnTransmitpackets; BOOL LpfnTransmitpackets( SOCKET hSocket, LPTRANSMIT_PACKETS_ELEMENT lpPacketArray, DWORD nElementCount, DWORD nSendSize, LPOVERLAPPED lpOverlapped, DWORD dwFlags ) {...}",
            "name": "LPFN_TRANSMITPACKETS callback"
        },
        {
            "signature": "LPFN_WSARECVMSG LpfnWsarecvmsg; INT LpfnWsarecvmsg( SOCKET s, LPWSAMSG lpMsg, LPDWORD lpdwNumberOfBytesRecvd, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine ) {...}",
            "name": "LPFN_WSARECVMSG callback"
        },
        {
            "signature": "BOOL TransmitFile( SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved );",
            "name": "TransmitFile"
        },
        {
            "signature": "int WSARecvEx( [in] SOCKET s, [out] char *buf, [in] int len, [in, out] int *flags );",
            "name": "WSARecvEx"
        }
    ],
    "Mswsockdef.h": [],
    "Msxml.h": [],
    "Msxml6.h": [],
    "Mtpext.h": [],
    "Mtxdm.h": [
        {
            "signature": "HRESULT GetDispenserManager( [out] IDispenserManager **unnamedParam1 );",
            "name": "GetDispenserManager"
        }
    ],
    "Muiload.h": [
        {
            "signature": "BOOL FreeMUILibrary( [in] HMODULE hResModule );",
            "name": "FreeMUILibrary"
        },
        {
            "signature": "BOOL GetUILanguageFallbackList( [out, optional] PWSTR pFallbackList, [in] ULONG cchFallbackList, [out, optional] PULONG pcchFallbackOut );",
            "name": "GetUILanguageFallbackList"
        },
        {
            "signature": "HINSTANCE LoadMUILibraryA( [in] PCSTR pszFullModuleName, [in] DWORD dwLangConvention, [in] LANGID LangID );",
            "name": "LoadMUILibraryA"
        },
        {
            "signature": "HINSTANCE LoadMUILibraryW( [in] PCWSTR pszFullModuleName, [in] DWORD dwLangConvention, [in] LANGID LangID );",
            "name": "LoadMUILibraryW"
        }
    ],
    "Namedpipeapi.h": [
        {
            "signature": "BOOL CallNamedPipeW( [in] LPCWSTR lpNamedPipeName, [in] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out] LPDWORD lpBytesRead, [in] DWORD nTimeOut );",
            "name": "CallNamedPipeW"
        },
        {
            "signature": "BOOL ConnectNamedPipe( [in] HANDLE hNamedPipe, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "ConnectNamedPipe"
        },
        {
            "signature": "HANDLE CreateNamedPipeW( [in] LPCWSTR lpName, [in] DWORD dwOpenMode, [in] DWORD dwPipeMode, [in] DWORD nMaxInstances, [in] DWORD nOutBufferSize, [in] DWORD nInBufferSize, [in] DWORD nDefaultTimeOut, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateNamedPipeW"
        },
        {
            "signature": "BOOL CreatePipe( [out] PHANDLE hReadPipe, [out] PHANDLE hWritePipe, [in, optional] LPSECURITY_ATTRIBUTES lpPipeAttributes, [in] DWORD nSize );",
            "name": "CreatePipe"
        },
        {
            "signature": "BOOL DisconnectNamedPipe( [in] HANDLE hNamedPipe );",
            "name": "DisconnectNamedPipe"
        },
        {
            "signature": "BOOL GetNamedPipeClientComputerNameW( [in] HANDLE Pipe, [out] LPWSTR ClientComputerName, [in] ULONG ClientComputerNameLength );",
            "name": "GetNamedPipeClientComputerNameW"
        },
        {
            "signature": "BOOL GetNamedPipeHandleStateW( [in] HANDLE hNamedPipe, [out, optional] LPDWORD lpState, [out, optional] LPDWORD lpCurInstances, [out, optional] LPDWORD lpMaxCollectionCount, [out, optional] LPDWORD lpCollectDataTimeout, [out, optional] LPWSTR lpUserName, [in] DWORD nMaxUserNameSize );",
            "name": "GetNamedPipeHandleStateW"
        },
        {
            "signature": "BOOL GetNamedPipeInfo( [in] HANDLE hNamedPipe, [out, optional] LPDWORD lpFlags, [out, optional] LPDWORD lpOutBufferSize, [out, optional] LPDWORD lpInBufferSize, [out, optional] LPDWORD lpMaxInstances );",
            "name": "GetNamedPipeInfo"
        },
        {
            "signature": "BOOL ImpersonateNamedPipeClient( [in] HANDLE hNamedPipe );",
            "name": "ImpersonateNamedPipeClient"
        },
        {
            "signature": "BOOL PeekNamedPipe( [in] HANDLE hNamedPipe, [out, optional] LPVOID lpBuffer, [in] DWORD nBufferSize, [out, optional] LPDWORD lpBytesRead, [out, optional] LPDWORD lpTotalBytesAvail, [out, optional] LPDWORD lpBytesLeftThisMessage );",
            "name": "PeekNamedPipe"
        },
        {
            "signature": "BOOL SetNamedPipeHandleState( [in] HANDLE hNamedPipe, [in, optional] LPDWORD lpMode, [in, optional] LPDWORD lpMaxCollectionCount, [in, optional] LPDWORD lpCollectDataTimeout );",
            "name": "SetNamedPipeHandleState"
        },
        {
            "signature": "BOOL TransactNamedPipe( [in] HANDLE hNamedPipe, [in] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out] LPDWORD lpBytesRead, [in, out, optional] LPOVERLAPPED lpOverlapped );",
            "name": "TransactNamedPipe"
        },
        {
            "signature": "BOOL WaitNamedPipeW( [in] LPCWSTR lpNamedPipeName, [in] DWORD nTimeOut );",
            "name": "WaitNamedPipeW"
        }
    ],
    "Namespaceapi.h": [
        {
            "signature": "BOOL AddSIDToBoundaryDescriptor( [in, out] HANDLE *BoundaryDescriptor, [in] PSID RequiredSid );",
            "name": "AddSIDToBoundaryDescriptor"
        },
        {
            "signature": "BOOLEAN ClosePrivateNamespace( [in] HANDLE Handle, [in] ULONG Flags );",
            "name": "ClosePrivateNamespace"
        },
        {
            "signature": "HANDLE CreateBoundaryDescriptorW( [in] LPCWSTR Name, [in] ULONG Flags );",
            "name": "CreateBoundaryDescriptorW"
        },
        {
            "signature": "HANDLE CreatePrivateNamespaceW( [in, optional] LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, [in] LPVOID lpBoundaryDescriptor, [in] LPCWSTR lpAliasPrefix );",
            "name": "CreatePrivateNamespaceW"
        },
        {
            "signature": "void DeleteBoundaryDescriptor( [in] HANDLE BoundaryDescriptor );",
            "name": "DeleteBoundaryDescriptor"
        },
        {
            "signature": "HANDLE OpenPrivateNamespaceW( [in] LPVOID lpBoundaryDescriptor, [in] LPCWSTR lpAliasPrefix );",
            "name": "OpenPrivateNamespaceW"
        }
    ],
    "Naptypes.h": [],
    "Natupnp.h": [],
    "Nb30.h": [
        {
            "signature": "UCHAR Netbios( PNCB pncb );",
            "name": "Netbios"
        }
    ],
    "Ncrypt.h": [
        {
            "signature": "SECURITY_STATUS NCryptCreateClaim( [in] NCRYPT_KEY_HANDLE hSubjectKey, [in, optional] NCRYPT_KEY_HANDLE hAuthorityKey, [in] DWORD dwClaimType, [in, optional] NCryptBufferDesc *pParameterList, [out] PBYTE pbClaimBlob, [in] DWORD cbClaimBlob, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptCreateClaim"
        },
        {
            "signature": "SECURITY_STATUS NCryptCreatePersistedKey( [in] NCRYPT_PROV_HANDLE hProvider, [out] NCRYPT_KEY_HANDLE *phKey, [in] LPCWSTR pszAlgId, [in, optional] LPCWSTR pszKeyName, [in] DWORD dwLegacyKeySpec, [in] DWORD dwFlags );",
            "name": "NCryptCreatePersistedKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptDecrypt( [in] NCRYPT_KEY_HANDLE hKey, [in] PBYTE pbInput, [in] DWORD cbInput, [in, optional] VOID *pPaddingInfo, [out] PBYTE pbOutput, [in] DWORD cbOutput, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptDecrypt"
        },
        {
            "signature": "SECURITY_STATUS NCryptDeleteKey( [in] NCRYPT_KEY_HANDLE hKey, [in] DWORD dwFlags );",
            "name": "NCryptDeleteKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptDeriveKey( [in] NCRYPT_SECRET_HANDLE hSharedSecret, [in] LPCWSTR pwszKDF, [in, optional] NCryptBufferDesc *pParameterList, [out, optional] PBYTE pbDerivedKey, [in] DWORD cbDerivedKey, [out] DWORD *pcbResult, [in] ULONG dwFlags );",
            "name": "NCryptDeriveKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptEncrypt( [in] NCRYPT_KEY_HANDLE hKey, [in] PBYTE pbInput, [in] DWORD cbInput, [in, optional] VOID *pPaddingInfo, [out] PBYTE pbOutput, [in] DWORD cbOutput, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptEncrypt"
        },
        {
            "signature": "SECURITY_STATUS NCryptEnumAlgorithms( [in] NCRYPT_PROV_HANDLE hProvider, [in] DWORD dwAlgOperations, [out] DWORD *pdwAlgCount, [out] NCryptAlgorithmName **ppAlgList, [in] DWORD dwFlags );",
            "name": "NCryptEnumAlgorithms"
        },
        {
            "signature": "SECURITY_STATUS NCryptEnumKeys( [in] NCRYPT_PROV_HANDLE hProvider, [in, optional] LPCWSTR pszScope, [out] NCryptKeyName **ppKeyName, [in, out] PVOID *ppEnumState, [in] DWORD dwFlags );",
            "name": "NCryptEnumKeys"
        },
        {
            "signature": "SECURITY_STATUS NCryptEnumStorageProviders( [out] DWORD *pdwProviderCount, [out] NCryptProviderName **ppProviderList, [in] DWORD dwFlags );",
            "name": "NCryptEnumStorageProviders"
        },
        {
            "signature": "SECURITY_STATUS NCryptExportKey( [in] NCRYPT_KEY_HANDLE hKey, [in, optional] NCRYPT_KEY_HANDLE hExportKey, [in] LPCWSTR pszBlobType, [in, optional] NCryptBufferDesc *pParameterList, [out, optional] PBYTE pbOutput, [in] DWORD cbOutput, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptExportKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptFinalizeKey( [in] NCRYPT_KEY_HANDLE hKey, [in] DWORD dwFlags );",
            "name": "NCryptFinalizeKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptFreeBuffer( [in] PVOID pvInput );",
            "name": "NCryptFreeBuffer"
        },
        {
            "signature": "SECURITY_STATUS NCryptFreeObject( [in] NCRYPT_HANDLE hObject );",
            "name": "NCryptFreeObject"
        },
        {
            "signature": "SECURITY_STATUS NCryptGetProperty( [in] NCRYPT_HANDLE hObject, [in] LPCWSTR pszProperty, [out] PBYTE pbOutput, [in] DWORD cbOutput, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptGetProperty"
        },
        {
            "signature": "SECURITY_STATUS NCryptImportKey( [in] NCRYPT_PROV_HANDLE hProvider, [in, optional] NCRYPT_KEY_HANDLE hImportKey, [in] LPCWSTR pszBlobType, [in, optional] NCryptBufferDesc *pParameterList, [out] NCRYPT_KEY_HANDLE *phKey, [in] PBYTE pbData, [in] DWORD cbData, [in] DWORD dwFlags );",
            "name": "NCryptImportKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptIsAlgSupported( [in] NCRYPT_PROV_HANDLE hProvider, [in] LPCWSTR pszAlgId, [in] DWORD dwFlags );",
            "name": "NCryptIsAlgSupported"
        },
        {
            "signature": "BOOL NCryptIsKeyHandle( [in] NCRYPT_KEY_HANDLE hKey );",
            "name": "NCryptIsKeyHandle"
        },
        {
            "signature": "SECURITY_STATUS NCryptKeyDerivation( [in] NCRYPT_KEY_HANDLE hKey, [in] NCryptBufferDesc *pParameterList, [out] PUCHAR pbDerivedKey, [in] DWORD cbDerivedKey, [out] DWORD *pcbResult, [in] ULONG dwFlags );",
            "name": "NCryptKeyDerivation"
        },
        {
            "signature": "SECURITY_STATUS NCryptNotifyChangeKey( [in] NCRYPT_PROV_HANDLE hProvider, [in, out] HANDLE *phEvent, [in] DWORD dwFlags );",
            "name": "NCryptNotifyChangeKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptOpenKey( [in] NCRYPT_PROV_HANDLE hProvider, [out] NCRYPT_KEY_HANDLE *phKey, [in] LPCWSTR pszKeyName, [in] DWORD dwLegacyKeySpec, [in] DWORD dwFlags );",
            "name": "NCryptOpenKey"
        },
        {
            "signature": "SECURITY_STATUS NCryptOpenStorageProvider( [out] NCRYPT_PROV_HANDLE *phProvider, [in, optional] LPCWSTR pszProviderName, [in] DWORD dwFlags );",
            "name": "NCryptOpenStorageProvider"
        },
        {
            "signature": "SECURITY_STATUS NCryptSecretAgreement( [in] NCRYPT_KEY_HANDLE hPrivKey, [in] NCRYPT_KEY_HANDLE hPubKey, [out] NCRYPT_SECRET_HANDLE *phAgreedSecret, [in] DWORD dwFlags );",
            "name": "NCryptSecretAgreement"
        },
        {
            "signature": "SECURITY_STATUS NCryptSetProperty( [in] NCRYPT_HANDLE hObject, [in] LPCWSTR pszProperty, [in] PBYTE pbInput, [in] DWORD cbInput, [in] DWORD dwFlags );",
            "name": "NCryptSetProperty"
        },
        {
            "signature": "SECURITY_STATUS NCryptSignHash( [in] NCRYPT_KEY_HANDLE hKey, [in, optional] VOID *pPaddingInfo, [in] PBYTE pbHashValue, [in] DWORD cbHashValue, [out] PBYTE pbSignature, [in] DWORD cbSignature, [out] DWORD *pcbResult, [in] DWORD dwFlags );",
            "name": "NCryptSignHash"
        },
        {
            "signature": "SECURITY_STATUS NCryptTranslateHandle( [out, optional] NCRYPT_PROV_HANDLE *phProvider, [out] NCRYPT_KEY_HANDLE *phKey, [in] HCRYPTPROV hLegacyProv, [in, optional] HCRYPTKEY hLegacyKey, [in, optional] DWORD dwLegacyKeySpec, [in] DWORD dwFlags );",
            "name": "NCryptTranslateHandle"
        },
        {
            "signature": "SECURITY_STATUS NCryptVerifyClaim( [in] NCRYPT_KEY_HANDLE hSubjectKey, [in, optional] NCRYPT_KEY_HANDLE hAuthorityKey, [in] DWORD dwClaimType, [in, optional] NCryptBufferDesc *pParameterList, [in] PBYTE pbClaimBlob, [in] DWORD cbClaimBlob, [out] NCryptBufferDesc *pOutput, [in] DWORD dwFlags );",
            "name": "NCryptVerifyClaim"
        },
        {
            "signature": "SECURITY_STATUS NCryptVerifySignature( [in] NCRYPT_KEY_HANDLE hKey, [in, optional] VOID *pPaddingInfo, [in] PBYTE pbHashValue, [in] DWORD cbHashValue, [in] PBYTE pbSignature, [in] DWORD cbSignature, [in] DWORD dwFlags );",
            "name": "NCryptVerifySignature"
        }
    ],
    "Ncryptprotect.h": [
        {
            "signature": "SECURITY_STATUS NCryptCloseProtectionDescriptor( [in] NCRYPT_DESCRIPTOR_HANDLE hDescriptor );",
            "name": "NCryptCloseProtectionDescriptor"
        },
        {
            "signature": "SECURITY_STATUS NCryptCreateProtectionDescriptor( [in] LPCWSTR pwszDescriptorString, [in] DWORD dwFlags, [out] NCRYPT_DESCRIPTOR_HANDLE *phDescriptor );",
            "name": "NCryptCreateProtectionDescriptor"
        },
        {
            "signature": "SECURITY_STATUS NCryptGetProtectionDescriptorInfo( [in] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, [in, optional] const NCRYPT_ALLOC_PARA *pMemPara, DWORD dwInfoType, [out] void **ppvInfo );",
            "name": "NCryptGetProtectionDescriptorInfo"
        },
        {
            "signature": "SECURITY_STATUS NCryptProtectSecret( [in] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, [in] DWORD dwFlags, [in] const BYTE *pbData, [in] ULONG cbData, [in, optional] const NCRYPT_ALLOC_PARA *pMemPara, [in, optional] HWND hWnd, [out] BYTE **ppbProtectedBlob, [out] ULONG *pcbProtectedBlob );",
            "name": "NCryptProtectSecret"
        },
        {
            "signature": "SECURITY_STATUS NCryptQueryProtectionDescriptorName( [in] LPCWSTR pwszName, [out] LPWSTR pwszDescriptorString, [in, out] SIZE_T *pcDescriptorString, DWORD dwFlags );",
            "name": "NCryptQueryProtectionDescriptorName"
        },
        {
            "signature": "SECURITY_STATUS NCryptRegisterProtectionDescriptorName( [in] LPCWSTR pwszName, [in, optional] LPCWSTR pwszDescriptorString, DWORD dwFlags );",
            "name": "NCryptRegisterProtectionDescriptorName"
        },
        {
            "signature": "SECURITY_STATUS NCryptStreamClose( [in] NCRYPT_STREAM_HANDLE hStream );",
            "name": "NCryptStreamClose"
        },
        {
            "signature": "SECURITY_STATUS NCryptStreamOpenToProtect( [in] NCRYPT_DESCRIPTOR_HANDLE hDescriptor, DWORD dwFlags, [in, optional] HWND hWnd, [in] NCRYPT_PROTECT_STREAM_INFO *pStreamInfo, [out] NCRYPT_STREAM_HANDLE *phStream );",
            "name": "NCryptStreamOpenToProtect"
        },
        {
            "signature": "SECURITY_STATUS NCryptStreamOpenToUnprotect( [in] NCRYPT_PROTECT_STREAM_INFO *pStreamInfo, DWORD dwFlags, [in, optional] HWND hWnd, [out] NCRYPT_STREAM_HANDLE *phStream );",
            "name": "NCryptStreamOpenToUnprotect"
        },
        {
            "signature": "SECURITY_STATUS NCryptStreamOpenToUnprotectEx( [in] NCRYPT_PROTECT_STREAM_INFO_EX *pStreamInfo, DWORD dwFlags, [in, optional] HWND hWnd, [out] NCRYPT_STREAM_HANDLE *phStream );",
            "name": "NCryptStreamOpenToUnprotectEx"
        },
        {
            "signature": "SECURITY_STATUS NCryptStreamUpdate( [in] NCRYPT_STREAM_HANDLE hStream, [in] const BYTE *pbData, SIZE_T cbData, BOOL fFinal );",
            "name": "NCryptStreamUpdate"
        },
        {
            "signature": "SECURITY_STATUS NCryptUnprotectSecret( [out, optional] NCRYPT_DESCRIPTOR_HANDLE *phDescriptor, [in] DWORD dwFlags, [in] const BYTE *pbProtectedBlob, ULONG cbProtectedBlob, [in, optional] const NCRYPT_ALLOC_PARA *pMemPara, [in, optional] HWND hWnd, [out] BYTE **ppbData, [out] ULONG *pcbData );",
            "name": "NCryptUnprotectSecret"
        },
        {
            "signature": "PFNCryptStreamOutputCallback Pfncryptstreamoutputcallback; SECURITY_STATUS Pfncryptstreamoutputcallback( [in] void *pvCallbackCtxt, [in] const BYTE *pbData, SIZE_T cbData, BOOL fFinal ) {...}",
            "name": "PFNCryptStreamOutputCallback callback"
        }
    ],
    "Ndattrib.h": [],
    "Ndfapi.h": [
        {
            "signature": "HRESULT NdfCancelIncident( [in] NDFHANDLE Handle );",
            "name": "NdfCancelIncident"
        },
        {
            "signature": "HRESULT NdfCloseIncident( [in] NDFHANDLE handle );",
            "name": "NdfCloseIncident"
        },
        {
            "signature": "HRESULT NdfCreateConnectivityIncident( [out] NDFHANDLE *handle );",
            "name": "NdfCreateConnectivityIncident"
        },
        {
            "signature": "HRESULT NdfCreateDNSIncident( [in] LPCWSTR hostname, WORD queryType, [out] NDFHANDLE *handle );",
            "name": "NdfCreateDNSIncident"
        },
        {
            "signature": "HRESULT NdfCreateGroupingIncident( [in, optional] LPCWSTR CloudName, [in, optional] LPCWSTR GroupName, [in, optional] LPCWSTR Identity, [in, optional] LPCWSTR Invitation, [in, optional] SOCKET_ADDRESS_LIST *Addresses, [in, optional] LPCWSTR appId, [out] NDFHANDLE *handle );",
            "name": "NdfCreateGroupingIncident"
        },
        {
            "signature": "HRESULT NdfCreateInboundIncident( [in, optional] LPCWSTR applicationID, [in, optional] LPCWSTR serviceID, [in, optional] SID *userID, [in, optional] const SOCKADDR_STORAGE *localTarget, IPPROTO protocol, DWORD dwFlags, [out] NDFHANDLE *handle );",
            "name": "NdfCreateInboundIncident"
        },
        {
            "signature": "HRESULT NdfCreateIncident( [in] LPCWSTR helperClassName, ULONG celt, [in] HELPER_ATTRIBUTE *attributes, [out] NDFHANDLE *handle );",
            "name": "NdfCreateIncident"
        },
        {
            "signature": "HRESULT NdfCreateNetConnectionIncident( [out] NDFHANDLE *handle, GUID id );",
            "name": "NdfCreateNetConnectionIncident"
        },
        {
            "signature": "HRESULT NdfCreatePnrpIncident( [in] LPCWSTR cloudname, [in, optional] LPCWSTR peername, [in] BOOL diagnosePublish, [in, optional] LPCWSTR appId, [out] NDFHANDLE *handle );",
            "name": "NdfCreatePnrpIncident"
        },
        {
            "signature": "HRESULT NdfCreateSharingIncident( [in] LPCWSTR UNCPath, [out] NDFHANDLE *handle );",
            "name": "NdfCreateSharingIncident"
        },
        {
            "signature": "HRESULT NdfCreateWebIncident( [in] LPCWSTR url, [out] NDFHANDLE *handle );",
            "name": "NdfCreateWebIncident"
        },
        {
            "signature": "HRESULT NdfCreateWebIncidentEx( [in] LPCWSTR url, [in] BOOL useWinHTTP, [in] LPWSTR moduleName, [out] NDFHANDLE *handle );",
            "name": "NdfCreateWebIncidentEx"
        },
        {
            "signature": "HRESULT NdfCreateWinSockIncident( SOCKET sock, [in, optional] LPCWSTR host, USHORT port, [in, optional] LPCWSTR appId, [in, optional] SID *userId, [out] NDFHANDLE *handle );",
            "name": "NdfCreateWinSockIncident"
        },
        {
            "signature": "HRESULT NdfDiagnoseIncident( [in] NDFHANDLE Handle, [out] ULONG *RootCauseCount, [out] RootCauseInfo **RootCauses, DWORD dwWait, DWORD dwFlags );",
            "name": "NdfDiagnoseIncident"
        },
        {
            "signature": "HRESULT NdfExecuteDiagnosis( NDFHANDLE handle, HWND hwnd );",
            "name": "NdfExecuteDiagnosis"
        },
        {
            "signature": "HRESULT NdfGetTraceFile( [in] NDFHANDLE Handle, [out] LPCWSTR *TraceFileLocation );",
            "name": "NdfGetTraceFile"
        },
        {
            "signature": "HRESULT NdfRepairIncident( [in] NDFHANDLE Handle, [in] RepairInfoEx *RepairEx, DWORD dwWait );",
            "name": "NdfRepairIncident"
        }
    ],
    "Ndhelper.h": [],
    "Ndkinfo.h": [],
    "Netcon.h": [
        {
            "signature": "void NcFreeNetconProperties( [in] NETCON_PROPERTIES *pProps );",
            "name": "NcFreeNetconProperties"
        },
        {
            "signature": "BOOL NcIsValidConnectionName( [in] PCWSTR pszwName );",
            "name": "NcIsValidConnectionName"
        }
    ],
    "Netfw.h": [
        {
            "signature": "DWORD NetworkIsolationDiagnoseConnectFailureAndGetInfo( [in] LPCWSTR wszServerName, [out] NETISO_ERROR_TYPE *netIsoError );",
            "name": "NetworkIsolationDiagnoseConnectFailureAndGetInfo"
        },
        {
            "signature": "DWORD NetworkIsolationEnumAppContainers( [in] DWORD Flags, [out] DWORD *pdwNumPublicAppCs, [out] PINET_FIREWALL_APP_CONTAINER *ppPublicAppCs );",
            "name": "NetworkIsolationEnumAppContainers"
        },
        {
            "signature": "HRESULT NetworkIsolationEnumerateAppContainerRules( [out] IEnumVARIANT **newEnum );",
            "name": "NetworkIsolationEnumerateAppContainerRules"
        },
        {
            "signature": "DWORD NetworkIsolationFreeAppContainers( [in] PINET_FIREWALL_APP_CONTAINER pPublicAppCs );",
            "name": "NetworkIsolationFreeAppContainers"
        },
        {
            "signature": "DWORD NetworkIsolationGetAppContainerConfig( [out] DWORD *pdwNumPublicAppCs, [out] PSID_AND_ATTRIBUTES *appContainerSids );",
            "name": "NetworkIsolationGetAppContainerConfig"
        },
        {
            "signature": "DWORD NetworkIsolationGetEnterpriseIdAsync( [in] LPCWSTR wszServerName, [in] DWORD dwFlags, [in, optional] void *context, [in] PNETISO_EDP_ID_CALLBACK_FN callback, [out] HANDLE *hOperation );",
            "name": "NetworkIsolationGetEnterpriseIdAsync"
        },
        {
            "signature": "DWORD NetworkIsolationGetEnterpriseIdClose( [in] HANDLE hOperation, [in] BOOL bWaitForOperation );",
            "name": "NetworkIsolationGetEnterpriseIdClose"
        },
        {
            "signature": "DWORD NetworkIsolationRegisterForAppContainerChanges( [in] DWORD flags, [in] PAC_CHANGES_CALLBACK_FN callback, [in, optional] PVOID context, [out] HANDLE *registrationObject );",
            "name": "NetworkIsolationRegisterForAppContainerChanges"
        },
        {
            "signature": "DWORD NetworkIsolationSetAppContainerConfig( [in] DWORD dwNumPublicAppCs, [in] PSID_AND_ATTRIBUTES appContainerSids );",
            "name": "NetworkIsolationSetAppContainerConfig"
        },
        {
            "signature": "HRESULT NetworkIsolationSetupAppContainerBinaries( [in] PSID applicationContainerSid, [in] LPCWSTR packageFullName, [in] LPCWSTR packageFolder, [in] LPCWSTR displayName, [in] BOOL bBinariesFullyComputed, [in] LPCWSTR *binaries, [in] DWORD binariesCount );",
            "name": "NetworkIsolationSetupAppContainerBinaries"
        },
        {
            "signature": "DWORD NetworkIsolationUnregisterForAppContainerChanges( [in] HANDLE registrationObject );",
            "name": "NetworkIsolationUnregisterForAppContainerChanges"
        },
        {
            "signature": "PAC_CHANGES_CALLBACK_FN PacChangesCallbackFn; void PacChangesCallbackFn( [in, optional] void *context, [in] const INET_FIREWALL_AC_CHANGE *pChange ) {...}",
            "name": "PAC_CHANGES_CALLBACK_FN callback"
        },
        {
            "signature": "PFN_FWADDDYNAMICKEYWORDADDRESS0 PfnFwadddynamickeywordaddress0; DWORD PfnFwadddynamickeywordaddress0( const PFW_DYNAMIC_KEYWORD_ADDRESS0 dynamicKeywordAddress ) {...}",
            "name": "PFN_FWADDDYNAMICKEYWORDADDRESS0 callback"
        },
        {
            "signature": "PFN_FWDELETEDYNAMICKEYWORDADDRESS0 PfnFwdeletedynamickeywordaddress0; DWORD PfnFwdeletedynamickeywordaddress0( GUID dynamicKeywordAddressId ) {...}",
            "name": "PFN_FWDELETEDYNAMICKEYWORDADDRESS0 callback"
        },
        {
            "signature": "PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0 PfnFwenumdynamickeywordaddressbyid0; DWORD PfnFwenumdynamickeywordaddressbyid0( GUID dynamicKeywordAddressId, PFW_DYNAMIC_KEYWORD_ADDRESS_DATA0 *dynamicKeywordAddressData ) {...}",
            "name": "PFN_FWENUMDYNAMICKEYWORDADDRESSBYID0 callback"
        },
        {
            "signature": "PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0 PfnFwenumdynamickeywordaddressesbytype0; DWORD PfnFwenumdynamickeywordaddressesbytype0( DWORD flags, PFW_DYNAMIC_KEYWORD_ADDRESS_DATA0 *dynamicKeywordAddressData ) {...}",
            "name": "PFN_FWENUMDYNAMICKEYWORDADDRESSESBYTYPE0 callback"
        },
        {
            "signature": "PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0 PfnFwfreedynamickeywordaddressdata0; DWORD PfnFwfreedynamickeywordaddressdata0( PFW_DYNAMIC_KEYWORD_ADDRESS_DATA0 dynamicKeywordAddressData ) {...}",
            "name": "PFN_FWFREEDYNAMICKEYWORDADDRESSDATA0 callback"
        },
        {
            "signature": "PFN_FWUPDATEDYNAMICKEYWORDADDRESS0 PfnFwupdatedynamickeywordaddress0; DWORD PfnFwupdatedynamickeywordaddress0( GUID dynamicKeywordAddressId, PCWSTR updatedAddresses, BOOL append ) {...}",
            "name": "PFN_FWUPDATEDYNAMICKEYWORDADDRESS0 callback"
        }
    ],
    "Netioapi.h": [
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NETIOAPI_API CancelMibChangeNotify2( [in] HANDLE NotificationHandle );",
            "name": "CancelMibChangeNotify2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceAliasToLuid( [in] const WCHAR *InterfaceAlias, [out] PNET_LUID InterfaceLuid );",
            "name": "ConvertInterfaceAliasToLuid"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceGuidToLuid( [in] const GUID *InterfaceGuid, [out] PNET_LUID InterfaceLuid );",
            "name": "ConvertInterfaceGuidToLuid"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceIndexToLuid( [in] NET_IFINDEX InterfaceIndex, [out] PNET_LUID InterfaceLuid );",
            "name": "ConvertInterfaceIndexToLuid"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceLuidToAlias( [in] const NET_LUID *InterfaceLuid, [out] PWSTR InterfaceAlias, [in] SIZE_T Length );",
            "name": "ConvertInterfaceLuidToAlias"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceLuidToGuid( [in] const NET_LUID *InterfaceLuid, [out] GUID *InterfaceGuid );",
            "name": "ConvertInterfaceLuidToGuid"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceLuidToIndex( [in] const NET_LUID *InterfaceLuid, [out] PNET_IFINDEX InterfaceIndex );",
            "name": "ConvertInterfaceLuidToIndex"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceLuidToNameA( [in] const NET_LUID *InterfaceLuid, [out] PSTR InterfaceName, [in] SIZE_T Length );",
            "name": "ConvertInterfaceLuidToNameA"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceLuidToNameW( [in] const NET_LUID *InterfaceLuid, [out] PWSTR InterfaceName, [in] SIZE_T Length );",
            "name": "ConvertInterfaceLuidToNameW"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceNameToLuidA( [in] const CHAR *InterfaceName, [out] NET_LUID *InterfaceLuid );",
            "name": "ConvertInterfaceNameToLuidA"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ConvertInterfaceNameToLuidW( [in] const WCHAR *InterfaceName, [out] NET_LUID *InterfaceLuid );",
            "name": "ConvertInterfaceNameToLuidW"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NETIOAPI_API ConvertIpv4MaskToLength( [in] ULONG Mask, [out] PUINT8 MaskLength );",
            "name": "ConvertIpv4MaskToLength"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NETIOAPI_API ConvertLengthToIpv4Mask( [in] ULONG MaskLength, [out] PULONG Mask );",
            "name": "ConvertLengthToIpv4Mask"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API CreateAnycastIpAddressEntry( [in] const MIB_ANYCASTIPADDRESS_ROW *Row );",
            "name": "CreateAnycastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API CreateIpForwardEntry2( [in] const MIB_IPFORWARD_ROW2 *Row );",
            "name": "CreateIpForwardEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API CreateIpNetEntry2( [in] const MIB_IPNET_ROW2 *Row );",
            "name": "CreateIpNetEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API CreateSortedAddressPairs( [in, optional] const PSOCKADDR_IN6 SourceAddressList, [in] ULONG SourceAddressCount, [in] const PSOCKADDR_IN6 DestinationAddressList, [in] ULONG DestinationAddressCount, [in] ULONG AddressSortOptions, [out] PSOCKADDR_IN6_PAIR *SortedAddressPairList, [out] ULONG *SortedAddressPairCount );",
            "name": "CreateSortedAddressPairs"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API CreateUnicastIpAddressEntry( [in] const MIB_UNICASTIPADDRESS_ROW *Row );",
            "name": "CreateUnicastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API DeleteAnycastIpAddressEntry( [in] const MIB_ANYCASTIPADDRESS_ROW *Row );",
            "name": "DeleteAnycastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API DeleteIpForwardEntry2( [in] const MIB_IPFORWARD_ROW2 *Row );",
            "name": "DeleteIpForwardEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API DeleteIpNetEntry2( [in] const MIB_IPNET_ROW2 *Row );",
            "name": "DeleteIpNetEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API DeleteUnicastIpAddressEntry( [in] const MIB_UNICASTIPADDRESS_ROW *Row );",
            "name": "DeleteUnicastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API FlushIpNetTable2( [in] ADDRESS_FAMILY Family, [in] NET_IFINDEX InterfaceIndex );",
            "name": "FlushIpNetTable2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API FlushIpPathTable( [in] ADDRESS_FAMILY Family );",
            "name": "FlushIpPathTable"
        },
        {
            "signature": "VOID NETIOAPI_API_ FreeInterfaceDnsSettings( DNS_INTERFACE_SETTINGS *Settings );",
            "name": "FreeInterfaceDnsSettings"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID NETIOAPI_API_ FreeMibTable( [in] PVOID Memory );",
            "name": "FreeMibTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetAnycastIpAddressEntry( [in, out] PMIB_ANYCASTIPADDRESS_ROW Row );",
            "name": "GetAnycastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetAnycastIpAddressTable( [in] ADDRESS_FAMILY Family, [out] PMIB_ANYCASTIPADDRESS_TABLE *Table );",
            "name": "GetAnycastIpAddressTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetBestRoute2( [in, optional] NET_LUID *InterfaceLuid, [in] NET_IFINDEX InterfaceIndex, [in] const SOCKADDR_INET *SourceAddress, [in] const SOCKADDR_INET *DestinationAddress, [in] ULONG AddressSortOptions, [out] PMIB_IPFORWARD_ROW2 BestRoute, [out] SOCKADDR_INET *BestSourceAddress );",
            "name": "GetBestRoute2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NET_IF_COMPARTMENT_ID NETIOAPI_API_ GetCurrentThreadCompartmentId();",
            "name": "GetCurrentThreadCompartmentId"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NET_IF_COMPARTMENT_ID NETIOAPI_API_ GetDefaultCompartmentId();",
            "name": "GetDefaultCompartmentId"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIfEntry2( PMIB_IF_ROW2 Row );",
            "name": "GetIfEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIfEntry2Ex( [in] MIB_IF_ENTRY_LEVEL Level, [in, out] PMIB_IF_ROW2 Row );",
            "name": "GetIfEntry2Ex"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIfStackTable( [out] PMIB_IFSTACK_TABLE *Table );",
            "name": "GetIfStackTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIfTable2( [out] PMIB_IF_TABLE2 *Table );",
            "name": "GetIfTable2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIfTable2Ex( [in] MIB_IF_TABLE_LEVEL Level, [out] PMIB_IF_TABLE2 *Table );",
            "name": "GetIfTable2Ex"
        },
        {
            "signature": "NETIOAPI_API GetInterfaceDnsSettings( GUID Interface, DNS_INTERFACE_SETTINGS *Settings );",
            "name": "GetInterfaceDnsSettings"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetInvertedIfStackTable( [out] PMIB_INVERTEDIFSTACK_TABLE *Table );",
            "name": "GetInvertedIfStackTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpForwardEntry2( [in, out] PMIB_IPFORWARD_ROW2 Row );",
            "name": "GetIpForwardEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpForwardTable2( [in] ADDRESS_FAMILY Family, [out] PMIB_IPFORWARD_TABLE2 *Table );",
            "name": "GetIpForwardTable2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpInterfaceEntry( [in, out] PMIB_IPINTERFACE_ROW Row );",
            "name": "GetIpInterfaceEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpInterfaceTable( [in] ADDRESS_FAMILY Family, [out] PMIB_IPINTERFACE_TABLE *Table );",
            "name": "GetIpInterfaceTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpNetEntry2( [in, out] PMIB_IPNET_ROW2 Row );",
            "name": "GetIpNetEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpNetTable2( [in] ADDRESS_FAMILY Family, [out] PMIB_IPNET_TABLE2 *Table );",
            "name": "GetIpNetTable2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpNetworkConnectionBandwidthEstimates( [in] NET_IFINDEX InterfaceIndex, [in] ADDRESS_FAMILY AddressFamily, [out] PMIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES BandwidthEstimates );",
            "name": "GetIpNetworkConnectionBandwidthEstimates"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpPathEntry( [in, out] PMIB_IPPATH_ROW Row );",
            "name": "GetIpPathEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetIpPathTable( [in] ADDRESS_FAMILY Family, [out] PMIB_IPPATH_TABLE *Table );",
            "name": "GetIpPathTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetMulticastIpAddressEntry( [in, out] PMIB_MULTICASTIPADDRESS_ROW Row );",
            "name": "GetMulticastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetMulticastIpAddressTable( [in] ADDRESS_FAMILY Family, [out] PMIB_MULTICASTIPADDRESS_TABLE *Table );",
            "name": "GetMulticastIpAddressTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetNetworkConnectivityHint( [out] NL_NETWORK_CONNECTIVITY_HINT *ConnectivityHint );",
            "name": "GetNetworkConnectivityHint"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetNetworkConnectivityHintForInterface( [in] NET_IFINDEX InterfaceIndex, [out] NL_NETWORK_CONNECTIVITY_HINT *ConnectivityHint );",
            "name": "GetNetworkConnectivityHintForInterface"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetNetworkInformation( [in] const NET_IF_NETWORK_GUID *NetworkGuid, [out] PNET_IF_COMPARTMENT_ID CompartmentId, [out] PULONG SiteId, [out] PWCHAR NetworkName, [in] ULONG Length );",
            "name": "GetNetworkInformation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NET_IF_COMPARTMENT_ID NETIOAPI_API_ GetSessionCompartmentId( [in] ULONG SessionId );",
            "name": "GetSessionCompartmentId"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetTeredoPort( [out] USHORT *Port );",
            "name": "GetTeredoPort"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetUnicastIpAddressEntry( [in, out] PMIB_UNICASTIPADDRESS_ROW Row );",
            "name": "GetUnicastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API GetUnicastIpAddressTable( [in] ADDRESS_FAMILY Family, [out] PMIB_UNICASTIPADDRESS_TABLE *Table );",
            "name": "GetUnicastIpAddressTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE PCHAR NETIOAPI_API_ if_indextoname( [in] NET_IFINDEX InterfaceIndex, [out] PCHAR InterfaceName );",
            "name": "if_indextoname"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE NET_IFINDEX NETIOAPI_API_ if_nametoindex( [in] PCSTR InterfaceName );",
            "name": "if_nametoindex"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID NETIOAPI_API_ InitializeIpForwardEntry( [out] PMIB_IPFORWARD_ROW2 Row );",
            "name": "InitializeIpForwardEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID NETIOAPI_API_ InitializeIpInterfaceEntry( [in, out] PMIB_IPINTERFACE_ROW Row );",
            "name": "InitializeIpInterfaceEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE VOID NETIOAPI_API_ InitializeUnicastIpAddressEntry( [out] PMIB_UNICASTIPADDRESS_ROW Row );",
            "name": "InitializeUnicastIpAddressEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyIpInterfaceChange( [in] ADDRESS_FAMILY Family, [in] PIPINTERFACE_CHANGE_CALLBACK Callback, [in] PVOID CallerContext, [in] BOOLEAN InitialNotification, [in, out] HANDLE *NotificationHandle );",
            "name": "NotifyIpInterfaceChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyNetworkConnectivityHintChange( [in] PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK Callback, [in] PVOID CallerContext, [in] BOOLEAN InitialNotification, [out] PHANDLE NotificationHandle );",
            "name": "NotifyNetworkConnectivityHintChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyRouteChange2( [in] ADDRESS_FAMILY AddressFamily, [in] PIPFORWARD_CHANGE_CALLBACK Callback, [in] PVOID CallerContext, [in] BOOLEAN InitialNotification, [in, out] HANDLE *NotificationHandle );",
            "name": "NotifyRouteChange2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyStableUnicastIpAddressTable( [in] ADDRESS_FAMILY Family, [in, out] PMIB_UNICASTIPADDRESS_TABLE *Table, [in] PSTABLE_UNICAST_IPADDRESS_TABLE_CALLBACK CallerCallback, [in] PVOID CallerContext, [in, out] HANDLE *NotificationHandle );",
            "name": "NotifyStableUnicastIpAddressTable"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyTeredoPortChange( [in] PTEREDO_PORT_CHANGE_CALLBACK Callback, [in] PVOID CallerContext, [in] BOOLEAN InitialNotification, [in, out] HANDLE *NotificationHandle );",
            "name": "NotifyTeredoPortChange"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API NotifyUnicastIpAddressChange( [in] ADDRESS_FAMILY Family, [in] PUNICAST_IPADDRESS_CHANGE_CALLBACK Callback, [in] PVOID CallerContext, [in] BOOLEAN InitialNotification, [in, out] HANDLE *NotificationHandle );",
            "name": "NotifyUnicastIpAddressChange"
        },
        {
            "signature": "PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK PnetworkConnectivityHintChangeCallback; void PnetworkConnectivityHintChangeCallback( [in] PVOID CallerContext, [in] NL_NETWORK_CONNECTIVITY_HINT ConnectivityHint ) {...}",
            "name": "PNETWORK_CONNECTIVITY_HINT_CHANGE_CALLBACK callback"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API ResolveIpNetEntry2( [in, out] PMIB_IPNET_ROW2 Row, [in, optional] const SOCKADDR_INET *SourceAddress );",
            "name": "ResolveIpNetEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetCurrentThreadCompartmentId( [in] NET_IF_COMPARTMENT_ID CompartmentId );",
            "name": "SetCurrentThreadCompartmentId"
        },
        {
            "signature": "NETIOAPI_API SetInterfaceDnsSettings( GUID Interface, const DNS_INTERFACE_SETTINGS *Settings );",
            "name": "SetInterfaceDnsSettings"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetIpForwardEntry2( [in] const MIB_IPFORWARD_ROW2 *Route );",
            "name": "SetIpForwardEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetIpInterfaceEntry( [in, out] PMIB_IPINTERFACE_ROW Row );",
            "name": "SetIpInterfaceEntry"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetIpNetEntry2( [in, out] PMIB_IPNET_ROW2 Row );",
            "name": "SetIpNetEntry2"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetNetworkInformation( [in] const NET_IF_NETWORK_GUID *NetworkGuid, [in] NET_IF_COMPARTMENT_ID CompartmentId, [in] const WCHAR *NetworkName );",
            "name": "SetNetworkInformation"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetSessionCompartmentId( [in] ULONG SessionId, [in] NET_IF_COMPARTMENT_ID CompartmentId );",
            "name": "SetSessionCompartmentId"
        },
        {
            "signature": "IPHLPAPI_DLL_LINKAGE _NETIOAPI_SUCCESS_ NETIOAPI_API SetUnicastIpAddressEntry( [in] const MIB_UNICASTIPADDRESS_ROW *Row );",
            "name": "SetUnicastIpAddressEntry"
        }
    ],
    "Netiodef.h": [],
    "Netlistmgr.h": [],
    "Netsh.h": [
        {
            "signature": "FN_HANDLE_CMD FnHandleCmd; DWORD FnHandleCmd( [in] LPCWSTR pwszMachine, [in] LPWSTR *ppwcArguments, [in] DWORD dwCurrentIndex, [in] DWORD dwArgCount, [in] DWORD dwFlags, [in] LPCVOID pvData, [out] BOOL *pbDone ) {...}",
            "name": "FN_HANDLE_CMD callback"
        },
        {
            "signature": "DWORD MatchEnumTag( HANDLE hModule, [in] LPCWSTR pwcArg, [in] DWORD dwNumArg, [in] const TOKEN_VALUE *pEnumTable, [out] PDWORD pdwValue );",
            "name": "MatchEnumTag"
        },
        {
            "signature": "BOOL MatchToken( [in] LPCWSTR pwszUserToken, [in] LPCWSTR pwszCmdToken );",
            "name": "MatchToken"
        },
        {
            "signature": "NS_CONTEXT_COMMIT_FN NsContextCommitFn; DWORD NsContextCommitFn( [in] DWORD dwAction ) {...}",
            "name": "NS_CONTEXT_COMMIT_FN callback"
        },
        {
            "signature": "NS_CONTEXT_CONNECT_FN NsContextConnectFn; DWORD NsContextConnectFn( [in] LPCWSTR pwszMachine ) {...}",
            "name": "NS_CONTEXT_CONNECT_FN callback"
        },
        {
            "signature": "NS_CONTEXT_DUMP_FN NsContextDumpFn; DWORD NsContextDumpFn( [in] LPCWSTR pwszRouter, [in] LPWSTR *ppwcArguments, [in] DWORD dwArgCount, [in] LPCVOID pvData ) {...}",
            "name": "NS_CONTEXT_DUMP_FN callback"
        },
        {
            "signature": "NS_DLL_INIT_FN NsDllInitFn; DWORD NsDllInitFn( [in] DWORD dwNetshVersion, PVOID pReserved ) {...}",
            "name": "NS_DLL_INIT_FN callback"
        },
        {
            "signature": "NS_DLL_STOP_FN NsDllStopFn; DWORD NsDllStopFn( [in] DWORD dwReserved ) {...}",
            "name": "NS_DLL_STOP_FN callback"
        },
        {
            "signature": "NS_HELPER_START_FN NsHelperStartFn; DWORD NsHelperStartFn( [in] const GUID *pguidParent, [in] DWORD dwVersion ) {...}",
            "name": "NS_HELPER_START_FN callback"
        },
        {
            "signature": "NS_HELPER_STOP_FN NsHelperStopFn; DWORD NsHelperStopFn( [in] DWORD dwReserved ) {...}",
            "name": "NS_HELPER_STOP_FN callback"
        },
        {
            "signature": "NS_OSVERSIONCHECK NsOsversioncheck; BOOL NsOsversioncheck( [in] UINT CIMOSType, [in] UINT CIMOSProductSuite, [in] LPCWSTR CIMOSVersion, [in] LPCWSTR CIMOSBuildNumber, [in] LPCWSTR CIMServicePackMajorVersion, [in] LPCWSTR CIMServicePackMinorVersion, UINT uiReserved, [in] DWORD dwReserved ) {...}",
            "name": "NS_OSVERSIONCHECK callback"
        },
        {
            "signature": "DWORD PreprocessCommand( HANDLE hModule, [in, out] LPWSTR *ppwcArguments, [in] DWORD dwCurrentIndex, [in] DWORD dwArgCount, [in] TAG_TYPE *pttTags, [in] DWORD dwTagCount, [in] DWORD dwMinArgs, [in] DWORD dwMaxArgs, [out] DWORD *pdwTagType );",
            "name": "PreprocessCommand"
        },
        {
            "signature": "DWORD PrintError( [in] HANDLE hModule, [in] DWORD dwErrId, ... );",
            "name": "PrintError"
        },
        {
            "signature": "DWORD PrintMessage( [in] LPCWSTR pwszFormat, ... );",
            "name": "PrintMessage"
        },
        {
            "signature": "DWORD PrintMessageFromModule( [in] HANDLE hModule, [in] DWORD dwMsgId, ... );",
            "name": "PrintMessageFromModule"
        },
        {
            "signature": "DWORD RegisterContext( [in] const NS_CONTEXT_ATTRIBUTES *pChildContext );",
            "name": "RegisterContext"
        },
        {
            "signature": "DWORD RegisterHelper( [in] const GUID *pguidParentContext, [in] const NS_HELPER_ATTRIBUTES *pfnRegisterSubContext );",
            "name": "RegisterHelper"
        }
    ],
    "Networkisolation.h": [
        {
            "signature": "DWORD NetworkIsolationDiagnoseConnectFailureAndGetInfo( [in] LPCWSTR wszServerName, [out] NETISO_ERROR_TYPE *netIsoError );",
            "name": "NetworkIsolationDiagnoseConnectFailureAndGetInfo"
        },
        {
            "signature": "DWORD NetworkIsolationEnumAppContainers( [in] DWORD Flags, [out] DWORD *pdwNumPublicAppCs, [out] PINET_FIREWALL_APP_CONTAINER *ppPublicAppCs );",
            "name": "NetworkIsolationEnumAppContainers"
        },
        {
            "signature": "DWORD NetworkIsolationFreeAppContainers( [in] PINET_FIREWALL_APP_CONTAINER pPublicAppCs );",
            "name": "NetworkIsolationFreeAppContainers"
        },
        {
            "signature": "DWORD NetworkIsolationGetAppContainerConfig( [out] DWORD *pdwNumPublicAppCs, [out] PSID_AND_ATTRIBUTES *appContainerSids );",
            "name": "NetworkIsolationGetAppContainerConfig"
        },
        {
            "signature": "DWORD NetworkIsolationRegisterForAppContainerChanges( [in] DWORD flags, [in] PAC_CHANGES_CALLBACK_FN callback, [in, optional] PVOID context, [out] HANDLE *registrationObject );",
            "name": "NetworkIsolationRegisterForAppContainerChanges"
        },
        {
            "signature": "DWORD NetworkIsolationSetAppContainerConfig( [in] DWORD dwNumPublicAppCs, [in] PSID_AND_ATTRIBUTES appContainerSids );",
            "name": "NetworkIsolationSetAppContainerConfig"
        },
        {
            "signature": "HRESULT NetworkIsolationSetupAppContainerBinaries( [in] PSID applicationContainerSid, [in] LPCWSTR packageFullName, [in] LPCWSTR packageFolder, [in] LPCWSTR displayName, [in] BOOL bBinariesFullyComputed, [in] LPCWSTR *binaries, [in] DWORD binariesCount );",
            "name": "NetworkIsolationSetupAppContainerBinaries"
        },
        {
            "signature": "DWORD NetworkIsolationUnregisterForAppContainerChanges( [in] HANDLE registrationObject );",
            "name": "NetworkIsolationUnregisterForAppContainerChanges"
        },
        {
            "signature": "PAC_CHANGES_CALLBACK_FN PacChangesCallbackFn; void PacChangesCallbackFn( [in, optional] void *context, [in] const INET_FIREWALL_AC_CHANGE *pChange ) {...}",
            "name": "PAC_CHANGES_CALLBACK_FN callback"
        }
    ],
    "Newdev.h": [
        {
            "signature": "BOOL DiInstallDevice( [in, optional] HWND hwndParent, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in, optional] PSP_DRVINFO_DATA DriverInfoData, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiInstallDevice"
        },
        {
            "signature": "BOOL DiInstallDriverA( [in, optional] HWND hwndParent, [in] LPCSTR InfPath, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiInstallDriverA"
        },
        {
            "signature": "BOOL DiInstallDriverW( [in, optional] HWND hwndParent, [in] LPCWSTR InfPath, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiInstallDriverW"
        },
        {
            "signature": "BOOL DiRollbackDriver( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in, optional] HWND hwndParent, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiRollbackDriver"
        },
        {
            "signature": "BOOL DiShowUpdateDevice( [in, optional] HWND hwndParent, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiShowUpdateDevice"
        },
        {
            "signature": "BOOL DiUninstallDevice( [in] HWND hwndParent, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiUninstallDevice"
        },
        {
            "signature": "BOOL DiUninstallDriverA( [in, optional] HWND hwndParent, [in] LPCSTR InfPath, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiUninstallDriverA"
        },
        {
            "signature": "BOOL DiUninstallDriverW( [in, optional] HWND hwndParent, [in] LPCWSTR InfPath, [in] DWORD Flags, [out, optional] PBOOL NeedReboot );",
            "name": "DiUninstallDriverW"
        },
        {
            "signature": "BOOL UpdateDriverForPlugAndPlayDevicesA( [in, optional] HWND hwndParent, [in] LPCSTR HardwareId, [in] LPCSTR FullInfPath, [in] DWORD InstallFlags, [out, optional] PBOOL bRebootRequired );",
            "name": "UpdateDriverForPlugAndPlayDevicesA"
        },
        {
            "signature": "BOOL UpdateDriverForPlugAndPlayDevicesW( [in, optional] HWND hwndParent, [in] LPCWSTR HardwareId, [in] LPCWSTR FullInfPath, [in] DWORD InstallFlags, [out, optional] PBOOL bRebootRequired );",
            "name": "UpdateDriverForPlugAndPlayDevicesW"
        }
    ],
    "Nldef.h": [],
    "Notificationactivationcallback.h": [],
    "Npapi.h": [
        {
            "signature": "DWORD AddConnectNotify( [in, out] LPNOTIFYINFO lpNotifyInfo, [in] LPNOTIFYADD lpAddInfo );",
            "name": "AddConnectNotify"
        },
        {
            "signature": "DWORD CancelConnectNotify( [in, out] LPNOTIFYINFO lpNotifyInfo, [in] LPNOTIFYCANCEL lpCancelInfo );",
            "name": "CancelConnectNotify"
        },
        {
            "signature": "DWORD NPAddConnection( [in] LPNETRESOURCEW lpNetResource, [in] LPWSTR lpPassword, [in] LPWSTR lpUserName );",
            "name": "NPAddConnection"
        },
        {
            "signature": "DWORD NPAddConnection3( [in] HWND hwndOwner, [in] LPNETRESOURCEW lpNetResource, [in] LPWSTR lpPassword, [in] LPWSTR lpUserName, [in] DWORD dwFlags );",
            "name": "NPAddConnection3"
        },
        {
            "signature": "DWORD NPCancelConnection( [in] LPWSTR lpName, [in] BOOL fForce );",
            "name": "NPCancelConnection"
        },
        {
            "signature": "DWORD NPCloseEnum( [in] HANDLE hEnum );",
            "name": "NPCloseEnum"
        },
        {
            "signature": "DWORD NPDeviceMode( [in] HWND hParent );",
            "name": "NPDeviceMode"
        },
        {
            "signature": "DWORD NPDirectoryNotify( [in] HWND hwnd, [in] LPWSTR lpDir, [in] DWORD dwOper );",
            "name": "NPDirectoryNotify"
        },
        {
            "signature": "DWORD NPEnumResource( [in] HANDLE hEnum, [in, out] LPDWORD lpcCount, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "NPEnumResource"
        },
        {
            "signature": "DWORD NPFMXEditPerm( [in] LPWSTR lpDriveName, [in] HWND hwndFMX, [in] DWORD nDialogType );",
            "name": "NPFMXEditPerm"
        },
        {
            "signature": "DWORD NPFMXGetPermCaps( [in] LPWSTR lpDriveName );",
            "name": "NPFMXGetPermCaps"
        },
        {
            "signature": "DWORD NPFMXGetPermHelp( [in] LPWSTR lpDriveName, [in] DWORD nDialogType, [in] BOOL fDirectory, [in, out] LPVOID lpFileNameBuffer, [in, out] LPDWORD lpBufferSize, [out] LPDWORD lpnHelpContext );",
            "name": "NPFMXGetPermHelp"
        },
        {
            "signature": "DWORD NPFormatNetworkName( [in] LPWSTR lpRemoteName, [out] LPWSTR lpFormattedName, [in, out] LPDWORD lpnLength, [in] DWORD dwFlags, [in] DWORD dwAveCharPerLine );",
            "name": "NPFormatNetworkName"
        },
        {
            "signature": "DWORD NPGetCaps( DWORD ndex );",
            "name": "NPGetCaps"
        },
        {
            "signature": "DWORD NPGetConnection( [in] LPWSTR lpLocalName, [out] LPWSTR lpRemoteName, [in, out] LPDWORD lpnBufferLen );",
            "name": "NPGetConnection"
        },
        {
            "signature": "DWORD NPGetConnection3( [in] LPCWSTR lpLocalName, [in] DWORD dwLevel, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "NPGetConnection3"
        },
        {
            "signature": "DWORD NPGetConnectionPerformance( [in] LPCWSTR lpRemoteName, [out] LPNETCONNECTINFOSTRUCT lpNetConnectInfo );",
            "name": "NPGetConnectionPerformance"
        },
        {
            "signature": "DWORD NPGetDirectoryType( [in] LPWSTR lpName, [in] LPINT lpType, [in] BOOL bFlushCache );",
            "name": "NPGetDirectoryType"
        },
        {
            "signature": "DWORD NPGetPropertyText( [in] DWORD iButton, [in] DWORD nPropSel, [in] LPWSTR lpName, [out] LPWSTR lpButtonName, [in, out] DWORD nButtonNameLen, [in] DWORD nType );",
            "name": "NPGetPropertyText"
        },
        {
            "signature": "DWORD NPGetResourceInformation( [in] LPNETRESOURCEW lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize, [out] LPWSTR *lplpSystem );",
            "name": "NPGetResourceInformation"
        },
        {
            "signature": "DWORD NPGetResourceParent( [in] LPNETRESOURCEW lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "NPGetResourceParent"
        },
        {
            "signature": "DWORD NPGetUniversalName( [in] LPCWSTR lpLocalPath, [in] DWORD dwInfoLevel, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "NPGetUniversalName"
        },
        {
            "signature": "DWORD NPGetUser( [in] LPWSTR lpName, [out] LPWSTR lpUserName, [in, out] LPDWORD lpnBufferLen );",
            "name": "NPGetUser"
        },
        {
            "signature": "DWORD NPLogonNotify( [in] PLUID lpLogonId, [in] LPCWSTR lpAuthentInfoType, [in] LPVOID lpAuthentInfo, [in] LPCWSTR lpPreviousAuthentInfoType, [in] LPVOID lpPreviousAuthentInfo, [in] LPWSTR lpStationName, [in] LPVOID StationHandle, [out] LPWSTR *lpLogonScript );",
            "name": "NPLogonNotify"
        },
        {
            "signature": "DWORD NPOpenEnum( [in] DWORD dwScope, [in] DWORD dwType, [in] DWORD dwUsage, [in] LPNETRESOURCEW lpNetResource, [out] LPHANDLE lphEnum );",
            "name": "NPOpenEnum"
        },
        {
            "signature": "DWORD NPPasswordChangeNotify( [in] LPCWSTR lpAuthentInfoType, [in] LPVOID lpAuthentInfo, [in] LPCWSTR lpPreviousAuthentInfoType, [in] LPVOID lpPreviousAuthentInfo, [in] LPWSTR lpStationName, [in] LPVOID StationHandle, [in] DWORD dwChangeInfo );",
            "name": "NPPasswordChangeNotify"
        },
        {
            "signature": "DWORD NPPropertyDialog( [in] HWND hwndParent, [in] DWORD iButtonDlg, [in] DWORD nPropSel, [in] LPWSTR lpFileName, [in] DWORD nType );",
            "name": "NPPropertyDialog"
        },
        {
            "signature": "DWORD NPSearchDialog( [in] HWND hwndParent, [in] LPNETRESOURCEW lpNetResource, [out] LPVOID lpBuffer, [out] DWORD cbBuffer, [in] LPDWORD lpnFlags );",
            "name": "NPSearchDialog"
        },
        {
            "signature": "void WNetSetLastErrorA( [in] DWORD err, [in] LPSTR lpError, [in] LPSTR lpProviders );",
            "name": "WNetSetLastErrorA"
        },
        {
            "signature": "void WNetSetLastErrorW( [in] DWORD err, [in] LPWSTR lpError, [in] LPWSTR lpProviders );",
            "name": "WNetSetLastErrorW"
        }
    ],
    "Nsemail.h": [],
    "Nspapi.h": [
        {
            "signature": "INT EnumProtocolsA( [in, optional] LPINT lpiProtocols, [out] LPVOID lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "EnumProtocolsA"
        },
        {
            "signature": "INT EnumProtocolsW( [in, optional] LPINT lpiProtocols, [out] LPVOID lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "EnumProtocolsW"
        },
        {
            "signature": "INT GetAddressByNameA( [in] DWORD dwNameSpace, [in] LPGUID lpServiceType, [in, optional] LPSTR lpServiceName, [in, optional] LPINT lpiProtocols, [in] DWORD dwResolution, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, [out] LPVOID lpCsaddrBuffer, [in, out] LPDWORD lpdwBufferLength, [in, out] LPSTR lpAliasBuffer, [in, out] LPDWORD lpdwAliasBufferLength );",
            "name": "GetAddressByNameA"
        },
        {
            "signature": "INT GetAddressByNameW( [in] DWORD dwNameSpace, [in] LPGUID lpServiceType, [in, optional] LPWSTR lpServiceName, [in, optional] LPINT lpiProtocols, [in] DWORD dwResolution, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, [out] LPVOID lpCsaddrBuffer, [in, out] LPDWORD lpdwBufferLength, [in, out] LPWSTR lpAliasBuffer, [in, out] LPDWORD lpdwAliasBufferLength );",
            "name": "GetAddressByNameW"
        },
        {
            "signature": "INT GetNameByTypeA( [in] LPGUID lpServiceType, [out] LPSTR lpServiceName, [in] DWORD dwNameLength );",
            "name": "GetNameByTypeA"
        },
        {
            "signature": "INT GetNameByTypeW( [in] LPGUID lpServiceType, [out] LPWSTR lpServiceName, [in] DWORD dwNameLength );",
            "name": "GetNameByTypeW"
        },
        {
            "signature": "INT GetServiceA( [in] DWORD dwNameSpace, [in] LPGUID lpGuid, [in] LPSTR lpServiceName, [in] DWORD dwProperties, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferSize, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo );",
            "name": "GetServiceA"
        },
        {
            "signature": "INT GetServiceW( [in] DWORD dwNameSpace, [in] LPGUID lpGuid, [in] LPWSTR lpServiceName, [in] DWORD dwProperties, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferSize, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo );",
            "name": "GetServiceW"
        },
        {
            "signature": "INT GetTypeByNameA( [in] LPSTR lpServiceName, [in, out] LPGUID lpServiceType );",
            "name": "GetTypeByNameA"
        },
        {
            "signature": "INT GetTypeByNameW( [in] LPWSTR lpServiceName, [in, out] LPGUID lpServiceType );",
            "name": "GetTypeByNameW"
        },
        {
            "signature": "INT SetServiceA( [in] DWORD dwNameSpace, [in] DWORD dwOperation, [in] DWORD dwFlags, [in] LPSERVICE_INFOA lpServiceInfo, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, [out] LPDWORD lpdwStatusFlags );",
            "name": "SetServiceA"
        },
        {
            "signature": "INT SetServiceW( [in] DWORD dwNameSpace, [in] DWORD dwOperation, [in] DWORD dwFlags, [in] LPSERVICE_INFOW lpServiceInfo, [in, optional] LPSERVICE_ASYNC_INFO lpServiceAsyncInfo, [out] LPDWORD lpdwStatusFlags );",
            "name": "SetServiceW"
        }
    ],
    "Ntddkbd.h": [],
    "Ntddmou.h": [],
    "Ntddpsch.h": [],
    "Ntdef.h": [],
    "Ntdsapi.h": [
        {
            "signature": "NTDSAPI DWORD DsAddSidHistoryA( [in] HANDLE hDS, [in] DWORD Flags, [in] LPCSTR SrcDomain, [in] LPCSTR SrcPrincipal, [in] LPCSTR SrcDomainController, [in] RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds, [in] LPCSTR DstDomain, [in] LPCSTR DstPrincipal );",
            "name": "DsAddSidHistoryA"
        },
        {
            "signature": "NTDSAPI DWORD DsAddSidHistoryW( [in] HANDLE hDS, [in] DWORD Flags, [in] LPCWSTR SrcDomain, [in] LPCWSTR SrcPrincipal, [in] LPCWSTR SrcDomainController, [in] RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds, [in] LPCWSTR DstDomain, [in] LPCWSTR DstPrincipal );",
            "name": "DsAddSidHistoryW"
        },
        {
            "signature": "NTDSAPI DWORD DsBindA( [in, optional] LPCSTR DomainControllerName, [in, optional] LPCSTR DnsDomainName, [out] HANDLE *phDS );",
            "name": "DsBindA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindByInstanceA( [in] LPCSTR ServerName, [in] LPCSTR Annotation, [in] GUID *InstanceGuid, [in] LPCSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCSTR ServicePrincipalName, [in, optional] DWORD BindFlags, [out] HANDLE *phDS );",
            "name": "DsBindByInstanceA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindByInstanceW( [in] LPCWSTR ServerName, [in] LPCWSTR Annotation, [in] GUID *InstanceGuid, [in] LPCWSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCWSTR ServicePrincipalName, [in, optional] DWORD BindFlags, [out] HANDLE *phDS );",
            "name": "DsBindByInstanceW"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindingSetTimeout( [in] HANDLE hDS, [in] ULONG cTimeoutSecs );",
            "name": "DsBindingSetTimeout"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindToISTGA( [in, optional] LPCSTR SiteName, [out] HANDLE *phDS );",
            "name": "DsBindToISTGA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindToISTGW( [in, optional] LPCWSTR SiteName, [out] HANDLE *phDS );",
            "name": "DsBindToISTGW"
        },
        {
            "signature": "NTDSAPI DWORD DsBindW( [in, optional] LPCWSTR DomainControllerName, [in, optional] LPCWSTR DnsDomainName, [out] HANDLE *phDS );",
            "name": "DsBindW"
        },
        {
            "signature": "NTDSAPI DWORD DsBindWithCredA( [in, optional] LPCSTR DomainControllerName, [in, optional] LPCSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [out] HANDLE *phDS );",
            "name": "DsBindWithCredA"
        },
        {
            "signature": "NTDSAPI DWORD DsBindWithCredW( [in, optional] LPCWSTR DomainControllerName, [in, optional] LPCWSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [out] HANDLE *phDS );",
            "name": "DsBindWithCredW"
        },
        {
            "signature": "NTDSAPI DWORD DsBindWithSpnA( [in, optional] LPCSTR DomainControllerName, [in, optional] LPCSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCSTR ServicePrincipalName, [out] HANDLE *phDS );",
            "name": "DsBindWithSpnA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindWithSpnExA( [in, optional] LPCSTR DomainControllerName, [in, optional] LPCSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCSTR ServicePrincipalName, [in, optional] DWORD BindFlags, [out] HANDLE *phDS );",
            "name": "DsBindWithSpnExA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsBindWithSpnExW( [in, optional] LPCWSTR DomainControllerName, [in, optional] LPCWSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCWSTR ServicePrincipalName, [in, optional] DWORD BindFlags, [out] HANDLE *phDS );",
            "name": "DsBindWithSpnExW"
        },
        {
            "signature": "NTDSAPI DWORD DsBindWithSpnW( [in, optional] LPCWSTR DomainControllerName, [in, optional] LPCWSTR DnsDomainName, [in, optional] RPC_AUTH_IDENTITY_HANDLE AuthIdentity, [in, optional] LPCWSTR ServicePrincipalName, [out] HANDLE *phDS );",
            "name": "DsBindWithSpnW"
        },
        {
            "signature": "NTDSAPI DWORD DsClientMakeSpnForTargetServerA( [in] LPCSTR ServiceClass, [in] LPCSTR ServiceName, [in, out] DWORD *pcSpnLength, [out] LPSTR pszSpn );",
            "name": "DsClientMakeSpnForTargetServerA"
        },
        {
            "signature": "NTDSAPI DWORD DsClientMakeSpnForTargetServerW( [in] LPCWSTR ServiceClass, [in] LPCWSTR ServiceName, [in, out] DWORD *pcSpnLength, [out] LPWSTR pszSpn );",
            "name": "DsClientMakeSpnForTargetServerW"
        },
        {
            "signature": "NTDSAPI DWORD DsCrackNamesA( [in] HANDLE hDS, [in] DS_NAME_FLAGS flags, [in] DS_NAME_FORMAT formatOffered, [in] DS_NAME_FORMAT formatDesired, [in] DWORD cNames, [in] const LPCSTR *rpNames, [out] PDS_NAME_RESULTA *ppResult );",
            "name": "DsCrackNamesA"
        },
        {
            "signature": "NTDSAPI DWORD DsCrackNamesW( [in] HANDLE hDS, [in] DS_NAME_FLAGS flags, [in] DS_NAME_FORMAT formatOffered, [in] DS_NAME_FORMAT formatDesired, [in] DWORD cNames, [in] const LPCWSTR *rpNames, [out] PDS_NAME_RESULTW *ppResult );",
            "name": "DsCrackNamesW"
        },
        {
            "signature": "NTDSAPI VOID DsFreeDomainControllerInfoA( [in] DWORD InfoLevel, [in] DWORD cInfo, [in] VOID *pInfo );",
            "name": "DsFreeDomainControllerInfoA"
        },
        {
            "signature": "NTDSAPI VOID DsFreeDomainControllerInfoW( [in] DWORD InfoLevel, [in] DWORD cInfo, [in] VOID *pInfo );",
            "name": "DsFreeDomainControllerInfoW"
        },
        {
            "signature": "void DsFreeNameResultA( DS_NAME_RESULTA *pResult );",
            "name": "DsFreeNameResultA"
        },
        {
            "signature": "void DsFreeNameResultW( DS_NAME_RESULTW *pResult );",
            "name": "DsFreeNameResultW"
        },
        {
            "signature": "NTDSAPI VOID DsFreePasswordCredentials( [in] RPC_AUTH_IDENTITY_HANDLE AuthIdentity );",
            "name": "DsFreePasswordCredentials"
        },
        {
            "signature": "NTDSAPI VOID DsFreeSchemaGuidMapA( [in] PDS_SCHEMA_GUID_MAPA pGuidMap );",
            "name": "DsFreeSchemaGuidMapA"
        },
        {
            "signature": "NTDSAPI VOID DsFreeSchemaGuidMapW( [in] PDS_SCHEMA_GUID_MAPW pGuidMap );",
            "name": "DsFreeSchemaGuidMapW"
        },
        {
            "signature": "void DsFreeSpnArrayA( [in] DWORD cSpn, [in] LPSTR *rpszSpn );",
            "name": "DsFreeSpnArrayA"
        },
        {
            "signature": "void DsFreeSpnArrayW( [in] DWORD cSpn, [in] LPWSTR *rpszSpn );",
            "name": "DsFreeSpnArrayW"
        },
        {
            "signature": "NTDSAPI DWORD DsGetDomainControllerInfoA( [in] HANDLE hDs, [in] LPCSTR DomainName, [in] DWORD InfoLevel, [out] DWORD *pcOut, [out] VOID **ppInfo );",
            "name": "DsGetDomainControllerInfoA"
        },
        {
            "signature": "NTDSAPI DWORD DsGetDomainControllerInfoW( [in] HANDLE hDs, [in] LPCWSTR DomainName, [in] DWORD InfoLevel, [out] DWORD *pcOut, [out] VOID **ppInfo );",
            "name": "DsGetDomainControllerInfoW"
        },
        {
            "signature": "NTDSAPI DWORD DsGetSpnA( [in] DS_SPN_NAME_TYPE ServiceType, [in] LPCSTR ServiceClass, [in, optional] LPCSTR ServiceName, [in] USHORT InstancePort, [in] USHORT cInstanceNames, [in, optional] LPCSTR *pInstanceNames, [in, optional] const USHORT *pInstancePorts, [out] DWORD *pcSpn, [out] LPSTR **prpszSpn );",
            "name": "DsGetSpnA"
        },
        {
            "signature": "NTDSAPI DWORD DsGetSpnW( [in] DS_SPN_NAME_TYPE ServiceType, [in] LPCWSTR ServiceClass, [in, optional] LPCWSTR ServiceName, [in] USHORT InstancePort, [in] USHORT cInstanceNames, [in, optional] LPCWSTR *pInstanceNames, [in, optional] const USHORT *pInstancePorts, [out] DWORD *pcSpn, [out] LPWSTR **prpszSpn );",
            "name": "DsGetSpnW"
        },
        {
            "signature": "NTDSAPI DWORD DsInheritSecurityIdentityA( [in] HANDLE hDS, [in] DWORD Flags, [in] LPCSTR SrcPrincipal, [in] LPCSTR DstPrincipal );",
            "name": "DsInheritSecurityIdentityA"
        },
        {
            "signature": "NTDSAPI DWORD DsInheritSecurityIdentityW( [in] HANDLE hDS, [in] DWORD Flags, [in] LPCWSTR SrcPrincipal, [in] LPCWSTR DstPrincipal );",
            "name": "DsInheritSecurityIdentityW"
        },
        {
            "signature": "NTDSAPI DWORD DsListDomainsInSiteA( [in] HANDLE hDs, [in] LPCSTR site, [out] PDS_NAME_RESULTA *ppDomains );",
            "name": "DsListDomainsInSiteA"
        },
        {
            "signature": "NTDSAPI DWORD DsListDomainsInSiteW( [in] HANDLE hDs, [in] LPCWSTR site, [out] PDS_NAME_RESULTW *ppDomains );",
            "name": "DsListDomainsInSiteW"
        },
        {
            "signature": "NTDSAPI DWORD DsListInfoForServerA( [in] HANDLE hDs, [in] LPCSTR server, [out] PDS_NAME_RESULTA *ppInfo );",
            "name": "DsListInfoForServerA"
        },
        {
            "signature": "NTDSAPI DWORD DsListInfoForServerW( [in] HANDLE hDs, [in] LPCWSTR server, [out] PDS_NAME_RESULTW *ppInfo );",
            "name": "DsListInfoForServerW"
        },
        {
            "signature": "NTDSAPI DWORD DsListRolesA( [in] HANDLE hDs, [out] PDS_NAME_RESULTA *ppRoles );",
            "name": "DsListRolesA"
        },
        {
            "signature": "NTDSAPI DWORD DsListRolesW( [in] HANDLE hDs, [out] PDS_NAME_RESULTW *ppRoles );",
            "name": "DsListRolesW"
        },
        {
            "signature": "NTDSAPI DWORD DsListServersForDomainInSiteA( [in] HANDLE hDs, [in] LPCSTR domain, [in] LPCSTR site, [out] PDS_NAME_RESULTA *ppServers );",
            "name": "DsListServersForDomainInSiteA"
        },
        {
            "signature": "NTDSAPI DWORD DsListServersForDomainInSiteW( [in] HANDLE hDs, [in] LPCWSTR domain, [in] LPCWSTR site, [out] PDS_NAME_RESULTW *ppServers );",
            "name": "DsListServersForDomainInSiteW"
        },
        {
            "signature": "NTDSAPI DWORD DsListServersInSiteA( [in] HANDLE hDs, [in] LPCSTR site, [out] PDS_NAME_RESULTA *ppServers );",
            "name": "DsListServersInSiteA"
        },
        {
            "signature": "NTDSAPI DWORD DsListServersInSiteW( [in] HANDLE hDs, [in] LPCWSTR site, [out] PDS_NAME_RESULTW *ppServers );",
            "name": "DsListServersInSiteW"
        },
        {
            "signature": "NTDSAPI DWORD DsListSitesA( [in] HANDLE hDs, [out] PDS_NAME_RESULTA *ppSites );",
            "name": "DsListSitesA"
        },
        {
            "signature": "NTDSAPI DWORD DsListSitesW( [in] HANDLE hDs, [out] PDS_NAME_RESULTW *ppSites );",
            "name": "DsListSitesW"
        },
        {
            "signature": "NTDSAPI DWORD DsMakePasswordCredentialsA( [in] LPCSTR User, [in] LPCSTR Domain, [in] LPCSTR Password, [out] RPC_AUTH_IDENTITY_HANDLE *pAuthIdentity );",
            "name": "DsMakePasswordCredentialsA"
        },
        {
            "signature": "NTDSAPI DWORD DsMakePasswordCredentialsW( [in] LPCWSTR User, [in] LPCWSTR Domain, [in] LPCWSTR Password, [out] RPC_AUTH_IDENTITY_HANDLE *pAuthIdentity );",
            "name": "DsMakePasswordCredentialsW"
        },
        {
            "signature": "NTDSAPI DWORD DsMapSchemaGuidsA( [in] HANDLE hDs, [in] DWORD cGuids, [in] GUID *rGuids, [out] DS_SCHEMA_GUID_MAPA **ppGuidMap );",
            "name": "DsMapSchemaGuidsA"
        },
        {
            "signature": "NTDSAPI DWORD DsMapSchemaGuidsW( [in] HANDLE hDs, [in] DWORD cGuids, [in] GUID *rGuids, [out] DS_SCHEMA_GUID_MAPW **ppGuidMap );",
            "name": "DsMapSchemaGuidsW"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsQuerySitesByCostA( [in] HANDLE hDS, LPSTR pszFromSite, LPSTR *rgszToSites, [in] DWORD cToSites, [in] DWORD dwFlags, [out] PDS_SITE_COST_INFO *prgSiteInfo );",
            "name": "DsQuerySitesByCostA"
        },
        {
            "signature": "NTDSAPI_POSTXP DWORD DsQuerySitesByCostW( [in] HANDLE hDS, [in] LPWSTR pwszFromSite, [in] LPWSTR *rgwszToSites, [in] DWORD cToSites, [in] DWORD dwFlags, [out] PDS_SITE_COST_INFO *prgSiteInfo );",
            "name": "DsQuerySitesByCostW"
        },
        {
            "signature": "void DsQuerySitesFree( [in] PDS_SITE_COST_INFO rgSiteInfo );",
            "name": "DsQuerySitesFree"
        },
        {
            "signature": "NTDSAPI DWORD DsRemoveDsDomainA( [in] HANDLE hDs, [in] LPSTR DomainDN );",
            "name": "DsRemoveDsDomainA"
        },
        {
            "signature": "NTDSAPI DWORD DsRemoveDsDomainW( [in] HANDLE hDs, [in] LPWSTR DomainDN );",
            "name": "DsRemoveDsDomainW"
        },
        {
            "signature": "NTDSAPI DWORD DsRemoveDsServerA( [in] HANDLE hDs, [in] LPSTR ServerDN, [in, optional] LPSTR DomainDN, [out, optional] BOOL *fLastDcInDomain, [in] BOOL fCommit );",
            "name": "DsRemoveDsServerA"
        },
        {
            "signature": "NTDSAPI DWORD DsRemoveDsServerW( [in] HANDLE hDs, [in] LPWSTR ServerDN, [in, optional] LPWSTR DomainDN, [out, optional] BOOL *fLastDcInDomain, [in] BOOL fCommit );",
            "name": "DsRemoveDsServerW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaAddA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] LPCSTR SourceDsaDn, [in] LPCSTR TransportDn, [in] LPCSTR SourceDsaAddress, [in] const PSCHEDULE pSchedule, [in] DWORD Options );",
            "name": "DsReplicaAddA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaAddW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] LPCWSTR SourceDsaDn, [in] LPCWSTR TransportDn, [in] LPCWSTR SourceDsaAddress, [in] const PSCHEDULE pSchedule, [in] DWORD Options );",
            "name": "DsReplicaAddW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaConsistencyCheck( [in] HANDLE hDS, [in] DS_KCC_TASKID TaskID, [in] DWORD dwFlags );",
            "name": "DsReplicaConsistencyCheck"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaDelA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] LPCSTR DsaSrc, [in] ULONG Options );",
            "name": "DsReplicaDelA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaDelW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] LPCWSTR DsaSrc, [in] ULONG Options );",
            "name": "DsReplicaDelW"
        },
        {
            "signature": "void DsReplicaFreeInfo( [in] DS_REPL_INFO_TYPE InfoType, [in] VOID *pInfo );",
            "name": "DsReplicaFreeInfo"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaGetInfo2W( [in] HANDLE hDS, [in] DS_REPL_INFO_TYPE InfoType, [in, optional] LPCWSTR pszObject, [in, optional] UUID *puuidForSourceDsaObjGuid, [in, optional] LPCWSTR pszAttributeName, [in, optional] LPCWSTR pszValue, [in] DWORD dwFlags, [in] DWORD dwEnumerationContext, [out] VOID **ppInfo );",
            "name": "DsReplicaGetInfo2W"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaGetInfoW( [in] HANDLE hDS, [in] DS_REPL_INFO_TYPE InfoType, [in, optional] LPCWSTR pszObject, [in, optional] UUID *puuidForSourceDsaObjGuid, [out] VOID **ppInfo );",
            "name": "DsReplicaGetInfoW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaModifyA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] const UUID *pUuidSourceDsa, [in] LPCSTR TransportDn, [in] LPCSTR SourceDsaAddress, [in] const PSCHEDULE pSchedule, [in] DWORD ReplicaFlags, [in] DWORD ModifyFields, [in] DWORD Options );",
            "name": "DsReplicaModifyA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaModifyW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] const UUID *pUuidSourceDsa, [in] LPCWSTR TransportDn, [in] LPCWSTR SourceDsaAddress, [in] const PSCHEDULE pSchedule, [in] DWORD ReplicaFlags, [in] DWORD ModifyFields, [in] DWORD Options );",
            "name": "DsReplicaModifyW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaSyncA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] const UUID *pUuidDsaSrc, [in] ULONG Options );",
            "name": "DsReplicaSyncA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaSyncAllA( [in] HANDLE hDS, [in] LPCSTR pszNameContext, [in] ULONG ulFlags, [in] BOOL(* )(LPVOID,PDS_REPSYNCALL_UPDATEA) pFnCallBack, [in, optional] LPVOID pCallbackData, [out, optional] PDS_REPSYNCALL_ERRINFOA **pErrors );",
            "name": "DsReplicaSyncAllA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaSyncAllW( [in] HANDLE hDS, [in] LPCWSTR pszNameContext, [in] ULONG ulFlags, [in] BOOL(* )(LPVOID,PDS_REPSYNCALL_UPDATEW) pFnCallBack, [in, optional] LPVOID pCallbackData, [out, optional] PDS_REPSYNCALL_ERRINFOW **pErrors );",
            "name": "DsReplicaSyncAllW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaSyncW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] const UUID *pUuidDsaSrc, [in] ULONG Options );",
            "name": "DsReplicaSyncW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaUpdateRefsA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] LPCSTR DsaDest, [in] const UUID *pUuidDsaDest, [in] ULONG Options );",
            "name": "DsReplicaUpdateRefsA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaUpdateRefsW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] LPCWSTR DsaDest, [in] const UUID *pUuidDsaDest, [in] ULONG Options );",
            "name": "DsReplicaUpdateRefsW"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaVerifyObjectsA( [in] HANDLE hDS, [in] LPCSTR NameContext, [in] const UUID *pUuidDsaSrc, [in] ULONG ulOptions );",
            "name": "DsReplicaVerifyObjectsA"
        },
        {
            "signature": "NTDSAPI DWORD DsReplicaVerifyObjectsW( [in] HANDLE hDS, [in] LPCWSTR NameContext, [in] const UUID *pUuidDsaSrc, [in] ULONG ulOptions );",
            "name": "DsReplicaVerifyObjectsW"
        },
        {
            "signature": "NTDSAPI DWORD DsServerRegisterSpnA( [in] DS_SPN_WRITE_OP Operation, [in] LPCSTR ServiceClass, [in, optional] LPCSTR UserObjectDN );",
            "name": "DsServerRegisterSpnA"
        },
        {
            "signature": "NTDSAPI DWORD DsServerRegisterSpnW( [in] DS_SPN_WRITE_OP Operation, [in] LPCWSTR ServiceClass, [in, optional] LPCWSTR UserObjectDN );",
            "name": "DsServerRegisterSpnW"
        },
        {
            "signature": "NTDSAPI DWORD DsUnBindA( [in] HANDLE *phDS );",
            "name": "DsUnBindA"
        },
        {
            "signature": "NTDSAPI DWORD DsUnBindW( [in] HANDLE *phDS );",
            "name": "DsUnBindW"
        },
        {
            "signature": "NTDSAPI DWORD DsWriteAccountSpnA( [in] HANDLE hDS, [in] DS_SPN_WRITE_OP Operation, [in] LPCSTR pszAccount, [in] DWORD cSpn, [in] LPCSTR *rpszSpn );",
            "name": "DsWriteAccountSpnA"
        },
        {
            "signature": "NTDSAPI DWORD DsWriteAccountSpnW( [in] HANDLE hDS, [in] DS_SPN_WRITE_OP Operation, [in] LPCWSTR pszAccount, [in] DWORD cSpn, [in] LPCWSTR *rpszSpn );",
            "name": "DsWriteAccountSpnW"
        }
    ],
    "Ntenclv.h": [],
    "Ntioring_x.h": [],
    "Ntlsa.h": [
        {
            "signature": "LSA_FREE_LSA_HEAP LsaFreeLsaHeap; void LsaFreeLsaHeap( [in] PVOID Base ) {...}",
            "name": "LSA_FREE_LSA_HEAP callback"
        },
        {
            "signature": "NTSTATUS LsaGetAppliedCAPIDs( [in, optional] PLSA_UNICODE_STRING SystemName, [out] PSID **CAPIDs, [out] PULONG CAPIDCount );",
            "name": "LsaGetAppliedCAPIDs"
        },
        {
            "signature": "NTSTATUS LsaLookupPrivilegeValue( LSA_HANDLE PolicyHandle, PLSA_UNICODE_STRING Name, PLUID Value );",
            "name": "LsaLookupPrivilegeValue"
        },
        {
            "signature": "NTSTATUS LsaQueryCAPs( PSID *CAPIDs, [in] ULONG CAPIDCount, [out] PCENTRAL_ACCESS_POLICY *CAPs, [out] PULONG CAPCount );",
            "name": "LsaQueryCAPs"
        }
    ],
    "Ntmsapi.h": [
        {
            "signature": "DWORD AccessNtmsLibraryDoor( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibraryId, [in] DWORD dwAction );",
            "name": "AccessNtmsLibraryDoor"
        },
        {
            "signature": "DWORD AddNtmsMediaType( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaTypeId, [in] LPNTMS_GUID lpLibId );",
            "name": "AddNtmsMediaType"
        },
        {
            "signature": "DWORD AllocateNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaPool, [in] LPNTMS_GUID lpPartition, [out] LPNTMS_GUID lpMediaId, [in] DWORD dwOptions, [in] DWORD dwTimeout, [out] LPNTMS_ALLOCATION_INFORMATION lpAllocateInformation );",
            "name": "AllocateNtmsMedia"
        },
        {
            "signature": "DWORD BeginNtmsDeviceChangeDetection( [in] HANDLE hSession, [out] LPHANDLE lpDetectHandle );",
            "name": "BeginNtmsDeviceChangeDetection"
        },
        {
            "signature": "DWORD CancelNtmsLibraryRequest( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId );",
            "name": "CancelNtmsLibraryRequest"
        },
        {
            "signature": "DWORD CancelNtmsOperatorRequest( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId );",
            "name": "CancelNtmsOperatorRequest"
        },
        {
            "signature": "DWORD ChangeNtmsMediaType( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in] LPNTMS_GUID lpPoolId );",
            "name": "ChangeNtmsMediaType"
        },
        {
            "signature": "DWORD CleanNtmsDrive( [in] HANDLE hSession, [in] LPNTMS_GUID lpDriveId );",
            "name": "CleanNtmsDrive"
        },
        {
            "signature": "DWORD CloseNtmsNotification( [in] HANDLE hNotification );",
            "name": "CloseNtmsNotification"
        },
        {
            "signature": "DWORD CloseNtmsSession( [in] HANDLE hSession );",
            "name": "CloseNtmsSession"
        },
        {
            "signature": "DWORD CreateNtmsMediaA( [in] HANDLE hSession, [in] LPNTMS_OBJECTINFORMATIONA lpMedia, [in] LPNTMS_OBJECTINFORMATIONA lpList, [in] DWORD dwOptions );",
            "name": "CreateNtmsMediaA"
        },
        {
            "signature": "DWORD CreateNtmsMediaPool( [in] HANDLE hSession, [in] LPCTSTR lpPoolName, [in] LPNTMS_GUID lpMediaType, [in] DWORD dwAction, [in] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] LPNTMS_GUID lpPoolId );",
            "name": "CreateNtmsMediaPool"
        },
        {
            "signature": "DWORD CreateNtmsMediaPoolA( [in] HANDLE hSession, [in] LPCSTR lpPoolName, [in] LPNTMS_GUID lpMediaType, [in] DWORD dwAction, [in] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] LPNTMS_GUID lpPoolId );",
            "name": "CreateNtmsMediaPoolA"
        },
        {
            "signature": "DWORD CreateNtmsMediaPoolW( [in] HANDLE hSession, [in] LPCWSTR lpPoolName, [in] LPNTMS_GUID lpMediaType, [in] DWORD dwAction, [in] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] LPNTMS_GUID lpPoolId );",
            "name": "CreateNtmsMediaPoolW"
        },
        {
            "signature": "DWORD CreateNtmsMediaW( [in] HANDLE hSession, [in] LPNTMS_OBJECTINFORMATIONW lpMedia, [in] LPNTMS_OBJECTINFORMATIONW lpList, [in] DWORD dwOptions );",
            "name": "CreateNtmsMediaW"
        },
        {
            "signature": "DWORD DeallocateNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, DWORD dwOptions );",
            "name": "DeallocateNtmsMedia"
        },
        {
            "signature": "DWORD DecommissionNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId );",
            "name": "DecommissionNtmsMedia"
        },
        {
            "signature": "DWORD DeleteNtmsDrive( [in] HANDLE hSession, [in] LPNTMS_GUID lpDriveId );",
            "name": "DeleteNtmsDrive"
        },
        {
            "signature": "DWORD DeleteNtmsLibrary( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibraryId );",
            "name": "DeleteNtmsLibrary"
        },
        {
            "signature": "DWORD DeleteNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId );",
            "name": "DeleteNtmsMedia"
        },
        {
            "signature": "DWORD DeleteNtmsMediaPool( [in] HANDLE hSession, [in] LPNTMS_GUID lpPoolId );",
            "name": "DeleteNtmsMediaPool"
        },
        {
            "signature": "DWORD DeleteNtmsMediaType( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaTypeId, [in] LPNTMS_GUID lpLibId );",
            "name": "DeleteNtmsMediaType"
        },
        {
            "signature": "DWORD DeleteNtmsRequests( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId, [in] DWORD dwType, [in] DWORD dwCount );",
            "name": "DeleteNtmsRequests"
        },
        {
            "signature": "DWORD DisableNtmsObject( [in] HANDLE hSession, [in] DWORD dwType, [in] LPNTMS_GUID lpObjectId );",
            "name": "DisableNtmsObject"
        },
        {
            "signature": "DWORD DismountNtmsDrive( [in] HANDLE hSession, [in] LPNTMS_GUID lpDriveId );",
            "name": "DismountNtmsDrive"
        },
        {
            "signature": "DWORD DismountNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in] DWORD dwCount, [in] DWORD dwOptions );",
            "name": "DismountNtmsMedia"
        },
        {
            "signature": "DWORD EjectDiskFromSADriveA( [in] LPCSTR lpComputerName, [in] LPCSTR lpAppName, [in] LPCSTR lpDeviceName, [in] HWND hWnd, [in] LPCSTR lpTitle, [in] LPCSTR lpMessage, [in] DWORD dwOptions );",
            "name": "EjectDiskFromSADriveA"
        },
        {
            "signature": "DWORD EjectDiskFromSADriveW( [in] LPCWSTR lpComputerName, [in] LPCWSTR lpAppName, [in] LPCWSTR lpDeviceName, [in] HWND hWnd, [in] LPCWSTR lpTitle, [in] LPCWSTR lpMessage, [in] DWORD dwOptions );",
            "name": "EjectDiskFromSADriveW"
        },
        {
            "signature": "DWORD EjectNtmsCleaner( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibrary, [in, out] LPNTMS_GUID lpEjectOperation, [in] DWORD dwAction );",
            "name": "EjectNtmsCleaner"
        },
        {
            "signature": "DWORD EjectNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in, out] LPNTMS_GUID lpEjectOperation, [in] DWORD dwAction );",
            "name": "EjectNtmsMedia"
        },
        {
            "signature": "DWORD EnableNtmsObject( [in] HANDLE hSession, [in] DWORD dwType, [in] LPNTMS_GUID lpObjectId );",
            "name": "EnableNtmsObject"
        },
        {
            "signature": "DWORD EndNtmsDeviceChangeDetection( [in] HANDLE hSession, [in] HANDLE DetectHandle );",
            "name": "EndNtmsDeviceChangeDetection"
        },
        {
            "signature": "DWORD EnumerateNtmsObject( [in] HANDLE hSession, [in] const LPNTMS_GUID lpContainerId, [out] LPNTMS_GUID lpList, [in, out] LPDWORD lpdwListSize, [in] DWORD dwType, [in] DWORD dwOptions );",
            "name": "EnumerateNtmsObject"
        },
        {
            "signature": "DWORD ExportNtmsDatabase( [in] HANDLE hSession );",
            "name": "ExportNtmsDatabase"
        },
        {
            "signature": "DWORD GetNtmsMediaPoolNameA( [in] HANDLE hSession, [in] LPNTMS_GUID lpPoolId, [out] LPSTR lpNameBuf, [in, out] LPDWORD lpdwBufSize );",
            "name": "GetNtmsMediaPoolNameA"
        },
        {
            "signature": "DWORD GetNtmsMediaPoolNameW( [in] HANDLE hSession, [in] LPNTMS_GUID lpPoolId, [out] LPWSTR lpNameBuf, [in, out] LPDWORD lpdwBufSize );",
            "name": "GetNtmsMediaPoolNameW"
        },
        {
            "signature": "DWORD GetNtmsObjectAttributeA( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] LPCSTR lpAttributeName, [out] LPVOID lpAttributeData, [in, out] LPDWORD lpAttributeSize );",
            "name": "GetNtmsObjectAttributeA"
        },
        {
            "signature": "DWORD GetNtmsObjectAttributeW( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] LPCWSTR lpAttributeName, [out] LPVOID lpAttributeData, [in, out] LPDWORD lpAttributeSize );",
            "name": "GetNtmsObjectAttributeW"
        },
        {
            "signature": "DWORD GetNtmsObjectInformation( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [out] LPNTMS_OBJECTINFORMATION lpInfo );",
            "name": "GetNtmsObjectInformation"
        },
        {
            "signature": "DWORD GetNtmsObjectInformationA( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [out] LPNTMS_OBJECTINFORMATIONA lpInfo );",
            "name": "GetNtmsObjectInformationA"
        },
        {
            "signature": "DWORD GetNtmsObjectInformationW( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [out] LPNTMS_OBJECTINFORMATIONW lpInfo );",
            "name": "GetNtmsObjectInformationW"
        },
        {
            "signature": "DWORD GetNtmsObjectSecurity( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] SECURITY_INFORMATION RequestedInformation, [out] PSECURITY_DESCRIPTOR lpSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "GetNtmsObjectSecurity"
        },
        {
            "signature": "DWORD GetNtmsRequestOrder( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId, [out] LPDWORD lpdwOrderNumber );",
            "name": "GetNtmsRequestOrder"
        },
        {
            "signature": "DWORD GetNtmsUIOptionsA( [in] HANDLE hSession, [in] const LPNTMS_GUID lpObjectId, [in] DWORD dwType, [out] LPSTR lpszDestination, [in, out] LPDWORD lpdwBufSize );",
            "name": "GetNtmsUIOptionsA"
        },
        {
            "signature": "DWORD GetNtmsUIOptionsW( [in] HANDLE hSession, [in] const LPNTMS_GUID lpObjectId, [in] DWORD dwType, [out] LPWSTR lpszDestination, [in, out] LPDWORD lpdwBufSize );",
            "name": "GetNtmsUIOptionsW"
        },
        {
            "signature": "DWORD GetVolumesFromDriveA( [in] LPSTR pszDriveName, [out] LPSTR *VolumeNameBufferPtr, [out] LPSTR *DriveLetterBufferPtr );",
            "name": "GetVolumesFromDriveA"
        },
        {
            "signature": "DWORD GetVolumesFromDriveW( [in] LPWSTR pszDriveName, [out] LPWSTR *VolumeNameBufferPtr, [out] LPWSTR *DriveLetterBufferPtr );",
            "name": "GetVolumesFromDriveW"
        },
        {
            "signature": "DWORD IdentifyNtmsSlot( [in] HANDLE hSession, [in] LPNTMS_GUID lpSlotId, [in] DWORD dwOption );",
            "name": "IdentifyNtmsSlot"
        },
        {
            "signature": "DWORD ImportNtmsDatabase( [in] HANDLE hSession );",
            "name": "ImportNtmsDatabase"
        },
        {
            "signature": "DWORD InjectNtmsCleaner( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibrary, [in, out] LPNTMS_GUID lpInjectOperation, [out] DWORD dwNumberOfCleansLeft, [in] DWORD dwAction );",
            "name": "InjectNtmsCleaner"
        },
        {
            "signature": "DWORD InjectNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibraryId, [out] LPNTMS_GUID lpInjectOperation, [in] DWORD dwAction );",
            "name": "InjectNtmsMedia"
        },
        {
            "signature": "DWORD InventoryNtmsLibrary( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibraryId, [in] DWORD dwAction );",
            "name": "InventoryNtmsLibrary"
        },
        {
            "signature": "DWORD MountNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in, out] LPNTMS_GUID lpDriveId, [in] DWORD dwCount, [in] DWORD dwOptions, [in] int dwPriority, [in] DWORD dwTimeout, LPNTMS_MOUNT_INFORMATION lpMountInformation );",
            "name": "MountNtmsMedia"
        },
        {
            "signature": "DWORD MoveToNtmsMediaPool( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in] LPNTMS_GUID lpPoolId );",
            "name": "MoveToNtmsMediaPool"
        },
        {
            "signature": "HANDLE OpenNtmsNotification( [in] HANDLE hSession, [in] DWORD dwType );",
            "name": "OpenNtmsNotification"
        },
        {
            "signature": "HANDLE OpenNtmsSessionA( [in] LPCSTR lpServer, [in] LPCSTR lpApplication, DWORD dwOptions );",
            "name": "OpenNtmsSessionA"
        },
        {
            "signature": "HANDLE OpenNtmsSessionW( [in] LPCWSTR lpServer, [in] LPCWSTR lpApplication, DWORD dwOptions );",
            "name": "OpenNtmsSessionW"
        },
        {
            "signature": "DWORD ReleaseNtmsCleanerSlot( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibrary );",
            "name": "ReleaseNtmsCleanerSlot"
        },
        {
            "signature": "DWORD ReserveNtmsCleanerSlot( [in] HANDLE hSession, [in] LPNTMS_GUID lpLibrary, [in] LPNTMS_GUID lpSlot );",
            "name": "ReserveNtmsCleanerSlot"
        },
        {
            "signature": "DWORD SatisfyNtmsOperatorRequest( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId );",
            "name": "SatisfyNtmsOperatorRequest"
        },
        {
            "signature": "DWORD SetNtmsDeviceChangeDetection( [in] HANDLE hSession, [in] HANDLE DetectHandle, [in] LPNTMS_GUID lpRequestId, [in] DWORD dwType, [in] DWORD dwCount );",
            "name": "SetNtmsDeviceChangeDetection"
        },
        {
            "signature": "DWORD SetNtmsMediaComplete( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId );",
            "name": "SetNtmsMediaComplete"
        },
        {
            "signature": "DWORD SetNtmsObjectAttributeA( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] LPCSTR lpAttributeName, [in] LPVOID lpAttributeData, [in] DWORD dwAttributeSize );",
            "name": "SetNtmsObjectAttributeA"
        },
        {
            "signature": "DWORD SetNtmsObjectAttributeW( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] LPCWSTR lpAttributeName, [in] LPVOID lpAttributeData, DWORD AttributeSize );",
            "name": "SetNtmsObjectAttributeW"
        },
        {
            "signature": "DWORD SetNtmsObjectInformation( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] LPNTMS_OBJECTINFORMATION lpInfo );",
            "name": "SetNtmsObjectInformation"
        },
        {
            "signature": "DWORD SetNtmsObjectInformationA( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] LPNTMS_OBJECTINFORMATIONA lpInfo );",
            "name": "SetNtmsObjectInformationA"
        },
        {
            "signature": "DWORD SetNtmsObjectInformationW( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] LPNTMS_OBJECTINFORMATIONW lpInfo );",
            "name": "SetNtmsObjectInformationW"
        },
        {
            "signature": "DWORD SetNtmsObjectSecurity( [in] HANDLE hSession, [in] LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR lpSecurityDescriptor );",
            "name": "SetNtmsObjectSecurity"
        },
        {
            "signature": "DWORD SetNtmsRequestOrder( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId, [in] DWORD dwOrderNumber );",
            "name": "SetNtmsRequestOrder"
        },
        {
            "signature": "DWORD SetNtmsUIOptionsA( [in] HANDLE hSession, [in] const LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] DWORD dwOperation, [out] LPCSTR lpszDestination );",
            "name": "SetNtmsUIOptionsA"
        },
        {
            "signature": "DWORD SetNtmsUIOptionsW( [in] HANDLE hSession, [in] const LPNTMS_GUID lpObjectId, [in] DWORD dwType, [in] DWORD dwOperation, [out] LPCWSTR lpszDestination );",
            "name": "SetNtmsUIOptionsW"
        },
        {
            "signature": "DWORD SubmitNtmsOperatorRequestA( [in] HANDLE hSession, [in] DWORD dwRequest, [in] LPCSTR lpMessage, [in] LPNTMS_GUID lpArg1Id, [in] LPNTMS_GUID lpArg2Id, [out] LPNTMS_GUID lpRequestId );",
            "name": "SubmitNtmsOperatorRequestA"
        },
        {
            "signature": "DWORD SubmitNtmsOperatorRequestW( [in] HANDLE hSession, [in] DWORD dwRequest, [in] LPCWSTR lpMessage, [in] LPNTMS_GUID lpArg1Id, [in] LPNTMS_GUID lpArg2Id, [out] LPNTMS_GUID lpRequestId );",
            "name": "SubmitNtmsOperatorRequestW"
        },
        {
            "signature": "DWORD SwapNtmsMedia( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId1, [in] LPNTMS_GUID lpMediaId2 );",
            "name": "SwapNtmsMedia"
        },
        {
            "signature": "DWORD UpdateNtmsOmidInfo( [in] HANDLE hSession, [in] LPNTMS_GUID lpMediaId, [in] DWORD labelType, [in] DWORD numberOfBytes, [in] LPVOID lpBuffer );",
            "name": "UpdateNtmsOmidInfo"
        },
        {
            "signature": "DWORD WaitForNtmsNotification( [in] HANDLE hNotification, [out] LPNTMS_NOTIFICATIONINFORMATION lpNotificationInformation, [in] DWORD dwTimeout );",
            "name": "WaitForNtmsNotification"
        },
        {
            "signature": "DWORD WaitForNtmsOperatorRequest( [in] HANDLE hSession, [in] LPNTMS_GUID lpRequestId, [in] DWORD dwTimeout );",
            "name": "WaitForNtmsOperatorRequest"
        }
    ],
    "Ntmsmli.h": [
        {
            "signature": "CLAIMMEDIALABEL Claimmedialabel; DWORD Claimmedialabel( [in] const BYTE * const pBuffer, [in] const DWORD nBufferSize, [out] MediaLabelInfo * const pLabelInfo ) {...}",
            "name": "CLAIMMEDIALABEL callback"
        },
        {
            "signature": "MAXMEDIALABEL Maxmedialabel; DWORD Maxmedialabel( [out] DWORD * const pMaxSize ) {...}",
            "name": "MAXMEDIALABEL callback"
        }
    ],
    "Ntquery.h": [
        {
            "signature": "HRESULT BindIFilterFromStorage( [in] IStorage *pStg, [in] IUnknown *pUnkOuter, [out] void **ppIUnk );",
            "name": "BindIFilterFromStorage"
        },
        {
            "signature": "HRESULT BindIFilterFromStream( [in] IStream *pStm, [in] IUnknown *pUnkOuter, [out] void **ppIUnk );",
            "name": "BindIFilterFromStream"
        },
        {
            "signature": "HRESULT LoadIFilter( PCWSTR pwcsPath, [in] IUnknown *pUnkOuter, [out] void **ppIUnk );",
            "name": "LoadIFilter"
        },
        {
            "signature": "HRESULT SetCatalogState( WCHAR const *pwcsCat, WCHAR const *pwcsMachine, DWORD dwNewState, DWORD *pdwOldState );",
            "name": "SetCatalogState"
        }
    ],
    "Ntsecapi.h": [
        {
            "signature": "BOOLEAN AuditComputeEffectivePolicyBySid( [in] const PSID pSid, [in] const GUID *pSubCategoryGuids, [in] ULONG dwPolicyCount, [out] PAUDIT_POLICY_INFORMATION *ppAuditPolicy );",
            "name": "AuditComputeEffectivePolicyBySid"
        },
        {
            "signature": "BOOLEAN AuditComputeEffectivePolicyByToken( [in] HANDLE hTokenHandle, [in] const GUID *pSubCategoryGuids, [in] ULONG dwPolicyCount, [out] PAUDIT_POLICY_INFORMATION *ppAuditPolicy );",
            "name": "AuditComputeEffectivePolicyByToken"
        },
        {
            "signature": "BOOLEAN AuditEnumerateCategories( [out] GUID **ppAuditCategoriesArray, [out] PULONG pdwCountReturned );",
            "name": "AuditEnumerateCategories"
        },
        {
            "signature": "BOOLEAN AuditEnumeratePerUserPolicy( [out] PPOLICY_AUDIT_SID_ARRAY *ppAuditSidArray );",
            "name": "AuditEnumeratePerUserPolicy"
        },
        {
            "signature": "BOOLEAN AuditEnumerateSubCategories( [in] const GUID *pAuditCategoryGuid, [in] BOOLEAN bRetrieveAllSubCategories, [out] GUID **ppAuditSubCategoriesArray, [out] PULONG pdwCountReturned );",
            "name": "AuditEnumerateSubCategories"
        },
        {
            "signature": "void AuditFree( [in] PVOID Buffer );",
            "name": "AuditFree"
        },
        {
            "signature": "BOOLEAN AuditLookupCategoryGuidFromCategoryId( [in] POLICY_AUDIT_EVENT_TYPE AuditCategoryId, [out] GUID *pAuditCategoryGuid );",
            "name": "AuditLookupCategoryGuidFromCategoryId"
        },
        {
            "signature": "BOOLEAN AuditLookupCategoryIdFromCategoryGuid( [in] const GUID *pAuditCategoryGuid, [out] PPOLICY_AUDIT_EVENT_TYPE pAuditCategoryId );",
            "name": "AuditLookupCategoryIdFromCategoryGuid"
        },
        {
            "signature": "BOOLEAN AuditLookupCategoryNameA( [in] const GUID *pAuditCategoryGuid, [out] PSTR *ppszCategoryName );",
            "name": "AuditLookupCategoryNameA"
        },
        {
            "signature": "BOOLEAN AuditLookupCategoryNameW( [in] const GUID *pAuditCategoryGuid, [out] PWSTR *ppszCategoryName );",
            "name": "AuditLookupCategoryNameW"
        },
        {
            "signature": "BOOLEAN AuditLookupSubCategoryNameA( [in] const GUID *pAuditSubCategoryGuid, [out] PSTR *ppszSubCategoryName );",
            "name": "AuditLookupSubCategoryNameA"
        },
        {
            "signature": "BOOLEAN AuditLookupSubCategoryNameW( [in] const GUID *pAuditSubCategoryGuid, [out] PWSTR *ppszSubCategoryName );",
            "name": "AuditLookupSubCategoryNameW"
        },
        {
            "signature": "BOOLEAN AuditQueryGlobalSaclA( [in] PCSTR ObjectTypeName, [out] PACL *Acl );",
            "name": "AuditQueryGlobalSaclA"
        },
        {
            "signature": "BOOLEAN AuditQueryGlobalSaclW( [in] PCWSTR ObjectTypeName, [out] PACL *Acl );",
            "name": "AuditQueryGlobalSaclW"
        },
        {
            "signature": "BOOLEAN AuditQueryPerUserPolicy( [in] const PSID pSid, [in] const GUID *pSubCategoryGuids, [in] ULONG dwPolicyCount, [out] PAUDIT_POLICY_INFORMATION *ppAuditPolicy );",
            "name": "AuditQueryPerUserPolicy"
        },
        {
            "signature": "BOOLEAN AuditQuerySecurity( [in] SECURITY_INFORMATION SecurityInformation, [out] PSECURITY_DESCRIPTOR *ppSecurityDescriptor );",
            "name": "AuditQuerySecurity"
        },
        {
            "signature": "BOOLEAN AuditQuerySystemPolicy( [in] const GUID *pSubCategoryGuids, [in] ULONG dwPolicyCount, [out] PAUDIT_POLICY_INFORMATION *ppAuditPolicy );",
            "name": "AuditQuerySystemPolicy"
        },
        {
            "signature": "BOOLEAN AuditSetGlobalSaclA( [in] PCSTR ObjectTypeName, [in, optional] PACL Acl );",
            "name": "AuditSetGlobalSaclA"
        },
        {
            "signature": "BOOLEAN AuditSetGlobalSaclW( [in] PCWSTR ObjectTypeName, [in, optional] PACL Acl );",
            "name": "AuditSetGlobalSaclW"
        },
        {
            "signature": "BOOLEAN AuditSetPerUserPolicy( [in] const PSID pSid, [in] PCAUDIT_POLICY_INFORMATION pAuditPolicy, [in] ULONG dwPolicyCount );",
            "name": "AuditSetPerUserPolicy"
        },
        {
            "signature": "BOOLEAN AuditSetSecurity( [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "AuditSetSecurity"
        },
        {
            "signature": "BOOLEAN AuditSetSystemPolicy( [in] PCAUDIT_POLICY_INFORMATION pAuditPolicy, [in] ULONG dwPolicyCount );",
            "name": "AuditSetSystemPolicy"
        },
        {
            "signature": "NTSTATUS LsaAddAccountRights( [in] LSA_HANDLE PolicyHandle, [in] PSID AccountSid, [in] PLSA_UNICODE_STRING UserRights, [in] ULONG CountOfRights );",
            "name": "LsaAddAccountRights"
        },
        {
            "signature": "NTSTATUS LsaCallAuthenticationPackage( [in] HANDLE LsaHandle, [in] ULONG AuthenticationPackage, [in] PVOID ProtocolSubmitBuffer, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus );",
            "name": "LsaCallAuthenticationPackage"
        },
        {
            "signature": "NTSTATUS LsaClose( [in] LSA_HANDLE ObjectHandle );",
            "name": "LsaClose"
        },
        {
            "signature": "NTSTATUS LsaConnectUntrusted( [out] PHANDLE LsaHandle );",
            "name": "LsaConnectUntrusted"
        },
        {
            "signature": "NTSTATUS LsaCreateTrustedDomainEx( [in] LSA_HANDLE PolicyHandle, [in] PTRUSTED_DOMAIN_INFORMATION_EX TrustedDomainInformation, [in] PTRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation, [in] ACCESS_MASK DesiredAccess, [out] PLSA_HANDLE TrustedDomainHandle );",
            "name": "LsaCreateTrustedDomainEx"
        },
        {
            "signature": "NTSTATUS LsaDeleteTrustedDomain( [in] LSA_HANDLE PolicyHandle, [in] PSID TrustedDomainSid );",
            "name": "LsaDeleteTrustedDomain"
        },
        {
            "signature": "NTSTATUS LsaDeregisterLogonProcess( [in] HANDLE LsaHandle );",
            "name": "LsaDeregisterLogonProcess"
        },
        {
            "signature": "NTSTATUS LsaEnumerateAccountRights( [in] LSA_HANDLE PolicyHandle, [in] PSID AccountSid, [out] PLSA_UNICODE_STRING *UserRights, [out] PULONG CountOfRights );",
            "name": "LsaEnumerateAccountRights"
        },
        {
            "signature": "NTSTATUS LsaEnumerateAccountsWithUserRight( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING UserRight, [out] PVOID *Buffer, [out] PULONG CountReturned );",
            "name": "LsaEnumerateAccountsWithUserRight"
        },
        {
            "signature": "NTSTATUS LsaEnumerateLogonSessions( [out] PULONG LogonSessionCount, [out] PLUID *LogonSessionList );",
            "name": "LsaEnumerateLogonSessions"
        },
        {
            "signature": "NTSTATUS LsaEnumerateTrustedDomains( [in] LSA_HANDLE PolicyHandle, [in] PLSA_ENUMERATION_HANDLE EnumerationContext, [out] PVOID *Buffer, [in] ULONG PreferedMaximumLength, [out] PULONG CountReturned );",
            "name": "LsaEnumerateTrustedDomains"
        },
        {
            "signature": "NTSTATUS LsaEnumerateTrustedDomainsEx( [in] LSA_HANDLE PolicyHandle, [in] PLSA_ENUMERATION_HANDLE EnumerationContext, [out] PVOID *Buffer, [in] ULONG PreferedMaximumLength, [out] PULONG CountReturned );",
            "name": "LsaEnumerateTrustedDomainsEx"
        },
        {
            "signature": "NTSTATUS LsaFreeMemory( [in] PVOID Buffer );",
            "name": "LsaFreeMemory"
        },
        {
            "signature": "NTSTATUS LsaFreeReturnBuffer( [in] PVOID Buffer );",
            "name": "LsaFreeReturnBuffer"
        },
        {
            "signature": "NTSTATUS LsaGetLogonSessionData( [in] PLUID LogonId, [out] PSECURITY_LOGON_SESSION_DATA *ppLogonSessionData );",
            "name": "LsaGetLogonSessionData"
        },
        {
            "signature": "NTSTATUS LsaLogonUser( [in] HANDLE LsaHandle, [in] PLSA_STRING OriginName, [in] SECURITY_LOGON_TYPE LogonType, [in] ULONG AuthenticationPackage, [in] PVOID AuthenticationInformation, [in] ULONG AuthenticationInformationLength, [in, optional] PTOKEN_GROUPS LocalGroups, [in] PTOKEN_SOURCE SourceContext, [out] PVOID *ProfileBuffer, [out] PULONG ProfileBufferLength, [out] PLUID LogonId, [out] PHANDLE Token, [out] PQUOTA_LIMITS Quotas, [out] PNTSTATUS SubStatus );",
            "name": "LsaLogonUser"
        },
        {
            "signature": "NTSTATUS LsaLookupAuthenticationPackage( [in] HANDLE LsaHandle, [in] PLSA_STRING PackageName, [out] PULONG AuthenticationPackage );",
            "name": "LsaLookupAuthenticationPackage"
        },
        {
            "signature": "NTSTATUS LsaLookupNames( [in] LSA_HANDLE PolicyHandle, [in] ULONG Count, [in] PLSA_UNICODE_STRING Names, [out] PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, [out] PLSA_TRANSLATED_SID *Sids );",
            "name": "LsaLookupNames"
        },
        {
            "signature": "NTSTATUS LsaLookupNames2( [in] LSA_HANDLE PolicyHandle, [in] ULONG Flags, [in] ULONG Count, [in] PLSA_UNICODE_STRING Names, [out] PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, [out] PLSA_TRANSLATED_SID2 *Sids );",
            "name": "LsaLookupNames2"
        },
        {
            "signature": "NTSTATUS LsaLookupSids( [in] LSA_HANDLE PolicyHandle, [in] ULONG Count, [in] PSID *Sids, [out] PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, [out] PLSA_TRANSLATED_NAME *Names );",
            "name": "LsaLookupSids"
        },
        {
            "signature": "NTSTATUS LsaLookupSids2( [in] LSA_HANDLE PolicyHandle, [in] ULONG LookupOptions, [in] ULONG Count, [in] PSID *Sids, [out] PLSA_REFERENCED_DOMAIN_LIST *ReferencedDomains, [out] PLSA_TRANSLATED_NAME *Names );",
            "name": "LsaLookupSids2"
        },
        {
            "signature": "ULONG LsaNtStatusToWinError( [in] NTSTATUS Status );",
            "name": "LsaNtStatusToWinError"
        },
        {
            "signature": "NTSTATUS LsaOpenPolicy( [in] PLSA_UNICODE_STRING SystemName, [in] PLSA_OBJECT_ATTRIBUTES ObjectAttributes, [in] ACCESS_MASK DesiredAccess, [in, out] PLSA_HANDLE PolicyHandle );",
            "name": "LsaOpenPolicy"
        },
        {
            "signature": "NTSTATUS LsaOpenTrustedDomainByName( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING TrustedDomainName, [in] ACCESS_MASK DesiredAccess, [out] PLSA_HANDLE TrustedDomainHandle );",
            "name": "LsaOpenTrustedDomainByName"
        },
        {
            "signature": "NTSTATUS LsaQueryDomainInformationPolicy( [in] LSA_HANDLE PolicyHandle, [in] POLICY_DOMAIN_INFORMATION_CLASS InformationClass, [out] PVOID *Buffer );",
            "name": "LsaQueryDomainInformationPolicy"
        },
        {
            "signature": "NTSTATUS LsaQueryForestTrustInformation( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING TrustedDomainName, [out] PLSA_FOREST_TRUST_INFORMATION *ForestTrustInfo );",
            "name": "LsaQueryForestTrustInformation"
        },
        {
            "signature": "NTSTATUS LsaQueryInformationPolicy( [in] LSA_HANDLE PolicyHandle, [in] POLICY_INFORMATION_CLASS InformationClass, [out] PVOID *Buffer );",
            "name": "LsaQueryInformationPolicy"
        },
        {
            "signature": "NTSTATUS LsaQueryTrustedDomainInfo( [in] LSA_HANDLE PolicyHandle, [in] PSID TrustedDomainSid, [in] TRUSTED_INFORMATION_CLASS InformationClass, [out] PVOID *Buffer );",
            "name": "LsaQueryTrustedDomainInfo"
        },
        {
            "signature": "NTSTATUS LsaQueryTrustedDomainInfoByName( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING TrustedDomainName, [in] TRUSTED_INFORMATION_CLASS InformationClass, [out] PVOID *Buffer );",
            "name": "LsaQueryTrustedDomainInfoByName"
        },
        {
            "signature": "NTSTATUS LsaRegisterLogonProcess( [in] PLSA_STRING LogonProcessName, [out] PHANDLE LsaHandle, [out] PLSA_OPERATIONAL_MODE SecurityMode );",
            "name": "LsaRegisterLogonProcess"
        },
        {
            "signature": "NTSTATUS LsaRegisterPolicyChangeNotification( [in] POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, [in] HANDLE NotificationEventHandle );",
            "name": "LsaRegisterPolicyChangeNotification"
        },
        {
            "signature": "NTSTATUS LsaRemoveAccountRights( [in] LSA_HANDLE PolicyHandle, [in] PSID AccountSid, [in] BOOLEAN AllRights, [in] PLSA_UNICODE_STRING UserRights, [in] ULONG CountOfRights );",
            "name": "LsaRemoveAccountRights"
        },
        {
            "signature": "NTSTATUS LsaRetrievePrivateData( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING KeyName, [out] PLSA_UNICODE_STRING *PrivateData );",
            "name": "LsaRetrievePrivateData"
        },
        {
            "signature": "NTSTATUS LsaSetDomainInformationPolicy( [in] LSA_HANDLE PolicyHandle, [in] POLICY_DOMAIN_INFORMATION_CLASS InformationClass, [in] PVOID Buffer );",
            "name": "LsaSetDomainInformationPolicy"
        },
        {
            "signature": "NTSTATUS LsaSetForestTrustInformation( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING TrustedDomainName, [in] PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo, [in] BOOLEAN CheckOnly, [out] PLSA_FOREST_TRUST_COLLISION_INFORMATION *CollisionInfo );",
            "name": "LsaSetForestTrustInformation"
        },
        {
            "signature": "NTSTATUS LsaSetInformationPolicy( [in] LSA_HANDLE PolicyHandle, [in] POLICY_INFORMATION_CLASS InformationClass, [in] PVOID Buffer );",
            "name": "LsaSetInformationPolicy"
        },
        {
            "signature": "NTSTATUS LsaSetTrustedDomainInfoByName( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING TrustedDomainName, [in] TRUSTED_INFORMATION_CLASS InformationClass, [in] PVOID Buffer );",
            "name": "LsaSetTrustedDomainInfoByName"
        },
        {
            "signature": "NTSTATUS LsaSetTrustedDomainInformation( [in] LSA_HANDLE PolicyHandle, [in] PSID TrustedDomainSid, [in] TRUSTED_INFORMATION_CLASS InformationClass, [in] PVOID Buffer );",
            "name": "LsaSetTrustedDomainInformation"
        },
        {
            "signature": "NTSTATUS LsaStorePrivateData( [in] LSA_HANDLE PolicyHandle, [in] PLSA_UNICODE_STRING KeyName, [in] PLSA_UNICODE_STRING PrivateData );",
            "name": "LsaStorePrivateData"
        },
        {
            "signature": "NTSTATUS LsaUnregisterPolicyChangeNotification( [in] POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass, [in] HANDLE NotificationEventHandle );",
            "name": "LsaUnregisterPolicyChangeNotification"
        },
        {
            "signature": "PSAM_INIT_NOTIFICATION_ROUTINE PsamInitNotificationRoutine; BOOLEAN PsamInitNotificationRoutine() {...}",
            "name": "PSAM_INIT_NOTIFICATION_ROUTINE callback"
        },
        {
            "signature": "PSAM_PASSWORD_FILTER_ROUTINE PsamPasswordFilterRoutine; BOOLEAN PsamPasswordFilterRoutine( [in] PUNICODE_STRING AccountName, [in] PUNICODE_STRING FullName, [in] PUNICODE_STRING Password, [in] BOOLEAN SetOperation ) {...}",
            "name": "PSAM_PASSWORD_FILTER_ROUTINE callback"
        },
        {
            "signature": "PSAM_PASSWORD_NOTIFICATION_ROUTINE PsamPasswordNotificationRoutine; NTSTATUS PsamPasswordNotificationRoutine( [in] PUNICODE_STRING UserName, [in] ULONG RelativeId, [in] PUNICODE_STRING NewPassword ) {...}",
            "name": "PSAM_PASSWORD_NOTIFICATION_ROUTINE callback"
        },
        {
            "signature": "NTSTATUS RtlDecryptMemory( [in, out] PVOID Memory, [in] ULONG MemorySize, [in] ULONG OptionFlags );",
            "name": "RtlDecryptMemory"
        },
        {
            "signature": "NTSTATUS RtlEncryptMemory( [in, out] PVOID Memory, [in] ULONG MemorySize, [in] ULONG OptionFlags );",
            "name": "RtlEncryptMemory"
        },
        {
            "signature": "BOOLEAN RtlGenRandom( [out] PVOID RandomBuffer, [in] ULONG RandomBufferLength );",
            "name": "RtlGenRandom"
        }
    ],
    "Ntsecpkg.h": [
        {
            "signature": "CredFreeCredentialsFn Credfreecredentialsfn; void Credfreecredentialsfn( [in] ULONG Count, [in, out] PENCRYPTED_CREDENTIALW *Credentials ) {...}",
            "name": "CredFreeCredentialsFn callback"
        },
        {
            "signature": "CrediUnmarshalandDecodeStringFn Crediunmarshalanddecodestringfn; NTSTATUS Crediunmarshalanddecodestringfn( [in] LPWSTR MarshaledString, [out] LPBYTE *Blob, [out] ULONG *BlobSize, [out] BOOLEAN *IsFailureFatal ) {...}",
            "name": "CrediUnmarshalandDecodeStringFn callback"
        },
        {
            "signature": "NTSTATUS CredMarshalTargetInfo( [in] PCREDENTIAL_TARGET_INFORMATIONW InTargetInfo, [out] PUSHORT *Buffer, PULONG BufferSize );",
            "name": "CredMarshalTargetInfo"
        },
        {
            "signature": "CredReadDomainCredentialsFn Credreaddomaincredentialsfn; NTSTATUS Credreaddomaincredentialsfn( [in] PLUID LogonId, [in] ULONG CredFlags, [in] PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, ULONG Flags, PULONG Count, [out] PENCRYPTED_CREDENTIALW **Credential ) {...}",
            "name": "CredReadDomainCredentialsFn callback"
        },
        {
            "signature": "CredReadFn Credreadfn; NTSTATUS Credreadfn( [in] PLUID LogonId, [in] ULONG CredFlags, [in] LPWSTR TargetName, [in] ULONG Type, [in] ULONG Flags, [out] PENCRYPTED_CREDENTIALW *Credential ) {...}",
            "name": "CredReadFn callback"
        },
        {
            "signature": "CredWriteFn Credwritefn; NTSTATUS Credwritefn( [in] PLUID LogonId, [in] ULONG CredFlags, [in] PENCRYPTED_CREDENTIALW Credential, [in] ULONG Flags ) {...}",
            "name": "CredWriteFn callback"
        },
        {
            "signature": "KspDeleteContextFn Kspdeletecontextfn; NTSTATUS Kspdeletecontextfn( [in] LSA_SEC_HANDLE ContextId, PLSA_SEC_HANDLE LsaContextId ) {...}",
            "name": "KspDeleteContextFn callback"
        },
        {
            "signature": "KspMakeSignatureFn Kspmakesignaturefn; NTSTATUS Kspmakesignaturefn( [in] LSA_SEC_HANDLE ContextId, [in] ULONG fQOP, [in] PSecBufferDesc Message, [in] ULONG MessageSeqNo ) {...}",
            "name": "KspMakeSignatureFn callback"
        },
        {
            "signature": "KspVerifySignatureFn Kspverifysignaturefn; NTSTATUS Kspverifysignaturefn( LSA_SEC_HANDLE ContextId, [in] PSecBufferDesc Message, [in] ULONG MessageSeqNo, [out] PULONG pfQOP ) {...}",
            "name": "KspVerifySignatureFn callback"
        },
        {
            "signature": "LSA_ADD_CREDENTIAL LsaAddCredential; NTSTATUS LsaAddCredential( [in] PLUID LogonId, [in] ULONG AuthenticationPackage, [in] PLSA_STRING PrimaryKeyValue, [in] PLSA_STRING Credentials ) {...}",
            "name": "LSA_ADD_CREDENTIAL callback"
        },
        {
            "signature": "LSA_ALLOCATE_CLIENT_BUFFER LsaAllocateClientBuffer; NTSTATUS LsaAllocateClientBuffer( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] ULONG LengthRequired, [out] PVOID *ClientBaseAddress ) {...}",
            "name": "LSA_ALLOCATE_CLIENT_BUFFER callback"
        },
        {
            "signature": "LSA_ALLOCATE_LSA_HEAP LsaAllocateLsaHeap; PVOID LsaAllocateLsaHeap( [in] ULONG Length ) {...}",
            "name": "LSA_ALLOCATE_LSA_HEAP callback"
        },
        {
            "signature": "LSA_ALLOCATE_PRIVATE_HEAP LsaAllocatePrivateHeap; PVOID LsaAllocatePrivateHeap( [in] SIZE_T Length ) {...}",
            "name": "LSA_ALLOCATE_PRIVATE_HEAP callback"
        },
        {
            "signature": "LSA_ALLOCATE_SHARED_MEMORY LsaAllocateSharedMemory; PVOID LsaAllocateSharedMemory( [in] PVOID SharedMem, [in] ULONG Size ) {...}",
            "name": "LSA_ALLOCATE_SHARED_MEMORY callback"
        },
        {
            "signature": "LSA_AP_CALL_PACKAGE LsaApCallPackage; NTSTATUS LsaApCallPackage( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] PVOID ProtocolSubmitBuffer, [in] PVOID ClientBufferBase, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus ) {...}",
            "name": "LSA_AP_CALL_PACKAGE callback"
        },
        {
            "signature": "LSA_AP_CALL_PACKAGE_PASSTHROUGH LsaApCallPackagePassthrough; NTSTATUS LsaApCallPackagePassthrough( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] PVOID ProtocolSubmitBuffer, [in] PVOID ClientBufferBase, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus ) {...}",
            "name": "LSA_AP_CALL_PACKAGE_PASSTHROUGH callback"
        },
        {
            "signature": "LSA_AP_INITIALIZE_PACKAGE LsaApInitializePackage; NTSTATUS LsaApInitializePackage( [in] ULONG AuthenticationPackageId, [in] PLSA_DISPATCH_TABLE LsaDispatchTable, [in, optional] PLSA_STRING Database, [in, optional] PLSA_STRING Confidentiality, [out] PLSA_STRING *AuthenticationPackageName ) {...}",
            "name": "LSA_AP_INITIALIZE_PACKAGE callback"
        },
        {
            "signature": "LSA_AP_LOGON_TERMINATED LsaApLogonTerminated; void LsaApLogonTerminated( [in] PLUID LogonId ) {...}",
            "name": "LSA_AP_LOGON_TERMINATED callback"
        },
        {
            "signature": "LSA_AP_LOGON_USER LsaApLogonUser; NTSTATUS LsaApLogonUser( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] SECURITY_LOGON_TYPE LogonType, [in] PVOID AuthenticationInformation, [in] PVOID ClientAuthenticationBase, [in] ULONG AuthenticationInformationLength, [out] PVOID *ProfileBuffer, [out] PULONG ProfileBufferLength, [out] PLUID LogonId, [out] PNTSTATUS SubStatus, [out] PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, [out] PVOID *TokenInformation, [out] PLSA_UNICODE_STRING *AccountName, [out] PLSA_UNICODE_STRING *AuthenticatingAuthority ) {...}",
            "name": "LSA_AP_LOGON_USER callback"
        },
        {
            "signature": "LSA_AP_LOGON_USER_EX LsaApLogonUserEx; NTSTATUS LsaApLogonUserEx( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] SECURITY_LOGON_TYPE LogonType, [in] PVOID AuthenticationInformation, [in] PVOID ClientAuthenticationBase, [in] ULONG AuthenticationInformationLength, [out] PVOID *ProfileBuffer, [out] PULONG ProfileBufferLength, [out] PLUID LogonId, [out] PNTSTATUS SubStatus, [out] PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, [out] PVOID *TokenInformation, [out] PUNICODE_STRING *AccountName, [out] PUNICODE_STRING *AuthenticatingAuthority, [out] PUNICODE_STRING *MachineName ) {...}",
            "name": "LSA_AP_LOGON_USER_EX callback"
        },
        {
            "signature": "LSA_AP_LOGON_USER_EX2 LsaApLogonUserEx2; NTSTATUS LsaApLogonUserEx2( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] SECURITY_LOGON_TYPE LogonType, [in] PVOID ProtocolSubmitBuffer, [in] PVOID ClientBufferBase, [in] ULONG SubmitBufferSize, [out] PVOID *ProfileBuffer, [out] PULONG ProfileBufferSize, [out] PLUID LogonId, [out] PNTSTATUS SubStatus, [out] PLSA_TOKEN_INFORMATION_TYPE TokenInformationType, [out] PVOID *TokenInformation, [out] PUNICODE_STRING *AccountName, [out] PUNICODE_STRING *AuthenticatingAuthority, [out] PUNICODE_STRING *MachineName, [out] PSECPKG_PRIMARY_CRED PrimaryCredentials, [out] PSECPKG_SUPPLEMENTAL_CRED_ARRAY *SupplementalCredentials ) {...}",
            "name": "LSA_AP_LOGON_USER_EX2 callback"
        },
        {
            "signature": "LSA_AUDIT_ACCOUNT_LOGON LsaAuditAccountLogon; NTSTATUS LsaAuditAccountLogon( [in] ULONG AuditId, [in] BOOLEAN Success, [in] PUNICODE_STRING Source, [in] PUNICODE_STRING ClientName, [in] PUNICODE_STRING MappedName, [in] NTSTATUS Status ) {...}",
            "name": "LSA_AUDIT_ACCOUNT_LOGON callback"
        },
        {
            "signature": "LSA_AUDIT_LOGON LsaAuditLogon; void LsaAuditLogon( [in] NTSTATUS Status, [in] NTSTATUS SubStatus, [in] PUNICODE_STRING AccountName, [in] PUNICODE_STRING AuthenticatingAuthority, [in] PUNICODE_STRING WorkstationName, [in, optional] PSID UserSid, [in] SECURITY_LOGON_TYPE LogonType, [in] PTOKEN_SOURCE TokenSource, [in] PLUID LogonId ) {...}",
            "name": "LSA_AUDIT_LOGON callback"
        },
        {
            "signature": "LSA_CALL_PACKAGE LsaCallPackage; NTSTATUS LsaCallPackage( [in] PUNICODE_STRING AuthenticationPackage, [in] PVOID ProtocolSubmitBuffer, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus ) {...}",
            "name": "LSA_CALL_PACKAGE callback"
        },
        {
            "signature": "LSA_CALL_PACKAGE_PASSTHROUGH LsaCallPackagePassthrough; NTSTATUS LsaCallPackagePassthrough( [in] PUNICODE_STRING AuthenticationPackage, [in] PVOID ClientBufferBase, [in] PVOID ProtocolSubmitBuffer, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus ) {...}",
            "name": "LSA_CALL_PACKAGE_PASSTHROUGH callback"
        },
        {
            "signature": "LSA_CALL_PACKAGEEX LsaCallPackageex; NTSTATUS LsaCallPackageex( [in] PUNICODE_STRING AuthenticationPackage, [in] PVOID ClientBufferBase, [in] PVOID ProtocolSubmitBuffer, [in] ULONG SubmitBufferLength, [out] PVOID *ProtocolReturnBuffer, [out] PULONG ReturnBufferLength, [out] PNTSTATUS ProtocolStatus ) {...}",
            "name": "LSA_CALL_PACKAGEEX callback"
        },
        {
            "signature": "LSA_CANCEL_NOTIFICATION LsaCancelNotification; NTSTATUS LsaCancelNotification( [in] HANDLE NotifyHandle ) {...}",
            "name": "LSA_CANCEL_NOTIFICATION callback"
        },
        {
            "signature": "LSA_CLIENT_CALLBACK LsaClientCallback; NTSTATUS LsaClientCallback( [in] PCHAR Callback, [in] ULONG_PTR Argument1, [in] ULONG_PTR Argument2, [in] PSecBuffer Input, [out] PSecBuffer Output ) {...}",
            "name": "LSA_CLIENT_CALLBACK callback"
        },
        {
            "signature": "LSA_CLOSE_SAM_USER LsaCloseSamUser; NTSTATUS LsaCloseSamUser( [in] PVOID UserHandle ) {...}",
            "name": "LSA_CLOSE_SAM_USER callback"
        },
        {
            "signature": "LSA_CONVERT_AUTH_DATA_TO_TOKEN LsaConvertAuthDataToToken; NTSTATUS LsaConvertAuthDataToToken( [in] PVOID UserAuthData, [in] ULONG UserAuthDataSize, [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, [in] PTOKEN_SOURCE TokenSource, [in] SECURITY_LOGON_TYPE LogonType, [in] PUNICODE_STRING AuthorityName, [out] PHANDLE Token, [out] PLUID LogonId, [out] PUNICODE_STRING AccountName, [out] PNTSTATUS SubStatus ) {...}",
            "name": "LSA_CONVERT_AUTH_DATA_TO_TOKEN callback"
        },
        {
            "signature": "LSA_COPY_FROM_CLIENT_BUFFER LsaCopyFromClientBuffer; NTSTATUS LsaCopyFromClientBuffer( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] ULONG Length, [in] PVOID BufferToCopy, [in] PVOID ClientBaseAddress ) {...}",
            "name": "LSA_COPY_FROM_CLIENT_BUFFER callback"
        },
        {
            "signature": "LSA_COPY_TO_CLIENT_BUFFER LsaCopyToClientBuffer; NTSTATUS LsaCopyToClientBuffer( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] ULONG Length, [in] PVOID ClientBaseAddress, [in] PVOID BufferToCopy ) {...}",
            "name": "LSA_COPY_TO_CLIENT_BUFFER callback"
        },
        {
            "signature": "LSA_CRACK_SINGLE_NAME LsaCrackSingleName; NTSTATUS LsaCrackSingleName( [in] ULONG FormatOffered, [in] BOOLEAN PerformAtGC, [in] PUNICODE_STRING NameInput, [in, optional] PUNICODE_STRING Prefix, [in] ULONG RequestedFormat, [out] PUNICODE_STRING CrackedName, [out] PUNICODE_STRING DnsDomainName, [out] PULONG SubStatus ) {...}",
            "name": "LSA_CRACK_SINGLE_NAME callback"
        },
        {
            "signature": "LSA_CREATE_LOGON_SESSION LsaCreateLogonSession; NTSTATUS LsaCreateLogonSession( [in] PLUID LogonId ) {...}",
            "name": "LSA_CREATE_LOGON_SESSION callback"
        },
        {
            "signature": "LSA_CREATE_SHARED_MEMORY LsaCreateSharedMemory; PVOID LsaCreateSharedMemory( [in] ULONG MaxSize, [in] ULONG InitialSize ) {...}",
            "name": "LSA_CREATE_SHARED_MEMORY callback"
        },
        {
            "signature": "LSA_CREATE_THREAD LsaCreateThread; HANDLE LsaCreateThread( [in] SEC_ATTRS SecurityAttributes, [in] ULONG StackSize, [in] SEC_THREAD_START StartFunction, [in] PVOID ThreadParameter, [in] ULONG CreationFlags, [out] PULONG ThreadId ) {...}",
            "name": "LSA_CREATE_THREAD callback"
        },
        {
            "signature": "LSA_CREATE_TOKEN LsaCreateToken; NTSTATUS LsaCreateToken( [in] PLUID LogonId, [in] PTOKEN_SOURCE TokenSource, [in] SECURITY_LOGON_TYPE LogonType, [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, [in] LSA_TOKEN_INFORMATION_TYPE TokenInformationType, [in] PVOID TokenInformation, [in] PTOKEN_GROUPS TokenGroups, [in] PUNICODE_STRING AccountName, [in] PUNICODE_STRING AuthorityName, [in] PUNICODE_STRING Workstation, [in] PUNICODE_STRING ProfilePath, [out] PHANDLE Token, [out] PNTSTATUS SubStatus ) {...}",
            "name": "LSA_CREATE_TOKEN callback"
        },
        {
            "signature": "LSA_CREATE_TOKEN_EX LsaCreateTokenEx; NTSTATUS LsaCreateTokenEx( [in] PLUID LogonId, [in] PTOKEN_SOURCE TokenSource, [in] SECURITY_LOGON_TYPE LogonType, [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, [in] LSA_TOKEN_INFORMATION_TYPE TokenInformationType, [in] PVOID TokenInformation, [in] PTOKEN_GROUPS TokenGroups, [in] PUNICODE_STRING Workstation, [in] PUNICODE_STRING ProfilePath, [in] PVOID SessionInformation, [in] SECPKG_SESSIONINFO_TYPE SessionInformationType, [out] PHANDLE Token, [out] PNTSTATUS SubStatus ) {...}",
            "name": "LSA_CREATE_TOKEN_EX callback"
        },
        {
            "signature": "LSA_DELETE_CREDENTIAL LsaDeleteCredential; NTSTATUS LsaDeleteCredential( [in] PLUID LogonId, [in] ULONG AuthenticationPackage, [in] PLSA_STRING PrimaryKeyValue ) {...}",
            "name": "LSA_DELETE_CREDENTIAL callback"
        },
        {
            "signature": "LSA_DELETE_LOGON_SESSION LsaDeleteLogonSession; NTSTATUS LsaDeleteLogonSession( [in] PLUID LogonId ) {...}",
            "name": "LSA_DELETE_LOGON_SESSION callback"
        },
        {
            "signature": "LSA_DELETE_SHARED_MEMORY LsaDeleteSharedMemory; BOOLEAN LsaDeleteSharedMemory( [in] PVOID SharedMem ) {...}",
            "name": "LSA_DELETE_SHARED_MEMORY callback"
        },
        {
            "signature": "LSA_DUPLICATE_HANDLE LsaDuplicateHandle; NTSTATUS LsaDuplicateHandle( [in] HANDLE SourceHandle, [out] PHANDLE DestionationHandle ) {...}",
            "name": "LSA_DUPLICATE_HANDLE callback"
        },
        {
            "signature": "LSA_EXPAND_AUTH_DATA_FOR_DOMAIN LsaExpandAuthDataForDomain; NTSTATUS LsaExpandAuthDataForDomain( [in] PUCHAR UserAuthData, [in] ULONG UserAuthDataSize, [in] PVOID Reserved, [out] PUCHAR *ExpandedAuthData, [out] PULONG ExpandedAuthDataSize ) {...}",
            "name": "LSA_EXPAND_AUTH_DATA_FOR_DOMAIN callback"
        },
        {
            "signature": "LSA_FREE_CLIENT_BUFFER LsaFreeClientBuffer; NTSTATUS LsaFreeClientBuffer( [in] PLSA_CLIENT_REQUEST ClientRequest, [in] PVOID ClientBaseAddress ) {...}",
            "name": "LSA_FREE_CLIENT_BUFFER callback"
        },
        {
            "signature": "LSA_FREE_LSA_HEAP LsaFreeLsaHeap; void LsaFreeLsaHeap( [in] PVOID Base ) {...}",
            "name": "LSA_FREE_LSA_HEAP callback"
        },
        {
            "signature": "LSA_FREE_PRIVATE_HEAP LsaFreePrivateHeap; void LsaFreePrivateHeap( [in] PVOID Base ) {...}",
            "name": "LSA_FREE_PRIVATE_HEAP callback"
        },
        {
            "signature": "LSA_FREE_SHARED_MEMORY LsaFreeSharedMemory; void LsaFreeSharedMemory( [in] PVOID SharedMem, [in] PVOID Memory ) {...}",
            "name": "LSA_FREE_SHARED_MEMORY callback"
        },
        {
            "signature": "LSA_GET_AUTH_DATA_FOR_USER LsaGetAuthDataForUser; NTSTATUS LsaGetAuthDataForUser( [in] PSECURITY_STRING Name, [in] SECPKG_NAME_TYPE NameType, [in] PSECURITY_STRING Prefix, [out] PUCHAR *UserAuthData, [out] PULONG UserAuthDataSize, [out] PUNICODE_STRING UserFlatName ) {...}",
            "name": "LSA_GET_AUTH_DATA_FOR_USER callback"
        },
        {
            "signature": "LSA_GET_CALL_INFO LsaGetCallInfo; BOOLEAN LsaGetCallInfo( [out] PSECPKG_CALL_INFO Info ) {...}",
            "name": "LSA_GET_CALL_INFO callback"
        },
        {
            "signature": "LSA_GET_CLIENT_INFO LsaGetClientInfo; NTSTATUS LsaGetClientInfo( [out] PSECPKG_CLIENT_INFO ClientInfo ) {...}",
            "name": "LSA_GET_CLIENT_INFO callback"
        },
        {
            "signature": "LSA_GET_CREDENTIALS LsaGetCredentials; NTSTATUS LsaGetCredentials( [in] PLUID LogonId, [in] ULONG AuthenticationPackage, [in, out] PULONG QueryContext, [in] BOOLEAN RetrieveAllCredentials, [in, out] PLSA_STRING PrimaryKeyValue, [out] PULONG PrimaryKeyLength, [out] PLSA_STRING Credentials ) {...}",
            "name": "LSA_GET_CREDENTIALS callback"
        },
        {
            "signature": "LSA_GET_USER_AUTH_DATA LsaGetUserAuthData; NTSTATUS LsaGetUserAuthData( [in] PVOID UserHandle, [out] PUCHAR *UserAuthData, [out] PULONG UserAuthDataSize ) {...}",
            "name": "LSA_GET_USER_AUTH_DATA callback"
        },
        {
            "signature": "LSA_MAP_BUFFER LsaMapBuffer; NTSTATUS LsaMapBuffer( [in] PSecBuffer InputBuffer, [out] PSecBuffer OutputBuffer ) {...}",
            "name": "LSA_MAP_BUFFER callback"
        },
        {
            "signature": "LSA_OPEN_SAM_USER LsaOpenSamUser; NTSTATUS LsaOpenSamUser( [in] PSECURITY_STRING Name, [in] SECPKG_NAME_TYPE NameType, [in] PSECURITY_STRING Prefix, [in] BOOLEAN AllowGuest, [in] ULONG Reserved, [out] PVOID *UserHandle ) {...}",
            "name": "LSA_OPEN_SAM_USER callback"
        },
        {
            "signature": "LSA_OPEN_TOKEN_BY_LOGON_ID LsaOpenTokenByLogonId; NTSTATUS LsaOpenTokenByLogonId( [in] PLUID LogonId, [out] HANDLE *RetTokenHandle ) {...}",
            "name": "LSA_OPEN_TOKEN_BY_LOGON_ID callback"
        },
        {
            "signature": "LSA_PROTECT_MEMORY LsaProtectMemory; void LsaProtectMemory( [in, out] PVOID Buffer, [in] ULONG BufferSize ) {...}",
            "name": "LSA_PROTECT_MEMORY callback"
        },
        {
            "signature": "LSA_REGISTER_NOTIFICATION LsaRegisterNotification; HANDLE LsaRegisterNotification( [in] SEC_THREAD_START StartFunction, [in] PVOID Parameter, [in] ULONG NotificationType, [in] ULONG NotificationClass, [in] ULONG NotificationFlags, [in] ULONG IntervalMinutes, [in] HANDLE WaitEvent ) {...}",
            "name": "LSA_REGISTER_NOTIFICATION callback"
        },
        {
            "signature": "LSA_UPDATE_PRIMARY_CREDENTIALS LsaUpdatePrimaryCredentials; NTSTATUS LsaUpdatePrimaryCredentials( [in] PSECPKG_PRIMARY_CRED PrimaryCredentials, [in, optional] PSECPKG_SUPPLEMENTAL_CRED_ARRAY Credentials ) {...}",
            "name": "LSA_UPDATE_PRIMARY_CREDENTIALS callback"
        },
        {
            "signature": "SpAcceptCredentialsFn Spacceptcredentialsfn; NTSTATUS Spacceptcredentialsfn( [in] SECURITY_LOGON_TYPE LogonType, [in] PUNICODE_STRING AccountName, [in] PSECPKG_PRIMARY_CRED PrimaryCredentials, [in] PSECPKG_SUPPLEMENTAL_CRED SupplementalCredentials ) {...}",
            "name": "SpAcceptCredentialsFn callback"
        },
        {
            "signature": "SpAcceptLsaModeContextFn Spacceptlsamodecontextfn; NTSTATUS Spacceptlsamodecontextfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] LSA_SEC_HANDLE ContextHandle, [in] PSecBufferDesc InputBuffer, [in] ULONG ContextRequirements, [in] ULONG TargetDataRep, [out] PLSA_SEC_HANDLE NewContextHandle, [out] PSecBufferDesc OutputBuffer, [out] PULONG ContextAttributes, [out] PTimeStamp ExpirationTime, [out] PBOOLEAN MappedContext, [out] PSecBuffer ContextData ) {...}",
            "name": "SpAcceptLsaModeContextFn callback"
        },
        {
            "signature": "SpAcquireCredentialsHandleFn Spacquirecredentialshandlefn; NTSTATUS Spacquirecredentialshandlefn( [in] PUNICODE_STRING PrincipalName, [in] ULONG CredentialUseFlags, [in] PLUID LogonId, [in] PVOID AuthorizationData, PVOID GetKeyFunciton, [in] PVOID GetKeyArgument, [out] PLSA_SEC_HANDLE CredentialHandle, [out] PTimeStamp ExpirationTime ) {...}",
            "name": "SpAcquireCredentialsHandleFn callback"
        },
        {
            "signature": "SpAddCredentialsFn Spaddcredentialsfn; NTSTATUS Spaddcredentialsfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] PUNICODE_STRING PrincipalName, [in] PUNICODE_STRING Package, [in] ULONG CredentialUseFlags, [in] PVOID AuthorizationData, PVOID GetKeyFunciton, [in] PVOID GetKeyArgument, [out] PTimeStamp ExpirationTime ) {...}",
            "name": "SpAddCredentialsFn callback"
        },
        {
            "signature": "SpApplyControlTokenFn Spapplycontroltokenfn; NTSTATUS Spapplycontroltokenfn( [in] LSA_SEC_HANDLE ContextHandle, [in] PSecBufferDesc ControlToken ) {...}",
            "name": "SpApplyControlTokenFn callback"
        },
        {
            "signature": "SpCompleteAuthTokenFn Spcompleteauthtokenfn; NTSTATUS Spcompleteauthtokenfn( [in] LSA_SEC_HANDLE ContextHandle, [in] PSecBufferDesc InputBuffer ) {...}",
            "name": "SpCompleteAuthTokenFn callback"
        },
        {
            "signature": "SpDeleteCredentialsFn Spdeletecredentialsfn; NTSTATUS Spdeletecredentialsfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] PSecBuffer Key ) {...}",
            "name": "SpDeleteCredentialsFn callback"
        },
        {
            "signature": "SpExchangeMetaDataFn Spexchangemetadatafn; NTSTATUS Spexchangemetadatafn( [in] LSA_SEC_HANDLE CredentialHandle, [in, optional] PUNICODE_STRING TargetName, [in] ULONG ContextRequirements, [in] ULONG MetaDataLength, [in] PUCHAR MetaData, [in, out] PLSA_SEC_HANDLE ContextHandle ) {...}",
            "name": "SpExchangeMetaDataFn callback"
        },
        {
            "signature": "SpExportSecurityContextFn Spexportsecuritycontextfn; NTSTATUS Spexportsecuritycontextfn( [in] LSA_SEC_HANDLE phContext, [in] ULONG fFlags, [out] PSecBuffer pPackedContext, [out] PHANDLE pToken ) {...}",
            "name": "SpExportSecurityContextFn callback"
        },
        {
            "signature": "SpFormatCredentialsFn Spformatcredentialsfn; NTSTATUS Spformatcredentialsfn( [in] PSecBuffer Credentials, [out] PSecBuffer FormattedCredentials ) {...}",
            "name": "SpFormatCredentialsFn callback"
        },
        {
            "signature": "SpFreeCredentialsHandleFn Spfreecredentialshandlefn; NTSTATUS Spfreecredentialshandlefn( [in] LSA_SEC_HANDLE CredentialHandle ) {...}",
            "name": "SpFreeCredentialsHandleFn callback"
        },
        {
            "signature": "SpGetContextTokenFn Spgetcontexttokenfn; NTSTATUS Spgetcontexttokenfn( [in] LSA_SEC_HANDLE ContextHandle, [out] PHANDLE ImpersonationToken ) {...}",
            "name": "SpGetContextTokenFn callback"
        },
        {
            "signature": "SpGetCredentialsFn Spgetcredentialsfn; NTSTATUS Spgetcredentialsfn( [in] LSA_SEC_HANDLE CredentialHandle, [out] PSecBuffer Credentials ) {...}",
            "name": "SpGetCredentialsFn callback"
        },
        {
            "signature": "SpGetCredUIContextFn Spgetcreduicontextfn; NTSTATUS Spgetcreduicontextfn( [in] LSA_SEC_HANDLE ContextHandle, [in] GUID *CredType, [out] PULONG FlatCredUIContextLength, [out] PUCHAR *FlatCredUIContext ) {...}",
            "name": "SpGetCredUIContextFn callback"
        },
        {
            "signature": "SpGetExtendedInformationFn Spgetextendedinformationfn; NTSTATUS Spgetextendedinformationfn( [in] SECPKG_EXTENDED_INFORMATION_CLASS Class, [out] PSECPKG_EXTENDED_INFORMATION *ppInformation ) {...}",
            "name": "SpGetExtendedInformationFn callback"
        },
        {
            "signature": "SpGetInfoFn Spgetinfofn; NTSTATUS Spgetinfofn( [out] PSecPkgInfo PackageInfo ) {...}",
            "name": "SpGetInfoFn callback"
        },
        {
            "signature": "SpGetUserInfoFn Spgetuserinfofn; NTSTATUS Spgetuserinfofn( [in] PLUID LogonId, [in] ULONG Flags, [out] PSecurityUserData *UserData ) {...}",
            "name": "SpGetUserInfoFn callback"
        },
        {
            "signature": "SpImportSecurityContextFn Spimportsecuritycontextfn; NTSTATUS Spimportsecuritycontextfn( [in] PSecBuffer pPackedContext, [in] HANDLE Token, [out] PLSA_SEC_HANDLE phContext ) {...}",
            "name": "SpImportSecurityContextFn callback"
        },
        {
            "signature": "SpInitializeFn Spinitializefn; NTSTATUS Spinitializefn( [in] ULONG_PTR PackageId, [in] PSECPKG_PARAMETERS Parameters, [in] PLSA_SECPKG_FUNCTION_TABLE FunctionTable ) {...}",
            "name": "SpInitializeFn callback"
        },
        {
            "signature": "SpInitLsaModeContextFn Spinitlsamodecontextfn; NTSTATUS Spinitlsamodecontextfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] LSA_SEC_HANDLE ContextHandle, [in] PUNICODE_STRING TargetName, [in] ULONG ContextRequirements, [in] ULONG TargetDataRep, [in] PSecBufferDesc InputBuffers, [out] PLSA_SEC_HANDLE NewContextHandle, [out] PSecBufferDesc OutputBuffers, [out] PULONG ContextAttributes, [out] PTimeStamp ExpirationTime, [out] PBOOLEAN MappedContext, [out] PSecBuffer ContextData ) {...}",
            "name": "SpInitLsaModeContextFn callback"
        },
        {
            "signature": "SpInitUserModeContextFn Spinitusermodecontextfn; NTSTATUS Spinitusermodecontextfn( [in] LSA_SEC_HANDLE ContextHandle, [in] PSecBuffer PackedContext ) {...}",
            "name": "SpInitUserModeContextFn callback"
        },
        {
            "signature": "SpInstanceInitFn Spinstanceinitfn; NTSTATUS Spinstanceinitfn( [in] ULONG Version, [in] PSECPKG_DLL_FUNCTIONS FunctionTable, [out] PVOID *UserFunctions ) {...}",
            "name": "SpInstanceInitFn callback"
        },
        {
            "signature": "SpLsaModeInitializeFn Splsamodeinitializefn; NTSTATUS Splsamodeinitializefn( [in] ULONG LsaVersion, [out] PULONG PackageVersion, [out] PSECPKG_FUNCTION_TABLE *ppTables, [out] PULONG pcTables ) {...}",
            "name": "SpLsaModeInitializeFn callback"
        },
        {
            "signature": "SpMarshallSupplementalCredsFn Spmarshallsupplementalcredsfn; NTSTATUS Spmarshallsupplementalcredsfn( [in] ULONG CredentialSize, [in] PUCHAR Credentials, [out] PULONG MarshalledCredSize, [out] PVOID *MarshalledCreds ) {...}",
            "name": "SpMarshallSupplementalCredsFn callback"
        },
        {
            "signature": "SpQueryContextAttributesFn Spquerycontextattributesfn; NTSTATUS Spquerycontextattributesfn( [in] LSA_SEC_HANDLE ContextHandle, [in] ULONG ContextAttribute, [out] PVOID Buffer ) {...}",
            "name": "SpQueryContextAttributesFn callback"
        },
        {
            "signature": "SpQueryCredentialsAttributesFn Spquerycredentialsattributesfn; NTSTATUS Spquerycredentialsattributesfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] ULONG CredentialAttribute, [out] PVOID Buffer ) {...}",
            "name": "SpQueryCredentialsAttributesFn callback"
        },
        {
            "signature": "SpQueryMetaDataFn Spquerymetadatafn; NTSTATUS Spquerymetadatafn( [in] LSA_SEC_HANDLE CredentialHandle, [in, optional] PUNICODE_STRING TargetName, [in] ULONG ContextRequirements, [out] PULONG MetaDataLength, [out] PUCHAR *MetaData, [in, out] PLSA_SEC_HANDLE ContextHandle ) {...}",
            "name": "SpQueryMetaDataFn callback"
        },
        {
            "signature": "SpSaveCredentialsFn Spsavecredentialsfn; NTSTATUS Spsavecredentialsfn( [in] LSA_SEC_HANDLE CredentialHandle, [in] PSecBuffer Credentials ) {...}",
            "name": "SpSaveCredentialsFn callback"
        },
        {
            "signature": "SpSealMessageFn Spsealmessagefn; NTSTATUS Spsealmessagefn( [in] LSA_SEC_HANDLE ContextHandle, [in] ULONG QualityOfProtection, [in, out] PSecBufferDesc MessageBuffers, [in] ULONG MessageSequenceNumber ) {...}",
            "name": "SpSealMessageFn callback"
        },
        {
            "signature": "SpSetExtendedInformationFn Spsetextendedinformationfn; NTSTATUS Spsetextendedinformationfn( [in] SECPKG_EXTENDED_INFORMATION_CLASS Class, [in] PSECPKG_EXTENDED_INFORMATION Info ) {...}",
            "name": "SpSetExtendedInformationFn callback"
        },
        {
            "signature": "SpUnsealMessageFn Spunsealmessagefn; NTSTATUS Spunsealmessagefn( [in] LSA_SEC_HANDLE ContextHandle, [in] PSecBufferDesc MessageBuffers, [in] ULONG MessageSequenceNumber, [out] PULONG QualityOfProtection ) {...}",
            "name": "SpUnsealMessageFn callback"
        },
        {
            "signature": "SpUpdateCredentialsFn Spupdatecredentialsfn; NTSTATUS Spupdatecredentialsfn( [in] LSA_SEC_HANDLE ContextHandle, [in] GUID *CredType, [in] ULONG FlatCredUIContextLength, PUCHAR FlatCredUIContext ) {...}",
            "name": "SpUpdateCredentialsFn callback"
        },
        {
            "signature": "SpUserModeInitializeFn Spusermodeinitializefn; NTSTATUS Spusermodeinitializefn( [in] ULONG LsaVersion, [out] PULONG PackageVersion, [out] PSECPKG_USER_FUNCTION_TABLE *ppTables, [out] PULONG pcTables ) {...}",
            "name": "SpUserModeInitializeFn callback"
        },
        {
            "signature": "SpValidateTargetInfoFn Spvalidatetargetinfofn; NTSTATUS Spvalidatetargetinfofn( [in, optional] PLSA_CLIENT_REQUEST ClientRequest, [in] PVOID ProtocolSubmitBuffer, [in] PVOID ClientBufferBase, [in] ULONG SubmitBufferLength, [in] PSECPKG_TARGETINFO TargetInfo ) {...}",
            "name": "SpValidateTargetInfoFn callback"
        }
    ],
    "Nvme.h": [],
    "Oaidl.h": [
        {
            "signature": "void BSTR_UserFree( [in] unsigned long *unnamedParam1, [in] BSTR *unnamedParam2 );",
            "name": "BSTR_UserFree"
        },
        {
            "signature": "void BSTR_UserFree64( [in] unsigned long *unnamedParam1, [in] BSTR *unnamedParam2 );",
            "name": "BSTR_UserFree64"
        },
        {
            "signature": "unsigned char * BSTR_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] BSTR *unnamedParam3 );",
            "name": "BSTR_UserMarshal"
        },
        {
            "signature": "unsigned char * BSTR_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] BSTR *unnamedParam3 );",
            "name": "BSTR_UserMarshal64"
        },
        {
            "signature": "unsigned long BSTR_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] BSTR *unnamedParam3 );",
            "name": "BSTR_UserSize"
        },
        {
            "signature": "unsigned long BSTR_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] BSTR *unnamedParam3 );",
            "name": "BSTR_UserSize64"
        },
        {
            "signature": "unsigned char * BSTR_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] BSTR *unnamedParam3 );",
            "name": "BSTR_UserUnmarshal"
        },
        {
            "signature": "unsigned char * BSTR_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] BSTR *unnamedParam3 );",
            "name": "BSTR_UserUnmarshal64"
        },
        {
            "signature": "void VARIANT_UserFree( [in] unsigned long *unnamedParam1, [in] VARIANT *unnamedParam2 );",
            "name": "VARIANT_UserFree"
        },
        {
            "signature": "void VARIANT_UserFree64( [in] unsigned long *unnamedParam1, [in] VARIANT *unnamedParam2 );",
            "name": "VARIANT_UserFree64"
        },
        {
            "signature": "unsigned char * VARIANT_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserMarshal"
        },
        {
            "signature": "unsigned char * VARIANT_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserMarshal64"
        },
        {
            "signature": "unsigned long VARIANT_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserSize"
        },
        {
            "signature": "unsigned long VARIANT_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserSize64"
        },
        {
            "signature": "unsigned char * VARIANT_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserUnmarshal"
        },
        {
            "signature": "unsigned char * VARIANT_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] VARIANT *unnamedParam3 );",
            "name": "VARIANT_UserUnmarshal64"
        }
    ],
    "Objbase.h": [
        {
            "signature": "HRESULT BindMoniker( [in] LPMONIKER pmk, [in] DWORD grfOpt, [in] REFIID iidResult, [out] LPVOID *ppvResult );",
            "name": "BindMoniker"
        },
        {
            "signature": "HRESULT CLSIDFromProgIDEx( [in] LPCOLESTR lpszProgID, [out] LPCLSID lpclsid );",
            "name": "CLSIDFromProgIDEx"
        },
        {
            "signature": "HRESULT CoAllowSetForegroundWindow( [in] IUnknown *pUnk, [in] LPVOID lpvReserved );",
            "name": "CoAllowSetForegroundWindow"
        },
        {
            "signature": "BOOL CoDosDateTimeToFileTime( [in] WORD nDosDate, [in] WORD nDosTime, [out] FILETIME *lpFileTime );",
            "name": "CoDosDateTimeToFileTime"
        },
        {
            "signature": "HRESULT CoFileTimeNow( [out] FILETIME *lpFileTime );",
            "name": "CoFileTimeNow"
        },
        {
            "signature": "BOOL CoFileTimeToDosDateTime( [in] FILETIME *lpFileTime, [out] LPWORD lpDosDate, [out] LPWORD lpDosTime );",
            "name": "CoFileTimeToDosDateTime"
        },
        {
            "signature": "void CoFreeAllLibraries();",
            "name": "CoFreeAllLibraries"
        },
        {
            "signature": "void CoFreeLibrary( [in] HINSTANCE hInst );",
            "name": "CoFreeLibrary"
        },
        {
            "signature": "HRESULT CoGetInstanceFromFile( [in, optional] COSERVERINFO *pServerInfo, [in, optional] CLSID *pClsid, [in, optional] IUnknown *punkOuter, [in] DWORD dwClsCtx, [in] DWORD grfMode, [in] OLECHAR *pwszName, [in] DWORD dwCount, [in, out] MULTI_QI *pResults );",
            "name": "CoGetInstanceFromFile"
        },
        {
            "signature": "HRESULT CoGetInstanceFromIStorage( [in, optional] COSERVERINFO *pServerInfo, [in, optional] CLSID *pClsid, [in, optional] IUnknown *punkOuter, [in] DWORD dwClsCtx, [in] IStorage *pstg, [in] DWORD dwCount, [in, out] MULTI_QI *pResults );",
            "name": "CoGetInstanceFromIStorage"
        },
        {
            "signature": "HRESULT CoGetObject( [in] LPCWSTR pszName, [in, optional] BIND_OPTS *pBindOptions, [in] REFIID riid, [out] void **ppv );",
            "name": "CoGetObject"
        },
        {
            "signature": "HRESULT CoGetSystemSecurityPermissions( [in] COMSD comSDType, [out] PSECURITY_DESCRIPTOR *ppSD );",
            "name": "CoGetSystemSecurityPermissions"
        },
        {
            "signature": "HRESULT CoInitialize( [in, optional] LPVOID pvReserved );",
            "name": "CoInitialize"
        },
        {
            "signature": "HRESULT CoInstall( [in] IBindCtx *pbc, [in] DWORD dwFlags, [in] uCLSSPEC *pClassSpec, [in] QUERYCONTEXT *pQuery, [in] LPWSTR pszCodeBase );",
            "name": "CoInstall"
        },
        {
            "signature": "BOOL CoIsOle1Class( [in] REFCLSID rclsid );",
            "name": "CoIsOle1Class"
        },
        {
            "signature": "HINSTANCE CoLoadLibrary( [in] LPOLESTR lpszLibName, [in] BOOL bAutoFree );",
            "name": "CoLoadLibrary"
        },
        {
            "signature": "HRESULT CoRegisterChannelHook( [in] REFGUID ExtensionUuid, [in] IChannelHook *pChannelHook );",
            "name": "CoRegisterChannelHook"
        },
        {
            "signature": "HRESULT CoRegisterInitializeSpy( [in] IInitializeSpy *pSpy, [out] ULARGE_INTEGER *puliCookie );",
            "name": "CoRegisterInitializeSpy"
        },
        {
            "signature": "HRESULT CoRegisterMallocSpy( [in] LPMALLOCSPY pMallocSpy );",
            "name": "CoRegisterMallocSpy"
        },
        {
            "signature": "HRESULT CoRegisterMessageFilter( [in, optional] LPMESSAGEFILTER lpMessageFilter, [out, optional] LPMESSAGEFILTER *lplpMessageFilter );",
            "name": "CoRegisterMessageFilter"
        },
        {
            "signature": "HRESULT CoRevokeInitializeSpy( [in] ULARGE_INTEGER uliCookie );",
            "name": "CoRevokeInitializeSpy"
        },
        {
            "signature": "HRESULT CoRevokeMallocSpy();",
            "name": "CoRevokeMallocSpy"
        },
        {
            "signature": "HRESULT CoTreatAsClass( [in] REFCLSID clsidOld, [in] REFCLSID clsidNew );",
            "name": "CoTreatAsClass"
        },
        {
            "signature": "HRESULT CreateAntiMoniker( [out] LPMONIKER *ppmk );",
            "name": "CreateAntiMoniker"
        },
        {
            "signature": "HRESULT CreateBindCtx( [in] DWORD reserved, [out] LPBC *ppbc );",
            "name": "CreateBindCtx"
        },
        {
            "signature": "HRESULT CreateClassMoniker( [in] REFCLSID rclsid, [out] LPMONIKER *ppmk );",
            "name": "CreateClassMoniker"
        },
        {
            "signature": "HRESULT CreateDataAdviseHolder( [out] LPDATAADVISEHOLDER *ppDAHolder );",
            "name": "CreateDataAdviseHolder"
        },
        {
            "signature": "HRESULT CreateDataCache( [in] LPUNKNOWN pUnkOuter, [in] REFCLSID rclsid, [in] REFIID iid, [out] LPVOID *ppv );",
            "name": "CreateDataCache"
        },
        {
            "signature": "HRESULT CreateFileMoniker( [in] LPCOLESTR lpszPathName, [out] LPMONIKER *ppmk );",
            "name": "CreateFileMoniker"
        },
        {
            "signature": "HRESULT CreateGenericComposite( [in, optional] LPMONIKER pmkFirst, [in, optional] LPMONIKER pmkRest, [out] LPMONIKER *ppmkComposite );",
            "name": "CreateGenericComposite"
        },
        {
            "signature": "HRESULT CreateItemMoniker( [in] LPCOLESTR lpszDelim, [in] LPCOLESTR lpszItem, [out] LPMONIKER *ppmk );",
            "name": "CreateItemMoniker"
        },
        {
            "signature": "HRESULT CreateObjrefMoniker( [in, optional] LPUNKNOWN punk, [out] LPMONIKER *ppmk );",
            "name": "CreateObjrefMoniker"
        },
        {
            "signature": "HRESULT CreatePointerMoniker( [in, optional] LPUNKNOWN punk, [out] LPMONIKER *ppmk );",
            "name": "CreatePointerMoniker"
        },
        {
            "signature": "HRESULT GetClassFile( [in] LPCOLESTR szFilename, [out] CLSID *pclsid );",
            "name": "GetClassFile"
        },
        {
            "signature": "HRESULT GetRunningObjectTable( [in] DWORD reserved, [out] LPRUNNINGOBJECTTABLE *pprot );",
            "name": "GetRunningObjectTable"
        },
        {
            "signature": "HRESULT MkParseDisplayName( [in] LPBC pbc, [in] LPCOLESTR szUserName, [out] ULONG *pchEaten, [out] LPMONIKER *ppmk );",
            "name": "MkParseDisplayName"
        },
        {
            "signature": "HRESULT MonikerCommonPrefixWith( [in] LPMONIKER pmkThis, [in] LPMONIKER pmkOther, [out] LPMONIKER *ppmkCommon );",
            "name": "MonikerCommonPrefixWith"
        },
        {
            "signature": "HRESULT MonikerRelativePathTo( [in] LPMONIKER pmkSrc, [in] LPMONIKER pmkDest, [out] LPMONIKER *ppmkRelPath, [in] BOOL dwReserved );",
            "name": "MonikerRelativePathTo"
        },
        {
            "signature": "HRESULT StgGetIFillLockBytesOnFile( [in] OLECHAR const *pwcsName, [out] IFillLockBytes **ppflb );",
            "name": "StgGetIFillLockBytesOnFile"
        },
        {
            "signature": "HRESULT StgGetIFillLockBytesOnILockBytes( [in] ILockBytes *pilb, [out] IFillLockBytes **ppflb );",
            "name": "StgGetIFillLockBytesOnILockBytes"
        },
        {
            "signature": "HRESULT StgOpenAsyncDocfileOnIFillLockBytes( [in] IFillLockBytes *pflb, [in] DWORD grfMode, [in] DWORD asyncFlags, [out] IStorage **ppstgOpen );",
            "name": "StgOpenAsyncDocfileOnIFillLockBytes"
        },
        {
            "signature": "HRESULT StgOpenLayoutDocfile( [in] OLECHAR const *pwcsDfName, [in] DWORD grfMode, [in] DWORD reserved, [out] IStorage **ppstgOpen );",
            "name": "StgOpenLayoutDocfile"
        }
    ],
    "Objectarray.h": [],
    "Objidl.h": [
        {
            "signature": "void HBITMAP_UserFree( unsigned long *unnamedParam1, HBITMAP *unnamedParam2 );",
            "name": "HBITMAP_UserFree"
        },
        {
            "signature": "void HBITMAP_UserFree64( unsigned long *unnamedParam1, HBITMAP *unnamedParam2 );",
            "name": "HBITMAP_UserFree64"
        },
        {
            "signature": "unsigned char * HBITMAP_UserMarshal( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserMarshal"
        },
        {
            "signature": "unsigned char * HBITMAP_UserMarshal64( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserMarshal64"
        },
        {
            "signature": "unsigned long HBITMAP_UserSize( unsigned long *unnamedParam1, unsigned long unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserSize"
        },
        {
            "signature": "unsigned long HBITMAP_UserSize64( unsigned long *unnamedParam1, unsigned long unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserSize64"
        },
        {
            "signature": "unsigned char * HBITMAP_UserUnmarshal( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HBITMAP_UserUnmarshal64( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HBITMAP *unnamedParam3 );",
            "name": "HBITMAP_UserUnmarshal64"
        }
    ],
    "Objidlbase.h": [],
    "Objpath.h": [],
    "Objsel.h": [],
    "Ocidl.h": [],
    "Ole.h": [
        {
            "signature": "OLESTATUS OleCreate( LPCSTR unnamedParam1, LPOLECLIENT unnamedParam2, LPCSTR unnamedParam3, LHCLIENTDOC unnamedParam4, LPCSTR unnamedParam5, LPOLEOBJECT *unnamedParam6, OLEOPT_RENDER unnamedParam7, OLECLIPFORMAT unnamedParam8 );",
            "name": "OleCreate"
        },
        {
            "signature": "OLESTATUS OleCreateFromFile( LPCSTR unnamedParam1, LPOLECLIENT unnamedParam2, LPCSTR unnamedParam3, LPCSTR unnamedParam4, LHCLIENTDOC unnamedParam5, LPCSTR unnamedParam6, LPOLEOBJECT *unnamedParam7, OLEOPT_RENDER unnamedParam8, OLECLIPFORMAT unnamedParam9 );",
            "name": "OleCreateFromFile"
        },
        {
            "signature": "OLESTATUS OleDraw( LPOLEOBJECT unnamedParam1, HDC unnamedParam2, const RECT *unnamedParam3, const RECT *unnamedParam4, HDC unnamedParam5 );",
            "name": "OleDraw"
        },
        {
            "signature": "OLESTATUS OleLoadFromStream( LPOLESTREAM unnamedParam1, LPCSTR unnamedParam2, LPOLECLIENT unnamedParam3, LHCLIENTDOC unnamedParam4, LPCSTR unnamedParam5, LPOLEOBJECT *unnamedParam6 );",
            "name": "OleLoadFromStream"
        },
        {
            "signature": "OLESTATUS OleSaveToStream( LPOLEOBJECT unnamedParam1, LPOLESTREAM unnamedParam2 );",
            "name": "OleSaveToStream"
        }
    ],
    "Ole2.h": [
        {
            "signature": "HRESULT CreateDataAdviseHolder( [out] LPDATAADVISEHOLDER *ppDAHolder );",
            "name": "CreateDataAdviseHolder"
        },
        {
            "signature": "HRESULT CreateOleAdviseHolder( [out] LPOLEADVISEHOLDER *ppOAHolder );",
            "name": "CreateOleAdviseHolder"
        },
        {
            "signature": "HRESULT DoDragDrop( [in] LPDATAOBJECT pDataObj, [in] LPDROPSOURCE pDropSource, [in] DWORD dwOKEffects, [out] LPDWORD pdwEffect );",
            "name": "DoDragDrop"
        },
        {
            "signature": "BOOL IsAccelerator( [in] HACCEL hAccel, [in] int cAccelEntries, [in] LPMSG lpMsg, [out] WORD *lpwCmd );",
            "name": "IsAccelerator"
        },
        {
            "signature": "DWORD OleBuildVersion();",
            "name": "OleBuildVersion"
        },
        {
            "signature": "HRESULT OleConvertIStorageToOLESTREAM( [in] LPSTORAGE pstg, [out] LPOLESTREAM lpolestream );",
            "name": "OleConvertIStorageToOLESTREAM"
        },
        {
            "signature": "HRESULT OleConvertIStorageToOLESTREAMEx( [in] LPSTORAGE pstg, [in] CLIPFORMAT cfFormat, [in] LONG lWidth, [in] LONG lHeight, [in] DWORD dwSize, [in] LPSTGMEDIUM pmedium, [out] LPOLESTREAM polestm );",
            "name": "OleConvertIStorageToOLESTREAMEx"
        },
        {
            "signature": "HRESULT OleConvertOLESTREAMToIStorage( [in] LPOLESTREAM lpolestream, [out] LPSTORAGE pstg, [in] const DVTARGETDEVICE *ptd );",
            "name": "OleConvertOLESTREAMToIStorage"
        },
        {
            "signature": "HRESULT OleConvertOLESTREAMToIStorageEx( [in] LPOLESTREAM polestm, [out] LPSTORAGE pstg, [out] CLIPFORMAT *pcfFormat, [out] LONG *plwWidth, [out] LONG *plHeight, [out] DWORD *pdwSize, [out] LPSTGMEDIUM pmedium );",
            "name": "OleConvertOLESTREAMToIStorageEx"
        },
        {
            "signature": "HRESULT OleCreate( [in] REFCLSID rclsid, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC pFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreate"
        },
        {
            "signature": "HRESULT OleCreateDefaultHandler( [in] REFCLSID clsid, [in] LPUNKNOWN pUnkOuter, [in] REFIID riid, [out] LPVOID *lplpObj );",
            "name": "OleCreateDefaultHandler"
        },
        {
            "signature": "HRESULT OleCreateEmbeddingHelper( [in] REFCLSID clsid, [in] LPUNKNOWN pUnkOuter, [in] DWORD flags, [in] LPCLASSFACTORY pCF, [in] REFIID riid, [out] LPVOID *lplpObj );",
            "name": "OleCreateEmbeddingHelper"
        },
        {
            "signature": "HRESULT OleCreateEx( [in] REFCLSID rclsid, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateEx"
        },
        {
            "signature": "HRESULT OleCreateFromData( [in] LPDATAOBJECT pSrcDataObj, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC pFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateFromData"
        },
        {
            "signature": "HRESULT OleCreateFromDataEx( [in] LPDATAOBJECT pSrcDataObj, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateFromDataEx"
        },
        {
            "signature": "HRESULT OleCreateFromFile( [in] REFCLSID rclsid, [in] LPCOLESTR lpszFileName, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC lpFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateFromFile"
        },
        {
            "signature": "HRESULT OleCreateFromFileEx( [in] REFCLSID rclsid, [in] LPCOLESTR lpszFileName, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateFromFileEx"
        },
        {
            "signature": "HRESULT OleCreateLink( [in] LPMONIKER pmkLinkSrc, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC lpFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLink"
        },
        {
            "signature": "HRESULT OleCreateLinkEx( [in] LPMONIKER pmkLinkSrc, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLinkEx"
        },
        {
            "signature": "HRESULT OleCreateLinkFromData( [in] LPDATAOBJECT pSrcDataObj, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC pFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLinkFromData"
        },
        {
            "signature": "HRESULT OleCreateLinkFromDataEx( [in] LPDATAOBJECT pSrcDataObj, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [in, out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLinkFromDataEx"
        },
        {
            "signature": "HRESULT OleCreateLinkToFile( [in] LPCOLESTR lpszFileName, [in] REFIID riid, [in] DWORD renderopt, [in] LPFORMATETC lpFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLinkToFile"
        },
        {
            "signature": "HRESULT OleCreateLinkToFileEx( [in] LPCOLESTR lpszFileName, [in] REFIID riid, [in] DWORD dwFlags, [in] DWORD renderopt, [in] ULONG cFormats, [in] DWORD *rgAdvf, [in] LPFORMATETC rgFormatEtc, [in] IAdviseSink *lpAdviseSink, [out] DWORD *rgdwConnection, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateLinkToFileEx"
        },
        {
            "signature": "HOLEMENU OleCreateMenuDescriptor( [in] HMENU hmenuCombined, [in] LPOLEMENUGROUPWIDTHS lpMenuWidths );",
            "name": "OleCreateMenuDescriptor"
        },
        {
            "signature": "HRESULT OleCreateStaticFromData( [in] LPDATAOBJECT pSrcDataObj, [in] REFIID iid, [in] DWORD renderopt, [in] LPFORMATETC pFormatEtc, [in] LPOLECLIENTSITE pClientSite, [in] LPSTORAGE pStg, [out] LPVOID *ppvObj );",
            "name": "OleCreateStaticFromData"
        },
        {
            "signature": "HRESULT OleDestroyMenuDescriptor( [in] HOLEMENU holemenu );",
            "name": "OleDestroyMenuDescriptor"
        },
        {
            "signature": "HRESULT OleDoAutoConvert( [in] LPSTORAGE pStg, [out] LPCLSID pClsidNew );",
            "name": "OleDoAutoConvert"
        },
        {
            "signature": "HRESULT OleDraw( [in] LPUNKNOWN pUnknown, [in] DWORD dwAspect, [in] HDC hdcDraw, [in] LPCRECT lprcBounds );",
            "name": "OleDraw"
        },
        {
            "signature": "HANDLE OleDuplicateData( [in] HANDLE hSrc, [in] CLIPFORMAT cfFormat, [in] UINT uiFlags );",
            "name": "OleDuplicateData"
        },
        {
            "signature": "HRESULT OleFlushClipboard();",
            "name": "OleFlushClipboard"
        },
        {
            "signature": "HRESULT OleGetAutoConvert( [in] REFCLSID clsidOld, [out] LPCLSID pClsidNew );",
            "name": "OleGetAutoConvert"
        },
        {
            "signature": "HRESULT OleGetClipboard( [out] LPDATAOBJECT *ppDataObj );",
            "name": "OleGetClipboard"
        },
        {
            "signature": "HRESULT OleGetClipboardWithEnterpriseInfo( [out] IDataObject **dataObject, [out] PWSTR *dataEnterpriseId, [out] PWSTR *sourceDescription, [out] PWSTR *targetDescription, [out] PWSTR *dataDescription );",
            "name": "OleGetClipboardWithEnterpriseInfo"
        },
        {
            "signature": "HGLOBAL OleGetIconOfClass( [in] REFCLSID rclsid, [in, optional] LPOLESTR lpszLabel, [in] BOOL fUseTypeAsLabel );",
            "name": "OleGetIconOfClass"
        },
        {
            "signature": "HGLOBAL OleGetIconOfFile( [in] LPOLESTR lpszPath, [in] BOOL fUseFileAsLabel );",
            "name": "OleGetIconOfFile"
        },
        {
            "signature": "HRESULT OleInitialize( [in] LPVOID pvReserved );",
            "name": "OleInitialize"
        },
        {
            "signature": "HRESULT OleIsCurrentClipboard( [in] LPDATAOBJECT pDataObj );",
            "name": "OleIsCurrentClipboard"
        },
        {
            "signature": "BOOL OleIsRunning( [in] LPOLEOBJECT pObject );",
            "name": "OleIsRunning"
        },
        {
            "signature": "HRESULT OleLoad( [in] LPSTORAGE pStg, [in] REFIID riid, [in] LPOLECLIENTSITE pClientSite, [out] LPVOID *ppvObj );",
            "name": "OleLoad"
        },
        {
            "signature": "HRESULT OleLoadFromStream( [in] LPSTREAM pStm, [in] REFIID iidInterface, [out] LPVOID *ppvObj );",
            "name": "OleLoadFromStream"
        },
        {
            "signature": "HRESULT OleLockRunning( [in] LPUNKNOWN pUnknown, [in] BOOL fLock, [in] BOOL fLastUnlockCloses );",
            "name": "OleLockRunning"
        },
        {
            "signature": "HGLOBAL OleMetafilePictFromIconAndLabel( [in] HICON hIcon, [in] LPOLESTR lpszLabel, [in] LPOLESTR lpszSourceFile, [in] UINT iIconIndex );",
            "name": "OleMetafilePictFromIconAndLabel"
        },
        {
            "signature": "HRESULT OleNoteObjectVisible( [in] LPUNKNOWN pUnknown, [in] BOOL fVisible );",
            "name": "OleNoteObjectVisible"
        },
        {
            "signature": "HRESULT OleQueryCreateFromData( [in] LPDATAOBJECT pSrcDataObject );",
            "name": "OleQueryCreateFromData"
        },
        {
            "signature": "HRESULT OleQueryLinkFromData( [in] LPDATAOBJECT pSrcDataObject );",
            "name": "OleQueryLinkFromData"
        },
        {
            "signature": "HRESULT OleRegEnumFormatEtc( [in] REFCLSID clsid, [in] DWORD dwDirection, [out] LPENUMFORMATETC *ppenum );",
            "name": "OleRegEnumFormatEtc"
        },
        {
            "signature": "HRESULT OleRegEnumVerbs( [in] REFCLSID clsid, [out] LPENUMOLEVERB *ppenum );",
            "name": "OleRegEnumVerbs"
        },
        {
            "signature": "HRESULT OleRegGetMiscStatus( [in] REFCLSID clsid, [in] DWORD dwAspect, [out] DWORD *pdwStatus );",
            "name": "OleRegGetMiscStatus"
        },
        {
            "signature": "HRESULT OleRegGetUserType( [in] REFCLSID clsid, [in] DWORD dwFormOfType, [out] LPOLESTR *pszUserType );",
            "name": "OleRegGetUserType"
        },
        {
            "signature": "HRESULT OleRun( [in] LPUNKNOWN pUnknown );",
            "name": "OleRun"
        },
        {
            "signature": "HRESULT OleSave( [in] LPPERSISTSTORAGE pPS, [in] LPSTORAGE pStg, [in] BOOL fSameAsLoad );",
            "name": "OleSave"
        },
        {
            "signature": "HRESULT OleSaveToStream( [in] LPPERSISTSTREAM pPStm, [in] LPSTREAM pStm );",
            "name": "OleSaveToStream"
        },
        {
            "signature": "HRESULT OleSetAutoConvert( [in] REFCLSID clsidOld, [in] REFCLSID clsidNew );",
            "name": "OleSetAutoConvert"
        },
        {
            "signature": "HRESULT OleSetClipboard( [in] LPDATAOBJECT pDataObj );",
            "name": "OleSetClipboard"
        },
        {
            "signature": "HRESULT OleSetContainedObject( [in] LPUNKNOWN pUnknown, [in] BOOL fContained );",
            "name": "OleSetContainedObject"
        },
        {
            "signature": "HRESULT OleSetMenuDescriptor( [in] HOLEMENU holemenu, [in] HWND hwndFrame, [in] HWND hwndActiveObject, [in] LPOLEINPLACEFRAME lpFrame, [in] LPOLEINPLACEACTIVEOBJECT lpActiveObj );",
            "name": "OleSetMenuDescriptor"
        },
        {
            "signature": "HRESULT OleTranslateAccelerator( [in] LPOLEINPLACEFRAME lpFrame, [in] LPOLEINPLACEFRAMEINFO lpFrameInfo, [in] LPMSG lpmsg );",
            "name": "OleTranslateAccelerator"
        },
        {
            "signature": "void OleUninitialize();",
            "name": "OleUninitialize"
        },
        {
            "signature": "HRESULT ReadFmtUserTypeStg( [in] LPSTORAGE pstg, [out] CLIPFORMAT *pcf, [out] LPOLESTR *lplpszUserType );",
            "name": "ReadFmtUserTypeStg"
        },
        {
            "signature": "HRESULT RegisterDragDrop( [in] HWND hwnd, [in] LPDROPTARGET pDropTarget );",
            "name": "RegisterDragDrop"
        },
        {
            "signature": "void ReleaseStgMedium( LPSTGMEDIUM unnamedParam1 );",
            "name": "ReleaseStgMedium"
        },
        {
            "signature": "HRESULT RevokeDragDrop( [in] HWND hwnd );",
            "name": "RevokeDragDrop"
        },
        {
            "signature": "HRESULT SetConvertStg( LPSTORAGE pStg, BOOL fConvert );",
            "name": "SetConvertStg"
        },
        {
            "signature": "HRESULT WriteFmtUserTypeStg( [in] LPSTORAGE pstg, [in] CLIPFORMAT cf, [in] LPOLESTR lpszUserType );",
            "name": "WriteFmtUserTypeStg"
        }
    ],
    "Oleacc.h": [
        {
            "signature": "HRESULT AccessibleChildren( [in] IAccessible *paccContainer, [in] LONG iChildStart, [in] LONG cChildren, [out] VARIANT *rgvarChildren, [out] LONG *pcObtained );",
            "name": "AccessibleChildren"
        },
        {
            "signature": "HRESULT AccessibleObjectFromEvent( [in] HWND hwnd, [in] DWORD dwId, [in] DWORD dwChildId, [out] IAccessible **ppacc, [out] VARIANT *pvarChild );",
            "name": "AccessibleObjectFromEvent"
        },
        {
            "signature": "HRESULT AccessibleObjectFromPoint( [in] POINT ptScreen, [out] IAccessible **ppacc, [out] VARIANT *pvarChild );",
            "name": "AccessibleObjectFromPoint"
        },
        {
            "signature": "HRESULT AccessibleObjectFromWindow( [in] HWND hwnd, [in] DWORD dwId, [in] REFIID riid, [out] void **ppvObject );",
            "name": "AccessibleObjectFromWindow"
        },
        {
            "signature": "HRESULT AccNotifyTouchInteraction( [in] HWND hwndApp, [in] HWND hwndTarget, [in] POINT ptTarget );",
            "name": "AccNotifyTouchInteraction"
        },
        {
            "signature": "HRESULT AccSetRunningUtilityState( [in] HWND hwndApp, [in] DWORD dwUtilityStateMask, [in] DWORD dwUtilityState );",
            "name": "AccSetRunningUtilityState"
        },
        {
            "signature": "HRESULT CreateStdAccessibleObject( [in] HWND hwnd, [in] LONG idObject, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CreateStdAccessibleObject"
        },
        {
            "signature": "HRESULT CreateStdAccessibleProxyA( [in] HWND hwnd, [in] LPCSTR pClassName, [in] LONG idObject, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CreateStdAccessibleProxyA"
        },
        {
            "signature": "HRESULT CreateStdAccessibleProxyW( [in] HWND hwnd, [in] LPCWSTR pClassName, [in] LONG idObject, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CreateStdAccessibleProxyW"
        },
        {
            "signature": "void GetOleaccVersionInfo( [out] DWORD *pVer, [out] DWORD *pBuild );",
            "name": "GetOleaccVersionInfo"
        },
        {
            "signature": "UINT GetRoleTextA( [in] DWORD lRole, [out] LPSTR lpszRole, [in] UINT cchRoleMax );",
            "name": "GetRoleTextA"
        },
        {
            "signature": "UINT GetRoleTextW( [in] DWORD lRole, [out] LPWSTR lpszRole, [in] UINT cchRoleMax );",
            "name": "GetRoleTextW"
        },
        {
            "signature": "UINT GetStateTextA( [in] DWORD lStateBit, [out] LPSTR lpszState, [in] UINT cchState );",
            "name": "GetStateTextA"
        },
        {
            "signature": "UINT GetStateTextW( [in] DWORD lStateBit, [out] LPWSTR lpszState, [in] UINT cchState );",
            "name": "GetStateTextW"
        },
        {
            "signature": "LRESULT LresultFromObject( [in] REFIID riid, [in] WPARAM wParam, [in] LPUNKNOWN punk );",
            "name": "LresultFromObject"
        },
        {
            "signature": "HRESULT ObjectFromLresult( [in] LRESULT lResult, [in] REFIID riid, [in] WPARAM wParam, [out] void **ppvObject );",
            "name": "ObjectFromLresult"
        },
        {
            "signature": "HRESULT WindowFromAccessibleObject( [in] IAccessible *unnamedParam1, [out] HWND *phwnd );",
            "name": "WindowFromAccessibleObject"
        }
    ],
    "Oleauto.h": [
        {
            "signature": "HRESULT BstrFromVector( [in] SAFEARRAY *psa, [out] BSTR *pbstr );",
            "name": "BstrFromVector"
        },
        {
            "signature": "void ClearCustData( LPCUSTDATA pCustData );",
            "name": "ClearCustData"
        },
        {
            "signature": "HRESULT CreateDispTypeInfo( INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo );",
            "name": "CreateDispTypeInfo"
        },
        {
            "signature": "HRESULT CreateErrorInfo( [out] ICreateErrorInfo **pperrinfo );",
            "name": "CreateErrorInfo"
        },
        {
            "signature": "HRESULT CreateStdDispatch( IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp );",
            "name": "CreateStdDispatch"
        },
        {
            "signature": "HRESULT CreateTypeLib( SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib );",
            "name": "CreateTypeLib"
        },
        {
            "signature": "HRESULT CreateTypeLib2( SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib );",
            "name": "CreateTypeLib2"
        },
        {
            "signature": "HRESULT DispCallFunc( void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult );",
            "name": "DispCallFunc"
        },
        {
            "signature": "HRESULT DispGetIDsOfNames( ITypeInfo *ptinfo, [in] LPOLESTR *rgszNames, UINT cNames, [out] DISPID *rgdispid );",
            "name": "DispGetIDsOfNames"
        },
        {
            "signature": "HRESULT DispGetParam( [in] DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, [out] VARIANT *pvarResult, [out, optional] UINT *puArgErr );",
            "name": "DispGetParam"
        },
        {
            "signature": "HRESULT DispInvoke( void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr );",
            "name": "DispInvoke"
        },
        {
            "signature": "INT DosDateTimeToVariantTime( [in] USHORT wDosDate, [in] USHORT wDosTime, [out] DOUBLE *pvtime );",
            "name": "DosDateTimeToVariantTime"
        },
        {
            "signature": "HRESULT GetActiveObject( [in] REFCLSID rclsid, void *pvReserved, [out] IUnknown **ppunk );",
            "name": "GetActiveObject"
        },
        {
            "signature": "HRESULT GetAltMonthNames( [in] LCID lcid, [out] LPOLESTR **prgp );",
            "name": "GetAltMonthNames"
        },
        {
            "signature": "HRESULT GetErrorInfo( [in] ULONG dwReserved, [out] IErrorInfo **pperrinfo );",
            "name": "GetErrorInfo"
        },
        {
            "signature": "HRESULT GetRecordInfoFromGuids( [in] REFGUID rGuidTypeLib, [in] ULONG uVerMajor, [in] ULONG uVerMinor, [in] LCID lcid, [in] REFGUID rGuidTypeInfo, [out] IRecordInfo **ppRecInfo );",
            "name": "GetRecordInfoFromGuids"
        },
        {
            "signature": "HRESULT GetRecordInfoFromTypeInfo( [in] ITypeInfo *pTypeInfo, [out] IRecordInfo **ppRecInfo );",
            "name": "GetRecordInfoFromTypeInfo"
        },
        {
            "signature": "ULONG LHashValOfNameSys( SYSKIND syskind, LCID lcid, const OLECHAR *szName );",
            "name": "LHashValOfNameSys"
        },
        {
            "signature": "ULONG LHashValOfNameSysA( SYSKIND syskind, LCID lcid, LPCSTR szName );",
            "name": "LHashValOfNameSysA"
        },
        {
            "signature": "HRESULT LoadRegTypeLib( REFGUID rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib );",
            "name": "LoadRegTypeLib"
        },
        {
            "signature": "HRESULT LoadTypeLib( LPCOLESTR szFile, ITypeLib **pptlib );",
            "name": "LoadTypeLib"
        },
        {
            "signature": "HRESULT LoadTypeLibEx( LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib );",
            "name": "LoadTypeLibEx"
        },
        {
            "signature": "ULONG OaBuildVersion();",
            "name": "OaBuildVersion"
        },
        {
            "signature": "void OaEnablePerUserTLibRegistration();",
            "name": "OaEnablePerUserTLibRegistration"
        },
        {
            "signature": "HRESULT QueryPathOfRegTypeLib( REFGUID guid, USHORT wMaj, USHORT wMin, LCID lcid, [out] LPBSTR lpbstrPathName );",
            "name": "QueryPathOfRegTypeLib"
        },
        {
            "signature": "HRESULT RegisterActiveObject( IUnknown *punk, REFCLSID rclsid, DWORD dwFlags, DWORD *pdwRegister );",
            "name": "RegisterActiveObject"
        },
        {
            "signature": "HRESULT RegisterTypeLib( ITypeLib *ptlib, [in] LPCOLESTR szFullPath, [in, optional] LPCOLESTR szHelpDir );",
            "name": "RegisterTypeLib"
        },
        {
            "signature": "HRESULT RegisterTypeLibForUser( ITypeLib *ptlib, [in] OLECHAR *szFullPath, [in, optional] OLECHAR *szHelpDir );",
            "name": "RegisterTypeLibForUser"
        },
        {
            "signature": "HRESULT RevokeActiveObject( [in] DWORD dwRegister, void *pvReserved );",
            "name": "RevokeActiveObject"
        },
        {
            "signature": "HRESULT SafeArrayAccessData( [in] SAFEARRAY *psa, [out] void HUGEP **ppvData );",
            "name": "SafeArrayAccessData"
        },
        {
            "signature": "HRESULT SafeArrayAddRef( [in] SAFEARRAY *psa, [out] PVOID *ppDataToRelease );",
            "name": "SafeArrayAddRef"
        },
        {
            "signature": "HRESULT SafeArrayAllocData( [in] SAFEARRAY *psa );",
            "name": "SafeArrayAllocData"
        },
        {
            "signature": "HRESULT SafeArrayAllocDescriptor( [in] UINT cDims, [out] SAFEARRAY **ppsaOut );",
            "name": "SafeArrayAllocDescriptor"
        },
        {
            "signature": "HRESULT SafeArrayAllocDescriptorEx( [in] VARTYPE vt, [in] UINT cDims, [out] SAFEARRAY **ppsaOut );",
            "name": "SafeArrayAllocDescriptorEx"
        },
        {
            "signature": "HRESULT SafeArrayCopy( [in] SAFEARRAY *psa, [out] SAFEARRAY **ppsaOut );",
            "name": "SafeArrayCopy"
        },
        {
            "signature": "HRESULT SafeArrayCopyData( [in] SAFEARRAY *psaSource, [in] SAFEARRAY *psaTarget );",
            "name": "SafeArrayCopyData"
        },
        {
            "signature": "SAFEARRAY * SafeArrayCreate( [in] VARTYPE vt, [in] UINT cDims, [in] SAFEARRAYBOUND *rgsabound );",
            "name": "SafeArrayCreate"
        },
        {
            "signature": "SAFEARRAY * SafeArrayCreateEx( [in] VARTYPE vt, [in] UINT cDims, [in] SAFEARRAYBOUND *rgsabound, [in] PVOID pvExtra );",
            "name": "SafeArrayCreateEx"
        },
        {
            "signature": "SAFEARRAY * SafeArrayCreateVector( [in] VARTYPE vt, [in] LONG lLbound, [in] ULONG cElements );",
            "name": "SafeArrayCreateVector"
        },
        {
            "signature": "SAFEARRAY * SafeArrayCreateVectorEx( [in] VARTYPE vt, [in] LONG lLbound, [in] ULONG cElements, [in] PVOID pvExtra );",
            "name": "SafeArrayCreateVectorEx"
        },
        {
            "signature": "HRESULT SafeArrayDestroy( [in] SAFEARRAY *psa );",
            "name": "SafeArrayDestroy"
        },
        {
            "signature": "HRESULT SafeArrayDestroyData( [in] SAFEARRAY *psa );",
            "name": "SafeArrayDestroyData"
        },
        {
            "signature": "HRESULT SafeArrayDestroyDescriptor( [in] SAFEARRAY *psa );",
            "name": "SafeArrayDestroyDescriptor"
        },
        {
            "signature": "UINT SafeArrayGetDim( [in] SAFEARRAY *psa );",
            "name": "SafeArrayGetDim"
        },
        {
            "signature": "HRESULT SafeArrayGetElement( [in] SAFEARRAY *psa, [in] LONG *rgIndices, [out] void *pv );",
            "name": "SafeArrayGetElement"
        },
        {
            "signature": "UINT SafeArrayGetElemsize( [in] SAFEARRAY *psa );",
            "name": "SafeArrayGetElemsize"
        },
        {
            "signature": "HRESULT SafeArrayGetIID( [in] SAFEARRAY *psa, [out] GUID *pguid );",
            "name": "SafeArrayGetIID"
        },
        {
            "signature": "HRESULT SafeArrayGetLBound( [in] SAFEARRAY *psa, [in] UINT nDim, [out] LONG *plLbound );",
            "name": "SafeArrayGetLBound"
        },
        {
            "signature": "HRESULT SafeArrayGetRecordInfo( [in] SAFEARRAY *psa, [out] IRecordInfo **prinfo );",
            "name": "SafeArrayGetRecordInfo"
        },
        {
            "signature": "HRESULT SafeArrayGetUBound( [in] SAFEARRAY *psa, [in] UINT nDim, [out] LONG *plUbound );",
            "name": "SafeArrayGetUBound"
        },
        {
            "signature": "HRESULT SafeArrayGetVartype( [in] SAFEARRAY *psa, [out] VARTYPE *pvt );",
            "name": "SafeArrayGetVartype"
        },
        {
            "signature": "HRESULT SafeArrayLock( [in] SAFEARRAY *psa );",
            "name": "SafeArrayLock"
        },
        {
            "signature": "HRESULT SafeArrayPtrOfIndex( [in] SAFEARRAY *psa, [in] LONG *rgIndices, [out] void **ppvData );",
            "name": "SafeArrayPtrOfIndex"
        },
        {
            "signature": "HRESULT SafeArrayPutElement( [in] SAFEARRAY *psa, [in] LONG *rgIndices, [in] void *pv );",
            "name": "SafeArrayPutElement"
        },
        {
            "signature": "HRESULT SafeArrayRedim( [in, out] SAFEARRAY *psa, [in] SAFEARRAYBOUND *psaboundNew );",
            "name": "SafeArrayRedim"
        },
        {
            "signature": "void SafeArrayReleaseData( [in] PVOID pData );",
            "name": "SafeArrayReleaseData"
        },
        {
            "signature": "void SafeArrayReleaseDescriptor( [in] SAFEARRAY *psa );",
            "name": "SafeArrayReleaseDescriptor"
        },
        {
            "signature": "HRESULT SafeArraySetIID( [in] SAFEARRAY *psa, [in] REFGUID guid );",
            "name": "SafeArraySetIID"
        },
        {
            "signature": "HRESULT SafeArraySetRecordInfo( [in] SAFEARRAY *psa, [in] IRecordInfo *prinfo );",
            "name": "SafeArraySetRecordInfo"
        },
        {
            "signature": "HRESULT SafeArrayUnaccessData( [in] SAFEARRAY *psa );",
            "name": "SafeArrayUnaccessData"
        },
        {
            "signature": "HRESULT SafeArrayUnlock( [in] SAFEARRAY *psa );",
            "name": "SafeArrayUnlock"
        },
        {
            "signature": "HRESULT SetErrorInfo( [in] ULONG dwReserved, [in, optional] IErrorInfo *perrinfo );",
            "name": "SetErrorInfo"
        },
        {
            "signature": "HRESULT SysAddRefString( [in] BSTR bstrString );",
            "name": "SysAddRefString"
        },
        {
            "signature": "BSTR SysAllocString( [in, optional] const OLECHAR *psz );",
            "name": "SysAllocString"
        },
        {
            "signature": "BSTR SysAllocStringByteLen( [in, optional] LPCSTR psz, [in] UINT len );",
            "name": "SysAllocStringByteLen"
        },
        {
            "signature": "BSTR SysAllocStringLen( [in] const OLECHAR *strIn, [in] UINT ui );",
            "name": "SysAllocStringLen"
        },
        {
            "signature": "void SysFreeString( [in, optional] BSTR bstrString );",
            "name": "SysFreeString"
        },
        {
            "signature": "INT SysReAllocString( [in, out] BSTR *pbstr, [in, optional] const OLECHAR *psz );",
            "name": "SysReAllocString"
        },
        {
            "signature": "INT SysReAllocStringLen( [in, out] BSTR *pbstr, [in, optional] const OLECHAR *psz, [in] unsigned int len );",
            "name": "SysReAllocStringLen"
        },
        {
            "signature": "void SysReleaseString( [in] BSTR bstrString );",
            "name": "SysReleaseString"
        },
        {
            "signature": "UINT SysStringByteLen( [in, optional] BSTR bstr );",
            "name": "SysStringByteLen"
        },
        {
            "signature": "UINT SysStringLen( [in, optional] BSTR pbstr );",
            "name": "SysStringLen"
        },
        {
            "signature": "INT SystemTimeToVariantTime( [in] LPSYSTEMTIME lpSystemTime, [out] DOUBLE *pvtime );",
            "name": "SystemTimeToVariantTime"
        },
        {
            "signature": "HRESULT UnRegisterTypeLib( REFGUID libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind );",
            "name": "UnRegisterTypeLib"
        },
        {
            "signature": "HRESULT UnRegisterTypeLibForUser( REFGUID libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind );",
            "name": "UnRegisterTypeLibForUser"
        },
        {
            "signature": "HRESULT VarAbs( [in] LPVARIANT pvarIn, [out] LPVARIANT pvarResult );",
            "name": "VarAbs"
        },
        {
            "signature": "HRESULT VarAdd( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarAdd"
        },
        {
            "signature": "HRESULT VarAnd( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarAnd"
        },
        {
            "signature": "HRESULT VarBoolFromCy( [in] CY cyIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromCy"
        },
        {
            "signature": "HRESULT VarBoolFromDate( [in] DATE dateIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromDate"
        },
        {
            "signature": "HRESULT VarBoolFromDec( [in] const DECIMAL *pdecIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromDec"
        },
        {
            "signature": "HRESULT VarBoolFromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromDisp"
        },
        {
            "signature": "HRESULT VarBoolFromI1( [in] CHAR cIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromI1"
        },
        {
            "signature": "HRESULT VarBoolFromI2( [in] SHORT sIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromI2"
        },
        {
            "signature": "HRESULT VarBoolFromI4( [in] LONG lIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromI4"
        },
        {
            "signature": "HRESULT VarBoolFromI8( [in] LONG64 i64In, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromI8"
        },
        {
            "signature": "HRESULT VarBoolFromR4( [in] FLOAT fltIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromR4"
        },
        {
            "signature": "HRESULT VarBoolFromR8( [in] DOUBLE dblIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromR8"
        },
        {
            "signature": "HRESULT VarBoolFromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromStr"
        },
        {
            "signature": "HRESULT VarBoolFromUI1( [in] BYTE bIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromUI1"
        },
        {
            "signature": "HRESULT VarBoolFromUI2( [in] USHORT uiIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromUI2"
        },
        {
            "signature": "HRESULT VarBoolFromUI4( [in] ULONG ulIn, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromUI4"
        },
        {
            "signature": "HRESULT VarBoolFromUI8( [in] ULONG64 i64In, [out] VARIANT_BOOL *pboolOut );",
            "name": "VarBoolFromUI8"
        },
        {
            "signature": "HRESULT VarBstrCat( [in] BSTR bstrLeft, [in] BSTR bstrRight, [out] LPBSTR pbstrResult );",
            "name": "VarBstrCat"
        },
        {
            "signature": "HRESULT VarBstrCmp( [in] BSTR bstrLeft, [in] BSTR bstrRight, [in] LCID lcid, [in] ULONG dwFlags );",
            "name": "VarBstrCmp"
        },
        {
            "signature": "HRESULT VarBstrFromBool( [in] VARIANT_BOOL boolIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromBool"
        },
        {
            "signature": "HRESULT VarBstrFromCy( [in] CY cyIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromCy"
        },
        {
            "signature": "HRESULT VarBstrFromDate( [in] DATE dateIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromDate"
        },
        {
            "signature": "HRESULT VarBstrFromDec( [in] const DECIMAL *pdecIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromDec"
        },
        {
            "signature": "HRESULT VarBstrFromDisp( IDispatch *pdispIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromDisp"
        },
        {
            "signature": "HRESULT VarBstrFromI1( [in] CHAR cIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromI1"
        },
        {
            "signature": "HRESULT VarBstrFromI2( [in] SHORT iVal, [in] LCID lcid, [in] ULONG dwFlags, BSTR *pbstrOut );",
            "name": "VarBstrFromI2"
        },
        {
            "signature": "HRESULT VarBstrFromI4( [in] LONG lIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromI4"
        },
        {
            "signature": "HRESULT VarBstrFromI8( [in] LONG64 i64In, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromI8"
        },
        {
            "signature": "HRESULT VarBstrFromR4( [in] FLOAT fltIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromR4"
        },
        {
            "signature": "HRESULT VarBstrFromR8( [in] DOUBLE dblIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromR8"
        },
        {
            "signature": "HRESULT VarBstrFromUI1( [in] BYTE bVal, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromUI1"
        },
        {
            "signature": "HRESULT VarBstrFromUI2( [in] USHORT uiIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromUI2"
        },
        {
            "signature": "HRESULT VarBstrFromUI4( [in] ULONG ulIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromUI4"
        },
        {
            "signature": "HRESULT VarBstrFromUI8( [in] ULONG64 ui64In, [in] LCID lcid, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarBstrFromUI8"
        },
        {
            "signature": "HRESULT VarCat( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarCat"
        },
        {
            "signature": "HRESULT VarCmp( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [in] LCID lcid, [in] ULONG dwFlags );",
            "name": "VarCmp"
        },
        {
            "signature": "HRESULT VarCyAbs( [in] CY cyIn, [out] LPCY pcyResult );",
            "name": "VarCyAbs"
        },
        {
            "signature": "HRESULT VarCyAdd( [in] CY cyLeft, [in] CY cyRight, [out] LPCY pcyResult );",
            "name": "VarCyAdd"
        },
        {
            "signature": "HRESULT VarCyCmp( [in] CY cyLeft, [in] CY cyRight );",
            "name": "VarCyCmp"
        },
        {
            "signature": "HRESULT VarCyCmpR8( [in] CY cyLeft, [in] double dblRight );",
            "name": "VarCyCmpR8"
        },
        {
            "signature": "HRESULT VarCyFix( [in] CY cyIn, [out] LPCY pcyResult );",
            "name": "VarCyFix"
        },
        {
            "signature": "HRESULT VarCyFromBool( [in] VARIANT_BOOL boolIn, [out] CY *pcyOut );",
            "name": "VarCyFromBool"
        },
        {
            "signature": "HRESULT VarCyFromDate( [in] DATE dateIn, [out] CY *pcyOut );",
            "name": "VarCyFromDate"
        },
        {
            "signature": "HRESULT VarCyFromDec( [in] const DECIMAL *pdecIn, [out] CY *pcyOut );",
            "name": "VarCyFromDec"
        },
        {
            "signature": "HRESULT VarCyFromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] CY *pcyOut );",
            "name": "VarCyFromDisp"
        },
        {
            "signature": "HRESULT VarCyFromI1( [in] CHAR cIn, [out] CY *pcyOut );",
            "name": "VarCyFromI1"
        },
        {
            "signature": "HRESULT VarCyFromI2( [in] SHORT sIn, [out] CY *pcyOut );",
            "name": "VarCyFromI2"
        },
        {
            "signature": "HRESULT VarCyFromI4( [in] LONG lIn, [out] CY *pcyOut );",
            "name": "VarCyFromI4"
        },
        {
            "signature": "HRESULT VarCyFromI8( [in] LONG64 i64In, [out] CY *pcyOut );",
            "name": "VarCyFromI8"
        },
        {
            "signature": "HRESULT VarCyFromR4( [in] FLOAT fltIn, [out] CY *pcyOut );",
            "name": "VarCyFromR4"
        },
        {
            "signature": "HRESULT VarCyFromR8( [in] DOUBLE dblIn, [out] CY *pcyOut );",
            "name": "VarCyFromR8"
        },
        {
            "signature": "HRESULT VarCyFromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] CY *pcyOut );",
            "name": "VarCyFromStr"
        },
        {
            "signature": "HRESULT VarCyFromUI1( [in] BYTE bIn, [out] CY *pcyOut );",
            "name": "VarCyFromUI1"
        },
        {
            "signature": "HRESULT VarCyFromUI2( [in] USHORT uiIn, [out] CY *pcyOut );",
            "name": "VarCyFromUI2"
        },
        {
            "signature": "HRESULT VarCyFromUI4( [in] ULONG ulIn, [out] CY *pcyOut );",
            "name": "VarCyFromUI4"
        },
        {
            "signature": "HRESULT VarCyFromUI8( [in] ULONG64 ui64In, [out] CY *pcyOut );",
            "name": "VarCyFromUI8"
        },
        {
            "signature": "HRESULT VarCyInt( [in] CY cyIn, [out] LPCY pcyResult );",
            "name": "VarCyInt"
        },
        {
            "signature": "HRESULT VarCyMul( [in] CY cyLeft, [in] CY cyRight, [out] LPCY pcyResult );",
            "name": "VarCyMul"
        },
        {
            "signature": "HRESULT VarCyMulI4( [in] CY cyLeft, [in] LONG lRight, [out] LPCY pcyResult );",
            "name": "VarCyMulI4"
        },
        {
            "signature": "HRESULT VarCyMulI8( [in] CY cyLeft, [in] LONG64 lRight, [out] LPCY pcyResult );",
            "name": "VarCyMulI8"
        },
        {
            "signature": "HRESULT VarCyNeg( [in] CY cyIn, [out] LPCY pcyResult );",
            "name": "VarCyNeg"
        },
        {
            "signature": "HRESULT VarCyRound( [in] CY cyIn, [in] int cDecimals, [out] LPCY pcyResult );",
            "name": "VarCyRound"
        },
        {
            "signature": "HRESULT VarCySub( [in] CY cyLeft, [in] CY cyRight, [out] LPCY pcyResult );",
            "name": "VarCySub"
        },
        {
            "signature": "HRESULT VarDateFromBool( [in] VARIANT_BOOL boolIn, [out] DATE *pdateOut );",
            "name": "VarDateFromBool"
        },
        {
            "signature": "HRESULT VarDateFromCy( [in] CY cyIn, [out] DATE *pdateOut );",
            "name": "VarDateFromCy"
        },
        {
            "signature": "HRESULT VarDateFromDec( [in] const DECIMAL *pdecIn, [out] DATE *pdateOut );",
            "name": "VarDateFromDec"
        },
        {
            "signature": "HRESULT VarDateFromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] DATE *pdateOut );",
            "name": "VarDateFromDisp"
        },
        {
            "signature": "HRESULT VarDateFromI1( [in] CHAR cIn, [out] DATE *pdateOut );",
            "name": "VarDateFromI1"
        },
        {
            "signature": "HRESULT VarDateFromI2( [in] SHORT sIn, [out] DATE *pdateOut );",
            "name": "VarDateFromI2"
        },
        {
            "signature": "HRESULT VarDateFromI4( [in] LONG lIn, [out] DATE *pdateOut );",
            "name": "VarDateFromI4"
        },
        {
            "signature": "HRESULT VarDateFromI8( [in] LONG64 i64In, [out] DATE *pdateOut );",
            "name": "VarDateFromI8"
        },
        {
            "signature": "HRESULT VarDateFromR4( [in] FLOAT fltIn, [out] DATE *pdateOut );",
            "name": "VarDateFromR4"
        },
        {
            "signature": "HRESULT VarDateFromR8( [in] DOUBLE dblIn, [out] DATE *pdateOut );",
            "name": "VarDateFromR8"
        },
        {
            "signature": "HRESULT VarDateFromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] DATE *pdateOut );",
            "name": "VarDateFromStr"
        },
        {
            "signature": "HRESULT VarDateFromUdate( [in] UDATE *pudateIn, [in] ULONG dwFlags, [out] DATE *pdateOut );",
            "name": "VarDateFromUdate"
        },
        {
            "signature": "HRESULT VarDateFromUdateEx( [in] UDATE *pudateIn, [in] LCID lcid, [in] ULONG dwFlags, [out] DATE *pdateOut );",
            "name": "VarDateFromUdateEx"
        },
        {
            "signature": "HRESULT VarDateFromUI1( [in] BYTE bIn, [out] DATE *pdateOut );",
            "name": "VarDateFromUI1"
        },
        {
            "signature": "HRESULT VarDateFromUI2( [in] USHORT uiIn, [out] DATE *pdateOut );",
            "name": "VarDateFromUI2"
        },
        {
            "signature": "HRESULT VarDateFromUI4( [in] ULONG ulIn, [out] DATE *pdateOut );",
            "name": "VarDateFromUI4"
        },
        {
            "signature": "HRESULT VarDateFromUI8( [in] ULONG64 ui64In, [out] DATE *pdateOut );",
            "name": "VarDateFromUI8"
        },
        {
            "signature": "HRESULT VarDecAbs( [in] LPDECIMAL pdecIn, [out] LPDECIMAL pdecResult );",
            "name": "VarDecAbs"
        },
        {
            "signature": "HRESULT VarDecAdd( [in] LPDECIMAL pdecLeft, [in] LPDECIMAL pdecRight, [out] LPDECIMAL pdecResult );",
            "name": "VarDecAdd"
        },
        {
            "signature": "HRESULT VarDecCmp( [in] LPDECIMAL pdecLeft, [in] LPDECIMAL pdecRight );",
            "name": "VarDecCmp"
        },
        {
            "signature": "HRESULT VarDecCmpR8( [in] LPDECIMAL pdecLeft, [in] double dblRight );",
            "name": "VarDecCmpR8"
        },
        {
            "signature": "HRESULT VarDecDiv( [in] LPDECIMAL pdecLeft, [in] LPDECIMAL pdecRight, [out] LPDECIMAL pdecResult );",
            "name": "VarDecDiv"
        },
        {
            "signature": "HRESULT VarDecFix( [in] LPDECIMAL pdecIn, [out] LPDECIMAL pdecResult );",
            "name": "VarDecFix"
        },
        {
            "signature": "HRESULT VarDecFromBool( [in] VARIANT_BOOL boolIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromBool"
        },
        {
            "signature": "HRESULT VarDecFromCy( [in] CY cyIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromCy"
        },
        {
            "signature": "HRESULT VarDecFromDate( [in] DATE dateIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromDate"
        },
        {
            "signature": "HRESULT VarDecFromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromDisp"
        },
        {
            "signature": "HRESULT VarDecFromI1( [in] CHAR cIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromI1"
        },
        {
            "signature": "HRESULT VarDecFromI2( [in] SHORT uiIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromI2"
        },
        {
            "signature": "HRESULT VarDecFromI4( [in] LONG lIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromI4"
        },
        {
            "signature": "HRESULT VarDecFromI8( [in] LONG64 i64In, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromI8"
        },
        {
            "signature": "HRESULT VarDecFromR4( [in] FLOAT fltIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromR4"
        },
        {
            "signature": "HRESULT VarDecFromR8( [in] DOUBLE dblIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromR8"
        },
        {
            "signature": "HRESULT VarDecFromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromStr"
        },
        {
            "signature": "HRESULT VarDecFromUI1( [in] BYTE bIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromUI1"
        },
        {
            "signature": "HRESULT VarDecFromUI2( [in] USHORT uiIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromUI2"
        },
        {
            "signature": "HRESULT VarDecFromUI4( [in] ULONG ulIn, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromUI4"
        },
        {
            "signature": "HRESULT VarDecFromUI8( [in] ULONG64 ui64In, [out] DECIMAL *pdecOut );",
            "name": "VarDecFromUI8"
        },
        {
            "signature": "HRESULT VarDecInt( [in] LPDECIMAL pdecIn, [out] LPDECIMAL pdecResult );",
            "name": "VarDecInt"
        },
        {
            "signature": "HRESULT VarDecMul( [in] LPDECIMAL pdecLeft, [in] LPDECIMAL pdecRight, [out] LPDECIMAL pdecResult );",
            "name": "VarDecMul"
        },
        {
            "signature": "HRESULT VarDecNeg( [in] LPDECIMAL pdecIn, [out] LPDECIMAL pdecResult );",
            "name": "VarDecNeg"
        },
        {
            "signature": "HRESULT VarDecRound( [in] LPDECIMAL pdecIn, [in] int cDecimals, [out] LPDECIMAL pdecResult );",
            "name": "VarDecRound"
        },
        {
            "signature": "HRESULT VarDecSub( [in] LPDECIMAL pdecLeft, [in] LPDECIMAL pdecRight, [out] LPDECIMAL pdecResult );",
            "name": "VarDecSub"
        },
        {
            "signature": "HRESULT VarDiv( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarDiv"
        },
        {
            "signature": "HRESULT VarEqv( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarEqv"
        },
        {
            "signature": "HRESULT VarFix( [in] LPVARIANT pvarIn, [out] LPVARIANT pvarResult );",
            "name": "VarFix"
        },
        {
            "signature": "HRESULT VarFormat( [in] LPVARIANT pvarIn, [in, optional] LPOLESTR pstrFormat, [in] int iFirstDay, [in] int iFirstWeek, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarFormat"
        },
        {
            "signature": "HRESULT VarFormatCurrency( [in] LPVARIANT pvarIn, [in] int iNumDig, [in] int iIncLead, [in] int iUseParens, [in] int iGroup, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarFormatCurrency"
        },
        {
            "signature": "HRESULT VarFormatDateTime( [in] LPVARIANT pvarIn, [in] int iNamedFormat, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarFormatDateTime"
        },
        {
            "signature": "HRESULT VarFormatFromTokens( [in] LPVARIANT pvarIn, [in, optional] LPOLESTR pstrFormat, [in] LPBYTE pbTokCur, [in] ULONG dwFlags, [out] BSTR *pbstrOut, [in] LCID lcid );",
            "name": "VarFormatFromTokens"
        },
        {
            "signature": "HRESULT VarFormatNumber( [in] LPVARIANT pvarIn, [in] int iNumDig, [in] int iIncLead, [in] int iUseParens, [in] int iGroup, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarFormatNumber"
        },
        {
            "signature": "HRESULT VarFormatPercent( [in] LPVARIANT pvarIn, [in] int iNumDig, [in] int iIncLead, [in] int iUseParens, [in] int iGroup, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarFormatPercent"
        },
        {
            "signature": "HRESULT VarI1FromBool( [in] VARIANT_BOOL boolIn, [out] CHAR *pcOut );",
            "name": "VarI1FromBool"
        },
        {
            "signature": "HRESULT VarI1FromCy( [in] CY cyIn, [out] CHAR *pcOut );",
            "name": "VarI1FromCy"
        },
        {
            "signature": "HRESULT VarI1FromDate( [in] DATE dateIn, [out] CHAR *pcOut );",
            "name": "VarI1FromDate"
        },
        {
            "signature": "HRESULT VarI1FromDec( [in] const DECIMAL *pdecIn, [out] CHAR *pcOut );",
            "name": "VarI1FromDec"
        },
        {
            "signature": "HRESULT VarI1FromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] CHAR *pcOut );",
            "name": "VarI1FromDisp"
        },
        {
            "signature": "HRESULT VarI1FromI2( [in] SHORT uiIn, [out] CHAR *pcOut );",
            "name": "VarI1FromI2"
        },
        {
            "signature": "HRESULT VarI1FromI4( [in] LONG lIn, [out] CHAR *pcOut );",
            "name": "VarI1FromI4"
        },
        {
            "signature": "HRESULT VarI1FromI8( [in] LONG64 i64In, [out] CHAR *pcOut );",
            "name": "VarI1FromI8"
        },
        {
            "signature": "HRESULT VarI1FromR4( [in] FLOAT fltIn, [out] CHAR *pcOut );",
            "name": "VarI1FromR4"
        },
        {
            "signature": "HRESULT VarI1FromR8( [in] DOUBLE dblIn, [out] CHAR *pcOut );",
            "name": "VarI1FromR8"
        },
        {
            "signature": "HRESULT VarI1FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] CHAR *pcOut );",
            "name": "VarI1FromStr"
        },
        {
            "signature": "HRESULT VarI1FromUI1( [in] BYTE bIn, [out] CHAR *pcOut );",
            "name": "VarI1FromUI1"
        },
        {
            "signature": "HRESULT VarI1FromUI2( [in] USHORT uiIn, [out] CHAR *pcOut );",
            "name": "VarI1FromUI2"
        },
        {
            "signature": "HRESULT VarI1FromUI4( [in] ULONG ulIn, [out] CHAR *pcOut );",
            "name": "VarI1FromUI4"
        },
        {
            "signature": "HRESULT VarI1FromUI8( [in] ULONG64 i64In, [out] CHAR *pcOut );",
            "name": "VarI1FromUI8"
        },
        {
            "signature": "HRESULT VarI2FromBool( [in] VARIANT_BOOL boolIn, [out] SHORT *psOut );",
            "name": "VarI2FromBool"
        },
        {
            "signature": "HRESULT VarI2FromCy( [in] CY cyIn, SHORT *psOut );",
            "name": "VarI2FromCy"
        },
        {
            "signature": "HRESULT VarI2FromDate( [in] DATE dateIn, [out] SHORT *psOut );",
            "name": "VarI2FromDate"
        },
        {
            "signature": "HRESULT VarI2FromDec( [in] const DECIMAL *pdecIn, [out] SHORT *psOut );",
            "name": "VarI2FromDec"
        },
        {
            "signature": "HRESULT VarI2FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] SHORT *psOut );",
            "name": "VarI2FromDisp"
        },
        {
            "signature": "HRESULT VarI2FromI1( [in] CHAR cIn, [out] SHORT *psOut );",
            "name": "VarI2FromI1"
        },
        {
            "signature": "HRESULT VarI2FromI4( [in] LONG lIn, [out] SHORT *psOut );",
            "name": "VarI2FromI4"
        },
        {
            "signature": "HRESULT VarI2FromI8( [in] LONG64 i64In, [out] SHORT *psOut );",
            "name": "VarI2FromI8"
        },
        {
            "signature": "HRESULT VarI2FromR4( [in] FLOAT fltIn, [out] SHORT *psOut );",
            "name": "VarI2FromR4"
        },
        {
            "signature": "HRESULT VarI2FromR8( [in] DOUBLE dblIn, [out] SHORT *psOut );",
            "name": "VarI2FromR8"
        },
        {
            "signature": "HRESULT VarI2FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] SHORT *psOut );",
            "name": "VarI2FromStr"
        },
        {
            "signature": "HRESULT VarI2FromUI1( [in] BYTE bIn, [out] SHORT *psOut );",
            "name": "VarI2FromUI1"
        },
        {
            "signature": "HRESULT VarI2FromUI2( [in] USHORT uiIn, [out] SHORT *psOut );",
            "name": "VarI2FromUI2"
        },
        {
            "signature": "HRESULT VarI2FromUI4( [in] ULONG ulIn, [out] SHORT *psOut );",
            "name": "VarI2FromUI4"
        },
        {
            "signature": "HRESULT VarI2FromUI8( [in] ULONG64 ui64In, [out] SHORT *psOut );",
            "name": "VarI2FromUI8"
        },
        {
            "signature": "HRESULT VarI4FromBool( [in] VARIANT_BOOL boolIn, [out] LONG *plOut );",
            "name": "VarI4FromBool"
        },
        {
            "signature": "HRESULT VarI4FromCy( [in] CY cyIn, [out] LONG *plOut );",
            "name": "VarI4FromCy"
        },
        {
            "signature": "HRESULT VarI4FromDate( [in] DATE dateIn, [out] LONG *plOut );",
            "name": "VarI4FromDate"
        },
        {
            "signature": "HRESULT VarI4FromDec( [in] const DECIMAL *pdecIn, [out] LONG *plOut );",
            "name": "VarI4FromDec"
        },
        {
            "signature": "HRESULT VarI4FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] LONG *plOut );",
            "name": "VarI4FromDisp"
        },
        {
            "signature": "HRESULT VarI4FromI1( [in] CHAR cIn, [out] LONG *plOut );",
            "name": "VarI4FromI1"
        },
        {
            "signature": "HRESULT VarI4FromI2( [in] SHORT sIn, [out] LONG *plOut );",
            "name": "VarI4FromI2"
        },
        {
            "signature": "HRESULT VarI4FromI8( [in] LONG64 i64In, [out] LONG *plOut );",
            "name": "VarI4FromI8"
        },
        {
            "signature": "HRESULT VarI4FromR4( [in] FLOAT fltIn, [out] LONG *plOut );",
            "name": "VarI4FromR4"
        },
        {
            "signature": "HRESULT VarI4FromR8( [in] DOUBLE dblIn, [out] LONG *plOut );",
            "name": "VarI4FromR8"
        },
        {
            "signature": "HRESULT VarI4FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] LONG *plOut );",
            "name": "VarI4FromStr"
        },
        {
            "signature": "HRESULT VarI4FromUI1( [in] BYTE bIn, [out] LONG *plOut );",
            "name": "VarI4FromUI1"
        },
        {
            "signature": "HRESULT VarI4FromUI2( [in] USHORT uiIn, [out] LONG *plOut );",
            "name": "VarI4FromUI2"
        },
        {
            "signature": "HRESULT VarI4FromUI4( [in] ULONG ulIn, [out] LONG *plOut );",
            "name": "VarI4FromUI4"
        },
        {
            "signature": "HRESULT VarI4FromUI8( [in] ULONG64 ui64In, [out] LONG *plOut );",
            "name": "VarI4FromUI8"
        },
        {
            "signature": "HRESULT VarI8FromBool( [in] VARIANT_BOOL boolIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromBool"
        },
        {
            "signature": "HRESULT VarI8FromCy( [in] CY cyIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromCy"
        },
        {
            "signature": "HRESULT VarI8FromDate( [in] DATE dateIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromDate"
        },
        {
            "signature": "HRESULT VarI8FromDec( [in] const DECIMAL *pdecIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromDec"
        },
        {
            "signature": "HRESULT VarI8FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] LONG64 *pi64Out );",
            "name": "VarI8FromDisp"
        },
        {
            "signature": "HRESULT VarI8FromI1( [in] CHAR cIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromI1"
        },
        {
            "signature": "HRESULT VarI8FromI2( [in] SHORT sIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromI2"
        },
        {
            "signature": "HRESULT VarI8FromR4( [in] FLOAT fltIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromR4"
        },
        {
            "signature": "HRESULT VarI8FromR8( [in] DOUBLE dblIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromR8"
        },
        {
            "signature": "HRESULT VarI8FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] LONG64 *pi64Out );",
            "name": "VarI8FromStr"
        },
        {
            "signature": "HRESULT VarI8FromUI1( [in] BYTE bIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromUI1"
        },
        {
            "signature": "HRESULT VarI8FromUI2( [in] USHORT uiIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromUI2"
        },
        {
            "signature": "HRESULT VarI8FromUI4( [in] ULONG ulIn, [out] LONG64 *pi64Out );",
            "name": "VarI8FromUI4"
        },
        {
            "signature": "HRESULT VarI8FromUI8( [in] ULONG64 ui64In, [out] LONG64 *pi64Out );",
            "name": "VarI8FromUI8"
        },
        {
            "signature": "HRESULT VariantChangeType( [out] VARIANTARG *pvargDest, [in] const VARIANTARG *pvarSrc, [in] USHORT wFlags, [in] VARTYPE vt );",
            "name": "VariantChangeType"
        },
        {
            "signature": "HRESULT VariantChangeTypeEx( [out] VARIANTARG *pvargDest, [in] const VARIANTARG *pvarSrc, [in] LCID lcid, [in] USHORT wFlags, [in] VARTYPE vt );",
            "name": "VariantChangeTypeEx"
        },
        {
            "signature": "HRESULT VariantClear( [in, out] VARIANTARG *pvarg );",
            "name": "VariantClear"
        },
        {
            "signature": "HRESULT VariantCopy( [out] VARIANTARG *pvargDest, [in] const VARIANTARG *pvargSrc );",
            "name": "VariantCopy"
        },
        {
            "signature": "HRESULT VariantCopyInd( [out] VARIANT *pvarDest, [in] const VARIANTARG *pvargSrc );",
            "name": "VariantCopyInd"
        },
        {
            "signature": "void VariantInit( [out] VARIANTARG *pvarg );",
            "name": "VariantInit"
        },
        {
            "signature": "INT VariantTimeToDosDateTime( [in] DOUBLE vtime, [out] USHORT *pwDosDate, [out] USHORT *pwDosTime );",
            "name": "VariantTimeToDosDateTime"
        },
        {
            "signature": "INT VariantTimeToSystemTime( [in] DOUBLE vtime, [out] LPSYSTEMTIME lpSystemTime );",
            "name": "VariantTimeToSystemTime"
        },
        {
            "signature": "HRESULT VarIdiv( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarIdiv"
        },
        {
            "signature": "HRESULT VarImp( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarImp"
        },
        {
            "signature": "HRESULT VarInt( [in] LPVARIANT pvarIn, [out] LPVARIANT pvarResult );",
            "name": "VarInt"
        },
        {
            "signature": "HRESULT VarMod( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarMod"
        },
        {
            "signature": "HRESULT VarMonthName( [in] int iMonth, [in] int fAbbrev, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarMonthName"
        },
        {
            "signature": "HRESULT VarMul( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarMul"
        },
        {
            "signature": "HRESULT VarNeg( [in] LPVARIANT pvarIn, [out] LPVARIANT pvarResult );",
            "name": "VarNeg"
        },
        {
            "signature": "HRESULT VarNot( [in] LPVARIANT pvarIn, [out] LPVARIANT pvarResult );",
            "name": "VarNot"
        },
        {
            "signature": "HRESULT VarNumFromParseNum( [in] NUMPARSE *pnumprs, [in] BYTE *rgbDig, [in] ULONG dwVtBits, [out] VARIANT *pvar );",
            "name": "VarNumFromParseNum"
        },
        {
            "signature": "HRESULT VarOr( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarOr"
        },
        {
            "signature": "HRESULT VarParseNumFromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] NUMPARSE *pnumprs, [out] BYTE *rgbDig );",
            "name": "VarParseNumFromStr"
        },
        {
            "signature": "HRESULT VarPow( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarPow"
        },
        {
            "signature": "HRESULT VarR4CmpR8( [in] float fltLeft, [in] double dblRight );",
            "name": "VarR4CmpR8"
        },
        {
            "signature": "HRESULT VarR4FromBool( [in] VARIANT_BOOL boolIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromBool"
        },
        {
            "signature": "HRESULT VarR4FromCy( [in] CY cyIn, FLOAT *pfltOut );",
            "name": "VarR4FromCy"
        },
        {
            "signature": "HRESULT VarR4FromDate( [in] DATE dateIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromDate"
        },
        {
            "signature": "HRESULT VarR4FromDec( [in] const DECIMAL *pdecIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromDec"
        },
        {
            "signature": "HRESULT VarR4FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] FLOAT *pfltOut );",
            "name": "VarR4FromDisp"
        },
        {
            "signature": "HRESULT VarR4FromI1( [in] CHAR cIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromI1"
        },
        {
            "signature": "HRESULT VarR4FromI2( [in] SHORT sIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromI2"
        },
        {
            "signature": "HRESULT VarR4FromI4( [in] LONG lIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromI4"
        },
        {
            "signature": "HRESULT VarR4FromI8( [in] LONG64 i64In, [out] FLOAT *pfltOut );",
            "name": "VarR4FromI8"
        },
        {
            "signature": "HRESULT VarR4FromR8( [in] DOUBLE dblIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromR8"
        },
        {
            "signature": "HRESULT VarR4FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] FLOAT *pfltOut );",
            "name": "VarR4FromStr"
        },
        {
            "signature": "HRESULT VarR4FromUI1( [in] BYTE bIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromUI1"
        },
        {
            "signature": "HRESULT VarR4FromUI2( [in] USHORT uiIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromUI2"
        },
        {
            "signature": "HRESULT VarR4FromUI4( [in] ULONG ulIn, [out] FLOAT *pfltOut );",
            "name": "VarR4FromUI4"
        },
        {
            "signature": "HRESULT VarR4FromUI8( [in] ULONG64 ui64In, [out] FLOAT *pfltOut );",
            "name": "VarR4FromUI8"
        },
        {
            "signature": "HRESULT VarR8FromBool( [in] VARIANT_BOOL boolIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromBool"
        },
        {
            "signature": "HRESULT VarR8FromCy( [in] CY cyIn, DOUBLE *pdblOut );",
            "name": "VarR8FromCy"
        },
        {
            "signature": "HRESULT VarR8FromDate( [in] DATE dateIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromDate"
        },
        {
            "signature": "HRESULT VarR8FromDec( [in] const DECIMAL *pdecIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromDec"
        },
        {
            "signature": "HRESULT VarR8FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromDisp"
        },
        {
            "signature": "HRESULT VarR8FromI1( [in] CHAR cIn, DOUBLE *pdblOut );",
            "name": "VarR8FromI1"
        },
        {
            "signature": "HRESULT VarR8FromI2( [in] SHORT sIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromI2"
        },
        {
            "signature": "HRESULT VarR8FromI4( [in] LONG lIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromI4"
        },
        {
            "signature": "HRESULT VarR8FromI8( [in] LONG64 i64In, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromI8"
        },
        {
            "signature": "HRESULT VarR8FromR4( [in] FLOAT fltIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromR4"
        },
        {
            "signature": "HRESULT VarR8FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromStr"
        },
        {
            "signature": "HRESULT VarR8FromUI1( [in] BYTE bIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromUI1"
        },
        {
            "signature": "HRESULT VarR8FromUI2( [in] USHORT uiIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromUI2"
        },
        {
            "signature": "HRESULT VarR8FromUI4( [in] ULONG ulIn, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromUI4"
        },
        {
            "signature": "HRESULT VarR8FromUI8( [in] ULONG64 ui64In, [out] DOUBLE *pdblOut );",
            "name": "VarR8FromUI8"
        },
        {
            "signature": "HRESULT VarR8Pow( [in] double dblLeft, [in] double dblRight, [out] double *pdblResult );",
            "name": "VarR8Pow"
        },
        {
            "signature": "HRESULT VarR8Round( [in] double dblIn, [in] int cDecimals, [out] double *pdblResult );",
            "name": "VarR8Round"
        },
        {
            "signature": "HRESULT VarRound( [in] LPVARIANT pvarIn, [in] int cDecimals, [out] LPVARIANT pvarResult );",
            "name": "VarRound"
        },
        {
            "signature": "HRESULT VarSub( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarSub"
        },
        {
            "signature": "HRESULT VarTokenizeFormatString( [in, optional] LPOLESTR pstrFormat, [in, out] LPBYTE rgbTok, [in] int cbTok, [in] int iFirstDay, [in] int iFirstWeek, [in] LCID lcid, [in, optional] int *pcbActual );",
            "name": "VarTokenizeFormatString"
        },
        {
            "signature": "HRESULT VarUdateFromDate( [in] DATE dateIn, [in] ULONG dwFlags, [out] UDATE *pudateOut );",
            "name": "VarUdateFromDate"
        },
        {
            "signature": "HRESULT VarUI1FromBool( [in] VARIANT_BOOL boolIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromBool"
        },
        {
            "signature": "HRESULT VarUI1FromCy( [in] CY cyIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromCy"
        },
        {
            "signature": "HRESULT VarUI1FromDate( [in] DATE dateIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromDate"
        },
        {
            "signature": "HRESULT VarUI1FromDec( [in] const DECIMAL *pdecIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromDec"
        },
        {
            "signature": "HRESULT VarUI1FromDisp( IDispatch *pdispIn, [in] LCID lcid, [out] BYTE *pbOut );",
            "name": "VarUI1FromDisp"
        },
        {
            "signature": "HRESULT VarUI1FromI1( [in] CHAR cIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromI1"
        },
        {
            "signature": "HRESULT VarUI1FromI2( [in] SHORT sIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromI2"
        },
        {
            "signature": "HRESULT VarUI1FromI4( [in] LONG lIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromI4"
        },
        {
            "signature": "HRESULT VarUI1FromI8( [in] LONG64 i64In, [out] BYTE *pbOut );",
            "name": "VarUI1FromI8"
        },
        {
            "signature": "HRESULT VarUI1FromR4( [in] FLOAT fltIn, BYTE *pbOut );",
            "name": "VarUI1FromR4"
        },
        {
            "signature": "HRESULT VarUI1FromR8( [in] DOUBLE dblIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromR8"
        },
        {
            "signature": "HRESULT VarUI1FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] BYTE *pbOut );",
            "name": "VarUI1FromStr"
        },
        {
            "signature": "HRESULT VarUI1FromUI2( [in] USHORT uiIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromUI2"
        },
        {
            "signature": "HRESULT VarUI1FromUI4( [in] ULONG ulIn, [out] BYTE *pbOut );",
            "name": "VarUI1FromUI4"
        },
        {
            "signature": "HRESULT VarUI1FromUI8( [in] ULONG64 ui64In, [out] BYTE *pbOut );",
            "name": "VarUI1FromUI8"
        },
        {
            "signature": "HRESULT VarUI2FromBool( [in] VARIANT_BOOL boolIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromBool"
        },
        {
            "signature": "HRESULT VarUI2FromCy( [in] CY cyIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromCy"
        },
        {
            "signature": "HRESULT VarUI2FromDate( [in] DATE dateIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromDate"
        },
        {
            "signature": "HRESULT VarUI2FromDec( [in] const DECIMAL *pdecIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromDec"
        },
        {
            "signature": "HRESULT VarUI2FromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] USHORT *puiOut );",
            "name": "VarUI2FromDisp"
        },
        {
            "signature": "HRESULT VarUI2FromI1( [in] CHAR cIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromI1"
        },
        {
            "signature": "HRESULT VarUI2FromI2( [in] SHORT uiIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromI2"
        },
        {
            "signature": "HRESULT VarUI2FromI4( [in] LONG lIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromI4"
        },
        {
            "signature": "HRESULT VarUI2FromI8( [in] LONG64 i64In, [out] USHORT *puiOut );",
            "name": "VarUI2FromI8"
        },
        {
            "signature": "HRESULT VarUI2FromR4( [in] FLOAT fltIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromR4"
        },
        {
            "signature": "HRESULT VarUI2FromR8( [in] DOUBLE dblIn, USHORT *puiOut );",
            "name": "VarUI2FromR8"
        },
        {
            "signature": "HRESULT VarUI2FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] USHORT *puiOut );",
            "name": "VarUI2FromStr"
        },
        {
            "signature": "HRESULT VarUI2FromUI1( [in] BYTE bIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromUI1"
        },
        {
            "signature": "HRESULT VarUI2FromUI4( [in] ULONG ulIn, [out] USHORT *puiOut );",
            "name": "VarUI2FromUI4"
        },
        {
            "signature": "HRESULT VarUI2FromUI8( [in] ULONG64 i64In, [out] USHORT *puiOut );",
            "name": "VarUI2FromUI8"
        },
        {
            "signature": "HRESULT VarUI4FromBool( [in] VARIANT_BOOL boolIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromBool"
        },
        {
            "signature": "HRESULT VarUI4FromCy( [in] CY cyIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromCy"
        },
        {
            "signature": "HRESULT VarUI4FromDate( [in] DATE dateIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromDate"
        },
        {
            "signature": "HRESULT VarUI4FromDec( [in] const DECIMAL *pdecIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromDec"
        },
        {
            "signature": "HRESULT VarUI4FromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] ULONG *pulOut );",
            "name": "VarUI4FromDisp"
        },
        {
            "signature": "HRESULT VarUI4FromI1( [in] CHAR cIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromI1"
        },
        {
            "signature": "HRESULT VarUI4FromI2( [in] SHORT uiIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromI2"
        },
        {
            "signature": "HRESULT VarUI4FromI4( [in] LONG lIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromI4"
        },
        {
            "signature": "HRESULT VarUI4FromI8( [in] LONG64 i64In, [out] ULONG *plOut );",
            "name": "VarUI4FromI8"
        },
        {
            "signature": "HRESULT VarUI4FromR4( [in] FLOAT fltIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromR4"
        },
        {
            "signature": "HRESULT VarUI4FromR8( [in] DOUBLE dblIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromR8"
        },
        {
            "signature": "HRESULT VarUI4FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] ULONG *pulOut );",
            "name": "VarUI4FromStr"
        },
        {
            "signature": "HRESULT VarUI4FromUI1( [in] BYTE bIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromUI1"
        },
        {
            "signature": "HRESULT VarUI4FromUI2( [in] USHORT uiIn, [out] ULONG *pulOut );",
            "name": "VarUI4FromUI2"
        },
        {
            "signature": "HRESULT VarUI4FromUI8( [in] ULONG64 ui64In, [out] ULONG *plOut );",
            "name": "VarUI4FromUI8"
        },
        {
            "signature": "HRESULT VarUI8FromBool( [in] VARIANT_BOOL boolIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromBool"
        },
        {
            "signature": "HRESULT VarUI8FromCy( [in] CY cyIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromCy"
        },
        {
            "signature": "HRESULT VarUI8FromDate( [in] DATE dateIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromDate"
        },
        {
            "signature": "HRESULT VarUI8FromDec( [in] const DECIMAL *pdecIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromDec"
        },
        {
            "signature": "HRESULT VarUI8FromDisp( [in] IDispatch *pdispIn, [in] LCID lcid, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromDisp"
        },
        {
            "signature": "HRESULT VarUI8FromI1( [in] CHAR cIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromI1"
        },
        {
            "signature": "HRESULT VarUI8FromI2( [in] SHORT sIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromI2"
        },
        {
            "signature": "HRESULT VarUI8FromI8( [in] LONG64 ui64In, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromI8"
        },
        {
            "signature": "HRESULT VarUI8FromR4( [in] FLOAT fltIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromR4"
        },
        {
            "signature": "HRESULT VarUI8FromR8( [in] DOUBLE dblIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromR8"
        },
        {
            "signature": "HRESULT VarUI8FromStr( [in] LPCOLESTR strIn, [in] LCID lcid, [in] ULONG dwFlags, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromStr"
        },
        {
            "signature": "HRESULT VarUI8FromUI1( [in] BYTE bIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromUI1"
        },
        {
            "signature": "HRESULT VarUI8FromUI2( [in] USHORT uiIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromUI2"
        },
        {
            "signature": "HRESULT VarUI8FromUI4( [in] ULONG ulIn, [out] ULONG64 *pi64Out );",
            "name": "VarUI8FromUI4"
        },
        {
            "signature": "HRESULT VarWeekdayName( [in] int iWeekday, [in] int fAbbrev, [in] int iFirstDay, [in] ULONG dwFlags, [out] BSTR *pbstrOut );",
            "name": "VarWeekdayName"
        },
        {
            "signature": "HRESULT VarXor( [in] LPVARIANT pvarLeft, [in] LPVARIANT pvarRight, [out] LPVARIANT pvarResult );",
            "name": "VarXor"
        },
        {
            "signature": "HRESULT VectorFromBstr( [in] BSTR bstr, [out] SAFEARRAY **ppsa );",
            "name": "VectorFromBstr"
        }
    ],
    "Olectl.h": [
        {
            "signature": "HRESULT DllRegisterServer();",
            "name": "DllRegisterServer"
        },
        {
            "signature": "HRESULT DllUnregisterServer();",
            "name": "DllUnregisterServer"
        },
        {
            "signature": "WINOLECTLAPI OleCreateFontIndirect( [in] LPFONTDESC lpFontDesc, [in] REFIID riid, [out] LPVOID *lplpvObj );",
            "name": "OleCreateFontIndirect"
        },
        {
            "signature": "WINOLECTLAPI OleCreatePictureIndirect( [in] LPPICTDESC lpPictDesc, [in] REFIID riid, [in] BOOL fOwn, [out] LPVOID *lplpvObj );",
            "name": "OleCreatePictureIndirect"
        },
        {
            "signature": "WINOLECTLAPI OleCreatePropertyFrame( [in] HWND hwndOwner, [in] UINT x, [in] UINT y, [in] LPCOLESTR lpszCaption, [in] ULONG cObjects, [in] LPUNKNOWN *ppUnk, [in] ULONG cPages, [in] LPCLSID pPageClsID, [in] LCID lcid, [in] DWORD dwReserved, [in] LPVOID pvReserved );",
            "name": "OleCreatePropertyFrame"
        },
        {
            "signature": "WINOLECTLAPI OleCreatePropertyFrameIndirect( [in] LPOCPFIPARAMS lpParams );",
            "name": "OleCreatePropertyFrameIndirect"
        },
        {
            "signature": "void OleIconToCursor( [in] HINSTANCE hinstExe, [in] HICON hIcon );",
            "name": "OleIconToCursor"
        },
        {
            "signature": "WINOLECTLAPI OleLoadPicture( [in] LPSTREAM lpstream, [in] LONG lSize, [in] BOOL fRunmode, [in] REFIID riid, [out] LPVOID *lplpvObj );",
            "name": "OleLoadPicture"
        },
        {
            "signature": "WINOLECTLAPI OleLoadPictureEx( [in] LPSTREAM lpstream, [in] LONG lSize, [in] BOOL fRunmode, [in] REFIID riid, [in] DWORD xSizeDesired, [in] DWORD ySizeDesired, [in] DWORD dwFlags, [out] LPVOID *lplpvObj );",
            "name": "OleLoadPictureEx"
        },
        {
            "signature": "WINOLECTLAPI OleLoadPictureFile( [in] VARIANT varFileName, [out] LPDISPATCH *lplpdispPicture );",
            "name": "OleLoadPictureFile"
        },
        {
            "signature": "WINOLECTLAPI OleLoadPictureFileEx( [in] VARIANT varFileName, [in] DWORD xSizeDesired, [in] DWORD ySizeDesired, [in] DWORD dwFlags, [out] LPDISPATCH *lplpdispPicture );",
            "name": "OleLoadPictureFileEx"
        },
        {
            "signature": "WINOLECTLAPI OleLoadPicturePath( [in] LPOLESTR szURLorPath, [in] LPUNKNOWN punkCaller, [in] DWORD dwReserved, [in] OLE_COLOR clrReserved, [in] REFIID riid, [out] LPVOID *ppvRet );",
            "name": "OleLoadPicturePath"
        },
        {
            "signature": "WINOLECTLAPI OleSavePictureFile( [in] LPDISPATCH lpdispPicture, [in] BSTR bstrFileName );",
            "name": "OleSavePictureFile"
        },
        {
            "signature": "WINOLECTLAPI OleTranslateColor( [in] OLE_COLOR clr, [in] HPALETTE hpal, [out] COLORREF *lpcolorref );",
            "name": "OleTranslateColor"
        }
    ],
    "Oledbguid.h": [],
    "Oledlg.h": [
        {
            "signature": "BOOL OleUIAddVerbMenuA( [in, optional] LPOLEOBJECT lpOleObj, [in, optional] LPCSTR lpszShortType, [in] HMENU hMenu, [in] UINT uPos, [in] UINT uIDVerbMin, [in] UINT uIDVerbMax, [in] BOOL bAddConvert, [in] UINT idConvert, [out] HMENU *lphMenu );",
            "name": "OleUIAddVerbMenuA"
        },
        {
            "signature": "BOOL OleUIAddVerbMenuW( [in, optional] LPOLEOBJECT lpOleObj, [in, optional] LPCWSTR lpszShortType, [in] HMENU hMenu, [in] UINT uPos, [in] UINT uIDVerbMin, [in] UINT uIDVerbMax, [in] BOOL bAddConvert, [in] UINT idConvert, [out] HMENU *lphMenu );",
            "name": "OleUIAddVerbMenuW"
        },
        {
            "signature": "UINT OleUIBusyA( [in] LPOLEUIBUSYA unnamedParam1 );",
            "name": "OleUIBusyA"
        },
        {
            "signature": "UINT OleUIBusyW( [in] LPOLEUIBUSYW unnamedParam1 );",
            "name": "OleUIBusyW"
        },
        {
            "signature": "BOOL OleUICanConvertOrActivateAs( [in] REFCLSID rClsid, [in] BOOL fIsLinkedObject, [in] WORD wFormat );",
            "name": "OleUICanConvertOrActivateAs"
        },
        {
            "signature": "UINT OleUIChangeIconA( [in] LPOLEUICHANGEICONA unnamedParam1 );",
            "name": "OleUIChangeIconA"
        },
        {
            "signature": "UINT OleUIChangeIconW( [in] LPOLEUICHANGEICONW unnamedParam1 );",
            "name": "OleUIChangeIconW"
        },
        {
            "signature": "UINT OleUIChangeSourceA( [in] LPOLEUICHANGESOURCEA unnamedParam1 );",
            "name": "OleUIChangeSourceA"
        },
        {
            "signature": "UINT OleUIChangeSourceW( [in] LPOLEUICHANGESOURCEW unnamedParam1 );",
            "name": "OleUIChangeSourceW"
        },
        {
            "signature": "UINT OleUIConvertA( [in] LPOLEUICONVERTA unnamedParam1 );",
            "name": "OleUIConvertA"
        },
        {
            "signature": "UINT OleUIConvertW( [in] LPOLEUICONVERTW unnamedParam1 );",
            "name": "OleUIConvertW"
        },
        {
            "signature": "UINT OleUIEditLinksA( [in] LPOLEUIEDITLINKSA unnamedParam1 );",
            "name": "OleUIEditLinksA"
        },
        {
            "signature": "UINT OleUIEditLinksW( [in] LPOLEUIEDITLINKSW unnamedParam1 );",
            "name": "OleUIEditLinksW"
        },
        {
            "signature": "UINT OleUIInsertObjectA( [in] LPOLEUIINSERTOBJECTA unnamedParam1 );",
            "name": "OleUIInsertObjectA"
        },
        {
            "signature": "UINT OleUIInsertObjectW( [in] LPOLEUIINSERTOBJECTW unnamedParam1 );",
            "name": "OleUIInsertObjectW"
        },
        {
            "signature": "UINT OleUIObjectPropertiesA( [in] LPOLEUIOBJECTPROPSA unnamedParam1 );",
            "name": "OleUIObjectPropertiesA"
        },
        {
            "signature": "UINT OleUIObjectPropertiesW( [in] LPOLEUIOBJECTPROPSW unnamedParam1 );",
            "name": "OleUIObjectPropertiesW"
        },
        {
            "signature": "UINT OleUIPasteSpecialA( [in] LPOLEUIPASTESPECIALA unnamedParam1 );",
            "name": "OleUIPasteSpecialA"
        },
        {
            "signature": "UINT OleUIPasteSpecialW( [in] LPOLEUIPASTESPECIALW unnamedParam1 );",
            "name": "OleUIPasteSpecialW"
        },
        {
            "signature": "int OleUIPromptUserA( [in] int nTemplate, [in] HWND hwndParent, ... );",
            "name": "OleUIPromptUserA"
        },
        {
            "signature": "int OleUIPromptUserW( [in] int nTemplate, [in] HWND hwndParent, ... );",
            "name": "OleUIPromptUserW"
        },
        {
            "signature": "BOOL OleUIUpdateLinksA( [in] LPOLEUILINKCONTAINERA lpOleUILinkCntr, [in] HWND hwndParent, [in] LPSTR lpszTitle, [in] int cLinks );",
            "name": "OleUIUpdateLinksA"
        },
        {
            "signature": "BOOL OleUIUpdateLinksW( [in] LPOLEUILINKCONTAINERW lpOleUILinkCntr, [in] HWND hwndParent, [in] LPWSTR lpszTitle, [in] int cLinks );",
            "name": "OleUIUpdateLinksW"
        }
    ],
    "Oleidl.h": [
        {
            "href": "/windows/win32/api/oleidl/nf-oleidl-clipformat_userfree",
            "name": "CLIPFORMAT_UserFree function"
        },
        {
            "signature": "void CLIPFORMAT_UserFree64( [in] unsigned long *unnamedParam1, [in] CLIPFORMAT *unnamedParam2 );",
            "name": "CLIPFORMAT_UserFree64"
        },
        {
            "signature": "unsigned char * CLIPFORMAT_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserMarshal"
        },
        {
            "signature": "unsigned char * CLIPFORMAT_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserMarshal64"
        },
        {
            "signature": "unsigned long CLIPFORMAT_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserSize"
        },
        {
            "signature": "unsigned long CLIPFORMAT_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserSize64"
        },
        {
            "signature": "unsigned char * CLIPFORMAT_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserUnmarshal"
        },
        {
            "signature": "unsigned char * CLIPFORMAT_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] CLIPFORMAT *unnamedParam3 );",
            "name": "CLIPFORMAT_UserUnmarshal64"
        },
        {
            "signature": "void HACCEL_UserFree( [in] unsigned long *unnamedParam1, [in] HACCEL *unnamedParam2 );",
            "name": "HACCEL_UserFree"
        },
        {
            "signature": "void HACCEL_UserFree64( [in] unsigned long *unnamedParam1, [in] HACCEL *unnamedParam2 );",
            "name": "HACCEL_UserFree64"
        },
        {
            "signature": "unsigned char * HACCEL_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserMarshal"
        },
        {
            "signature": "unsigned char * HACCEL_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserMarshal64"
        },
        {
            "signature": "unsigned long HACCEL_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserSize"
        },
        {
            "signature": "unsigned long HACCEL_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserSize64"
        },
        {
            "signature": "unsigned char * HACCEL_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HACCEL_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HACCEL *unnamedParam3 );",
            "name": "HACCEL_UserUnmarshal64"
        },
        {
            "signature": "void HDC_UserFree( [in] unsigned long *unnamedParam1, [in] HDC *unnamedParam2 );",
            "name": "HDC_UserFree"
        },
        {
            "signature": "void HDC_UserFree64( [in] unsigned long *unnamedParam1, [in] HDC *unnamedParam2 );",
            "name": "HDC_UserFree64"
        },
        {
            "signature": "unsigned char * HDC_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HDC *unnamedParam3 );",
            "name": "HDC_UserMarshal"
        },
        {
            "signature": "unsigned char * HDC_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HDC *unnamedParam3 );",
            "name": "HDC_UserMarshal64"
        },
        {
            "signature": "unsigned long HDC_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HDC *unnamedParam3 );",
            "name": "HDC_UserSize"
        },
        {
            "signature": "unsigned long HDC_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HDC *unnamedParam3 );",
            "name": "HDC_UserSize64"
        },
        {
            "signature": "unsigned char * HDC_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HDC *unnamedParam3 );",
            "name": "HDC_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HDC_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HDC *unnamedParam3 );",
            "name": "HDC_UserUnmarshal64"
        },
        {
            "signature": "void HGLOBAL_UserFree( [in] unsigned long *unnamedParam1, [in] HGLOBAL *unnamedParam2 );",
            "name": "HGLOBAL_UserFree"
        },
        {
            "signature": "void HGLOBAL_UserFree64( [in] unsigned long *unnamedParam1, [in] HGLOBAL *unnamedParam2 );",
            "name": "HGLOBAL_UserFree64"
        },
        {
            "signature": "unsigned char * HGLOBAL_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserMarshal"
        },
        {
            "signature": "unsigned char * HGLOBAL_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserMarshal64"
        },
        {
            "signature": "unsigned long HGLOBAL_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserSize"
        },
        {
            "signature": "unsigned long HGLOBAL_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserSize64"
        },
        {
            "signature": "unsigned char * HGLOBAL_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HGLOBAL_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HGLOBAL *unnamedParam3 );",
            "name": "HGLOBAL_UserUnmarshal64"
        },
        {
            "signature": "void HMENU_UserFree( [in] unsigned long *unnamedParam1, [in] HMENU *unnamedParam2 );",
            "name": "HMENU_UserFree"
        },
        {
            "signature": "void HMENU_UserFree64( [in] unsigned long *unnamedParam1, [in] HMENU *unnamedParam2 );",
            "name": "HMENU_UserFree64"
        },
        {
            "signature": "unsigned char * HMENU_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HMENU *unnamedParam3 );",
            "name": "HMENU_UserMarshal"
        },
        {
            "signature": "unsigned char * HMENU_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HMENU *unnamedParam3 );",
            "name": "HMENU_UserMarshal64"
        },
        {
            "signature": "unsigned long HMENU_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HMENU *unnamedParam3 );",
            "name": "HMENU_UserSize"
        },
        {
            "signature": "unsigned long HMENU_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HMENU *unnamedParam3 );",
            "name": "HMENU_UserSize64"
        },
        {
            "signature": "unsigned char * HMENU_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HMENU *unnamedParam3 );",
            "name": "HMENU_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HMENU_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HMENU *unnamedParam3 );",
            "name": "HMENU_UserUnmarshal64"
        },
        {
            "signature": "void HWND_UserFree( [in] unsigned long *unnamedParam1, [in] HWND *unnamedParam2 );",
            "name": "HWND_UserFree"
        },
        {
            "signature": "void HWND_UserFree64( [in] unsigned long *unnamedParam1, [in] HWND *unnamedParam2 );",
            "name": "HWND_UserFree64"
        },
        {
            "signature": "unsigned char * HWND_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HWND *unnamedParam3 );",
            "name": "HWND_UserMarshal"
        },
        {
            "signature": "unsigned char * HWND_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HWND *unnamedParam3 );",
            "name": "HWND_UserMarshal64"
        },
        {
            "signature": "unsigned long HWND_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HWND *unnamedParam3 );",
            "name": "HWND_UserSize"
        },
        {
            "signature": "unsigned long HWND_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HWND *unnamedParam3 );",
            "name": "HWND_UserSize64"
        },
        {
            "signature": "unsigned char * HWND_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HWND *unnamedParam3 );",
            "name": "HWND_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HWND_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HWND *unnamedParam3 );",
            "name": "HWND_UserUnmarshal64"
        },
        {
            "signature": "void STGMEDIUM_UserFree( [in] unsigned long *unnamedParam1, [in] STGMEDIUM *unnamedParam2 );",
            "name": "STGMEDIUM_UserFree"
        },
        {
            "signature": "void STGMEDIUM_UserFree64( [in] unsigned long *unnamedParam1, [in] STGMEDIUM *unnamedParam2 );",
            "name": "STGMEDIUM_UserFree64"
        },
        {
            "signature": "unsigned char * STGMEDIUM_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserMarshal"
        },
        {
            "signature": "unsigned char * STGMEDIUM_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserMarshal64"
        },
        {
            "signature": "unsigned long STGMEDIUM_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserSize"
        },
        {
            "signature": "unsigned long STGMEDIUM_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserSize64"
        },
        {
            "signature": "unsigned char * STGMEDIUM_UserUnmarshal( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserUnmarshal"
        },
        {
            "signature": "unsigned char * STGMEDIUM_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] STGMEDIUM *unnamedParam3 );",
            "name": "STGMEDIUM_UserUnmarshal64"
        }
    ],
    "Ondemandconnroutehelper.h": [
        {
            "signature": "void FreeInterfaceContextTable( [in] NET_INTERFACE_CONTEXT_TABLE *InterfaceContextTable );",
            "name": "FreeInterfaceContextTable"
        },
        {
            "signature": "HRESULT GetInterfaceContextTableForHostName( [in, optional] PCWSTR HostName, [in, optional] PCWSTR ProxyName, [in] DWORD Flags, [in, optional] BYTE *ConnectionProfileFilterRawData, [in] DWORD ConnectionProfileFilterRawDataSize, [out] NET_INTERFACE_CONTEXT_TABLE **InterfaceContextTable );",
            "name": "GetInterfaceContextTableForHostName"
        },
        {
            "signature": "HRESULT OnDemandGetRoutingHint( [in] PCWSTR destinationHostName, [out] DWORD *interfaceIndex );",
            "name": "OnDemandGetRoutingHint"
        },
        {
            "signature": "HRESULT OnDemandRegisterNotification( [in] ONDEMAND_NOTIFICATION_CALLBACK callback, [in, optional] void *callbackContext, [out] HANDLE *registrationHandle );",
            "name": "OnDemandRegisterNotification"
        },
        {
            "signature": "HRESULT OnDemandUnRegisterNotification( [in] HANDLE registrationHandle );",
            "name": "OnDemandUnRegisterNotification"
        }
    ],
    "Oobenotification.h": [
        {
            "signature": "OOBE_COMPLETED_CALLBACK OobeCompletedCallback; void OobeCompletedCallback( PVOID CallbackContext ) {...}",
            "name": "OOBE_COMPLETED_CALLBACK callback"
        },
        {
            "signature": "BOOL OOBEComplete( [out] PBOOL isOOBEComplete );",
            "name": "OOBEComplete"
        },
        {
            "signature": "BOOL RegisterWaitUntilOOBECompleted( OOBE_COMPLETED_CALLBACK OOBECompletedCallback, PVOID CallbackContext, PVOID *WaitHandle );",
            "name": "RegisterWaitUntilOOBECompleted"
        },
        {
            "signature": "BOOL UnregisterWaitUntilOOBECompleted( PVOID WaitHandle );",
            "name": "UnregisterWaitUntilOOBECompleted"
        }
    ],
    "Opmapi.h": [
        {
            "signature": "HRESULT OPMGetVideoOutputForTarget( [in] LUID *pAdapterLuid, [in] ULONG VidPnTarget, [in] OPM_VIDEO_OUTPUT_SEMANTICS vos, [out] IOPMVideoOutput **ppOPMVideoOutput );",
            "name": "OPMGetVideoOutputForTarget"
        },
        {
            "signature": "HRESULT OPMGetVideoOutputsFromHMONITOR( [in] HMONITOR hMonitor, [in] OPM_VIDEO_OUTPUT_SEMANTICS vos, [out] ULONG *pulNumVideoOutputs, [out] IOPMVideoOutput ***pppOPMVideoOutputArray );",
            "name": "OPMGetVideoOutputsFromHMONITOR"
        },
        {
            "signature": "HRESULT OPMGetVideoOutputsFromIDirect3DDevice9Object( [in] IDirect3DDevice9 *pDirect3DDevice9, [in] OPM_VIDEO_OUTPUT_SEMANTICS vos, [out] ULONG *pulNumVideoOutputs, [out] IOPMVideoOutput ***pppOPMVideoOutputArray );",
            "name": "OPMGetVideoOutputsFromIDirect3DDevice9Object"
        }
    ],
    "P2p.h": [
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabAddContact( [in] PCWSTR pwzContactData, [out, optional] PPEER_CONTACT *ppContact );",
            "name": "PeerCollabAddContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabAsyncInviteContact( [in, optional] PCPEER_CONTACT pcContact, [in] PCPEER_ENDPOINT pcEndpoint, [in] PCPEER_INVITATION pcInvitation, [in, optional] HANDLE hEvent, [optional] HANDLE *phInvitation );",
            "name": "PeerCollabAsyncInviteContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabAsyncInviteEndpoint( [in] PCPEER_ENDPOINT pcEndpoint, [in] PCPEER_INVITATION pcInvitation, [in, optional] HANDLE hEvent, [out, optional] HANDLE *phInvitation );",
            "name": "PeerCollabAsyncInviteEndpoint"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabCancelInvitation( [in] HANDLE hInvitation );",
            "name": "PeerCollabCancelInvitation"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabCloseHandle( [in] HANDLE hInvitation );",
            "name": "PeerCollabCloseHandle"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabDeleteContact( [in] PCWSTR pwzPeerName );",
            "name": "PeerCollabDeleteContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabDeleteEndpointData( [in] PCPEER_ENDPOINT pcEndpoint );",
            "name": "PeerCollabDeleteEndpointData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabDeleteObject( [in] const GUID *pObjectId );",
            "name": "PeerCollabDeleteObject"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumApplicationRegistrationInfo( [in] PEER_APPLICATION_REGISTRATION_TYPE registrationType, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumApplicationRegistrationInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumApplications( [in, optional] PCPEER_ENDPOINT pcEndpoint, [in, optional] const GUID *pApplicationId, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumApplications"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumContacts( [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumContacts"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumEndpoints( [in] PCPEER_CONTACT pcContact, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumEndpoints"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumObjects( [in] PCPEER_ENDPOINT pcEndpoint, [in, optional] const GUID *pObjectId, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumObjects"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabEnumPeopleNearMe( [out] HPEERENUM *phPeerEnum );",
            "name": "PeerCollabEnumPeopleNearMe"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabExportContact( [in, optional] PCWSTR pwzPeerName, [out, optional] PWSTR *ppwzContactData );",
            "name": "PeerCollabExportContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetAppLaunchInfo( [out] PPEER_APP_LAUNCH_INFO *ppLaunchInfo );",
            "name": "PeerCollabGetAppLaunchInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetApplicationRegistrationInfo( [in] const GUID *pApplicationId, [in] PEER_APPLICATION_REGISTRATION_TYPE registrationType, [out] PPEER_APPLICATION_REGISTRATION_INFO *ppApplication );",
            "name": "PeerCollabGetApplicationRegistrationInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetContact( [in, optional] PCWSTR pwzPeerName, [out, optional] PPEER_CONTACT *ppContact );",
            "name": "PeerCollabGetContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetEndpointName( [out] PWSTR *ppwzEndpointName );",
            "name": "PeerCollabGetEndpointName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetEventData( [in] HPEEREVENT hPeerEvent, [out] PPEER_COLLAB_EVENT_DATA *ppEventData );",
            "name": "PeerCollabGetEventData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetInvitationResponse( [in] HANDLE hInvitation, [out] PPEER_INVITATION_RESPONSE *ppInvitationResponse );",
            "name": "PeerCollabGetInvitationResponse"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetPresenceInfo( [in] PCPEER_ENDPOINT pcEndpoint, [out] PPEER_PRESENCE_INFO *ppPresenceInfo );",
            "name": "PeerCollabGetPresenceInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabGetSigninOptions( [out] DWORD *pdwSigninOptions );",
            "name": "PeerCollabGetSigninOptions"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabInviteContact( [in] PCPEER_CONTACT pcContact, [in] PCPEER_ENDPOINT pcEndpoint, [in] PCPEER_INVITATION pcInvitation, [out] PPEER_INVITATION_RESPONSE *ppResponse );",
            "name": "PeerCollabInviteContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabInviteEndpoint( [in] PCPEER_ENDPOINT pcEndpoint, [in] PCPEER_INVITATION pcInvitation, [out] PPEER_INVITATION_RESPONSE *ppResponse );",
            "name": "PeerCollabInviteEndpoint"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabParseContact( [in] PCWSTR pwzContactData, [out] PPEER_CONTACT *ppContact );",
            "name": "PeerCollabParseContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabQueryContactData( [in, optional] PCPEER_ENDPOINT pcEndpoint, [out] PWSTR *ppwzContactData );",
            "name": "PeerCollabQueryContactData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabRefreshEndpointData( [in] PCPEER_ENDPOINT pcEndpoint );",
            "name": "PeerCollabRefreshEndpointData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabRegisterApplication( [in] PCPEER_APPLICATION_REGISTRATION_INFO pcApplication, [in] PEER_APPLICATION_REGISTRATION_TYPE registrationType );",
            "name": "PeerCollabRegisterApplication"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabRegisterEvent( [in] HANDLE hEvent, [in] DWORD cEventRegistration, [in] PEER_COLLAB_EVENT_REGISTRATION *pEventRegistrations, [out] HPEEREVENT *phPeerEvent );",
            "name": "PeerCollabRegisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSetEndpointName( [in] PCWSTR pwzEndpointName );",
            "name": "PeerCollabSetEndpointName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSetObject( [in] PCPEER_OBJECT pcObject );",
            "name": "PeerCollabSetObject"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSetPresenceInfo( [in] PCPEER_PRESENCE_INFO pcPresenceInfo );",
            "name": "PeerCollabSetPresenceInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabShutdown();",
            "name": "PeerCollabShutdown"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSignin( [in] HWND hwndParent, [in] DWORD dwSigninOptions );",
            "name": "PeerCollabSignin"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSignout( [in] DWORD dwSigninOptions );",
            "name": "PeerCollabSignout"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabStartup( [in] WORD wVersionRequested );",
            "name": "PeerCollabStartup"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabSubscribeEndpointData( [in] const PCPEER_ENDPOINT pcEndpoint );",
            "name": "PeerCollabSubscribeEndpointData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabUnregisterApplication( [in] const GUID *pApplicationId, [in] PEER_APPLICATION_REGISTRATION_TYPE registrationType );",
            "name": "PeerCollabUnregisterApplication"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabUnregisterEvent( [in] HPEEREVENT hPeerEvent );",
            "name": "PeerCollabUnregisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabUnsubscribeEndpointData( [in] const PCPEER_ENDPOINT pcEndpoint );",
            "name": "PeerCollabUnsubscribeEndpointData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCollabUpdateContact( [in] PCPEER_CONTACT pContact );",
            "name": "PeerCollabUpdateContact"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerCreatePeerName( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzClassifier, [out] PWSTR *ppwzPeerName );",
            "name": "PeerCreatePeerName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerEndEnumeration( [in] HPEERENUM hPeerEnum );",
            "name": "PeerEndEnumeration"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerEnumGroups( [in] PCWSTR pwzIdentity, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerEnumGroups"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerEnumIdentities( [out] HPEERENUM *phPeerEnum );",
            "name": "PeerEnumIdentities"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE VOID PeerFreeData( [in] LPCVOID pvData );",
            "name": "PeerFreeData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGetItemCount( [in] HPEERENUM hPeerEnum, [out] ULONG *pCount );",
            "name": "PeerGetItemCount"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGetNextItem( [in] HPEERENUM hPeerEnum, [in, out] ULONG *pCount, [out] PVOID **pppvItems );",
            "name": "PeerGetNextItem"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphAddRecord( [in] HGRAPH hGraph, [in] PPEER_RECORD pRecord, [out] GUID *pRecordId );",
            "name": "PeerGraphAddRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphClose( [in] HGRAPH hGraph );",
            "name": "PeerGraphClose"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphCloseDirectConnection( [in] HGRAPH hGraph, [in] ULONGLONG ullConnectionId );",
            "name": "PeerGraphCloseDirectConnection"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphConnect( [in] HGRAPH hGraph, [in] PCWSTR pwzPeerId, [in] PPEER_ADDRESS pAddress, [out] ULONGLONG *pullConnectionId );",
            "name": "PeerGraphConnect"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphCreate( [in] PPEER_GRAPH_PROPERTIES pGraphProperties, [in] PCWSTR pwzDatabaseName, [in] PPEER_SECURITY_INTERFACE pSecurityInterface, [out] HGRAPH *phGraph );",
            "name": "PeerGraphCreate"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphDelete( [in] PCWSTR pwzGraphId, [in] PCWSTR pwzPeerId, [in] PCWSTR pwzDatabaseName );",
            "name": "PeerGraphDelete"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphDeleteRecord( [in] HGRAPH hGraph, [in] const GUID *pRecordId, [in] BOOL fLocal );",
            "name": "PeerGraphDeleteRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphEndEnumeration( [in] HPEERENUM hPeerEnum );",
            "name": "PeerGraphEndEnumeration"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphEnumConnections( [in] HGRAPH hGraph, [in] DWORD dwFlags, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGraphEnumConnections"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphEnumNodes( [in] HGRAPH hGraph, [in] PCWSTR pwzPeerId, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGraphEnumNodes"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphEnumRecords( [in] HGRAPH hGraph, [in] const GUID *pRecordType, [in] PCWSTR pwzPeerId, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGraphEnumRecords"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphExportDatabase( [in] HGRAPH hGraph, [in] PCWSTR pwzFilePath );",
            "name": "PeerGraphExportDatabase"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE VOID PeerGraphFreeData( [in] PVOID pvData );",
            "name": "PeerGraphFreeData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetEventData( [in] HPEEREVENT hPeerEvent, [out] PPEER_GRAPH_EVENT_DATA *ppEventData );",
            "name": "PeerGraphGetEventData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetItemCount( [in] HPEERENUM hPeerEnum, [out] ULONG *pCount );",
            "name": "PeerGraphGetItemCount"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetNextItem( [in] HPEERENUM hPeerEnum, [in, out] ULONG *pCount, [out] PVOID **pppvItems );",
            "name": "PeerGraphGetNextItem"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetNodeInfo( [in] HGRAPH hGraph, [in] ULONGLONG ullNodeId, [out] PPEER_NODE_INFO *ppNodeInfo );",
            "name": "PeerGraphGetNodeInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetProperties( [in] HGRAPH hGraph, [out] PPEER_GRAPH_PROPERTIES *ppGraphProperties );",
            "name": "PeerGraphGetProperties"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetRecord( [in] HGRAPH hGraph, [in] const GUID *pRecordId, [out] PPEER_RECORD *ppRecord );",
            "name": "PeerGraphGetRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphGetStatus( [in] HGRAPH hGraph, [out] DWORD *pdwStatus );",
            "name": "PeerGraphGetStatus"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphImportDatabase( [in] HGRAPH hGraph, [in] PCWSTR pwzFilePath );",
            "name": "PeerGraphImportDatabase"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphListen( [in] HGRAPH hGraph, [in] DWORD dwScope, [in] DWORD dwScopeId, [in] WORD wPort );",
            "name": "PeerGraphListen"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphOpen( [in] PCWSTR pwzGraphId, [in] PCWSTR pwzPeerId, [in] PCWSTR pwzDatabaseName, [in] PPEER_SECURITY_INTERFACE pSecurityInterface, [in] ULONG cRecordTypeSyncPrecedence, [in] const GUID *pRecordTypeSyncPrecedence, [out] HGRAPH *phGraph );",
            "name": "PeerGraphOpen"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphOpenDirectConnection( [in] HGRAPH hGraph, [in] PCWSTR pwzPeerId, [in] PPEER_ADDRESS pAddress, [out] ULONGLONG *pullConnectionId );",
            "name": "PeerGraphOpenDirectConnection"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphPeerTimeToUniversalTime( [in] HGRAPH hGraph, [in] FILETIME *pftPeerTime, [out] FILETIME *pftUniversalTime );",
            "name": "PeerGraphPeerTimeToUniversalTime"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphRegisterEvent( [in] HGRAPH hGraph, [in] HANDLE hEvent, [in] ULONG cEventRegistrations, [in] PEER_GRAPH_EVENT_REGISTRATION *pEventRegistrations, [out] HPEEREVENT *phPeerEvent );",
            "name": "PeerGraphRegisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphSearchRecords( [in] HGRAPH hGraph, [in] PCWSTR pwzCriteria, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGraphSearchRecords"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphSendData( [in] HGRAPH hGraph, [in] ULONGLONG ullConnectionId, [in] const GUID *pType, [in] ULONG cbData, [in] PVOID pvData );",
            "name": "PeerGraphSendData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphSetNodeAttributes( [in] HGRAPH hGraph, [in] PCWSTR pwzAttributes );",
            "name": "PeerGraphSetNodeAttributes"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphSetPresence( [in] HGRAPH hGraph, [in] BOOL fPresent );",
            "name": "PeerGraphSetPresence"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphSetProperties( [in] HGRAPH hGraph, [in] PPEER_GRAPH_PROPERTIES pGraphProperties );",
            "name": "PeerGraphSetProperties"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphShutdown();",
            "name": "PeerGraphShutdown"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphStartup( [in] WORD wVersionRequested, [out] PPEER_VERSION_DATA pVersionData );",
            "name": "PeerGraphStartup"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphUniversalTimeToPeerTime( [in] HGRAPH hGraph, [in] FILETIME *pftUniversalTime, [out] FILETIME *pftPeerTime );",
            "name": "PeerGraphUniversalTimeToPeerTime"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphUnregisterEvent( [in] HPEEREVENT hPeerEvent );",
            "name": "PeerGraphUnregisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphUpdateRecord( [in] HGRAPH hGraph, [in] PPEER_RECORD pRecord );",
            "name": "PeerGraphUpdateRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGraphValidateDeferredRecords( [in] HGRAPH hGraph, [in] ULONG cRecordIds, [in] const GUID *pRecordIds );",
            "name": "PeerGraphValidateDeferredRecords"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupAddRecord( [in] HGROUP hGroup, [in] PPEER_RECORD pRecord, [out] GUID *pRecordId );",
            "name": "PeerGroupAddRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupClose( [in] HGROUP hGroup );",
            "name": "PeerGroupClose"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupCloseDirectConnection( [in] HGROUP hGroup, [in] ULONGLONG ullConnectionId );",
            "name": "PeerGroupCloseDirectConnection"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupConnect( [in] HGROUP hGroup );",
            "name": "PeerGroupConnect"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupConnectByAddress( [in] HGROUP hGroup, [in] ULONG cAddresses, [in] PPEER_ADDRESS pAddresses );",
            "name": "PeerGroupConnectByAddress"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupCreate( [in] PPEER_GROUP_PROPERTIES pProperties, [out] HGROUP *phGroup );",
            "name": "PeerGroupCreate"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupCreateInvitation( [in] HGROUP hGroup, [in] PCWSTR pwzIdentityInfo, [in] FILETIME *pftExpiration, [in] ULONG cRoles, [in] const GUID *pRoles, [out] PWSTR *ppwzInvitation );",
            "name": "PeerGroupCreateInvitation"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupCreatePasswordInvitation( [in] HGROUP hGroup, [out] PWSTR *ppwzInvitation );",
            "name": "PeerGroupCreatePasswordInvitation"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupDelete( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzGroupPeerName );",
            "name": "PeerGroupDelete"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupDeleteRecord( [in] HGROUP hGroup, [in] const GUID *pRecordId );",
            "name": "PeerGroupDeleteRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupEnumConnections( [in] HGROUP hGroup, [in] DWORD dwFlags, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGroupEnumConnections"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupEnumMembers( [in] HGROUP hGroup, [in] DWORD dwFlags, [in] PCWSTR pwzIdentity, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGroupEnumMembers"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupEnumRecords( [in] HGROUP hGroup, [in] const GUID *pRecordType, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGroupEnumRecords"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupExportConfig( [in] HGROUP hGroup, [in] PCWSTR pwzPassword, [out] PWSTR *ppwzXML );",
            "name": "PeerGroupExportConfig"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupExportDatabase( [in] HGROUP hGroup, [in] PCWSTR pwzFilePath );",
            "name": "PeerGroupExportDatabase"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupGetEventData( [in] HPEEREVENT hPeerEvent, [out] PPEER_GROUP_EVENT_DATA *ppEventData );",
            "name": "PeerGroupGetEventData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupGetProperties( [in] HGROUP hGroup, [out] PPEER_GROUP_PROPERTIES *ppProperties );",
            "name": "PeerGroupGetProperties"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupGetRecord( [in] HGROUP hGroup, [in] const GUID *pRecordId, [out] PPEER_RECORD *ppRecord );",
            "name": "PeerGroupGetRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupGetStatus( [in] HGROUP hGroup, [out] DWORD *pdwStatus );",
            "name": "PeerGroupGetStatus"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupImportConfig( [in] PCWSTR pwzXML, [in] PCWSTR pwzPassword, [in] BOOL fOverwrite, [out] PWSTR *ppwzIdentity, [out] PWSTR *ppwzGroup );",
            "name": "PeerGroupImportConfig"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupImportDatabase( [in] HGROUP hGroup, [in] PCWSTR pwzFilePath );",
            "name": "PeerGroupImportDatabase"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupIssueCredentials( [in] HGROUP hGroup, [in] PCWSTR pwzSubjectIdentity, [in] PEER_CREDENTIAL_INFO *pCredentialInfo, [in] DWORD dwFlags, [out] PWSTR *ppwzInvitation );",
            "name": "PeerGroupIssueCredentials"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupJoin( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzInvitation, [in] PCWSTR pwzCloud, [out] HGROUP *phGroup );",
            "name": "PeerGroupJoin"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupOpen( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzGroupPeerName, [in] PCWSTR pwzCloud, [out] HGROUP *phGroup );",
            "name": "PeerGroupOpen"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupOpenDirectConnection( [in] HGROUP hGroup, [in] PCWSTR pwzIdentity, [in] PPEER_ADDRESS pAddress, [out] ULONGLONG *pullConnectionId );",
            "name": "PeerGroupOpenDirectConnection"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupParseInvitation( [in] PCWSTR pwzInvitation, [out] PPEER_INVITATION_INFO *ppInvitationInfo );",
            "name": "PeerGroupParseInvitation"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupPasswordJoin( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzInvitation, [in] PCWSTR pwzPassword, [in] PCWSTR pwzCloud, [out] HGROUP *phGroup );",
            "name": "PeerGroupPasswordJoin"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupPeerTimeToUniversalTime( [in] HGROUP hGroup, [in] FILETIME *pftPeerTime, [out] FILETIME *pftUniversalTime );",
            "name": "PeerGroupPeerTimeToUniversalTime"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupRegisterEvent( [in] HGROUP hGroup, [in] HANDLE hEvent, [in] DWORD cEventRegistration, [in] PEER_GROUP_EVENT_REGISTRATION *pEventRegistrations, [out] HPEEREVENT *phPeerEvent );",
            "name": "PeerGroupRegisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupSearchRecords( [in] HGROUP hGroup, [in] PCWSTR pwzCriteria, [out] HPEERENUM *phPeerEnum );",
            "name": "PeerGroupSearchRecords"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupSendData( [in] HGROUP hGroup, [in] ULONGLONG ullConnectionId, [in] const GUID *pType, [in] ULONG cbData, [in] PVOID pvData );",
            "name": "PeerGroupSendData"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupSetProperties( [in] HGROUP hGroup, [in] PPEER_GROUP_PROPERTIES pProperties );",
            "name": "PeerGroupSetProperties"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupShutdown();",
            "name": "PeerGroupShutdown"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupStartup( [in] WORD wVersionRequested, [out] PPEER_VERSION_DATA pVersionData );",
            "name": "PeerGroupStartup"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupUniversalTimeToPeerTime( [in] HGROUP hGroup, [in] FILETIME *pftUniversalTime, [out] FILETIME *pftPeerTime );",
            "name": "PeerGroupUniversalTimeToPeerTime"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupUnregisterEvent( [in] HPEEREVENT hPeerEvent );",
            "name": "PeerGroupUnregisterEvent"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerGroupUpdateRecord( [in] HGROUP hGroup, [in] PPEER_RECORD pRecord );",
            "name": "PeerGroupUpdateRecord"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerHostNameToPeerName( [in] PCWSTR pwzHostName, [out] PWSTR *ppwzPeerName );",
            "name": "PeerHostNameToPeerName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityCreate( [in] PCWSTR pwzClassifier, [in] PCWSTR pwzFriendlyName, [in] HCRYPTPROV hCryptProv, [out] PWSTR *ppwzIdentity );",
            "name": "PeerIdentityCreate"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityDelete( [in] PCWSTR pwzIdentity );",
            "name": "PeerIdentityDelete"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityExport( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzPassword, [out] PWSTR *ppwzExportXML );",
            "name": "PeerIdentityExport"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityGetCryptKey( [in] PCWSTR pwzIdentity, [out] HCRYPTPROV *phCryptProv );",
            "name": "PeerIdentityGetCryptKey"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityGetDefault( [out] PWSTR *ppwzPeerName );",
            "name": "PeerIdentityGetDefault"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityGetFriendlyName( [in] PCWSTR pwzIdentity, [out] PWSTR *ppwzFriendlyName );",
            "name": "PeerIdentityGetFriendlyName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityGetXML( [in] PCWSTR pwzIdentity, [out] PWSTR *ppwzIdentityXML );",
            "name": "PeerIdentityGetXML"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentityImport( [in] PCWSTR pwzImportXML, [in] PCWSTR pwzPassword, [out] PWSTR *ppwzIdentity );",
            "name": "PeerIdentityImport"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerIdentitySetFriendlyName( [in] PCWSTR pwzIdentity, [in] PCWSTR pwzFriendlyName );",
            "name": "PeerIdentitySetFriendlyName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerNameToPeerHostName( [in] PCWSTR pwzPeerName, [out] PWSTR *ppwzHostName );",
            "name": "PeerNameToPeerHostName"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpEndResolve( [in] HRESOLUTION hResolve );",
            "name": "PeerPnrpEndResolve"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpGetCloudInfo( [out] ULONG *pcNumClouds, [out] PPEER_PNRP_CLOUD_INFO *ppCloudInfo );",
            "name": "PeerPnrpGetCloudInfo"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpGetEndpoint( [in] HRESOLUTION hResolve, [out] PPEER_PNRP_ENDPOINT_INFO *ppEndpoint );",
            "name": "PeerPnrpGetEndpoint"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpRegister( [in] PCWSTR pcwzPeerName, [in, optional] PPEER_PNRP_REGISTRATION_INFO pRegistrationInfo, [out] HREGISTRATION *phRegistration );",
            "name": "PeerPnrpRegister"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpResolve( [in] PCWSTR pcwzPeerName, [in, optional] PCWSTR pcwzCloudName, [in, out] ULONG *pcEndpoints, [out] PPEER_PNRP_ENDPOINT_INFO *ppEndpoints );",
            "name": "PeerPnrpResolve"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpShutdown();",
            "name": "PeerPnrpShutdown"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpStartResolve( [in] PCWSTR pcwzPeerName, [in, optional] PCWSTR pcwzCloudName, [in, optional] ULONG cMaxEndpoints, [in] HANDLE hEvent, [out] HRESOLUTION *phResolve );",
            "name": "PeerPnrpStartResolve"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpStartup( WORD wVersionRequested );",
            "name": "PeerPnrpStartup"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpUnregister( [in] HREGISTRATION hRegistration );",
            "name": "PeerPnrpUnregister"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE HRESULT PeerPnrpUpdateRegistration( [in] HREGISTRATION hRegistration, [in] PPEER_PNRP_REGISTRATION_INFO pRegistrationInfo );",
            "name": "PeerPnrpUpdateRegistration"
        },
        {
            "signature": "PFNPEER_FREE_SECURITY_DATA PfnpeerFreeSecurityData; HRESULT PfnpeerFreeSecurityData( [in] HGRAPH hGraph, [in] PVOID pvContext, [in] PPEER_DATA pSecurityData ) {...}",
            "name": "PFNPEER_FREE_SECURITY_DATA callback"
        },
        {
            "signature": "PFNPEER_SECURE_RECORD PfnpeerSecureRecord; HRESULT PfnpeerSecureRecord( [in] HGRAPH hGraph, [in] PVOID pvContext, [in] PPEER_RECORD pRecord, [in] PEER_RECORD_CHANGE_TYPE changeType, [out] PPEER_DATA *ppSecurityData ) {...}",
            "name": "PFNPEER_SECURE_RECORD callback"
        },
        {
            "signature": "PFNPEER_VALIDATE_RECORD PfnpeerValidateRecord; HRESULT PfnpeerValidateRecord( [in] HGRAPH hGraph, [in] PVOID pvContext, [in] PPEER_RECORD pRecord, [in] PEER_RECORD_CHANGE_TYPE changeType ) {...}",
            "name": "PFNPEER_VALIDATE_RECORD callback"
        }
    ],
    "Pathcch.h": [
        {
            "signature": "WINPATHCCHAPI HRESULT PathAllocCanonicalize( [in] PCWSTR pszPathIn, [in] ULONG dwFlags, [out] PWSTR *ppszPathOut );",
            "name": "PathAllocCanonicalize"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathAllocCombine( [in] PCWSTR pszPathIn, [in] PCWSTR pszMore, [in] ULONG dwFlags, [out] PWSTR *ppszPathOut );",
            "name": "PathAllocCombine"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchAddBackslash( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchAddBackslash"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchAddBackslashEx( [in, out] PWSTR pszPath, [in] size_t cchPath, [out, optional] PWSTR *ppszEnd, [out, optional] size_t *pcchRemaining );",
            "name": "PathCchAddBackslashEx"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchAddExtension( [in, out] PWSTR pszPath, [in] size_t cchPath, [in] PCWSTR pszExt );",
            "name": "PathCchAddExtension"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchAppend( [in, out] PWSTR pszPath, [in] size_t cchPath, [in, optional] PCWSTR pszMore );",
            "name": "PathCchAppend"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchAppendEx( [in, out] PWSTR pszPath, [in] size_t cchPath, [in, optional] PCWSTR pszMore, [in] ULONG dwFlags );",
            "name": "PathCchAppendEx"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchCanonicalize( [out] PWSTR pszPathOut, [in] size_t cchPathOut, [in] PCWSTR pszPathIn );",
            "name": "PathCchCanonicalize"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchCanonicalizeEx( [out] PWSTR pszPathOut, [in] size_t cchPathOut, [in] PCWSTR pszPathIn, [in] ULONG dwFlags );",
            "name": "PathCchCanonicalizeEx"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchCombine( [out] PWSTR pszPathOut, [in] size_t cchPathOut, [in, optional] PCWSTR pszPathIn, [in, optional] PCWSTR pszMore );",
            "name": "PathCchCombine"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchCombineEx( [out] PWSTR pszPathOut, [in] size_t cchPathOut, [in, optional] PCWSTR pszPathIn, [in, optional] PCWSTR pszMore, [in] ULONG dwFlags );",
            "name": "PathCchCombineEx"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchFindExtension( [in] PCWSTR pszPath, [in] size_t cchPath, [out] PCWSTR *ppszExt );",
            "name": "PathCchFindExtension"
        },
        {
            "signature": "WINPATHCCHAPI BOOL PathCchIsRoot( [in, optional] PCWSTR pszPath );",
            "name": "PathCchIsRoot"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchRemoveBackslash( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchRemoveBackslash"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchRemoveBackslashEx( [in, out] PWSTR pszPath, [in] size_t cchPath, [out, optional] PWSTR *ppszEnd, [out, optional] size_t *pcchRemaining );",
            "name": "PathCchRemoveBackslashEx"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchRemoveExtension( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchRemoveExtension"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchRemoveFileSpec( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchRemoveFileSpec"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchRenameExtension( [in, out] PWSTR pszPath, [in] size_t cchPath, [in] PCWSTR pszExt );",
            "name": "PathCchRenameExtension"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchSkipRoot( [in] PCWSTR pszPath, [out] PCWSTR *ppszRootEnd );",
            "name": "PathCchSkipRoot"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchStripPrefix( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchStripPrefix"
        },
        {
            "signature": "WINPATHCCHAPI HRESULT PathCchStripToRoot( [in, out] PWSTR pszPath, [in] size_t cchPath );",
            "name": "PathCchStripToRoot"
        },
        {
            "signature": "WINPATHCCHAPI BOOL PathIsUNCEx( [in] PCWSTR pszPath, [out, optional] PCWSTR *ppszServer );",
            "name": "PathIsUNCEx"
        }
    ],
    "Pchannel.h": [],
    "Pdh.h": [
        {
            "signature": "CounterPathCallBack Counterpathcallback; PDH_STATUS Counterpathcallback( DWORD_PTR unnamedParam1 ) {...}",
            "name": "CounterPathCallBack callback"
        },
        {
            "signature": "PDH_FUNCTION PdhAddCounterA( [in] PDH_HQUERY hQuery, [in] LPCSTR szFullCounterPath, [in] DWORD_PTR dwUserData, [out] PDH_HCOUNTER *phCounter );",
            "name": "PdhAddCounterA"
        },
        {
            "signature": "PDH_FUNCTION PdhAddCounterW( [in] PDH_HQUERY hQuery, [in] LPCWSTR szFullCounterPath, [in] DWORD_PTR dwUserData, [out] PDH_HCOUNTER *phCounter );",
            "name": "PdhAddCounterW"
        },
        {
            "signature": "PDH_FUNCTION PdhAddEnglishCounterA( [in] PDH_HQUERY hQuery, [in] LPCSTR szFullCounterPath, [in] DWORD_PTR dwUserData, [out] PDH_HCOUNTER *phCounter );",
            "name": "PdhAddEnglishCounterA"
        },
        {
            "signature": "PDH_FUNCTION PdhAddEnglishCounterW( [in] PDH_HQUERY hQuery, [in] LPCWSTR szFullCounterPath, [in] DWORD_PTR dwUserData, [out] PDH_HCOUNTER *phCounter );",
            "name": "PdhAddEnglishCounterW"
        },
        {
            "signature": "PDH_FUNCTION PdhBindInputDataSourceA( [out] PDH_HLOG *phDataSource, [in] LPCSTR LogFileNameList );",
            "name": "PdhBindInputDataSourceA"
        },
        {
            "signature": "PDH_FUNCTION PdhBindInputDataSourceW( [out] PDH_HLOG *phDataSource, [in] LPCWSTR LogFileNameList );",
            "name": "PdhBindInputDataSourceW"
        },
        {
            "signature": "PDH_FUNCTION PdhBrowseCountersA( [in] PPDH_BROWSE_DLG_CONFIG_A pBrowseDlgData );",
            "name": "PdhBrowseCountersA"
        },
        {
            "signature": "PDH_FUNCTION PdhBrowseCountersHA( [in] PPDH_BROWSE_DLG_CONFIG_HA pBrowseDlgData );",
            "name": "PdhBrowseCountersHA"
        },
        {
            "signature": "PDH_FUNCTION PdhBrowseCountersHW( [in] PPDH_BROWSE_DLG_CONFIG_HW pBrowseDlgData );",
            "name": "PdhBrowseCountersHW"
        },
        {
            "signature": "PDH_FUNCTION PdhBrowseCountersW( [in] PPDH_BROWSE_DLG_CONFIG_W pBrowseDlgData );",
            "name": "PdhBrowseCountersW"
        },
        {
            "signature": "PDH_FUNCTION PdhCalculateCounterFromRawValue( [in] PDH_HCOUNTER hCounter, [in] DWORD dwFormat, [in] PPDH_RAW_COUNTER rawValue1, [in] PPDH_RAW_COUNTER rawValue2, [out] PPDH_FMT_COUNTERVALUE fmtValue );",
            "name": "PdhCalculateCounterFromRawValue"
        },
        {
            "signature": "PDH_FUNCTION PdhCloseLog( [in] PDH_HLOG hLog, [in] DWORD dwFlags );",
            "name": "PdhCloseLog"
        },
        {
            "signature": "PDH_FUNCTION PdhCloseQuery( [in] PDH_HQUERY hQuery );",
            "name": "PdhCloseQuery"
        },
        {
            "signature": "PDH_FUNCTION PdhCollectQueryData( [in, out] PDH_HQUERY hQuery );",
            "name": "PdhCollectQueryData"
        },
        {
            "signature": "PDH_FUNCTION PdhCollectQueryDataEx( [in] PDH_HQUERY hQuery, [in] DWORD dwIntervalTime, [in] HANDLE hNewDataEvent );",
            "name": "PdhCollectQueryDataEx"
        },
        {
            "signature": "PDH_FUNCTION PdhCollectQueryDataWithTime( [in, out] PDH_HQUERY hQuery, [out] LONGLONG *pllTimeStamp );",
            "name": "PdhCollectQueryDataWithTime"
        },
        {
            "signature": "PDH_FUNCTION PdhComputeCounterStatistics( [in] PDH_HCOUNTER hCounter, [in] DWORD dwFormat, [in] DWORD dwFirstEntry, [in] DWORD dwNumEntries, [in] PPDH_RAW_COUNTER lpRawValueArray, [out] PPDH_STATISTICS data );",
            "name": "PdhComputeCounterStatistics"
        },
        {
            "signature": "PDH_FUNCTION PdhConnectMachineA( [in] LPCSTR szMachineName );",
            "name": "PdhConnectMachineA"
        },
        {
            "signature": "PDH_FUNCTION PdhConnectMachineW( [in] LPCWSTR szMachineName );",
            "name": "PdhConnectMachineW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumLogSetNamesA( [in] LPCSTR szDataSource, [out] PZZSTR mszDataSetNameList, [in, out] LPDWORD pcchBufferLength );",
            "name": "PdhEnumLogSetNamesA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumLogSetNamesW( [in] LPCWSTR szDataSource, [out] PZZWSTR mszDataSetNameList, [in, out] LPDWORD pcchBufferLength );",
            "name": "PdhEnumLogSetNamesW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumMachinesA( [in] LPCSTR szDataSource, [out] PZZSTR mszMachineList, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhEnumMachinesA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumMachinesHA( [in] PDH_HLOG hDataSource, [out] PZZSTR mszMachineList, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhEnumMachinesHA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumMachinesHW( [in] PDH_HLOG hDataSource, [out] PZZWSTR mszMachineList, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhEnumMachinesHW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumMachinesW( [in] LPCWSTR szDataSource, [out] PZZWSTR mszMachineList, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhEnumMachinesW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectItemsA( [in] LPCSTR szDataSource, [in] LPCSTR szMachineName, [in] LPCSTR szObjectName, [out] PZZSTR mszCounterList, [in, out] LPDWORD pcchCounterListLength, [out] PZZSTR mszInstanceList, [in, out] LPDWORD pcchInstanceListLength, [in] DWORD dwDetailLevel, [in] DWORD dwFlags );",
            "name": "PdhEnumObjectItemsA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectItemsHA( [in] PDH_HLOG hDataSource, [in] LPCSTR szMachineName, [in] LPCSTR szObjectName, [out] PZZSTR mszCounterList, [in, out] LPDWORD pcchCounterListLength, [out] PZZSTR mszInstanceList, [in, out] LPDWORD pcchInstanceListLength, [in] DWORD dwDetailLevel, [in] DWORD dwFlags );",
            "name": "PdhEnumObjectItemsHA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectItemsHW( [in] PDH_HLOG hDataSource, [in] LPCWSTR szMachineName, [in] LPCWSTR szObjectName, [out] PZZWSTR mszCounterList, [in, out] LPDWORD pcchCounterListLength, [out] PZZWSTR mszInstanceList, [in, out] LPDWORD pcchInstanceListLength, [in] DWORD dwDetailLevel, [in] DWORD dwFlags );",
            "name": "PdhEnumObjectItemsHW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectItemsW( [in] LPCWSTR szDataSource, [in] LPCWSTR szMachineName, [in] LPCWSTR szObjectName, [out] PZZWSTR mszCounterList, [in, out] LPDWORD pcchCounterListLength, [out] PZZWSTR mszInstanceList, [in, out] LPDWORD pcchInstanceListLength, [in] DWORD dwDetailLevel, [in] DWORD dwFlags );",
            "name": "PdhEnumObjectItemsW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectsA( [in] LPCSTR szDataSource, [in] LPCSTR szMachineName, [out] PZZSTR mszObjectList, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwDetailLevel, [in] BOOL bRefresh );",
            "name": "PdhEnumObjectsA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectsHA( [in] PDH_HLOG hDataSource, [in] LPCSTR szMachineName, [out] PZZSTR mszObjectList, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwDetailLevel, [in] BOOL bRefresh );",
            "name": "PdhEnumObjectsHA"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectsHW( [in] PDH_HLOG hDataSource, [in] LPCWSTR szMachineName, [out] PZZWSTR mszObjectList, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwDetailLevel, [in] BOOL bRefresh );",
            "name": "PdhEnumObjectsHW"
        },
        {
            "signature": "PDH_FUNCTION PdhEnumObjectsW( [in] LPCWSTR szDataSource, [in] LPCWSTR szMachineName, [out] PZZWSTR mszObjectList, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwDetailLevel, [in] BOOL bRefresh );",
            "name": "PdhEnumObjectsW"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandCounterPathA( [in] LPCSTR szWildCardPath, [out] PZZSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength );",
            "name": "PdhExpandCounterPathA"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandCounterPathW( [in] LPCWSTR szWildCardPath, [out] PZZWSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength );",
            "name": "PdhExpandCounterPathW"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandWildCardPathA( [in] LPCSTR szDataSource, [in] LPCSTR szWildCardPath, [out] PZZSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength, [in] DWORD dwFlags );",
            "name": "PdhExpandWildCardPathA"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandWildCardPathHA( [in] PDH_HLOG hDataSource, [in] LPCSTR szWildCardPath, [out] PZZSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength, [in] DWORD dwFlags );",
            "name": "PdhExpandWildCardPathHA"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandWildCardPathHW( [in] PDH_HLOG hDataSource, [in] LPCWSTR szWildCardPath, [out] PZZWSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength, [in] DWORD dwFlags );",
            "name": "PdhExpandWildCardPathHW"
        },
        {
            "signature": "PDH_FUNCTION PdhExpandWildCardPathW( [in] LPCWSTR szDataSource, [in] LPCWSTR szWildCardPath, [out] PZZWSTR mszExpandedPathList, [in, out] LPDWORD pcchPathListLength, [in] DWORD dwFlags );",
            "name": "PdhExpandWildCardPathW"
        },
        {
            "signature": "PDH_FUNCTION PdhFormatFromRawValue( [in] DWORD dwCounterType, [in] DWORD dwFormat, [in] LONGLONG *pTimeBase, [in] PPDH_RAW_COUNTER pRawValue1, [in] PPDH_RAW_COUNTER pRawValue2, [out] PPDH_FMT_COUNTERVALUE pFmtValue );",
            "name": "PdhFormatFromRawValue"
        },
        {
            "signature": "PDH_FUNCTION PdhGetCounterInfoA( [in] PDH_HCOUNTER hCounter, [in] BOOLEAN bRetrieveExplainText, [in, out] LPDWORD pdwBufferSize, [out] PPDH_COUNTER_INFO_A lpBuffer );",
            "name": "PdhGetCounterInfoA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetCounterInfoW( [in] PDH_HCOUNTER hCounter, [in] BOOLEAN bRetrieveExplainText, [in, out] LPDWORD pdwBufferSize, [out] PPDH_COUNTER_INFO_W lpBuffer );",
            "name": "PdhGetCounterInfoW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetCounterTimeBase( [in] PDH_HCOUNTER hCounter, [out] LONGLONG *pTimeBase );",
            "name": "PdhGetCounterTimeBase"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDataSourceTimeRangeA( [in] LPCSTR szDataSource, [out] LPDWORD pdwNumEntries, [out] PPDH_TIME_INFO pInfo, [in] LPDWORD pdwBufferSize );",
            "name": "PdhGetDataSourceTimeRangeA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDataSourceTimeRangeH( [in] PDH_HLOG hDataSource, [out] LPDWORD pdwNumEntries, [out] PPDH_TIME_INFO pInfo, [in] LPDWORD pdwBufferSize );",
            "name": "PdhGetDataSourceTimeRangeH"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDataSourceTimeRangeW( [in] LPCWSTR szDataSource, [out] LPDWORD pdwNumEntries, [out] PPDH_TIME_INFO pInfo, [in] LPDWORD pdwBufferSize );",
            "name": "PdhGetDataSourceTimeRangeW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfCounterA( [in] LPCSTR szDataSource, [in] LPCSTR szMachineName, [in] LPCSTR szObjectName, [out] LPSTR szDefaultCounterName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfCounterA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfCounterHA( [in] PDH_HLOG hDataSource, [in] LPCSTR szMachineName, [in] LPCSTR szObjectName, [out] LPSTR szDefaultCounterName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfCounterHA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfCounterHW( [in] PDH_HLOG hDataSource, [in] LPCWSTR szMachineName, [in] LPCWSTR szObjectName, [out] LPWSTR szDefaultCounterName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfCounterHW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfCounterW( [in] LPCWSTR szDataSource, [in] LPCWSTR szMachineName, [in] LPCWSTR szObjectName, [out] LPWSTR szDefaultCounterName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfCounterW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfObjectA( [in] LPCSTR szDataSource, [in] LPCSTR szMachineName, [out] LPSTR szDefaultObjectName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfObjectA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfObjectHA( [in] PDH_HLOG hDataSource, [in] LPCSTR szMachineName, [out] LPSTR szDefaultObjectName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfObjectHA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfObjectHW( [in] PDH_HLOG hDataSource, [in] LPCWSTR szMachineName, [out] LPWSTR szDefaultObjectName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfObjectHW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDefaultPerfObjectW( [in] LPCWSTR szDataSource, [in] LPCWSTR szMachineName, [out] LPWSTR szDefaultObjectName, [in, out] LPDWORD pcchBufferSize );",
            "name": "PdhGetDefaultPerfObjectW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetDllVersion( [out] LPDWORD lpdwVersion );",
            "name": "PdhGetDllVersion"
        },
        {
            "signature": "PDH_FUNCTION PdhGetFormattedCounterArrayA( [in] PDH_HCOUNTER hCounter, [in] DWORD dwFormat, [in, out] LPDWORD lpdwBufferSize, [out] LPDWORD lpdwItemCount, [out] PPDH_FMT_COUNTERVALUE_ITEM_A ItemBuffer );",
            "name": "PdhGetFormattedCounterArrayA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetFormattedCounterArrayW( [in] PDH_HCOUNTER hCounter, [in] DWORD dwFormat, [in, out] LPDWORD lpdwBufferSize, [out] LPDWORD lpdwItemCount, [out] PPDH_FMT_COUNTERVALUE_ITEM_W ItemBuffer );",
            "name": "PdhGetFormattedCounterArrayW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetFormattedCounterValue( [in] PDH_HCOUNTER hCounter, [in] DWORD dwFormat, [out] LPDWORD lpdwType, [out] PPDH_FMT_COUNTERVALUE pValue );",
            "name": "PdhGetFormattedCounterValue"
        },
        {
            "signature": "PDH_FUNCTION PdhGetLogFileSize( [in] PDH_HLOG hLog, [out] LONGLONG *llSize );",
            "name": "PdhGetLogFileSize"
        },
        {
            "signature": "PDH_FUNCTION PdhGetRawCounterArrayA( [in] PDH_HCOUNTER hCounter, [in, out] LPDWORD lpdwBufferSize, [out] LPDWORD lpdwItemCount, [out] PPDH_RAW_COUNTER_ITEM_A ItemBuffer );",
            "name": "PdhGetRawCounterArrayA"
        },
        {
            "signature": "PDH_FUNCTION PdhGetRawCounterArrayW( [in] PDH_HCOUNTER hCounter, [in, out] LPDWORD lpdwBufferSize, [out] LPDWORD lpdwItemCount, [out] PPDH_RAW_COUNTER_ITEM_W ItemBuffer );",
            "name": "PdhGetRawCounterArrayW"
        },
        {
            "signature": "PDH_FUNCTION PdhGetRawCounterValue( [in] PDH_HCOUNTER hCounter, [out] LPDWORD lpdwType, [out] PPDH_RAW_COUNTER pValue );",
            "name": "PdhGetRawCounterValue"
        },
        {
            "signature": "BOOL PdhIsRealTimeQuery( [in] PDH_HQUERY hQuery );",
            "name": "PdhIsRealTimeQuery"
        },
        {
            "signature": "PDH_FUNCTION PdhLookupPerfIndexByNameA( [in] LPCSTR szMachineName, [in] LPCSTR szNameBuffer, [out] LPDWORD pdwIndex );",
            "name": "PdhLookupPerfIndexByNameA"
        },
        {
            "signature": "PDH_FUNCTION PdhLookupPerfIndexByNameW( [in] LPCWSTR szMachineName, [in] LPCWSTR szNameBuffer, [out] LPDWORD pdwIndex );",
            "name": "PdhLookupPerfIndexByNameW"
        },
        {
            "signature": "PDH_FUNCTION PdhLookupPerfNameByIndexA( [in] LPCSTR szMachineName, [in] DWORD dwNameIndex, [out] LPSTR szNameBuffer, [in, out] LPDWORD pcchNameBufferSize );",
            "name": "PdhLookupPerfNameByIndexA"
        },
        {
            "signature": "PDH_FUNCTION PdhLookupPerfNameByIndexW( [in] LPCWSTR szMachineName, [in] DWORD dwNameIndex, [out] LPWSTR szNameBuffer, [in, out] LPDWORD pcchNameBufferSize );",
            "name": "PdhLookupPerfNameByIndexW"
        },
        {
            "signature": "PDH_FUNCTION PdhMakeCounterPathA( [in] PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements, [out] LPSTR szFullPathBuffer, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwFlags );",
            "name": "PdhMakeCounterPathA"
        },
        {
            "signature": "PDH_FUNCTION PdhMakeCounterPathW( [in] PPDH_COUNTER_PATH_ELEMENTS_W pCounterPathElements, [out] LPWSTR szFullPathBuffer, [in, out] LPDWORD pcchBufferSize, [in] DWORD dwFlags );",
            "name": "PdhMakeCounterPathW"
        },
        {
            "signature": "PDH_FUNCTION PdhOpenLogA( [in] LPCSTR szLogFileName, [in] DWORD dwAccessFlags, [in] LPDWORD lpdwLogType, [in] PDH_HQUERY hQuery, [in] DWORD dwMaxSize, [in] LPCSTR szUserCaption, [out] PDH_HLOG *phLog );",
            "name": "PdhOpenLogA"
        },
        {
            "signature": "PDH_FUNCTION PdhOpenLogW( [in] LPCWSTR szLogFileName, [in] DWORD dwAccessFlags, [in] LPDWORD lpdwLogType, [in] PDH_HQUERY hQuery, [in] DWORD dwMaxSize, [in] LPCWSTR szUserCaption, [out] PDH_HLOG *phLog );",
            "name": "PdhOpenLogW"
        },
        {
            "signature": "PDH_FUNCTION PdhOpenQueryA( [in] LPCSTR szDataSource, [in] DWORD_PTR dwUserData, [out] PDH_HQUERY *phQuery );",
            "name": "PdhOpenQueryA"
        },
        {
            "signature": "PDH_FUNCTION PdhOpenQueryH( [in] PDH_HLOG hDataSource, [in] DWORD_PTR dwUserData, [out] PDH_HQUERY *phQuery );",
            "name": "PdhOpenQueryH"
        },
        {
            "signature": "PDH_FUNCTION PdhOpenQueryW( [in] LPCWSTR szDataSource, [in] DWORD_PTR dwUserData, [out] PDH_HQUERY *phQuery );",
            "name": "PdhOpenQueryW"
        },
        {
            "signature": "PDH_FUNCTION PdhParseCounterPathA( [in] LPCSTR szFullPathBuffer, [out] PPDH_COUNTER_PATH_ELEMENTS_A pCounterPathElements, [in, out] LPDWORD pdwBufferSize, DWORD dwFlags );",
            "name": "PdhParseCounterPathA"
        },
        {
            "signature": "PDH_FUNCTION PdhParseCounterPathW( [in] LPCWSTR szFullPathBuffer, [out] PPDH_COUNTER_PATH_ELEMENTS_W pCounterPathElements, [in, out] LPDWORD pdwBufferSize, DWORD dwFlags );",
            "name": "PdhParseCounterPathW"
        },
        {
            "signature": "PDH_FUNCTION PdhParseInstanceNameA( [in] LPCSTR szInstanceString, [out] LPSTR szInstanceName, [in, out] LPDWORD pcchInstanceNameLength, [out] LPSTR szParentName, [in, out] LPDWORD pcchParentNameLength, [out] LPDWORD lpIndex );",
            "name": "PdhParseInstanceNameA"
        },
        {
            "signature": "PDH_FUNCTION PdhParseInstanceNameW( [in] LPCWSTR szInstanceString, [out] LPWSTR szInstanceName, [in, out] LPDWORD pcchInstanceNameLength, [out] LPWSTR szParentName, [in, out] LPDWORD pcchParentNameLength, [out] LPDWORD lpIndex );",
            "name": "PdhParseInstanceNameW"
        },
        {
            "signature": "PDH_FUNCTION PdhReadRawLogRecord( [in] PDH_HLOG hLog, [in] FILETIME ftRecord, [out] PPDH_RAW_LOG_RECORD pRawLogRecord, [in] LPDWORD pdwBufferLength );",
            "name": "PdhReadRawLogRecord"
        },
        {
            "signature": "PDH_FUNCTION PdhRemoveCounter( [in] PDH_HCOUNTER hCounter );",
            "name": "PdhRemoveCounter"
        },
        {
            "signature": "PDH_FUNCTION PdhSelectDataSourceA( [in] HWND hWndOwner, [in] DWORD dwFlags, [out] LPSTR szDataSource, [in, out] LPDWORD pcchBufferLength );",
            "name": "PdhSelectDataSourceA"
        },
        {
            "signature": "PDH_FUNCTION PdhSelectDataSourceW( [in] HWND hWndOwner, [in] DWORD dwFlags, [out] LPWSTR szDataSource, [in, out] LPDWORD pcchBufferLength );",
            "name": "PdhSelectDataSourceW"
        },
        {
            "signature": "PDH_FUNCTION PdhSetCounterScaleFactor( [in] PDH_HCOUNTER hCounter, [in] LONG lFactor );",
            "name": "PdhSetCounterScaleFactor"
        },
        {
            "signature": "PDH_FUNCTION PdhSetDefaultRealTimeDataSource( [in] DWORD dwDataSourceId );",
            "name": "PdhSetDefaultRealTimeDataSource"
        },
        {
            "signature": "PDH_FUNCTION PdhSetQueryTimeRange( [in] PDH_HQUERY hQuery, [in] PPDH_TIME_INFO pInfo );",
            "name": "PdhSetQueryTimeRange"
        },
        {
            "signature": "PDH_FUNCTION PdhUpdateLogA( [in] PDH_HLOG hLog, [in] LPCSTR szUserString );",
            "name": "PdhUpdateLogA"
        },
        {
            "signature": "PDH_FUNCTION PdhUpdateLogFileCatalog( [in] PDH_HLOG hLog );",
            "name": "PdhUpdateLogFileCatalog"
        },
        {
            "signature": "PDH_FUNCTION PdhUpdateLogW( [in] PDH_HLOG hLog, [in] LPCWSTR szUserString );",
            "name": "PdhUpdateLogW"
        },
        {
            "signature": "PDH_FUNCTION PdhValidatePathA( [in] LPCSTR szFullPathBuffer );",
            "name": "PdhValidatePathA"
        },
        {
            "signature": "PDH_FUNCTION PdhValidatePathExA( [in, optional] PDH_HLOG hDataSource, [in] LPCSTR szFullPathBuffer );",
            "name": "PdhValidatePathExA"
        },
        {
            "signature": "PDH_FUNCTION PdhValidatePathExW( [in, optional] PDH_HLOG hDataSource, [in] LPCWSTR szFullPathBuffer );",
            "name": "PdhValidatePathExW"
        },
        {
            "signature": "PDH_FUNCTION PdhValidatePathW( [in] LPCWSTR szFullPathBuffer );",
            "name": "PdhValidatePathW"
        }
    ],
    "Peerdist.h": [
        {
            "signature": "DWORD PeerDistClientAddContentInformation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, DWORD cbNumberOfBytes, [in] PBYTE pBuffer, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientAddContentInformation"
        },
        {
            "signature": "DWORD PeerDistClientAddData( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, DWORD cbNumberOfBytes, [in] PBYTE pBuffer, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientAddData"
        },
        {
            "signature": "DWORD PeerDistClientBlockRead( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, DWORD cbMaxNumberOfBytes, [in, out, optional] PBYTE pBuffer, DWORD dwTimeoutInMilliseconds, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientBlockRead"
        },
        {
            "signature": "DWORD PeerDistClientCancelAsyncOperation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, [in, optional] LPOVERLAPPED pOverlapped );",
            "name": "PeerDistClientCancelAsyncOperation"
        },
        {
            "signature": "DWORD PeerDistClientCloseContent( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle );",
            "name": "PeerDistClientCloseContent"
        },
        {
            "signature": "DWORD PeerDistClientCompleteContentInformation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientCompleteContentInformation"
        },
        {
            "signature": "DWORD PeerDistClientFlushContent( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PCPEERDIST_CONTENT_TAG pContentTag, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientFlushContent"
        },
        {
            "signature": "DWORD PeerDistClientGetInformationByHandle( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, [in] PEERDIST_CLIENT_INFO_BY_HANDLE_CLASS PeerDistClientInfoClass, DWORD dwBufferSize, [out] LPVOID lpInformation );",
            "name": "PeerDistClientGetInformationByHandle"
        },
        {
            "signature": "DWORD PeerDistClientOpenContent( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PCPEERDIST_CONTENT_TAG pContentTag, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [out] PPEERDIST_CONTENT_HANDLE phContentHandle );",
            "name": "PeerDistClientOpenContent"
        },
        {
            "signature": "DWORD PeerDistClientStreamRead( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENT_HANDLE hContentHandle, DWORD cbMaxNumberOfBytes, [in, out, optional] PBYTE pBuffer, DWORD dwTimeoutInMilliseconds, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistClientStreamRead"
        },
        {
            "signature": "BOOL PeerDistGetOverlappedResult( [in] LPOVERLAPPED lpOverlapped, [out] LPDWORD lpNumberOfBytesTransferred, [in] BOOL bWait );",
            "name": "PeerDistGetOverlappedResult"
        },
        {
            "signature": "DWORD PeerDistGetStatus( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [out] PEERDIST_STATUS *pPeerDistStatus );",
            "name": "PeerDistGetStatus"
        },
        {
            "signature": "DWORD PeerDistGetStatusEx( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in, out] PEERDIST_STATUS_INFO *pPeerDistStatus );",
            "name": "PeerDistGetStatusEx"
        },
        {
            "signature": "DWORD PeerDistRegisterForStatusChangeNotification( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [in] LPOVERLAPPED lpOverlapped, [out] PEERDIST_STATUS *pPeerDistStatus );",
            "name": "PeerDistRegisterForStatusChangeNotification"
        },
        {
            "signature": "DWORD PeerDistRegisterForStatusChangeNotificationEx( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [in] LPOVERLAPPED lpOverlapped, [in, out] PEERDIST_STATUS_INFO *pPeerDistStatus );",
            "name": "PeerDistRegisterForStatusChangeNotificationEx"
        },
        {
            "signature": "DWORD PeerDistServerCancelAsyncOperation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, DWORD cbContentIdentifier, [in] PBYTE pContentIdentifier, [in] LPOVERLAPPED pOverlapped );",
            "name": "PeerDistServerCancelAsyncOperation"
        },
        {
            "signature": "DWORD PeerDistServerCloseContentInformation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENTINFO_HANDLE hContentInfo );",
            "name": "PeerDistServerCloseContentInformation"
        },
        {
            "signature": "DWORD PeerDistServerCloseStreamHandle( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_STREAM_HANDLE hStream );",
            "name": "PeerDistServerCloseStreamHandle"
        },
        {
            "signature": "DWORD PeerDistServerOpenContentInformation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, DWORD cbContentIdentifier, [in] PBYTE pContentIdentifier, ULONGLONG ullContentOffset, ULONGLONG cbContentLength, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [out] PPEERDIST_CONTENTINFO_HANDLE phContentInfo );",
            "name": "PeerDistServerOpenContentInformation"
        },
        {
            "signature": "DWORD PeerDistServerOpenContentInformationEx( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] DWORD cbContentIdentifier, [in] PBYTE pContentIdentifier, ULONGLONG ullContentOffset, ULONGLONG cbContentLength, [in] PEERDIST_RETRIEVAL_OPTIONS *pRetrievalOptions, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [out] PPEERDIST_CONTENTINFO_HANDLE phContentInfo );",
            "name": "PeerDistServerOpenContentInformationEx"
        },
        {
            "signature": "DWORD PeerDistServerPublishAddToStream( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_STREAM_HANDLE hStream, [in] DWORD cbNumberOfBytes, [in] PBYTE pBuffer, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistServerPublishAddToStream"
        },
        {
            "signature": "DWORD PeerDistServerPublishCompleteStream( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_STREAM_HANDLE hStream, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistServerPublishCompleteStream"
        },
        {
            "signature": "DWORD PeerDistServerPublishStream( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, DWORD cbContentIdentifier, [in] PBYTE pContentIdentifier, ULONGLONG cbContentLength, [in, optional] PCPEERDIST_PUBLICATION_OPTIONS pPublishOptions, [in, optional] HANDLE hCompletionPort, [in, optional] ULONG_PTR ulCompletionKey, [out] PPEERDIST_STREAM_HANDLE phStream );",
            "name": "PeerDistServerPublishStream"
        },
        {
            "signature": "DWORD PeerDistServerRetrieveContentInformation( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, [in] PEERDIST_CONTENTINFO_HANDLE hContentInfo, DWORD cbMaxNumberOfBytes, [in, out] PBYTE pBuffer, [in] LPOVERLAPPED lpOverlapped );",
            "name": "PeerDistServerRetrieveContentInformation"
        },
        {
            "signature": "DWORD PeerDistServerUnpublish( [in] PEERDIST_INSTANCE_HANDLE hPeerDist, DWORD cbContentIdentifier, [in] PBYTE pContentIdentifier );",
            "name": "PeerDistServerUnpublish"
        },
        {
            "signature": "DWORD PeerDistShutdown( [in] PEERDIST_INSTANCE_HANDLE hPeerDist );",
            "name": "PeerDistShutdown"
        },
        {
            "signature": "DWORD PeerDistStartup( [in] DWORD dwVersionRequested, [out] PPEERDIST_INSTANCE_HANDLE phPeerDist, [out, optional] PDWORD pdwSupportedVersion );",
            "name": "PeerDistStartup"
        },
        {
            "signature": "DWORD PeerDistUnregisterForStatusChangeNotification( [in] PEERDIST_INSTANCE_HANDLE hPeerDist );",
            "name": "PeerDistUnregisterForStatusChangeNotification"
        }
    ],
    "Peninputpanel.h": [],
    "Perflib.h": [
        {
            "signature": "PERF_MEM_ALLOC PerfMemAlloc; LPVOID PerfMemAlloc( [in] SIZE_T AllocSize, [in] LPVOID pContext ) {...}",
            "name": "PERF_MEM_ALLOC callback"
        },
        {
            "signature": "PERF_MEM_FREE PerfMemFree; void PerfMemFree( [in] LPVOID pBuffer, [in] LPVOID pContext ) {...}",
            "name": "PERF_MEM_FREE callback"
        },
        {
            "signature": "ULONG PerfAddCounters( [in] HANDLE hQuery, [in, out] PPERF_COUNTER_IDENTIFIER pCounters, DWORD cbCounters );",
            "name": "PerfAddCounters"
        },
        {
            "signature": "ULONG PerfCloseQueryHandle( [in] HANDLE hQuery );",
            "name": "PerfCloseQueryHandle"
        },
        {
            "signature": "PPERF_COUNTERSET_INSTANCE PerfCreateInstance( [in] HANDLE ProviderHandle, [in] LPCGUID CounterSetGuid, [in] PCWSTR Name, [in] ULONG Id );",
            "name": "PerfCreateInstance"
        },
        {
            "signature": "ULONG PerfDecrementULongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONG Value );",
            "name": "PerfDecrementULongCounterValue"
        },
        {
            "signature": "ULONG PerfDecrementULongLongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONGLONG Value );",
            "name": "PerfDecrementULongLongCounterValue"
        },
        {
            "signature": "ULONG PerfDeleteCounters( [in] HANDLE hQuery, [in, out] PPERF_COUNTER_IDENTIFIER pCounters, DWORD cbCounters );",
            "name": "PerfDeleteCounters"
        },
        {
            "signature": "ULONG PerfDeleteInstance( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE InstanceBlock );",
            "name": "PerfDeleteInstance"
        },
        {
            "signature": "ULONG PerfEnumerateCounterSet( [in, optional] LPCWSTR szMachine, [out, optional] LPGUID pCounterSetIds, DWORD cCounterSetIds, [out] LPDWORD pcCounterSetIdsActual );",
            "name": "PerfEnumerateCounterSet"
        },
        {
            "signature": "ULONG PerfEnumerateCounterSetInstances( [in, optional] LPCWSTR szMachine, [in] LPCGUID pCounterSetId, [out, optional] PPERF_INSTANCE_HEADER pInstances, DWORD cbInstances, [out] LPDWORD pcbInstancesActual );",
            "name": "PerfEnumerateCounterSetInstances"
        },
        {
            "signature": "ULONG PerfIncrementULongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONG Value );",
            "name": "PerfIncrementULongCounterValue"
        },
        {
            "signature": "ULONG PerfIncrementULongLongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONGLONG Value );",
            "name": "PerfIncrementULongLongCounterValue"
        },
        {
            "signature": "PERFLIBREQUEST Perflibrequest; ULONG Perflibrequest( [in] ULONG RequestCode, [in] PVOID Buffer, [in] ULONG BufferSize ) {...}",
            "name": "PERFLIBREQUEST callback"
        },
        {
            "signature": "ULONG PerfOpenQueryHandle( [in, optional] LPCWSTR szMachine, [out] HANDLE *phQuery );",
            "name": "PerfOpenQueryHandle"
        },
        {
            "signature": "ULONG PerfQueryCounterData( [in] HANDLE hQuery, [out, optional] PPERF_DATA_HEADER pCounterBlock, DWORD cbCounterBlock, [out] LPDWORD pcbCounterBlockActual );",
            "name": "PerfQueryCounterData"
        },
        {
            "signature": "ULONG PerfQueryCounterInfo( [in] HANDLE hQuery, [out, optional] PPERF_COUNTER_IDENTIFIER pCounters, DWORD cbCounters, [out] LPDWORD pcbCountersActual );",
            "name": "PerfQueryCounterInfo"
        },
        {
            "signature": "ULONG PerfQueryCounterSetRegistrationInfo( [in, optional] LPCWSTR szMachine, [in] LPCGUID pCounterSetId, PerfRegInfoType requestCode, DWORD requestLangId, [out, optional] LPBYTE pbRegInfo, DWORD cbRegInfo, [out] LPDWORD pcbRegInfoActual );",
            "name": "PerfQueryCounterSetRegistrationInfo"
        },
        {
            "signature": "PPERF_COUNTERSET_INSTANCE PerfQueryInstance( [in] HANDLE ProviderHandle, [in] LPCGUID CounterSetGuid, [in] PCWSTR Name, [in] ULONG Id );",
            "name": "PerfQueryInstance"
        },
        {
            "signature": "ULONG PerfSetCounterRefValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] PVOID Address );",
            "name": "PerfSetCounterRefValue"
        },
        {
            "signature": "ULONG PerfSetCounterSetInfo( [in] HANDLE ProviderHandle, [in] PPERF_COUNTERSET_INFO Template, [in] ULONG TemplateSize );",
            "name": "PerfSetCounterSetInfo"
        },
        {
            "signature": "ULONG PerfSetULongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONG Value );",
            "name": "PerfSetULongCounterValue"
        },
        {
            "signature": "ULONG PerfSetULongLongCounterValue( [in] HANDLE Provider, [in] PPERF_COUNTERSET_INSTANCE Instance, [in] ULONG CounterId, [in] ULONGLONG Value );",
            "name": "PerfSetULongLongCounterValue"
        },
        {
            "signature": "ULONG PerfStartProvider( [in] LPGUID ProviderGuid, [in, optional] PERFLIBREQUEST ControlCallback, [out] HANDLE *phProvider );",
            "name": "PerfStartProvider"
        },
        {
            "signature": "ULONG PerfStartProviderEx( [in] LPGUID ProviderGuid, [in, optional] PPERF_PROVIDER_CONTEXT ProviderContext, [out] PHANDLE Provider );",
            "name": "PerfStartProviderEx"
        },
        {
            "signature": "ULONG PerfStopProvider( [in] HANDLE ProviderHandle );",
            "name": "PerfStopProvider"
        }
    ],
    "Photoacquire.h": [],
    "Physicalmonitorenumerationapi.h": [
        {
            "signature": "_BOOL DestroyPhysicalMonitor( [in] HANDLE hMonitor );",
            "name": "DestroyPhysicalMonitor"
        },
        {
            "signature": "_BOOL DestroyPhysicalMonitors( [in] DWORD dwPhysicalMonitorArraySize, [in] LPPHYSICAL_MONITOR pPhysicalMonitorArray );",
            "name": "DestroyPhysicalMonitors"
        },
        {
            "signature": "_BOOL GetNumberOfPhysicalMonitorsFromHMONITOR( [in] HMONITOR hMonitor, [out] LPDWORD pdwNumberOfPhysicalMonitors );",
            "name": "GetNumberOfPhysicalMonitorsFromHMONITOR"
        },
        {
            "signature": "HRESULT GetNumberOfPhysicalMonitorsFromIDirect3DDevice9( [in] IDirect3DDevice9 *pDirect3DDevice9, [out] LPDWORD pdwNumberOfPhysicalMonitors );",
            "name": "GetNumberOfPhysicalMonitorsFromIDirect3DDevice9"
        },
        {
            "signature": "_BOOL GetPhysicalMonitorsFromHMONITOR( [in] HMONITOR hMonitor, [in] DWORD dwPhysicalMonitorArraySize, [out] LPPHYSICAL_MONITOR pPhysicalMonitorArray );",
            "name": "GetPhysicalMonitorsFromHMONITOR"
        },
        {
            "signature": "HRESULT GetPhysicalMonitorsFromIDirect3DDevice9( [in] IDirect3DDevice9 *pDirect3DDevice9, [in] DWORD dwPhysicalMonitorArraySize, [out] LPPHYSICAL_MONITOR pPhysicalMonitorArray );",
            "name": "GetPhysicalMonitorsFromIDirect3DDevice9"
        }
    ],
    "Pla.h": [],
    "Playtomanagerinterop.h": [],
    "Pnpxassoc.h": [],
    "Pnrpdef.h": [],
    "Pnrpns.h": [],
    "Portabledeviceapi.h": [],
    "Portabledeviceconnectapi.h": [],
    "Powerbase.h": [
        {
            "signature": "NTSTATUS CallNtPowerInformation( [in] POWER_INFORMATION_LEVEL InformationLevel, [in] PVOID InputBuffer, [in] ULONG InputBufferLength, [out] PVOID OutputBuffer, [in] ULONG OutputBufferLength );",
            "name": "CallNtPowerInformation"
        },
        {
            "signature": "BOOLEAN GetPwrCapabilities( [out] PSYSTEM_POWER_CAPABILITIES lpspc );",
            "name": "GetPwrCapabilities"
        },
        {
            "signature": "POWER_PLATFORM_ROLE PowerDeterminePlatformRoleEx( [in] ULONG Version );",
            "name": "PowerDeterminePlatformRoleEx"
        },
        {
            "signature": "DWORD PowerRegisterSuspendResumeNotification( [in] DWORD Flags, [in] HANDLE Recipient, [out] PHPOWERNOTIFY RegistrationHandle );",
            "name": "PowerRegisterSuspendResumeNotification"
        },
        {
            "signature": "DWORD PowerUnregisterSuspendResumeNotification( [in, out] HPOWERNOTIFY RegistrationHandle );",
            "name": "PowerUnregisterSuspendResumeNotification"
        }
    ],
    "Powersetting.h": [
        {
            "signature": "void EFFECTIVE_POWER_MODE_CALLBACK( EFFECTIVE_POWER_MODE Mode, VOID *Context );",
            "name": "EFFECTIVE_POWER_MODE_CALLBACK"
        },
        {
            "signature": "DWORD PowerGetActiveScheme( [in, optional] HKEY UserRootPowerKey, [out] GUID **ActivePolicyGuid );",
            "name": "PowerGetActiveScheme"
        },
        {
            "signature": "DWORD PowerReadACValue( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PULONG Type, [out, optional] LPBYTE Buffer, [in, out, optional] LPDWORD BufferSize );",
            "name": "PowerReadACValue"
        },
        {
            "signature": "DWORD PowerReadDCValue( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PULONG Type, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadDCValue"
        },
        {
            "signature": "HRESULT PowerRegisterForEffectivePowerModeNotifications( ULONG Version, EFFECTIVE_POWER_MODE_CALLBACK *Callback, VOID *Context, VOID **RegistrationHandle );",
            "name": "PowerRegisterForEffectivePowerModeNotifications"
        },
        {
            "signature": "DWORD PowerSetActiveScheme( [in, optional] HKEY UserRootPowerKey, [in] const GUID *SchemeGuid );",
            "name": "PowerSetActiveScheme"
        },
        {
            "signature": "DWORD PowerSettingRegisterNotification( [in] LPCGUID SettingGuid, [in] DWORD Flags, [in] HANDLE Recipient, [out] PHPOWERNOTIFY RegistrationHandle );",
            "name": "PowerSettingRegisterNotification"
        },
        {
            "signature": "DWORD PowerSettingUnregisterNotification( [in, out] HPOWERNOTIFY RegistrationHandle );",
            "name": "PowerSettingUnregisterNotification"
        },
        {
            "signature": "HRESULT PowerUnregisterFromEffectivePowerModeNotifications( VOID *RegistrationHandle );",
            "name": "PowerUnregisterFromEffectivePowerModeNotifications"
        },
        {
            "signature": "DWORD PowerWriteACValueIndex( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] DWORD AcValueIndex );",
            "name": "PowerWriteACValueIndex"
        },
        {
            "signature": "DWORD PowerWriteDCValueIndex( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] DWORD DcValueIndex );",
            "name": "PowerWriteDCValueIndex"
        }
    ],
    "Powrprof.h": [
        {
            "signature": "BOOLEAN CanUserWritePwrScheme();",
            "name": "CanUserWritePwrScheme"
        },
        {
            "signature": "BOOLEAN DeletePwrScheme( [in] UINT uiID );",
            "name": "DeletePwrScheme"
        },
        {
            "signature": "DEVICE_NOTIFY_CALLBACK_ROUTINE DeviceNotifyCallbackRoutine; ULONG DeviceNotifyCallbackRoutine( PVOID Context, ULONG Type, PVOID Setting ) {...}",
            "name": "DEVICE_NOTIFY_CALLBACK_ROUTINE callback"
        },
        {
            "signature": "BOOLEAN DevicePowerClose();",
            "name": "DevicePowerClose"
        },
        {
            "signature": "BOOLEAN DevicePowerEnumDevices( [in] ULONG QueryIndex, [in] ULONG QueryInterpretationFlags, [in] ULONG QueryFlags, [out, optional] PBYTE pReturnBuffer, [in, out] PULONG pBufferSize );",
            "name": "DevicePowerEnumDevices"
        },
        {
            "signature": "BOOLEAN DevicePowerOpen( [optional] ULONG DebugMask );",
            "name": "DevicePowerOpen"
        },
        {
            "signature": "DWORD DevicePowerSetDeviceState( [in] LPCWSTR DeviceDescription, [in] ULONG SetFlags, [in] PVOID SetData );",
            "name": "DevicePowerSetDeviceState"
        },
        {
            "signature": "BOOLEAN EnumPwrSchemes( [in] PWRSCHEMESENUMPROC lpfn, [in] LPARAM lParam );",
            "name": "EnumPwrSchemes"
        },
        {
            "signature": "BOOLEAN GetActivePwrScheme( [out] PUINT puiID );",
            "name": "GetActivePwrScheme"
        },
        {
            "signature": "BOOLEAN GetCurrentPowerPolicies( [out] PGLOBAL_POWER_POLICY pGlobalPowerPolicy, [out] PPOWER_POLICY pPowerPolicy );",
            "name": "GetCurrentPowerPolicies"
        },
        {
            "signature": "BOOLEAN GetPwrDiskSpindownRange( [out] PUINT puiMax, [out] PUINT puiMin );",
            "name": "GetPwrDiskSpindownRange"
        },
        {
            "signature": "BOOLEAN IsPwrHibernateAllowed();",
            "name": "IsPwrHibernateAllowed"
        },
        {
            "signature": "BOOLEAN IsPwrShutdownAllowed();",
            "name": "IsPwrShutdownAllowed"
        },
        {
            "signature": "BOOLEAN IsPwrSuspendAllowed();",
            "name": "IsPwrSuspendAllowed"
        },
        {
            "signature": "DWORD PowerCanRestoreIndividualDefaultPowerScheme( [in] const GUID *SchemeGuid );",
            "name": "PowerCanRestoreIndividualDefaultPowerScheme"
        },
        {
            "signature": "DWORD PowerCreatePossibleSetting( [in, optional] HKEY RootSystemPowerKey, [in] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid, [in] ULONG PossibleSettingIndex );",
            "name": "PowerCreatePossibleSetting"
        },
        {
            "signature": "DWORD PowerCreateSetting( [in, optional] HKEY RootSystemPowerKey, [in] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid );",
            "name": "PowerCreateSetting"
        },
        {
            "signature": "DWORD PowerDeleteScheme( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid );",
            "name": "PowerDeleteScheme"
        },
        {
            "signature": "POWER_PLATFORM_ROLE PowerDeterminePlatformRole();",
            "name": "PowerDeterminePlatformRole"
        },
        {
            "signature": "DWORD PowerDuplicateScheme( [in, optional] HKEY RootPowerKey, [in] const GUID *SourceSchemeGuid, [in] GUID **DestinationSchemeGuid );",
            "name": "PowerDuplicateScheme"
        },
        {
            "signature": "DWORD PowerEnumerate( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in] POWER_DATA_ACCESSOR AccessFlags, [in] ULONG Index, [out, optional] UCHAR *Buffer, [in, out] DWORD *BufferSize );",
            "name": "PowerEnumerate"
        },
        {
            "signature": "DWORD PowerImportPowerScheme( [in] HKEY RootPowerKey, [in] LPCWSTR ImportFileNamePath, [in, out] GUID **DestinationSchemeGuid );",
            "name": "PowerImportPowerScheme"
        },
        {
            "signature": "BOOLEAN PowerIsSettingRangeDefined( [in, optional] const GUID *SubKeyGuid, [in, optional] const GUID *SettingGuid );",
            "name": "PowerIsSettingRangeDefined"
        },
        {
            "signature": "DWORD PowerReadACDefaultIndex( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemePersonalityGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid, [out] LPDWORD AcDefaultIndex );",
            "name": "PowerReadACDefaultIndex"
        },
        {
            "signature": "DWORD PowerReadACValueIndex( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out] LPDWORD AcValueIndex );",
            "name": "PowerReadACValueIndex"
        },
        {
            "signature": "DWORD PowerReadDCDefaultIndex( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemePersonalityGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid, [out] LPDWORD DcDefaultIndex );",
            "name": "PowerReadDCDefaultIndex"
        },
        {
            "signature": "DWORD PowerReadDCValueIndex( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out] LPDWORD DcValueIndex );",
            "name": "PowerReadDCValueIndex"
        },
        {
            "signature": "DWORD PowerReadDescription( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadDescription"
        },
        {
            "signature": "DWORD PowerReadFriendlyName( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadFriendlyName"
        },
        {
            "signature": "DWORD PowerReadIconResourceSpecifier( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadIconResourceSpecifier"
        },
        {
            "signature": "DWORD PowerReadPossibleDescription( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] ULONG PossibleSettingIndex, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadPossibleDescription"
        },
        {
            "signature": "DWORD PowerReadPossibleFriendlyName( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] ULONG PossibleSettingIndex, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadPossibleFriendlyName"
        },
        {
            "signature": "DWORD PowerReadPossibleValue( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] PULONG Type, [in] ULONG PossibleSettingIndex, [out, optional] PUCHAR Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadPossibleValue"
        },
        {
            "signature": "DWORD PowerReadSettingAttributes( [in] const GUID *SubGroupGuid, [in] const GUID *PowerSettingGuid );",
            "name": "PowerReadSettingAttributes"
        },
        {
            "signature": "DWORD PowerReadValueIncrement( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out] LPDWORD ValueIncrement );",
            "name": "PowerReadValueIncrement"
        },
        {
            "signature": "DWORD PowerReadValueMax( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out] LPDWORD ValueMaximum );",
            "name": "PowerReadValueMax"
        },
        {
            "signature": "DWORD PowerReadValueMin( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out] LPDWORD ValueMinimum );",
            "name": "PowerReadValueMin"
        },
        {
            "signature": "DWORD PowerReadValueUnitsSpecifier( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [out, optional] UCHAR *Buffer, [in, out] LPDWORD BufferSize );",
            "name": "PowerReadValueUnitsSpecifier"
        },
        {
            "signature": "DWORD PowerRemovePowerSetting( [in] const GUID *PowerSettingSubKeyGuid, [in] const GUID *PowerSettingGuid );",
            "name": "PowerRemovePowerSetting"
        },
        {
            "signature": "DWORD PowerReplaceDefaultPowerSchemes();",
            "name": "PowerReplaceDefaultPowerSchemes"
        },
        {
            "signature": "DWORD PowerReportThermalEvent( [in] PTHERMAL_EVENT Event );",
            "name": "PowerReportThermalEvent"
        },
        {
            "signature": "DWORD PowerRestoreDefaultPowerSchemes();",
            "name": "PowerRestoreDefaultPowerSchemes"
        },
        {
            "signature": "DWORD PowerRestoreIndividualDefaultPowerScheme( [in] const GUID *SchemeGuid );",
            "name": "PowerRestoreIndividualDefaultPowerScheme"
        },
        {
            "signature": "DWORD PowerSettingAccessCheck( [in] POWER_DATA_ACCESSOR AccessFlags, [in, optional] const GUID *PowerGuid );",
            "name": "PowerSettingAccessCheck"
        },
        {
            "signature": "DWORD PowerSettingAccessCheckEx( [in] POWER_DATA_ACCESSOR AccessFlags, [in, optional] const GUID *PowerGuid, [in] REGSAM AccessType );",
            "name": "PowerSettingAccessCheckEx"
        },
        {
            "signature": "DWORD PowerWriteACDefaultIndex( [in, optional] HKEY RootSystemPowerKey, [in] const GUID *SchemePersonalityGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid, [in] DWORD DefaultAcIndex );",
            "name": "PowerWriteACDefaultIndex"
        },
        {
            "signature": "DWORD PowerWriteDCDefaultIndex( [in, optional] HKEY RootSystemPowerKey, [in] const GUID *SchemePersonalityGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in] const GUID *PowerSettingGuid, [in] DWORD DefaultDcIndex );",
            "name": "PowerWriteDCDefaultIndex"
        },
        {
            "signature": "DWORD PowerWriteDescription( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWriteDescription"
        },
        {
            "signature": "DWORD PowerWriteFriendlyName( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWriteFriendlyName"
        },
        {
            "signature": "DWORD PowerWriteIconResourceSpecifier( [in, optional] HKEY RootPowerKey, [in] const GUID *SchemeGuid, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWriteIconResourceSpecifier"
        },
        {
            "signature": "DWORD PowerWritePossibleDescription( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] ULONG PossibleSettingIndex, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWritePossibleDescription"
        },
        {
            "signature": "DWORD PowerWritePossibleFriendlyName( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] ULONG PossibleSettingIndex, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWritePossibleFriendlyName"
        },
        {
            "signature": "DWORD PowerWritePossibleValue( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] ULONG Type, [in] ULONG PossibleSettingIndex, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWritePossibleValue"
        },
        {
            "signature": "DWORD PowerWriteSettingAttributes( [in] const GUID *SubGroupGuid, [in] const GUID *PowerSettingGuid, [in] DWORD Attributes );",
            "name": "PowerWriteSettingAttributes"
        },
        {
            "signature": "DWORD PowerWriteValueIncrement( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] DWORD ValueIncrement );",
            "name": "PowerWriteValueIncrement"
        },
        {
            "signature": "DWORD PowerWriteValueMax( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] DWORD ValueMaximum );",
            "name": "PowerWriteValueMax"
        },
        {
            "signature": "DWORD PowerWriteValueMin( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] DWORD ValueMinimum );",
            "name": "PowerWriteValueMin"
        },
        {
            "signature": "DWORD PowerWriteValueUnitsSpecifier( [in, optional] HKEY RootPowerKey, [in, optional] const GUID *SubGroupOfPowerSettingsGuid, [in, optional] const GUID *PowerSettingGuid, [in] UCHAR *Buffer, [in] DWORD BufferSize );",
            "name": "PowerWriteValueUnitsSpecifier"
        },
        {
            "signature": "BOOLEAN ReadGlobalPwrPolicy( [out] PGLOBAL_POWER_POLICY pGlobalPowerPolicy );",
            "name": "ReadGlobalPwrPolicy"
        },
        {
            "signature": "BOOLEAN ReadProcessorPwrScheme( [in] UINT uiID, [out] PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy );",
            "name": "ReadProcessorPwrScheme"
        },
        {
            "signature": "BOOLEAN ReadPwrScheme( [in] UINT uiID, [out] PPOWER_POLICY pPowerPolicy );",
            "name": "ReadPwrScheme"
        },
        {
            "signature": "BOOLEAN SetActivePwrScheme( [in] UINT uiID, [in, optional] PGLOBAL_POWER_POLICY pGlobalPowerPolicy, [in, optional] PPOWER_POLICY pPowerPolicy );",
            "name": "SetActivePwrScheme"
        },
        {
            "signature": "BOOLEAN SetSuspendState( [in] BOOLEAN bHibernate, [in] BOOLEAN bForce, [in] BOOLEAN bWakeupEventsDisabled );",
            "name": "SetSuspendState"
        },
        {
            "signature": "BOOLEAN WriteGlobalPwrPolicy( [in] PGLOBAL_POWER_POLICY pGlobalPowerPolicy );",
            "name": "WriteGlobalPwrPolicy"
        },
        {
            "signature": "BOOLEAN WriteProcessorPwrScheme( [in] UINT uiID, [in] PMACHINE_PROCESSOR_POWER_POLICY pMachineProcessorPowerPolicy );",
            "name": "WriteProcessorPwrScheme"
        },
        {
            "signature": "BOOLEAN WritePwrScheme( [in] PUINT puiID, [in] LPCWSTR lpszSchemeName, [in, optional] LPCWSTR lpszDescription, [in] PPOWER_POLICY lpScheme );",
            "name": "WritePwrScheme"
        }
    ],
    "Presentation.h": [
        {
            "signature": "HRESULT CreatePresentationFactory( IUnknown *d3dDevice, REFIID riid, void **presentationFactory );",
            "name": "CreatePresentationFactory"
        },
        {
            "signature": "SystemInterruptTime IIndependentFlipFramePresentStatistics_GetDisplayedTime_Proxy( IIndependentFlipFramePresentStatistics *This );",
            "name": "IIndependentFlipFramePresentStatistics_GetDisplayedTime_Proxy"
        },
        {
            "signature": "void IIndependentFlipFramePresentStatistics_GetDisplayedTime_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase );",
            "name": "IIndependentFlipFramePresentStatistics_GetDisplayedTime_Stub"
        },
        {
            "signature": "LUID IIndependentFlipFramePresentStatistics_GetOutputAdapterLUID_Proxy( IIndependentFlipFramePresentStatistics *This );",
            "name": "IIndependentFlipFramePresentStatistics_GetOutputAdapterLUID_Proxy"
        },
        {
            "signature": "void IIndependentFlipFramePresentStatistics_GetOutputAdapterLUID_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase );",
            "name": "IIndependentFlipFramePresentStatistics_GetOutputAdapterLUID_Stub"
        },
        {
            "signature": "SystemInterruptTime IIndependentFlipFramePresentStatistics_GetPresentDuration_Proxy( IIndependentFlipFramePresentStatistics *This );",
            "name": "IIndependentFlipFramePresentStatistics_GetPresentDuration_Proxy"
        },
        {
            "signature": "void IIndependentFlipFramePresentStatistics_GetPresentDuration_Stub( IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase );",
            "name": "IIndependentFlipFramePresentStatistics_GetPresentDuration_Stub"
        }
    ],
    "Presentationtypes.h": [],
    "Print3dmanagerinterop.h": [],
    "Printmanagerinterop.h": [],
    "Prnasnot.h": [
        {
            "signature": "HRESULT CreatePrintAsyncNotifyChannel( [in] PCWSTR pszName, [in] PrintAsyncNotificationType *pNotificationType, [in] PrintAsyncNotifyUserFilter eUserFilter, [in] PrintAsyncNotifyConversationStyle eConversationStyle, [in] IPrintAsyncNotifyCallback *pCallback, [out] IPrintAsyncNotifyChannel **ppIAsynchNotification );",
            "name": "CreatePrintAsyncNotifyChannel"
        },
        {
            "signature": "HRESULT RegisterForPrintAsyncNotifications( [in] PCWSTR pszName, [in] PrintAsyncNotificationType *pNotificationType, [in] PrintAsyncNotifyUserFilter eUserFilter, [in] PrintAsyncNotifyConversationStyle eConversationStyle, [in] IPrintAsyncNotifyCallback *pCallback, [out] HANDLE *phNotify );",
            "name": "RegisterForPrintAsyncNotifications"
        },
        {
            "signature": "HRESULT UnRegisterForPrintAsyncNotifications( [in] HANDLE unnamedParam1 );",
            "name": "UnRegisterForPrintAsyncNotifications"
        }
    ],
    "Prntvpt.h": [
        {
            "signature": "HRESULT PTCloseProvider( [in] HPTPROVIDER hProvider );",
            "name": "PTCloseProvider"
        },
        {
            "signature": "HRESULT PTConvertDevModeToPrintTicket( [in] HPTPROVIDER hProvider, ULONG cbDevmode, [in] PDEVMODE pDevmode, [in] EPrintTicketScope scope, IStream *pPrintTicket );",
            "name": "PTConvertDevModeToPrintTicket"
        },
        {
            "signature": "HRESULT PTConvertPrintTicketToDevMode( [in] HPTPROVIDER hProvider, [in] IStream *pPrintTicket, EDefaultDevmodeType baseDevmodeType, [in] EPrintTicketScope scope, [out] ULONG *pcbDevmode, [out] PDEVMODE *ppDevmode, [out] BSTR *pbstrErrorMessage );",
            "name": "PTConvertPrintTicketToDevMode"
        },
        {
            "signature": "HRESULT PTGetPrintCapabilities( [in] HPTPROVIDER hProvider, [in] IStream *pPrintTicket, IStream *pCapabilities, [out] BSTR *pbstrErrorMessage );",
            "name": "PTGetPrintCapabilities"
        },
        {
            "signature": "HRESULT PTGetPrintDeviceCapabilities( [in] HPTPROVIDER hProvider, [in, optional] IStream *pPrintTicket, IStream *pDeviceCapabilities, [out, optional] BSTR *pbstrErrorMessage );",
            "name": "PTGetPrintDeviceCapabilities"
        },
        {
            "signature": "HRESULT PTGetPrintDeviceResources( [in] HPTPROVIDER hProvider, [in] LPCWSTR pszLocaleName, [in] IStream *pPrintTicket, IStream *pDeviceResources, [out, optional] BSTR *pbstrErrorMessage );",
            "name": "PTGetPrintDeviceResources"
        },
        {
            "signature": "HRESULT PTMergeAndValidatePrintTicket( [in] HPTPROVIDER hProvider, [in] IStream *pBaseTicket, [in] IStream *pDeltaTicket, [in] EPrintTicketScope scope, IStream *pResultTicket, [out] BSTR *pbstrErrorMessage );",
            "name": "PTMergeAndValidatePrintTicket"
        },
        {
            "signature": "HRESULT PTOpenProvider( [in] PCWSTR pszPrinterName, DWORD dwVersion, [out] HPTPROVIDER *phProvider );",
            "name": "PTOpenProvider"
        },
        {
            "signature": "HRESULT PTOpenProviderEx( [in] PCWSTR pszPrinterName, DWORD dwMaxVersion, DWORD dwPrefVersion, [out] HPTPROVIDER *phProvider, [out] DWORD *pUsedVersion );",
            "name": "PTOpenProviderEx"
        },
        {
            "signature": "HRESULT PTQuerySchemaVersionSupport( [in] PCWSTR pszPrinterName, [out] DWORD *pMaxVersion );",
            "name": "PTQuerySchemaVersionSupport"
        },
        {
            "signature": "HRESULT PTReleaseMemory( [in] PVOID pBuffer );",
            "name": "PTReleaseMemory"
        }
    ],
    "Processenv.h": [
        {
            "signature": "DWORD ExpandEnvironmentStringsA( [in] LPCSTR lpSrc, [out, optional] LPSTR lpDst, [in] DWORD nSize );",
            "name": "ExpandEnvironmentStringsA"
        },
        {
            "signature": "DWORD ExpandEnvironmentStringsW( [in] LPCWSTR lpSrc, [out, optional] LPWSTR lpDst, [in] DWORD nSize );",
            "name": "ExpandEnvironmentStringsW"
        },
        {
            "signature": "BOOL FreeEnvironmentStringsA( LPCH penv );",
            "name": "FreeEnvironmentStringsA"
        },
        {
            "signature": "BOOL FreeEnvironmentStringsW( LPWCH penv );",
            "name": "FreeEnvironmentStringsW"
        },
        {
            "signature": "LPSTR GetCommandLineA();",
            "name": "GetCommandLineA"
        },
        {
            "signature": "LPWSTR GetCommandLineW();",
            "name": "GetCommandLineW"
        },
        {
            "signature": "LPCH GetEnvironmentStrings();",
            "name": "GetEnvironmentStrings"
        },
        {
            "signature": "LPWCH GetEnvironmentStringsW();",
            "name": "GetEnvironmentStringsW"
        },
        {
            "signature": "DWORD GetEnvironmentVariableA( [in, optional] LPCSTR lpName, [out, optional] LPSTR lpBuffer, [in] DWORD nSize );",
            "name": "GetEnvironmentVariableA"
        },
        {
            "signature": "DWORD GetEnvironmentVariableW( [in, optional] LPCWSTR lpName, [out, optional] LPWSTR lpBuffer, [in] DWORD nSize );",
            "name": "GetEnvironmentVariableW"
        },
        {
            "signature": "BOOL NeedCurrentDirectoryForExePathA( [in] LPCSTR ExeName );",
            "name": "NeedCurrentDirectoryForExePathA"
        },
        {
            "signature": "BOOL NeedCurrentDirectoryForExePathW( [in] LPCWSTR ExeName );",
            "name": "NeedCurrentDirectoryForExePathW"
        },
        {
            "signature": "DWORD SearchPathA( [in, optional] LPCSTR lpPath, [in] LPCSTR lpFileName, [in, optional] LPCSTR lpExtension, [in] DWORD nBufferLength, [out] LPSTR lpBuffer, [out, optional] LPSTR *lpFilePart );",
            "name": "SearchPathA"
        },
        {
            "signature": "DWORD SearchPathW( [in, optional] LPCWSTR lpPath, [in] LPCWSTR lpFileName, [in, optional] LPCWSTR lpExtension, [in] DWORD nBufferLength, [out] LPWSTR lpBuffer, [out, optional] LPWSTR *lpFilePart );",
            "name": "SearchPathW"
        },
        {
            "signature": "BOOL SetEnvironmentStringsW( LPWCH NewEnvironment );",
            "name": "SetEnvironmentStringsW"
        },
        {
            "signature": "BOOL SetEnvironmentVariableA( [in] LPCSTR lpName, [in, optional] LPCSTR lpValue );",
            "name": "SetEnvironmentVariableA"
        },
        {
            "signature": "BOOL SetEnvironmentVariableW( [in] LPCWSTR lpName, [in, optional] LPCWSTR lpValue );",
            "name": "SetEnvironmentVariableW"
        },
        {
            "signature": "BOOL SetStdHandleEx( DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue );",
            "name": "SetStdHandleEx"
        }
    ],
    "Processsnapshot.h": [
        {
            "signature": "DWORD PssCaptureSnapshot( [in] HANDLE ProcessHandle, [in] PSS_CAPTURE_FLAGS CaptureFlags, [in, optional] DWORD ThreadContextFlags, [out] HPSS *SnapshotHandle );",
            "name": "PssCaptureSnapshot"
        },
        {
            "signature": "DWORD PssDuplicateSnapshot( [in] HANDLE SourceProcessHandle, [in] HPSS SnapshotHandle, [in] HANDLE TargetProcessHandle, [out] HPSS *TargetSnapshotHandle, [in, optional] PSS_DUPLICATE_FLAGS Flags );",
            "name": "PssDuplicateSnapshot"
        },
        {
            "signature": "DWORD PssFreeSnapshot( [in] HANDLE ProcessHandle, [in] HPSS SnapshotHandle );",
            "name": "PssFreeSnapshot"
        },
        {
            "signature": "DWORD PssQuerySnapshot( [in] HPSS SnapshotHandle, [in] PSS_QUERY_INFORMATION_CLASS InformationClass, [out] void *Buffer, [in] DWORD BufferLength );",
            "name": "PssQuerySnapshot"
        },
        {
            "signature": "DWORD PssWalkMarkerCreate( [in, optional] PSS_ALLOCATOR const *Allocator, [out] HPSSWALK *WalkMarkerHandle );",
            "name": "PssWalkMarkerCreate"
        },
        {
            "signature": "DWORD PssWalkMarkerFree( [in] HPSSWALK WalkMarkerHandle );",
            "name": "PssWalkMarkerFree"
        },
        {
            "signature": "DWORD PssWalkMarkerGetPosition( [in] HPSSWALK WalkMarkerHandle, [out] ULONG_PTR *Position );",
            "name": "PssWalkMarkerGetPosition"
        },
        {
            "signature": "DWORD PssWalkMarkerSeekToBeginning( [in] HPSSWALK WalkMarkerHandle );",
            "name": "PssWalkMarkerSeekToBeginning"
        },
        {
            "signature": "DWORD PssWalkMarkerSetPosition( [in] HPSSWALK WalkMarkerHandle, [in] ULONG_PTR Position );",
            "name": "PssWalkMarkerSetPosition"
        },
        {
            "signature": "DWORD PssWalkSnapshot( [in] HPSS SnapshotHandle, [in] PSS_WALK_INFORMATION_CLASS InformationClass, [in] HPSSWALK WalkMarkerHandle, [out] void *Buffer, [in] DWORD BufferLength );",
            "name": "PssWalkSnapshot"
        }
    ],
    "Processthreadsapi.h": [
        {
            "signature": "BOOL CreateProcessA( [in, optional] LPCSTR lpApplicationName, [in, out, optional] LPSTR lpCommandLine, [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCSTR lpCurrentDirectory, [in] LPSTARTUPINFOA lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessA"
        },
        {
            "signature": "BOOL CreateProcessAsUserA( [in, optional] HANDLE hToken, [in, optional] LPCSTR lpApplicationName, [in, out, optional] LPSTR lpCommandLine, [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCSTR lpCurrentDirectory, [in] LPSTARTUPINFOA lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessAsUserA"
        },
        {
            "signature": "BOOL CreateProcessAsUserW( [in, optional] HANDLE hToken, [in, optional] LPCWSTR lpApplicationName, [in, out, optional] LPWSTR lpCommandLine, [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCWSTR lpCurrentDirectory, [in] LPSTARTUPINFOW lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessAsUserW"
        },
        {
            "signature": "BOOL CreateProcessW( [in, optional] LPCWSTR lpApplicationName, [in, out, optional] LPWSTR lpCommandLine, [in, optional] LPSECURITY_ATTRIBUTES lpProcessAttributes, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] BOOL bInheritHandles, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCWSTR lpCurrentDirectory, [in] LPSTARTUPINFOW lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessW"
        },
        {
            "signature": "HANDLE CreateRemoteThread( [in] HANDLE hProcess, [in] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in] LPVOID lpParameter, [in] DWORD dwCreationFlags, [out] LPDWORD lpThreadId );",
            "name": "CreateRemoteThread"
        },
        {
            "signature": "HANDLE CreateRemoteThreadEx( [in] HANDLE hProcess, [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in, optional] LPVOID lpParameter, [in] DWORD dwCreationFlags, [in, optional] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, [out, optional] LPDWORD lpThreadId );",
            "name": "CreateRemoteThreadEx"
        },
        {
            "signature": "HANDLE CreateThread( [in, optional] LPSECURITY_ATTRIBUTES lpThreadAttributes, [in] SIZE_T dwStackSize, [in] LPTHREAD_START_ROUTINE lpStartAddress, [in, optional] __drv_aliasesMem LPVOID lpParameter, [in] DWORD dwCreationFlags, [out, optional] LPDWORD lpThreadId );",
            "name": "CreateThread"
        },
        {
            "signature": "void DeleteProcThreadAttributeList( [in, out] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList );",
            "name": "DeleteProcThreadAttributeList"
        },
        {
            "signature": "void ExitProcess( [in] UINT uExitCode );",
            "name": "ExitProcess"
        },
        {
            "signature": "void ExitThread( [in] DWORD dwExitCode );",
            "name": "ExitThread"
        },
        {
            "signature": "BOOL FlushInstructionCache( [in] HANDLE hProcess, [in] LPCVOID lpBaseAddress, [in] SIZE_T dwSize );",
            "name": "FlushInstructionCache"
        },
        {
            "signature": "void FlushProcessWriteBuffers();",
            "name": "FlushProcessWriteBuffers"
        },
        {
            "signature": "HANDLE GetCurrentProcess();",
            "name": "GetCurrentProcess"
        },
        {
            "signature": "DWORD GetCurrentProcessId();",
            "name": "GetCurrentProcessId"
        },
        {
            "signature": "DWORD GetCurrentProcessorNumber();",
            "name": "GetCurrentProcessorNumber"
        },
        {
            "signature": "void GetCurrentProcessorNumberEx( [out] PPROCESSOR_NUMBER ProcNumber );",
            "name": "GetCurrentProcessorNumberEx"
        },
        {
            "signature": "HANDLE GetCurrentProcessToken();",
            "name": "GetCurrentProcessToken"
        },
        {
            "signature": "HANDLE GetCurrentThread();",
            "name": "GetCurrentThread"
        },
        {
            "signature": "HANDLE GetCurrentThreadEffectiveToken();",
            "name": "GetCurrentThreadEffectiveToken"
        },
        {
            "signature": "DWORD GetCurrentThreadId();",
            "name": "GetCurrentThreadId"
        },
        {
            "signature": "void GetCurrentThreadStackLimits( [out] PULONG_PTR LowLimit, [out] PULONG_PTR HighLimit );",
            "name": "GetCurrentThreadStackLimits"
        },
        {
            "signature": "HANDLE GetCurrentThreadToken();",
            "name": "GetCurrentThreadToken"
        },
        {
            "signature": "BOOL GetExitCodeProcess( [in] HANDLE hProcess, [out] LPDWORD lpExitCode );",
            "name": "GetExitCodeProcess"
        },
        {
            "signature": "BOOL GetExitCodeThread( [in] HANDLE hThread, [out] LPDWORD lpExitCode );",
            "name": "GetExitCodeThread"
        },
        {
            "signature": "HRESULT GetMachineTypeAttributes( USHORT Machine, MACHINE_ATTRIBUTES *MachineTypeAttributes );",
            "name": "GetMachineTypeAttributes"
        },
        {
            "signature": "DWORD GetPriorityClass( [in] HANDLE hProcess );",
            "name": "GetPriorityClass"
        },
        {
            "signature": "BOOL GetProcessDefaultCpuSetMasks( HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount );",
            "name": "GetProcessDefaultCpuSetMasks"
        },
        {
            "signature": "BOOL GetProcessDefaultCpuSets( HANDLE Process, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount );",
            "name": "GetProcessDefaultCpuSets"
        },
        {
            "signature": "BOOL GetProcessHandleCount( [in] HANDLE hProcess, [in, out] PDWORD pdwHandleCount );",
            "name": "GetProcessHandleCount"
        },
        {
            "signature": "DWORD GetProcessId( [in] HANDLE Process );",
            "name": "GetProcessId"
        },
        {
            "signature": "DWORD GetProcessIdOfThread( [in] HANDLE Thread );",
            "name": "GetProcessIdOfThread"
        },
        {
            "signature": "BOOL GetProcessInformation( [in] HANDLE hProcess, [in] PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, [in] DWORD ProcessInformationSize );",
            "name": "GetProcessInformation"
        },
        {
            "signature": "BOOL GetProcessMitigationPolicy( [in] HANDLE hProcess, [in] PROCESS_MITIGATION_POLICY MitigationPolicy, [out] PVOID lpBuffer, [in] SIZE_T dwLength );",
            "name": "GetProcessMitigationPolicy"
        },
        {
            "signature": "BOOL GetProcessPriorityBoost( [in] HANDLE hProcess, [out] PBOOL pDisablePriorityBoost );",
            "name": "GetProcessPriorityBoost"
        },
        {
            "signature": "BOOL GetProcessShutdownParameters( [out] LPDWORD lpdwLevel, [out] LPDWORD lpdwFlags );",
            "name": "GetProcessShutdownParameters"
        },
        {
            "signature": "BOOL GetProcessTimes( [in] HANDLE hProcess, [out] LPFILETIME lpCreationTime, [out] LPFILETIME lpExitTime, [out] LPFILETIME lpKernelTime, [out] LPFILETIME lpUserTime );",
            "name": "GetProcessTimes"
        },
        {
            "signature": "DWORD GetProcessVersion( [in] DWORD ProcessId );",
            "name": "GetProcessVersion"
        },
        {
            "signature": "void GetStartupInfoW( [out] LPSTARTUPINFOW lpStartupInfo );",
            "name": "GetStartupInfoW"
        },
        {
            "signature": "BOOL GetSystemCpuSetInformation( PSYSTEM_CPU_SET_INFORMATION Information, ULONG BufferLength, PULONG ReturnedLength, HANDLE Process, ULONG Flags );",
            "name": "GetSystemCpuSetInformation"
        },
        {
            "signature": "BOOL GetSystemTimes( [out, optional] PFILETIME lpIdleTime, [out, optional] PFILETIME lpKernelTime, [out, optional] PFILETIME lpUserTime );",
            "name": "GetSystemTimes"
        },
        {
            "signature": "BOOL GetThreadContext( [in] HANDLE hThread, [in, out] LPCONTEXT lpContext );",
            "name": "GetThreadContext"
        },
        {
            "signature": "HRESULT GetThreadDescription( [in] HANDLE hThread, [out] PWSTR *ppszThreadDescription );",
            "name": "GetThreadDescription"
        },
        {
            "signature": "DWORD GetThreadId( [in] HANDLE Thread );",
            "name": "GetThreadId"
        },
        {
            "signature": "BOOL GetThreadIdealProcessorEx( [in] HANDLE hThread, [out] PPROCESSOR_NUMBER lpIdealProcessor );",
            "name": "GetThreadIdealProcessorEx"
        },
        {
            "signature": "BOOL GetThreadInformation( [in] HANDLE hThread, [in] THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, [in] DWORD ThreadInformationSize );",
            "name": "GetThreadInformation"
        },
        {
            "signature": "BOOL GetThreadIOPendingFlag( [in] HANDLE hThread, [in, out] PBOOL lpIOIsPending );",
            "name": "GetThreadIOPendingFlag"
        },
        {
            "signature": "int GetThreadPriority( [in] HANDLE hThread );",
            "name": "GetThreadPriority"
        },
        {
            "signature": "BOOL GetThreadPriorityBoost( [in] HANDLE hThread, [out] PBOOL pDisablePriorityBoost );",
            "name": "GetThreadPriorityBoost"
        },
        {
            "signature": "BOOL GetThreadSelectedCpuSetMasks( HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount, PUSHORT RequiredMaskCount );",
            "name": "GetThreadSelectedCpuSetMasks"
        },
        {
            "signature": "BOOL GetThreadSelectedCpuSets( HANDLE Thread, PULONG CpuSetIds, ULONG CpuSetIdCount, PULONG RequiredIdCount );",
            "name": "GetThreadSelectedCpuSets"
        },
        {
            "signature": "BOOL GetThreadTimes( [in] HANDLE hThread, [out] LPFILETIME lpCreationTime, [out] LPFILETIME lpExitTime, [out] LPFILETIME lpKernelTime, [out] LPFILETIME lpUserTime );",
            "name": "GetThreadTimes"
        },
        {
            "signature": "BOOL InitializeProcThreadAttributeList( [out, optional] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, [in] DWORD dwAttributeCount, DWORD dwFlags, [in, out] PSIZE_T lpSize );",
            "name": "InitializeProcThreadAttributeList"
        },
        {
            "signature": "BOOL IsProcessCritical( [in] HANDLE hProcess, [out] PBOOL Critical );",
            "name": "IsProcessCritical"
        },
        {
            "signature": "BOOL IsProcessorFeaturePresent( [in] DWORD ProcessorFeature );",
            "name": "IsProcessorFeaturePresent"
        },
        {
            "signature": "HANDLE OpenProcess( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] DWORD dwProcessId );",
            "name": "OpenProcess"
        },
        {
            "signature": "BOOL OpenProcessToken( [in] HANDLE ProcessHandle, [in] DWORD DesiredAccess, [out] PHANDLE TokenHandle );",
            "name": "OpenProcessToken"
        },
        {
            "signature": "HANDLE OpenThread( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] DWORD dwThreadId );",
            "name": "OpenThread"
        },
        {
            "signature": "BOOL OpenThreadToken( [in] HANDLE ThreadHandle, [in] DWORD DesiredAccess, [in] BOOL OpenAsSelf, [out] PHANDLE TokenHandle );",
            "name": "OpenThreadToken"
        },
        {
            "signature": "BOOL ProcessIdToSessionId( [in] DWORD dwProcessId, [out] DWORD *pSessionId );",
            "name": "ProcessIdToSessionId"
        },
        {
            "signature": "BOOL QueryProcessAffinityUpdateMode( [in] HANDLE hProcess, [out, optional] LPDWORD lpdwFlags );",
            "name": "QueryProcessAffinityUpdateMode"
        },
        {
            "signature": "BOOL QueryProtectedPolicy( [in] LPCGUID PolicyGuid, [out] PULONG_PTR PolicyValue );",
            "name": "QueryProtectedPolicy"
        },
        {
            "signature": "DWORD QueueUserAPC( [in] PAPCFUNC pfnAPC, [in] HANDLE hThread, [in] ULONG_PTR dwData );",
            "name": "QueueUserAPC"
        },
        {
            "signature": "BOOL QueueUserAPC2( PAPCFUNC ApcRoutine, HANDLE Thread, ULONG_PTR Data, QUEUE_USER_APC_FLAGS Flags );",
            "name": "QueueUserAPC2"
        },
        {
            "signature": "DWORD ResumeThread( [in] HANDLE hThread );",
            "name": "ResumeThread"
        },
        {
            "signature": "BOOL SetPriorityClass( [in] HANDLE hProcess, [in] DWORD dwPriorityClass );",
            "name": "SetPriorityClass"
        },
        {
            "signature": "BOOL SetProcessAffinityUpdateMode( [in] HANDLE hProcess, [in] DWORD dwFlags );",
            "name": "SetProcessAffinityUpdateMode"
        },
        {
            "signature": "BOOL SetProcessDefaultCpuSetMasks( HANDLE Process, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount );",
            "name": "SetProcessDefaultCpuSetMasks"
        },
        {
            "signature": "BOOL SetProcessDefaultCpuSets( HANDLE Process, const ULONG *CpuSetIds, ULONG CpuSetIdCount );",
            "name": "SetProcessDefaultCpuSets"
        },
        {
            "signature": "BOOL SetProcessDynamicEHContinuationTargets( HANDLE Process, USHORT NumberOfTargets, PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets );",
            "name": "SetProcessDynamicEHContinuationTargets"
        },
        {
            "signature": "BOOL SetProcessDynamicEnforcedCetCompatibleRanges( HANDLE Process, USHORT NumberOfRanges, PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges );",
            "name": "SetProcessDynamicEnforcedCetCompatibleRanges"
        },
        {
            "signature": "BOOL SetProcessInformation( [in] HANDLE hProcess, [in] PROCESS_INFORMATION_CLASS ProcessInformationClass, LPVOID ProcessInformation, [in] DWORD ProcessInformationSize );",
            "name": "SetProcessInformation"
        },
        {
            "signature": "BOOL SetProcessMitigationPolicy( [in] PROCESS_MITIGATION_POLICY MitigationPolicy, [in] PVOID lpBuffer, [in] SIZE_T dwLength );",
            "name": "SetProcessMitigationPolicy"
        },
        {
            "signature": "BOOL SetProcessPriorityBoost( [in] HANDLE hProcess, [in] BOOL bDisablePriorityBoost );",
            "name": "SetProcessPriorityBoost"
        },
        {
            "signature": "BOOL SetProcessShutdownParameters( [in] DWORD dwLevel, [in] DWORD dwFlags );",
            "name": "SetProcessShutdownParameters"
        },
        {
            "signature": "BOOL SetProtectedPolicy( [in] LPCGUID PolicyGuid, [in] ULONG_PTR PolicyValue, [out] PULONG_PTR OldPolicyValue );",
            "name": "SetProtectedPolicy"
        },
        {
            "signature": "BOOL SetThreadContext( [in] HANDLE hThread, [in] const CONTEXT *lpContext );",
            "name": "SetThreadContext"
        },
        {
            "signature": "HRESULT SetThreadDescription( [in] HANDLE hThread, [in] PCWSTR lpThreadDescription );",
            "name": "SetThreadDescription"
        },
        {
            "signature": "DWORD SetThreadIdealProcessor( [in] HANDLE hThread, [in] DWORD dwIdealProcessor );",
            "name": "SetThreadIdealProcessor"
        },
        {
            "signature": "BOOL SetThreadIdealProcessorEx( [in] HANDLE hThread, [in] PPROCESSOR_NUMBER lpIdealProcessor, [out, optional] PPROCESSOR_NUMBER lpPreviousIdealProcessor );",
            "name": "SetThreadIdealProcessorEx"
        },
        {
            "signature": "BOOL SetThreadInformation( [in] HANDLE hThread, [in] THREAD_INFORMATION_CLASS ThreadInformationClass, LPVOID ThreadInformation, [in] DWORD ThreadInformationSize );",
            "name": "SetThreadInformation"
        },
        {
            "signature": "BOOL SetThreadPriority( [in] HANDLE hThread, [in] int nPriority );",
            "name": "SetThreadPriority"
        },
        {
            "signature": "BOOL SetThreadPriorityBoost( [in] HANDLE hThread, [in] BOOL bDisablePriorityBoost );",
            "name": "SetThreadPriorityBoost"
        },
        {
            "signature": "BOOL SetThreadSelectedCpuSetMasks( HANDLE Thread, PGROUP_AFFINITY CpuSetMasks, USHORT CpuSetMaskCount );",
            "name": "SetThreadSelectedCpuSetMasks"
        },
        {
            "signature": "BOOL SetThreadSelectedCpuSets( HANDLE Thread, const ULONG *CpuSetIds, ULONG CpuSetIdCount );",
            "name": "SetThreadSelectedCpuSets"
        },
        {
            "signature": "BOOL SetThreadStackGuarantee( [in, out] PULONG StackSizeInBytes );",
            "name": "SetThreadStackGuarantee"
        },
        {
            "signature": "BOOL SetThreadToken( [in, optional] PHANDLE Thread, [in, optional] HANDLE Token );",
            "name": "SetThreadToken"
        },
        {
            "signature": "DWORD SuspendThread( [in] HANDLE hThread );",
            "name": "SuspendThread"
        },
        {
            "signature": "BOOL SwitchToThread();",
            "name": "SwitchToThread"
        },
        {
            "signature": "BOOL TerminateProcess( [in] HANDLE hProcess, [in] UINT uExitCode );",
            "name": "TerminateProcess"
        },
        {
            "signature": "BOOL TerminateThread( [in, out] HANDLE hThread, [in] DWORD dwExitCode );",
            "name": "TerminateThread"
        },
        {
            "signature": "DWORD TlsAlloc();",
            "name": "TlsAlloc"
        },
        {
            "signature": "BOOL TlsFree( [in] DWORD dwTlsIndex );",
            "name": "TlsFree"
        },
        {
            "signature": "LPVOID TlsGetValue( [in] DWORD dwTlsIndex );",
            "name": "TlsGetValue"
        },
        {
            "signature": "BOOL TlsSetValue( [in] DWORD dwTlsIndex, [in, optional] LPVOID lpTlsValue );",
            "name": "TlsSetValue"
        },
        {
            "signature": "BOOL UpdateProcThreadAttribute( [in, out] LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList, [in] DWORD dwFlags, [in] DWORD_PTR Attribute, [in] PVOID lpValue, [in] SIZE_T cbSize, [out, optional] PVOID lpPreviousValue, [in, optional] PSIZE_T lpReturnSize );",
            "name": "UpdateProcThreadAttribute"
        }
    ],
    "Processtopologyapi.h": [
        {
            "signature": "BOOL GetProcessGroupAffinity( [in] HANDLE hProcess, [in, out] PUSHORT GroupCount, [out] PUSHORT GroupArray );",
            "name": "GetProcessGroupAffinity"
        },
        {
            "signature": "BOOL GetThreadGroupAffinity( [in] HANDLE hThread, [out] PGROUP_AFFINITY GroupAffinity );",
            "name": "GetThreadGroupAffinity"
        },
        {
            "signature": "BOOL SetThreadGroupAffinity( [in] HANDLE hThread, [in] const GROUP_AFFINITY *GroupAffinity, [out, optional] PGROUP_AFFINITY PreviousGroupAffinity );",
            "name": "SetThreadGroupAffinity"
        }
    ],
    "Profileapi.h": [
        {
            "signature": "BOOL QueryPerformanceCounter( [out] LARGE_INTEGER *lpPerformanceCount );",
            "name": "QueryPerformanceCounter"
        },
        {
            "signature": "BOOL QueryPerformanceFrequency( [out] LARGE_INTEGER *lpFrequency );",
            "name": "QueryPerformanceFrequency"
        }
    ],
    "Profinfo.h": [],
    "Projectedfslib.h": [
        {
            "signature": "PRJ_CANCEL_COMMAND_CB PrjCancelCommandCb; void PrjCancelCommandCb( [in] const PRJ_CALLBACK_DATA *callbackData ) {...}",
            "name": "PRJ_CANCEL_COMMAND_CB callback"
        },
        {
            "signature": "PRJ_END_DIRECTORY_ENUMERATION_CB PrjEndDirectoryEnumerationCb; HRESULT PrjEndDirectoryEnumerationCb( [in] const PRJ_CALLBACK_DATA *callbackData, [in] const GUID *enumerationId ) {...}",
            "name": "PRJ_END_DIRECTORY_ENUMERATION_CB callback"
        },
        {
            "signature": "PRJ_GET_DIRECTORY_ENUMERATION_CB PrjGetDirectoryEnumerationCb; HRESULT PrjGetDirectoryEnumerationCb( [in] const PRJ_CALLBACK_DATA *callbackData, [in] const GUID *enumerationId, [in, optional] PCWSTR searchExpression, [in] PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle ) {...}",
            "name": "PRJ_GET_DIRECTORY_ENUMERATION_CB callback"
        },
        {
            "signature": "PRJ_GET_FILE_DATA_CB PrjGetFileDataCb; HRESULT PrjGetFileDataCb( [in] const PRJ_CALLBACK_DATA *callbackData, [in] UINT64 byteOffset, [in] UINT32 length ) {...}",
            "name": "PRJ_GET_FILE_DATA_CB callback"
        },
        {
            "signature": "PRJ_GET_PLACEHOLDER_INFO_CB PrjGetPlaceholderInfoCb; HRESULT PrjGetPlaceholderInfoCb( [in] const PRJ_CALLBACK_DATA *callbackData ) {...}",
            "name": "PRJ_GET_PLACEHOLDER_INFO_CB callback"
        },
        {
            "signature": "PRJ_NOTIFICATION_CB PrjNotificationCb; HRESULT PrjNotificationCb( [in] const PRJ_CALLBACK_DATA *callbackData, [in] BOOLEAN isDirectory, [in] PRJ_NOTIFICATION notification, [in, optional] PCWSTR destinationFileName, [in, out] PRJ_NOTIFICATION_PARAMETERS *operationParameters ) {...}",
            "name": "PRJ_NOTIFICATION_CB callback"
        },
        {
            "signature": "PRJ_QUERY_FILE_NAME_CB PrjQueryFileNameCb; HRESULT PrjQueryFileNameCb( [in] const PRJ_CALLBACK_DATA *callbackData ) {...}",
            "name": "PRJ_QUERY_FILE_NAME_CB callback"
        },
        {
            "signature": "PRJ_START_DIRECTORY_ENUMERATION_CB PrjStartDirectoryEnumerationCb; HRESULT PrjStartDirectoryEnumerationCb( [in] const PRJ_CALLBACK_DATA *callbackData, [in] const GUID *enumerationId ) {...}",
            "name": "PRJ_START_DIRECTORY_ENUMERATION_CB callback"
        },
        {
            "signature": "void * PrjAllocateAlignedBuffer( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] size_t size );",
            "name": "PrjAllocateAlignedBuffer"
        },
        {
            "signature": "HRESULT PrjClearNegativePathCache( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [out, optional] UINT32 *totalEntryNumber );",
            "name": "PrjClearNegativePathCache"
        },
        {
            "signature": "HRESULT PrjCompleteCommand( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] INT32 commandId, [in] HRESULT completionResult, [in, optional] PRJ_COMPLETE_COMMAND_EXTENDED_PARAMETERS *extendedParameters );",
            "name": "PrjCompleteCommand"
        },
        {
            "signature": "HRESULT PrjDeleteFile( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] PCWSTR destinationFileName, [in, optional] PRJ_UPDATE_TYPES updateFlags, [out, optional] PRJ_UPDATE_FAILURE_CAUSES *failureReason );",
            "name": "PrjDeleteFile"
        },
        {
            "signature": "BOOLEAN PrjDoesNameContainWildCards( [in] LPCWSTR fileName );",
            "name": "PrjDoesNameContainWildCards"
        },
        {
            "signature": "int PrjFileNameCompare( [in] PCWSTR fileName1, [in] PCWSTR fileName2 );",
            "name": "PrjFileNameCompare"
        },
        {
            "signature": "BOOLEAN PrjFileNameMatch( [in] PCWSTR fileNameToCheck, [in] PCWSTR pattern );",
            "name": "PrjFileNameMatch"
        },
        {
            "signature": "HRESULT PrjFillDirEntryBuffer( [in] PCWSTR fileName, [in, optional] PRJ_FILE_BASIC_INFO *fileBasicInfo, [in] PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle );",
            "name": "PrjFillDirEntryBuffer"
        },
        {
            "signature": "HRESULT PrjFillDirEntryBuffer2( [in] PRJ_DIR_ENTRY_BUFFER_HANDLE dirEntryBufferHandle, [in] PCWSTR fileName, [in, optional] PRJ_FILE_BASIC_INFO *fileBasicInfo, [in, optional] PRJ_EXTENDED_INFO *extendedInfo );",
            "name": "PrjFillDirEntryBuffer2"
        },
        {
            "signature": "void PrjFreeAlignedBuffer( [in] void *buffer );",
            "name": "PrjFreeAlignedBuffer"
        },
        {
            "signature": "HRESULT PrjGetOnDiskFileState( [in] PCWSTR destinationFileName, [out] PRJ_FILE_STATE *fileState );",
            "name": "PrjGetOnDiskFileState"
        },
        {
            "signature": "HRESULT PrjGetVirtualizationInstanceInfo( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [out] PRJ_VIRTUALIZATION_INSTANCE_INFO *virtualizationInstanceInfo );",
            "name": "PrjGetVirtualizationInstanceInfo"
        },
        {
            "signature": "HRESULT PrjMarkDirectoryAsPlaceholder( [in] PCWSTR rootPathName, [in, optional] PCWSTR targetPathName, [in, optional] const PRJ_PLACEHOLDER_VERSION_INFO *versionInfo, [in] const GUID *virtualizationInstanceID );",
            "name": "PrjMarkDirectoryAsPlaceholder"
        },
        {
            "signature": "HRESULT PrjStartVirtualizing( [in] PCWSTR virtualizationRootPath, [in] const PRJ_CALLBACKS *callbacks, [in, optional] const void *instanceContext, [in, optional] const PRJ_STARTVIRTUALIZING_OPTIONS *options, [out] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT *namespaceVirtualizationContext );",
            "name": "PrjStartVirtualizing"
        },
        {
            "signature": "void PrjStopVirtualizing( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext );",
            "name": "PrjStopVirtualizing"
        },
        {
            "signature": "HRESULT PrjUpdateFileIfNeeded( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] PCWSTR destinationFileName, [in] const PRJ_PLACEHOLDER_INFO *placeholderInfo, [in] UINT32 placeholderInfoSize, [in, optional] PRJ_UPDATE_TYPES updateFlags, [out, optional] PRJ_UPDATE_FAILURE_CAUSES *failureReason );",
            "name": "PrjUpdateFileIfNeeded"
        },
        {
            "signature": "HRESULT PrjWriteFileData( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] const GUID *dataStreamId, [in] void *buffer, [in] UINT64 byteOffset, [in] UINT32 length );",
            "name": "PrjWriteFileData"
        },
        {
            "signature": "HRESULT PrjWritePlaceholderInfo( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] PCWSTR destinationFileName, [in] const PRJ_PLACEHOLDER_INFO *placeholderInfo, [in] UINT32 placeholderInfoSize );",
            "name": "PrjWritePlaceholderInfo"
        },
        {
            "signature": "HRESULT PrjWritePlaceholderInfo2( [in] PRJ_NAMESPACE_VIRTUALIZATION_CONTEXT namespaceVirtualizationContext, [in] PCWSTR destinationFileName, [in] const PRJ_PLACEHOLDER_INFO *placeholderInfo, [in] UINT32 placeholderInfoSize, const PRJ_EXTENDED_INFO *ExtendedInfo );",
            "name": "PrjWritePlaceholderInfo2"
        }
    ],
    "Proofofpossessioncookieinfo.h": [],
    "Propapi.h": [
        {
            "signature": "ULONG StgPropertyLengthAsVariant( [in] const SERIALIZEDPROPERTYVALUE *pProp, [in] ULONG cbProp, [in] USHORT CodePage, [in] BYTE bReserved );",
            "name": "StgPropertyLengthAsVariant"
        }
    ],
    "Propidl.h": [
        {
            "signature": "HRESULT FreePropVariantArray( [in] ULONG cVariants, [in, out] PROPVARIANT *rgvars );",
            "name": "FreePropVariantArray"
        },
        {
            "signature": "HRESULT PropVariantClear( [in, out] PROPVARIANT *pvar );",
            "name": "PropVariantClear"
        },
        {
            "signature": "HRESULT PropVariantCopy( [out] PROPVARIANT *pvarDest, [in] const PROPVARIANT *pvarSrc );",
            "name": "PropVariantCopy"
        },
        {
            "signature": "BOOLEAN StgConvertPropertyToVariant( [in] const SERIALIZEDPROPERTYVALUE *pprop, [in] USHORT CodePage, [out] PROPVARIANT *pvar, [in] PMemoryAllocator *pma );",
            "name": "StgConvertPropertyToVariant"
        },
        {
            "signature": "SERIALIZEDPROPERTYVALUE * StgConvertVariantToProperty( [in] const PROPVARIANT *pvar, [in] USHORT CodePage, [out, optional] SERIALIZEDPROPERTYVALUE *pprop, [in, out] ULONG *pcb, [in] PROPID pid, [in] BOOLEAN fReserved, [in, out, optional] ULONG *pcIndirect );",
            "name": "StgConvertVariantToProperty"
        }
    ],
    "Propidlbase.h": [],
    "Propkeydef.h": [],
    "Propsys.h": [
        {
            "signature": "PSSTDAPI PropVariantToWinRTPropertyValue( [in] REFPROPVARIANT propvar, [in] REFIID riid, [out] void **ppv );",
            "name": "PropVariantToWinRTPropertyValue"
        },
        {
            "signature": "PSSTDAPI PSCoerceToCanonicalValue( [in] REFPROPERTYKEY key, [in, out] PROPVARIANT *ppropvar );",
            "name": "PSCoerceToCanonicalValue"
        },
        {
            "signature": "PSSTDAPI PSCreateAdapterFromPropertyStore( [in] IPropertyStore *pps, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreateAdapterFromPropertyStore"
        },
        {
            "signature": "PSSTDAPI PSCreateDelayedMultiplexPropertyStore( GETPROPERTYSTOREFLAGS flags, IDelayedPropertyStoreFactory *pdpsf, [in] const DWORD *rgStoreIds, [in] DWORD cStores, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreateDelayedMultiplexPropertyStore"
        },
        {
            "signature": "PSSTDAPI PSCreateMemoryPropertyStore( [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreateMemoryPropertyStore"
        },
        {
            "signature": "PSSTDAPI PSCreateMultiplexPropertyStore( [in] IUnknown **prgpunkStores, [in] DWORD cStores, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreateMultiplexPropertyStore"
        },
        {
            "signature": "PSSTDAPI PSCreatePropertyChangeArray( [in, optional] const PROPERTYKEY *rgpropkey, [in, optional] const PKA_FLAGS *rgflags, [in, optional] const PROPVARIANT *rgpropvar, [in] UINT cChanges, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreatePropertyChangeArray"
        },
        {
            "signature": "PSSTDAPI PSCreatePropertyStoreFromObject( [in] IUnknown *punk, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreatePropertyStoreFromObject"
        },
        {
            "signature": "PSSTDAPI PSCreatePropertyStoreFromPropertySetStorage( [in] IPropertySetStorage *ppss, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreatePropertyStoreFromPropertySetStorage"
        },
        {
            "signature": "PSSTDAPI PSCreateSimplePropertyChange( [in] PKA_FLAGS flags, [in] REFPROPERTYKEY key, [in] REFPROPVARIANT propvar, [in] REFIID riid, [out] void **ppv );",
            "name": "PSCreateSimplePropertyChange"
        },
        {
            "signature": "PSSTDAPI PSEnumeratePropertyDescriptions( [in] PROPDESC_ENUMFILTER filterOn, [in] REFIID riid, [out] void **ppv );",
            "name": "PSEnumeratePropertyDescriptions"
        },
        {
            "signature": "PSSTDAPI PSFormatForDisplay( [in] REFPROPERTYKEY propkey, [in] REFPROPVARIANT propvar, [in] PROPDESC_FORMAT_FLAGS pdfFlags, [out] LPWSTR pwszText, [in] DWORD cchText );",
            "name": "PSFormatForDisplay"
        },
        {
            "signature": "PSSTDAPI PSFormatForDisplayAlloc( [in] REFPROPERTYKEY key, [in] REFPROPVARIANT propvar, [in] PROPDESC_FORMAT_FLAGS pdff, [out] PWSTR *ppszDisplay );",
            "name": "PSFormatForDisplayAlloc"
        },
        {
            "signature": "PSSTDAPI PSFormatPropertyValue( [in] IPropertyStore *pps, [in] IPropertyDescription *ppd, [in] PROPDESC_FORMAT_FLAGS pdff, [out] LPWSTR *ppszDisplay );",
            "name": "PSFormatPropertyValue"
        },
        {
            "signature": "PSSTDAPI PSGetImageReferenceForValue( [in] REFPROPERTYKEY propkey, [in] REFPROPVARIANT propvar, [out] PWSTR *ppszImageRes );",
            "name": "PSGetImageReferenceForValue"
        },
        {
            "signature": "PSSTDAPI PSGetItemPropertyHandler( [in] IUnknown *punkItem, [in] BOOL fReadWrite, [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetItemPropertyHandler"
        },
        {
            "signature": "PSSTDAPI PSGetItemPropertyHandlerWithCreateObject( [in] IUnknown *punkItem, [in] BOOL fReadWrite, [in] IUnknown *punkCreateObject, [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetItemPropertyHandlerWithCreateObject"
        },
        {
            "signature": "PSSTDAPI PSGetNamedPropertyFromPropertyStorage( [in] PCUSERIALIZEDPROPSTORAGE psps, [in] DWORD cb, [in] LPCWSTR pszName, [out] PROPVARIANT *ppropvar );",
            "name": "PSGetNamedPropertyFromPropertyStorage"
        },
        {
            "signature": "PSSTDAPI PSGetNameFromPropertyKey( [in] REFPROPERTYKEY propkey, [out] PWSTR *ppszCanonicalName );",
            "name": "PSGetNameFromPropertyKey"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyDescription( [in] REFPROPERTYKEY propkey, [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetPropertyDescription"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyDescriptionByName( [in] LPCWSTR pszCanonicalName, [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetPropertyDescriptionByName"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyDescriptionListFromString( [in] LPCWSTR pszPropList, [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetPropertyDescriptionListFromString"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyFromPropertyStorage( [in] PCUSERIALIZEDPROPSTORAGE psps, [in] DWORD cb, [in] REFPROPERTYKEY rpkey, [out] PROPVARIANT *ppropvar );",
            "name": "PSGetPropertyFromPropertyStorage"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyKeyFromName( [in] PCWSTR pszName, [out] PROPERTYKEY *ppropkey );",
            "name": "PSGetPropertyKeyFromName"
        },
        {
            "signature": "PSSTDAPI PSGetPropertySystem( [in] REFIID riid, [out] void **ppv );",
            "name": "PSGetPropertySystem"
        },
        {
            "signature": "PSSTDAPI PSGetPropertyValue( [in] IPropertyStore *pps, [in] IPropertyDescription *ppd, [out] PROPVARIANT *ppropvar );",
            "name": "PSGetPropertyValue"
        },
        {
            "signature": "PSSTDAPI PSLookupPropertyHandlerCLSID( [in] PCWSTR pszFilePath, [out] CLSID *pclsid );",
            "name": "PSLookupPropertyHandlerCLSID"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_Delete( [in] IPropertyBag *propBag, [in] LPCWSTR propName );",
            "name": "PSPropertyBag_Delete"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadBOOL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] BOOL *value );",
            "name": "PSPropertyBag_ReadBOOL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadBSTR( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] BSTR *value );",
            "name": "PSPropertyBag_ReadBSTR"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadDWORD( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] DWORD *value );",
            "name": "PSPropertyBag_ReadDWORD"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadGUID( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] GUID *value );",
            "name": "PSPropertyBag_ReadGUID"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadInt( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] INT *value );",
            "name": "PSPropertyBag_ReadInt"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadLONG( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] LONG *value );",
            "name": "PSPropertyBag_ReadLONG"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadPOINTL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] POINTL *value );",
            "name": "PSPropertyBag_ReadPOINTL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadPOINTS( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] POINTS *value );",
            "name": "PSPropertyBag_ReadPOINTS"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadPropertyKey( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] PROPERTYKEY *value );",
            "name": "PSPropertyBag_ReadPropertyKey"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadRECTL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] RECTL *value );",
            "name": "PSPropertyBag_ReadRECTL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadSHORT( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] SHORT *value );",
            "name": "PSPropertyBag_ReadSHORT"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadStr( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] LPWSTR value, [out] int characterCount );",
            "name": "PSPropertyBag_ReadStr"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadStrAlloc( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] PWSTR *value );",
            "name": "PSPropertyBag_ReadStrAlloc"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadStream( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] IStream **value );",
            "name": "PSPropertyBag_ReadStream"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadType( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] VARIANT *var, [out] VARTYPE type );",
            "name": "PSPropertyBag_ReadType"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadULONGLONG( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [out] ULONGLONG *value );",
            "name": "PSPropertyBag_ReadULONGLONG"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_ReadUnknown( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] REFIID riid, [out] void **ppv );",
            "name": "PSPropertyBag_ReadUnknown"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteBOOL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] BOOL value );",
            "name": "PSPropertyBag_WriteBOOL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteBSTR( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] BSTR value );",
            "name": "PSPropertyBag_WriteBSTR"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteDWORD( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] DWORD value );",
            "name": "PSPropertyBag_WriteDWORD"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteGUID( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] const GUID *value );",
            "name": "PSPropertyBag_WriteGUID"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteInt( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] INT value );",
            "name": "PSPropertyBag_WriteInt"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteLONG( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] LONG value );",
            "name": "PSPropertyBag_WriteLONG"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WritePOINTL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] const POINTL *value );",
            "name": "PSPropertyBag_WritePOINTL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WritePOINTS( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] const POINTS *value );",
            "name": "PSPropertyBag_WritePOINTS"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WritePropertyKey( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] REFPROPERTYKEY value );",
            "name": "PSPropertyBag_WritePropertyKey"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteRECTL( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] const RECTL *value );",
            "name": "PSPropertyBag_WriteRECTL"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteSHORT( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] SHORT value );",
            "name": "PSPropertyBag_WriteSHORT"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteStr( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] LPCWSTR value );",
            "name": "PSPropertyBag_WriteStr"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteStream( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] IStream *value );",
            "name": "PSPropertyBag_WriteStream"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteULONGLONG( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] ULONGLONG value );",
            "name": "PSPropertyBag_WriteULONGLONG"
        },
        {
            "signature": "PSSTDAPI PSPropertyBag_WriteUnknown( [in] IPropertyBag *propBag, [in] LPCWSTR propName, [in] IUnknown *punk );",
            "name": "PSPropertyBag_WriteUnknown"
        },
        {
            "signature": "PSSTDAPI PSPropertyKeyFromString( [in] LPCWSTR pszString, [out] PROPERTYKEY *pkey );",
            "name": "PSPropertyKeyFromString"
        },
        {
            "signature": "PSSTDAPI PSRefreshPropertySchema();",
            "name": "PSRefreshPropertySchema"
        },
        {
            "signature": "PSSTDAPI PSRegisterPropertySchema( [in] PCWSTR pszPath );",
            "name": "PSRegisterPropertySchema"
        },
        {
            "signature": "PSSTDAPI PSSetPropertyValue( [in] IPropertyStore *pps, [in] IPropertyDescription *ppd, [in] REFPROPVARIANT propvar );",
            "name": "PSSetPropertyValue"
        },
        {
            "signature": "PSSTDAPI PSStringFromPropertyKey( [in] REFPROPERTYKEY pkey, [out] LPWSTR psz, [in] UINT cch );",
            "name": "PSStringFromPropertyKey"
        },
        {
            "signature": "PSSTDAPI PSUnregisterPropertySchema( [in] PCWSTR pszPath );",
            "name": "PSUnregisterPropertySchema"
        },
        {
            "signature": "PSSTDAPI WinRTPropertyValueToPropVariant( [in, optional] IUnknown *punkPropertyValue, [out] PROPVARIANT *ppropvar );",
            "name": "WinRTPropertyValueToPropVariant"
        }
    ],
    "Propvarutil.h": [
        {
            "signature": "PSSTDAPI_(void) ClearPropVariantArray( [in] PROPVARIANT *rgPropVar, [in] UINT cVars );",
            "name": "ClearPropVariantArray"
        },
        {
            "signature": "PSSTDAPI_(void) ClearVariantArray( [in] VARIANT *pvars, [in] UINT cvars );",
            "name": "ClearVariantArray"
        },
        {
            "signature": "HRESULT InitPropVariantFromBoolean( [in] BOOL fVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromBoolean"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromBooleanVector( [in, optional] const BOOL *prgf, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromBooleanVector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromBuffer( [in] const void *pv, [in] UINT cb, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromBuffer"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromCLSID( [in] REFCLSID clsid, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromCLSID"
        },
        {
            "signature": "HRESULT InitPropVariantFromDouble( [in] DOUBLE dblVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromDouble"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromDoubleVector( [in, optional] const DOUBLE *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromDoubleVector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromFileTime( [in] const FILETIME *pftIn, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromFileTime"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromFileTimeVector( [in, optional] const FILETIME *prgft, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromFileTimeVector"
        },
        {
            "signature": "HRESULT InitPropVariantFromGUIDAsBuffer( [in] REFGUID guid, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromGUIDAsBuffer"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromGUIDAsString( [in] REFGUID guid, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromGUIDAsString"
        },
        {
            "signature": "HRESULT InitPropVariantFromInt16( [in] SHORT nVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt16"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromInt16Vector( [in] const SHORT *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt16Vector"
        },
        {
            "signature": "HRESULT InitPropVariantFromInt32( [in] LONG lVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt32"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromInt32Vector( [in] const LONG *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt32Vector"
        },
        {
            "signature": "HRESULT InitPropVariantFromInt64( [in] LONGLONG llVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt64"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromInt64Vector( [in] const LONGLONG *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromInt64Vector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromPropVariantVectorElem( [in] REFPROPVARIANT propvarIn, [in] ULONG iElem, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromPropVariantVectorElem"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromResource( [in] HINSTANCE hinst, [in] UINT id, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromResource"
        },
        {
            "signature": "HRESULT InitPropVariantFromString( [in] PCWSTR psz, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromString"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromStringAsVector( [in] PCWSTR psz, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromStringAsVector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromStringVector( [in] PCWSTR *prgsz, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromStringVector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromStrRet( [in, out] STRRET *pstrret, [in] PCUITEMID_CHILD pidl, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromStrRet"
        },
        {
            "signature": "HRESULT InitPropVariantFromUInt16( [in] USHORT uiVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt16"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromUInt16Vector( [in] const USHORT *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt16Vector"
        },
        {
            "signature": "HRESULT InitPropVariantFromUInt32( [in] ULONG ulVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt32"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromUInt32Vector( [in] const ULONG *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt32Vector"
        },
        {
            "signature": "HRESULT InitPropVariantFromUInt64( [in] ULONGLONG ullVal, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt64"
        },
        {
            "signature": "PSSTDAPI InitPropVariantFromUInt64Vector( [in] const ULONGLONG *prgn, [in] ULONG cElems, [out] PROPVARIANT *ppropvar );",
            "name": "InitPropVariantFromUInt64Vector"
        },
        {
            "signature": "PSSTDAPI InitPropVariantVectorFromPropVariant( [in] REFPROPVARIANT propvarSingle, [out] PROPVARIANT *ppropvarVector );",
            "name": "InitPropVariantVectorFromPropVariant"
        },
        {
            "signature": "HRESULT InitVariantFromBoolean( [in] BOOL fVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromBoolean"
        },
        {
            "signature": "PSSTDAPI InitVariantFromBooleanArray( [in] const BOOL *prgf, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromBooleanArray"
        },
        {
            "signature": "PSSTDAPI InitVariantFromBuffer( [in] const void *pv, [in] UINT cb, [out] VARIANT *pvar );",
            "name": "InitVariantFromBuffer"
        },
        {
            "signature": "HRESULT InitVariantFromDispatch( [in] IDispatch *pdisp, [out] VARIANT *pvar );",
            "name": "InitVariantFromDispatch"
        },
        {
            "signature": "HRESULT InitVariantFromDosDateTime( [in] WORD wDate, [in] WORD wTime, [out] VARIANT *pvar );",
            "name": "InitVariantFromDosDateTime"
        },
        {
            "signature": "HRESULT InitVariantFromDouble( [in] DOUBLE dblVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromDouble"
        },
        {
            "signature": "PSSTDAPI InitVariantFromDoubleArray( [in] const DOUBLE *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromDoubleArray"
        },
        {
            "signature": "PSSTDAPI InitVariantFromFileTime( [in] const FILETIME *pft, [out] VARIANT *pvar );",
            "name": "InitVariantFromFileTime"
        },
        {
            "signature": "PSSTDAPI InitVariantFromFileTimeArray( [in] const FILETIME *prgft, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromFileTimeArray"
        },
        {
            "signature": "HRESULT InitVariantFromGUIDAsBuffer( [in] REFGUID guid, [out] VARIANT *pvar );",
            "name": "InitVariantFromGUIDAsBuffer"
        },
        {
            "signature": "PSSTDAPI InitVariantFromGUIDAsString( [in] REFGUID guid, [out] VARIANT *pvar );",
            "name": "InitVariantFromGUIDAsString"
        },
        {
            "signature": "HRESULT InitVariantFromInt16( [in] SHORT iVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt16"
        },
        {
            "signature": "PSSTDAPI InitVariantFromInt16Array( [in] const SHORT *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt16Array"
        },
        {
            "signature": "HRESULT InitVariantFromInt32( [in] LONG lVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt32"
        },
        {
            "signature": "PSSTDAPI InitVariantFromInt32Array( [in] const LONG *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt32Array"
        },
        {
            "signature": "HRESULT InitVariantFromInt64( [in] LONGLONG llVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt64"
        },
        {
            "signature": "PSSTDAPI InitVariantFromInt64Array( [in] const LONGLONG *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromInt64Array"
        },
        {
            "signature": "PSSTDAPI InitVariantFromResource( [in] HINSTANCE hinst, [in] UINT id, [out] VARIANT *pvar );",
            "name": "InitVariantFromResource"
        },
        {
            "signature": "HRESULT InitVariantFromString( [in] PCWSTR psz, [out] VARIANT *pvar );",
            "name": "InitVariantFromString"
        },
        {
            "signature": "PSSTDAPI InitVariantFromStringArray( [in] PCWSTR *prgsz, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromStringArray"
        },
        {
            "signature": "PSSTDAPI InitVariantFromStrRet( [in] STRRET *pstrret, [in] PCUITEMID_CHILD pidl, [out] VARIANT *pvar );",
            "name": "InitVariantFromStrRet"
        },
        {
            "signature": "HRESULT InitVariantFromUInt16( [in] USHORT uiVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt16"
        },
        {
            "signature": "PSSTDAPI InitVariantFromUInt16Array( [in] const USHORT *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt16Array"
        },
        {
            "signature": "HRESULT InitVariantFromUInt32( [in] ULONG ulVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt32"
        },
        {
            "signature": "PSSTDAPI InitVariantFromUInt32Array( [in] const ULONG *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt32Array"
        },
        {
            "signature": "HRESULT InitVariantFromUInt64( [in] ULONGLONG ullVal, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt64"
        },
        {
            "signature": "PSSTDAPI InitVariantFromUInt64Array( [in] const ULONGLONG *prgn, [in] ULONG cElems, [out] VARIANT *pvar );",
            "name": "InitVariantFromUInt64Array"
        },
        {
            "signature": "PSSTDAPI InitVariantFromVariantArrayElem( [in] REFVARIANT varIn, [in] ULONG iElem, [out] VARIANT *pvar );",
            "name": "InitVariantFromVariantArrayElem"
        },
        {
            "signature": "BOOL IsPropVariantString( [in] REFPROPVARIANT propvar );",
            "name": "IsPropVariantString"
        },
        {
            "signature": "BOOL IsPropVariantVector( [in] REFPROPVARIANT propvar );",
            "name": "IsPropVariantVector"
        },
        {
            "signature": "BOOL IsVariantArray( [in] REFVARIANT var );",
            "name": "IsVariantArray"
        },
        {
            "signature": "BOOL IsVariantString( [in] REFVARIANT var );",
            "name": "IsVariantString"
        },
        {
            "signature": "BOOL IsVarTypeFloat( [in] VARTYPE vt );",
            "name": "IsVarTypeFloat"
        },
        {
            "signature": "BOOL IsVarTypeInteger( [in] VARTYPE vt );",
            "name": "IsVarTypeInteger"
        },
        {
            "signature": "BOOL IsVarTypeNumber( [in] VARTYPE vt );",
            "name": "IsVarTypeNumber"
        },
        {
            "signature": "BOOL IsVarTypeSignedInteger( [in] VARTYPE vt );",
            "name": "IsVarTypeSignedInteger"
        },
        {
            "signature": "BOOL IsVarTypeUnsignedInteger( [in] VARTYPE vt );",
            "name": "IsVarTypeUnsignedInteger"
        },
        {
            "signature": "PSSTDAPI PropVariantChangeType( [out] PROPVARIANT *ppropvarDest, [in] REFPROPVARIANT propvarSrc, [in] PROPVAR_CHANGE_FLAGS flags, [in] VARTYPE vt );",
            "name": "PropVariantChangeType"
        },
        {
            "signature": "int PropVariantCompare( [in] REFPROPVARIANT propvar1, [in] REFPROPVARIANT propvar2 );",
            "name": "PropVariantCompare"
        },
        {
            "signature": "PSSTDAPI_(int) PropVariantCompareEx( [in] REFPROPVARIANT propvar1, [in] REFPROPVARIANT propvar2, [in] PROPVAR_COMPARE_UNIT unit, [in] PROPVAR_COMPARE_FLAGS flags );",
            "name": "PropVariantCompareEx"
        },
        {
            "signature": "PSSTDAPI PropVariantGetBooleanElem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] BOOL *pfVal );",
            "name": "PropVariantGetBooleanElem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetDoubleElem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] DOUBLE *pnVal );",
            "name": "PropVariantGetDoubleElem"
        },
        {
            "signature": "HRESULT PropVariantGetElem( [in] REFPROPVARIANT propvarIn, [in] ULONG iElem, [out] PROPVARIANT *ppropvar );",
            "name": "PropVariantGetElem"
        },
        {
            "signature": "PSSTDAPI_(ULONG) PropVariantGetElementCount( [in] REFPROPVARIANT propvar );",
            "name": "PropVariantGetElementCount"
        },
        {
            "signature": "PSSTDAPI PropVariantGetFileTimeElem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] FILETIME *pftVal );",
            "name": "PropVariantGetFileTimeElem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetInt16Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] SHORT *pnVal );",
            "name": "PropVariantGetInt16Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetInt32Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] LONG *pnVal );",
            "name": "PropVariantGetInt32Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetInt64Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] LONGLONG *pnVal );",
            "name": "PropVariantGetInt64Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetStringElem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] PWSTR *ppszVal );",
            "name": "PropVariantGetStringElem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetUInt16Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] USHORT *pnVal );",
            "name": "PropVariantGetUInt16Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetUInt32Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] ULONG *pnVal );",
            "name": "PropVariantGetUInt32Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantGetUInt64Elem( [in] REFPROPVARIANT propvar, [in] ULONG iElem, [out] ULONGLONG *pnVal );",
            "name": "PropVariantGetUInt64Elem"
        },
        {
            "signature": "PSSTDAPI PropVariantToBoolean( [in] REFPROPVARIANT propvarIn, [out] BOOL *pfRet );",
            "name": "PropVariantToBoolean"
        },
        {
            "signature": "PSSTDAPI PropVariantToBooleanVector( [in] REFPROPVARIANT propvar, [out] BOOL *prgf, [in] ULONG crgf, [out] ULONG *pcElem );",
            "name": "PropVariantToBooleanVector"
        },
        {
            "signature": "PSSTDAPI PropVariantToBooleanVectorAlloc( [in] REFPROPVARIANT propvar, [out] BOOL **pprgf, [out] ULONG *pcElem );",
            "name": "PropVariantToBooleanVectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(BOOL) PropVariantToBooleanWithDefault( [in] REFPROPVARIANT propvarIn, [in] BOOL fDefault );",
            "name": "PropVariantToBooleanWithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToBSTR( [in] REFPROPVARIANT propvar, [out] BSTR *pbstrOut );",
            "name": "PropVariantToBSTR"
        },
        {
            "signature": "PSSTDAPI PropVariantToBuffer( [in] REFPROPVARIANT propvar, [out] void *pv, [in] UINT cb );",
            "name": "PropVariantToBuffer"
        },
        {
            "signature": "HRESULT PropVariantToCLSID( [in] REFPROPVARIANT propvar, [out] CLSID *pclsid );",
            "name": "PropVariantToCLSID"
        },
        {
            "signature": "PSSTDAPI PropVariantToDouble( [in] REFPROPVARIANT propvarIn, [out] DOUBLE *pdblRet );",
            "name": "PropVariantToDouble"
        },
        {
            "signature": "PSSTDAPI PropVariantToDoubleVector( [in] REFPROPVARIANT propvar, [out] DOUBLE *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToDoubleVector"
        },
        {
            "signature": "PSSTDAPI PropVariantToDoubleVectorAlloc( [in] REFPROPVARIANT propvar, [out] DOUBLE **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToDoubleVectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(DOUBLE) PropVariantToDoubleWithDefault( [in] REFPROPVARIANT propvarIn, [in] DOUBLE dblDefault );",
            "name": "PropVariantToDoubleWithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToFileTime( [in] REFPROPVARIANT propvar, [in] PSTIME_FLAGS pstfOut, [out] FILETIME *pftOut );",
            "name": "PropVariantToFileTime"
        },
        {
            "signature": "PSSTDAPI PropVariantToFileTimeVector( [in] REFPROPVARIANT propvar, [out] FILETIME *prgft, [in] ULONG crgft, [out] ULONG *pcElem );",
            "name": "PropVariantToFileTimeVector"
        },
        {
            "signature": "PSSTDAPI PropVariantToFileTimeVectorAlloc( [in] REFPROPVARIANT propvar, [out] FILETIME **pprgft, [out] ULONG *pcElem );",
            "name": "PropVariantToFileTimeVectorAlloc"
        },
        {
            "signature": "PSSTDAPI PropVariantToGUID( [in] REFPROPVARIANT propvar, [out] GUID *pguid );",
            "name": "PropVariantToGUID"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt16( [in] REFPROPVARIANT propvarIn, [out] SHORT *piRet );",
            "name": "PropVariantToInt16"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt16Vector( [in] REFPROPVARIANT propvar, [out] SHORT *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt16Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt16VectorAlloc( [in] REFPROPVARIANT propvar, [out] SHORT **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt16VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(SHORT) PropVariantToInt16WithDefault( [in] REFPROPVARIANT propvarIn, [in] SHORT iDefault );",
            "name": "PropVariantToInt16WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt32( [in] REFPROPVARIANT propvarIn, [out] LONG *plRet );",
            "name": "PropVariantToInt32"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt32Vector( [in] REFPROPVARIANT propvar, [out] LONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt32Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt32VectorAlloc( [in] REFPROPVARIANT propvar, [out] LONG **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt32VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(LONG) PropVariantToInt32WithDefault( [in] REFPROPVARIANT propvarIn, [in] LONG lDefault );",
            "name": "PropVariantToInt32WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt64( [in] REFPROPVARIANT propvarIn, [out] LONGLONG *pllRet );",
            "name": "PropVariantToInt64"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt64Vector( [in] REFPROPVARIANT propvar, [out] LONGLONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt64Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToInt64VectorAlloc( [in] REFPROPVARIANT propvar, [out] LONGLONG **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToInt64VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(LONGLONG) PropVariantToInt64WithDefault( [in] REFPROPVARIANT propvarIn, [in] LONGLONG llDefault );",
            "name": "PropVariantToInt64WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToString( [in] REFPROPVARIANT propvar, [out] PWSTR psz, [in] UINT cch );",
            "name": "PropVariantToString"
        },
        {
            "signature": "PSSTDAPI PropVariantToStringAlloc( [in] REFPROPVARIANT propvar, [out] PWSTR *ppszOut );",
            "name": "PropVariantToStringAlloc"
        },
        {
            "signature": "PSSTDAPI PropVariantToStringVector( [in] REFPROPVARIANT propvar, [out] PWSTR *prgsz, [in] ULONG crgsz, [out] ULONG *pcElem );",
            "name": "PropVariantToStringVector"
        },
        {
            "signature": "PSSTDAPI PropVariantToStringVectorAlloc( [in] REFPROPVARIANT propvar, [out] PWSTR **pprgsz, [out] ULONG *pcElem );",
            "name": "PropVariantToStringVectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(PCWSTR) PropVariantToStringWithDefault( [in] REFPROPVARIANT propvarIn, [in] LPCWSTR pszDefault );",
            "name": "PropVariantToStringWithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToStrRet( [in] REFPROPVARIANT propvar, [out] STRRET *pstrret );",
            "name": "PropVariantToStrRet"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt16( [in] REFPROPVARIANT propvarIn, [out] USHORT *puiRet );",
            "name": "PropVariantToUInt16"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt16Vector( [in] REFPROPVARIANT propvar, [out] USHORT *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt16Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt16VectorAlloc( [in] REFPROPVARIANT propvar, [out] USHORT **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt16VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(USHORT) PropVariantToUInt16WithDefault( [in] REFPROPVARIANT propvarIn, [in] USHORT uiDefault );",
            "name": "PropVariantToUInt16WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt32( [in] REFPROPVARIANT propvarIn, [out] ULONG *pulRet );",
            "name": "PropVariantToUInt32"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt32Vector( [in] REFPROPVARIANT propvar, [out] ULONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt32Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt32VectorAlloc( [in] REFPROPVARIANT propvar, [out] ULONG **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt32VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(ULONG) PropVariantToUInt32WithDefault( [in] REFPROPVARIANT propvarIn, [in] ULONG ulDefault );",
            "name": "PropVariantToUInt32WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt64( [in] REFPROPVARIANT propvarIn, [out] ULONGLONG *pullRet );",
            "name": "PropVariantToUInt64"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt64Vector( [in] REFPROPVARIANT propvar, [out] ULONGLONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt64Vector"
        },
        {
            "signature": "PSSTDAPI PropVariantToUInt64VectorAlloc( [in] REFPROPVARIANT propvar, [out] ULONGLONG **pprgn, [out] ULONG *pcElem );",
            "name": "PropVariantToUInt64VectorAlloc"
        },
        {
            "signature": "PSSTDAPI_(ULONGLONG) PropVariantToUInt64WithDefault( [in] REFPROPVARIANT propvarIn, [in] ULONGLONG ullDefault );",
            "name": "PropVariantToUInt64WithDefault"
        },
        {
            "signature": "PSSTDAPI PropVariantToVariant( [in] const PROPVARIANT *pPropVar, [out] VARIANT *pVar );",
            "name": "PropVariantToVariant"
        },
        {
            "signature": "PSSTDAPI StgDeserializePropVariant( [in] const SERIALIZEDPROPERTYVALUE *pprop, [in] ULONG cbMax, [out] PROPVARIANT *ppropvar );",
            "name": "StgDeserializePropVariant"
        },
        {
            "signature": "PSSTDAPI StgSerializePropVariant( [in] const PROPVARIANT *ppropvar, [out] SERIALIZEDPROPERTYVALUE **ppProp, [out] ULONG *pcb );",
            "name": "StgSerializePropVariant"
        },
        {
            "signature": "PSSTDAPI_(int) VariantCompare( [in] REFVARIANT var1, [in] REFVARIANT var2 );",
            "name": "VariantCompare"
        },
        {
            "signature": "PSSTDAPI VariantGetBooleanElem( [in] REFVARIANT var, [in] ULONG iElem, [out] BOOL *pfVal );",
            "name": "VariantGetBooleanElem"
        },
        {
            "signature": "PSSTDAPI VariantGetDoubleElem( [in] REFVARIANT var, [in] ULONG iElem, [out] DOUBLE *pnVal );",
            "name": "VariantGetDoubleElem"
        },
        {
            "signature": "HRESULT VariantGetElem( [in] REFVARIANT varIn, [in] ULONG iElem, [out] VARIANT *pvar );",
            "name": "VariantGetElem"
        },
        {
            "signature": "PSSTDAPI_(ULONG) VariantGetElementCount( [in] REFVARIANT varIn );",
            "name": "VariantGetElementCount"
        },
        {
            "signature": "PSSTDAPI VariantGetInt16Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] SHORT *pnVal );",
            "name": "VariantGetInt16Elem"
        },
        {
            "signature": "PSSTDAPI VariantGetInt32Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] LONG *pnVal );",
            "name": "VariantGetInt32Elem"
        },
        {
            "signature": "PSSTDAPI VariantGetInt64Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] LONGLONG *pnVal );",
            "name": "VariantGetInt64Elem"
        },
        {
            "signature": "PSSTDAPI VariantGetStringElem( [in] REFVARIANT var, [in] ULONG iElem, [out] PWSTR *ppszVal );",
            "name": "VariantGetStringElem"
        },
        {
            "signature": "PSSTDAPI VariantGetUInt16Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] USHORT *pnVal );",
            "name": "VariantGetUInt16Elem"
        },
        {
            "signature": "PSSTDAPI VariantGetUInt32Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] ULONG *pnVal );",
            "name": "VariantGetUInt32Elem"
        },
        {
            "signature": "PSSTDAPI VariantGetUInt64Elem( [in] REFVARIANT var, [in] ULONG iElem, [out] ULONGLONG *pnVal );",
            "name": "VariantGetUInt64Elem"
        },
        {
            "signature": "PSSTDAPI VariantToBoolean( [in] REFVARIANT varIn, [out] BOOL *pfRet );",
            "name": "VariantToBoolean"
        },
        {
            "signature": "PSSTDAPI VariantToBooleanArray( [in] REFVARIANT var, [out] BOOL *prgf, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToBooleanArray"
        },
        {
            "signature": "PSSTDAPI VariantToBooleanArrayAlloc( [in] REFVARIANT var, [out] BOOL **pprgf, [out] ULONG *pcElem );",
            "name": "VariantToBooleanArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(BOOL) VariantToBooleanWithDefault( [in] REFVARIANT varIn, [in] BOOL fDefault );",
            "name": "VariantToBooleanWithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToBuffer( [in] REFVARIANT varIn, [out] void *pv, [in] UINT cb );",
            "name": "VariantToBuffer"
        },
        {
            "signature": "PSSTDAPI VariantToDosDateTime( [in] REFVARIANT varIn, [out] WORD *pwDate, [out] WORD *pwTime );",
            "name": "VariantToDosDateTime"
        },
        {
            "signature": "PSSTDAPI VariantToDouble( [in] REFVARIANT varIn, [out] DOUBLE *pdblRet );",
            "name": "VariantToDouble"
        },
        {
            "signature": "PSSTDAPI VariantToDoubleArray( [in] REFVARIANT var, [out] DOUBLE *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToDoubleArray"
        },
        {
            "signature": "PSSTDAPI VariantToDoubleArrayAlloc( [in] REFVARIANT var, [out] DOUBLE **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToDoubleArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(DOUBLE) VariantToDoubleWithDefault( [in] REFVARIANT varIn, [in] DOUBLE dblDefault );",
            "name": "VariantToDoubleWithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToFileTime( [in] REFVARIANT varIn, [in] PSTIME_FLAGS stfOut, [out] FILETIME *pftOut );",
            "name": "VariantToFileTime"
        },
        {
            "signature": "PSSTDAPI VariantToGUID( [in] REFVARIANT varIn, [out] GUID *pguid );",
            "name": "VariantToGUID"
        },
        {
            "signature": "PSSTDAPI VariantToInt16( [in] REFVARIANT varIn, [out] SHORT *piRet );",
            "name": "VariantToInt16"
        },
        {
            "signature": "PSSTDAPI VariantToInt16Array( [in] REFVARIANT var, [out] SHORT *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToInt16Array"
        },
        {
            "signature": "PSSTDAPI VariantToInt16ArrayAlloc( [in] REFVARIANT var, [out] SHORT **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToInt16ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(SHORT) VariantToInt16WithDefault( [in] REFVARIANT varIn, [in] SHORT iDefault );",
            "name": "VariantToInt16WithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToInt32( [in] REFVARIANT varIn, [out] LONG *plRet );",
            "name": "VariantToInt32"
        },
        {
            "signature": "PSSTDAPI VariantToInt32Array( [in] REFVARIANT var, [out] LONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToInt32Array"
        },
        {
            "signature": "PSSTDAPI VariantToInt32ArrayAlloc( [in] REFVARIANT var, [out] LONG **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToInt32ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(LONG) VariantToInt32WithDefault( [in] REFVARIANT varIn, [in] LONG lDefault );",
            "name": "VariantToInt32WithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToInt64( [in] REFVARIANT varIn, [out] LONGLONG *pllRet );",
            "name": "VariantToInt64"
        },
        {
            "signature": "PSSTDAPI VariantToInt64Array( [in] REFVARIANT var, [out] LONGLONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToInt64Array"
        },
        {
            "signature": "PSSTDAPI VariantToInt64ArrayAlloc( [in] REFVARIANT var, [out] LONGLONG **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToInt64ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(LONGLONG) VariantToInt64WithDefault( [in] REFVARIANT varIn, [in] LONGLONG llDefault );",
            "name": "VariantToInt64WithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToPropVariant( [in] const VARIANT *pVar, [out] PROPVARIANT *pPropVar );",
            "name": "VariantToPropVariant"
        },
        {
            "signature": "PSSTDAPI VariantToString( [in] REFVARIANT varIn, [out] PWSTR pszBuf, [in] UINT cchBuf );",
            "name": "VariantToString"
        },
        {
            "signature": "PSSTDAPI VariantToStringAlloc( [in] REFVARIANT varIn, [out] PWSTR *ppszBuf );",
            "name": "VariantToStringAlloc"
        },
        {
            "signature": "PSSTDAPI VariantToStringArray( [in] REFVARIANT var, [out] PWSTR *prgsz, [in] ULONG crgsz, [out] ULONG *pcElem );",
            "name": "VariantToStringArray"
        },
        {
            "signature": "PSSTDAPI VariantToStringArrayAlloc( [in] REFVARIANT var, [out] PWSTR **pprgsz, [out] ULONG *pcElem );",
            "name": "VariantToStringArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(PCWSTR) VariantToStringWithDefault( [in] REFVARIANT varIn, [in] LPCWSTR pszDefault );",
            "name": "VariantToStringWithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToStrRet( [in] REFVARIANT varIn, [out] STRRET *pstrret );",
            "name": "VariantToStrRet"
        },
        {
            "signature": "PSSTDAPI VariantToUInt16( [in] REFVARIANT varIn, [out] USHORT *puiRet );",
            "name": "VariantToUInt16"
        },
        {
            "signature": "PSSTDAPI VariantToUInt16Array( [in] REFVARIANT var, [out] USHORT *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt16Array"
        },
        {
            "signature": "PSSTDAPI VariantToUInt16ArrayAlloc( [in] REFVARIANT var, [out] USHORT **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt16ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(USHORT) VariantToUInt16WithDefault( [in] REFVARIANT varIn, [in] USHORT uiDefault );",
            "name": "VariantToUInt16WithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToUInt32( [in] REFVARIANT varIn, [out] ULONG *pulRet );",
            "name": "VariantToUInt32"
        },
        {
            "signature": "PSSTDAPI VariantToUInt32Array( [in] REFVARIANT var, [out] ULONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt32Array"
        },
        {
            "signature": "PSSTDAPI VariantToUInt32ArrayAlloc( [in] REFVARIANT var, [out] ULONG **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt32ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(ULONG) VariantToUInt32WithDefault( [in] REFVARIANT varIn, [in] ULONG ulDefault );",
            "name": "VariantToUInt32WithDefault"
        },
        {
            "signature": "PSSTDAPI VariantToUInt64( [in] REFVARIANT varIn, [out] ULONGLONG *pullRet );",
            "name": "VariantToUInt64"
        },
        {
            "signature": "PSSTDAPI VariantToUInt64Array( [in] REFVARIANT var, [out] ULONGLONG *prgn, [in] ULONG crgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt64Array"
        },
        {
            "signature": "PSSTDAPI VariantToUInt64ArrayAlloc( [in] REFVARIANT var, [out] ULONGLONG **pprgn, [out] ULONG *pcElem );",
            "name": "VariantToUInt64ArrayAlloc"
        },
        {
            "signature": "PSSTDAPI_(ULONGLONG) VariantToUInt64WithDefault( [in] REFVARIANT varIn, [in] ULONGLONG ullDefault );",
            "name": "VariantToUInt64WithDefault"
        }
    ],
    "Provider.h": [],
    "Prsht.h": [
        {
            "signature": "HPROPSHEETPAGE CreatePropertySheetPageA( LPCPROPSHEETPAGEA constPropSheetPagePointer );",
            "name": "CreatePropertySheetPageA"
        },
        {
            "signature": "HPROPSHEETPAGE CreatePropertySheetPageW( LPCPROPSHEETPAGEW constPropSheetPagePointer );",
            "name": "CreatePropertySheetPageW"
        },
        {
            "signature": "BOOL DestroyPropertySheetPage( HPROPSHEETPAGE unnamedParam1 );",
            "name": "DestroyPropertySheetPage"
        },
        {
            "signature": "LPFNADDPROPSHEETPAGE Lpfnaddpropsheetpage; BOOL Lpfnaddpropsheetpage( HPROPSHEETPAGE unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "LPFNADDPROPSHEETPAGE callback"
        },
        {
            "signature": "LPFNPSPCALLBACKA Lpfnpspcallbacka; UINT Lpfnpspcallbacka( HWND hwnd, [in] UINT uMsg, [in, out] _PROPSHEETPAGEA *ppsp ) {...}",
            "name": "LPFNPSPCALLBACKA callback"
        },
        {
            "signature": "LPFNPSPCALLBACKW Lpfnpspcallbackw; UINT Lpfnpspcallbackw( HWND hwnd, [in] UINT uMsg, [in, out] _PROPSHEETPAGEW *ppsp ) {...}",
            "name": "LPFNPSPCALLBACKW callback"
        },
        {
            "signature": "PFNPROPSHEETCALLBACK Pfnpropsheetcallback; int Pfnpropsheetcallback( HWND unnamedParam1, UINT unnamedParam2, LPARAM unnamedParam3 ) {...}",
            "name": "PFNPROPSHEETCALLBACK callback"
        },
        {
            "signature": "INT_PTR PropertySheetA( LPCPROPSHEETHEADERA unnamedParam1 );",
            "name": "PropertySheetA"
        },
        {
            "signature": "INT_PTR PropertySheetW( LPCPROPSHEETHEADERW unnamedParam1 );",
            "name": "PropertySheetW"
        }
    ],
    "Psapi.h": [
        {
            "signature": "BOOL EmptyWorkingSet( [in] HANDLE hProcess );",
            "name": "EmptyWorkingSet"
        },
        {
            "signature": "BOOL EnumDeviceDrivers( [out] LPVOID *lpImageBase, [in] DWORD cb, [out] LPDWORD lpcbNeeded );",
            "name": "EnumDeviceDrivers"
        },
        {
            "signature": "BOOL EnumPageFilesA( [out] PENUM_PAGE_FILE_CALLBACKA pCallBackRoutine, [in] LPVOID pContext );",
            "name": "EnumPageFilesA"
        },
        {
            "signature": "BOOL EnumPageFilesW( [out] PENUM_PAGE_FILE_CALLBACKW pCallBackRoutine, [in] LPVOID pContext );",
            "name": "EnumPageFilesW"
        },
        {
            "signature": "BOOL EnumProcesses( [out] DWORD *lpidProcess, [in] DWORD cb, [out] LPDWORD lpcbNeeded );",
            "name": "EnumProcesses"
        },
        {
            "signature": "BOOL EnumProcessModules( [in] HANDLE hProcess, [out] HMODULE *lphModule, [in] DWORD cb, [out] LPDWORD lpcbNeeded );",
            "name": "EnumProcessModules"
        },
        {
            "signature": "BOOL EnumProcessModulesEx( [in] HANDLE hProcess, [out] HMODULE *lphModule, [in] DWORD cb, [out] LPDWORD lpcbNeeded, [in] DWORD dwFilterFlag );",
            "name": "EnumProcessModulesEx"
        },
        {
            "signature": "DWORD GetDeviceDriverBaseNameA( [in] LPVOID ImageBase, LPSTR lpFilename, [in] DWORD nSize );",
            "name": "GetDeviceDriverBaseNameA"
        },
        {
            "signature": "DWORD GetDeviceDriverBaseNameW( [in] LPVOID ImageBase, [out] LPWSTR lpBaseName, [in] DWORD nSize );",
            "name": "GetDeviceDriverBaseNameW"
        },
        {
            "signature": "DWORD GetDeviceDriverFileNameA( [in] LPVOID ImageBase, [out] LPSTR lpFilename, [in] DWORD nSize );",
            "name": "GetDeviceDriverFileNameA"
        },
        {
            "signature": "DWORD GetDeviceDriverFileNameW( [in] LPVOID ImageBase, [out] LPWSTR lpFilename, [in] DWORD nSize );",
            "name": "GetDeviceDriverFileNameW"
        },
        {
            "signature": "DWORD GetMappedFileNameA( [in] HANDLE hProcess, [in] LPVOID lpv, [out] LPSTR lpFilename, [in] DWORD nSize );",
            "name": "GetMappedFileNameA"
        },
        {
            "signature": "DWORD GetMappedFileNameW( [in] HANDLE hProcess, [in] LPVOID lpv, [out] LPWSTR lpFilename, [in] DWORD nSize );",
            "name": "GetMappedFileNameW"
        },
        {
            "signature": "DWORD GetModuleBaseNameA( [in] HANDLE hProcess, [in, optional] HMODULE hModule, [out] LPSTR lpBaseName, [in] DWORD nSize );",
            "name": "GetModuleBaseNameA"
        },
        {
            "signature": "DWORD GetModuleBaseNameW( [in] HANDLE hProcess, [in, optional] HMODULE hModule, [out] LPWSTR lpBaseName, [in] DWORD nSize );",
            "name": "GetModuleBaseNameW"
        },
        {
            "signature": "DWORD GetModuleFileNameExA( [in] HANDLE hProcess, [in, optional] HMODULE hModule, [out] LPSTR lpFilename, [in] DWORD nSize );",
            "name": "GetModuleFileNameExA"
        },
        {
            "signature": "DWORD GetModuleFileNameExW( [in] HANDLE hProcess, [in, optional] HMODULE hModule, [out] LPWSTR lpFilename, [in] DWORD nSize );",
            "name": "GetModuleFileNameExW"
        },
        {
            "signature": "BOOL GetModuleInformation( [in] HANDLE hProcess, [in] HMODULE hModule, [out] LPMODULEINFO lpmodinfo, [in] DWORD cb );",
            "name": "GetModuleInformation"
        },
        {
            "signature": "BOOL GetPerformanceInfo( [out] PPERFORMANCE_INFORMATION pPerformanceInformation, [in] DWORD cb );",
            "name": "GetPerformanceInfo"
        },
        {
            "signature": "DWORD GetProcessImageFileNameA( [in] HANDLE hProcess, [out] LPSTR lpImageFileName, [in] DWORD nSize );",
            "name": "GetProcessImageFileNameA"
        },
        {
            "signature": "DWORD GetProcessImageFileNameW( [in] HANDLE hProcess, [out] LPWSTR lpImageFileName, [in] DWORD nSize );",
            "name": "GetProcessImageFileNameW"
        },
        {
            "signature": "BOOL GetProcessMemoryInfo( [in] HANDLE Process, [out] PPROCESS_MEMORY_COUNTERS ppsmemCounters, [in] DWORD cb );",
            "name": "GetProcessMemoryInfo"
        },
        {
            "signature": "BOOL GetWsChanges( [in] HANDLE hProcess, [out] PPSAPI_WS_WATCH_INFORMATION lpWatchInfo, [in] DWORD cb );",
            "name": "GetWsChanges"
        },
        {
            "signature": "BOOL GetWsChangesEx( [in] HANDLE hProcess, [out] PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx, [in, out] PDWORD cb );",
            "name": "GetWsChangesEx"
        },
        {
            "signature": "BOOL InitializeProcessForWsWatch( [in] HANDLE hProcess );",
            "name": "InitializeProcessForWsWatch"
        },
        {
            "signature": "PENUM_PAGE_FILE_CALLBACKA PenumPageFileCallbacka; BOOL PenumPageFileCallbacka( [in] LPVOID pContext, [in] PENUM_PAGE_FILE_INFORMATION pPageFileInfo, [in] LPCSTR lpFilename ) {...}",
            "name": "PENUM_PAGE_FILE_CALLBACKA callback"
        },
        {
            "signature": "PENUM_PAGE_FILE_CALLBACKW PenumPageFileCallbackw; BOOL PenumPageFileCallbackw( [in] LPVOID pContext, [in] PENUM_PAGE_FILE_INFORMATION pPageFileInfo, [in] LPCWSTR lpFilename ) {...}",
            "name": "PENUM_PAGE_FILE_CALLBACKW callback"
        },
        {
            "signature": "BOOL QueryWorkingSet( [in] HANDLE hProcess, [out] PVOID pv, [in] DWORD cb );",
            "name": "QueryWorkingSet"
        },
        {
            "signature": "BOOL QueryWorkingSetEx( [in] HANDLE hProcess, [in, out] PVOID pv, [in] DWORD cb );",
            "name": "QueryWorkingSetEx"
        }
    ],
    "Pwm.h": [],
    "Qmgr.h": [],
    "Qos.h": [],
    "Qos2.h": [
        {
            "signature": "ExternC BOOL QOSAddSocketToFlow( [in] HANDLE QOSHandle, [in] SOCKET Socket, [in, optional] PSOCKADDR DestAddr, [in] QOS_TRAFFIC_TYPE TrafficType, [in, optional] DWORD Flags, [in, out] PQOS_FLOWID FlowId );",
            "name": "QOSAddSocketToFlow"
        },
        {
            "signature": "ExternC BOOL QOSCancel( [in] HANDLE QOSHandle, [in] LPOVERLAPPED Overlapped );",
            "name": "QOSCancel"
        },
        {
            "signature": "ExternC BOOL QOSCloseHandle( [in] HANDLE QOSHandle );",
            "name": "QOSCloseHandle"
        },
        {
            "signature": "ExternC BOOL QOSCreateHandle( [in] PQOS_VERSION Version, [out] PHANDLE QOSHandle );",
            "name": "QOSCreateHandle"
        },
        {
            "signature": "ExternC BOOL QOSEnumerateFlows( [in] HANDLE QOSHandle, [in, out] PULONG Size, [out] PVOID Buffer );",
            "name": "QOSEnumerateFlows"
        },
        {
            "signature": "ExternC BOOL QOSNotifyFlow( [in] HANDLE QOSHandle, [in] QOS_FLOWID FlowId, [in] QOS_NOTIFY_FLOW Operation, [in, out, optional] PULONG Size, [in, out] PVOID Buffer, DWORD Flags, [out, optional] LPOVERLAPPED Overlapped );",
            "name": "QOSNotifyFlow"
        },
        {
            "signature": "ExternC BOOL QOSQueryFlow( [in] HANDLE QOSHandle, [in] QOS_FLOWID FlowId, [in] QOS_QUERY_FLOW Operation, [in, out] PULONG Size, [out] PVOID Buffer, [in, optional] DWORD Flags, [out, optional] LPOVERLAPPED Overlapped );",
            "name": "QOSQueryFlow"
        },
        {
            "signature": "ExternC BOOL QOSRemoveSocketFromFlow( [in] HANDLE QOSHandle, [in, optional] SOCKET Socket, [in] QOS_FLOWID FlowId, DWORD Flags );",
            "name": "QOSRemoveSocketFromFlow"
        },
        {
            "signature": "ExternC BOOL QOSSetFlow( [in] HANDLE QOSHandle, [in] QOS_FLOWID FlowId, [in] QOS_SET_FLOW Operation, [in] ULONG Size, [in] PVOID Buffer, DWORD Flags, [out, optional] LPOVERLAPPED Overlapped );",
            "name": "QOSSetFlow"
        },
        {
            "signature": "ExternC BOOL QOSStartTrackingClient( [in] HANDLE QOSHandle, [in] PSOCKADDR DestAddr, DWORD Flags );",
            "name": "QOSStartTrackingClient"
        },
        {
            "signature": "ExternC BOOL QOSStopTrackingClient( [in] HANDLE QOSHandle, [in] PSOCKADDR DestAddr, DWORD Flags );",
            "name": "QOSStopTrackingClient"
        }
    ],
    "Qosobjs.h": [],
    "Qospol.h": [],
    "Qossp.h": [],
    "Radialcontrollerinterop.h": [],
    "Ras.h": [
        {
            "signature": "ORASADFUNC Orasadfunc; BOOL Orasadfunc( HWND unnamedParam1, LPSTR unnamedParam2, DWORD unnamedParam3, LPDWORD unnamedParam4 ) {...}",
            "name": "ORASADFUNC callback"
        },
        {
            "signature": "PFNRASFREEBUFFER Pfnrasfreebuffer; DWORD Pfnrasfreebuffer( PBYTE pBufer ) {...}",
            "name": "PFNRASFREEBUFFER callback"
        },
        {
            "signature": "PFNRASGETBUFFER Pfnrasgetbuffer; DWORD Pfnrasgetbuffer( PBYTE *ppBuffer, PDWORD pdwSize ) {...}",
            "name": "PFNRASGETBUFFER callback"
        },
        {
            "signature": "PFNRASRECEIVEBUFFER Pfnrasreceivebuffer; DWORD Pfnrasreceivebuffer( HANDLE hPort, PBYTE pBuffer, PDWORD pdwSize, DWORD dwTimeOut, HANDLE hEvent ) {...}",
            "name": "PFNRASRECEIVEBUFFER callback"
        },
        {
            "signature": "PFNRASRETRIEVEBUFFER Pfnrasretrievebuffer; DWORD Pfnrasretrievebuffer( HANDLE hPort, PBYTE pBuffer, PDWORD pdwSize ) {...}",
            "name": "PFNRASRETRIEVEBUFFER callback"
        },
        {
            "signature": "PFNRASSENDBUFFER Pfnrassendbuffer; DWORD Pfnrassendbuffer( HANDLE hPort, PBYTE pBuffer, DWORD dwSize ) {...}",
            "name": "PFNRASSENDBUFFER callback"
        },
        {
            "signature": "PFNRASSETCOMMSETTINGS Pfnrassetcommsettings; DWORD Pfnrassetcommsettings( [in] HANDLE hPort, [in] tagRASCOMMSETTINGS *pRasCommSettings, [in] PVOID pvReserved ) {...}",
            "name": "PFNRASSETCOMMSETTINGS callback"
        },
        {
            "signature": "RASADFUNCA Rasadfunca; BOOL Rasadfunca( LPSTR unnamedParam1, LPSTR unnamedParam2, LPRASADPARAMS unnamedParam3, LPDWORD unnamedParam4 ) {...}",
            "name": "RASADFUNCA callback"
        },
        {
            "signature": "RASADFUNCW Rasadfuncw; BOOL Rasadfuncw( LPWSTR unnamedParam1, LPWSTR unnamedParam2, LPRASADPARAMS unnamedParam3, LPDWORD unnamedParam4 ) {...}",
            "name": "RASADFUNCW callback"
        },
        {
            "signature": "DWORD RasClearConnectionStatistics( [in] HRASCONN hRasConn );",
            "name": "RasClearConnectionStatistics"
        },
        {
            "signature": "DWORD RasClearLinkStatistics( [in] HRASCONN hRasConn, [in] DWORD dwSubEntry );",
            "name": "RasClearLinkStatistics"
        },
        {
            "signature": "DWORD RasConnectionNotificationA( [in] HRASCONN unnamedParam1, [in] HANDLE unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "RasConnectionNotificationA"
        },
        {
            "signature": "DWORD RasConnectionNotificationW( [in] HRASCONN unnamedParam1, [in] HANDLE unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "RasConnectionNotificationW"
        },
        {
            "signature": "DWORD RasCreatePhonebookEntryA( [in] HWND unnamedParam1, [in] LPCSTR unnamedParam2 );",
            "name": "RasCreatePhonebookEntryA"
        },
        {
            "signature": "DWORD RasCreatePhonebookEntryW( [in] HWND unnamedParam1, [in] LPCWSTR unnamedParam2 );",
            "name": "RasCreatePhonebookEntryW"
        },
        {
            "signature": "RasCustomDeleteEntryNotifyFn Rascustomdeleteentrynotifyfn; DWORD Rascustomdeleteentrynotifyfn( [in] LPCWSTR lpszPhonebook, [in] LPCWSTR lpszEntry, [in] DWORD dwFlags ) {...}",
            "name": "RasCustomDeleteEntryNotifyFn callback"
        },
        {
            "signature": "RasCustomDialFn Rascustomdialfn; DWORD Rascustomdialfn( HINSTANCE hInstDll, LPRASDIALEXTENSIONS lpRasDialExtensions, LPCWSTR lpszPhonebook, LPRASDIALPARAMS lpRasDialParams, DWORD dwNotifierType, LPVOID lpvNotifier, LPHRASCONN lphRasConn, DWORD dwFlags ) {...}",
            "name": "RasCustomDialFn callback"
        },
        {
            "signature": "RasCustomHangUpFn Rascustomhangupfn; DWORD Rascustomhangupfn( HRASCONN hRasConn ) {...}",
            "name": "RasCustomHangUpFn callback"
        },
        {
            "signature": "RasCustomScriptExecuteFn Rascustomscriptexecutefn; DWORD Rascustomscriptexecutefn( [in] HANDLE hPort, [in] LPCWSTR lpszPhonebook, [in] LPCWSTR lpszEntryName, [in] PFNRASGETBUFFER pfnRasGetBuffer, [in] PFNRASFREEBUFFER pfnRasFreeBuffer, [in] PFNRASSENDBUFFER pfnRasSendBuffer, [in] PFNRASRECEIVEBUFFER pfnRasReceiveBuffer, [in] PFNRASRETRIEVEBUFFER pfnRasRetrieveBuffer, [in] HWND hWnd, [in] RASDIALPARAMS *pRasDialParams, PVOID pvReserved ) {...}",
            "name": "RasCustomScriptExecuteFn callback"
        },
        {
            "signature": "DWORD RasDeleteEntryA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2 );",
            "name": "RasDeleteEntryA"
        },
        {
            "signature": "DWORD RasDeleteEntryW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2 );",
            "name": "RasDeleteEntryW"
        },
        {
            "signature": "DWORD RasDeleteSubEntryA( [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, DWORD dwSubentryId );",
            "name": "RasDeleteSubEntryA"
        },
        {
            "signature": "DWORD RasDeleteSubEntryW( [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [in] DWORD dwSubEntryId );",
            "name": "RasDeleteSubEntryW"
        },
        {
            "signature": "DWORD RasDialA( [in] LPRASDIALEXTENSIONS unnamedParam1, [in] LPCSTR unnamedParam2, [in] LPRASDIALPARAMSA unnamedParam3, [in] DWORD unnamedParam4, [in] LPVOID unnamedParam5, [out] LPHRASCONN unnamedParam6 );",
            "name": "RasDialA"
        },
        {
            "signature": "RASDIALFUNC Rasdialfunc; void Rasdialfunc( UINT unnamedParam1, tagRASCONNSTATE unnamedParam2, DWORD unnamedParam3 ) {...}",
            "name": "RASDIALFUNC callback"
        },
        {
            "signature": "RASDIALFUNC1 Rasdialfunc1; void Rasdialfunc1( HRASCONN unnamedParam1, UINT unnamedParam2, tagRASCONNSTATE unnamedParam3, DWORD unnamedParam4, DWORD unnamedParam5 ) {...}",
            "name": "RASDIALFUNC1 callback"
        },
        {
            "signature": "RASDIALFUNC2 Rasdialfunc2; DWORD Rasdialfunc2( ULONG_PTR unnamedParam1, DWORD unnamedParam2, HRASCONN unnamedParam3, UINT unnamedParam4, tagRASCONNSTATE unnamedParam5, DWORD unnamedParam6, DWORD unnamedParam7 ) {...}",
            "name": "RASDIALFUNC2 callback"
        },
        {
            "signature": "DWORD RasDialW( [in] LPRASDIALEXTENSIONS unnamedParam1, [in] LPCWSTR unnamedParam2, [in] LPRASDIALPARAMSW unnamedParam3, [in] DWORD unnamedParam4, [in] LPVOID unnamedParam5, [out] LPHRASCONN unnamedParam6 );",
            "name": "RasDialW"
        },
        {
            "signature": "DWORD RasEditPhonebookEntryA( [in] HWND unnamedParam1, [in] LPCSTR unnamedParam2, [in] LPCSTR unnamedParam3 );",
            "name": "RasEditPhonebookEntryA"
        },
        {
            "signature": "DWORD RasEditPhonebookEntryW( [in] HWND unnamedParam1, [in] LPCWSTR unnamedParam2, [in] LPCWSTR unnamedParam3 );",
            "name": "RasEditPhonebookEntryW"
        },
        {
            "signature": "DWORD RasEnumAutodialAddressesA( [in, out] LPSTR *lppRasAutodialAddresses, [in, out] LPDWORD lpdwcbRasAutodialAddresses, [out] LPDWORD lpdwcRasAutodialAddresses );",
            "name": "RasEnumAutodialAddressesA"
        },
        {
            "signature": "DWORD RasEnumAutodialAddressesW( [in, out] LPWSTR *lppRasAutodialAddresses, [in, out] LPDWORD lpdwcbRasAutodialAddresses, [out] LPDWORD lpdwcRasAutodialAddresses );",
            "name": "RasEnumAutodialAddressesW"
        },
        {
            "signature": "DWORD RasEnumConnectionsA( [in, out] LPRASCONNA unnamedParam1, [in, out] LPDWORD unnamedParam2, [out] LPDWORD unnamedParam3 );",
            "name": "RasEnumConnectionsA"
        },
        {
            "signature": "DWORD RasEnumConnectionsW( [in, out] LPRASCONNW unnamedParam1, [in, out] LPDWORD unnamedParam2, [out] LPDWORD unnamedParam3 );",
            "name": "RasEnumConnectionsW"
        },
        {
            "signature": "DWORD RasEnumDevicesA( [in] LPRASDEVINFOA unnamedParam1, [in, out] LPDWORD unnamedParam2, [out] LPDWORD unnamedParam3 );",
            "name": "RasEnumDevicesA"
        },
        {
            "signature": "DWORD RasEnumDevicesW( [in] LPRASDEVINFOW unnamedParam1, [in, out] LPDWORD unnamedParam2, [out] LPDWORD unnamedParam3 );",
            "name": "RasEnumDevicesW"
        },
        {
            "signature": "DWORD RasEnumEntriesA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in, out] LPRASENTRYNAMEA unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPDWORD unnamedParam5 );",
            "name": "RasEnumEntriesA"
        },
        {
            "signature": "DWORD RasEnumEntriesW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in, out] LPRASENTRYNAMEW unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPDWORD unnamedParam5 );",
            "name": "RasEnumEntriesW"
        },
        {
            "signature": "void RasFreeEapUserIdentityA( [in] LPRASEAPUSERIDENTITYA pRasEapUserIdentity );",
            "name": "RasFreeEapUserIdentityA"
        },
        {
            "signature": "void RasFreeEapUserIdentityW( [in] LPRASEAPUSERIDENTITYW pRasEapUserIdentity );",
            "name": "RasFreeEapUserIdentityW"
        },
        {
            "signature": "DWORD RasGetAutodialAddressA( [in] LPCSTR unnamedParam1, [in] LPDWORD unnamedParam2, [in, out] LPRASAUTODIALENTRYA unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPDWORD unnamedParam5 );",
            "name": "RasGetAutodialAddressA"
        },
        {
            "signature": "DWORD RasGetAutodialAddressW( [in] LPCWSTR unnamedParam1, [in] LPDWORD unnamedParam2, [in, out] LPRASAUTODIALENTRYW unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPDWORD unnamedParam5 );",
            "name": "RasGetAutodialAddressW"
        },
        {
            "signature": "DWORD RasGetAutodialEnableA( [in] DWORD unnamedParam1, [out] LPBOOL unnamedParam2 );",
            "name": "RasGetAutodialEnableA"
        },
        {
            "signature": "DWORD RasGetAutodialEnableW( [in] DWORD unnamedParam1, [out] LPBOOL unnamedParam2 );",
            "name": "RasGetAutodialEnableW"
        },
        {
            "signature": "DWORD RasGetAutodialParamA( [in] DWORD unnamedParam1, [out] LPVOID unnamedParam2, [in, out] LPDWORD unnamedParam3 );",
            "name": "RasGetAutodialParamA"
        },
        {
            "signature": "DWORD RasGetAutodialParamW( [in] DWORD unnamedParam1, [out] LPVOID unnamedParam2, [in, out] LPDWORD unnamedParam3 );",
            "name": "RasGetAutodialParamW"
        },
        {
            "signature": "DWORD RasGetConnectionStatistics( [in] HRASCONN hRasConn, [in, out] RAS_STATS *lpStatistics );",
            "name": "RasGetConnectionStatistics"
        },
        {
            "signature": "DWORD RasGetConnectStatusA( [in] HRASCONN unnamedParam1, [in, out] LPRASCONNSTATUSA unnamedParam2 );",
            "name": "RasGetConnectStatusA"
        },
        {
            "signature": "DWORD RasGetConnectStatusW( [in] HRASCONN unnamedParam1, [in, out] LPRASCONNSTATUSW unnamedParam2 );",
            "name": "RasGetConnectStatusW"
        },
        {
            "signature": "DWORD RasGetCountryInfoA( [in, out] LPRASCTRYINFOA unnamedParam1, [in, out] LPDWORD unnamedParam2 );",
            "name": "RasGetCountryInfoA"
        },
        {
            "signature": "DWORD RasGetCountryInfoW( [in, out] LPRASCTRYINFOW unnamedParam1, [in, out] LPDWORD unnamedParam2 );",
            "name": "RasGetCountryInfoW"
        },
        {
            "signature": "DWORD RasGetCredentialsA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in, out] LPRASCREDENTIALSA unnamedParam3 );",
            "name": "RasGetCredentialsA"
        },
        {
            "signature": "DWORD RasGetCredentialsW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in, out] LPRASCREDENTIALSW unnamedParam3 );",
            "name": "RasGetCredentialsW"
        },
        {
            "signature": "DWORD RasGetCustomAuthDataA( [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, [out] BYTE *pbCustomAuthData, [in, out] DWORD *pdwSizeofCustomAuthData );",
            "name": "RasGetCustomAuthDataA"
        },
        {
            "signature": "DWORD RasGetCustomAuthDataW( [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [out] BYTE *pbCustomAuthData, [in, out] DWORD *pdwSizeofCustomAuthData );",
            "name": "RasGetCustomAuthDataW"
        },
        {
            "signature": "DWORD RasGetEapUserDataA( [in] HANDLE hToken, [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, [out] BYTE *pbEapData, [in, out] DWORD *pdwSizeofEapData );",
            "name": "RasGetEapUserDataA"
        },
        {
            "signature": "DWORD RasGetEapUserDataW( [in] HANDLE hToken, [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [out] BYTE *pbEapData, [in, out] DWORD *pdwSizeofEapData );",
            "name": "RasGetEapUserDataW"
        },
        {
            "signature": "DWORD RasGetEapUserIdentityA( [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, [in] DWORD dwFlags, [in] HWND hwnd, [out] LPRASEAPUSERIDENTITYA *ppRasEapUserIdentity );",
            "name": "RasGetEapUserIdentityA"
        },
        {
            "signature": "DWORD RasGetEapUserIdentityW( [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [in] DWORD dwFlags, [in] HWND hwnd, [out] LPRASEAPUSERIDENTITYW *ppRasEapUserIdentity );",
            "name": "RasGetEapUserIdentityW"
        },
        {
            "signature": "DWORD RasGetEntryDialParamsA( [in] LPCSTR unnamedParam1, [in, out] LPRASDIALPARAMSA unnamedParam2, [out] LPBOOL unnamedParam3 );",
            "name": "RasGetEntryDialParamsA"
        },
        {
            "signature": "DWORD RasGetEntryDialParamsW( [in] LPCWSTR unnamedParam1, [in, out] LPRASDIALPARAMSW unnamedParam2, [out] LPBOOL unnamedParam3 );",
            "name": "RasGetEntryDialParamsW"
        },
        {
            "signature": "DWORD RasGetEntryPropertiesA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in, out] LPRASENTRYA unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPBYTE unnamedParam5, [in, out] LPDWORD unnamedParam6 );",
            "name": "RasGetEntryPropertiesA"
        },
        {
            "signature": "DWORD RasGetEntryPropertiesW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in, out] LPRASENTRYW unnamedParam3, [in, out] LPDWORD unnamedParam4, [out] LPBYTE unnamedParam5, [in, out] LPDWORD unnamedParam6 );",
            "name": "RasGetEntryPropertiesW"
        },
        {
            "signature": "DWORD RasGetErrorStringA( [in] UINT ResourceId, [out] LPSTR lpszString, [in] DWORD InBufSize );",
            "name": "RasGetErrorStringA"
        },
        {
            "signature": "DWORD RasGetErrorStringW( [in] UINT ResourceId, [out] LPWSTR lpszString, [in] DWORD InBufSize );",
            "name": "RasGetErrorStringW"
        },
        {
            "signature": "DWORD RasGetLinkStatistics( [in] HRASCONN hRasConn, [in] DWORD dwSubEntry, [in, out] RAS_STATS *lpStatistics );",
            "name": "RasGetLinkStatistics"
        },
        {
            "signature": "DWORD RasGetNapStatus( [in] HRASCONN hRasconn, [in, out] LPRASNAPSTATE pRasNapState );",
            "name": "RasGetNapStatus"
        },
        {
            "signature": "DWORD RasGetProjectionInfoEx( [in] HRASCONN hrasconn, [in, out] PRAS_PROJECTION_INFO pRasProjection, [in, out] LPDWORD lpdwSize );",
            "name": "RasGetProjectionInfoEx"
        },
        {
            "signature": "DWORD RasGetSubEntryHandleA( [in] HRASCONN unnamedParam1, [in] DWORD unnamedParam2, [out] LPHRASCONN unnamedParam3 );",
            "name": "RasGetSubEntryHandleA"
        },
        {
            "signature": "DWORD RasGetSubEntryHandleW( [in] HRASCONN unnamedParam1, [in] DWORD unnamedParam2, [out] LPHRASCONN unnamedParam3 );",
            "name": "RasGetSubEntryHandleW"
        },
        {
            "signature": "DWORD RasGetSubEntryPropertiesA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] DWORD unnamedParam3, [in, out] LPRASSUBENTRYA unnamedParam4, [in, out] LPDWORD unnamedParam5, [in] LPBYTE unnamedParam6, [in] LPDWORD unnamedParam7 );",
            "name": "RasGetSubEntryPropertiesA"
        },
        {
            "signature": "DWORD RasGetSubEntryPropertiesW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] DWORD unnamedParam3, [in, out] LPRASSUBENTRYW unnamedParam4, [in, out] LPDWORD unnamedParam5, [in] LPBYTE unnamedParam6, [in] LPDWORD unnamedParam7 );",
            "name": "RasGetSubEntryPropertiesW"
        },
        {
            "signature": "DWORD RasHangUpA( [in] HRASCONN unnamedParam1 );",
            "name": "RasHangUpA"
        },
        {
            "signature": "DWORD RasHangUpW( [in] HRASCONN unnamedParam1 );",
            "name": "RasHangUpW"
        },
        {
            "signature": "DWORD RasInvokeEapUI( [in] HRASCONN unnamedParam1, [in] DWORD unnamedParam2, [in] LPRASDIALEXTENSIONS unnamedParam3, [in] HWND unnamedParam4 );",
            "name": "RasInvokeEapUI"
        },
        {
            "signature": "DWORD RasRenameEntryA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] LPCSTR unnamedParam3 );",
            "name": "RasRenameEntryA"
        },
        {
            "signature": "DWORD RasRenameEntryW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] LPCWSTR unnamedParam3 );",
            "name": "RasRenameEntryW"
        },
        {
            "signature": "DWORD RasSetAutodialAddressA( [in] LPCSTR unnamedParam1, [in] DWORD unnamedParam2, [in] LPRASAUTODIALENTRYA unnamedParam3, [in] DWORD unnamedParam4, [in] DWORD unnamedParam5 );",
            "name": "RasSetAutodialAddressA"
        },
        {
            "signature": "DWORD RasSetAutodialAddressW( [in] LPCWSTR unnamedParam1, [in] DWORD unnamedParam2, [in] LPRASAUTODIALENTRYW unnamedParam3, [in] DWORD unnamedParam4, [in] DWORD unnamedParam5 );",
            "name": "RasSetAutodialAddressW"
        },
        {
            "signature": "DWORD RasSetAutodialEnableA( [in] DWORD unnamedParam1, [in] BOOL unnamedParam2 );",
            "name": "RasSetAutodialEnableA"
        },
        {
            "signature": "DWORD RasSetAutodialEnableW( [in] DWORD unnamedParam1, [in] BOOL unnamedParam2 );",
            "name": "RasSetAutodialEnableW"
        },
        {
            "signature": "DWORD RasSetAutodialParamA( [in] DWORD unnamedParam1, [out] LPVOID unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "RasSetAutodialParamA"
        },
        {
            "signature": "DWORD RasSetAutodialParamW( [in] DWORD unnamedParam1, [out] LPVOID unnamedParam2, [in] DWORD unnamedParam3 );",
            "name": "RasSetAutodialParamW"
        },
        {
            "signature": "DWORD RasSetCredentialsA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] LPRASCREDENTIALSA unnamedParam3, [in] BOOL unnamedParam4 );",
            "name": "RasSetCredentialsA"
        },
        {
            "signature": "DWORD RasSetCredentialsW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] LPRASCREDENTIALSW unnamedParam3, [in] BOOL unnamedParam4 );",
            "name": "RasSetCredentialsW"
        },
        {
            "signature": "DWORD RasSetCustomAuthDataA( [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, [in] BYTE *pbCustomAuthData, [in] DWORD dwSizeofCustomAuthData );",
            "name": "RasSetCustomAuthDataA"
        },
        {
            "signature": "DWORD RasSetCustomAuthDataW( [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [in] BYTE *pbCustomAuthData, [in] DWORD dwSizeofCustomAuthData );",
            "name": "RasSetCustomAuthDataW"
        },
        {
            "signature": "DWORD RasSetEapUserDataA( [in] HANDLE hToken, [in] LPCSTR pszPhonebook, [in] LPCSTR pszEntry, [in] BYTE *pbEapData, [in] DWORD dwSizeofEapData );",
            "name": "RasSetEapUserDataA"
        },
        {
            "signature": "DWORD RasSetEapUserDataW( [in] HANDLE hToken, [in] LPCWSTR pszPhonebook, [in] LPCWSTR pszEntry, [in] BYTE *pbEapData, [in] DWORD dwSizeofEapData );",
            "name": "RasSetEapUserDataW"
        },
        {
            "signature": "DWORD RasSetEntryDialParamsA( [in] LPCSTR unnamedParam1, [in] LPRASDIALPARAMSA unnamedParam2, [in] BOOL unnamedParam3 );",
            "name": "RasSetEntryDialParamsA"
        },
        {
            "signature": "DWORD RasSetEntryDialParamsW( [in] LPCWSTR unnamedParam1, [in] LPRASDIALPARAMSW unnamedParam2, [in] BOOL unnamedParam3 );",
            "name": "RasSetEntryDialParamsW"
        },
        {
            "signature": "DWORD RasSetEntryPropertiesA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] LPRASENTRYA unnamedParam3, [in] DWORD unnamedParam4, [in] LPBYTE unnamedParam5, [in] DWORD unnamedParam6 );",
            "name": "RasSetEntryPropertiesA"
        },
        {
            "signature": "DWORD RasSetEntryPropertiesW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] LPRASENTRYW unnamedParam3, [in] DWORD unnamedParam4, [in] LPBYTE unnamedParam5, [in] DWORD unnamedParam6 );",
            "name": "RasSetEntryPropertiesW"
        },
        {
            "signature": "DWORD RasSetSubEntryPropertiesA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] DWORD unnamedParam3, [in] LPRASSUBENTRYA unnamedParam4, [in] DWORD unnamedParam5, [in] LPBYTE unnamedParam6, [in] DWORD unnamedParam7 );",
            "name": "RasSetSubEntryPropertiesA"
        },
        {
            "signature": "DWORD RasSetSubEntryPropertiesW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] DWORD unnamedParam3, [in] LPRASSUBENTRYW unnamedParam4, [in] DWORD unnamedParam5, [in] LPBYTE unnamedParam6, [in] DWORD unnamedParam7 );",
            "name": "RasSetSubEntryPropertiesW"
        },
        {
            "signature": "DWORD RasUpdateConnection( [in] HRASCONN hrasconn, [in] LPRASUPDATECONN lprasupdateconn );",
            "name": "RasUpdateConnection"
        },
        {
            "signature": "DWORD RasValidateEntryNameA( [in] LPCSTR unnamedParam1, [in] LPCSTR unnamedParam2 );",
            "name": "RasValidateEntryNameA"
        },
        {
            "signature": "DWORD RasValidateEntryNameW( [in] LPCWSTR unnamedParam1, [in] LPCWSTR unnamedParam2 );",
            "name": "RasValidateEntryNameW"
        }
    ],
    "Rasdlg.h": [
        {
            "signature": "RasCustomDialDlgFn Rascustomdialdlgfn; BOOL Rascustomdialdlgfn( HINSTANCE hInstDll, DWORD dwFlags, LPWSTR lpszPhonebook, LPWSTR lpszEntry, LPWSTR lpszPhoneNumber, LPRASDIALDLG lpInfo, PVOID pvInfo ) {...}",
            "name": "RasCustomDialDlgFn callback"
        },
        {
            "signature": "RasCustomEntryDlgFn Rascustomentrydlgfn; BOOL Rascustomentrydlgfn( HINSTANCE hInstDll, LPWSTR lpszPhonebook, LPWSTR lpszEntry, LPRASENTRYDLG lpInfo, DWORD dwFlags ) {...}",
            "name": "RasCustomEntryDlgFn callback"
        },
        {
            "signature": "BOOL RasDialDlgA( [in] LPSTR lpszPhonebook, [in] LPSTR lpszEntry, [in] LPSTR lpszPhoneNumber, [in] LPRASDIALDLG lpInfo );",
            "name": "RasDialDlgA"
        },
        {
            "signature": "BOOL RasDialDlgW( [in] LPWSTR lpszPhonebook, [in] LPWSTR lpszEntry, [in] LPWSTR lpszPhoneNumber, [in] LPRASDIALDLG lpInfo );",
            "name": "RasDialDlgW"
        },
        {
            "signature": "BOOL RasEntryDlgA( [in] LPSTR lpszPhonebook, [in] LPSTR lpszEntry, [in] LPRASENTRYDLGA lpInfo );",
            "name": "RasEntryDlgA"
        },
        {
            "signature": "BOOL RasEntryDlgW( [in] LPWSTR lpszPhonebook, [in] LPWSTR lpszEntry, [in] LPRASENTRYDLGW lpInfo );",
            "name": "RasEntryDlgW"
        },
        {
            "signature": "RASPBDLGFUNCA Raspbdlgfunca; void Raspbdlgfunca( ULONG_PTR unnamedParam1, DWORD unnamedParam2, LPSTR unnamedParam3, LPVOID unnamedParam4 ) {...}",
            "name": "RASPBDLGFUNCA callback"
        },
        {
            "signature": "RASPBDLGFUNCW Raspbdlgfuncw; void Raspbdlgfuncw( ULONG_PTR unnamedParam1, DWORD unnamedParam2, LPWSTR unnamedParam3, LPVOID unnamedParam4 ) {...}",
            "name": "RASPBDLGFUNCW callback"
        },
        {
            "signature": "BOOL RasPhonebookDlgA( [in] LPSTR lpszPhonebook, [in] LPSTR lpszEntry, [in, out] LPRASPBDLGA lpInfo );",
            "name": "RasPhonebookDlgA"
        },
        {
            "signature": "BOOL RasPhonebookDlgW( [in] LPWSTR lpszPhonebook, [in] LPWSTR lpszEntry, [in, out] LPRASPBDLGW lpInfo );",
            "name": "RasPhonebookDlgW"
        }
    ],
    "Raseapif.h": [
        {
            "signature": "DWORD RasEapFreeMemory( [in] BYTE *pMemory );",
            "name": "RasEapFreeMemory"
        },
        {
            "signature": "DWORD RasEapGetIdentity( [in] DWORD dwEapTypeId, [in] HWND hwndParent, [in] DWORD dwFlags, [in] const WCHAR *pwszPhonebook, [in] const WCHAR *pwszEntry, [in] BYTE *pConnectionDataIn, [in] DWORD dwSizeOfConnectionDataIn, [in] BYTE *pUserDataIn, [in] DWORD dwSizeOfUserDataIn, [out] BYTE **ppUserDataOut, [out] DWORD *pdwSizeOfUserDataOut, [out] WCHAR **ppwszIdentityOut );",
            "name": "RasEapGetIdentity"
        },
        {
            "signature": "DWORD RasEapGetInfo( [in] DWORD dwEapTypeId, [out] PPP_EAP_INFO *pEapInfo );",
            "name": "RasEapGetInfo"
        },
        {
            "signature": "DWORD RasEapInvokeConfigUI( [in] DWORD dwEapTypeId, [in] HWND hwndParent, [in] DWORD dwFlags, [in] BYTE *pConnectionDataIn, [in] DWORD dwSizeOfConnectionDataIn, [out] BYTE **ppConnectionDataOut, [out] DWORD *pdwSizeOfConnectionDataOut );",
            "name": "RasEapInvokeConfigUI"
        },
        {
            "signature": "DWORD RasEapInvokeInteractiveUI( [in] DWORD dwEapTypeId, [in] HWND hwndParent, [in] BYTE *pUIContextData, [in] DWORD dwSizeOfUIContextData, BYTE **ppDataFromInteractiveUI, [out] DWORD *pdwSizeOfDataFromInteractiveUI );",
            "name": "RasEapInvokeInteractiveUI"
        }
    ],
    "Rasshost.h": [
        {
            "signature": "DWORD RasSecurityDialogBegin( [in] HPORT hPort, [in] PBYTE pSendBuf, [in] DWORD SendBufSize, [in] PBYTE pRecvBuf, [in] DWORD RecvBufSize, VOID(* )(SECURITY_MESSAGE *) RasSecurityDialogComplete );",
            "name": "RasSecurityDialogBegin"
        },
        {
            "signature": "void RasSecurityDialogComplete( [in] SECURITY_MESSAGE *pSecMsg );",
            "name": "RasSecurityDialogComplete"
        },
        {
            "signature": "DWORD RasSecurityDialogEnd( [in] HPORT hPort );",
            "name": "RasSecurityDialogEnd"
        },
        {
            "signature": "DWORD RasSecurityDialogGetInfo( [in] HPORT hPort, [in] RAS_SECURITY_INFO *pBuffer );",
            "name": "RasSecurityDialogGetInfo"
        },
        {
            "signature": "DWORD RasSecurityDialogReceive( [in] HPORT hPort, [in] PBYTE pBuffer, [in] PWORD pBufferLength, [in] DWORD Timeout, [in] HANDLE hEvent );",
            "name": "RasSecurityDialogReceive"
        },
        {
            "signature": "DWORD RasSecurityDialogSend( [in] HPORT hPort, [in] PBYTE pBuffer, [in] WORD BufferLength );",
            "name": "RasSecurityDialogSend"
        }
    ],
    "Rdpappcontainerclient.h": [],
    "Rdpencomapi.h": [],
    "Realtimeapiset.h": [
        {
            "signature": "HRESULT ConvertAuxiliaryCounterToPerformanceCounter( [in] ULONGLONG ullAuxiliaryCounterValue, [out] PULONGLONG lpPerformanceCounterValue, [out, optional] PULONGLONG lpConversionError );",
            "name": "ConvertAuxiliaryCounterToPerformanceCounter"
        },
        {
            "signature": "HRESULT ConvertPerformanceCounterToAuxiliaryCounter( [in] ULONGLONG ullPerformanceCounterValue, [out] PULONGLONG lpAuxiliaryCounterValue, [out, optional] PULONGLONG lpConversionError );",
            "name": "ConvertPerformanceCounterToAuxiliaryCounter"
        },
        {
            "signature": "HRESULT QueryAuxiliaryCounterFrequency( [out] PULONGLONG lpAuxiliaryCounterFrequency );",
            "name": "QueryAuxiliaryCounterFrequency"
        },
        {
            "signature": "BOOL QueryIdleProcessorCycleTime( [in, out] PULONG BufferLength, [out] PULONG64 ProcessorIdleCycleTime );",
            "name": "QueryIdleProcessorCycleTime"
        },
        {
            "signature": "BOOL QueryIdleProcessorCycleTimeEx( [in] USHORT Group, [in, out] PULONG BufferLength, [out] PULONG64 ProcessorIdleCycleTime );",
            "name": "QueryIdleProcessorCycleTimeEx"
        },
        {
            "signature": "void QueryInterruptTime( [out] PULONGLONG lpInterruptTime );",
            "name": "QueryInterruptTime"
        },
        {
            "signature": "void QueryInterruptTimePrecise( [out] PULONGLONG lpInterruptTimePrecise );",
            "name": "QueryInterruptTimePrecise"
        },
        {
            "signature": "BOOL QueryProcessCycleTime( [in] HANDLE ProcessHandle, [out] PULONG64 CycleTime );",
            "name": "QueryProcessCycleTime"
        },
        {
            "signature": "BOOL QueryThreadCycleTime( [in] HANDLE ThreadHandle, [out] PULONG64 CycleTime );",
            "name": "QueryThreadCycleTime"
        },
        {
            "signature": "BOOL QueryUnbiasedInterruptTime( PULONGLONG UnbiasedTime );",
            "name": "QueryUnbiasedInterruptTime"
        },
        {
            "signature": "void QueryUnbiasedInterruptTimePrecise( [out] PULONGLONG lpUnbiasedInterruptTimePrecise );",
            "name": "QueryUnbiasedInterruptTimePrecise"
        }
    ],
    "Recapis.h": [
        {
            "signature": "HRESULT AddStroke( HRECOCONTEXT hrc, const PACKET_DESCRIPTION *pPacketDesc, ULONG cbPacket, const BYTE *pPacket, const XFORM *pXForm );",
            "name": "AddStroke"
        },
        {
            "signature": "HRESULT AddWordsToWordList( HRECOWORDLIST hwl, WCHAR *pwcWords );",
            "name": "AddWordsToWordList"
        },
        {
            "signature": "HRESULT AdviseInkChange( HRECOCONTEXT hrc, BOOL bNewStroke );",
            "name": "AdviseInkChange"
        },
        {
            "signature": "HRESULT CloneContext( HRECOCONTEXT hrc, HRECOCONTEXT *pCloneHrc );",
            "name": "CloneContext"
        },
        {
            "signature": "HRESULT CreateContext( HRECOGNIZER hrec, HRECOCONTEXT *phrc );",
            "name": "CreateContext"
        },
        {
            "signature": "HRESULT CreateRecognizer( CLSID *pCLSID, HRECOGNIZER *phrec );",
            "name": "CreateRecognizer"
        },
        {
            "signature": "HRESULT DestroyAlternate( HRECOALT hrcalt );",
            "name": "DestroyAlternate"
        },
        {
            "signature": "HRESULT DestroyContext( HRECOCONTEXT hrc );",
            "name": "DestroyContext"
        },
        {
            "signature": "HRESULT DestroyRecognizer( HRECOGNIZER hrec );",
            "name": "DestroyRecognizer"
        },
        {
            "signature": "HRESULT DestroyWordList( HRECOWORDLIST hwl );",
            "name": "DestroyWordList"
        },
        {
            "signature": "HRESULT EndInkInput( HRECOCONTEXT hrc );",
            "name": "EndInkInput"
        },
        {
            "signature": "HRESULT GetAllRecognizers( CLSID **recognizerClsids, ULONG *count );",
            "name": "GetAllRecognizers"
        },
        {
            "signature": "HRESULT GetBestResultString( HRECOCONTEXT hrc, ULONG *pcSize, WCHAR *pwcBestResult );",
            "name": "GetBestResultString"
        },
        {
            "signature": "HRESULT GetContextPreferenceFlags( HRECOCONTEXT hrc, DWORD *pdwContextPreferenceFlags );",
            "name": "GetContextPreferenceFlags"
        },
        {
            "signature": "HRESULT GetContextPropertyList( HRECOCONTEXT hrc, ULONG *pcProperties, GUID *pPropertyGUIDS );",
            "name": "GetContextPropertyList"
        },
        {
            "signature": "HRESULT GetContextPropertyValue( HRECOCONTEXT hrc, GUID *pGuid, ULONG *pcbSize, BYTE *pProperty );",
            "name": "GetContextPropertyValue"
        },
        {
            "signature": "HRESULT GetEnabledUnicodeRanges( HRECOCONTEXT hrc, ULONG *pcRanges, CHARACTER_RANGE *pcr );",
            "name": "GetEnabledUnicodeRanges"
        },
        {
            "signature": "HRESULT GetGuide( HRECOCONTEXT hrc, RECO_GUIDE *pGuide, ULONG *piIndex );",
            "name": "GetGuide"
        },
        {
            "signature": "HRESULT GetLatticePtr( HRECOCONTEXT hrc, RECO_LATTICE **ppLattice );",
            "name": "GetLatticePtr"
        },
        {
            "signature": "HRESULT GetLeftSeparator( HRECOCONTEXT hrc, [in, out] ULONG *pcSize, [out] WCHAR *pwcLeftSeparator );",
            "name": "GetLeftSeparator"
        },
        {
            "signature": "HRESULT GetPreferredPacketDescription( HRECOGNIZER hrec, PACKET_DESCRIPTION *pPacketDescription );",
            "name": "GetPreferredPacketDescription"
        },
        {
            "signature": "HRESULT GetRecoAttributes( HRECOGNIZER hrec, RECO_ATTRS *pRecoAttrs );",
            "name": "GetRecoAttributes"
        },
        {
            "signature": "HRESULT GetResultPropertyList( HRECOGNIZER hrec, ULONG *pPropertyCount, GUID *pPropertyGuid );",
            "name": "GetResultPropertyList"
        },
        {
            "signature": "HRESULT GetRightSeparator( HRECOCONTEXT hrc, [in, out] ULONG *pcSize, [out, optional] WCHAR *pwcRightSeparator );",
            "name": "GetRightSeparator"
        },
        {
            "signature": "HRESULT GetUnicodeRanges( HRECOGNIZER hrec, ULONG *pcRanges, CHARACTER_RANGE *pcr );",
            "name": "GetUnicodeRanges"
        },
        {
            "signature": "HRESULT IsStringSupported( HRECOCONTEXT hrc, ULONG wcString, const WCHAR *pwcString );",
            "name": "IsStringSupported"
        },
        {
            "signature": "HRESULT LoadCachedAttributes( CLSID clsid, RECO_ATTRS *pRecoAttributes );",
            "name": "LoadCachedAttributes"
        },
        {
            "signature": "HRESULT MakeWordList( HRECOGNIZER hrec, WCHAR *pBuffer, HRECOWORDLIST *phwl );",
            "name": "MakeWordList"
        },
        {
            "signature": "HRESULT Process( HRECOCONTEXT hrc, BOOL *pbPartialProcessing );",
            "name": "Process"
        },
        {
            "signature": "HRESULT ResetContext( HRECOCONTEXT hrc );",
            "name": "ResetContext"
        },
        {
            "signature": "HRESULT SetCACMode( HRECOCONTEXT hrc, int iMode );",
            "name": "SetCACMode"
        },
        {
            "signature": "HRESULT SetContextPropertyValue( HRECOCONTEXT hrc, GUID *pGuid, ULONG cbSize, BYTE *pProperty );",
            "name": "SetContextPropertyValue"
        },
        {
            "signature": "HRESULT SetEnabledUnicodeRanges( HRECOCONTEXT hrc, ULONG cRanges, CHARACTER_RANGE *pcr );",
            "name": "SetEnabledUnicodeRanges"
        },
        {
            "signature": "HRESULT SetFactoid( HRECOCONTEXT hrc, ULONG cwcFactoid, const WCHAR *pwcFactoid );",
            "name": "SetFactoid"
        },
        {
            "signature": "HRESULT SetFlags( [in] HRECOCONTEXT hrc, [in] DWORD dwFlags );",
            "name": "SetFlags"
        },
        {
            "signature": "HRESULT SetGuide( HRECOCONTEXT hrc, const RECO_GUIDE *pGuide, ULONG iIndex );",
            "name": "SetGuide"
        },
        {
            "signature": "HRESULT SetTextContext( HRECOCONTEXT hrc, ULONG cwcBefore, const WCHAR *pwcBefore, ULONG cwcAfter, const WCHAR *pwcAfter );",
            "name": "SetTextContext"
        },
        {
            "signature": "HRESULT SetWordList( HRECOCONTEXT hrc, HRECOWORDLIST hwl );",
            "name": "SetWordList"
        }
    ],
    "Reconcil.h": [],
    "Rectypes.h": [],
    "Refptrco.h": [],
    "Relogger.h": [],
    "Remotesystemadditionalinfo.h": [
        {
            "signature": "void HSTRING_UserFree( unsigned long *unnamedParam1, HSTRING *unnamedParam2 );",
            "name": "HSTRING_UserFree"
        },
        {
            "signature": "void HSTRING_UserFree64( [in] unsigned long *unnamedParam1, [in] HSTRING *unnamedParam2 );",
            "name": "HSTRING_UserFree64"
        },
        {
            "signature": "unsigned char * HSTRING_UserMarshal( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserMarshal"
        },
        {
            "signature": "unsigned char * HSTRING_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserMarshal64"
        },
        {
            "signature": "unsigned long HSTRING_UserSize( unsigned long *unnamedParam1, unsigned long unnamedParam2, HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserSize"
        },
        {
            "signature": "unsigned long HSTRING_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserSize64"
        },
        {
            "signature": "unsigned char * HSTRING_UserUnmarshal( unsigned long *unnamedParam1, unsigned char *unnamedParam2, HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserUnmarshal"
        },
        {
            "signature": "unsigned char * HSTRING_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in] unsigned char *unnamedParam2, [out] HSTRING *unnamedParam3 );",
            "name": "HSTRING_UserUnmarshal64"
        }
    ],
    "Rend.h": [],
    "Rendezvoussession.h": [],
    "Resapi.h": [
        {
            "signature": "DWORD CloseClusterCryptProvider( [in] HCLUSCRYPTPROVIDER hClusCryptProvider );",
            "name": "CloseClusterCryptProvider"
        },
        {
            "signature": "DWORD ClusAddClusterHealthFault( [in] HCLUSTER hCluster, [in] CLUSTER_HEALTH_FAULT *failure, [in] DWORD unnamedParam3 );",
            "name": "ClusAddClusterHealthFault"
        },
        {
            "signature": "DWORD ClusGetClusterHealthFaults( [in] HCLUSTER hCluster, [out] CLUSTER_HEALTH_FAULT_ARRAY *objects, [in] DWORD flags );",
            "name": "ClusGetClusterHealthFaults"
        },
        {
            "signature": "DWORD ClusRemoveClusterHealthFault( [in] HCLUSTER hCluster, [in] LPCWSTR id, [in] DWORD flags );",
            "name": "ClusRemoveClusterHealthFault"
        },
        {
            "signature": "DWORD ClusterClearBackupStateForSharedVolume( [in] LPCWSTR lpszVolumePathName );",
            "name": "ClusterClearBackupStateForSharedVolume"
        },
        {
            "signature": "DWORD ClusterDecrypt( [in] HCLUSCRYPTPROVIDER hClusCryptProvider, [in] PBYTE pCryptInput, [in] DWORD cbCryptInput, [out] PBYTE *ppCryptOutput, [out] PDWORD pcbCryptOutput );",
            "name": "ClusterDecrypt"
        },
        {
            "signature": "DWORD ClusterEncrypt( [in] HCLUSCRYPTPROVIDER hClusCryptProvider, [in] PBYTE pData, [in] DWORD cbData, [out] PBYTE *ppData, [out] PDWORD pcbData );",
            "name": "ClusterEncrypt"
        },
        {
            "signature": "BOOL ClusterGetVolumeNameForVolumeMountPoint( [in] LPCWSTR lpszVolumeMountPoint, [out] LPWSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "ClusterGetVolumeNameForVolumeMountPoint"
        },
        {
            "signature": "BOOL ClusterGetVolumePathName( [in] LPCWSTR lpszFileName, [out] LPWSTR lpszVolumePathName, [in] DWORD cchBufferLength );",
            "name": "ClusterGetVolumePathName"
        },
        {
            "signature": "BOOL ClusterIsPathOnSharedVolume( [in] LPCWSTR lpszPathName );",
            "name": "ClusterIsPathOnSharedVolume"
        },
        {
            "signature": "DWORD ClusterPrepareSharedVolumeForBackup( [in] LPCWSTR lpszFileName, [out] LPWSTR lpszVolumePathName, [in, out] LPDWORD lpcchVolumePathName, [out] LPWSTR lpszVolumeName, [in, out] LPDWORD lpcchVolumeName );",
            "name": "ClusterPrepareSharedVolumeForBackup"
        },
        {
            "signature": "BOOL ClusWorkerCheckTerminate( [in] PCLUS_WORKER lpWorker );",
            "name": "ClusWorkerCheckTerminate"
        },
        {
            "signature": "DWORD ClusWorkerCreate( [out] PCLUS_WORKER lpWorker, [in] PWORKER_START_ROUTINE lpStartAddress, [in] PVOID lpParameter );",
            "name": "ClusWorkerCreate"
        },
        {
            "signature": "DWORD ClusWorkersTerminate( [in, out] PCLUS_WORKER *ClusWorkers, [in] size_t const ClusWorkersCount, [in] DWORD TimeoutInMilliseconds, [in] BOOL WaitOnly );",
            "name": "ClusWorkersTerminate"
        },
        {
            "signature": "void ClusWorkerTerminate( PCLUS_WORKER lpWorker );",
            "name": "ClusWorkerTerminate"
        },
        {
            "signature": "DWORD ClusWorkerTerminateEx( [in, out] PCLUS_WORKER ClusWorker, [in] DWORD TimeoutInMilliseconds, [in] BOOL WaitOnly );",
            "name": "ClusWorkerTerminateEx"
        },
        {
            "signature": "DWORD FreeClusterCrypt( [in] [in] PVOID pCryptInfo );",
            "name": "FreeClusterCrypt"
        },
        {
            "signature": "DWORD FreeClusterHealthFault( [in, out] CLUSTER_HEALTH_FAULT *clusterHealthFault );",
            "name": "FreeClusterHealthFault"
        },
        {
            "signature": "DWORD FreeClusterHealthFaultArray( [in, out] CLUSTER_HEALTH_FAULT_ARRAY *clusterHealthFaultArray );",
            "name": "FreeClusterHealthFaultArray"
        },
        {
            "signature": "DWORD InitializeClusterHealthFault( [in, out] CLUSTER_HEALTH_FAULT *clusterHealthFault );",
            "name": "InitializeClusterHealthFault"
        },
        {
            "signature": "DWORD InitializeClusterHealthFaultArray( [in, out] CLUSTER_HEALTH_FAULT_ARRAY *clusterHealthFaultArray );",
            "name": "InitializeClusterHealthFaultArray"
        },
        {
            "signature": "LPRESOURCE_CALLBACK LpresourceCallback; DWORD LpresourceCallback( HRESOURCE unnamedParam1, HRESOURCE unnamedParam2, PVOID unnamedParam3 ) {...}",
            "name": "LPRESOURCE_CALLBACK callback"
        },
        {
            "signature": "LPRESOURCE_CALLBACK_EX LpresourceCallbackEx; DWORD LpresourceCallbackEx( HCLUSTER unnamedParam1, HRESOURCE unnamedParam2, HRESOURCE unnamedParam3, PVOID unnamedParam4 ) {...}",
            "name": "LPRESOURCE_CALLBACK_EX callback"
        },
        {
            "signature": "HCLUSCRYPTPROVIDER OpenClusterCryptProvider( [in] LPCWSTR lpszResource, [in] LPCTSTR lpszProvider, [in] DWORD dwType, [in] DWORD dwFlags );",
            "name": "OpenClusterCryptProvider"
        },
        {
            "signature": "PARBITRATE_ROUTINE ParbitrateRoutine; DWORD ParbitrateRoutine( [in] RESID Resource, [in] PQUORUM_RESOURCE_LOST LostQuorumResource ) {...}",
            "name": "PARBITRATE_ROUTINE callback"
        },
        {
            "signature": "PBEGIN_RESCALL_AS_USER_ROUTINE PbeginRescallAsUserRoutine; DWORD PbeginRescallAsUserRoutine( [in] [in] RESID Resource, [in] [in] HANDLE TokenHandle, [in] [in] DWORD ControlCode, [in] [in] PVOID InBuffer, [in] [in] DWORD InBufferSize, [out] [out] PVOID OutBuffer, [in] [in] DWORD OutBufferSize, [out] [out] LPDWORD BytesReturned, [in] [in] PRES_CTL_CTX context, [in, out] [in, out] PBOOL ReturnedAsynchronously ) {...}",
            "name": "PBEGIN_RESCALL_AS_USER_ROUTINE callback"
        },
        {
            "signature": "PBEGIN_RESCALL_ROUTINE PbeginRescallRoutine; DWORD PbeginRescallRoutine( [in] RESID Resource, [in] DWORD ControlCode, [in] PVOID InBuffer, [in] DWORD InBufferSize, [out] PVOID OutBuffer, [in] DWORD OutBufferSize, [out] LPDWORD BytesReturned, [in] PRES_CTL_CTX context, [out] PBOOL ReturnedAsynchronously ) {...}",
            "name": "PBEGIN_RESCALL_ROUTINE callback"
        },
        {
            "signature": "PBEGIN_RESTYPECALL_AS_USER_ROUTINE PbeginRestypecallAsUserRoutine; DWORD PbeginRestypecallAsUserRoutine( [in] [in] LPCWSTR ResourceTypeName, [in] [in] HANDLE TokenHandle, [in] [in] DWORD ControlCode, [in] [in] PVOID InBuffer, [in] [in] DWORD InBufferSize, [out] [out] PVOID OutBuffer, [in] [in] DWORD OutBufferSize, [out] [out] LPDWORD BytesReturned, [in] [in] PRESTYPE_CTL_CTX context, [in, out] [in, out] PBOOL ReturnedAsynchronously ) {...}",
            "name": "PBEGIN_RESTYPECALL_AS_USER_ROUTINE callback"
        },
        {
            "signature": "PBEGIN_RESTYPECALL_ROUTINE PbeginRestypecallRoutine; DWORD PbeginRestypecallRoutine( [in] LPCWSTR ResourceTypeName, [in] DWORD ControlCode, [in] PVOID InBuffer, [in] DWORD InBufferSize, [out] PVOID OutBuffer, [in] DWORD OutBufferSize, [out] LPDWORD BytesReturned, [in] PRESTYPE_CTL_CTX context, [out] PBOOL ReturnedAsynchronously ) {...}",
            "name": "PBEGIN_RESTYPECALL_ROUTINE callback"
        },
        {
            "signature": "PCANCEL_ROUTINE PcancelRoutine; DWORD PcancelRoutine( [in] RESID Resource, [in] DWORD CancelFlags_RESERVED ) {...}",
            "name": "PCANCEL_ROUTINE callback"
        },
        {
            "signature": "PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS PchangeResTypeProcessForDumps; DWORD PchangeResTypeProcessForDumps( [in] [in] LPCWSTR resourceTypeName, [in] [in] LPCWSTR processName, [in] [in] DWORD processId, [in] [in] BOOL isAdd ) {...}",
            "name": "PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS callback"
        },
        {
            "signature": "PCHANGE_RESOURCE_PROCESS_FOR_DUMPS PchangeResourceProcessForDumps; DWORD PchangeResourceProcessForDumps( [in] [in] RESOURCE_HANDLE resource, [in] [in] LPCWSTR processName, [in] [in] DWORD processId, [in] [in] BOOL isAdd ) {...}",
            "name": "PCHANGE_RESOURCE_PROCESS_FOR_DUMPS callback"
        },
        {
            "signature": "PCLOSE_ROUTINE PcloseRoutine; void PcloseRoutine( RESID Resource ) {...}",
            "name": "PCLOSE_ROUTINE callback"
        },
        {
            "signature": "PCLUSAPI_CLUS_WORKER_TERMINATE PclusapiClusWorkerTerminate; void PclusapiClusWorkerTerminate( [in] PCLUS_WORKER lpWorker ) {...}",
            "name": "PCLUSAPI_CLUS_WORKER_TERMINATE callback"
        },
        {
            "signature": "PEND_CONTROL_CALL PendControlCall; DWORD PendControlCall( const PRES_CTL_CTX context, [in] DWORD status ) {...}",
            "name": "PEND_CONTROL_CALL callback"
        },
        {
            "signature": "PEND_TYPE_CONTROL_CALL PendTypeControlCall; DWORD PendTypeControlCall( const PRESTYPE_CTL_CTX context, [in] DWORD status ) {...}",
            "name": "PEND_TYPE_CONTROL_CALL callback"
        },
        {
            "signature": "PEXTEND_RES_CONTROL_CALL PextendResControlCall; DWORD PextendResControlCall( [in] const PRES_CTL_CTX context, [in] DWORD newTimeoutInMs ) {...}",
            "name": "PEXTEND_RES_CONTROL_CALL callback"
        },
        {
            "signature": "PEXTEND_RES_TYPE_CONTROL_CALL PextendResTypeControlCall; DWORD PextendResTypeControlCall( [in] const PRESTYPE_CTL_CTX context, [in] DWORD newTimeoutInMs ) {...}",
            "name": "PEXTEND_RES_TYPE_CONTROL_CALL callback"
        },
        {
            "signature": "PIS_ALIVE_ROUTINE PisAliveRoutine; BOOL PisAliveRoutine( [in] RESID Resource ) {...}",
            "name": "PIS_ALIVE_ROUTINE callback"
        },
        {
            "signature": "PLOG_EVENT_ROUTINE PlogEventRoutine; void PlogEventRoutine( [in] RESOURCE_HANDLE ResourceHandle, [in] LOG_LEVEL LogLevel, [in] LPCWSTR FormatString, ... unnamedParam4 ) {...}",
            "name": "PLOG_EVENT_ROUTINE callback"
        },
        {
            "signature": "PLOOKS_ALIVE_ROUTINE PlooksAliveRoutine; BOOL PlooksAliveRoutine( [in] RESID Resource ) {...}",
            "name": "PLOOKS_ALIVE_ROUTINE callback"
        },
        {
            "signature": "POFFLINE_ROUTINE PofflineRoutine; DWORD PofflineRoutine( [in] RESID Resource ) {...}",
            "name": "POFFLINE_ROUTINE callback"
        },
        {
            "signature": "POFFLINE_V2_ROUTINE PofflineV2Routine; DWORD PofflineV2Routine( [in] RESID Resource, [in, optional] LPCWSTR DestinationNodeName, [in] DWORD OfflineFlags, [in, optional] PBYTE InBuffer, [in] DWORD InBufferSize, [in] DWORD Reserved ) {...}",
            "name": "POFFLINE_V2_ROUTINE callback"
        },
        {
            "signature": "PONLINE_ROUTINE PonlineRoutine; DWORD PonlineRoutine( [in] RESID Resource, [in, out] LPHANDLE EventHandle ) {...}",
            "name": "PONLINE_ROUTINE callback"
        },
        {
            "signature": "PONLINE_V2_ROUTINE PonlineV2Routine; DWORD PonlineV2Routine( [in] RESID Resource, [out] LPHANDLE EventHandle, [in] DWORD OnlineFlags, [in, optional] PBYTE InBuffer, [in] DWORD InBufferSize, [in] DWORD Reserved ) {...}",
            "name": "PONLINE_V2_ROUTINE callback"
        },
        {
            "signature": "POPEN_ROUTINE PopenRoutine; RESID PopenRoutine( [in] LPCWSTR ResourceName, [in] HKEY ResourceKey, [in] RESOURCE_HANDLE ResourceHandle ) {...}",
            "name": "POPEN_ROUTINE callback"
        },
        {
            "signature": "POPEN_V2_ROUTINE PopenV2Routine; RESID PopenV2Routine( [in] LPCWSTR ResourceName, [in] HKEY ResourceKey, [in] RESOURCE_HANDLE ResourceHandle, [in] [in] DWORD OpenFlags ) {...}",
            "name": "POPEN_V2_ROUTINE callback"
        },
        {
            "signature": "PQUORUM_RESOURCE_LOST PquorumResourceLost; void PquorumResourceLost( RESOURCE_HANDLE Resource ) {...}",
            "name": "PQUORUM_RESOURCE_LOST callback"
        },
        {
            "signature": "PRAISE_RES_TYPE_NOTIFICATION PraiseResTypeNotification; DWORD PraiseResTypeNotification( [in] [in] LPCWSTR ResourceType, [in] [in] const PBYTE pPayload, [in] [in] DWORD payloadSize ) {...}",
            "name": "PRAISE_RES_TYPE_NOTIFICATION callback"
        },
        {
            "signature": "PRELEASE_ROUTINE PreleaseRoutine; DWORD PreleaseRoutine( [in] RESID Resource ) {...}",
            "name": "PRELEASE_ROUTINE callback"
        },
        {
            "signature": "PRESOURCE_CONTROL_ROUTINE PresourceControlRoutine; DWORD PresourceControlRoutine( [in] RESID Resource, [in] DWORD ControlCode, [in, optional] PVOID InBuffer, [in] DWORD InBufferSize, [out, optional] PVOID OutBuffer, [in] DWORD OutBufferSize, [out] LPDWORD BytesReturned ) {...}",
            "name": "PRESOURCE_CONTROL_ROUTINE callback"
        },
        {
            "signature": "PRESOURCE_TYPE_CONTROL_ROUTINE PresourceTypeControlRoutine; DWORD PresourceTypeControlRoutine( [in] LPCWSTR ResourceTypeName, [in] DWORD ControlCode, [in] PVOID InBuffer, [in] DWORD InBufferSize, [out] PVOID OutBuffer, [in] DWORD OutBufferSize, [out] LPDWORD BytesReturned ) {...}",
            "name": "PRESOURCE_TYPE_CONTROL_ROUTINE callback"
        },
        {
            "signature": "PSET_INTERNAL_STATE PsetInternalState; DWORD PsetInternalState( RESOURCE_HANDLE unnamedParam1, [in] CLUSTER_RESOURCE_APPLICATION_STATE stateType, [in] BOOL active ) {...}",
            "name": "PSET_INTERNAL_STATE callback"
        },
        {
            "signature": "PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE PsetResourceInmemoryNodelocalPropertiesRoutine; DWORD PsetResourceInmemoryNodelocalPropertiesRoutine( [in] [in] RESOURCE_HANDLE ResourceHandle, [in] [in] unsigned char *propertyListBuffer, [in] DWORD propertyListBufferSize ) {...}",
            "name": "PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE callback"
        },
        {
            "signature": "PSET_RESOURCE_LOCKED_MODE_ROUTINE PsetResourceLockedModeRoutine; DWORD PsetResourceLockedModeRoutine( [in] RESOURCE_HANDLE ResourceHandle, [in] BOOL LockedModeEnabled, [in] DWORD LockedModeReason ) {...}",
            "name": "PSET_RESOURCE_LOCKED_MODE_ROUTINE callback"
        },
        {
            "signature": "PSET_RESOURCE_STATUS_ROUTINE PsetResourceStatusRoutine; DWORD PsetResourceStatusRoutine( [in] RESOURCE_HANDLE ResourceHandle, [in] PRESOURCE_STATUS ResourceStatus ) {...}",
            "name": "PSET_RESOURCE_STATUS_ROUTINE callback"
        },
        {
            "signature": "PSET_RESOURCE_STATUS_ROUTINE_EX PsetResourceStatusRoutineEx; DWORD PsetResourceStatusRoutineEx( RESOURCE_HANDLE ResourceHandle, PRESOURCE_STATUS_EX ResourceStatus ) {...}",
            "name": "PSET_RESOURCE_STATUS_ROUTINE_EX callback"
        },
        {
            "signature": "PSIGNAL_FAILURE_ROUTINE PsignalFailureRoutine; DWORD PsignalFailureRoutine( [in] RESOURCE_HANDLE ResourceHandle, [in] FAILURE_TYPE FailureType, [in] DWORD ApplicationSpecificErrorCode ) {...}",
            "name": "PSIGNAL_FAILURE_ROUTINE callback"
        },
        {
            "signature": "PSTARTUP_EX_ROUTINE PstartupExRoutine; DWORD PstartupExRoutine( [in] LPCWSTR ResourceType, [in] DWORD MinVersionSupported, [in] DWORD MaxVersionSupported, [in] [in] PCLRES_CALLBACK_FUNCTION_TABLE MonitorCallbackFunctions, [out] [out] PCLRES_FUNCTION_TABLE *ResourceDllInterfaceFunctions ) {...}",
            "name": "PSTARTUP_EX_ROUTINE callback"
        },
        {
            "signature": "PSTARTUP_ROUTINE PstartupRoutine; DWORD PstartupRoutine( [in] LPCWSTR ResourceType, [in] DWORD MinVersionSupported, [in] DWORD MaxVersionSupported, [in] PSET_RESOURCE_STATUS_ROUTINE SetResourceStatus, [in] PLOG_EVENT_ROUTINE LogEvent, [out] PCLRES_FUNCTION_TABLE *FunctionTable ) {...}",
            "name": "PSTARTUP_ROUTINE callback"
        },
        {
            "signature": "PTERMINATE_ROUTINE PterminateRoutine; void PterminateRoutine( [in] RESID Resource ) {...}",
            "name": "PTERMINATE_ROUTINE callback"
        },
        {
            "signature": "PWORKER_START_ROUTINE PworkerStartRoutine; DWORD PworkerStartRoutine( [in] PCLUS_WORKER pWorker, [in] LPVOID lpThreadParameter ) {...}",
            "name": "PWORKER_START_ROUTINE callback"
        },
        {
            "signature": "DWORD ResUtilAddUnknownProperties( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [in, out] PVOID pOutPropertyList, [in] DWORD pcbOutPropertyListSize, [in, out] LPDWORD pcbBytesReturned, [in, out] LPDWORD pcbRequired );",
            "name": "ResUtilAddUnknownProperties"
        },
        {
            "signature": "DWORD ResUtilCreateDirectoryTree( [in] LPCWSTR pszPath );",
            "name": "ResUtilCreateDirectoryTree"
        },
        {
            "signature": "DWORD ResUtilDupParameterBlock( [out] LPBYTE pOutParams, [in] const LPBYTE pInParams, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable );",
            "name": "ResUtilDupParameterBlock"
        },
        {
            "signature": "PWSTR ResUtilDupString( [in] LPCWSTR pszInString );",
            "name": "ResUtilDupString"
        },
        {
            "signature": "DWORD ResUtilEnumPrivateProperties( [in] HKEY hkeyClusterKey, [out] LPWSTR pszOutProperties, [in] DWORD cbOutPropertiesSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilEnumPrivateProperties"
        },
        {
            "signature": "DWORD ResUtilEnumProperties( [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out] LPWSTR pszOutProperties, [in] DWORD cbOutPropertiesSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilEnumProperties"
        },
        {
            "signature": "DWORD ResUtilEnumResources( [in] HRESOURCE hSelf, [in] LPCWSTR lpszResTypeName, [in] LPRESOURCE_CALLBACK pResCallBack, [in] PVOID pParameter );",
            "name": "ResUtilEnumResources"
        },
        {
            "signature": "DWORD ResUtilEnumResourcesEx( [in] HCLUSTER hCluster, [in, optional] HRESOURCE hSelf, [in] LPCWSTR lpszResTypeName, [in] LPRESOURCE_CALLBACK_EX pResCallBack, [in] PVOID pParameter );",
            "name": "ResUtilEnumResourcesEx"
        },
        {
            "signature": "DWORD ResUtilEnumResourcesEx2( [in] HCLUSTER hCluster, [in, optional] HRESOURCE hSelf, [in] LPCWSTR lpszResTypeName, [in] LPRESOURCE_CALLBACK_EX pResCallBack, [in] PVOID pParameter, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilEnumResourcesEx2"
        },
        {
            "signature": "LPWSTR ResUtilExpandEnvironmentStrings( [in] LPCWSTR pszSrc );",
            "name": "ResUtilExpandEnvironmentStrings"
        },
        {
            "signature": "DWORD ResUtilFindBinaryProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out, optional] LPBYTE *pbPropertyValue, [out, optional] LPDWORD pcbPropertyValueSize );",
            "name": "ResUtilFindBinaryProperty"
        },
        {
            "signature": "DWORD ResUtilFindDependentDiskResourceDriveLetter( [in] HCLUSTER hCluster, [in] HRESOURCE hResource, [out] LPWSTR pszDriveLetter, [in, out] DWORD *pcchDriveLetter );",
            "name": "ResUtilFindDependentDiskResourceDriveLetter"
        },
        {
            "signature": "DWORD ResUtilFindDwordProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out] LPDWORD pdwPropertyValue );",
            "name": "ResUtilFindDwordProperty"
        },
        {
            "signature": "DWORD ResUtilFindExpandedSzProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out, optional] LPWSTR *pszPropertyValue );",
            "name": "ResUtilFindExpandedSzProperty"
        },
        {
            "signature": "DWORD ResUtilFindExpandSzProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out, optional] LPWSTR *pszPropertyValue );",
            "name": "ResUtilFindExpandSzProperty"
        },
        {
            "signature": "DWORD ResUtilFindFileTimeProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out] LPFILETIME pftPropertyValue );",
            "name": "ResUtilFindFileTimeProperty"
        },
        {
            "signature": "DWORD ResUtilFindLongProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out] LPLONG plPropertyValue );",
            "name": "ResUtilFindLongProperty"
        },
        {
            "signature": "DWORD ResUtilFindMultiSzProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out] LPWSTR *pszPropertyValue, [out] LPDWORD pcbPropertyValueSize );",
            "name": "ResUtilFindMultiSzProperty"
        },
        {
            "signature": "DWORD ResUtilFindSzProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out, optional] LPWSTR *pszPropertyValue );",
            "name": "ResUtilFindSzProperty"
        },
        {
            "signature": "DWORD ResUtilFindULargeIntegerProperty( [in] const PVOID pPropertyList, [in] DWORD cbPropertyListSize, [in] LPCWSTR pszPropertyName, [out] ULONGLONG *plPropertyValue );",
            "name": "ResUtilFindULargeIntegerProperty"
        },
        {
            "signature": "DWORD ResUtilFreeEnvironment( [in] LPVOID lpEnvironment );",
            "name": "ResUtilFreeEnvironment"
        },
        {
            "signature": "void ResUtilFreeParameterBlock( [in, out] LPBYTE pOutParams, [in] const LPBYTE pInParams, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable );",
            "name": "ResUtilFreeParameterBlock"
        },
        {
            "signature": "DWORD ResUtilGetAllProperties( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out] PVOID pOutPropertyList, [in] DWORD cbOutPropertyListSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilGetAllProperties"
        },
        {
            "signature": "DWORD ResUtilGetBinaryProperty( [out] LPBYTE *ppbOutValue, [out] LPDWORD pcbOutValueSize, [in] const PCLUSPROP_BINARY pValueStruct, [in, optional] const LPBYTE pbOldValue, [in] DWORD cbOldValueSize, [in, out] LPBYTE *ppPropertyList, [in, out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetBinaryProperty"
        },
        {
            "signature": "DWORD ResUtilGetBinaryValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [out, optional] LPBYTE *ppbOutValue, [out] LPDWORD pcbOutValueSize );",
            "name": "ResUtilGetBinaryValue"
        },
        {
            "signature": "CLUSTER_ROLE_STATE ResUtilGetClusterRoleState( [in] HCLUSTER hCluster, [in] CLUSTER_ROLE eClusterRole );",
            "name": "ResUtilGetClusterRoleState"
        },
        {
            "signature": "DWORD ResUtilGetCoreClusterResources( [in] HCLUSTER hCluster, [out] HRESOURCE *phClusterNameResource, [out] HRESOURCE *phClusterIPAddressResource, [out] HRESOURCE *phClusterQuorumResource );",
            "name": "ResUtilGetCoreClusterResources"
        },
        {
            "signature": "DWORD ResUtilGetCoreClusterResourcesEx( [in] HCLUSTER hClusterIn, [out] HRESOURCE *phClusterNameResourceOut, [out] HRESOURCE *phClusterQuorumResourceOut, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilGetCoreClusterResourcesEx"
        },
        {
            "signature": "DWORD ResUtilGetDwordProperty( [out] LPDWORD pdwOutValue, [in] const PCLUSPROP_DWORD pValueStruct, [in] DWORD dwOldValue, [in] DWORD dwMinimum, [in] DWORD dwMaximum, [out] LPBYTE *ppPropertyList, [out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetDwordProperty"
        },
        {
            "signature": "DWORD ResUtilGetDwordValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [out] LPDWORD pdwOutValue, [in] DWORD dwDefaultValue );",
            "name": "ResUtilGetDwordValue"
        },
        {
            "signature": "LPVOID ResUtilGetEnvironmentWithNetName( [in] HRESOURCE hResource );",
            "name": "ResUtilGetEnvironmentWithNetName"
        },
        {
            "signature": "LPWSTR ResUtilGetExpandSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] BOOL bExpand );",
            "name": "ResUtilGetExpandSzValue"
        },
        {
            "signature": "DWORD ResUtilGetFileTimeProperty( [out] LPFILETIME pftOutValue, [in] const PCLUSPROP_FILETIME pValueStruct, [in] FILETIME ftOldValue, [in] FILETIME ftMinimum, [in] FILETIME ftMaximum, [out] LPBYTE *ppPropertyList, [out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetFileTimeProperty"
        },
        {
            "signature": "DWORD ResUtilGetLongProperty( [out] [out] LPLONG plOutValue, [in] [in] const PCLUSPROP_LONG pValueStruct, [in] [in] LONG lOldValue, [in] [in] LONG lMinimum, [in] [in] LONG lMaximum, [out] [out] LPBYTE *ppPropertyList, [out] [out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetLongProperty"
        },
        {
            "signature": "DWORD ResUtilGetMultiSzProperty( [out] LPWSTR *ppszOutValue, [out] LPDWORD pcbOutValueSize, [in] const PCLUSPROP_SZ pValueStruct, [in, optional] LPCWSTR pszOldValue, [in] DWORD cbOldValueSize, [in, out] LPBYTE *ppPropertyList, [in, out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetMultiSzProperty"
        },
        {
            "signature": "DWORD WINAPI_INLINE ResUtilGetMultiSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [out, optional] LPWSTR *ppszOutValue, [out] LPDWORD pcbOutValueSize );",
            "name": "ResUtilGetMultiSzValue"
        },
        {
            "signature": "DWORD ResUtilGetPrivateProperties( [in] HKEY hkeyClusterKey, [out] PVOID pOutPropertyList, [in] DWORD cbOutPropertyListSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilGetPrivateProperties"
        },
        {
            "signature": "DWORD ResUtilGetProperties( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out] PVOID pOutPropertyList, [in] DWORD cbOutPropertyListSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilGetProperties"
        },
        {
            "signature": "DWORD ResUtilGetPropertiesToParameterBlock( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out] LPBYTE pOutParams, [in] BOOL bCheckForRequiredProperties, [out, optional] LPWSTR *pszNameOfPropInError );",
            "name": "ResUtilGetPropertiesToParameterBlock"
        },
        {
            "signature": "DWORD ResUtilGetProperty( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTableItem, [out] PVOID *pOutPropertyItem, [in, out] LPDWORD pcbOutPropertyItemSize );",
            "name": "ResUtilGetProperty"
        },
        {
            "signature": "DWORD ResUtilGetPropertyFormats( [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out] PVOID pOutPropertyFormatList, [in] DWORD cbPropertyFormatListSize, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilGetPropertyFormats"
        },
        {
            "signature": "DWORD ResUtilGetPropertySize( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTableItem, [in, out] LPDWORD pcbOutPropertyListSize, [in, out] LPDWORD pnPropertyCount );",
            "name": "ResUtilGetPropertySize"
        },
        {
            "signature": "DWORD ResUtilGetQwordValue( [in] [in] HKEY hkeyClusterKey, [in] [in] LPCWSTR pszValueName, [out] [out] PULONGLONG pqwOutValue, [in] [in] ULONGLONG qwDefaultValue );",
            "name": "ResUtilGetQwordValue"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependency( [in] HANDLE hSelf, [in] LPCWSTR lpszResourceType );",
            "name": "ResUtilGetResourceDependency"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependencyByClass( [in] HCLUSTER hCluster, [in] HANDLE hSelf, [in] PCLUS_RESOURCE_CLASS_INFO prci, [in] BOOL bRecurse );",
            "name": "ResUtilGetResourceDependencyByClass"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependencyByClassEx( [in] HCLUSTER hCluster, [in] HANDLE hSelf, [in] PCLUS_RESOURCE_CLASS_INFO prci, [in] BOOL bRecurse, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilGetResourceDependencyByClassEx"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependencyByName( [in] HCLUSTER hCluster, [in] HANDLE hSelf, [in] LPCWSTR lpszResourceType, [in] BOOL bRecurse );",
            "name": "ResUtilGetResourceDependencyByName"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependencyByNameEx( [in] HCLUSTER hCluster, [in] HANDLE hSelf, [in] LPCWSTR lpszResourceType, [in] BOOL bRecurse, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilGetResourceDependencyByNameEx"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceDependencyEx( [in] HANDLE hSelf, [in] LPCWSTR lpszResourceType, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilGetResourceDependencyEx"
        },
        {
            "signature": "DWORD ResUtilGetResourceDependentIPAddressProps( [in] HRESOURCE hResource, [out] LPWSTR pszAddress, [in, out] DWORD *pcchAddress, [out] LPWSTR pszSubnetMask, [in, out] DWORD *pcchSubnetMask, [out] LPWSTR pszNetwork, [in, out] DWORD *pcchNetwork );",
            "name": "ResUtilGetResourceDependentIPAddressProps"
        },
        {
            "signature": "DWORD ResUtilGetResourceName( [in] HRESOURCE hResource, [out] PWSTR pszResourceName, [in, out] DWORD *pcchResourceNameInOut );",
            "name": "ResUtilGetResourceName"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceNameDependency( [in] LPCWSTR lpszResourceName, [in] LPCWSTR lpszResourceType );",
            "name": "ResUtilGetResourceNameDependency"
        },
        {
            "signature": "HRESOURCE ResUtilGetResourceNameDependencyEx( [in] LPCWSTR lpszResourceName, [in] LPCWSTR lpszResourceType, [in] DWORD dwDesiredAccess );",
            "name": "ResUtilGetResourceNameDependencyEx"
        },
        {
            "signature": "DWORD ResUtilGetSzProperty( [out] LPWSTR *ppszOutValue, [in] const PCLUSPROP_SZ pValueStruct, [in, optional] LPCWSTR pszOldValue, [in, out] LPBYTE *ppPropertyList, [in, out] LPDWORD pcbPropertyListSize );",
            "name": "ResUtilGetSzProperty"
        },
        {
            "signature": "LPWSTR ResUtilGetSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName );",
            "name": "ResUtilGetSzValue"
        },
        {
            "signature": "BOOL ResUtilIsPathValid( [in] LPCWSTR pszPath );",
            "name": "ResUtilIsPathValid"
        },
        {
            "signature": "BOOL ResUtilIsResourceClassEqual( [in] PCLUS_RESOURCE_CLASS_INFO prci, [in] HRESOURCE hResource );",
            "name": "ResUtilIsResourceClassEqual"
        },
        {
            "signature": "BOOL ResUtilLeftPaxosIsLessThanRight( [in] const PaxosTagCStruct * const left, [in] const PaxosTagCStruct * const right );",
            "name": "ResUtilLeftPaxosIsLessThanRight"
        },
        {
            "signature": "BOOL ResUtilPaxosComparer( [in] const PaxosTagCStruct * const left, [in] const PaxosTagCStruct * const right );",
            "name": "ResUtilPaxosComparer"
        },
        {
            "signature": "DWORD ResUtilPropertyListFromParameterBlock( [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [out, optional] PVOID pOutPropertyList, [in, out] LPDWORD pcbOutPropertyListSize, [in] const LPBYTE pInParams, [out] LPDWORD pcbBytesReturned, [out] LPDWORD pcbRequired );",
            "name": "ResUtilPropertyListFromParameterBlock"
        },
        {
            "signature": "DWORD ResUtilRemoveResourceServiceEnvironment( [in] LPCWSTR pszServiceName, [in] PLOG_EVENT_ROUTINE pfnLogEvent, [in] RESOURCE_HANDLE hResourceHandle );",
            "name": "ResUtilRemoveResourceServiceEnvironment"
        },
        {
            "signature": "BOOL ResUtilResourcesEqual( [in] HRESOURCE hSelf, [in] HRESOURCE hResource );",
            "name": "ResUtilResourcesEqual"
        },
        {
            "signature": "BOOL ResUtilResourceTypesEqual( [in] LPCWSTR lpszResourceTypeName, [in] HRESOURCE hResource );",
            "name": "ResUtilResourceTypesEqual"
        },
        {
            "signature": "DWORD ResUtilSetBinaryValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] const LPBYTE pbNewValue, [in] DWORD cbNewValueSize, [in, out, optional] LPBYTE *ppbOutValue, [in, out] LPDWORD pcbOutValueSize );",
            "name": "ResUtilSetBinaryValue"
        },
        {
            "signature": "DWORD ResUtilSetDwordValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] DWORD dwNewValue, [in, out] LPDWORD pdwOutValue );",
            "name": "ResUtilSetDwordValue"
        },
        {
            "signature": "DWORD ResUtilSetExpandSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] LPCWSTR pszNewValue, [in, out, optional] LPWSTR *ppszOutString );",
            "name": "ResUtilSetExpandSzValue"
        },
        {
            "signature": "DWORD ResUtilSetMultiSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] LPCWSTR pszNewValue, [in] DWORD cbNewValueSize, [out, optional] LPWSTR *ppszOutValue, [in, out, optional] LPDWORD pcbOutValueSize );",
            "name": "ResUtilSetMultiSzValue"
        },
        {
            "signature": "DWORD ResUtilSetPrivatePropertyList( [in] HKEY hkeyClusterKey, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize );",
            "name": "ResUtilSetPrivatePropertyList"
        },
        {
            "signature": "DWORD ResUtilSetPropertyParameterBlock( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [in] PVOID Reserved, [in] const LPBYTE pInParams, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize, [out, optional] LPBYTE pOutParams );",
            "name": "ResUtilSetPropertyParameterBlock"
        },
        {
            "signature": "DWORD ResUtilSetPropertyParameterBlockEx( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [in] PVOID Reserved, [in] const LPBYTE pInParams, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize, [in] BOOL bForceWrite, [out, optional] LPBYTE pOutParams );",
            "name": "ResUtilSetPropertyParameterBlockEx"
        },
        {
            "signature": "DWORD ResUtilSetPropertyTable( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, [in] BOOL bAllowUnknownProperties, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize, [out, optional] LPBYTE pOutParams );",
            "name": "ResUtilSetPropertyTable"
        },
        {
            "signature": "DWORD ResUtilSetPropertyTableEx( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, [in] BOOL bAllowUnknownProperties, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize, [in] BOOL bForceWrite, [out, optional] LPBYTE pOutParams );",
            "name": "ResUtilSetPropertyTableEx"
        },
        {
            "signature": "DWORD ResUtilSetQwordValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] ULONGLONG qwNewValue, [in, out, optional] PULONGLONG pqwOutValue );",
            "name": "ResUtilSetQwordValue"
        },
        {
            "signature": "DWORD ResUtilSetResourceServiceEnvironment( [in] LPCWSTR pszServiceName, [in] HRESOURCE hResource, [in] PLOG_EVENT_ROUTINE pfnLogEvent, [in] RESOURCE_HANDLE hResourceHandle );",
            "name": "ResUtilSetResourceServiceEnvironment"
        },
        {
            "signature": "DWORD ResUtilSetResourceServiceStartParameters( [in] LPCWSTR pszServiceName, [in] SC_HANDLE schSCMHandle, [in, out] LPSC_HANDLE phService, [in] PLOG_EVENT_ROUTINE pfnLogEvent, [in] RESOURCE_HANDLE hResourceHandle );",
            "name": "ResUtilSetResourceServiceStartParameters"
        },
        {
            "signature": "DWORD ResUtilSetResourceServiceStartParametersEx( [in] LPCWSTR pszServiceName, [in] SC_HANDLE schSCMHandle, [in, out] LPSC_HANDLE phService, [in] DWORD dwDesiredAccess, [in] PLOG_EVENT_ROUTINE pfnLogEvent, [in] RESOURCE_HANDLE hResourceHandle );",
            "name": "ResUtilSetResourceServiceStartParametersEx"
        },
        {
            "signature": "DWORD ResUtilSetSzValue( [in] HKEY hkeyClusterKey, [in] LPCWSTR pszValueName, [in] LPCWSTR pszNewValue, [in, out, optional] LPWSTR *ppszOutString );",
            "name": "ResUtilSetSzValue"
        },
        {
            "signature": "DWORD ResUtilSetUnknownProperties( [in] HKEY hkeyClusterKey, [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize );",
            "name": "ResUtilSetUnknownProperties"
        },
        {
            "signature": "DWORD ResUtilSetValueEx( [in] HKEY hkeyClusterKey, [in] LPCWSTR valueName, [in] DWORD valueType, [in] const LPBYTE valueData, [in] DWORD valueSize, [in] DWORD flags );",
            "name": "ResUtilSetValueEx"
        },
        {
            "signature": "DWORD ResUtilStartResourceService( [in] LPCWSTR pszServiceName, [out] LPSC_HANDLE phServiceHandle );",
            "name": "ResUtilStartResourceService"
        },
        {
            "signature": "DWORD ResUtilStopResourceService( [in] LPCWSTR pszServiceName );",
            "name": "ResUtilStopResourceService"
        },
        {
            "signature": "DWORD ResUtilStopService( [in] SC_HANDLE hServiceHandle );",
            "name": "ResUtilStopService"
        },
        {
            "signature": "DWORD ResUtilTerminateServiceProcessFromResDll( [in] DWORD dwServicePid, [in] BOOL bOffline, [out, optional] PDWORD pdwResourceState, [in] PLOG_EVENT_ROUTINE pfnLogEvent, [in] RESOURCE_HANDLE hResourceHandle );",
            "name": "ResUtilTerminateServiceProcessFromResDll"
        },
        {
            "signature": "DWORD ResUtilVerifyPrivatePropertyList( [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize );",
            "name": "ResUtilVerifyPrivatePropertyList"
        },
        {
            "signature": "DWORD ResUtilVerifyPropertyTable( [in] const PRESUTIL_PROPERTY_ITEM pPropertyTable, PVOID Reserved, [in] BOOL bAllowUnknownProperties, [in] const PVOID pInPropertyList, [in] DWORD cbInPropertyListSize, [out, optional] LPBYTE pOutParams );",
            "name": "ResUtilVerifyPropertyTable"
        },
        {
            "signature": "DWORD ResUtilVerifyResourceService( [in] LPCWSTR pszServiceName );",
            "name": "ResUtilVerifyResourceService"
        },
        {
            "signature": "DWORD ResUtilVerifyService( [in] SC_HANDLE hServiceHandle );",
            "name": "ResUtilVerifyService"
        }
    ],
    "Resourceindexer.h": [
        {
            "signature": "HRESULT CreateResourceIndexer( [in] PCWSTR projectRoot, [in, optional] PCWSTR extensionDllPath, [out] PVOID *ppResourceIndexer );",
            "name": "CreateResourceIndexer"
        },
        {
            "signature": "void DestroyIndexedResults( [in, optional] PWSTR resourceUri, [in] ULONG qualifierCount, [in, optional] IndexedResourceQualifier *qualifiers );",
            "name": "DestroyIndexedResults"
        },
        {
            "signature": "void DestroyResourceIndexer( [in, optional] PVOID resourceIndexer );",
            "name": "DestroyResourceIndexer"
        },
        {
            "signature": "HRESULT IndexFilePath( [in] PVOID resourceIndexer, [in] PCWSTR filePath, [out] PWSTR *ppResourceUri, [out] ULONG *pQualifierCount, [out] IndexedResourceQualifier **ppQualifiers );",
            "name": "IndexFilePath"
        }
    ],
    "Restartmanager.h": [
        {
            "signature": "RM_WRITE_STATUS_CALLBACK RmWriteStatusCallback; void RmWriteStatusCallback( [in] UINT nPercentComplete ) {...}",
            "name": "RM_WRITE_STATUS_CALLBACK callback"
        },
        {
            "signature": "DWORD RmAddFilter( [in] DWORD dwSessionHandle, [in, optional] LPCWSTR strModuleName, [in, optional] RM_UNIQUE_PROCESS *pProcess, [in, optional] LPCWSTR strServiceShortName, [in] RM_FILTER_ACTION FilterAction );",
            "name": "RmAddFilter"
        },
        {
            "signature": "DWORD RmCancelCurrentTask( [in] DWORD dwSessionHandle );",
            "name": "RmCancelCurrentTask"
        },
        {
            "signature": "DWORD RmEndSession( [in] DWORD dwSessionHandle );",
            "name": "RmEndSession"
        },
        {
            "signature": "DWORD RmGetFilterList( [in] DWORD dwSessionHandle, [out, optional] PBYTE pbFilterBuf, [in] DWORD cbFilterBuf, [out] LPDWORD cbFilterBufNeeded );",
            "name": "RmGetFilterList"
        },
        {
            "signature": "DWORD RmGetList( [in] DWORD dwSessionHandle, [out] UINT *pnProcInfoNeeded, [in, out] UINT *pnProcInfo, [in, out, optional] RM_PROCESS_INFO [] rgAffectedApps, [out] LPDWORD lpdwRebootReasons );",
            "name": "RmGetList"
        },
        {
            "signature": "DWORD RmJoinSession( [out] DWORD *pSessionHandle, [in] const WCHAR [] strSessionKey );",
            "name": "RmJoinSession"
        },
        {
            "signature": "DWORD RmRegisterResources( [in] DWORD dwSessionHandle, [in] UINT nFiles, [in, optional] LPCWSTR [] rgsFileNames, [in] UINT nApplications, [in, optional] RM_UNIQUE_PROCESS [] rgApplications, [in] UINT nServices, [in, optional] LPCWSTR [] rgsServiceNames );",
            "name": "RmRegisterResources"
        },
        {
            "signature": "DWORD RmRemoveFilter( [in] DWORD dwSessionHandle, [in, optional] LPCWSTR strModuleName, [in, optional] RM_UNIQUE_PROCESS *pProcess, [in, optional] LPCWSTR strServiceShortName );",
            "name": "RmRemoveFilter"
        },
        {
            "signature": "DWORD RmRestart( [in] DWORD dwSessionHandle, DWORD dwRestartFlags, [in, optional] RM_WRITE_STATUS_CALLBACK fnStatus );",
            "name": "RmRestart"
        },
        {
            "signature": "DWORD RmShutdown( [in] DWORD dwSessionHandle, [in] ULONG lActionFlags, [in, optional] RM_WRITE_STATUS_CALLBACK fnStatus );",
            "name": "RmShutdown"
        },
        {
            "signature": "DWORD RmStartSession( [out] DWORD *pSessionHandle, DWORD dwSessionFlags, [out] WCHAR [] strSessionKey );",
            "name": "RmStartSession"
        }
    ],
    "Restrictederrorinfo.h": [],
    "Richedit.h": [
        {
            "signature": "AutoCorrectProc Autocorrectproc; int Autocorrectproc( LANGID langid, const WCHAR *pszBefore, WCHAR *pszAfter, LONG cchAfter, LONG *pcchReplaced ) {...}",
            "name": "AutoCorrectProc callback"
        },
        {
            "signature": "EDITSTREAMCALLBACK Editstreamcallback; DWORD Editstreamcallback( [in] DWORD_PTR dwCookie, [in] LPBYTE pbBuff, [in] LONG cb, [in] LONG *pcb ) {...}",
            "name": "EDITSTREAMCALLBACK callback"
        },
        {
            "signature": "EDITWORDBREAKPROCEX Editwordbreakprocex; LONG Editwordbreakprocex( [in] char *pchText, [in] LONG cchText, [in] BYTE bCharSet, INT action ) {...}",
            "name": "EDITWORDBREAKPROCEX callback"
        },
        {
            "signature": "void HyphenateProc( [in] WCHAR *pszWord, [in] LANGID langid, [in] long ichExceed, [out] HYPHRESULT *phyphresult );",
            "name": "HyphenateProc"
        }
    ],
    "Richole.h": [],
    "Roapi.h": [
        {
            "signature": "HRESULT GetActivationFactory( [in] HSTRING activatableClassId, [out] T **factory );",
            "name": "GetActivationFactory"
        },
        {
            "signature": "HRESULT Initialize( RO_INIT_TYPE initType );",
            "name": "Initialize"
        },
        {
            "signature": "HRESULT RoActivateInstance( [in] HSTRING activatableClassId, [out] IInspectable **instance );",
            "name": "RoActivateInstance"
        },
        {
            "signature": "HRESULT RoGetActivationFactory( [in] HSTRING activatableClassId, [in] REFIID iid, [out] void **factory );",
            "name": "RoGetActivationFactory"
        },
        {
            "signature": "HRESULT RoGetApartmentIdentifier( [out] UINT64 *apartmentIdentifier );",
            "name": "RoGetApartmentIdentifier"
        },
        {
            "signature": "HRESULT RoInitialize( [in] RO_INIT_TYPE initType );",
            "name": "RoInitialize"
        },
        {
            "signature": "HRESULT RoRegisterActivationFactories( [in] HSTRING *activatableClassIds, [in] PFNGETACTIVATIONFACTORY *activationFactoryCallbacks, [in] UINT32 count, [out] RO_REGISTRATION_COOKIE *cookie );",
            "name": "RoRegisterActivationFactories"
        },
        {
            "signature": "HRESULT RoRegisterForApartmentShutdown( [in] IApartmentShutdown *callbackObject, [out] UINT64 *apartmentIdentifier, [out] APARTMENT_SHUTDOWN_REGISTRATION_COOKIE *regCookie );",
            "name": "RoRegisterForApartmentShutdown"
        },
        {
            "signature": "void RoRevokeActivationFactories( [in] RO_REGISTRATION_COOKIE cookie );",
            "name": "RoRevokeActivationFactories"
        },
        {
            "signature": "void RoUninitialize();",
            "name": "RoUninitialize"
        },
        {
            "signature": "HRESULT RoUnregisterForApartmentShutdown( [in] APARTMENT_SHUTDOWN_REGISTRATION_COOKIE regCookie );",
            "name": "RoUnregisterForApartmentShutdown"
        }
    ],
    "Robuffer.h": [
        {
            "signature": "HRESULT RoGetBufferMarshaler( [out] IMarshal **bufferMarshaler );",
            "name": "RoGetBufferMarshaler"
        }
    ],
    "Roerrorapi.h": [
        {
            "signature": "HRESULT GetRestrictedErrorInfo( [out] IRestrictedErrorInfo **ppRestrictedErrorInfo );",
            "name": "GetRestrictedErrorInfo"
        },
        {
            "signature": "BOOL IsErrorPropagationEnabled();",
            "name": "IsErrorPropagationEnabled"
        },
        {
            "signature": "PINSPECT_MEMORY_CALLBACK PinspectMemoryCallback; HRESULT PinspectMemoryCallback( [in] void *context, [in] UINT_PTR readAddress, [in] UINT32 length, [out] BYTE *buffer ) {...}",
            "name": "PINSPECT_MEMORY_CALLBACK callback"
        },
        {
            "signature": "HRESULT RoCaptureErrorContext( HRESULT hr );",
            "name": "RoCaptureErrorContext"
        },
        {
            "signature": "void RoClearError();",
            "name": "RoClearError"
        },
        {
            "signature": "void RoFailFastWithErrorContext( [in] HRESULT hrError );",
            "name": "RoFailFastWithErrorContext"
        },
        {
            "signature": "HRESULT RoGetErrorReportingFlags( [out] UINT32 *pflags );",
            "name": "RoGetErrorReportingFlags"
        },
        {
            "signature": "HRESULT RoInspectCapturedStackBackTrace( [in] UINT_PTR targetErrorInfoAddress, USHORT machine, PINSPECT_MEMORY_CALLBACK readMemoryCallback, [in, optional] PVOID context, [out] UINT32 *frameCount, [out] UINT_PTR *targetBackTraceAddress );",
            "name": "RoInspectCapturedStackBackTrace"
        },
        {
            "signature": "HRESULT RoInspectThreadErrorInfo( [in] UINT_PTR targetTebAddress, USHORT machine, PINSPECT_MEMORY_CALLBACK readMemoryCallback, [in, optional] PVOID context, [out] UINT_PTR *targetErrorInfoAddress );",
            "name": "RoInspectThreadErrorInfo"
        },
        {
            "signature": "BOOL RoOriginateError( [in] HRESULT error, [in] HSTRING message );",
            "name": "RoOriginateError"
        },
        {
            "signature": "BOOL RoOriginateErrorW( [in] HRESULT error, [in] UINT cchMax, [in] PCWSTR message );",
            "name": "RoOriginateErrorW"
        },
        {
            "signature": "BOOL RoOriginateLanguageException( [in] HRESULT error, [in, optional] HSTRING message, [in] IUnknown *languageException );",
            "name": "RoOriginateLanguageException"
        },
        {
            "signature": "HRESULT RoReportFailedDelegate( [in] IUnknown *punkDelegate, [in] IRestrictedErrorInfo *pRestrictedErrorInfo );",
            "name": "RoReportFailedDelegate"
        },
        {
            "signature": "HRESULT RoReportUnhandledError( [in] IRestrictedErrorInfo *pRestrictedErrorInfo );",
            "name": "RoReportUnhandledError"
        },
        {
            "signature": "HRESULT RoResolveRestrictedErrorInfoReference( [in] PCWSTR reference, [out] IRestrictedErrorInfo **ppRestrictedErrorInfo );",
            "name": "RoResolveRestrictedErrorInfoReference"
        },
        {
            "signature": "HRESULT RoSetErrorReportingFlags( [in] UINT32 flags );",
            "name": "RoSetErrorReportingFlags"
        },
        {
            "signature": "BOOL RoTransformError( [in] HRESULT oldError, [in] HRESULT newError, [in] HSTRING message );",
            "name": "RoTransformError"
        },
        {
            "signature": "BOOL RoTransformErrorW( [in] HRESULT oldError, [in] HRESULT newError, [in] UINT cchMax, [in] PCWSTR message );",
            "name": "RoTransformErrorW"
        },
        {
            "signature": "HRESULT SetRestrictedErrorInfo( [in] IRestrictedErrorInfo *pRestrictedErrorInfo );",
            "name": "SetRestrictedErrorInfo"
        }
    ],
    "Rometadata.h": [
        {
            "signature": "HRESULT MetaDataGetDispenser( [in] REFCLSID rclsid, [in] REFIID riid, [out] LPVOID *ppv );",
            "name": "MetaDataGetDispenser"
        }
    ],
    "Rometadataapi.h": [],
    "Rometadataresolution.h": [
        {
            "signature": "HRESULT RoGetMetaDataFile( [in] const HSTRING name, [in, optional] IMetaDataDispenserEx *metaDataDispenser, [out, optional] HSTRING *metaDataFilePath, [out, optional] IMetaDataImport2 **metaDataImport, [out, optional] mdTypeDef *typeDefToken );",
            "name": "RoGetMetaDataFile"
        },
        {
            "signature": "HRESULT RoIsApiContractMajorVersionPresent( PCWSTR name, UINT16 majorVersion, BOOL *present );",
            "name": "RoIsApiContractMajorVersionPresent"
        },
        {
            "signature": "HRESULT RoIsApiContractPresent( PCWSTR name, UINT16 majorVersion, UINT16 minorVersion, BOOL *present );",
            "name": "RoIsApiContractPresent"
        },
        {
            "signature": "HRESULT RoParseTypeName( [in] HSTRING typeName, [out] DWORD *partsCount, HSTRING **typeNameParts );",
            "name": "RoParseTypeName"
        },
        {
            "signature": "HRESULT RoResolveNamespace( [in, optional] const HSTRING name, [in, optional] const HSTRING windowsMetaDataDir, [in] const DWORD packageGraphDirsCount, [in, optional] const HSTRING *packageGraphDirs, [out, optional] DWORD *metaDataFilePathsCount, [out, optional] HSTRING **metaDataFilePaths, [out, optional] DWORD *subNamespacesCount, [out, optional] HSTRING **subNamespaces );",
            "name": "RoResolveNamespace"
        }
    ],
    "Roparameterizediid.h": [
        {
            "signature": "void RoFreeParameterizedTypeExtra( [in] ROPARAMIIDHANDLE extra );",
            "name": "RoFreeParameterizedTypeExtra"
        },
        {
            "signature": "HRESULT RoGetParameterizedTypeInstanceIID( UINT32 nameElementCount, [in] PCWSTR *nameElements, [in] const IRoMetaDataLocator & metaDataLocator, [out] GUID *iid, [out, optional] ROPARAMIIDHANDLE *pExtra );",
            "name": "RoGetParameterizedTypeInstanceIID"
        },
        {
            "signature": "PCSTR RoParameterizedTypeExtraGetTypeSignature( [in] ROPARAMIIDHANDLE extra );",
            "name": "RoParameterizedTypeExtraGetTypeSignature"
        }
    ],
    "Roregistrationapi.h": [
        {
            "signature": "HRESULT RoGetActivatableClassRegistration( [in] HSTRING activatableClassId, [out] PActivatableClassRegistration *activatableClassRegistration );",
            "name": "RoGetActivatableClassRegistration"
        },
        {
            "signature": "HRESULT RoGetServerActivatableClasses( [in] HSTRING serverName, [out] HSTRING **activatableClassIds, [out] DWORD *count );",
            "name": "RoGetServerActivatableClasses"
        }
    ],
    "Routprot.h": [
        {
            "signature": "PADD_INTERFACE PaddInterface; DWORD PaddInterface( [in] LPWSTR InterfaceName, [in] ULONG InterfaceIndex, [in] NET_INTERFACE_TYPE InterfaceType, [in] DWORD MediaType, [in] WORD AccessType, [in] WORD ConnectionType, [in] PVOID InterfaceInfo, [in] ULONG StructureVersion, [in] ULONG StructureSize, [in] ULONG StructureCount ) {...}",
            "name": "PADD_INTERFACE callback"
        },
        {
            "signature": "PCONNECT_CLIENT PconnectClient; DWORD PconnectClient( [in] ULONG InterfaceIndex, [in] PVOID ClientAddress ) {...}",
            "name": "PCONNECT_CLIENT callback"
        },
        {
            "signature": "PDELETE_INTERFACE PdeleteInterface; DWORD PdeleteInterface( [in] ULONG InterfaceIndex ) {...}",
            "name": "PDELETE_INTERFACE callback"
        },
        {
            "signature": "PDISCONNECT_CLIENT PdisconnectClient; DWORD PdisconnectClient( [in] ULONG InterfaceIndex, [in] PVOID ClientAddress ) {...}",
            "name": "PDISCONNECT_CLIENT callback"
        },
        {
            "signature": "PDO_UPDATE_ROUTES PdoUpdateRoutes; DWORD PdoUpdateRoutes( [in] ULONG InterfaceIndex ) {...}",
            "name": "PDO_UPDATE_ROUTES callback"
        },
        {
            "signature": "PGET_EVENT_MESSAGE PgetEventMessage; DWORD PgetEventMessage( [out] ROUTING_PROTOCOL_EVENTS *Event, [out] MESSAGE *Result ) {...}",
            "name": "PGET_EVENT_MESSAGE callback"
        },
        {
            "signature": "PGET_GLOBAL_INFO PgetGlobalInfo; DWORD PgetGlobalInfo( [in] PVOID GlobalInfo, PULONG BufferSize, PULONG StructureVersion, PULONG StructureSize, PULONG StructureCount ) {...}",
            "name": "PGET_GLOBAL_INFO callback"
        },
        {
            "signature": "PGET_INTERFACE_INFO PgetInterfaceInfo; DWORD PgetInterfaceInfo( [in] ULONG InterfaceIndex, [in] PVOID InterfaceInfo, [in, out] PULONG BufferSize, [in] PULONG StructureVersion, [in] PULONG StructureSize, [in] PULONG StructureCount ) {...}",
            "name": "PGET_INTERFACE_INFO callback"
        },
        {
            "signature": "PGET_MFE_STATUS PgetMfeStatus; DWORD PgetMfeStatus( [in] DWORD InterfaceIndex, [in] DWORD GroupAddress, [in] DWORD SourceAddress, [out] PBYTE StatusCode ) {...}",
            "name": "PGET_MFE_STATUS callback"
        },
        {
            "signature": "PGET_NEIGHBORS PgetNeighbors; DWORD PgetNeighbors( [in] DWORD InterfaceIndex, [in] PDWORD NeighborList, [in, out] PDWORD NeighborListSize, [out] PBYTE InterfaceFlags ) {...}",
            "name": "PGET_NEIGHBORS callback"
        },
        {
            "signature": "PINTERFACE_STATUS PinterfaceStatus; DWORD PinterfaceStatus( [in] ULONG InterfaceIndex, [in] BOOL InterfaceActive, [in] DWORD StatusType, [in] PVOID StatusInfo ) {...}",
            "name": "PINTERFACE_STATUS callback"
        },
        {
            "signature": "PMIB_CREATE PmibCreate; DWORD PmibCreate( [in] ULONG InputDataSize, [in] PVOID InputData ) {...}",
            "name": "PMIB_CREATE callback"
        },
        {
            "signature": "PMIB_DELETE PmibDelete; DWORD PmibDelete( [in] ULONG InputDataSize, [in] PVOID InputData ) {...}",
            "name": "PMIB_DELETE callback"
        },
        {
            "signature": "PMIB_GET PmibGet; DWORD PmibGet( [in] ULONG InputDataSize, [in] PVOID InputData, [out] PULONG OutputDataSize, [out] PVOID OutputData ) {...}",
            "name": "PMIB_GET callback"
        },
        {
            "signature": "PMIB_GET_FIRST PmibGetFirst; DWORD PmibGetFirst( [in] ULONG InputDataSize, [in] PVOID InputData, [out] PULONG OutputDataSize, [out] PVOID OutputData ) {...}",
            "name": "PMIB_GET_FIRST callback"
        },
        {
            "signature": "PMIB_GET_NEXT PmibGetNext; DWORD PmibGetNext( [in] ULONG InputDataSize, [in] PVOID InputData, [out] PULONG OutputDataSize, [out] PVOID OutputData ) {...}",
            "name": "PMIB_GET_NEXT callback"
        },
        {
            "signature": "PMIB_GET_TRAP_INFO PmibGetTrapInfo; DWORD PmibGetTrapInfo( [in] ULONG InputDataSize, [in] PVOID InputData, [out] PULONG OutputDataSize, [out] PVOID OutputData ) {...}",
            "name": "PMIB_GET_TRAP_INFO callback"
        },
        {
            "signature": "PMIB_SET PmibSet; DWORD PmibSet( [in] ULONG InputDataSize, [in] PVOID InputData ) {...}",
            "name": "PMIB_SET callback"
        },
        {
            "signature": "PMIB_SET_TRAP_INFO PmibSetTrapInfo; DWORD PmibSetTrapInfo( [in] HANDLE Event, [in] ULONG InputDataSize, [in] PVOID InputData, [out] PULONG OutputDataSize, [out] PVOID OutputData ) {...}",
            "name": "PMIB_SET_TRAP_INFO callback"
        },
        {
            "signature": "PQUERY_POWER PqueryPower; DWORD PqueryPower( [in] DWORD PowerType ) {...}",
            "name": "PQUERY_POWER callback"
        },
        {
            "signature": "PREGISTER_PROTOCOL PregisterProtocol; DWORD PregisterProtocol( [in, out] PMPR_ROUTING_CHARACTERISTICS pRoutingChar, [in, out] PMPR_SERVICE_CHARACTERISTICS pServiceChar ) {...}",
            "name": "PREGISTER_PROTOCOL callback"
        },
        {
            "signature": "PSET_GLOBAL_INFO PsetGlobalInfo; DWORD PsetGlobalInfo( [in] PVOID GlobalInfo, ULONG StructureVersion, ULONG StructureSize, ULONG StructureCount ) {...}",
            "name": "PSET_GLOBAL_INFO callback"
        },
        {
            "signature": "PSET_INTERFACE_INFO PsetInterfaceInfo; DWORD PsetInterfaceInfo( [in] ULONG InterfaceIndex, [in] PVOID InterfaceInfo, [in] ULONG StructureVersion, [in] ULONG StructureSize, [in] ULONG StructureCount ) {...}",
            "name": "PSET_INTERFACE_INFO callback"
        },
        {
            "signature": "PSET_POWER PsetPower; DWORD PsetPower( [in] DWORD PowerType ) {...}",
            "name": "PSET_POWER callback"
        },
        {
            "signature": "PSTART_COMPLETE PstartComplete; DWORD PstartComplete() {...}",
            "name": "PSTART_COMPLETE callback"
        },
        {
            "signature": "PSTART_PROTOCOL PstartProtocol; DWORD PstartProtocol( [in] HANDLE NotificationEvent, [in] PSUPPORT_FUNCTIONS SupportFunctions, [in] LPVOID GlobalInfo, [in] ULONG StructureVersion, [in] ULONG StructureSize, [in] ULONG StructureCount ) {...}",
            "name": "PSTART_PROTOCOL callback"
        },
        {
            "signature": "PSTOP_PROTOCOL PstopProtocol; DWORD PstopProtocol() {...}",
            "name": "PSTOP_PROTOCOL callback"
        }
    ],
    "Rpc.h": [],
    "Rpcasync.h": [
        {
            "signature": "int I_RpcExceptionFilter( unsigned long ExceptionCode );",
            "name": "I_RpcExceptionFilter"
        },
        {
            "signature": "RPC_STATUS RpcAsyncAbortCall( PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode );",
            "name": "RpcAsyncAbortCall"
        },
        {
            "signature": "RPC_STATUS RpcAsyncCancelCall( PRPC_ASYNC_STATE pAsync, BOOL fAbort );",
            "name": "RpcAsyncCancelCall"
        },
        {
            "signature": "RPC_STATUS RpcAsyncCompleteCall( PRPC_ASYNC_STATE pAsync, void *Reply );",
            "name": "RpcAsyncCompleteCall"
        },
        {
            "signature": "RPC_STATUS RpcAsyncGetCallStatus( PRPC_ASYNC_STATE pAsync );",
            "name": "RpcAsyncGetCallStatus"
        },
        {
            "signature": "RPC_STATUS RpcAsyncInitializeHandle( PRPC_ASYNC_STATE pAsync, unsigned int Size );",
            "name": "RpcAsyncInitializeHandle"
        },
        {
            "signature": "RPC_STATUS RpcAsyncRegisterInfo( PRPC_ASYNC_STATE pAsync );",
            "name": "RpcAsyncRegisterInfo"
        },
        {
            "signature": "RPC_STATUS RpcBindingBind( [in, optional] PRPC_ASYNC_STATE pAsync, [in] RPC_BINDING_HANDLE Binding, [in] RPC_IF_HANDLE IfSpec );",
            "name": "RpcBindingBind"
        },
        {
            "signature": "RPC_STATUS RpcBindingUnbind( [in] RPC_BINDING_HANDLE Binding );",
            "name": "RpcBindingUnbind"
        },
        {
            "signature": "RPC_STATUS RpcErrorAddRecord( [in] RPC_EXTENDED_ERROR_INFO *ErrorInfo );",
            "name": "RpcErrorAddRecord"
        },
        {
            "signature": "void RpcErrorClearInformation();",
            "name": "RpcErrorClearInformation"
        },
        {
            "signature": "RPC_STATUS RpcErrorEndEnumeration( RPC_ERROR_ENUM_HANDLE *EnumHandle );",
            "name": "RpcErrorEndEnumeration"
        },
        {
            "signature": "RPC_STATUS RpcErrorGetNextRecord( [in] RPC_ERROR_ENUM_HANDLE *EnumHandle, [in] BOOL CopyStrings, [out] RPC_EXTENDED_ERROR_INFO *ErrorInfo );",
            "name": "RpcErrorGetNextRecord"
        },
        {
            "signature": "RPC_STATUS RpcErrorGetNumberOfRecords( [in] RPC_ERROR_ENUM_HANDLE *EnumHandle, [out] int *Records );",
            "name": "RpcErrorGetNumberOfRecords"
        },
        {
            "signature": "RPC_STATUS RpcErrorLoadErrorInfo( [in] PVOID ErrorBlob, [in] size_t BlobSize, [out] RPC_ERROR_ENUM_HANDLE *EnumHandle );",
            "name": "RpcErrorLoadErrorInfo"
        },
        {
            "signature": "RPC_STATUS RpcErrorResetEnumeration( RPC_ERROR_ENUM_HANDLE *EnumHandle );",
            "name": "RpcErrorResetEnumeration"
        },
        {
            "signature": "RPC_STATUS RpcErrorSaveErrorInfo( [in] RPC_ERROR_ENUM_HANDLE *EnumHandle, [out] PVOID *ErrorBlob, [out] size_t *BlobSize );",
            "name": "RpcErrorSaveErrorInfo"
        },
        {
            "signature": "RPC_STATUS RpcErrorStartEnumeration( RPC_ERROR_ENUM_HANDLE *EnumHandle );",
            "name": "RpcErrorStartEnumeration"
        },
        {
            "signature": "RPC_STATUS RpcFreeAuthorizationContext( [in] PVOID *pAuthzClientContext );",
            "name": "RpcFreeAuthorizationContext"
        },
        {
            "signature": "RPC_STATUS RpcGetAuthorizationContextForClient( [in, optional] RPC_BINDING_HANDLE ClientBinding, [in] BOOL ImpersonateOnReturn, [in] PVOID Reserved1, [in, optional] PLARGE_INTEGER pExpirationTime, [in] LUID Reserved2, [in] DWORD Reserved3, [in] PVOID Reserved4, [out] PVOID *pAuthzClientContext );",
            "name": "RpcGetAuthorizationContextForClient"
        },
        {
            "signature": "RPCNOTIFICATION_ROUTINE RpcnotificationRoutine; void RpcnotificationRoutine( _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event ) {...}",
            "name": "RPCNOTIFICATION_ROUTINE callback"
        },
        {
            "signature": "RPC_STATUS RpcServerInqCallAttributesA( [in] RPC_BINDING_HANDLE ClientBinding, [in, out] void *RpcCallAttributes );",
            "name": "RpcServerInqCallAttributesA"
        },
        {
            "signature": "RPC_STATUS RpcServerInqCallAttributesW( [in] RPC_BINDING_HANDLE ClientBinding, [in, out] void *RpcCallAttributes );",
            "name": "RpcServerInqCallAttributesW"
        },
        {
            "signature": "RPC_STATUS RpcServerSubscribeForNotification( [in] RPC_BINDING_HANDLE Binding, [in] RPC_NOTIFICATIONS Notification, [in] RPC_NOTIFICATION_TYPES NotificationType, [in] RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo );",
            "name": "RpcServerSubscribeForNotification"
        },
        {
            "signature": "RPC_STATUS RpcServerUnsubscribeForNotification( [in] RPC_BINDING_HANDLE Binding, [in] RPC_NOTIFICATIONS Notification, [out] unsigned long *NotificationsQueued );",
            "name": "RpcServerUnsubscribeForNotification"
        },
        {
            "signature": "RPC_STATUS RpcSsContextLockExclusive( [in] RPC_BINDING_HANDLE ServerBindingHandle, [in] PVOID UserContext );",
            "name": "RpcSsContextLockExclusive"
        },
        {
            "signature": "RPC_STATUS RpcSsContextLockShared( [in] RPC_BINDING_HANDLE ServerBindingHandle, [in] PVOID UserContext );",
            "name": "RpcSsContextLockShared"
        }
    ],
    "Rpcdce.h": [
        {
            "signature": "RPC_STATUS DceErrorInqText( RPC_STATUS RpcStatus, RPC_CSTR ErrorText );",
            "name": "DceErrorInqText"
        },
        {
            "signature": "RPC_STATUS DceErrorInqTextA( RPC_STATUS RpcStatus, RPC_CSTR ErrorText );",
            "name": "DceErrorInqTextA"
        },
        {
            "signature": "RPC_STATUS DceErrorInqTextW( RPC_STATUS RpcStatus, RPC_WSTR ErrorText );",
            "name": "DceErrorInqTextW"
        },
        {
            "signature": "RPC_AUTH_KEY_RETRIEVAL_FN RpcAuthKeyRetrievalFn; void RpcAuthKeyRetrievalFn( void *Arg, RPC_WSTR ServerPrincName, unsigned long KeyVer, void **Key, RPC_STATUS *Status ) {...}",
            "name": "RPC_AUTH_KEY_RETRIEVAL_FN callback"
        },
        {
            "signature": "RPC_IF_CALLBACK_FN RpcIfCallbackFn; RPC_STATUS RpcIfCallbackFn( RPC_IF_HANDLE InterfaceUuid, [in] void *Context ) {...}",
            "name": "RPC_IF_CALLBACK_FN callback"
        },
        {
            "signature": "RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN RpcInterfaceGroupIdleCallbackFn; void RpcInterfaceGroupIdleCallbackFn( [in] RPC_INTERFACE_GROUP IfGroup, [in] void *IdleCallbackContext, [in] unsigned long IsGroupIdle ) {...}",
            "name": "RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN callback"
        },
        {
            "signature": "RPC_MGMT_AUTHORIZATION_FN RpcMgmtAuthorizationFn; int RpcMgmtAuthorizationFn( RPC_BINDING_HANDLE ClientBinding, unsigned long RequestedMgmtOperation, RPC_STATUS *Status ) {...}",
            "name": "RPC_MGMT_AUTHORIZATION_FN callback"
        },
        {
            "signature": "RPC_OBJECT_INQ_FN RpcObjectInqFn; void RpcObjectInqFn( UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status ) {...}",
            "name": "RPC_OBJECT_INQ_FN callback"
        },
        {
            "signature": "RPC_STATUS RpcBindingCopy( RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding );",
            "name": "RpcBindingCopy"
        },
        {
            "signature": "RPC_STATUS RpcBindingCreateA( [in] RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, [in, optional] RPC_BINDING_HANDLE_SECURITY_V1_A *Security, [in, optional] RPC_BINDING_HANDLE_OPTIONS_V1 *Options, [out] RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingCreateA"
        },
        {
            "signature": "RPC_STATUS RpcBindingCreateW( [in] RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, [in, optional] RPC_BINDING_HANDLE_SECURITY_V1_W *Security, [in, optional] RPC_BINDING_HANDLE_OPTIONS_V1 *Options, [out] RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingCreateW"
        },
        {
            "signature": "RPC_STATUS RpcBindingFree( RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingFree"
        },
        {
            "signature": "RPC_STATUS RpcBindingFromStringBinding( RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingFromStringBinding"
        },
        {
            "signature": "RPC_STATUS RpcBindingFromStringBindingA( RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingFromStringBindingA"
        },
        {
            "signature": "RPC_STATUS RpcBindingFromStringBindingW( RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding );",
            "name": "RpcBindingFromStringBindingW"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClient( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthClient"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClientA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthClientA"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClientEx( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags );",
            "name": "RpcBindingInqAuthClientEx"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClientExA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags );",
            "name": "RpcBindingInqAuthClientExA"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClientExW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags );",
            "name": "RpcBindingInqAuthClientExW"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthClientW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthClientW"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthInfo( RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthInfo"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthInfoA"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );",
            "name": "RpcBindingInqAuthInfoExA"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );",
            "name": "RpcBindingInqAuthInfoExW"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc );",
            "name": "RpcBindingInqAuthInfoW"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqObject( RPC_BINDING_HANDLE Binding, UUID *ObjectUuid );",
            "name": "RpcBindingInqObject"
        },
        {
            "signature": "RPC_STATUS RpcBindingInqOption( RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue );",
            "name": "RpcBindingInqOption"
        },
        {
            "signature": "RPC_STATUS RpcBindingReset( RPC_BINDING_HANDLE Binding );",
            "name": "RpcBindingReset"
        },
        {
            "signature": "RPC_STATUS RpcBindingServerFromClient( RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding );",
            "name": "RpcBindingServerFromClient"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetAuthInfo( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc );",
            "name": "RpcBindingSetAuthInfo"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc );",
            "name": "RpcBindingSetAuthInfoA"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos );",
            "name": "RpcBindingSetAuthInfoExA"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS );",
            "name": "RpcBindingSetAuthInfoExW"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc );",
            "name": "RpcBindingSetAuthInfoW"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetObject( RPC_BINDING_HANDLE Binding, UUID *ObjectUuid );",
            "name": "RpcBindingSetObject"
        },
        {
            "signature": "RPC_STATUS RpcBindingSetOption( RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue );",
            "name": "RpcBindingSetOption"
        },
        {
            "signature": "RPC_STATUS RpcBindingToStringBinding( RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding );",
            "name": "RpcBindingToStringBinding"
        },
        {
            "signature": "RPC_STATUS RpcBindingToStringBindingA( RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding );",
            "name": "RpcBindingToStringBindingA"
        },
        {
            "signature": "RPC_STATUS RpcBindingToStringBindingW( RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding );",
            "name": "RpcBindingToStringBindingW"
        },
        {
            "signature": "RPC_STATUS RpcBindingVectorFree( RPC_BINDING_VECTOR **BindingVector );",
            "name": "RpcBindingVectorFree"
        },
        {
            "signature": "RPC_STATUS RpcCancelThread( void *Thread );",
            "name": "RpcCancelThread"
        },
        {
            "signature": "RPC_STATUS RpcCancelThreadEx( void *Thread, long Timeout );",
            "name": "RpcCancelThreadEx"
        },
        {
            "signature": "RPC_STATUS RpcEpRegister( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation );",
            "name": "RpcEpRegister"
        },
        {
            "signature": "RPC_STATUS RpcEpRegisterA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation );",
            "name": "RpcEpRegisterA"
        },
        {
            "signature": "RPC_STATUS RpcEpRegisterNoReplace( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation );",
            "name": "RpcEpRegisterNoReplace"
        },
        {
            "signature": "RPC_STATUS RpcEpRegisterNoReplaceA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation );",
            "name": "RpcEpRegisterNoReplaceA"
        },
        {
            "signature": "RPC_STATUS RpcEpRegisterNoReplaceW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation );",
            "name": "RpcEpRegisterNoReplaceW"
        },
        {
            "signature": "RPC_STATUS RpcEpRegisterW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation );",
            "name": "RpcEpRegisterW"
        },
        {
            "signature": "RPC_STATUS RpcEpResolveBinding( RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec );",
            "name": "RpcEpResolveBinding"
        },
        {
            "signature": "RPC_STATUS RpcEpUnregister( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector );",
            "name": "RpcEpUnregister"
        },
        {
            "signature": "int RpcExceptionFilter( [in] unsigned long ExceptionCode );",
            "name": "RpcExceptionFilter"
        },
        {
            "signature": "RPC_STATUS RpcIfIdVectorFree( RPC_IF_ID_VECTOR **IfIdVector );",
            "name": "RpcIfIdVectorFree"
        },
        {
            "signature": "RPC_STATUS RpcIfInqId( RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId );",
            "name": "RpcIfInqId"
        },
        {
            "signature": "RPC_STATUS RpcImpersonateClient( RPC_BINDING_HANDLE BindingHandle );",
            "name": "RpcImpersonateClient"
        },
        {
            "signature": "RPC_STATUS RpcImpersonateClientContainer( [in, optional] RPC_BINDING_HANDLE BindingHandle );",
            "name": "RpcImpersonateClientContainer"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEnableIdleCleanup();",
            "name": "RpcMgmtEnableIdleCleanup"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpEltInqBegin( RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext );",
            "name": "RpcMgmtEpEltInqBegin"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpEltInqDone( RPC_EP_INQ_HANDLE *InquiryContext );",
            "name": "RpcMgmtEpEltInqDone"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpEltInqNext( RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, RPC_CSTR *Annotation );",
            "name": "RpcMgmtEpEltInqNext"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpEltInqNextA( RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation );",
            "name": "RpcMgmtEpEltInqNextA"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpEltInqNextW( RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation );",
            "name": "RpcMgmtEpEltInqNextW"
        },
        {
            "signature": "RPC_STATUS RpcMgmtEpUnregister( RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid );",
            "name": "RpcMgmtEpUnregister"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqComTimeout( RPC_BINDING_HANDLE Binding, unsigned int *Timeout );",
            "name": "RpcMgmtInqComTimeout"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqDefaultProtectLevel( unsigned long AuthnSvc, unsigned long *AuthnLevel );",
            "name": "RpcMgmtInqDefaultProtectLevel"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqIfIds( RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector );",
            "name": "RpcMgmtInqIfIds"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqServerPrincName( RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName );",
            "name": "RpcMgmtInqServerPrincName"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqServerPrincNameA( RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName );",
            "name": "RpcMgmtInqServerPrincNameA"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqServerPrincNameW( RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName );",
            "name": "RpcMgmtInqServerPrincNameW"
        },
        {
            "signature": "RPC_STATUS RpcMgmtInqStats( RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics );",
            "name": "RpcMgmtInqStats"
        },
        {
            "signature": "RPC_STATUS RpcMgmtIsServerListening( RPC_BINDING_HANDLE Binding );",
            "name": "RpcMgmtIsServerListening"
        },
        {
            "signature": "RPC_STATUS RpcMgmtSetAuthorizationFn( RPC_MGMT_AUTHORIZATION_FN AuthorizationFn );",
            "name": "RpcMgmtSetAuthorizationFn"
        },
        {
            "signature": "RPC_STATUS RpcMgmtSetCancelTimeout( long Timeout );",
            "name": "RpcMgmtSetCancelTimeout"
        },
        {
            "signature": "RPC_STATUS RpcMgmtSetComTimeout( RPC_BINDING_HANDLE Binding, unsigned int Timeout );",
            "name": "RpcMgmtSetComTimeout"
        },
        {
            "signature": "RPC_STATUS RpcMgmtSetServerStackSize( unsigned long ThreadStackSize );",
            "name": "RpcMgmtSetServerStackSize"
        },
        {
            "signature": "RPC_STATUS RpcMgmtStatsVectorFree( RPC_STATS_VECTOR **StatsVector );",
            "name": "RpcMgmtStatsVectorFree"
        },
        {
            "signature": "RPC_STATUS RpcMgmtStopServerListening( RPC_BINDING_HANDLE Binding );",
            "name": "RpcMgmtStopServerListening"
        },
        {
            "signature": "RPC_STATUS RpcMgmtWaitServerListen();",
            "name": "RpcMgmtWaitServerListen"
        },
        {
            "signature": "RPC_STATUS RpcNetworkInqProtseqs( RPC_PROTSEQ_VECTOR **ProtseqVector );",
            "name": "RpcNetworkInqProtseqs"
        },
        {
            "signature": "RPC_STATUS RpcNetworkInqProtseqsA( RPC_PROTSEQ_VECTORA **ProtseqVector );",
            "name": "RpcNetworkInqProtseqsA"
        },
        {
            "signature": "RPC_STATUS RpcNetworkInqProtseqsW( RPC_PROTSEQ_VECTORW **ProtseqVector );",
            "name": "RpcNetworkInqProtseqsW"
        },
        {
            "signature": "RPC_STATUS RpcNetworkIsProtseqValid( RPC_CSTR Protseq );",
            "name": "RpcNetworkIsProtseqValid"
        },
        {
            "signature": "RPC_STATUS RpcNetworkIsProtseqValidA( RPC_CSTR Protseq );",
            "name": "RpcNetworkIsProtseqValidA"
        },
        {
            "signature": "RPC_STATUS RpcNetworkIsProtseqValidW( RPC_WSTR Protseq );",
            "name": "RpcNetworkIsProtseqValidW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingInqEntryName( RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName );",
            "name": "RpcNsBindingInqEntryName"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingInqEntryNameA( RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName );",
            "name": "RpcNsBindingInqEntryNameA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingInqEntryNameW( RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName );",
            "name": "RpcNsBindingInqEntryNameW"
        },
        {
            "signature": "RPC_STATUS RpcObjectInqType( UUID *ObjUuid, UUID *TypeUuid );",
            "name": "RpcObjectInqType"
        },
        {
            "signature": "RPC_STATUS RpcObjectSetInqFn( RPC_OBJECT_INQ_FN *InquiryFn );",
            "name": "RpcObjectSetInqFn"
        },
        {
            "signature": "RPC_STATUS RpcObjectSetType( UUID *ObjUuid, UUID *TypeUuid );",
            "name": "RpcObjectSetType"
        },
        {
            "signature": "RPC_STATUS RpcProtseqVectorFree( RPC_PROTSEQ_VECTOR **ProtseqVector );",
            "name": "RpcProtseqVectorFree"
        },
        {
            "signature": "RPC_STATUS RpcProtseqVectorFreeA( RPC_PROTSEQ_VECTORA **ProtseqVector );",
            "name": "RpcProtseqVectorFreeA"
        },
        {
            "signature": "RPC_STATUS RpcProtseqVectorFreeW( RPC_PROTSEQ_VECTORW **ProtseqVector );",
            "name": "RpcProtseqVectorFreeW"
        },
        {
            "signature": "void RpcRaiseException( RPC_STATUS exception );",
            "name": "RpcRaiseException"
        },
        {
            "signature": "RPC_STATUS RpcRevertContainerImpersonation();",
            "name": "RpcRevertContainerImpersonation"
        },
        {
            "signature": "RPC_STATUS RpcRevertToSelf();",
            "name": "RpcRevertToSelf"
        },
        {
            "signature": "RPC_STATUS RpcRevertToSelfEx( RPC_BINDING_HANDLE BindingHandle );",
            "name": "RpcRevertToSelfEx"
        },
        {
            "signature": "RPC_STATUS RpcServerCompleteSecurityCallback( [in] RPC_BINDING_HANDLE BindingHandle, [in] RPC_STATUS Status );",
            "name": "RpcServerCompleteSecurityCallback"
        },
        {
            "signature": "RPC_STATUS RpcServerInqBindingHandle( RPC_BINDING_HANDLE *Binding );",
            "name": "RpcServerInqBindingHandle"
        },
        {
            "signature": "RPC_STATUS RpcServerInqBindings( RPC_BINDING_VECTOR **BindingVector );",
            "name": "RpcServerInqBindings"
        },
        {
            "signature": "RPC_STATUS RpcServerInqDefaultPrincName( unsigned long AuthnSvc, RPC_WSTR *PrincName );",
            "name": "RpcServerInqDefaultPrincName"
        },
        {
            "signature": "RPC_STATUS RpcServerInqDefaultPrincNameA( unsigned long AuthnSvc, RPC_CSTR *PrincName );",
            "name": "RpcServerInqDefaultPrincNameA"
        },
        {
            "signature": "RPC_STATUS RpcServerInqDefaultPrincNameW( unsigned long AuthnSvc, RPC_WSTR *PrincName );",
            "name": "RpcServerInqDefaultPrincNameW"
        },
        {
            "signature": "RPC_STATUS RpcServerInqIf( RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV **MgrEpv );",
            "name": "RpcServerInqIf"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupActivate( [in] RPC_INTERFACE_GROUP IfGroup );",
            "name": "RpcServerInterfaceGroupActivate"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupClose( [in] RPC_INTERFACE_GROUP IfGroup );",
            "name": "RpcServerInterfaceGroupClose"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupCreate( [in] RPC_INTERFACE_TEMPLATE *Interfaces, [in] unsigned long NumIfs, [in] RPC_ENDPOINT_TEMPLATE *Endpoints, [in] unsigned long NumEndpoints, [in] unsigned long IdlePeriod, [in] RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, [in] void *IdleCallbackContext, [out] PRPC_INTERFACE_GROUP IfGroup );",
            "name": "RpcServerInterfaceGroupCreate"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupCreateA( [in] RPC_INTERFACE_TEMPLATEA *Interfaces, [in] unsigned long NumIfs, [in] RPC_ENDPOINT_TEMPLATEA *Endpoints, [in] unsigned long NumEndpoints, [in] unsigned long IdlePeriod, [in] RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, [in] void *IdleCallbackContext, [out] PRPC_INTERFACE_GROUP IfGroup );",
            "name": "RpcServerInterfaceGroupCreateA"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupCreateW( [in] RPC_INTERFACE_TEMPLATEW *Interfaces, [in] unsigned long NumIfs, [in] RPC_ENDPOINT_TEMPLATEW *Endpoints, [in] unsigned long NumEndpoints, [in] unsigned long IdlePeriod, [in] RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, [in] void *IdleCallbackContext, [out] PRPC_INTERFACE_GROUP IfGroup );",
            "name": "RpcServerInterfaceGroupCreateW"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupDeactivate( [in] RPC_INTERFACE_GROUP IfGroup, [in] unsigned long ForceDeactivation );",
            "name": "RpcServerInterfaceGroupDeactivate"
        },
        {
            "signature": "RPC_STATUS RpcServerInterfaceGroupInqBindings( [in] RPC_INTERFACE_GROUP IfGroup, [out] RPC_BINDING_VECTOR **BindingVector );",
            "name": "RpcServerInterfaceGroupInqBindings"
        },
        {
            "signature": "RPC_STATUS RpcServerListen( unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait );",
            "name": "RpcServerListen"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterAuthInfo( RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg );",
            "name": "RpcServerRegisterAuthInfo"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterAuthInfoA( RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg );",
            "name": "RpcServerRegisterAuthInfoA"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterAuthInfoW( RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg );",
            "name": "RpcServerRegisterAuthInfoW"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterIf( RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv );",
            "name": "RpcServerRegisterIf"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterIf2( RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn );",
            "name": "RpcServerRegisterIf2"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterIf3( [in] RPC_IF_HANDLE IfSpec, [in, optional] UUID *MgrTypeUuid, [in, optional] RPC_MGR_EPV *MgrEpv, [in] unsigned int Flags, [in] unsigned int MaxCalls, [in] unsigned int MaxRpcSize, [in, optional] RPC_IF_CALLBACK_FN *IfCallback, [in, optional] void *SecurityDescriptor );",
            "name": "RpcServerRegisterIf3"
        },
        {
            "signature": "RPC_STATUS RpcServerRegisterIfEx( RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback );",
            "name": "RpcServerRegisterIfEx"
        },
        {
            "signature": "RPC_STATUS RpcServerTestCancel( RPC_BINDING_HANDLE BindingHandle );",
            "name": "RpcServerTestCancel"
        },
        {
            "signature": "RPC_STATUS RpcServerUnregisterIf( RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete );",
            "name": "RpcServerUnregisterIf"
        },
        {
            "signature": "RPC_STATUS RpcServerUnregisterIfEx( [in] RPC_IF_HANDLE IfSpec, [in] UUID *MgrTypeUuid, [in] int RundownContextHandles );",
            "name": "RpcServerUnregisterIfEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseAllProtseqs( unsigned int MaxCalls, void *SecurityDescriptor );",
            "name": "RpcServerUseAllProtseqs"
        },
        {
            "signature": "RPC_STATUS RpcServerUseAllProtseqsEx( unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseAllProtseqsEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseAllProtseqsIf( unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor );",
            "name": "RpcServerUseAllProtseqsIf"
        },
        {
            "signature": "RPC_STATUS RpcServerUseAllProtseqsIfEx( unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseAllProtseqsIfEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseq( RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseq"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqA( RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEp( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqEp"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEpA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqEpA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEpEx( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqEpEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEpExA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqEpExA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEpExW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqEpExW"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEpW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqEpW"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqEx( RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqExA( RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqExA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqExW( RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqExW"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIf( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqIf"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIfA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqIfA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIfEx( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqIfEx"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIfExA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqIfExA"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIfExW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy );",
            "name": "RpcServerUseProtseqIfExW"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqIfW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqIfW"
        },
        {
            "signature": "RPC_STATUS RpcServerUseProtseqW( RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor );",
            "name": "RpcServerUseProtseqW"
        },
        {
            "signature": "void RpcSsDontSerializeContext();",
            "name": "RpcSsDontSerializeContext"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingCompose( RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding );",
            "name": "RpcStringBindingCompose"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingComposeA( RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding );",
            "name": "RpcStringBindingComposeA"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingComposeW( RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding );",
            "name": "RpcStringBindingComposeW"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingParse( RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions );",
            "name": "RpcStringBindingParse"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingParseA( RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions );",
            "name": "RpcStringBindingParseA"
        },
        {
            "signature": "RPC_STATUS RpcStringBindingParseW( RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions );",
            "name": "RpcStringBindingParseW"
        },
        {
            "signature": "RPC_STATUS RpcStringFree( RPC_CSTR *String );",
            "name": "RpcStringFree"
        },
        {
            "signature": "RPC_STATUS RpcStringFreeA( RPC_CSTR *String );",
            "name": "RpcStringFreeA"
        },
        {
            "signature": "RPC_STATUS RpcStringFreeW( RPC_WSTR *String );",
            "name": "RpcStringFreeW"
        },
        {
            "signature": "RPC_STATUS RpcTestCancel();",
            "name": "RpcTestCancel"
        },
        {
            "signature": "signed int UuidCompare( UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status );",
            "name": "UuidCompare"
        },
        {
            "signature": "RPC_STATUS UuidCreate( UUID *Uuid );",
            "name": "UuidCreate"
        },
        {
            "signature": "RPC_STATUS UuidCreateNil( UUID *NilUuid );",
            "name": "UuidCreateNil"
        },
        {
            "signature": "RPC_STATUS UuidCreateSequential( UUID *Uuid );",
            "name": "UuidCreateSequential"
        },
        {
            "signature": "int UuidEqual( UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status );",
            "name": "UuidEqual"
        },
        {
            "signature": "RPC_STATUS UuidFromString( RPC_CSTR StringUuid, UUID *Uuid );",
            "name": "UuidFromString"
        },
        {
            "signature": "RPC_STATUS UuidFromStringA( RPC_CSTR StringUuid, UUID *Uuid );",
            "name": "UuidFromStringA"
        },
        {
            "signature": "RPC_STATUS UuidFromStringW( RPC_WSTR StringUuid, UUID *Uuid );",
            "name": "UuidFromStringW"
        },
        {
            "signature": "unsigned short UuidHash( UUID *Uuid, RPC_STATUS *Status );",
            "name": "UuidHash"
        },
        {
            "signature": "int UuidIsNil( UUID *Uuid, RPC_STATUS *Status );",
            "name": "UuidIsNil"
        },
        {
            "signature": "RPC_STATUS UuidToString( [in] const UUID *Uuid, [out] RPC_CSTR *StringUuid );",
            "name": "UuidToString"
        },
        {
            "signature": "RPC_STATUS UuidToStringA( [in] const UUID *Uuid, [out] RPC_CSTR *StringUuid );",
            "name": "UuidToStringA"
        },
        {
            "signature": "RPC_STATUS UuidToStringW( [in] const UUID *Uuid, [out] RPC_WSTR *StringUuid );",
            "name": "UuidToStringW"
        }
    ],
    "Rpcdcep.h": [
        {
            "signature": "RPC_STATUS I_RpcBindingInqLocalClientPID( [in, optional] RPC_BINDING_HANDLE Binding, [out] unsigned long *Pid );",
            "name": "I_RpcBindingInqLocalClientPID"
        }
    ],
    "Rpcndr.h": [
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY Ndr64AsyncClientCall( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ... );",
            "name": "Ndr64AsyncClientCall"
        },
        {
            "signature": "void Ndr64AsyncServerCallAll( PRPC_MESSAGE pRpcMsg );",
            "name": "Ndr64AsyncServerCallAll"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrAsyncClientCall( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrAsyncClientCall"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrAsyncClientCall2( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrAsyncClientCall2"
        },
        {
            "signature": "void NdrAsyncServerCall( PRPC_MESSAGE pRpcMsg );",
            "name": "NdrAsyncServerCall"
        },
        {
            "signature": "void NdrClearOutParameters( [in] PMIDL_STUB_MESSAGE pStubMsg, [in] PFORMAT_STRING pFormat, [in, out] void *ArgAddr );",
            "name": "NdrClearOutParameters"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrClientCall"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall2( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrClientCall2"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall3( MIDL_STUBLESS_PROXY_INFO *pProxyInfo, unsigned long nProcNum, void *pReturnValue, ... );",
            "name": "NdrClientCall3"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrClientCall4( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrClientCall4"
        },
        {
            "signature": "void NdrComplexArrayBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrComplexArrayBufferSize"
        },
        {
            "signature": "unsigned char * NdrComplexArrayMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrComplexArrayMarshall"
        },
        {
            "signature": "unsigned char * NdrComplexArrayUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrComplexArrayUnmarshall"
        },
        {
            "signature": "void NdrComplexStructBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrComplexStructBufferSize"
        },
        {
            "signature": "unsigned char * NdrComplexStructMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrComplexStructMarshall"
        },
        {
            "signature": "unsigned char * NdrComplexStructUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrComplexStructUnmarshall"
        },
        {
            "signature": "void NdrConformantArrayBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrConformantArrayBufferSize"
        },
        {
            "signature": "unsigned char * NdrConformantArrayMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrConformantArrayMarshall"
        },
        {
            "signature": "unsigned char * NdrConformantArrayUnmarshall( [in] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrConformantArrayUnmarshall"
        },
        {
            "signature": "void NdrConformantStringBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrConformantStringBufferSize"
        },
        {
            "signature": "unsigned char * NdrConformantStringMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrConformantStringMarshall"
        },
        {
            "signature": "unsigned char * NdrConformantStringUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrConformantStringUnmarshall"
        },
        {
            "signature": "NDR_SCONTEXT NdrContextHandleInitialize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );",
            "name": "NdrContextHandleInitialize"
        },
        {
            "signature": "unsigned long NdrContextHandleMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );",
            "name": "NdrContextHandleMemorySize"
        },
        {
            "signature": "void NdrContextHandleSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pMemory, PFORMAT_STRING pFormat );",
            "name": "NdrContextHandleSize"
        },
        {
            "signature": "void NdrConvert( [in] PMIDL_STUB_MESSAGE pStubMsg, [in] PFORMAT_STRING pFormat );",
            "name": "NdrConvert"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrDcomAsyncClientCall( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrDcomAsyncClientCall"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrDcomAsyncClientCall2( [in] PMIDL_STUB_DESC pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrDcomAsyncClientCall2"
        },
        {
            "signature": "RPC_STATUS NdrGetUserMarshalInfo( unsigned long *pFlags, unsigned long InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo );",
            "name": "NdrGetUserMarshalInfo"
        },
        {
            "signature": "void NdrInterfacePointerBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrInterfacePointerBufferSize"
        },
        {
            "signature": "void NdrInterfacePointerFree( PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrInterfacePointerFree"
        },
        {
            "signature": "unsigned char * NdrInterfacePointerMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrInterfacePointerMarshall"
        },
        {
            "signature": "unsigned char * NdrInterfacePointerUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrInterfacePointerUnmarshall"
        },
        {
            "signature": "CLIENT_CALL_RETURN RPC_VAR_ENTRY NdrMesProcEncodeDecode4( handle_t Handle, [in] const MIDL_STUB_DESC *pStubDescriptor, [in] PFORMAT_STRING pFormat, ... );",
            "name": "NdrMesProcEncodeDecode4"
        },
        {
            "signature": "void * NdrOleAllocate( [in] size_t Size );",
            "name": "NdrOleAllocate"
        },
        {
            "signature": "void NdrOleFree( [in] void *NodeToFree );",
            "name": "NdrOleFree"
        },
        {
            "signature": "void NdrPointerBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrPointerBufferSize"
        },
        {
            "signature": "void NdrPointerFree( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrPointerFree"
        },
        {
            "signature": "unsigned char * NdrPointerMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrPointerMarshall"
        },
        {
            "signature": "unsigned char * NdrPointerUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrPointerUnmarshall"
        },
        {
            "signature": "void NdrServerCall2( PRPC_MESSAGE pRpcMsg );",
            "name": "NdrServerCall2"
        },
        {
            "signature": "void NdrServerCallAll( PRPC_MESSAGE pRpcMsg );",
            "name": "NdrServerCallAll"
        },
        {
            "signature": "void NdrSimpleStructBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrSimpleStructBufferSize"
        },
        {
            "signature": "unsigned char * NdrSimpleStructMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrSimpleStructMarshall"
        },
        {
            "signature": "unsigned char * NdrSimpleStructUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [out] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrSimpleStructUnmarshall"
        },
        {
            "signature": "void NdrSimpleTypeMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] unsigned char FormatChar );",
            "name": "NdrSimpleTypeMarshall"
        },
        {
            "signature": "void NdrSimpleTypeUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] unsigned char FormatChar );",
            "name": "NdrSimpleTypeUnmarshall"
        },
        {
            "signature": "long NdrStubCall2( [in] void *pThis, [in] void *pChannel, [in, out] PRPC_MESSAGE pRpcMsg, [out] unsigned long *pdwStubPhase );",
            "name": "NdrStubCall2"
        },
        {
            "signature": "long NdrStubCall3( void *pThis, void *pChannel, PRPC_MESSAGE pRpcMsg, unsigned long *pdwStubPhase );",
            "name": "NdrStubCall3"
        },
        {
            "signature": "void NdrUserMarshalBufferSize( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrUserMarshalBufferSize"
        },
        {
            "signature": "void NdrUserMarshalFree( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrUserMarshalFree"
        },
        {
            "signature": "unsigned char * NdrUserMarshalMarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char *pMemory, [in] PFORMAT_STRING pFormat );",
            "name": "NdrUserMarshalMarshall"
        },
        {
            "signature": "unsigned char * NdrUserMarshalUnmarshall( [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] unsigned char **ppMemory, [in] PFORMAT_STRING pFormat, [in] unsigned char fMustAlloc );",
            "name": "NdrUserMarshalUnmarshall"
        },
        {
            "signature": "void * RpcSmAllocate( size_t Size, RPC_STATUS *pStatus );",
            "name": "RpcSmAllocate"
        },
        {
            "signature": "RPC_STATUS RpcSmClientFree( void *pNodeToFree );",
            "name": "RpcSmClientFree"
        },
        {
            "signature": "RPC_STATUS RpcSmDestroyClientContext( void **ContextHandle );",
            "name": "RpcSmDestroyClientContext"
        },
        {
            "signature": "RPC_STATUS RpcSmDisableAllocate();",
            "name": "RpcSmDisableAllocate"
        },
        {
            "signature": "RPC_STATUS RpcSmEnableAllocate();",
            "name": "RpcSmEnableAllocate"
        },
        {
            "signature": "RPC_STATUS RpcSmFree( void *NodeToFree );",
            "name": "RpcSmFree"
        },
        {
            "signature": "RPC_SS_THREAD_HANDLE RpcSmGetThreadHandle( RPC_STATUS *pStatus );",
            "name": "RpcSmGetThreadHandle"
        },
        {
            "signature": "RPC_STATUS RpcSmSetClientAllocFree( RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree );",
            "name": "RpcSmSetClientAllocFree"
        },
        {
            "signature": "RPC_STATUS RpcSmSetThreadHandle( RPC_SS_THREAD_HANDLE Id );",
            "name": "RpcSmSetThreadHandle"
        },
        {
            "signature": "RPC_STATUS RpcSmSwapClientAllocFree( RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree );",
            "name": "RpcSmSwapClientAllocFree"
        },
        {
            "signature": "void * RpcSsAllocate( size_t Size );",
            "name": "RpcSsAllocate"
        },
        {
            "signature": "void RpcSsDestroyClientContext( void **ContextHandle );",
            "name": "RpcSsDestroyClientContext"
        },
        {
            "signature": "void RpcSsDisableAllocate();",
            "name": "RpcSsDisableAllocate"
        },
        {
            "signature": "void RpcSsEnableAllocate();",
            "name": "RpcSsEnableAllocate"
        },
        {
            "signature": "void RpcSsFree( void *NodeToFree );",
            "name": "RpcSsFree"
        },
        {
            "signature": "RPC_SS_THREAD_HANDLE RpcSsGetThreadHandle();",
            "name": "RpcSsGetThreadHandle"
        },
        {
            "signature": "void RpcSsSetClientAllocFree( RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree );",
            "name": "RpcSsSetClientAllocFree"
        },
        {
            "signature": "void RpcSsSetThreadHandle( RPC_SS_THREAD_HANDLE Id );",
            "name": "RpcSsSetThreadHandle"
        },
        {
            "signature": "void RpcSsSwapClientAllocFree( RPC_CLIENT_ALLOC *ClientAlloc, RPC_CLIENT_FREE *ClientFree, RPC_CLIENT_ALLOC **OldClientAlloc, RPC_CLIENT_FREE **OldClientFree );",
            "name": "RpcSsSwapClientAllocFree"
        },
        {
            "signature": "void RpcUserFree( handle_t AsyncHandle, void *pBuffer );",
            "name": "RpcUserFree"
        }
    ],
    "Rpcnsi.h": [
        {
            "signature": "RPC_STATUS RpcNsBindingExportA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsBindingExportA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingExportPnPA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );",
            "name": "RpcNsBindingExportPnPA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingExportPnPW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );",
            "name": "RpcNsBindingExportPnPW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingExportW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsBindingExportW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingImportBeginA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext );",
            "name": "RpcNsBindingImportBeginA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingImportBeginW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext );",
            "name": "RpcNsBindingImportBeginW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingImportDone( RPC_NS_HANDLE *ImportContext );",
            "name": "RpcNsBindingImportDone"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingImportNext( RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding );",
            "name": "RpcNsBindingImportNext"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingLookupBeginA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext );",
            "name": "RpcNsBindingLookupBeginA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingLookupBeginW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext );",
            "name": "RpcNsBindingLookupBeginW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingLookupDone( RPC_NS_HANDLE *LookupContext );",
            "name": "RpcNsBindingLookupDone"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingLookupNext( RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec );",
            "name": "RpcNsBindingLookupNext"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingSelect( RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding );",
            "name": "RpcNsBindingSelect"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingUnexportA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsBindingUnexportA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingUnexportPnPA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );",
            "name": "RpcNsBindingUnexportPnPA"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingUnexportPnPW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector );",
            "name": "RpcNsBindingUnexportPnPW"
        },
        {
            "signature": "RPC_STATUS RpcNsBindingUnexportW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsBindingUnexportW"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryExpandNameA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName );",
            "name": "RpcNsEntryExpandNameA"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryExpandNameW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName );",
            "name": "RpcNsEntryExpandNameW"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryObjectInqBeginA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsEntryObjectInqBeginA"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryObjectInqBeginW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsEntryObjectInqBeginW"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryObjectInqDone( RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsEntryObjectInqDone"
        },
        {
            "signature": "RPC_STATUS RpcNsEntryObjectInqNext( RPC_NS_HANDLE InquiryContext, UUID *ObjUuid );",
            "name": "RpcNsEntryObjectInqNext"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupDeleteA( unsigned long GroupNameSyntax, RPC_CSTR GroupName );",
            "name": "RpcNsGroupDeleteA"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupDeleteW( unsigned long GroupNameSyntax, RPC_WSTR GroupName );",
            "name": "RpcNsGroupDeleteW"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrAddA( unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName );",
            "name": "RpcNsGroupMbrAddA"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrAddW( unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName );",
            "name": "RpcNsGroupMbrAddW"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrInqBeginA( unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsGroupMbrInqBeginA"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrInqBeginW( unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsGroupMbrInqBeginW"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrInqDone( RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsGroupMbrInqDone"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrInqNextA( RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName );",
            "name": "RpcNsGroupMbrInqNextA"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrInqNextW( RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName );",
            "name": "RpcNsGroupMbrInqNextW"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrRemoveA( unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName );",
            "name": "RpcNsGroupMbrRemoveA"
        },
        {
            "signature": "RPC_STATUS RpcNsGroupMbrRemoveW( unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName );",
            "name": "RpcNsGroupMbrRemoveW"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtBindingUnexportA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsMgmtBindingUnexportA"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtBindingUnexportW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec );",
            "name": "RpcNsMgmtBindingUnexportW"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryCreateA( unsigned long EntryNameSyntax, RPC_CSTR EntryName );",
            "name": "RpcNsMgmtEntryCreateA"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryCreateW( unsigned long EntryNameSyntax, RPC_WSTR EntryName );",
            "name": "RpcNsMgmtEntryCreateW"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryDeleteA( unsigned long EntryNameSyntax, RPC_CSTR EntryName );",
            "name": "RpcNsMgmtEntryDeleteA"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryDeleteW( unsigned long EntryNameSyntax, RPC_WSTR EntryName );",
            "name": "RpcNsMgmtEntryDeleteW"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryInqIfIdsA( unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec );",
            "name": "RpcNsMgmtEntryInqIfIdsA"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtEntryInqIfIdsW( unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec );",
            "name": "RpcNsMgmtEntryInqIfIdsW"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtHandleSetExpAge( RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge );",
            "name": "RpcNsMgmtHandleSetExpAge"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtInqExpAge( unsigned long *ExpirationAge );",
            "name": "RpcNsMgmtInqExpAge"
        },
        {
            "signature": "RPC_STATUS RpcNsMgmtSetExpAge( unsigned long ExpirationAge );",
            "name": "RpcNsMgmtSetExpAge"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileDeleteA( unsigned long ProfileNameSyntax, RPC_CSTR ProfileName );",
            "name": "RpcNsProfileDeleteA"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileDeleteW( unsigned long ProfileNameSyntax, RPC_WSTR ProfileName );",
            "name": "RpcNsProfileDeleteW"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltAddA( unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation );",
            "name": "RpcNsProfileEltAddA"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltAddW( unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation );",
            "name": "RpcNsProfileEltAddW"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltInqBeginA( unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsProfileEltInqBeginA"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltInqBeginW( unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsProfileEltInqBeginW"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltInqDone( RPC_NS_HANDLE *InquiryContext );",
            "name": "RpcNsProfileEltInqDone"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltInqNextA( RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation );",
            "name": "RpcNsProfileEltInqNextA"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltInqNextW( RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation );",
            "name": "RpcNsProfileEltInqNextW"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltRemoveA( unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName );",
            "name": "RpcNsProfileEltRemoveA"
        },
        {
            "signature": "RPC_STATUS RpcNsProfileEltRemoveW( unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName );",
            "name": "RpcNsProfileEltRemoveW"
        }
    ],
    "Rpcproxy.h": [
        {
            "signature": "ULONG CStdAsyncStubBuffer_AddRef( [in] IRpcStubBuffer *pthis );",
            "name": "CStdAsyncStubBuffer_AddRef"
        },
        {
            "signature": "HRESULT CStdAsyncStubBuffer_Connect( [in] IRpcStubBuffer *pthis, [in] IUnknown *pUnkServer );",
            "name": "CStdAsyncStubBuffer_Connect"
        },
        {
            "signature": "void CStdAsyncStubBuffer_Disconnect( [in] IRpcStubBuffer *pthis );",
            "name": "CStdAsyncStubBuffer_Disconnect"
        },
        {
            "signature": "HRESULT CStdAsyncStubBuffer_Invoke( [in] IRpcStubBuffer *pthis, [in] RPCOLEMESSAGE *_prpcmsg, [in] IRpcChannelBuffer *_pRpcChannelBuffer );",
            "name": "CStdAsyncStubBuffer_Invoke"
        },
        {
            "signature": "HRESULT CStdAsyncStubBuffer_QueryInterface( [in] IRpcStubBuffer *pthis, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CStdAsyncStubBuffer_QueryInterface"
        },
        {
            "signature": "ULONG CStdAsyncStubBuffer_Release( [in] IRpcStubBuffer *pthis );",
            "name": "CStdAsyncStubBuffer_Release"
        },
        {
            "signature": "HRESULT CStdAsyncStubBuffer2_Connect( [in] IRpcStubBuffer *pthis, [in] IUnknown *pUnkServer );",
            "name": "CStdAsyncStubBuffer2_Connect"
        },
        {
            "signature": "void CStdAsyncStubBuffer2_Disconnect( [in] IRpcStubBuffer *pthis );",
            "name": "CStdAsyncStubBuffer2_Disconnect"
        },
        {
            "signature": "ULONG CStdAsyncStubBuffer2_Release( [in] IRpcStubBuffer *pthis );",
            "name": "CStdAsyncStubBuffer2_Release"
        },
        {
            "signature": "ULONG CStdStubBuffer_AddRef( [in] IRpcStubBuffer *This );",
            "name": "CStdStubBuffer_AddRef"
        },
        {
            "signature": "HRESULT CStdStubBuffer_Connect( [in] IRpcStubBuffer *This, [in] IUnknown *pUnkServer );",
            "name": "CStdStubBuffer_Connect"
        },
        {
            "signature": "ULONG CStdStubBuffer_CountRefs( [in] IRpcStubBuffer *This );",
            "name": "CStdStubBuffer_CountRefs"
        },
        {
            "signature": "HRESULT CStdStubBuffer_DebugServerQueryInterface( [in] IRpcStubBuffer *This, [out] void **ppv );",
            "name": "CStdStubBuffer_DebugServerQueryInterface"
        },
        {
            "signature": "void CStdStubBuffer_DebugServerRelease( [in] IRpcStubBuffer *This, [in] void *pv );",
            "name": "CStdStubBuffer_DebugServerRelease"
        },
        {
            "signature": "void CStdStubBuffer_Disconnect( [in] IRpcStubBuffer *This );",
            "name": "CStdStubBuffer_Disconnect"
        },
        {
            "signature": "HRESULT CStdStubBuffer_Invoke( [in] IRpcStubBuffer *This, [in] RPCOLEMESSAGE *pRpcMsg, [in] IRpcChannelBuffer *pRpcChannelBuffer );",
            "name": "CStdStubBuffer_Invoke"
        },
        {
            "signature": "IRpcStubBuffer * CStdStubBuffer_IsIIDSupported( [in] IRpcStubBuffer *This, [in] REFIID riid );",
            "name": "CStdStubBuffer_IsIIDSupported"
        },
        {
            "signature": "HRESULT CStdStubBuffer_QueryInterface( [in] IRpcStubBuffer *This, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CStdStubBuffer_QueryInterface"
        },
        {
            "signature": "HRESULT CStdStubBuffer2_Connect( [in] IRpcStubBuffer *pthis, [in] IUnknown *pUnkServer );",
            "name": "CStdStubBuffer2_Connect"
        },
        {
            "signature": "ULONG CStdStubBuffer2_CountRefs( [in] IRpcStubBuffer *pthis );",
            "name": "CStdStubBuffer2_CountRefs"
        },
        {
            "signature": "void CStdStubBuffer2_Disconnect( [in] IRpcStubBuffer *pthis );",
            "name": "CStdStubBuffer2_Disconnect"
        },
        {
            "signature": "HRESULT CStdStubBuffer2_QueryInterface( [in] IRpcStubBuffer *This, [in] REFIID riid, [out] void **ppvObject );",
            "name": "CStdStubBuffer2_QueryInterface"
        },
        {
            "signature": "ULONG NdrCStdStubBuffer_Release( [in] IRpcStubBuffer *This, [in] IPSFactoryBuffer *pPSF );",
            "name": "NdrCStdStubBuffer_Release"
        },
        {
            "signature": "ULONG NdrCStdStubBuffer2_Release( [in] IRpcStubBuffer *This, [in] IPSFactoryBuffer *pPSF );",
            "name": "NdrCStdStubBuffer2_Release"
        },
        {
            "signature": "HRESULT NdrDllCanUnloadNow( [in] CStdPSFactoryBuffer *pPSFactoryBuffer );",
            "name": "NdrDllCanUnloadNow"
        },
        {
            "signature": "HRESULT NdrDllGetClassObject( [in] REFCLSID rclsid, [in] REFIID riid, [out] void **ppv, [in] const ProxyFileInfo **pProxyFileList, [in] const CLSID *pclsid, [in] CStdPSFactoryBuffer *pPSFactoryBuffer );",
            "name": "NdrDllGetClassObject"
        },
        {
            "signature": "HRESULT NdrDllRegisterProxy( [in] HMODULE hDll, [in] const ProxyFileInfo **pProxyFileList, [in] const CLSID *pclsid );",
            "name": "NdrDllRegisterProxy"
        },
        {
            "signature": "HRESULT NdrDllUnregisterProxy( [in] HMODULE hDll, [in] const ProxyFileInfo **pProxyFileList, [in] const CLSID *pclsid );",
            "name": "NdrDllUnregisterProxy"
        },
        {
            "signature": "HRESULT NdrProxyErrorHandler( [in] DWORD dwExceptionCode );",
            "name": "NdrProxyErrorHandler"
        },
        {
            "signature": "void NdrProxyForwardingFunction10();",
            "name": "NdrProxyForwardingFunction10"
        },
        {
            "signature": "void NdrProxyForwardingFunction11();",
            "name": "NdrProxyForwardingFunction11"
        },
        {
            "signature": "void NdrProxyForwardingFunction12();",
            "name": "NdrProxyForwardingFunction12"
        },
        {
            "signature": "void NdrProxyForwardingFunction13();",
            "name": "NdrProxyForwardingFunction13"
        },
        {
            "signature": "void NdrProxyForwardingFunction14();",
            "name": "NdrProxyForwardingFunction14"
        },
        {
            "signature": "void NdrProxyForwardingFunction15();",
            "name": "NdrProxyForwardingFunction15"
        },
        {
            "signature": "void NdrProxyForwardingFunction16();",
            "name": "NdrProxyForwardingFunction16"
        },
        {
            "signature": "void NdrProxyForwardingFunction17();",
            "name": "NdrProxyForwardingFunction17"
        },
        {
            "signature": "void NdrProxyForwardingFunction18();",
            "name": "NdrProxyForwardingFunction18"
        },
        {
            "signature": "void NdrProxyForwardingFunction19();",
            "name": "NdrProxyForwardingFunction19"
        },
        {
            "signature": "void NdrProxyForwardingFunction20();",
            "name": "NdrProxyForwardingFunction20"
        },
        {
            "signature": "void NdrProxyForwardingFunction21();",
            "name": "NdrProxyForwardingFunction21"
        },
        {
            "signature": "void NdrProxyForwardingFunction22();",
            "name": "NdrProxyForwardingFunction22"
        },
        {
            "signature": "void NdrProxyForwardingFunction23();",
            "name": "NdrProxyForwardingFunction23"
        },
        {
            "signature": "void NdrProxyForwardingFunction24();",
            "name": "NdrProxyForwardingFunction24"
        },
        {
            "signature": "void NdrProxyForwardingFunction25();",
            "name": "NdrProxyForwardingFunction25"
        },
        {
            "signature": "void NdrProxyForwardingFunction26();",
            "name": "NdrProxyForwardingFunction26"
        },
        {
            "signature": "void NdrProxyForwardingFunction27();",
            "name": "NdrProxyForwardingFunction27"
        },
        {
            "signature": "void NdrProxyForwardingFunction28();",
            "name": "NdrProxyForwardingFunction28"
        },
        {
            "signature": "void NdrProxyForwardingFunction29();",
            "name": "NdrProxyForwardingFunction29"
        },
        {
            "signature": "void NdrProxyForwardingFunction3();",
            "name": "NdrProxyForwardingFunction3"
        },
        {
            "signature": "void NdrProxyForwardingFunction30();",
            "name": "NdrProxyForwardingFunction30"
        },
        {
            "signature": "void NdrProxyForwardingFunction31();",
            "name": "NdrProxyForwardingFunction31"
        },
        {
            "signature": "void NdrProxyForwardingFunction32();",
            "name": "NdrProxyForwardingFunction32"
        },
        {
            "signature": "void NdrProxyForwardingFunction4();",
            "name": "NdrProxyForwardingFunction4"
        },
        {
            "signature": "void NdrProxyForwardingFunction5();",
            "name": "NdrProxyForwardingFunction5"
        },
        {
            "signature": "void NdrProxyForwardingFunction6();",
            "name": "NdrProxyForwardingFunction6"
        },
        {
            "signature": "void NdrProxyForwardingFunction7();",
            "name": "NdrProxyForwardingFunction7"
        },
        {
            "signature": "void NdrProxyForwardingFunction8();",
            "name": "NdrProxyForwardingFunction8"
        },
        {
            "signature": "void NdrProxyForwardingFunction9();",
            "name": "NdrProxyForwardingFunction9"
        },
        {
            "signature": "void NdrProxyFreeBuffer( [in] void *This, [in, out] MIDL_STUB_MESSAGE *pStubMsg );",
            "name": "NdrProxyFreeBuffer"
        },
        {
            "signature": "void NdrProxyGetBuffer( [in] void *This, [in, out] PMIDL_STUB_MESSAGE pStubMsg );",
            "name": "NdrProxyGetBuffer"
        },
        {
            "signature": "void NdrProxyInitialize( [in] void *This, [in] PRPC_MESSAGE pRpcMsg, [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] PMIDL_STUB_DESC pStubDescriptor, [in] unsigned int ProcNum );",
            "name": "NdrProxyInitialize"
        },
        {
            "signature": "void NdrProxySendReceive( [in] void *This, [in, out] MIDL_STUB_MESSAGE *pStubMsg );",
            "name": "NdrProxySendReceive"
        },
        {
            "signature": "void NdrStubForwardingFunction( [in] IRpcStubBuffer *This, [in] IRpcChannelBuffer *pChannel, [in, out] PRPC_MESSAGE pmsg, [out] DWORD *pdwStubPhase );",
            "name": "NdrStubForwardingFunction"
        },
        {
            "signature": "void NdrStubGetBuffer( [in] IRpcStubBuffer *This, [in] IRpcChannelBuffer *pRpcChannelBuffer, [in, out] PMIDL_STUB_MESSAGE pStubMsg );",
            "name": "NdrStubGetBuffer"
        },
        {
            "signature": "void NdrStubInitialize( [in] PRPC_MESSAGE pRpcMsg, [in, out] PMIDL_STUB_MESSAGE pStubMsg, [in] PMIDL_STUB_DESC pStubDescriptor, [in] IRpcChannelBuffer *pRpcChannelBuffer );",
            "name": "NdrStubInitialize"
        },
        {
            "signature": "void ObjectStublessClient10();",
            "name": "ObjectStublessClient10"
        },
        {
            "signature": "void ObjectStublessClient11();",
            "name": "ObjectStublessClient11"
        },
        {
            "signature": "void ObjectStublessClient12();",
            "name": "ObjectStublessClient12"
        },
        {
            "signature": "void ObjectStublessClient13();",
            "name": "ObjectStublessClient13"
        },
        {
            "signature": "void ObjectStublessClient14();",
            "name": "ObjectStublessClient14"
        },
        {
            "signature": "void ObjectStublessClient15();",
            "name": "ObjectStublessClient15"
        },
        {
            "signature": "void ObjectStublessClient16();",
            "name": "ObjectStublessClient16"
        },
        {
            "signature": "void ObjectStublessClient17();",
            "name": "ObjectStublessClient17"
        },
        {
            "signature": "void ObjectStublessClient18();",
            "name": "ObjectStublessClient18"
        },
        {
            "signature": "void ObjectStublessClient19();",
            "name": "ObjectStublessClient19"
        },
        {
            "signature": "void ObjectStublessClient20();",
            "name": "ObjectStublessClient20"
        },
        {
            "signature": "void ObjectStublessClient21();",
            "name": "ObjectStublessClient21"
        },
        {
            "signature": "void ObjectStublessClient22();",
            "name": "ObjectStublessClient22"
        },
        {
            "signature": "void ObjectStublessClient23();",
            "name": "ObjectStublessClient23"
        },
        {
            "signature": "void ObjectStublessClient24();",
            "name": "ObjectStublessClient24"
        },
        {
            "signature": "void ObjectStublessClient25();",
            "name": "ObjectStublessClient25"
        },
        {
            "signature": "void ObjectStublessClient26();",
            "name": "ObjectStublessClient26"
        },
        {
            "signature": "void ObjectStublessClient27();",
            "name": "ObjectStublessClient27"
        },
        {
            "signature": "void ObjectStublessClient28();",
            "name": "ObjectStublessClient28"
        },
        {
            "signature": "void ObjectStublessClient29();",
            "name": "ObjectStublessClient29"
        },
        {
            "signature": "void ObjectStublessClient3();",
            "name": "ObjectStublessClient3"
        },
        {
            "signature": "void ObjectStublessClient30();",
            "name": "ObjectStublessClient30"
        },
        {
            "signature": "void ObjectStublessClient31();",
            "name": "ObjectStublessClient31"
        },
        {
            "signature": "void ObjectStublessClient32();",
            "name": "ObjectStublessClient32"
        },
        {
            "signature": "void ObjectStublessClient4();",
            "name": "ObjectStublessClient4"
        },
        {
            "signature": "void ObjectStublessClient5();",
            "name": "ObjectStublessClient5"
        },
        {
            "signature": "void ObjectStublessClient6();",
            "name": "ObjectStublessClient6"
        },
        {
            "signature": "void ObjectStublessClient7();",
            "name": "ObjectStublessClient7"
        },
        {
            "signature": "void ObjectStublessClient8();",
            "name": "ObjectStublessClient8"
        },
        {
            "signature": "void ObjectStublessClient9();",
            "name": "ObjectStublessClient9"
        }
    ],
    "Rpcssl.h": [
        {
            "signature": "RPC_STATUS RpcCertGeneratePrincipalName( PCCERT_CONTEXT Context, DWORD Flags, RPC_CSTR *pBuffer );",
            "name": "RpcCertGeneratePrincipalName"
        },
        {
            "signature": "RPC_STATUS RpcCertGeneratePrincipalNameA( PCCERT_CONTEXT Context, DWORD Flags, RPC_CSTR *pBuffer );",
            "name": "RpcCertGeneratePrincipalNameA"
        },
        {
            "signature": "RPC_STATUS RpcCertGeneratePrincipalNameW( PCCERT_CONTEXT Context, DWORD Flags, RPC_WSTR *pBuffer );",
            "name": "RpcCertGeneratePrincipalNameW"
        }
    ],
    "Rrascfg.h": [],
    "Rtlsupportapi.h": [
        {
            "signature": "NTSYSAPI VOID RtlRaiseException( [in] PEXCEPTION_RECORD ExceptionRecord );",
            "name": "RtlRaiseException"
        }
    ],
    "Rtmv2.h": [
        {
            "signature": "_ENTITY_METHOD EntityMethod; void EntityMethod( RTM_ENTITY_HANDLE CallerHandle, RTM_ENTITY_HANDLE CalleeHandle, RTM_ENTITY_METHOD_INPUT *Input, RTM_ENTITY_METHOD_OUTPUT *Output ) {...}",
            "name": "_ENTITY_METHOD callback"
        },
        {
            "signature": "_EVENT_CALLBACK EventCallback; DWORD EventCallback( RTM_ENTITY_HANDLE RtmRegHandle, RTM_EVENT_TYPE EventType, PVOID Context1, PVOID Context2 ) {...}",
            "name": "_EVENT_CALLBACK callback"
        },
        {
            "signature": "DWORD RtmAddNextHop( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NEXTHOP_INFO NextHopInfo, [in, out] PRTM_NEXTHOP_HANDLE NextHopHandle, [out] PRTM_NEXTHOP_CHANGE_FLAGS ChangeFlags );",
            "name": "RtmAddNextHop"
        },
        {
            "signature": "DWORD RtmAddRouteToDest( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in, out] PRTM_ROUTE_HANDLE RouteHandle, [in] PRTM_NET_ADDRESS DestAddress, [in] PRTM_ROUTE_INFO RouteInfo, [in] ULONG TimeToLive, [in] RTM_ROUTE_LIST_HANDLE RouteListHandle, [in] RTM_NOTIFY_FLAGS NotifyType, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in, out] PRTM_ROUTE_CHANGE_FLAGS ChangeFlags );",
            "name": "RtmAddRouteToDest"
        },
        {
            "signature": "DWORD RtmBlockMethods( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] HANDLE TargetHandle, [in] UCHAR TargetType, [in] DWORD BlockingFlag );",
            "name": "RtmBlockMethods"
        },
        {
            "signature": "DWORD RtmCreateDestEnum( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_VIEW_SET TargetViews, [in] RTM_ENUM_FLAGS EnumFlags, [in] PRTM_NET_ADDRESS NetAddress, [in] ULONG ProtocolId, [out] PRTM_ENUM_HANDLE RtmEnumHandle );",
            "name": "RtmCreateDestEnum"
        },
        {
            "signature": "DWORD RtmCreateNextHopEnum( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_FLAGS EnumFlags, [in] PRTM_NET_ADDRESS NetAddress, [out] PRTM_ENUM_HANDLE RtmEnumHandle );",
            "name": "RtmCreateNextHopEnum"
        },
        {
            "signature": "DWORD RtmCreateRouteEnum( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [in] RTM_VIEW_SET TargetViews, [in] RTM_ENUM_FLAGS EnumFlags, [in] PRTM_NET_ADDRESS StartDest, [in] RTM_MATCH_FLAGS MatchingFlags, [in] PRTM_ROUTE_INFO CriteriaRoute, [in] ULONG CriteriaInterface, [out] PRTM_ENUM_HANDLE RtmEnumHandle );",
            "name": "RtmCreateRouteEnum"
        },
        {
            "signature": "DWORD RtmCreateRouteList( [in] RTM_ENTITY_HANDLE RtmRegHandle, [out] PRTM_ROUTE_LIST_HANDLE RouteListHandle );",
            "name": "RtmCreateRouteList"
        },
        {
            "signature": "DWORD RtmCreateRouteListEnum( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_LIST_HANDLE RouteListHandle, [out] PRTM_ENUM_HANDLE RtmEnumHandle );",
            "name": "RtmCreateRouteListEnum"
        },
        {
            "signature": "DWORD RtmDeleteEnumHandle( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_HANDLE EnumHandle );",
            "name": "RtmDeleteEnumHandle"
        },
        {
            "signature": "DWORD RtmDeleteNextHop( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NEXTHOP_HANDLE NextHopHandle, [in] PRTM_NEXTHOP_INFO NextHopInfo );",
            "name": "RtmDeleteNextHop"
        },
        {
            "signature": "DWORD RtmDeleteRouteList( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_LIST_HANDLE RouteListHandle );",
            "name": "RtmDeleteRouteList"
        },
        {
            "signature": "DWORD RtmDeleteRouteToDest( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [out] PRTM_ROUTE_CHANGE_FLAGS ChangeFlags );",
            "name": "RtmDeleteRouteToDest"
        },
        {
            "signature": "DWORD RtmDeregisterEntity( [in] RTM_ENTITY_HANDLE RtmRegHandle );",
            "name": "RtmDeregisterEntity"
        },
        {
            "signature": "DWORD RtmDeregisterFromChangeNotification( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle );",
            "name": "RtmDeregisterFromChangeNotification"
        },
        {
            "signature": "DWORD RtmFindNextHop( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NEXTHOP_INFO NextHopInfo, [out] PRTM_NEXTHOP_HANDLE NextHopHandle, [out] PRTM_NEXTHOP_INFO *NextHopPointer );",
            "name": "RtmFindNextHop"
        },
        {
            "signature": "DWORD RtmGetChangedDests( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in, out] PUINT NumDests, [out] PRTM_DEST_INFO ChangedDests );",
            "name": "RtmGetChangedDests"
        },
        {
            "signature": "DWORD RtmGetChangeStatus( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in] RTM_DEST_HANDLE DestHandle, [out] PBOOL ChangeStatus );",
            "name": "RtmGetChangeStatus"
        },
        {
            "signature": "DWORD RtmGetDestInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [in] ULONG ProtocolId, [in] RTM_VIEW_SET TargetViews, [out] PRTM_DEST_INFO DestInfo );",
            "name": "RtmGetDestInfo"
        },
        {
            "signature": "DWORD RtmGetEntityInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENTITY_HANDLE EntityHandle, [out] PRTM_ENTITY_INFO EntityInfo );",
            "name": "RtmGetEntityInfo"
        },
        {
            "signature": "DWORD RtmGetEntityMethods( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENTITY_HANDLE EntityHandle, [in, out] PUINT NumMethods, [out] PRTM_ENTITY_EXPORT_METHOD ExptMethods );",
            "name": "RtmGetEntityMethods"
        },
        {
            "signature": "DWORD RtmGetEnumDests( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_HANDLE EnumHandle, [in, out] PUINT NumDests, [out] PRTM_DEST_INFO DestInfos );",
            "name": "RtmGetEnumDests"
        },
        {
            "signature": "DWORD RtmGetEnumNextHops( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_HANDLE EnumHandle, [in, out] PUINT NumNextHops, [out] PRTM_NEXTHOP_HANDLE NextHopHandles );",
            "name": "RtmGetEnumNextHops"
        },
        {
            "signature": "DWORD RtmGetEnumRoutes( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_HANDLE EnumHandle, [in, out] PUINT NumRoutes, [out] PRTM_ROUTE_HANDLE RouteHandles );",
            "name": "RtmGetEnumRoutes"
        },
        {
            "signature": "DWORD RtmGetExactMatchDestination( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NET_ADDRESS DestAddress, [in] ULONG ProtocolId, [in] RTM_VIEW_SET TargetViews, [out] PRTM_DEST_INFO DestInfo );",
            "name": "RtmGetExactMatchDestination"
        },
        {
            "signature": "DWORD RtmGetExactMatchRoute( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NET_ADDRESS DestAddress, [in] RTM_MATCH_FLAGS MatchingFlags, [in, out] PRTM_ROUTE_INFO RouteInfo, [in] ULONG InterfaceIndex, [in] RTM_VIEW_SET TargetViews, [out] PRTM_ROUTE_HANDLE RouteHandle );",
            "name": "RtmGetExactMatchRoute"
        },
        {
            "signature": "DWORD RtmGetLessSpecificDestination( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [in] ULONG ProtocolId, [in] RTM_VIEW_SET TargetViews, [out] PRTM_DEST_INFO DestInfo );",
            "name": "RtmGetLessSpecificDestination"
        },
        {
            "signature": "DWORD RtmGetListEnumRoutes( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENUM_HANDLE EnumHandle, [in, out] PUINT NumRoutes, [out] PRTM_ROUTE_HANDLE RouteHandles );",
            "name": "RtmGetListEnumRoutes"
        },
        {
            "signature": "DWORD RtmGetMostSpecificDestination( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NET_ADDRESS DestAddress, [in] ULONG ProtocolId, [in] RTM_VIEW_SET TargetViews, [out] PRTM_DEST_INFO DestInfo );",
            "name": "RtmGetMostSpecificDestination"
        },
        {
            "signature": "DWORD RtmGetNextHopInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NEXTHOP_HANDLE NextHopHandle, [out] PRTM_NEXTHOP_INFO NextHopInfo );",
            "name": "RtmGetNextHopInfo"
        },
        {
            "signature": "DWORD RtmGetNextHopPointer( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NEXTHOP_HANDLE NextHopHandle, [out] PRTM_NEXTHOP_INFO *NextHopPointer );",
            "name": "RtmGetNextHopPointer"
        },
        {
            "signature": "DWORD RtmGetOpaqueInformationPointer( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [out] PVOID *OpaqueInfoPointer );",
            "name": "RtmGetOpaqueInformationPointer"
        },
        {
            "signature": "DWORD RtmGetRegisteredEntities( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in, out] PUINT NumEntities, [out] PRTM_ENTITY_HANDLE EntityHandles, [out] PRTM_ENTITY_INFO EntityInfos );",
            "name": "RtmGetRegisteredEntities"
        },
        {
            "signature": "DWORD RtmGetRouteInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [out] PRTM_ROUTE_INFO RouteInfo, [out] PRTM_NET_ADDRESS DestAddress );",
            "name": "RtmGetRouteInfo"
        },
        {
            "signature": "DWORD RtmGetRoutePointer( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [out] PRTM_ROUTE_INFO *RoutePointer );",
            "name": "RtmGetRoutePointer"
        },
        {
            "signature": "DWORD RtmHoldDestination( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [in] RTM_VIEW_SET TargetViews, [in] ULONG HoldTime );",
            "name": "RtmHoldDestination"
        },
        {
            "signature": "DWORD RtmIgnoreChangedDests( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in] UINT NumDests, [in] PRTM_DEST_HANDLE ChangedDests );",
            "name": "RtmIgnoreChangedDests"
        },
        {
            "signature": "DWORD RtmInsertInRouteList( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_LIST_HANDLE RouteListHandle, [in] UINT NumRoutes, [in] PRTM_ROUTE_HANDLE RouteHandles );",
            "name": "RtmInsertInRouteList"
        },
        {
            "signature": "DWORD RtmInvokeMethod( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ENTITY_HANDLE EntityHandle, [in] PRTM_ENTITY_METHOD_INPUT Input, [in, out] PUINT OutputSize, [out] PRTM_ENTITY_METHOD_OUTPUT Output );",
            "name": "RtmInvokeMethod"
        },
        {
            "signature": "DWORD RtmIsBestRoute( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [out] PRTM_VIEW_SET BestInViews );",
            "name": "RtmIsBestRoute"
        },
        {
            "signature": "DWORD RtmIsMarkedForChangeNotification( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in] RTM_DEST_HANDLE DestHandle, [out] PBOOL DestMarked );",
            "name": "RtmIsMarkedForChangeNotification"
        },
        {
            "signature": "DWORD RtmLockDestination( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_DEST_HANDLE DestHandle, [in] BOOL Exclusive, [in] BOOL LockDest );",
            "name": "RtmLockDestination"
        },
        {
            "signature": "DWORD RtmLockNextHop( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NEXTHOP_HANDLE NextHopHandle, [in] BOOL Exclusive, [in] BOOL LockNextHop, [out] PRTM_NEXTHOP_INFO *NextHopPointer );",
            "name": "RtmLockNextHop"
        },
        {
            "signature": "DWORD RtmLockRoute( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [in] BOOL Exclusive, [in] BOOL LockRoute, [out] PRTM_ROUTE_INFO *RoutePointer );",
            "name": "RtmLockRoute"
        },
        {
            "signature": "DWORD RtmMarkDestForChangeNotification( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in] RTM_DEST_HANDLE DestHandle, [in] BOOL MarkDest );",
            "name": "RtmMarkDestForChangeNotification"
        },
        {
            "signature": "DWORD RtmReferenceHandles( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] UINT NumHandles, [in] HANDLE *RtmHandles );",
            "name": "RtmReferenceHandles"
        },
        {
            "signature": "DWORD RtmRegisterEntity( [in] PRTM_ENTITY_INFO RtmEntityInfo, [in] PRTM_ENTITY_EXPORT_METHODS ExportMethods, [in] RTM_EVENT_CALLBACK EventCallback, [in] BOOL ReserveOpaquePointer, [out] PRTM_REGN_PROFILE RtmRegProfile, [out] PRTM_ENTITY_HANDLE RtmRegHandle );",
            "name": "RtmRegisterEntity"
        },
        {
            "signature": "DWORD RtmRegisterForChangeNotification( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_VIEW_SET TargetViews, [in] RTM_NOTIFY_FLAGS NotifyFlags, [in] PVOID NotifyContext, [out] PRTM_NOTIFY_HANDLE NotifyHandle );",
            "name": "RtmRegisterForChangeNotification"
        },
        {
            "signature": "DWORD RtmReleaseChangedDests( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_NOTIFY_HANDLE NotifyHandle, [in] UINT NumDests, [in] PRTM_DEST_INFO ChangedDests );",
            "name": "RtmReleaseChangedDests"
        },
        {
            "signature": "DWORD RtmReleaseDestInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_DEST_INFO DestInfo );",
            "name": "RtmReleaseDestInfo"
        },
        {
            "signature": "DWORD RtmReleaseDests( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] UINT NumDests, [in] PRTM_DEST_INFO DestInfos );",
            "name": "RtmReleaseDests"
        },
        {
            "signature": "DWORD RtmReleaseEntities( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] UINT NumEntities, [in] PRTM_ENTITY_HANDLE EntityHandles );",
            "name": "RtmReleaseEntities"
        },
        {
            "signature": "DWORD RtmReleaseEntityInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_ENTITY_INFO EntityInfo );",
            "name": "RtmReleaseEntityInfo"
        },
        {
            "signature": "DWORD RtmReleaseNextHopInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_NEXTHOP_INFO NextHopInfo );",
            "name": "RtmReleaseNextHopInfo"
        },
        {
            "signature": "DWORD RtmReleaseNextHops( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] UINT NumNextHops, [in] PRTM_NEXTHOP_HANDLE NextHopHandles );",
            "name": "RtmReleaseNextHops"
        },
        {
            "signature": "DWORD RtmReleaseRouteInfo( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] PRTM_ROUTE_INFO RouteInfo );",
            "name": "RtmReleaseRouteInfo"
        },
        {
            "signature": "DWORD RtmReleaseRoutes( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] UINT NumRoutes, [in] PRTM_ROUTE_HANDLE RouteHandles );",
            "name": "RtmReleaseRoutes"
        },
        {
            "signature": "DWORD RtmUpdateAndUnlockRoute( [in] RTM_ENTITY_HANDLE RtmRegHandle, [in] RTM_ROUTE_HANDLE RouteHandle, [in] ULONG TimeToLive, [in] RTM_ROUTE_LIST_HANDLE RouteListHandle, [in] RTM_NOTIFY_FLAGS NotifyType, [in] RTM_NOTIFY_HANDLE NotifyHandle, [out] PRTM_ROUTE_CHANGE_FLAGS ChangeFlags );",
            "name": "RtmUpdateAndUnlockRoute"
        }
    ],
    "Rtscom.h": [],
    "Rtworkq.h": [
        {
            "signature": "HRESULT RtwqAddPeriodicCallback( [in] RTWQPERIODICCALLBACK Callback, IUnknown *context, [out, optional] DWORD *key );",
            "name": "RtwqAddPeriodicCallback"
        },
        {
            "signature": "HRESULT RtwqAllocateSerialWorkQueue( [in] DWORD workQueueIdIn, [out] DWORD *workQueueIdOut );",
            "name": "RtwqAllocateSerialWorkQueue"
        },
        {
            "signature": "HRESULT RtwqAllocateWorkQueue( [in] RTWQ_WORKQUEUE_TYPE WorkQueueType, [out] DWORD *workQueueId );",
            "name": "RtwqAllocateWorkQueue"
        },
        {
            "signature": "HRESULT RtwqBeginRegisterWorkQueueWithMMCSS( [in] DWORD workQueueId, [in] PCWSTR usageClass, [in] DWORD dwTaskId, [in] LONG lPriority, [in] IRtwqAsyncCallback *doneCallback, [in] IUnknown *doneState );",
            "name": "RtwqBeginRegisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT RtwqBeginUnregisterWorkQueueWithMMCSS( [in] DWORD workQueueId, [in] IRtwqAsyncCallback *doneCallback, [in] IUnknown *doneState );",
            "name": "RtwqBeginUnregisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT RtwqCancelDeadline( [in] HANDLE pRequest );",
            "name": "RtwqCancelDeadline"
        },
        {
            "signature": "HRESULT RtwqCancelWorkItem( [in] RTWQWORKITEM_KEY Key );",
            "name": "RtwqCancelWorkItem"
        },
        {
            "signature": "HRESULT RtwqCreateAsyncResult( [in] IUnknown *appObject, [in] IRtwqAsyncCallback *callback, [in] IUnknown *appState, [out] IRtwqAsyncResult **asyncResult );",
            "name": "RtwqCreateAsyncResult"
        },
        {
            "signature": "HRESULT RtwqEndRegisterWorkQueueWithMMCSS( [in] IRtwqAsyncResult *result, [out] DWORD *taskId );",
            "name": "RtwqEndRegisterWorkQueueWithMMCSS"
        },
        {
            "signature": "HRESULT RtwqGetWorkQueueMMCSSClass( [in] DWORD workQueueId, [out] PWSTR usageClass, [in, out] DWORD *usageClassLength );",
            "name": "RtwqGetWorkQueueMMCSSClass"
        },
        {
            "signature": "HRESULT RtwqGetWorkQueueMMCSSPriority( [in] DWORD workQueueId, [out] LONG *priority );",
            "name": "RtwqGetWorkQueueMMCSSPriority"
        },
        {
            "signature": "HRESULT RtwqGetWorkQueueMMCSSTaskId( [in] DWORD workQueueId, [out] DWORD *taskId );",
            "name": "RtwqGetWorkQueueMMCSSTaskId"
        },
        {
            "signature": "HRESULT RtwqInvokeCallback( IRtwqAsyncResult *result );",
            "name": "RtwqInvokeCallback"
        },
        {
            "signature": "HRESULT RtwqJoinWorkQueue( [in] DWORD workQueueId, [in] HANDLE hFile, [out] HANDLE *out );",
            "name": "RtwqJoinWorkQueue"
        },
        {
            "signature": "HRESULT RtwqLockPlatform();",
            "name": "RtwqLockPlatform"
        },
        {
            "signature": "HRESULT RtwqLockSharedWorkQueue( [in] PCWSTR usageClass, [in] LONG basePriority, [in, out] DWORD *taskId, [out] DWORD *id );",
            "name": "RtwqLockSharedWorkQueue"
        },
        {
            "signature": "HRESULT RtwqLockWorkQueue( [in] DWORD workQueueId );",
            "name": "RtwqLockWorkQueue"
        },
        {
            "signature": "HRESULT RtwqPutWaitingWorkItem( [in] HANDLE hEvent, [in] LONG lPriority, [in] IRtwqAsyncResult *result, [out, optional] RTWQWORKITEM_KEY *key );",
            "name": "RtwqPutWaitingWorkItem"
        },
        {
            "signature": "HRESULT RtwqPutWorkItem( [in] DWORD dwQueue, [in] LONG lPriority, [in] IRtwqAsyncResult *result );",
            "name": "RtwqPutWorkItem"
        },
        {
            "signature": "HRESULT RtwqRegisterPlatformEvents( [in] IRtwqPlatformEvents *platformEvents );",
            "name": "RtwqRegisterPlatformEvents"
        },
        {
            "signature": "HRESULT RtwqRegisterPlatformWithMMCSS( [in] PCWSTR usageClass, [in, out] DWORD *taskId, [in] LONG lPriority );",
            "name": "RtwqRegisterPlatformWithMMCSS"
        },
        {
            "signature": "HRESULT RtwqRemovePeriodicCallback( [in] DWORD dwKey );",
            "name": "RtwqRemovePeriodicCallback"
        },
        {
            "signature": "HRESULT RtwqScheduleWorkItem( [in] IRtwqAsyncResult *result, [in] INT64 Timeout, [out, optional] RTWQWORKITEM_KEY *key );",
            "name": "RtwqScheduleWorkItem"
        },
        {
            "signature": "HRESULT RtwqSetDeadline( [in] DWORD workQueueId, [in] LONGLONG deadlineInHNS, [in, out] HANDLE *pRequest );",
            "name": "RtwqSetDeadline"
        },
        {
            "signature": "HRESULT RtwqSetDeadline2( [in] DWORD workQueueId, [in] LONGLONG deadlineInHNS, [in] LONGLONG preDeadlineInHNS, [in, out] HANDLE *pRequest );",
            "name": "RtwqSetDeadline2"
        },
        {
            "signature": "HRESULT RtwqSetLongRunning( [in] DWORD workQueueId, [in] BOOL enable );",
            "name": "RtwqSetLongRunning"
        },
        {
            "signature": "HRESULT RtwqShutdown();",
            "name": "RtwqShutdown"
        },
        {
            "signature": "HRESULT RtwqStartup();",
            "name": "RtwqStartup"
        },
        {
            "signature": "HRESULT RtwqUnjoinWorkQueue( [in] DWORD workQueueId, [in] HANDLE hFile );",
            "name": "RtwqUnjoinWorkQueue"
        },
        {
            "signature": "HRESULT RtwqUnlockPlatform();",
            "name": "RtwqUnlockPlatform"
        },
        {
            "signature": "HRESULT RtwqUnlockWorkQueue( [in] DWORD workQueueId );",
            "name": "RtwqUnlockWorkQueue"
        },
        {
            "signature": "HRESULT RtwqUnregisterPlatformEvents( IRtwqPlatformEvents *platformEvents );",
            "name": "RtwqUnregisterPlatformEvents"
        },
        {
            "signature": "HRESULT RtwqUnregisterPlatformFromMMCSS();",
            "name": "RtwqUnregisterPlatformFromMMCSS"
        }
    ],
    "Sas.h": [
        {
            "signature": "void SendSAS( [in] BOOL AsUser );",
            "name": "SendSAS"
        }
    ],
    "Sbtsv.h": [],
    "Scclient.h": [],
    "Scesvc.h": [
        {
            "signature": "PFSCE_FREE_INFO PfsceFreeInfo; SCESTATUS PfsceFreeInfo( [in] PVOID pvServiceInfo ) {...}",
            "name": "PFSCE_FREE_INFO callback"
        },
        {
            "signature": "PFSCE_LOG_INFO PfsceLogInfo; SCESTATUS PfsceLogInfo( [in] INT ErrLevel, [in] DWORD Win32rc, [in] LPTSTR pErrFmt, ... unnamedParam4 ) {...}",
            "name": "PFSCE_LOG_INFO callback"
        },
        {
            "signature": "PFSCE_QUERY_INFO PfsceQueryInfo; SCESTATUS PfsceQueryInfo( [in] SCE_HANDLE sceHandle, [in] SCESVC_INFO_TYPE sceType, [in, optional] LPTSTR lpPrefix, [in] BOOL bExact, [out] PVOID *ppvInfo, [out] PSCE_ENUMERATION_CONTEXT psceEnumHandle ) {...}",
            "name": "PFSCE_QUERY_INFO callback"
        },
        {
            "signature": "PFSCE_SET_INFO PfsceSetInfo; SCESTATUS PfsceSetInfo( [in] SCE_HANDLE sceHandle, [in] SCESVC_INFO_TYPE sceType, [in, optional] LPTSTR lpPrefix, [in] BOOL bExact, [in] PVOID pvInfo ) {...}",
            "name": "PFSCE_SET_INFO callback"
        }
    ],
    "Schannel.h": [
        {
            "signature": "BOOL SslCrackCertificate( [in] PUCHAR pbCertificate, [in] DWORD cbCertificate, [in] DWORD dwFlags, [out] PX509Certificate *ppCertificate );",
            "name": "SslCrackCertificate"
        },
        {
            "signature": "BOOL SslEmptyCacheA( [in] LPSTR pszTargetName, [in] DWORD dwFlags );",
            "name": "SslEmptyCacheA"
        },
        {
            "signature": "BOOL SslEmptyCacheW( [in] LPWSTR pszTargetName, [in] DWORD dwFlags );",
            "name": "SslEmptyCacheW"
        },
        {
            "signature": "void SslFreeCertificate( [in] PX509Certificate pCertificate );",
            "name": "SslFreeCertificate"
        },
        {
            "signature": "SECURITY_STATUS SslGetServerIdentity( [in] PBYTE ClientHello, [in] DWORD ClientHelloSize, [out] PBYTE *ServerIdentity, [out] PDWORD ServerIdentitySize, [in] DWORD Flags );",
            "name": "SslGetServerIdentity"
        }
    ],
    "Schedule.h": [],
    "Scrnsave.h": [
        {
            "signature": "LRESULT DefScreenSaverProc( HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam );",
            "name": "DefScreenSaverProc"
        },
        {
            "signature": "BOOL RegisterDialogClasses( HANDLE hInst );",
            "name": "RegisterDialogClasses"
        },
        {
            "signature": "BOOL ScreenSaverConfigureDialog( HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam );",
            "name": "ScreenSaverConfigureDialog"
        },
        {
            "signature": "LRESULT ScreenSaverProc( HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam );",
            "name": "ScreenSaverProc"
        }
    ],
    "Scserver.h": [],
    "Sddl.h": [
        {
            "signature": "BOOL ConvertSecurityDescriptorToStringSecurityDescriptorA( [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] DWORD RequestedStringSDRevision, [in] SECURITY_INFORMATION SecurityInformation, [out] LPSTR *StringSecurityDescriptor, [out] PULONG StringSecurityDescriptorLen );",
            "name": "ConvertSecurityDescriptorToStringSecurityDescriptorA"
        },
        {
            "signature": "BOOL ConvertSecurityDescriptorToStringSecurityDescriptorW( [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] DWORD RequestedStringSDRevision, [in] SECURITY_INFORMATION SecurityInformation, [out] LPWSTR *StringSecurityDescriptor, [out] PULONG StringSecurityDescriptorLen );",
            "name": "ConvertSecurityDescriptorToStringSecurityDescriptorW"
        },
        {
            "signature": "BOOL ConvertSidToStringSidA( [in] PSID Sid, [out] LPSTR *StringSid );",
            "name": "ConvertSidToStringSidA"
        },
        {
            "signature": "BOOL ConvertSidToStringSidW( [in] PSID Sid, [out] LPWSTR *StringSid );",
            "name": "ConvertSidToStringSidW"
        },
        {
            "signature": "BOOL ConvertStringSecurityDescriptorToSecurityDescriptorA( [in] LPCSTR StringSecurityDescriptor, [in] DWORD StringSDRevision, [out] PSECURITY_DESCRIPTOR *SecurityDescriptor, [out] PULONG SecurityDescriptorSize );",
            "name": "ConvertStringSecurityDescriptorToSecurityDescriptorA"
        },
        {
            "signature": "BOOL ConvertStringSecurityDescriptorToSecurityDescriptorW( [in] LPCWSTR StringSecurityDescriptor, [in] DWORD StringSDRevision, [out] PSECURITY_DESCRIPTOR *SecurityDescriptor, [out] PULONG SecurityDescriptorSize );",
            "name": "ConvertStringSecurityDescriptorToSecurityDescriptorW"
        },
        {
            "signature": "BOOL ConvertStringSidToSidA( [in] LPCSTR StringSid, [out] PSID *Sid );",
            "name": "ConvertStringSidToSidA"
        },
        {
            "signature": "BOOL ConvertStringSidToSidW( [in] LPCWSTR StringSid, [out] PSID *Sid );",
            "name": "ConvertStringSidToSidW"
        }
    ],
    "Sdoias.h": [],
    "Searchapi.h": [],
    "Secext.h": [
        {
            "signature": "BOOLEAN SEC_ENTRY GetComputerObjectNameA( [in] EXTENDED_NAME_FORMAT NameFormat, [out] LPSTR lpNameBuffer, [in, out] PULONG nSize );",
            "name": "GetComputerObjectNameA"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY GetComputerObjectNameW( [in] EXTENDED_NAME_FORMAT NameFormat, [out] LPWSTR lpNameBuffer, [in, out] PULONG nSize );",
            "name": "GetComputerObjectNameW"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY GetUserNameExA( [in] EXTENDED_NAME_FORMAT NameFormat, [out] LPSTR lpNameBuffer, [in, out] PULONG nSize );",
            "name": "GetUserNameExA"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY GetUserNameExW( [in] EXTENDED_NAME_FORMAT NameFormat, [out] LPWSTR lpNameBuffer, [in, out] PULONG nSize );",
            "name": "GetUserNameExW"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY TranslateNameA( [in] LPCSTR lpAccountName, [in] EXTENDED_NAME_FORMAT AccountNameFormat, [in] EXTENDED_NAME_FORMAT DesiredNameFormat, [out] LPSTR lpTranslatedName, [in, out] PULONG nSize );",
            "name": "TranslateNameA"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY TranslateNameW( [in] LPCWSTR lpAccountName, [in] EXTENDED_NAME_FORMAT AccountNameFormat, [in] EXTENDED_NAME_FORMAT DesiredNameFormat, [out] LPWSTR lpTranslatedName, [in, out] PULONG nSize );",
            "name": "TranslateNameW"
        }
    ],
    "Securityappcontainer.h": [
        {
            "signature": "BOOL GetAppContainerNamedObjectPath( [in, optional] HANDLE Token, [in, optional] PSID AppContainerSid, [in] ULONG ObjectPathLength, [out, optional] LPWSTR ObjectPath, [out] PULONG ReturnLength );",
            "name": "GetAppContainerNamedObjectPath"
        }
    ],
    "Securitybaseapi.h": [
        {
            "signature": "BOOL AccessCheck( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in] PGENERIC_MAPPING GenericMapping, [out, optional] PPRIVILEGE_SET PrivilegeSet, [in, out] LPDWORD PrivilegeSetLength, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus );",
            "name": "AccessCheck"
        },
        {
            "signature": "BOOL AccessCheckAndAuditAlarmW( [in] LPCWSTR SubsystemName, [in, optional] LPVOID HandleId, [in] LPWSTR ObjectTypeName, [in, optional] LPWSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] DWORD DesiredAccess, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckAndAuditAlarmW"
        },
        {
            "signature": "BOOL AccessCheckByType( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [out, optional] PPRIVILEGE_SET PrivilegeSet, [in, out] LPDWORD PrivilegeSetLength, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus );",
            "name": "AccessCheckByType"
        },
        {
            "signature": "BOOL AccessCheckByTypeAndAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] LPCWSTR ObjectTypeName, [in, optional] LPCWSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeAndAuditAlarmW"
        },
        {
            "signature": "BOOL AccessCheckByTypeResultList( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [out] PGENERIC_MAPPING GenericMapping, [out, optional] PPRIVILEGE_SET PrivilegeSet, [in, out] LPDWORD PrivilegeSetLength, [out] LPDWORD GrantedAccessList, [out] LPDWORD AccessStatusList );",
            "name": "AccessCheckByTypeResultList"
        },
        {
            "signature": "BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] HANDLE ClientToken, [in] LPCWSTR ObjectTypeName, [in, optional] LPCWSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, LPDWORD GrantedAccessList, [out] LPDWORD AccessStatusList, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeResultListAndAuditAlarmByHandleW"
        },
        {
            "signature": "BOOL AccessCheckByTypeResultListAndAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] LPCWSTR ObjectTypeName, [in, optional] LPCWSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, LPDWORD GrantedAccessList, [out] LPDWORD AccessStatusList, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeResultListAndAuditAlarmW"
        },
        {
            "signature": "BOOL AddAccessAllowedAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AccessMask, [in] PSID pSid );",
            "name": "AddAccessAllowedAce"
        },
        {
            "signature": "BOOL AddAccessAllowedAceEx( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in] PSID pSid );",
            "name": "AddAccessAllowedAceEx"
        },
        {
            "signature": "BOOL AddAccessAllowedObjectAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in, optional] GUID *ObjectTypeGuid, [in, optional] GUID *InheritedObjectTypeGuid, [in] PSID pSid );",
            "name": "AddAccessAllowedObjectAce"
        },
        {
            "signature": "BOOL AddAccessDeniedAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AccessMask, [in] PSID pSid );",
            "name": "AddAccessDeniedAce"
        },
        {
            "signature": "BOOL AddAccessDeniedAceEx( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in] PSID pSid );",
            "name": "AddAccessDeniedAceEx"
        },
        {
            "signature": "BOOL AddAccessDeniedObjectAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in, optional] GUID *ObjectTypeGuid, [in, optional] GUID *InheritedObjectTypeGuid, [in] PSID pSid );",
            "name": "AddAccessDeniedObjectAce"
        },
        {
            "signature": "BOOL AddAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD dwStartingAceIndex, [in] LPVOID pAceList, [in] DWORD nAceListLength );",
            "name": "AddAce"
        },
        {
            "signature": "BOOL AddAuditAccessAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD dwAccessMask, [in] PSID pSid, [in] BOOL bAuditSuccess, [in] BOOL bAuditFailure );",
            "name": "AddAuditAccessAce"
        },
        {
            "signature": "BOOL AddAuditAccessAceEx( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD dwAccessMask, [in] PSID pSid, [in] BOOL bAuditSuccess, [in] BOOL bAuditFailure );",
            "name": "AddAuditAccessAceEx"
        },
        {
            "signature": "BOOL AddAuditAccessObjectAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in, optional] GUID *ObjectTypeGuid, [in, optional] GUID *InheritedObjectTypeGuid, [in] PSID pSid, [in] BOOL bAuditSuccess, [in] BOOL bAuditFailure );",
            "name": "AddAuditAccessObjectAce"
        },
        {
            "signature": "BOOL AddMandatoryAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD MandatoryPolicy, [in] PSID pLabelSid );",
            "name": "AddMandatoryAce"
        },
        {
            "signature": "BOOL AddResourceAttributeAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in] PSID pSid, [in] PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo, [out] PDWORD pReturnLength );",
            "name": "AddResourceAttributeAce"
        },
        {
            "signature": "BOOL AddScopedPolicyIDAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] DWORD AccessMask, [in] PSID pSid );",
            "name": "AddScopedPolicyIDAce"
        },
        {
            "signature": "BOOL AdjustTokenGroups( [in] HANDLE TokenHandle, [in] BOOL ResetToDefault, [in, optional] PTOKEN_GROUPS NewState, [in] DWORD BufferLength, [out, optional] PTOKEN_GROUPS PreviousState, [out, optional] PDWORD ReturnLength );",
            "name": "AdjustTokenGroups"
        },
        {
            "signature": "BOOL AdjustTokenPrivileges( [in] HANDLE TokenHandle, [in] BOOL DisableAllPrivileges, [in, optional] PTOKEN_PRIVILEGES NewState, [in] DWORD BufferLength, [out, optional] PTOKEN_PRIVILEGES PreviousState, [out, optional] PDWORD ReturnLength );",
            "name": "AdjustTokenPrivileges"
        },
        {
            "signature": "BOOL AllocateAndInitializeSid( [in] PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, [in] BYTE nSubAuthorityCount, [in] DWORD nSubAuthority0, [in] DWORD nSubAuthority1, [in] DWORD nSubAuthority2, [in] DWORD nSubAuthority3, [in] DWORD nSubAuthority4, [in] DWORD nSubAuthority5, [in] DWORD nSubAuthority6, [in] DWORD nSubAuthority7, [out] PSID *pSid );",
            "name": "AllocateAndInitializeSid"
        },
        {
            "signature": "BOOL AllocateLocallyUniqueId( [out] PLUID Luid );",
            "name": "AllocateLocallyUniqueId"
        },
        {
            "signature": "BOOL AreAllAccessesGranted( [in] DWORD GrantedAccess, [in] DWORD DesiredAccess );",
            "name": "AreAllAccessesGranted"
        },
        {
            "signature": "BOOL AreAnyAccessesGranted( [in] DWORD GrantedAccess, [in] DWORD DesiredAccess );",
            "name": "AreAnyAccessesGranted"
        },
        {
            "signature": "BOOL CheckTokenCapability( [in, optional] HANDLE TokenHandle, [in] PSID CapabilitySidToCheck, [out] PBOOL HasCapability );",
            "name": "CheckTokenCapability"
        },
        {
            "signature": "BOOL CheckTokenMembership( [in, optional] HANDLE TokenHandle, [in] PSID SidToCheck, [out] PBOOL IsMember );",
            "name": "CheckTokenMembership"
        },
        {
            "signature": "BOOL CheckTokenMembershipEx( [in, optional] HANDLE TokenHandle, [in] PSID SidToCheck, [in] DWORD Flags, [out] PBOOL IsMember );",
            "name": "CheckTokenMembershipEx"
        },
        {
            "signature": "BOOL ConvertToAutoInheritPrivateObjectSecurity( [in, optional] PSECURITY_DESCRIPTOR ParentDescriptor, [in] PSECURITY_DESCRIPTOR CurrentSecurityDescriptor, [out] PSECURITY_DESCRIPTOR *NewSecurityDescriptor, [in, optional] GUID *ObjectType, [in] BOOLEAN IsDirectoryObject, [in] PGENERIC_MAPPING GenericMapping );",
            "name": "ConvertToAutoInheritPrivateObjectSecurity"
        },
        {
            "signature": "BOOL CopySid( [in] DWORD nDestinationSidLength, [out] PSID pDestinationSid, [in] PSID pSourceSid );",
            "name": "CopySid"
        },
        {
            "signature": "BOOL CreatePrivateObjectSecurity( [in, optional] PSECURITY_DESCRIPTOR ParentDescriptor, [in, optional] PSECURITY_DESCRIPTOR CreatorDescriptor, [out] PSECURITY_DESCRIPTOR *NewDescriptor, [in] BOOL IsDirectoryObject, [in, optional] HANDLE Token, [in] PGENERIC_MAPPING GenericMapping );",
            "name": "CreatePrivateObjectSecurity"
        },
        {
            "signature": "BOOL CreatePrivateObjectSecurityEx( [in, optional] PSECURITY_DESCRIPTOR ParentDescriptor, [in, optional] PSECURITY_DESCRIPTOR CreatorDescriptor, [out] PSECURITY_DESCRIPTOR *NewDescriptor, [in, optional] GUID *ObjectType, [in] BOOL IsContainerObject, [in] ULONG AutoInheritFlags, [in, optional] HANDLE Token, [in] PGENERIC_MAPPING GenericMapping );",
            "name": "CreatePrivateObjectSecurityEx"
        },
        {
            "signature": "BOOL CreatePrivateObjectSecurityWithMultipleInheritance( [in, optional] PSECURITY_DESCRIPTOR ParentDescriptor, [in, optional] PSECURITY_DESCRIPTOR CreatorDescriptor, [out] PSECURITY_DESCRIPTOR *NewDescriptor, [in, optional] GUID **ObjectTypes, [in] ULONG GuidCount, [in] BOOL IsContainerObject, [in] ULONG AutoInheritFlags, [in, optional] HANDLE Token, [in] PGENERIC_MAPPING GenericMapping );",
            "name": "CreatePrivateObjectSecurityWithMultipleInheritance"
        },
        {
            "signature": "BOOL CreateRestrictedToken( [in] HANDLE ExistingTokenHandle, [in] DWORD Flags, [in] DWORD DisableSidCount, [in, optional] PSID_AND_ATTRIBUTES SidsToDisable, [in] DWORD DeletePrivilegeCount, [in, optional] PLUID_AND_ATTRIBUTES PrivilegesToDelete, [in] DWORD RestrictedSidCount, [in, optional] PSID_AND_ATTRIBUTES SidsToRestrict, [out] PHANDLE NewTokenHandle );",
            "name": "CreateRestrictedToken"
        },
        {
            "signature": "BOOL CreateWellKnownSid( [in] WELL_KNOWN_SID_TYPE WellKnownSidType, [in, optional] PSID DomainSid, [out, optional] PSID pSid, [in, out] DWORD *cbSid );",
            "name": "CreateWellKnownSid"
        },
        {
            "signature": "LONG CveEventWrite( [in] PCWSTR CveId, [in, optional] PCWSTR AdditionalDetails );",
            "name": "CveEventWrite"
        },
        {
            "signature": "BOOL DeleteAce( [in, out] PACL pAcl, [in] DWORD dwAceIndex );",
            "name": "DeleteAce"
        },
        {
            "signature": "BOOL DeriveCapabilitySidsFromName( [in] LPCWSTR CapName, [out] PSID **CapabilityGroupSids, [out] DWORD *CapabilityGroupSidCount, [out] PSID **CapabilitySids, [out] DWORD *CapabilitySidCount );",
            "name": "DeriveCapabilitySidsFromName"
        },
        {
            "signature": "BOOL DestroyPrivateObjectSecurity( [in, out] PSECURITY_DESCRIPTOR *ObjectDescriptor );",
            "name": "DestroyPrivateObjectSecurity"
        },
        {
            "signature": "BOOL DuplicateToken( [in] HANDLE ExistingTokenHandle, [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, [out] PHANDLE DuplicateTokenHandle );",
            "name": "DuplicateToken"
        },
        {
            "signature": "BOOL DuplicateTokenEx( [in] HANDLE hExistingToken, [in] DWORD dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpTokenAttributes, [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, [in] TOKEN_TYPE TokenType, [out] PHANDLE phNewToken );",
            "name": "DuplicateTokenEx"
        },
        {
            "signature": "BOOL EqualDomainSid( [in] PSID pSid1, [in] PSID pSid2, [out] BOOL *pfEqual );",
            "name": "EqualDomainSid"
        },
        {
            "signature": "BOOL EqualPrefixSid( [in] PSID pSid1, [in] PSID pSid2 );",
            "name": "EqualPrefixSid"
        },
        {
            "signature": "BOOL EqualSid( [in] PSID pSid1, [in] PSID pSid2 );",
            "name": "EqualSid"
        },
        {
            "signature": "BOOL FindFirstFreeAce( [in] PACL pAcl, [out] LPVOID *pAce );",
            "name": "FindFirstFreeAce"
        },
        {
            "signature": "PVOID FreeSid( [in] PSID pSid );",
            "name": "FreeSid"
        },
        {
            "signature": "BOOL GetAce( [in] PACL pAcl, [in] DWORD dwAceIndex, [out] LPVOID *pAce );",
            "name": "GetAce"
        },
        {
            "signature": "BOOL GetAclInformation( [in] PACL pAcl, [out] LPVOID pAclInformation, [in] DWORD nAclInformationLength, [in] ACL_INFORMATION_CLASS dwAclInformationClass );",
            "name": "GetAclInformation"
        },
        {
            "signature": "BOOL GetFileSecurityW( [in] LPCWSTR lpFileName, [in] SECURITY_INFORMATION RequestedInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "GetFileSecurityW"
        },
        {
            "signature": "BOOL GetKernelObjectSecurity( [in] HANDLE Handle, [in] SECURITY_INFORMATION RequestedInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "GetKernelObjectSecurity"
        },
        {
            "signature": "DWORD GetLengthSid( [in] PSID pSid );",
            "name": "GetLengthSid"
        },
        {
            "signature": "BOOL GetPrivateObjectSecurity( [in] PSECURITY_DESCRIPTOR ObjectDescriptor, [in] SECURITY_INFORMATION SecurityInformation, [out, optional] PSECURITY_DESCRIPTOR ResultantDescriptor, [in] DWORD DescriptorLength, [out] PDWORD ReturnLength );",
            "name": "GetPrivateObjectSecurity"
        },
        {
            "signature": "BOOL GetSecurityDescriptorControl( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] PSECURITY_DESCRIPTOR_CONTROL pControl, [out] LPDWORD lpdwRevision );",
            "name": "GetSecurityDescriptorControl"
        },
        {
            "signature": "BOOL GetSecurityDescriptorDacl( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] LPBOOL lpbDaclPresent, [out] PACL *pDacl, [out] LPBOOL lpbDaclDefaulted );",
            "name": "GetSecurityDescriptorDacl"
        },
        {
            "signature": "BOOL GetSecurityDescriptorGroup( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] PSID *pGroup, [out] LPBOOL lpbGroupDefaulted );",
            "name": "GetSecurityDescriptorGroup"
        },
        {
            "signature": "DWORD GetSecurityDescriptorLength( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "GetSecurityDescriptorLength"
        },
        {
            "signature": "BOOL GetSecurityDescriptorOwner( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] PSID *pOwner, [out] LPBOOL lpbOwnerDefaulted );",
            "name": "GetSecurityDescriptorOwner"
        },
        {
            "signature": "DWORD GetSecurityDescriptorRMControl( [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [out] PUCHAR RMControl );",
            "name": "GetSecurityDescriptorRMControl"
        },
        {
            "signature": "BOOL GetSecurityDescriptorSacl( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [out] LPBOOL lpbSaclPresent, [out] PACL *pSacl, [out] LPBOOL lpbSaclDefaulted );",
            "name": "GetSecurityDescriptorSacl"
        },
        {
            "signature": "PSID_IDENTIFIER_AUTHORITY GetSidIdentifierAuthority( [in] PSID pSid );",
            "name": "GetSidIdentifierAuthority"
        },
        {
            "signature": "DWORD GetSidLengthRequired( [in] UCHAR nSubAuthorityCount );",
            "name": "GetSidLengthRequired"
        },
        {
            "signature": "PDWORD GetSidSubAuthority( [in] PSID pSid, [in] DWORD nSubAuthority );",
            "name": "GetSidSubAuthority"
        },
        {
            "signature": "PUCHAR GetSidSubAuthorityCount( [in] PSID pSid );",
            "name": "GetSidSubAuthorityCount"
        },
        {
            "signature": "BOOL GetTokenInformation( [in] HANDLE TokenHandle, [in] TOKEN_INFORMATION_CLASS TokenInformationClass, [out, optional] LPVOID TokenInformation, [in] DWORD TokenInformationLength, [out] PDWORD ReturnLength );",
            "name": "GetTokenInformation"
        },
        {
            "signature": "BOOL GetWindowsAccountDomainSid( [in] PSID pSid, [out, optional] PSID pDomainSid, [in, out] DWORD *cbDomainSid );",
            "name": "GetWindowsAccountDomainSid"
        },
        {
            "signature": "BOOL ImpersonateAnonymousToken( [in] HANDLE ThreadHandle );",
            "name": "ImpersonateAnonymousToken"
        },
        {
            "signature": "BOOL ImpersonateLoggedOnUser( [in] HANDLE hToken );",
            "name": "ImpersonateLoggedOnUser"
        },
        {
            "signature": "BOOL ImpersonateSelf( [in] SECURITY_IMPERSONATION_LEVEL ImpersonationLevel );",
            "name": "ImpersonateSelf"
        },
        {
            "signature": "BOOL InitializeAcl( [out] PACL pAcl, [in] DWORD nAclLength, [in] DWORD dwAclRevision );",
            "name": "InitializeAcl"
        },
        {
            "signature": "BOOL InitializeSecurityDescriptor( [out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD dwRevision );",
            "name": "InitializeSecurityDescriptor"
        },
        {
            "signature": "BOOL InitializeSid( [out] PSID Sid, [in] PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, [in] BYTE nSubAuthorityCount );",
            "name": "InitializeSid"
        },
        {
            "signature": "BOOL IsTokenRestricted( [in] HANDLE TokenHandle );",
            "name": "IsTokenRestricted"
        },
        {
            "signature": "BOOL IsValidAcl( [in] PACL pAcl );",
            "name": "IsValidAcl"
        },
        {
            "signature": "BOOL IsValidSecurityDescriptor( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "IsValidSecurityDescriptor"
        },
        {
            "signature": "BOOL IsValidSid( [in] PSID pSid );",
            "name": "IsValidSid"
        },
        {
            "signature": "BOOL IsWellKnownSid( [in] PSID pSid, [in] WELL_KNOWN_SID_TYPE WellKnownSidType );",
            "name": "IsWellKnownSid"
        },
        {
            "signature": "BOOL MakeAbsoluteSD( [in] PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, [out, optional] PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, [in, out] LPDWORD lpdwAbsoluteSecurityDescriptorSize, [out, optional] PACL pDacl, [in, out] LPDWORD lpdwDaclSize, [out, optional] PACL pSacl, [in, out] LPDWORD lpdwSaclSize, [out, optional] PSID pOwner, [in, out] LPDWORD lpdwOwnerSize, [out, optional] PSID pPrimaryGroup, [in, out] LPDWORD lpdwPrimaryGroupSize );",
            "name": "MakeAbsoluteSD"
        },
        {
            "signature": "BOOL MakeSelfRelativeSD( [in] PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor, [out, optional] PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor, [in, out] LPDWORD lpdwBufferLength );",
            "name": "MakeSelfRelativeSD"
        },
        {
            "signature": "void MapGenericMask( [in, out] PDWORD AccessMask, [in] PGENERIC_MAPPING GenericMapping );",
            "name": "MapGenericMask"
        },
        {
            "signature": "BOOL ObjectCloseAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] BOOL GenerateOnClose );",
            "name": "ObjectCloseAuditAlarmW"
        },
        {
            "signature": "BOOL ObjectDeleteAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] BOOL GenerateOnClose );",
            "name": "ObjectDeleteAuditAlarmW"
        },
        {
            "signature": "BOOL ObjectOpenAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] LPWSTR ObjectTypeName, [in, optional] LPWSTR ObjectName, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in] DWORD GrantedAccess, [in, optional] PPRIVILEGE_SET Privileges, [in] BOOL ObjectCreation, [in] BOOL AccessGranted, [out] LPBOOL GenerateOnClose );",
            "name": "ObjectOpenAuditAlarmW"
        },
        {
            "signature": "BOOL ObjectPrivilegeAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPVOID HandleId, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in] PPRIVILEGE_SET Privileges, [in] BOOL AccessGranted );",
            "name": "ObjectPrivilegeAuditAlarmW"
        },
        {
            "signature": "BOOL PrivilegeCheck( [in] HANDLE ClientToken, [in, out] PPRIVILEGE_SET RequiredPrivileges, [out] LPBOOL pfResult );",
            "name": "PrivilegeCheck"
        },
        {
            "signature": "BOOL PrivilegedServiceAuditAlarmW( [in] LPCWSTR SubsystemName, [in] LPCWSTR ServiceName, [in] HANDLE ClientToken, [in] PPRIVILEGE_SET Privileges, [in] BOOL AccessGranted );",
            "name": "PrivilegedServiceAuditAlarmW"
        },
        {
            "signature": "void QuerySecurityAccessMask( [in] SECURITY_INFORMATION SecurityInformation, [out] LPDWORD DesiredAccess );",
            "name": "QuerySecurityAccessMask"
        },
        {
            "signature": "BOOL RevertToSelf();",
            "name": "RevertToSelf"
        },
        {
            "signature": "BOOL SetAclInformation( [in, out] PACL pAcl, [in] LPVOID pAclInformation, [in] DWORD nAclInformationLength, [in] ACL_INFORMATION_CLASS dwAclInformationClass );",
            "name": "SetAclInformation"
        },
        {
            "signature": "BOOL SetFileSecurityW( [in] LPCWSTR lpFileName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "SetFileSecurityW"
        },
        {
            "signature": "BOOL SetKernelObjectSecurity( [in] HANDLE Handle, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR SecurityDescriptor );",
            "name": "SetKernelObjectSecurity"
        },
        {
            "signature": "BOOL SetPrivateObjectSecurity( [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR ModificationDescriptor, [in, out] PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, [in] PGENERIC_MAPPING GenericMapping, [in, optional] HANDLE Token );",
            "name": "SetPrivateObjectSecurity"
        },
        {
            "signature": "BOOL SetPrivateObjectSecurityEx( [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR ModificationDescriptor, [in, out] PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor, [in] ULONG AutoInheritFlags, [in] PGENERIC_MAPPING GenericMapping, [in, optional] HANDLE Token );",
            "name": "SetPrivateObjectSecurityEx"
        },
        {
            "signature": "void SetSecurityAccessMask( [in] SECURITY_INFORMATION SecurityInformation, [out] LPDWORD DesiredAccess );",
            "name": "SetSecurityAccessMask"
        },
        {
            "signature": "BOOL SetSecurityDescriptorControl( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest, [in] SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet );",
            "name": "SetSecurityDescriptorControl"
        },
        {
            "signature": "BOOL SetSecurityDescriptorDacl( [in, out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] BOOL bDaclPresent, [in, optional] PACL pDacl, [in] BOOL bDaclDefaulted );",
            "name": "SetSecurityDescriptorDacl"
        },
        {
            "signature": "BOOL SetSecurityDescriptorGroup( [in, out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, optional] PSID pGroup, [in] BOOL bGroupDefaulted );",
            "name": "SetSecurityDescriptorGroup"
        },
        {
            "signature": "BOOL SetSecurityDescriptorOwner( [in, out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, optional] PSID pOwner, [in] BOOL bOwnerDefaulted );",
            "name": "SetSecurityDescriptorOwner"
        },
        {
            "signature": "DWORD SetSecurityDescriptorRMControl( [in, out] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PUCHAR RMControl );",
            "name": "SetSecurityDescriptorRMControl"
        },
        {
            "signature": "BOOL SetSecurityDescriptorSacl( [in, out] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] BOOL bSaclPresent, [in, optional] PACL pSacl, [in] BOOL bSaclDefaulted );",
            "name": "SetSecurityDescriptorSacl"
        },
        {
            "signature": "BOOL SetTokenInformation( [in] HANDLE TokenHandle, [in] TOKEN_INFORMATION_CLASS TokenInformationClass, [in] LPVOID TokenInformation, [in] DWORD TokenInformationLength );",
            "name": "SetTokenInformation"
        }
    ],
    "Sensapi.h": [
        {
            "signature": "BOOL IsDestinationReachableA( [in] LPCSTR lpszDestination, [in, out] LPQOCINFO lpQOCInfo );",
            "name": "IsDestinationReachableA"
        },
        {
            "signature": "BOOL IsDestinationReachableW( [in] LPCWSTR lpszDestination, [in, out] LPQOCINFO lpQOCInfo );",
            "name": "IsDestinationReachableW"
        },
        {
            "signature": "BOOL IsNetworkAlive( [out] LPDWORD lpdwFlags );",
            "name": "IsNetworkAlive"
        }
    ],
    "Sensevts.h": [],
    "Sensorsapi.h": [],
    "Servprov.h": [],
    "Sessdirpublictypes.h": [],
    "Setupapi.h": [
        {
            "signature": "void InstallHinfSectionA( [in] HWND Window, [in] HINSTANCE ModuleHandle, [in] PCSTR CommandLine, [in] INT ShowCommand );",
            "name": "InstallHinfSectionA"
        },
        {
            "signature": "void InstallHinfSectionW( [in] HWND Window, [in] HINSTANCE ModuleHandle, [in] PCWSTR CommandLine, [in] INT ShowCommand );",
            "name": "InstallHinfSectionW"
        },
        {
            "signature": "PSP_FILE_CALLBACK_A PspFileCallbackA; UINT PspFileCallbackA( PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2 ) {...}",
            "name": "PSP_FILE_CALLBACK_A callback"
        },
        {
            "signature": "PSP_FILE_CALLBACK_W PspFileCallbackW; UINT PspFileCallbackW( PVOID Context, UINT Notification, UINT_PTR Param1, UINT_PTR Param2 ) {...}",
            "name": "PSP_FILE_CALLBACK_W callback"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddInstallSectionToDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] PCSTR SectionName, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddInstallSectionToDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddInstallSectionToDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] PCWSTR SectionName, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddInstallSectionToDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddSectionToDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCSTR SectionName, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddSectionToDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddSectionToDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCWSTR SectionName, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddSectionToDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddToDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] PCSTR TargetFilespec, [in] LONGLONG FileSize, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddToDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddToDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] PCWSTR TargetFilespec, [in] LONGLONG FileSize, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupAddToDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddToSourceListA( [in] DWORD Flags, [in] PCSTR Source );",
            "name": "SetupAddToSourceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAddToSourceListW( [in] DWORD Flags, [in] PCWSTR Source );",
            "name": "SetupAddToSourceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAdjustDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] LPCSTR DriveRoot, [in] LONGLONG Amount, PVOID Reserved1, UINT Reserved2 );",
            "name": "SetupAdjustDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupAdjustDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] LPCWSTR DriveRoot, [in] LONGLONG Amount, PVOID Reserved1, UINT Reserved2 );",
            "name": "SetupAdjustDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI UINT SetupBackupErrorA( [in] HWND hwndParent, [in] PCSTR DialogTitle, [in] PCSTR SourceFile, [in] PCSTR TargetFile, [out] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupBackupErrorA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupBackupErrorW( [in] HWND hwndParent, [in] PCWSTR DialogTitle, [in] PCWSTR SourceFile, [in] PCWSTR TargetFile, [out] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupBackupErrorW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCancelTemporarySourceList();",
            "name": "SetupCancelTemporarySourceList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCloseFileQueue( [in] HSPFILEQ QueueHandle );",
            "name": "SetupCloseFileQueue"
        },
        {
            "signature": "WINSETUPAPI VOID SetupCloseInfFile( [in] HINF InfHandle );",
            "name": "SetupCloseInfFile"
        },
        {
            "signature": "WINSETUPAPI VOID SetupCloseLog();",
            "name": "SetupCloseLog"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCommitFileQueueA( [in] HWND Owner, [in] HSPFILEQ QueueHandle, [in] PSP_FILE_CALLBACK_A MsgHandler, [in] PVOID Context );",
            "name": "SetupCommitFileQueueA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCommitFileQueueW( [in] HWND Owner, [in] HSPFILEQ QueueHandle, [in] PSP_FILE_CALLBACK_W MsgHandler, [in] PVOID Context );",
            "name": "SetupCommitFileQueueW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupConfigureWmiFromInfSectionA( [in] HINF InfHandle, [in] PCSTR SectionName, [in] DWORD Flags );",
            "name": "SetupConfigureWmiFromInfSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupConfigureWmiFromInfSectionW( [in] HINF InfHandle, [in] PCWSTR SectionName, [in] DWORD Flags );",
            "name": "SetupConfigureWmiFromInfSectionW"
        },
        {
            "signature": "WINSETUPAPI UINT SetupCopyErrorA( [in] HWND hwndParent, [in] PCSTR DialogTitle, [in] PCSTR DiskName, [in] PCSTR PathToSource, [in] PCSTR SourceFile, [in] PCSTR TargetPathFile, [out] UINT Win32ErrorCode, [in] DWORD Style, [in, out] PSTR PathBuffer, [in] DWORD PathBufferSize, [in, out] PDWORD PathRequiredSize );",
            "name": "SetupCopyErrorA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupCopyErrorW( [in] HWND hwndParent, [in] PCWSTR DialogTitle, [in] PCWSTR DiskName, [in] PCWSTR PathToSource, [in] PCWSTR SourceFile, [in] PCWSTR TargetPathFile, [out] UINT Win32ErrorCode, [in] DWORD Style, [in, out] PWSTR PathBuffer, [in] DWORD PathBufferSize, [in, out] PDWORD PathRequiredSize );",
            "name": "SetupCopyErrorW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCopyOEMInfA( [in] PCSTR SourceInfFileName, [in] PCSTR OEMSourceMediaLocation, [in] DWORD OEMSourceMediaType, [in] DWORD CopyStyle, [out, optional] PSTR DestinationInfFileName, [in] DWORD DestinationInfFileNameSize, [out, optional] PDWORD RequiredSize, [out, optional] PSTR *DestinationInfFileNameComponent );",
            "name": "SetupCopyOEMInfA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupCopyOEMInfW( [in] PCWSTR SourceInfFileName, [in] PCWSTR OEMSourceMediaLocation, [in] DWORD OEMSourceMediaType, [in] DWORD CopyStyle, [out, optional] PWSTR DestinationInfFileName, [in] DWORD DestinationInfFileNameSize, [out, optional] PDWORD RequiredSize, [out, optional] PWSTR *DestinationInfFileNameComponent );",
            "name": "SetupCopyOEMInfW"
        },
        {
            "signature": "WINSETUPAPI HDSKSPC SetupCreateDiskSpaceListA( [in] PVOID Reserved1, [in] DWORD Reserved2, [in] UINT Flags );",
            "name": "SetupCreateDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI HDSKSPC SetupCreateDiskSpaceListW( [in] PVOID Reserved1, [in] DWORD Reserved2, [in] UINT Flags );",
            "name": "SetupCreateDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI DWORD SetupDecompressOrCopyFileA( [in] PCSTR SourceFileName, [in] PCSTR TargetFileName, [in] PUINT CompressionType );",
            "name": "SetupDecompressOrCopyFileA"
        },
        {
            "signature": "WINSETUPAPI DWORD SetupDecompressOrCopyFileW( [in] PCWSTR SourceFileName, [in] PCWSTR TargetFileName, [in] PUINT CompressionType );",
            "name": "SetupDecompressOrCopyFileW"
        },
        {
            "signature": "WINSETUPAPI UINT SetupDefaultQueueCallbackA( [in] PVOID Context, [in] UINT Notification, [in] UINT_PTR Param1, [in] UINT_PTR Param2 );",
            "name": "SetupDefaultQueueCallbackA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupDefaultQueueCallbackW( [in] PVOID Context, [in] UINT Notification, [in] UINT_PTR Param1, [in] UINT_PTR Param2 );",
            "name": "SetupDefaultQueueCallbackW"
        },
        {
            "signature": "WINSETUPAPI UINT SetupDeleteErrorA( [in] HWND hwndParent, [in] PCSTR DialogTitle, [in] PCSTR File, [out] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupDeleteErrorA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupDeleteErrorW( [in] HWND hwndParent, [in] PCWSTR DialogTitle, [in] PCWSTR File, [out] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupDeleteErrorW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDestroyDiskSpaceList( [in, out] HDSKSPC DiskSpace );",
            "name": "SetupDestroyDiskSpaceList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiAskForOEMDisk( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiAskForOEMDisk"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiBuildClassInfoList( [in] DWORD Flags, [out, optional] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize );",
            "name": "SetupDiBuildClassInfoList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiBuildClassInfoListExA( [in] DWORD Flags, [out, optional] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiBuildClassInfoListExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiBuildClassInfoListExW( [in] DWORD Flags, [out, optional] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiBuildClassInfoListExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiBuildDriverInfoList( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD DriverType );",
            "name": "SetupDiBuildDriverInfoList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCallClassInstaller( [in] DI_FUNCTION InstallFunction, [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiCallClassInstaller"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCancelDriverInfoSearch( [in] HDEVINFO DeviceInfoSet );",
            "name": "SetupDiCancelDriverInfoSearch"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiChangeState( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiChangeState"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassGuidsFromNameA( [in] PCSTR ClassName, [out] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize );",
            "name": "SetupDiClassGuidsFromNameA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassGuidsFromNameExA( [in] PCSTR ClassName, [out] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiClassGuidsFromNameExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassGuidsFromNameExW( [in] PCWSTR ClassName, [out] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiClassGuidsFromNameExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassGuidsFromNameW( [in] PCWSTR ClassName, [out] LPGUID ClassGuidList, [in] DWORD ClassGuidListSize, [out] PDWORD RequiredSize );",
            "name": "SetupDiClassGuidsFromNameW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassNameFromGuidA( [in] const GUID *ClassGuid, [out] PSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiClassNameFromGuidA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassNameFromGuidExA( [in] const GUID *ClassGuid, [out] PSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiClassNameFromGuidExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassNameFromGuidExW( [in] const GUID *ClassGuid, [out] PWSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiClassNameFromGuidExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiClassNameFromGuidW( [in] const GUID *ClassGuid, [out] PWSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiClassNameFromGuidW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCreateDeviceInfoA( [in] HDEVINFO DeviceInfoSet, [in] PCSTR DeviceName, [in] const GUID *ClassGuid, [in, optional] PCSTR DeviceDescription, [in, optional] HWND hwndParent, [in] DWORD CreationFlags, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiCreateDeviceInfoA"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiCreateDeviceInfoList( [in, optional] const GUID *ClassGuid, [in, optional] HWND hwndParent );",
            "name": "SetupDiCreateDeviceInfoList"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiCreateDeviceInfoListExA( [in, optional] const GUID *ClassGuid, [in, optional] HWND hwndParent, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiCreateDeviceInfoListExA"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiCreateDeviceInfoListExW( [in, optional] const GUID *ClassGuid, [in, optional] HWND hwndParent, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiCreateDeviceInfoListExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCreateDeviceInfoW( [in] HDEVINFO DeviceInfoSet, [in] PCWSTR DeviceName, [in] const GUID *ClassGuid, [in, optional] PCWSTR DeviceDescription, [in, optional] HWND hwndParent, [in] DWORD CreationFlags, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiCreateDeviceInfoW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCreateDeviceInterfaceA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] const GUID *InterfaceClassGuid, [in, optional] PCSTR ReferenceString, [in] DWORD CreationFlags, [out, optional] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiCreateDeviceInterfaceA"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiCreateDeviceInterfaceRegKeyA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, [in] REGSAM samDesired, [in, optional] HINF InfHandle, [in, optional] PCSTR InfSectionName );",
            "name": "SetupDiCreateDeviceInterfaceRegKeyA"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiCreateDeviceInterfaceRegKeyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, [in] REGSAM samDesired, [in, optional] HINF InfHandle, [in, optional] PCWSTR InfSectionName );",
            "name": "SetupDiCreateDeviceInterfaceRegKeyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiCreateDeviceInterfaceW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] const GUID *InterfaceClassGuid, [in, optional] PCWSTR ReferenceString, [in] DWORD CreationFlags, [out, optional] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiCreateDeviceInterfaceW"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiCreateDevRegKeyA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Scope, [in] DWORD HwProfile, [in] DWORD KeyType, [in, optional] HINF InfHandle, [in, optional] PCSTR InfSectionName );",
            "name": "SetupDiCreateDevRegKeyA"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiCreateDevRegKeyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Scope, [in] DWORD HwProfile, [in] DWORD KeyType, [in, optional] HINF InfHandle, [in, optional] PCWSTR InfSectionName );",
            "name": "SetupDiCreateDevRegKeyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDeleteDeviceInfo( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiDeleteDeviceInfo"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDeleteDeviceInterfaceData( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiDeleteDeviceInterfaceData"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDeleteDeviceInterfaceRegKey( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved );",
            "name": "SetupDiDeleteDeviceInterfaceRegKey"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDeleteDevRegKey( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Scope, [in] DWORD HwProfile, [in] DWORD KeyType );",
            "name": "SetupDiDeleteDevRegKey"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDestroyClassImageList( [in] PSP_CLASSIMAGELIST_DATA ClassImageListData );",
            "name": "SetupDiDestroyClassImageList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDestroyDeviceInfoList( [in] HDEVINFO DeviceInfoSet );",
            "name": "SetupDiDestroyDeviceInfoList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiDestroyDriverInfoList( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD DriverType );",
            "name": "SetupDiDestroyDriverInfoList"
        },
        {
            "signature": "WINSETUPAPI INT SetupDiDrawMiniIcon( [in] HDC hdc, [in] RECT rc, [in] INT MiniIconIndex, [in] DWORD Flags );",
            "name": "SetupDiDrawMiniIcon"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiEnumDeviceInfo( [in] HDEVINFO DeviceInfoSet, [in] DWORD MemberIndex, [out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiEnumDeviceInfo"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiEnumDeviceInterfaces( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] const GUID *InterfaceClassGuid, [in] DWORD MemberIndex, [out] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiEnumDeviceInterfaces"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiEnumDriverInfoA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD DriverType, [in] DWORD MemberIndex, [out] PSP_DRVINFO_DATA_A DriverInfoData );",
            "name": "SetupDiEnumDriverInfoA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiEnumDriverInfoW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD DriverType, [in] DWORD MemberIndex, [out] PSP_DRVINFO_DATA_W DriverInfoData );",
            "name": "SetupDiEnumDriverInfoW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualModelsSectionA( [in] PINFCONTEXT Context, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out, optional] PSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, PVOID Reserved );",
            "name": "SetupDiGetActualModelsSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualModelsSectionW( [in] PINFCONTEXT Context, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out, optional] PWSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, PVOID Reserved );",
            "name": "SetupDiGetActualModelsSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualSectionToInstallA( [in] HINF InfHandle, [in] PCSTR InfSectionName, [out, optional] PSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, [out, optional] PSTR *Extension );",
            "name": "SetupDiGetActualSectionToInstallA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualSectionToInstallExA( [in] HINF InfHandle, [in] PCSTR InfSectionName, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out, optional] PSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, [out, optional] PSTR *Extension, PVOID Reserved );",
            "name": "SetupDiGetActualSectionToInstallExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualSectionToInstallExW( [in] HINF InfHandle, [in] PCWSTR InfSectionName, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out, optional] PWSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, [out, optional] PWSTR *Extension, PVOID Reserved );",
            "name": "SetupDiGetActualSectionToInstallExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetActualSectionToInstallW( [in] HINF InfHandle, [in] PCWSTR InfSectionName, [out, optional] PWSTR InfSectionWithExt, [in] DWORD InfSectionWithExtSize, [out, optional] PDWORD RequiredSize, [out, optional] PWSTR *Extension );",
            "name": "SetupDiGetActualSectionToInstallW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassBitmapIndex( [in, optional] const GUID *ClassGuid, [out] PINT MiniIconIndex );",
            "name": "SetupDiGetClassBitmapIndex"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDescriptionA( [in] const GUID *ClassGuid, [out] PSTR ClassDescription, [in] DWORD ClassDescriptionSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetClassDescriptionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDescriptionExA( [in] const GUID *ClassGuid, [out] PSTR ClassDescription, [in] DWORD ClassDescriptionSize, [out, optional] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassDescriptionExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDescriptionExW( [in] const GUID *ClassGuid, [out] PWSTR ClassDescription, [in] DWORD ClassDescriptionSize, [out, optional] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassDescriptionExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDescriptionW( [in] const GUID *ClassGuid, [out] PWSTR ClassDescription, [in] DWORD ClassDescriptionSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetClassDescriptionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDevPropertySheetsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] LPPROPSHEETHEADERA PropertySheetHeader, [in] DWORD PropertySheetHeaderPageListSize, [out, optional] PDWORD RequiredSize, [in] DWORD PropertySheetType );",
            "name": "SetupDiGetClassDevPropertySheetsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassDevPropertySheetsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] LPPROPSHEETHEADERW PropertySheetHeader, [in] DWORD PropertySheetHeaderPageListSize, [out, optional] PDWORD RequiredSize, [in] DWORD PropertySheetType );",
            "name": "SetupDiGetClassDevPropertySheetsW"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiGetClassDevsA( const GUID *ClassGuid, PCSTR Enumerator, HWND hwndParent, DWORD Flags );",
            "name": "SetupDiGetClassDevsA"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiGetClassDevsExA( [in, optional] const GUID *ClassGuid, [in, optional] PCSTR Enumerator, [in, optional] HWND hwndParent, [in] DWORD Flags, [in, optional] HDEVINFO DeviceInfoSet, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassDevsExA"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiGetClassDevsExW( [in, optional] const GUID *ClassGuid, [in, optional] PCWSTR Enumerator, [in, optional] HWND hwndParent, [in] DWORD Flags, [in, optional] HDEVINFO DeviceInfoSet, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassDevsExW"
        },
        {
            "signature": "WINSETUPAPI HDEVINFO SetupDiGetClassDevsW( [in, optional] const GUID *ClassGuid, [in, optional] PCWSTR Enumerator, [in, optional] HWND hwndParent, [in] DWORD Flags );",
            "name": "SetupDiGetClassDevsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassImageIndex( [in] PSP_CLASSIMAGELIST_DATA ClassImageListData, [in] const GUID *ClassGuid, [out] PINT ImageIndex );",
            "name": "SetupDiGetClassImageIndex"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassImageList( [out] PSP_CLASSIMAGELIST_DATA ClassImageListData );",
            "name": "SetupDiGetClassImageList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassImageListExA( [out] PSP_CLASSIMAGELIST_DATA ClassImageListData, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassImageListExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassImageListExW( [out] PSP_CLASSIMAGELIST_DATA ClassImageListData, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassImageListExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out, optional] PSP_CLASSINSTALL_HEADER ClassInstallParams, [in] DWORD ClassInstallParamsSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetClassInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out, optional] PSP_CLASSINSTALL_HEADER ClassInstallParams, [in] DWORD ClassInstallParamsSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetClassInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassPropertyExW( [in] const GUID *ClassGuid, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out, optional] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in] DWORD Flags, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassPropertyExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassPropertyKeys( [in] const GUID *ClassGuid, [out, optional] DEVPROPKEY *PropertyKeyArray, [in] DWORD PropertyKeyCount, [out, optional] PDWORD RequiredPropertyKeyCount, [in] DWORD Flags );",
            "name": "SetupDiGetClassPropertyKeys"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassPropertyKeysExW( [in] const GUID *ClassGuid, [out, optional] DEVPROPKEY *PropertyKeyArray, [in] DWORD PropertyKeyCount, [out, optional] PDWORD RequiredPropertyKeyCount, [in] DWORD Flags, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassPropertyKeysExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassPropertyW( [in] const GUID *ClassGuid, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in] DWORD Flags );",
            "name": "SetupDiGetClassPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassRegistryPropertyA( [in] const GUID *ClassGuid, [in] DWORD Property, [out, optional] PDWORD PropertyRegDataType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassRegistryPropertyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetClassRegistryPropertyW( [in] const GUID *ClassGuid, [in] DWORD Property, [out, optional] PDWORD PropertyRegDataType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetClassRegistryPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetCustomDevicePropertyA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] PCSTR CustomPropertyName, [in] DWORD Flags, [out, optional] PDWORD PropertyRegDataType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetCustomDevicePropertyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetCustomDevicePropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] PCWSTR CustomPropertyName, [in] DWORD Flags, [out, optional] PDWORD PropertyRegDataType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetCustomDevicePropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInfoListClass( [in] HDEVINFO DeviceInfoSet, [out] LPGUID ClassGuid );",
            "name": "SetupDiGetDeviceInfoListClass"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInfoListDetailA( [in] HDEVINFO DeviceInfoSet, [out] PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData );",
            "name": "SetupDiGetDeviceInfoListDetailA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInfoListDetailW( [in] HDEVINFO DeviceInfoSet, [out] PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData );",
            "name": "SetupDiGetDeviceInfoListDetailW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out] PSP_DEVINSTALL_PARAMS_A DeviceInstallParams );",
            "name": "SetupDiGetDeviceInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out] PSP_DEVINSTALL_PARAMS_W DeviceInstallParams );",
            "name": "SetupDiGetDeviceInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInstanceIdA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [out, optional] PSTR DeviceInstanceId, [in] DWORD DeviceInstanceIdSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDeviceInstanceIdA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInstanceIdW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [out, optional] PWSTR DeviceInstanceId, [in] DWORD DeviceInstanceIdSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDeviceInstanceIdW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInterfaceAlias( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [in] const GUID *AliasInterfaceClassGuid, [out] PSP_DEVICE_INTERFACE_DATA AliasDeviceInterfaceData );",
            "name": "SetupDiGetDeviceInterfaceAlias"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInterfaceDetailA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [out, optional] PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData, [in] DWORD DeviceInterfaceDetailDataSize, [out, optional] PDWORD RequiredSize, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiGetDeviceInterfaceDetailA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInterfaceDetailW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [out, optional] PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData, [in] DWORD DeviceInterfaceDetailDataSize, [out, optional] PDWORD RequiredSize, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiGetDeviceInterfaceDetailW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInterfacePropertyKeys( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [out, optional] DEVPROPKEY *PropertyKeyArray, [in] DWORD PropertyKeyCount, [out, optional] PDWORD RequiredPropertyKeyCount, [in] DWORD Flags );",
            "name": "SetupDiGetDeviceInterfacePropertyKeys"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceInterfacePropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in] DWORD Flags );",
            "name": "SetupDiGetDeviceInterfacePropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDevicePropertyKeys( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [out, optional] DEVPROPKEY *PropertyKeyArray, [in] DWORD PropertyKeyCount, [out, optional] PDWORD RequiredPropertyKeyCount, [in] DWORD Flags );",
            "name": "SetupDiGetDevicePropertyKeys"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDevicePropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] const DEVPROPKEY *PropertyKey, [out] DEVPROPTYPE *PropertyType, [out, optional] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize, [in] DWORD Flags );",
            "name": "SetupDiGetDevicePropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceRegistryPropertyA( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Property, [out, optional] PDWORD PropertyRegDataType, [out, optional] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDeviceRegistryPropertyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDeviceRegistryPropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Property, [out, optional] PDWORD PropertyRegDataType, [out, optional] PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDeviceRegistryPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDriverInfoDetailA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_A DriverInfoData, [in, out] PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData, [in] DWORD DriverInfoDetailDataSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDriverInfoDetailA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDriverInfoDetailW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_W DriverInfoData, [in, out] PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData, [in] DWORD DriverInfoDetailDataSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetDriverInfoDetailW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDriverInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_A DriverInfoData, [out] PSP_DRVINSTALL_PARAMS DriverInstallParams );",
            "name": "SetupDiGetDriverInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetDriverInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_W DriverInfoData, [out] PSP_DRVINSTALL_PARAMS DriverInstallParams );",
            "name": "SetupDiGetDriverInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileFriendlyNameA( [in] DWORD HwProfile, [out] PSTR FriendlyName, [in] DWORD FriendlyNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetHwProfileFriendlyNameA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileFriendlyNameExA( [in] DWORD HwProfile, [out] PSTR FriendlyName, [in] DWORD FriendlyNameSize, [out, optional] PDWORD RequiredSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetHwProfileFriendlyNameExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileFriendlyNameExW( [in] DWORD HwProfile, [out] PWSTR FriendlyName, [in] DWORD FriendlyNameSize, [out, optional] PDWORD RequiredSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetHwProfileFriendlyNameExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileFriendlyNameW( [in] DWORD HwProfile, [out] PWSTR FriendlyName, [in] DWORD FriendlyNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetHwProfileFriendlyNameW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileList( [out] PDWORD HwProfileList, [in] DWORD HwProfileListSize, [out] PDWORD RequiredSize, [out, optional] PDWORD CurrentlyActiveIndex );",
            "name": "SetupDiGetHwProfileList"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileListExA( [out] PDWORD HwProfileList, [in] DWORD HwProfileListSize, [out] PDWORD RequiredSize, [out, optional] PDWORD CurrentlyActiveIndex, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetHwProfileListExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetHwProfileListExW( [out] PDWORD HwProfileList, [in] DWORD HwProfileListSize, [out] PDWORD RequiredSize, [out, optional] PDWORD CurrentlyActiveIndex, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiGetHwProfileListExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetINFClassA( [in] PCSTR InfName, [out] LPGUID ClassGuid, [out] PSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetINFClassA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetINFClassW( [in] PCWSTR InfName, [out] LPGUID ClassGuid, [out] PWSTR ClassName, [in] DWORD ClassNameSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupDiGetINFClassW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetSelectedDevice( [in] HDEVINFO DeviceInfoSet, [out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiGetSelectedDevice"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetSelectedDriverA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out] PSP_DRVINFO_DATA_A DriverInfoData );",
            "name": "SetupDiGetSelectedDriverA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiGetSelectedDriverW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [out] PSP_DRVINFO_DATA_W DriverInfoData );",
            "name": "SetupDiGetSelectedDriverW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallClassA( [in, optional] HWND hwndParent, [in] PCSTR InfFileName, [in] DWORD Flags, [in, optional] HSPFILEQ FileQueue );",
            "name": "SetupDiInstallClassA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallClassExA( [in, optional] HWND hwndParent, [in, optional] PCSTR InfFileName, [in] DWORD Flags, [in, optional] HSPFILEQ FileQueue, [in, optional] const GUID *InterfaceClassGuid, PVOID Reserved1, PVOID Reserved2 );",
            "name": "SetupDiInstallClassExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallClassExW( [in, optional] HWND hwndParent, [in, optional] PCWSTR InfFileName, [in] DWORD Flags, [in, optional] HSPFILEQ FileQueue, [in, optional] const GUID *InterfaceClassGuid, PVOID Reserved1, PVOID Reserved2 );",
            "name": "SetupDiInstallClassExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallClassW( [in, optional] HWND hwndParent, [in] PCWSTR InfFileName, [in] DWORD Flags, [in, optional] HSPFILEQ FileQueue );",
            "name": "SetupDiInstallClassW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallDevice( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiInstallDevice"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallDeviceInterfaces( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiInstallDeviceInterfaces"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiInstallDriverFiles( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiInstallDriverFiles"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiLoadClassIcon( [in] const GUID *ClassGuid, [out, optional] HICON *LargeIcon, [out, optional] PINT MiniIconIndex );",
            "name": "SetupDiLoadClassIcon"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiLoadDeviceIcon( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] UINT cxIcon, [in] UINT cyIcon, [in] DWORD Flags, [out] HICON *hIcon );",
            "name": "SetupDiLoadDeviceIcon"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiOpenClassRegKey( [in, optional] const GUID *ClassGuid, [in] REGSAM samDesired );",
            "name": "SetupDiOpenClassRegKey"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiOpenClassRegKeyExA( [in, optional] const GUID *ClassGuid, [in] REGSAM samDesired, [in] DWORD Flags, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiOpenClassRegKeyExA"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiOpenClassRegKeyExW( [in, optional] const GUID *ClassGuid, [in] REGSAM samDesired, [in] DWORD Flags, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiOpenClassRegKeyExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiOpenDeviceInfoA( [in] HDEVINFO DeviceInfoSet, [in] PCSTR DeviceInstanceId, [in, optional] HWND hwndParent, [in] DWORD OpenFlags, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiOpenDeviceInfoA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiOpenDeviceInfoW( [in] HDEVINFO DeviceInfoSet, [in] PCWSTR DeviceInstanceId, [in, optional] HWND hwndParent, [in] DWORD OpenFlags, [out, optional] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiOpenDeviceInfoW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiOpenDeviceInterfaceA( [in] HDEVINFO DeviceInfoSet, [in] PCSTR DevicePath, [in] DWORD OpenFlags, [out, optional] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiOpenDeviceInterfaceA"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiOpenDeviceInterfaceRegKey( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, DWORD Reserved, [in] REGSAM samDesired );",
            "name": "SetupDiOpenDeviceInterfaceRegKey"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiOpenDeviceInterfaceW( [in] HDEVINFO DeviceInfoSet, [in] PCWSTR DevicePath, [in] DWORD OpenFlags, [out, optional] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiOpenDeviceInterfaceW"
        },
        {
            "signature": "WINSETUPAPI HKEY SetupDiOpenDevRegKey( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Scope, [in] DWORD HwProfile, [in] DWORD KeyType, [in] REGSAM samDesired );",
            "name": "SetupDiOpenDevRegKey"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiRegisterCoDeviceInstallers( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiRegisterCoDeviceInstallers"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiRegisterDeviceInfo( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Flags, [in, optional] PSP_DETSIG_CMPPROC CompareProc, [in, optional] PVOID CompareContext, [out, optional] PSP_DEVINFO_DATA DupDeviceInfoData );",
            "name": "SetupDiRegisterDeviceInfo"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiRemoveDevice( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiRemoveDevice"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiRemoveDeviceInterface( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData );",
            "name": "SetupDiRemoveDeviceInterface"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiRestartDevices( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiRestartDevices"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSelectBestCompatDrv( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiSelectBestCompatDrv"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSelectDevice( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiSelectDevice"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSelectOEMDrv( [in, optional] HWND hwndParent, [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiSelectOEMDrv"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in, optional] PSP_CLASSINSTALL_HEADER ClassInstallParams, [in] DWORD ClassInstallParamsSize );",
            "name": "SetupDiSetClassInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in, optional] PSP_CLASSINSTALL_HEADER ClassInstallParams, [in] DWORD ClassInstallParamsSize );",
            "name": "SetupDiSetClassInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassPropertyExW( [in] const GUID *ClassGuid, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in, optional] const PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [in] DWORD Flags, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiSetClassPropertyExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassPropertyW( [in] const GUID *ClassGuid, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in, optional] const PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [in] DWORD Flags );",
            "name": "SetupDiSetClassPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassRegistryPropertyA( [in] const GUID *ClassGuid, [in] DWORD Property, [in, optional] const BYTE *PropertyBuffer, [in] DWORD PropertyBufferSize, [in, optional] PCSTR MachineName, PVOID Reserved );",
            "name": "SetupDiSetClassRegistryPropertyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetClassRegistryPropertyW( [in] const GUID *ClassGuid, [in] DWORD Property, [in, optional] const BYTE *PropertyBuffer, [in] DWORD PropertyBufferSize, [in, optional] PCWSTR MachineName, PVOID Reserved );",
            "name": "SetupDiSetClassRegistryPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DEVINSTALL_PARAMS_A DeviceInstallParams );",
            "name": "SetupDiSetDeviceInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DEVINSTALL_PARAMS_W DeviceInstallParams );",
            "name": "SetupDiSetDeviceInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceInterfaceDefault( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [in] DWORD Flags, PVOID Reserved );",
            "name": "SetupDiSetDeviceInterfaceDefault"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceInterfacePropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in, optional] const PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [in] DWORD Flags );",
            "name": "SetupDiSetDeviceInterfacePropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDevicePropertyW( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, [in] const DEVPROPKEY *PropertyKey, [in] DEVPROPTYPE PropertyType, [in, optional] const PBYTE PropertyBuffer, [in] DWORD PropertyBufferSize, [in] DWORD Flags );",
            "name": "SetupDiSetDevicePropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceRegistryPropertyA( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Property, [in, optional] const BYTE *PropertyBuffer, [in] DWORD PropertyBufferSize );",
            "name": "SetupDiSetDeviceRegistryPropertyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDeviceRegistryPropertyW( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in] DWORD Property, [in, optional] const BYTE *PropertyBuffer, [in] DWORD PropertyBufferSize );",
            "name": "SetupDiSetDeviceRegistryPropertyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDriverInstallParamsA( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_A DriverInfoData, [in] PSP_DRVINSTALL_PARAMS DriverInstallParams );",
            "name": "SetupDiSetDriverInstallParamsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetDriverInstallParamsW( [in] HDEVINFO DeviceInfoSet, [in, optional] PSP_DEVINFO_DATA DeviceInfoData, [in] PSP_DRVINFO_DATA_W DriverInfoData, [in] PSP_DRVINSTALL_PARAMS DriverInstallParams );",
            "name": "SetupDiSetDriverInstallParamsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetSelectedDevice( [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiSetSelectedDevice"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetSelectedDriverA( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in, out] PSP_DRVINFO_DATA_A DriverInfoData );",
            "name": "SetupDiSetSelectedDriverA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiSetSelectedDriverW( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData, [in, out] PSP_DRVINFO_DATA_W DriverInfoData );",
            "name": "SetupDiSetSelectedDriverW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupDiUnremoveDevice( [in] HDEVINFO DeviceInfoSet, [in, out] PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupDiUnremoveDevice"
        },
        {
            "signature": "WINSETUPAPI HDSKSPC SetupDuplicateDiskSpaceListA( [in] HDSKSPC DiskSpace, PVOID Reserved1, DWORD Reserved2, UINT Flags );",
            "name": "SetupDuplicateDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI HDSKSPC SetupDuplicateDiskSpaceListW( [in] HDSKSPC DiskSpace, PVOID Reserved1, DWORD Reserved2, UINT Flags );",
            "name": "SetupDuplicateDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupEnumInfSectionsA( [in] HINF InfHandle, [in] UINT Index, [out, optional] PSTR Buffer, [in] UINT Size, [out, optional] UINT *SizeNeeded );",
            "name": "SetupEnumInfSectionsA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupEnumInfSectionsW( [in] HINF InfHandle, [in] UINT Index, [out, optional] PWSTR Buffer, [in] UINT Size, [out, optional] UINT *SizeNeeded );",
            "name": "SetupEnumInfSectionsW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFindFirstLineA( [in] HINF InfHandle, [in] PCSTR Section, [in] PCSTR Key, [in, out] PINFCONTEXT Context );",
            "name": "SetupFindFirstLineA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFindFirstLineW( [in] HINF InfHandle, [in] PCWSTR Section, [in] PCWSTR Key, [in, out] PINFCONTEXT Context );",
            "name": "SetupFindFirstLineW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFindNextLine( [in] PINFCONTEXT ContextIn, [out] PINFCONTEXT ContextOut );",
            "name": "SetupFindNextLine"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFindNextMatchLineA( [in] PINFCONTEXT ContextIn, [in] PCSTR Key, [in, out] PINFCONTEXT ContextOut );",
            "name": "SetupFindNextMatchLineA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFindNextMatchLineW( [in] PINFCONTEXT ContextIn, [in] PCWSTR Key, [in, out] PINFCONTEXT ContextOut );",
            "name": "SetupFindNextMatchLineW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFreeSourceListA( [in, out] PCSTR **List, [in] UINT Count );",
            "name": "SetupFreeSourceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupFreeSourceListW( [in, out] PCWSTR **List, [in] UINT Count );",
            "name": "SetupFreeSourceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetBinaryField( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [in, out] PBYTE ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] LPDWORD RequiredSize );",
            "name": "SetupGetBinaryField"
        },
        {
            "signature": "WINSETUPAPI DWORD SetupGetFieldCount( [in] PINFCONTEXT Context );",
            "name": "SetupGetFieldCount"
        },
        {
            "signature": "WINSETUPAPI DWORD SetupGetFileCompressionInfoA( [in] PCSTR SourceFileName, [in, out] PSTR *ActualSourceFileName, [in, out] PDWORD SourceFileSize, [in, out] PDWORD TargetFileSize, [in, out] PUINT CompressionType );",
            "name": "SetupGetFileCompressionInfoA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetFileCompressionInfoExA( [in] PCSTR SourceFileName, [in, out] PSTR ActualSourceFileNameBuffer, [in, out] DWORD ActualSourceFileNameBufferLen, [out] PDWORD RequiredBufferLen, [out] PDWORD SourceFileSize, [out] PDWORD TargetFileSize, [out] PUINT CompressionType );",
            "name": "SetupGetFileCompressionInfoExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetFileCompressionInfoExW( [in] PCWSTR SourceFileName, [in, out] PWSTR ActualSourceFileNameBuffer, [in, out] DWORD ActualSourceFileNameBufferLen, [out] PDWORD RequiredBufferLen, [out] PDWORD SourceFileSize, [out] PDWORD TargetFileSize, [out] PUINT CompressionType );",
            "name": "SetupGetFileCompressionInfoExW"
        },
        {
            "signature": "WINSETUPAPI DWORD SetupGetFileCompressionInfoW( [in] PCWSTR SourceFileName, [in, out] PWSTR *ActualSourceFileName, [in, out] PDWORD SourceFileSize, [in, out] PDWORD TargetFileSize, [in, out] PUINT CompressionType );",
            "name": "SetupGetFileCompressionInfoW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetFileQueueCount( [in] HSPFILEQ FileQueue, [in] UINT SubQueueFileOp, [out] PUINT NumOperations );",
            "name": "SetupGetFileQueueCount"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetFileQueueFlags( [in] HSPFILEQ FileQueue, [out] PDWORD Flags );",
            "name": "SetupGetFileQueueFlags"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfDriverStoreLocationA( [in] PCSTR FileName, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [in, optional] PCSTR LocaleName, [out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupGetInfDriverStoreLocationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfDriverStoreLocationW( [in] PCWSTR FileName, [in, optional] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [in, optional] PCWSTR LocaleName, [out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupGetInfDriverStoreLocationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfFileListA( [in] PCSTR DirectoryPath, [in] DWORD InfStyle, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetInfFileListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfFileListW( [in] PCWSTR DirectoryPath, [in] DWORD InfStyle, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetInfFileListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfInformationA( [in] LPCVOID InfSpec, [in] DWORD SearchControl, [in, out] PSP_INF_INFORMATION ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetInfInformationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfInformationW( [in] LPCVOID InfSpec, [in] DWORD SearchControl, [in, out] PSP_INF_INFORMATION ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetInfInformationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfPublishedNameA( [in] PCSTR DriverStoreLocation, [out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupGetInfPublishedNameA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetInfPublishedNameW( [in] PCWSTR DriverStoreLocation, [out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out, optional] PDWORD RequiredSize );",
            "name": "SetupGetInfPublishedNameW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetIntField( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [out] PINT IntegerValue );",
            "name": "SetupGetIntField"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetLineByIndexA( [in] HINF InfHandle, [in] PCSTR Section, [in] DWORD Index, [in, out] PINFCONTEXT Context );",
            "name": "SetupGetLineByIndexA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetLineByIndexW( [in] HINF InfHandle, [in] PCWSTR Section, [in] DWORD Index, [in, out] PINFCONTEXT Context );",
            "name": "SetupGetLineByIndexW"
        },
        {
            "signature": "WINSETUPAPI LONG SetupGetLineCountA( [in] HINF InfHandle, [in] PCSTR Section );",
            "name": "SetupGetLineCountA"
        },
        {
            "signature": "WINSETUPAPI LONG SetupGetLineCountW( [in] HINF InfHandle, [in] PCWSTR Section );",
            "name": "SetupGetLineCountW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetLineTextA( [in] PINFCONTEXT Context, [in] HINF InfHandle, [in] PCSTR Section, [in] PCSTR Key, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetLineTextA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetLineTextW( [in] PINFCONTEXT Context, [in] HINF InfHandle, [in] PCWSTR Section, [in] PCWSTR Key, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetLineTextW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetMultiSzFieldA( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in] LPDWORD RequiredSize );",
            "name": "SetupGetMultiSzFieldA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetMultiSzFieldW( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in] LPDWORD RequiredSize );",
            "name": "SetupGetMultiSzFieldW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetNonInteractiveMode();",
            "name": "SetupGetNonInteractiveMode"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceFileLocationA( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCSTR FileName, [in, out] PUINT SourceId, [in, out] PSTR ReturnBuffer, [out] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetSourceFileLocationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceFileLocationW( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCWSTR FileName, [in, out] PUINT SourceId, [in, out] PWSTR ReturnBuffer, [out] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetSourceFileLocationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceFileSizeA( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCSTR FileName, [in] PCSTR Section, [in, out] PDWORD FileSize, [in] UINT RoundingFactor );",
            "name": "SetupGetSourceFileSizeA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceFileSizeW( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCWSTR FileName, [in] PCWSTR Section, [in, out] PDWORD FileSize, [in] UINT RoundingFactor );",
            "name": "SetupGetSourceFileSizeW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceInfoA( [in] HINF InfHandle, [in] UINT SourceId, [in] UINT InfoDesired, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetSourceInfoA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetSourceInfoW( [in] HINF InfHandle, [in] UINT SourceId, [in] UINT InfoDesired, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetSourceInfoW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetStringFieldA( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out] PDWORD RequiredSize );",
            "name": "SetupGetStringFieldA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetStringFieldW( [in] PINFCONTEXT Context, [in] DWORD FieldIndex, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [out] PDWORD RequiredSize );",
            "name": "SetupGetStringFieldW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetTargetPathA( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCSTR Section, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetTargetPathA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupGetTargetPathW( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCWSTR Section, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupGetTargetPathW"
        },
        {
            "signature": "WINSETUPAPI SP_LOG_TOKEN SetupGetThreadLogToken();",
            "name": "SetupGetThreadLogToken"
        },
        {
            "signature": "WINSETUPAPI PVOID SetupInitDefaultQueueCallback( [in] HWND OwnerWindow );",
            "name": "SetupInitDefaultQueueCallback"
        },
        {
            "signature": "WINSETUPAPI PVOID SetupInitDefaultQueueCallbackEx( [in] HWND OwnerWindow, [in] HWND AlternateProgressWindow, [in] UINT ProgressMessage, [in] DWORD Reserved1, [in] PVOID Reserved2 );",
            "name": "SetupInitDefaultQueueCallbackEx"
        },
        {
            "signature": "WINSETUPAPI HSPFILELOG SetupInitializeFileLogA( [in] PCSTR LogFileName, [in] DWORD Flags );",
            "name": "SetupInitializeFileLogA"
        },
        {
            "signature": "WINSETUPAPI HSPFILELOG SetupInitializeFileLogW( [in] PCWSTR LogFileName, [in] DWORD Flags );",
            "name": "SetupInitializeFileLogW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFileA( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCSTR SourceFile, [in] PCSTR SourcePathRoot, [in] PCSTR DestinationName, [in] DWORD CopyStyle, [in] PSP_FILE_CALLBACK_A CopyMsgHandler, [in] PVOID Context );",
            "name": "SetupInstallFileA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFileExA( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCSTR SourceFile, [in] PCSTR SourcePathRoot, [in] PCSTR DestinationName, [in] DWORD CopyStyle, [in] PSP_FILE_CALLBACK_A CopyMsgHandler, [in] PVOID Context, [out] PBOOL FileWasInUse );",
            "name": "SetupInstallFileExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFileExW( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCWSTR SourceFile, [in] PCWSTR SourcePathRoot, [in] PCWSTR DestinationName, [in] DWORD CopyStyle, [in] PSP_FILE_CALLBACK_W CopyMsgHandler, [in] PVOID Context, [out] PBOOL FileWasInUse );",
            "name": "SetupInstallFileExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFilesFromInfSectionA( [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] HSPFILEQ FileQueue, [in] PCSTR SectionName, [in] PCSTR SourceRootPath, [in] UINT CopyFlags );",
            "name": "SetupInstallFilesFromInfSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFilesFromInfSectionW( [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] HSPFILEQ FileQueue, [in] PCWSTR SectionName, [in] PCWSTR SourceRootPath, [in] UINT CopyFlags );",
            "name": "SetupInstallFilesFromInfSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFileW( [in] HINF InfHandle, [in] PINFCONTEXT InfContext, [in] PCWSTR SourceFile, [in] PCWSTR SourcePathRoot, [in] PCWSTR DestinationName, [in] DWORD CopyStyle, [in] PSP_FILE_CALLBACK_W CopyMsgHandler, [in] PVOID Context );",
            "name": "SetupInstallFileW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFromInfSectionA( HWND Owner, HINF InfHandle, PCSTR SectionName, UINT Flags, HKEY RelativeKeyRoot, PCSTR SourceRootPath, UINT CopyFlags, PSP_FILE_CALLBACK_A MsgHandler, PVOID Context, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupInstallFromInfSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallFromInfSectionW( HWND Owner, HINF InfHandle, PCWSTR SectionName, UINT Flags, HKEY RelativeKeyRoot, PCWSTR SourceRootPath, UINT CopyFlags, PSP_FILE_CALLBACK_W MsgHandler, PVOID Context, HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA DeviceInfoData );",
            "name": "SetupInstallFromInfSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallServicesFromInfSectionA( [in] HINF InfHandle, [in] PCSTR SectionName, [in] DWORD Flags );",
            "name": "SetupInstallServicesFromInfSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallServicesFromInfSectionExA( [in] HINF InfHandle, [in] PCSTR SectionName, [in] DWORD Flags, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, PVOID Reserved1, PVOID Reserved2 );",
            "name": "SetupInstallServicesFromInfSectionExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallServicesFromInfSectionExW( [in] HINF InfHandle, [in] PCWSTR SectionName, [in] DWORD Flags, [in] HDEVINFO DeviceInfoSet, [in] PSP_DEVINFO_DATA DeviceInfoData, PVOID Reserved1, PVOID Reserved2 );",
            "name": "SetupInstallServicesFromInfSectionExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupInstallServicesFromInfSectionW( [in] HINF InfHandle, [in] PCWSTR SectionName, [in] DWORD Flags );",
            "name": "SetupInstallServicesFromInfSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupIterateCabinetA( [in] PCSTR CabinetFile, [in] DWORD Reserved, [in] PSP_FILE_CALLBACK_A MsgHandler, [in] PVOID Context );",
            "name": "SetupIterateCabinetA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupIterateCabinetW( [in] PCWSTR CabinetFile, [in] DWORD Reserved, [in] PSP_FILE_CALLBACK_W MsgHandler, [in] PVOID Context );",
            "name": "SetupIterateCabinetW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupLogErrorA( [in] LPCSTR MessageString, [in] LogSeverity Severity );",
            "name": "SetupLogErrorA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupLogErrorW( [in] LPCWSTR MessageString, [in] LogSeverity Severity );",
            "name": "SetupLogErrorW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupLogFileA( [in] HSPFILELOG FileLogHandle, [in] PCSTR LogSectionName, [in] PCSTR SourceFilename, [in] PCSTR TargetFilename, [in] DWORD Checksum, [in] PCSTR DiskTagfile, [in] PCSTR DiskDescription, [in] PCSTR OtherInfo, [in] DWORD Flags );",
            "name": "SetupLogFileA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupLogFileW( [in] HSPFILELOG FileLogHandle, [in] PCWSTR LogSectionName, [in] PCWSTR SourceFilename, [in] PCWSTR TargetFilename, [in] DWORD Checksum, [in] PCWSTR DiskTagfile, [in] PCWSTR DiskDescription, [in] PCWSTR OtherInfo, [in] DWORD Flags );",
            "name": "SetupLogFileW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupOpenAppendInfFileA( [in] PCSTR FileName, [in] HINF InfHandle, [in, out] PUINT ErrorLine );",
            "name": "SetupOpenAppendInfFileA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupOpenAppendInfFileW( [in] PCWSTR FileName, [in] HINF InfHandle, [in, out] PUINT ErrorLine );",
            "name": "SetupOpenAppendInfFileW"
        },
        {
            "signature": "WINSETUPAPI HSPFILEQ SetupOpenFileQueue();",
            "name": "SetupOpenFileQueue"
        },
        {
            "signature": "WINSETUPAPI HINF SetupOpenInfFileA( [in] PCSTR FileName, [in] PCSTR InfClass, [in] DWORD InfStyle, [in] PUINT ErrorLine );",
            "name": "SetupOpenInfFileA"
        },
        {
            "signature": "WINSETUPAPI HINF SetupOpenInfFileW( [in] PCWSTR FileName, [in] PCWSTR InfClass, [in] DWORD InfStyle, [in] PUINT ErrorLine );",
            "name": "SetupOpenInfFileW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupOpenLog( [in] BOOL Erase );",
            "name": "SetupOpenLog"
        },
        {
            "signature": "WINSETUPAPI HINF SetupOpenMasterInf();",
            "name": "SetupOpenMasterInf"
        },
        {
            "signature": "WINSETUPAPI UINT SetupPromptForDiskA( [in] HWND hwndParent, [in] PCSTR DialogTitle, [in] PCSTR DiskName, [in] PCSTR PathToSource, [in] PCSTR FileSought, [in] PCSTR TagFile, [in] DWORD DiskPromptStyle, [in, out] PSTR PathBuffer, [in] DWORD PathBufferSize, [in, out] PDWORD PathRequiredSize );",
            "name": "SetupPromptForDiskA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupPromptForDiskW( [in] HWND hwndParent, [in] PCWSTR DialogTitle, [in] PCWSTR DiskName, [in] PCWSTR PathToSource, [in] PCWSTR FileSought, [in] PCWSTR TagFile, [in] DWORD DiskPromptStyle, [in, out] PWSTR PathBuffer, [in] DWORD PathBufferSize, [in, out] PDWORD PathRequiredSize );",
            "name": "SetupPromptForDiskW"
        },
        {
            "signature": "WINSETUPAPI INT SetupPromptReboot( [in] HSPFILEQ FileQueue, [in] HWND Owner, [in] BOOL ScanOnly );",
            "name": "SetupPromptReboot"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryDrivesInDiskSpaceListA( [in] HDSKSPC DiskSpace, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryDrivesInDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryDrivesInDiskSpaceListW( [in] HDSKSPC DiskSpace, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryDrivesInDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryFileLogA( [in] HSPFILELOG FileLogHandle, [in] PCSTR LogSectionName, [in] PCSTR TargetFilename, [in] SetupFileLogInfo DesiredInfo, [in, out] PSTR DataOut, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryFileLogA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryFileLogW( [in] HSPFILELOG FileLogHandle, [in] PCWSTR LogSectionName, [in] PCWSTR TargetFilename, [in] SetupFileLogInfo DesiredInfo, [in, out] PWSTR DataOut, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryFileLogW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfFileInformationA( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryInfFileInformationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfFileInformationW( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryInfFileInformationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfOriginalFileInformationA( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out] PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo );",
            "name": "SetupQueryInfOriginalFileInformationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfOriginalFileInformationW( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [out] PSP_ORIGINAL_FILE_INFO_W OriginalFileInfo );",
            "name": "SetupQueryInfOriginalFileInformationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfVersionInformationA( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in] PCSTR Key, [in, out] PSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryInfVersionInformationA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueryInfVersionInformationW( [in] PSP_INF_INFORMATION InfInformation, [in] UINT InfIndex, [in] PCWSTR Key, [in, out] PWSTR ReturnBuffer, [in] DWORD ReturnBufferSize, [in, out] PDWORD RequiredSize );",
            "name": "SetupQueryInfVersionInformationW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQuerySourceListA( [in] DWORD Flags, [in, out] PCSTR **List, [in, out] PUINT Count );",
            "name": "SetupQuerySourceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQuerySourceListW( [in] DWORD Flags, [in, out] PCWSTR **List, [in, out] PUINT Count );",
            "name": "SetupQuerySourceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQuerySpaceRequiredOnDriveA( [in] HDSKSPC DiskSpace, [in] PCSTR DriveSpec, [out] LONGLONG *SpaceRequired, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupQuerySpaceRequiredOnDriveA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQuerySpaceRequiredOnDriveW( [in] HDSKSPC DiskSpace, [in] PCWSTR DriveSpec, [out] LONGLONG *SpaceRequired, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupQuerySpaceRequiredOnDriveW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopyA( [in] HSPFILEQ QueueHandle, [in] PCSTR SourceRootPath, [in] PCSTR SourcePath, [in] PCSTR SourceFilename, [in] PCSTR SourceDescription, [in] PCSTR SourceTagfile, [in] PCSTR TargetDirectory, [in] PCSTR TargetFilename, [in] DWORD CopyStyle );",
            "name": "SetupQueueCopyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopyIndirectA( [in] PSP_FILE_COPY_PARAMS_A CopyParams );",
            "name": "SetupQueueCopyIndirectA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopyIndirectW( [in] PSP_FILE_COPY_PARAMS_W CopyParams );",
            "name": "SetupQueueCopyIndirectW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopySectionA( [in] HSPFILEQ QueueHandle, [in] PCSTR SourceRootPath, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCSTR Section, [in] DWORD CopyStyle );",
            "name": "SetupQueueCopySectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopySectionW( [in] HSPFILEQ QueueHandle, [in] PCWSTR SourceRootPath, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCWSTR Section, [in] DWORD CopyStyle );",
            "name": "SetupQueueCopySectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueCopyW( [in] HSPFILEQ QueueHandle, [in] PCWSTR SourceRootPath, [in] PCWSTR SourcePath, [in] PCWSTR SourceFilename, [in] PCWSTR SourceDescription, [in] PCWSTR SourceTagfile, [in] PCWSTR TargetDirectory, [in] PCWSTR TargetFilename, [in] DWORD CopyStyle );",
            "name": "SetupQueueCopyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDefaultCopyA( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] PCSTR SourceRootPath, [in] PCSTR SourceFilename, [in] PCSTR TargetFilename, [in] DWORD CopyStyle );",
            "name": "SetupQueueDefaultCopyA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDefaultCopyW( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] PCWSTR SourceRootPath, [in] PCWSTR SourceFilename, [in] PCWSTR TargetFilename, [in] DWORD CopyStyle );",
            "name": "SetupQueueDefaultCopyW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDeleteA( [in] HSPFILEQ QueueHandle, [in] PCSTR PathPart1, [in] PCSTR PathPart2 );",
            "name": "SetupQueueDeleteA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDeleteSectionA( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCSTR Section );",
            "name": "SetupQueueDeleteSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDeleteSectionW( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCWSTR Section );",
            "name": "SetupQueueDeleteSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueDeleteW( [in] HSPFILEQ QueueHandle, [in] PCWSTR PathPart1, [in] PCWSTR PathPart2 );",
            "name": "SetupQueueDeleteW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueRenameA( [in] HSPFILEQ QueueHandle, [in] PCSTR SourcePath, [in] PCSTR SourceFilename, [in] PCSTR TargetPath, [in] PCSTR TargetFilename );",
            "name": "SetupQueueRenameA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueRenameSectionA( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCSTR Section );",
            "name": "SetupQueueRenameSectionA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueRenameSectionW( [in] HSPFILEQ QueueHandle, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCWSTR Section );",
            "name": "SetupQueueRenameSectionW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupQueueRenameW( [in] HSPFILEQ QueueHandle, [in] PCWSTR SourcePath, [in] PCWSTR SourceFilename, [in] PCWSTR TargetPath, [in] PCWSTR TargetFilename );",
            "name": "SetupQueueRenameW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFileLogEntryA( [in] HSPFILELOG FileLogHandle, [in] PCSTR LogSectionName, [in] PCSTR TargetFilename );",
            "name": "SetupRemoveFileLogEntryA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFileLogEntryW( [in] HSPFILELOG FileLogHandle, [in] PCWSTR LogSectionName, [in] PCWSTR TargetFilename );",
            "name": "SetupRemoveFileLogEntryW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFromDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] PCSTR TargetFilespec, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveFromDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFromDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] PCWSTR TargetFilespec, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveFromDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFromSourceListA( [in] DWORD Flags, [in] PCSTR Source );",
            "name": "SetupRemoveFromSourceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveFromSourceListW( [in] DWORD Flags, [in] PCWSTR Source );",
            "name": "SetupRemoveFromSourceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveInstallSectionFromDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] PCSTR SectionName, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveInstallSectionFromDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveInstallSectionFromDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF LayoutInfHandle, [in] PCWSTR SectionName, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveInstallSectionFromDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveSectionFromDiskSpaceListA( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCSTR SectionName, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveSectionFromDiskSpaceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupRemoveSectionFromDiskSpaceListW( [in] HDSKSPC DiskSpace, [in] HINF InfHandle, [in] HINF ListInfHandle, [in] PCWSTR SectionName, [in] UINT Operation, [in] PVOID Reserved1, [in] UINT Reserved2 );",
            "name": "SetupRemoveSectionFromDiskSpaceListW"
        },
        {
            "signature": "WINSETUPAPI UINT SetupRenameErrorA( [in] HWND hwndParent, [in] PCSTR DialogTitle, [in] PCSTR SourceFile, [in] PCSTR TargetFile, [in] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupRenameErrorA"
        },
        {
            "signature": "WINSETUPAPI UINT SetupRenameErrorW( [in] HWND hwndParent, [in] PCWSTR DialogTitle, [in] PCWSTR SourceFile, [in] PCWSTR TargetFile, [in] UINT Win32ErrorCode, [in] DWORD Style );",
            "name": "SetupRenameErrorW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupScanFileQueueA( [in] HSPFILEQ FileQueue, [in] DWORD Flags, [in] HWND Window, [in] PSP_FILE_CALLBACK_A CallbackRoutine, [in] PVOID CallbackContext, [out] PDWORD Result );",
            "name": "SetupScanFileQueueA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupScanFileQueueW( [in] HSPFILEQ FileQueue, [in] DWORD Flags, [in] HWND Window, [in] PSP_FILE_CALLBACK_W CallbackRoutine, [in] PVOID CallbackContext, [out] PDWORD Result );",
            "name": "SetupScanFileQueueW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetDirectoryIdA( [in] HINF InfHandle, [in] DWORD Id, [in] PCSTR Directory );",
            "name": "SetupSetDirectoryIdA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetDirectoryIdExA( [in] HINF InfHandle, [in] DWORD Id, [in] PCSTR Directory, [in] DWORD Flags, DWORD Reserved1, PVOID Reserved2 );",
            "name": "SetupSetDirectoryIdExA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetDirectoryIdExW( [in] HINF InfHandle, [in] DWORD Id, [in] PCWSTR Directory, [in] DWORD Flags, DWORD Reserved1, PVOID Reserved2 );",
            "name": "SetupSetDirectoryIdExW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetDirectoryIdW( [in] HINF InfHandle, [in] DWORD Id, [in] PCWSTR Directory );",
            "name": "SetupSetDirectoryIdW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetFileQueueAlternatePlatformA( [in] HSPFILEQ QueueHandle, [in] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [in] PCSTR AlternateDefaultCatalogFile );",
            "name": "SetupSetFileQueueAlternatePlatformA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetFileQueueAlternatePlatformW( [in] HSPFILEQ QueueHandle, [in] PSP_ALTPLATFORM_INFO AlternatePlatformInfo, [in] PCWSTR AlternateDefaultCatalogFile );",
            "name": "SetupSetFileQueueAlternatePlatformW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetFileQueueFlags( [in] HSPFILEQ FileQueue, [in] DWORD FlagMask, [in] DWORD Flags );",
            "name": "SetupSetFileQueueFlags"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetNonInteractiveMode( [in] BOOL NonInteractiveFlag );",
            "name": "SetupSetNonInteractiveMode"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetPlatformPathOverrideA( [in] PCSTR Override );",
            "name": "SetupSetPlatformPathOverrideA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetPlatformPathOverrideW( [in] PCWSTR Override );",
            "name": "SetupSetPlatformPathOverrideW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetSourceListA( [in] DWORD Flags, [in] PCSTR *SourceList, [in] UINT SourceCount );",
            "name": "SetupSetSourceListA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupSetSourceListW( [in] DWORD Flags, [in] PCWSTR *SourceList, [in] UINT SourceCount );",
            "name": "SetupSetSourceListW"
        },
        {
            "signature": "WINSETUPAPI VOID SetupSetThreadLogToken( [in] SP_LOG_TOKEN LogToken );",
            "name": "SetupSetThreadLogToken"
        },
        {
            "signature": "WINSETUPAPI VOID SetupTermDefaultQueueCallback( [in] PVOID Context );",
            "name": "SetupTermDefaultQueueCallback"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupTerminateFileLog( [in] HSPFILELOG FileLogHandle );",
            "name": "SetupTerminateFileLog"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupUninstallNewlyCopiedInfs( [in] HSPFILEQ FileQueue, [in] DWORD Flags, [in] PVOID Reserved );",
            "name": "SetupUninstallNewlyCopiedInfs"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupUninstallOEMInfA( [in] PCSTR InfFileName, [in] DWORD Flags, [in] PVOID Reserved );",
            "name": "SetupUninstallOEMInfA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupUninstallOEMInfW( [in] PCWSTR InfFileName, [in] DWORD Flags, [in] PVOID Reserved );",
            "name": "SetupUninstallOEMInfW"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupVerifyInfFileA( [in] PCSTR InfName, [in] PSP_ALTPLATFORM_INFO AltPlatformInfo, [out] PSP_INF_SIGNER_INFO_A InfSignerInfo );",
            "name": "SetupVerifyInfFileA"
        },
        {
            "signature": "WINSETUPAPI BOOL SetupVerifyInfFileW( [in] PCWSTR InfName, [in] PSP_ALTPLATFORM_INFO AltPlatformInfo, [out] PSP_INF_SIGNER_INFO_W InfSignerInfo );",
            "name": "SetupVerifyInfFileW"
        },
        {
            "signature": "WINSETUPAPI VOID SetupWriteTextLog( [in] SP_LOG_TOKEN LogToken, [in] DWORD Category, [in] DWORD Flags, [in] PCSTR MessageStr, ... );",
            "name": "SetupWriteTextLog"
        },
        {
            "signature": "WINSETUPAPI VOID SetupWriteTextLogError( [in] SP_LOG_TOKEN LogToken, [in] DWORD Category, [in] DWORD LogFlags, [in] DWORD Error, [in] PCSTR MessageStr, ... );",
            "name": "SetupWriteTextLogError"
        },
        {
            "signature": "WINSETUPAPI VOID SetupWriteTextLogInfLine( [in] SP_LOG_TOKEN LogToken, [in] DWORD Flags, [in] HINF InfHandle, [in] PINFCONTEXT Context );",
            "name": "SetupWriteTextLogInfLine"
        }
    ],
    "Sfc.h": [
        {
            "signature": "BOOL SfcGetNextProtectedFile( [in] HANDLE RpcHandle, [in, out] PPROTECTED_FILE_DATA ProtFileData );",
            "name": "SfcGetNextProtectedFile"
        },
        {
            "signature": "BOOL SfcIsFileProtected( [in] HANDLE RpcHandle, [in] LPCWSTR ProtFileName );",
            "name": "SfcIsFileProtected"
        },
        {
            "signature": "BOOL SfcIsKeyProtected( [in] HKEY KeyHandle, [in, optional] LPCWSTR SubKeyName, [in] REGSAM KeySam );",
            "name": "SfcIsKeyProtected"
        }
    ],
    "Shappmgr.h": [],
    "Sharewindowcommandsourceinterop.h": [],
    "Shcore.h": [
        {
            "signature": "HRESULT CreateRandomAccessStreamOnFile( [in] PCWSTR filePath, [in] DWORD accessMode, [in] REFIID riid, [out] void **ppv );",
            "name": "CreateRandomAccessStreamOnFile"
        },
        {
            "signature": "HRESULT CreateRandomAccessStreamOverStream( [in] IStream *stream, [in] BSOS_OPTIONS options, [in] REFIID riid, [out] void **ppv );",
            "name": "CreateRandomAccessStreamOverStream"
        },
        {
            "signature": "HRESULT CreateStreamOverRandomAccessStream( [in] IUnknown *randomAccessStream, [in] REFIID riid, [out] void **ppv );",
            "name": "CreateStreamOverRandomAccessStream"
        }
    ],
    "Shdeprecated.h": [],
    "Shellapi.h": [
        {
            "signature": "SHSTDAPI AssocCreateForClasses( [in] const ASSOCIATIONELEMENT *rgClasses, [in] ULONG cClasses, [in] REFIID riid, [out] void **ppv );",
            "name": "AssocCreateForClasses"
        },
        {
            "signature": "LPWSTR * CommandLineToArgvW( [in] LPCWSTR lpCmdLine, [out] int *pNumArgs );",
            "name": "CommandLineToArgvW"
        },
        {
            "signature": "DWORD DoEnvironmentSubstA( [in, out] LPSTR pszSrc, UINT cchSrc );",
            "name": "DoEnvironmentSubstA"
        },
        {
            "signature": "DWORD DoEnvironmentSubstW( [in, out] LPWSTR pszSrc, UINT cchSrc );",
            "name": "DoEnvironmentSubstW"
        },
        {
            "signature": "void DragAcceptFiles( HWND hWnd, BOOL fAccept );",
            "name": "DragAcceptFiles"
        },
        {
            "signature": "void DragFinish( HDROP hDrop );",
            "name": "DragFinish"
        },
        {
            "signature": "UINT DragQueryFileA( [in] HDROP hDrop, [in] UINT iFile, [out] LPSTR lpszFile, UINT cch );",
            "name": "DragQueryFileA"
        },
        {
            "signature": "UINT DragQueryFileW( [in] HDROP hDrop, [in] UINT iFile, [out] LPWSTR lpszFile, UINT cch );",
            "name": "DragQueryFileW"
        },
        {
            "signature": "BOOL DragQueryPoint( [in] HDROP hDrop, [out] POINT *ppt );",
            "name": "DragQueryPoint"
        },
        {
            "signature": "HICON DuplicateIcon( [in] HINSTANCE hInst, [in] HICON hIcon );",
            "name": "DuplicateIcon"
        },
        {
            "signature": "HICON ExtractAssociatedIconA( [in] HINSTANCE hInst, [in, out] LPSTR pszIconPath, [in, out] WORD *piIcon );",
            "name": "ExtractAssociatedIconA"
        },
        {
            "signature": "HICON ExtractAssociatedIconExA( [in] HINSTANCE hInst, [in, out] LPSTR pszIconPath, [in, out] WORD *piIconIndex, [in, out] WORD *piIconId );",
            "name": "ExtractAssociatedIconExA"
        },
        {
            "signature": "HICON ExtractAssociatedIconExW( [in] HINSTANCE hInst, [in, out] LPWSTR pszIconPath, [in, out] WORD *piIconIndex, [in, out] WORD *piIconId );",
            "name": "ExtractAssociatedIconExW"
        },
        {
            "signature": "HICON ExtractAssociatedIconW( [in] HINSTANCE hInst, [in, out] LPWSTR pszIconPath, [in, out] WORD *piIcon );",
            "name": "ExtractAssociatedIconW"
        },
        {
            "signature": "HICON ExtractIconA( [in] HINSTANCE hInst, [in] LPCSTR pszExeFileName, UINT nIconIndex );",
            "name": "ExtractIconA"
        },
        {
            "signature": "UINT ExtractIconExA( [in] LPCSTR lpszFile, [in] int nIconIndex, [out] HICON *phiconLarge, [out] HICON *phiconSmall, UINT nIcons );",
            "name": "ExtractIconExA"
        },
        {
            "signature": "UINT ExtractIconExW( [in] LPCWSTR lpszFile, [in] int nIconIndex, [out] HICON *phiconLarge, [out] HICON *phiconSmall, UINT nIcons );",
            "name": "ExtractIconExW"
        },
        {
            "signature": "HICON ExtractIconW( [in] HINSTANCE hInst, [in] LPCWSTR pszExeFileName, UINT nIconIndex );",
            "name": "ExtractIconW"
        },
        {
            "signature": "HINSTANCE FindExecutableA( [in] LPCSTR lpFile, [in, optional] LPCSTR lpDirectory, [out] LPSTR lpResult );",
            "name": "FindExecutableA"
        },
        {
            "signature": "HINSTANCE FindExecutableW( [in] LPCWSTR lpFile, [in, optional] LPCWSTR lpDirectory, [out] LPWSTR lpResult );",
            "name": "FindExecutableW"
        },
        {
            "signature": "BOOL InitNetworkAddressControl();",
            "name": "InitNetworkAddressControl"
        },
        {
            "signature": "UINT_PTR SHAppBarMessage( [in] DWORD dwMessage, [in, out] PAPPBARDATA pData );",
            "name": "SHAppBarMessage"
        },
        {
            "signature": "BOOL SHCreateProcessAsUserW( [in, out] PSHCREATEPROCESSINFOW pscpi );",
            "name": "SHCreateProcessAsUserW"
        },
        {
            "signature": "BOOL Shell_NotifyIconA( [in] DWORD dwMessage, [in] PNOTIFYICONDATAA lpData );",
            "name": "Shell_NotifyIconA"
        },
        {
            "signature": "SHSTDAPI Shell_NotifyIconGetRect( [in] const NOTIFYICONIDENTIFIER *identifier, [out] RECT *iconLocation );",
            "name": "Shell_NotifyIconGetRect"
        },
        {
            "signature": "BOOL Shell_NotifyIconW( [in] DWORD dwMessage, [in] PNOTIFYICONDATAW lpData );",
            "name": "Shell_NotifyIconW"
        },
        {
            "signature": "INT ShellAboutA( [in, optional] HWND hWnd, [in] LPCSTR szApp, [in, optional] LPCSTR szOtherStuff, [in, optional] HICON hIcon );",
            "name": "ShellAboutA"
        },
        {
            "signature": "INT ShellAboutW( [in, optional] HWND hWnd, [in] LPCWSTR szApp, [in, optional] LPCWSTR szOtherStuff, [in, optional] HICON hIcon );",
            "name": "ShellAboutW"
        },
        {
            "signature": "HINSTANCE ShellExecuteA( [in, optional] HWND hwnd, [in, optional] LPCSTR lpOperation, [in] LPCSTR lpFile, [in, optional] LPCSTR lpParameters, [in, optional] LPCSTR lpDirectory, [in] INT nShowCmd );",
            "name": "ShellExecuteA"
        },
        {
            "signature": "BOOL ShellExecuteExA( [in, out] SHELLEXECUTEINFOA *pExecInfo );",
            "name": "ShellExecuteExA"
        },
        {
            "signature": "BOOL ShellExecuteExW( [in, out] SHELLEXECUTEINFOW *pExecInfo );",
            "name": "ShellExecuteExW"
        },
        {
            "signature": "HINSTANCE ShellExecuteW( [in, optional] HWND hwnd, [in, optional] LPCWSTR lpOperation, [in] LPCWSTR lpFile, [in, optional] LPCWSTR lpParameters, [in, optional] LPCWSTR lpDirectory, [in] INT nShowCmd );",
            "name": "ShellExecuteW"
        },
        {
            "signature": "int ShellMessageBoxA( [in] HINSTANCE hAppInst, [in] HWND hWnd, [in] LPCSTR lpcText, [in] LPCSTR lpcTitle, [in] UINT fuStyle, ... );",
            "name": "ShellMessageBoxA"
        },
        {
            "signature": "int ShellMessageBoxW( [in] HINSTANCE hAppInst, [in] HWND hWnd, [in] LPCWSTR lpcText, [in] LPCWSTR lpcTitle, [in] UINT fuStyle, ... );",
            "name": "ShellMessageBoxW"
        },
        {
            "signature": "SHSTDAPI SHEmptyRecycleBinA( [in, optional] HWND hwnd, [in, optional] LPCSTR pszRootPath, DWORD dwFlags );",
            "name": "SHEmptyRecycleBinA"
        },
        {
            "signature": "SHSTDAPI SHEmptyRecycleBinW( [in, optional] HWND hwnd, [in, optional] LPCWSTR pszRootPath, DWORD dwFlags );",
            "name": "SHEmptyRecycleBinW"
        },
        {
            "signature": "HRESULT SHEnumerateUnreadMailAccountsA( [in, optional] HKEY hKeyUser, DWORD dwIndex, [out] LPSTR pszMailAddress, int cchMailAddress );",
            "name": "SHEnumerateUnreadMailAccountsA"
        },
        {
            "signature": "HRESULT SHEnumerateUnreadMailAccountsW( [in, optional] HKEY hKeyUser, DWORD dwIndex, [out] LPWSTR pszMailAddress, int cchMailAddress );",
            "name": "SHEnumerateUnreadMailAccountsW"
        },
        {
            "signature": "SHSTDAPI SHEvaluateSystemCommandTemplate( [in] PCWSTR pszCmdTemplate, [out] PWSTR *ppszApplication, [out, optional] PWSTR *ppszCommandLine, [out, optional] PWSTR *ppszParameters );",
            "name": "SHEvaluateSystemCommandTemplate"
        },
        {
            "signature": "int SHFileOperationA( [in, out] LPSHFILEOPSTRUCTA lpFileOp );",
            "name": "SHFileOperationA"
        },
        {
            "signature": "int SHFileOperationW( [in, out] LPSHFILEOPSTRUCTW lpFileOp );",
            "name": "SHFileOperationW"
        },
        {
            "signature": "void SHFreeNameMappings( [in, optional] HANDLE hNameMappings );",
            "name": "SHFreeNameMappings"
        },
        {
            "signature": "BOOL SHGetDiskFreeSpaceExA( [in] LPCSTR pszDirectoryName, [out, optional] ULARGE_INTEGER *pulFreeBytesAvailableToCaller, [out, optional] ULARGE_INTEGER *pulTotalNumberOfBytes, [out, optional] ULARGE_INTEGER *pulTotalNumberOfFreeBytes );",
            "name": "SHGetDiskFreeSpaceExA"
        },
        {
            "signature": "BOOL SHGetDiskFreeSpaceExW( [in] LPCWSTR pszDirectoryName, [out, optional] ULARGE_INTEGER *pulFreeBytesAvailableToCaller, [out, optional] ULARGE_INTEGER *pulTotalNumberOfBytes, [out, optional] ULARGE_INTEGER *pulTotalNumberOfFreeBytes );",
            "name": "SHGetDiskFreeSpaceExW"
        },
        {
            "signature": "HRESULT SHGetDriveMedia( [in] PCWSTR pszDrive, [out] DWORD *pdwMediaContent );",
            "name": "SHGetDriveMedia"
        },
        {
            "signature": "DWORD_PTR SHGetFileInfoA( [in] LPCSTR pszPath, DWORD dwFileAttributes, [in, out] SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags );",
            "name": "SHGetFileInfoA"
        },
        {
            "signature": "DWORD_PTR SHGetFileInfoW( [in] LPCWSTR pszPath, DWORD dwFileAttributes, [in, out] SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags );",
            "name": "SHGetFileInfoW"
        },
        {
            "signature": "SHSTDAPI SHGetImageList( [in] int iImageList, [in] REFIID riid, [out] void **ppvObj );",
            "name": "SHGetImageList"
        },
        {
            "signature": "SHSTDAPI SHGetLocalizedName( [in] PCWSTR pszPath, [out] PWSTR pszResModule, UINT cch, [out] int *pidsRes );",
            "name": "SHGetLocalizedName"
        },
        {
            "signature": "BOOL SHGetNewLinkInfoA( [in] LPCSTR pszLinkTo, [in] LPCSTR pszDir, [out] LPSTR pszName, [out] BOOL *pfMustCopy, [in] UINT uFlags );",
            "name": "SHGetNewLinkInfoA"
        },
        {
            "signature": "BOOL SHGetNewLinkInfoW( [in] LPCWSTR pszLinkTo, [in] LPCWSTR pszDir, [out] LPWSTR pszName, [out] BOOL *pfMustCopy, [in] UINT uFlags );",
            "name": "SHGetNewLinkInfoW"
        },
        {
            "signature": "SHSTDAPI SHGetPropertyStoreForWindow( [in] HWND hwnd, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetPropertyStoreForWindow"
        },
        {
            "signature": "SHSTDAPI SHGetStockIconInfo( SHSTOCKICONID siid, UINT uFlags, [in, out] SHSTOCKICONINFO *psii );",
            "name": "SHGetStockIconInfo"
        },
        {
            "signature": "HRESULT SHGetUnreadMailCountA( [in, optional] HKEY hKeyUser, [in, optional] LPCSTR pszMailAddress, [out, optional] DWORD *pdwCount, [out, optional] FILETIME *pFileTime, [out, optional] LPSTR pszShellExecuteCommand, int cchShellExecuteCommand );",
            "name": "SHGetUnreadMailCountA"
        },
        {
            "signature": "HRESULT SHGetUnreadMailCountW( [in, optional] HKEY hKeyUser, [in, optional] LPCWSTR pszMailAddress, [out, optional] DWORD *pdwCount, [out, optional] FILETIME *pFileTime, [out, optional] LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand );",
            "name": "SHGetUnreadMailCountW"
        },
        {
            "signature": "BOOL SHInvokePrinterCommandA( [in, optional] HWND hwnd, UINT uAction, [in] LPCSTR lpBuf1, [in, optional] LPCSTR lpBuf2, BOOL fModal );",
            "name": "SHInvokePrinterCommandA"
        },
        {
            "signature": "BOOL SHInvokePrinterCommandW( [in, optional] HWND hwnd, UINT uAction, [in] LPCWSTR lpBuf1, [in, optional] LPCWSTR lpBuf2, BOOL fModal );",
            "name": "SHInvokePrinterCommandW"
        },
        {
            "signature": "SHSTDAPI SHIsFileAvailableOffline( [in] PCWSTR pwszPath, [out, optional] DWORD *pdwStatus );",
            "name": "SHIsFileAvailableOffline"
        },
        {
            "signature": "SHSTDAPI SHLoadNonloadedIconOverlayIdentifiers();",
            "name": "SHLoadNonloadedIconOverlayIdentifiers"
        },
        {
            "signature": "SHSTDAPI SHQueryRecycleBinA( [in, optional] LPCSTR pszRootPath, [in, out] LPSHQUERYRBINFO pSHQueryRBInfo );",
            "name": "SHQueryRecycleBinA"
        },
        {
            "signature": "SHSTDAPI SHQueryRecycleBinW( [in, optional] LPCWSTR pszRootPath, [in, out] LPSHQUERYRBINFO pSHQueryRBInfo );",
            "name": "SHQueryRecycleBinW"
        },
        {
            "signature": "SHSTDAPI SHQueryUserNotificationState( [out] QUERY_USER_NOTIFICATION_STATE *pquns );",
            "name": "SHQueryUserNotificationState"
        },
        {
            "signature": "SHSTDAPI SHRemoveLocalizedName( [in] PCWSTR pszPath );",
            "name": "SHRemoveLocalizedName"
        },
        {
            "signature": "SHSTDAPI SHSetLocalizedName( [in] PCWSTR pszPath, [in] PCWSTR pszResModule, int idsRes );",
            "name": "SHSetLocalizedName"
        },
        {
            "signature": "HRESULT SHSetUnreadMailCountA( [in] LPCSTR pszMailAddress, DWORD dwCount, [in] LPCSTR pszShellExecuteCommand );",
            "name": "SHSetUnreadMailCountA"
        },
        {
            "signature": "HRESULT SHSetUnreadMailCountW( [in] LPCWSTR pszMailAddress, DWORD dwCount, [in] LPCWSTR pszShellExecuteCommand );",
            "name": "SHSetUnreadMailCountW"
        },
        {
            "signature": "BOOL SHTestTokenMembership( [in, optional] HANDLE hToken, ULONG ulRID );",
            "name": "SHTestTokenMembership"
        }
    ],
    "Shellscalingapi.h": [
        {
            "signature": "HRESULT GetDpiForMonitor( [in] HMONITOR hmonitor, [in] MONITOR_DPI_TYPE dpiType, [out] UINT *dpiX, [out] UINT *dpiY );",
            "name": "GetDpiForMonitor"
        },
        {
            "signature": "UINT GetDpiForShellUIComponent( [in] SHELL_UI_COMPONENT unnamedParam1 );",
            "name": "GetDpiForShellUIComponent"
        },
        {
            "signature": "HRESULT GetProcessDpiAwareness( [in] HANDLE hprocess, [out] PROCESS_DPI_AWARENESS *value );",
            "name": "GetProcessDpiAwareness"
        },
        {
            "signature": "DEVICE_SCALE_FACTOR GetScaleFactorForDevice( [in] DISPLAY_DEVICE_TYPE deviceType );",
            "name": "GetScaleFactorForDevice"
        },
        {
            "signature": "HRESULT GetScaleFactorForMonitor( [in] HMONITOR hMon, [out] DEVICE_SCALE_FACTOR *pScale );",
            "name": "GetScaleFactorForMonitor"
        },
        {
            "signature": "HRESULT RegisterScaleChangeEvent( [in] HANDLE hEvent, [out] DWORD_PTR *pdwCookie );",
            "name": "RegisterScaleChangeEvent"
        },
        {
            "signature": "HRESULT RegisterScaleChangeNotifications( [in] DISPLAY_DEVICE_TYPE displayDevice, [in] HWND hwndNotify, [in] UINT uMsgNotify, [out] DWORD *pdwCookie );",
            "name": "RegisterScaleChangeNotifications"
        },
        {
            "signature": "HRESULT RevokeScaleChangeNotifications( [in] DISPLAY_DEVICE_TYPE displayDevice, [in] DWORD dwCookie );",
            "name": "RevokeScaleChangeNotifications"
        },
        {
            "signature": "HRESULT SetProcessDpiAwareness( [in] PROCESS_DPI_AWARENESS value );",
            "name": "SetProcessDpiAwareness"
        },
        {
            "signature": "HRESULT UnregisterScaleChangeEvent( [in] DWORD_PTR dwCookie );",
            "name": "UnregisterScaleChangeEvent"
        }
    ],
    "Shidfact.h": [],
    "Shimgdata.h": [],
    "Shldisp.h": [],
    "Shlobj.h": [
        {
            "signature": "int DriveType( [in] int iDrive );",
            "name": "DriveType"
        },
        {
            "signature": "BOOL GetFileNameFromBrowse( [in, optional] HWND hwnd, [in, out] PWSTR pszFilePath, UINT cchFilePath, [in, optional] PCWSTR pszWorkingDir, [in] PCWSTR pszDefExt, [in, optional] PCWSTR pszFilters, [in, optional] PCWSTR pszTitle );",
            "name": "GetFileNameFromBrowse"
        },
        {
            "signature": "BOOL PathIsSlowA( [in] LPCSTR pszFile, DWORD dwAttr );",
            "name": "PathIsSlowA"
        },
        {
            "signature": "BOOL PathIsSlowW( [in] LPCWSTR pszFile, DWORD dwAttr );",
            "name": "PathIsSlowW"
        },
        {
            "signature": "LONG PathProcessCommand( [in] PCWSTR pszSrc, [out] PWSTR pszDest, int cchDest, DWORD dwFlags );",
            "name": "PathProcessCommand"
        },
        {
            "signature": "void PerUserInit();",
            "name": "PerUserInit"
        },
        {
            "signature": "void SHChangeNotifyRegisterThread( SCNRT_STATUS status );",
            "name": "SHChangeNotifyRegisterThread"
        },
        {
            "signature": "HPSXA SHCreatePropSheetExtArray( [in] HKEY hKey, [in, optional] PCWSTR pszSubKey, UINT max_iface );",
            "name": "SHCreatePropSheetExtArray"
        },
        {
            "signature": "SHSTDAPI SHCreateQueryCancelAutoPlayMoniker( [out] IMoniker **ppmoniker );",
            "name": "SHCreateQueryCancelAutoPlayMoniker"
        },
        {
            "signature": "SHSTDAPI SHLoadOLE( [in] LPARAM lParam );",
            "name": "SHLoadOLE"
        },
        {
            "signature": "SHSTDAPI SHMultiFileProperties( [in] IDataObject *pdtobj, DWORD dwFlags );",
            "name": "SHMultiFileProperties"
        },
        {
            "signature": "BOOL SHOpenPropSheetA( [in, optional] LPCSTR pszCaption, [in, optional] HKEY [] ahkeys, UINT ckeys, [in, optional] const CLSID *pclsidDefault, [in] IDataObject *pdtobj, [in, optional] IShellBrowser *psb, [in, optional] LPCSTR pStartPage );",
            "name": "SHOpenPropSheetA"
        },
        {
            "signature": "BOOL SHOpenPropSheetW( [in, optional] LPCWSTR pszCaption, [in, optional] HKEY [] ahkeys, UINT ckeys, [in, optional] const CLSID *pclsidDefault, [in] IDataObject *pdtobj, [in, optional] IShellBrowser *psb, [in, optional] LPCWSTR pStartPage );",
            "name": "SHOpenPropSheetW"
        },
        {
            "signature": "BOOL SHRunControlPanel( [in] PCWSTR lpcszCmdLine, [in, optional] HWND hwndMsgParent );",
            "name": "SHRunControlPanel"
        },
        {
            "signature": "DWORD SoftwareUpdateMessageBox( [in, optional] HWND hWnd, [in] PCWSTR pszDistUnit, DWORD dwFlags, [out, optional] LPSOFTDISTINFO psdi );",
            "name": "SoftwareUpdateMessageBox"
        }
    ],
    "Shlobj_core.h": [
        {
            "signature": "SHSTDAPI AssocGetDetailsOfPropKey( [in] IShellFolder *psf, [in] PCUITEMID_CHILD pidl, [in] const PROPERTYKEY *pkey, [out] VARIANT *pv, [out] BOOL *pfFoundPropKey );",
            "name": "AssocGetDetailsOfPropKey"
        },
        {
            "signature": "BFFCALLBACK Bffcallback; int Bffcallback( [in] HWND hwnd, [in] UINT uMsg, [in] LPARAM lParam, [in] LPARAM lpData ) {...}",
            "name": "BFFCALLBACK callback"
        },
        {
            "signature": "SHSTDAPI CDefFolderMenu_Create2( [in, optional] PCIDLIST_ABSOLUTE pidlFolder, [in, optional] HWND hwnd, UINT cidl, [in, optional] PCUITEMID_CHILD_ARRAY apidl, [in, optional] IShellFolder *psf, [in, optional] LPFNDFMCALLBACK pfn, UINT nKeys, [in, optional] const HKEY *ahkeys, [out] IContextMenu **ppcm );",
            "name": "CDefFolderMenu_Create2"
        },
        {
            "signature": "SHSTDAPI CIDLData_CreateFromIDArray( [in] PCIDLIST_ABSOLUTE pidlFolder, [in] UINT cidl, [in] PCUIDLIST_RELATIVE_ARRAY apidl, [out] IDataObject **ppdtobj );",
            "name": "CIDLData_CreateFromIDArray"
        },
        {
            "signature": "BOOL DAD_AutoScroll( [in] HWND hwnd, [in] AUTO_SCROLL_DATA *pad, [in] const POINT *pptNow );",
            "name": "DAD_AutoScroll"
        },
        {
            "signature": "BOOL DAD_DragEnterEx( HWND hwndTarget, const POINT ptStart );",
            "name": "DAD_DragEnterEx"
        },
        {
            "signature": "BOOL DAD_DragEnterEx2( [in] HWND hwndTarget, const POINT ptStart, [in, optional] IDataObject *pdtObject );",
            "name": "DAD_DragEnterEx2"
        },
        {
            "signature": "BOOL DAD_DragLeave();",
            "name": "DAD_DragLeave"
        },
        {
            "signature": "BOOL DAD_DragMove( POINT pt );",
            "name": "DAD_DragMove"
        },
        {
            "signature": "BOOL DAD_SetDragImage( HIMAGELIST him, POINT *pptOffset );",
            "name": "DAD_SetDragImage"
        },
        {
            "signature": "BOOL DAD_ShowDragImage( BOOL fShow );",
            "name": "DAD_ShowDragImage"
        },
        {
            "signature": "int DriveType( [in] int iDrive );",
            "name": "DriveType"
        },
        {
            "signature": "BOOL GetFileNameFromBrowse( [in, optional] HWND hwnd, [in, out] PWSTR pszFilePath, UINT cchFilePath, [in, optional] PCWSTR pszWorkingDir, [in] PCWSTR pszDefExt, [in, optional] PCWSTR pszFilters, [in, optional] PCWSTR pszTitle );",
            "name": "GetFileNameFromBrowse"
        },
        {
            "signature": "BOOL IDListContainerIsConsistent( [in] PCUIDLIST_RELATIVE pidl, [in] UINT cbAlloc );",
            "name": "IDListContainerIsConsistent"
        },
        {
            "signature": "PIDLIST_RELATIVE ILAppendID( [in, optional] PIDLIST_RELATIVE pidl, [in] LPCSHITEMID pmkid, BOOL fAppend );",
            "name": "ILAppendID"
        },
        {
            "signature": "PIDLIST_RELATIVE ILClone( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILClone"
        },
        {
            "signature": "PITEMID_CHILD ILCloneChild( [in] PCUITEMID_CHILD pidl );",
            "name": "ILCloneChild"
        },
        {
            "signature": "PITEMID_CHILD ILCloneFirst( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILCloneFirst"
        },
        {
            "signature": "PIDLIST_ABSOLUTE ILCloneFull( [in] PCUIDLIST_ABSOLUTE pidl );",
            "name": "ILCloneFull"
        },
        {
            "signature": "PIDLIST_ABSOLUTE ILCombine( [in] PCIDLIST_ABSOLUTE pidl1, [in] PCUIDLIST_RELATIVE pidl2 );",
            "name": "ILCombine"
        },
        {
            "signature": "PIDLIST_ABSOLUTE ILCreateFromPath( [in] PCTSTR pszPath );",
            "name": "ILCreateFromPath"
        },
        {
            "signature": "PIDLIST_ABSOLUTE ILCreateFromPathA( [in] PCSTR pszPath );",
            "name": "ILCreateFromPathA"
        },
        {
            "signature": "PIDLIST_ABSOLUTE ILCreateFromPathW( [in] PCWSTR pszPath );",
            "name": "ILCreateFromPathW"
        },
        {
            "signature": "PUIDLIST_RELATIVE ILFindChild( [in] PIDLIST_ABSOLUTE pidlParent, [in] PCIDLIST_ABSOLUTE pidlChild );",
            "name": "ILFindChild"
        },
        {
            "signature": "PUITEMID_CHILD ILFindLastID( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILFindLastID"
        },
        {
            "signature": "void ILFree( [in] PIDLIST_RELATIVE pidl );",
            "name": "ILFree"
        },
        {
            "signature": "PUIDLIST_RELATIVE ILGetNext( [in, optional] PCUIDLIST_RELATIVE pidl );",
            "name": "ILGetNext"
        },
        {
            "signature": "UINT ILGetSize( [in, optional] PCUIDLIST_RELATIVE pidl );",
            "name": "ILGetSize"
        },
        {
            "signature": "BOOL ILIsAligned( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILIsAligned"
        },
        {
            "signature": "BOOL ILIsChild( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILIsChild"
        },
        {
            "signature": "BOOL ILIsEmpty( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILIsEmpty"
        },
        {
            "signature": "BOOL ILIsEqual( [in] PCIDLIST_ABSOLUTE pidl1, [in] PCIDLIST_ABSOLUTE pidl2 );",
            "name": "ILIsEqual"
        },
        {
            "signature": "BOOL ILIsParent( [in] PCIDLIST_ABSOLUTE pidl1, [in] PCIDLIST_ABSOLUTE pidl2, [in] BOOL fImmediate );",
            "name": "ILIsParent"
        },
        {
            "signature": "HRESULT ILLoadFromStream( [in] IStream *pstm, [out] PIDLIST_RELATIVE *pidl );",
            "name": "ILLoadFromStream"
        },
        {
            "signature": "SHSTDAPI ILLoadFromStreamEx( [in] IStream *pstm, [out] PIDLIST_RELATIVE *pidl );",
            "name": "ILLoadFromStreamEx"
        },
        {
            "signature": "HRESULT ILLoadFromStreamEx( IStream *pstm, PIDLIST_ABSOLUTE *ppidl );",
            "name": "ILLoadFromStreamEx"
        },
        {
            "signature": "HRESULT ILLoadFromStreamEx( IStream *pstm, PITEMID_CHILD *ppidl );",
            "name": "ILLoadFromStreamEx"
        },
        {
            "signature": "PCUIDLIST_RELATIVE ILNext( [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILNext"
        },
        {
            "signature": "BOOL ILRemoveLastID( [in, out, optional] PUIDLIST_RELATIVE pidl );",
            "name": "ILRemoveLastID"
        },
        {
            "signature": "SHSTDAPI ILSaveToStream( [in] IStream *pstm, [in] PCUIDLIST_RELATIVE pidl );",
            "name": "ILSaveToStream"
        },
        {
            "signature": "PCUIDLIST_RELATIVE ILSkip( [in] PCUIDLIST_RELATIVE pidl, UINT cb );",
            "name": "ILSkip"
        },
        {
            "signature": "int IsNetDrive( [in] int iDrive );",
            "name": "IsNetDrive"
        },
        {
            "signature": "BOOL IsUserAnAdmin();",
            "name": "IsUserAnAdmin"
        },
        {
            "signature": "LPFNDFMCALLBACK Lpfndfmcallback; HRESULT Lpfndfmcallback( [in, optional] IShellFolder *psf, [in, optional] HWND hwnd, [in, optional] IDataObject *pdtobj, UINT uMsg, WPARAM wParam, LPARAM lParam ) {...}",
            "name": "LPFNDFMCALLBACK callback"
        },
        {
            "signature": "LPFNVIEWCALLBACK Lpfnviewcallback; HRESULT Lpfnviewcallback( [in] IShellView *psvOuter, [in] IShellFolder *psf, [in] HWND hwndMain, UINT uMsg, WPARAM wParam, LPARAM lParam ) {...}",
            "name": "LPFNVIEWCALLBACK callback"
        },
        {
            "signature": "IStream * OpenRegStream( [in] HKEY hkey, [in, optional] PCWSTR pszSubkey, [in, optional] PCWSTR pszValue, DWORD grfMode );",
            "name": "OpenRegStream"
        },
        {
            "signature": "int PathCleanupSpec( [in, optional] PCWSTR pszDir, [in, out] PWSTR pszSpec );",
            "name": "PathCleanupSpec"
        },
        {
            "signature": "void PathGetShortPath( [in, out] PWSTR pszLongPath );",
            "name": "PathGetShortPath"
        },
        {
            "signature": "BOOL PathIsExe( [in] PCWSTR pszPath );",
            "name": "PathIsExe"
        },
        {
            "signature": "BOOL PathMakeUniqueName( [out] PWSTR pszUniqueName, UINT cchMax, [in] PCWSTR pszTemplate, [in, optional] PCWSTR pszLongPlate, [in, optional] PCWSTR pszDir );",
            "name": "PathMakeUniqueName"
        },
        {
            "signature": "int PathResolve( [in, out] PWSTR pszPath, [in, optional] PZPCWSTR dirs, UINT fFlags );",
            "name": "PathResolve"
        },
        {
            "signature": "BOOL PathYetAnotherMakeUniqueName( [out] PWSTR pszUniqueName, [in] PCWSTR pszPath, [in, optional] PCWSTR pszShort, [in, optional] PCWSTR pszFileSpec );",
            "name": "PathYetAnotherMakeUniqueName"
        },
        {
            "signature": "int PickIconDlg( [in, optional] HWND hwnd, [in, out] PWSTR pszIconPath, UINT cchIconPath, [in, out, optional] int *piIconIndex );",
            "name": "PickIconDlg"
        },
        {
            "signature": "HANDLE PifMgr_CloseProperties( [in] HANDLE hProps, [in] UINT flOpt );",
            "name": "PifMgr_CloseProperties"
        },
        {
            "signature": "int PifMgr_GetProperties( [in, optional] HANDLE hProps, [in, optional] PCSTR pszGroup, [out, optional] void *lpProps, int cbProps, UINT flOpt );",
            "name": "PifMgr_GetProperties"
        },
        {
            "signature": "HANDLE PifMgr_OpenProperties( [in] PCWSTR pszApp, [in, optional] PCWSTR pszPIF, UINT hInf, UINT flOpt );",
            "name": "PifMgr_OpenProperties"
        },
        {
            "signature": "int PifMgr_SetProperties( [in, optional] HANDLE hProps, [in, optional] PCSTR pszGroup, [in] const void *lpProps, int cbProps, UINT flOpt );",
            "name": "PifMgr_SetProperties"
        },
        {
            "signature": "BOOL ReadCabinetState( [out] CABINETSTATE *pcs, [in] int cLength );",
            "name": "ReadCabinetState"
        },
        {
            "signature": "int RealDriveType( [in] int iDrive, [in] BOOL fOKToHitNet );",
            "name": "RealDriveType"
        },
        {
            "signature": "int RestartDialog( [in, optional] HWND hwnd, [in, optional] PCWSTR pszPrompt, DWORD dwReturn );",
            "name": "RestartDialog"
        },
        {
            "signature": "int RestartDialogEx( [in, optional] HWND hwnd, [in, optional] PCWSTR pszPrompt, DWORD dwReturn, DWORD dwReasonCode );",
            "name": "RestartDialogEx"
        },
        {
            "signature": "UINT SHAddFromPropSheetExtArray( [in] HPSXA hpsxa, [in] LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam );",
            "name": "SHAddFromPropSheetExtArray"
        },
        {
            "signature": "void SHAddToRecentDocs( UINT uFlags, [in, optional] LPCVOID pv );",
            "name": "SHAddToRecentDocs"
        },
        {
            "signature": "void * SHAlloc( [in] SIZE_T cb );",
            "name": "SHAlloc"
        },
        {
            "signature": "SHSTDAPI SHBindToFolderIDListParent( [in, optional] IShellFolder *psfRoot, [in] PCUIDLIST_RELATIVE pidl, [in] REFIID riid, [out] void **ppv, [out, optional] PCUITEMID_CHILD *ppidlLast );",
            "name": "SHBindToFolderIDListParent"
        },
        {
            "signature": "SHSTDAPI SHBindToFolderIDListParentEx( [in, optional] IShellFolder *psfRoot, [in] PCUIDLIST_RELATIVE pidl, [in, optional] IBindCtx *ppbc, [in] REFIID riid, [out] void **ppv, [out, optional] PCUITEMID_CHILD *ppidlLast );",
            "name": "SHBindToFolderIDListParentEx"
        },
        {
            "signature": "SHSTDAPI SHBindToObject( IShellFolder *psf, PCUIDLIST_RELATIVE pidl, [in] IBindCtx *pbc, REFIID riid, [out] void **ppv );",
            "name": "SHBindToObject"
        },
        {
            "signature": "SHSTDAPI SHBindToParent( [in] PCIDLIST_ABSOLUTE pidl, [in] REFIID riid, [out] void **ppv, [out] PCUITEMID_CHILD *ppidlLast );",
            "name": "SHBindToParent"
        },
        {
            "signature": "PIDLIST_ABSOLUTE SHBrowseForFolderA( [in] LPBROWSEINFOA lpbi );",
            "name": "SHBrowseForFolderA"
        },
        {
            "signature": "PIDLIST_ABSOLUTE SHBrowseForFolderW( [in] LPBROWSEINFOW lpbi );",
            "name": "SHBrowseForFolderW"
        },
        {
            "signature": "HANDLE SHChangeNotification_Lock( [in] HANDLE hChange, DWORD dwProcId, [out, optional] PIDLIST_ABSOLUTE **pppidl, [out, optional] LONG *plEvent );",
            "name": "SHChangeNotification_Lock"
        },
        {
            "signature": "BOOL SHChangeNotification_Unlock( [in] HANDLE hLock );",
            "name": "SHChangeNotification_Unlock"
        },
        {
            "signature": "void SHChangeNotify( LONG wEventId, UINT uFlags, [in, optional] LPCVOID dwItem1, [in, optional] LPCVOID dwItem2 );",
            "name": "SHChangeNotify"
        },
        {
            "signature": "BOOL SHChangeNotifyDeregister( ULONG ulID );",
            "name": "SHChangeNotifyDeregister"
        },
        {
            "signature": "ULONG SHChangeNotifyRegister( [in] HWND hwnd, int fSources, LONG fEvents, UINT wMsg, int cEntries, [in] const SHChangeNotifyEntry *pshcne );",
            "name": "SHChangeNotifyRegister"
        },
        {
            "signature": "PIDLIST_ABSOLUTE SHCloneSpecialIDList( HWND hwnd, [in] int csidl, [in] BOOL fCreate );",
            "name": "SHCloneSpecialIDList"
        },
        {
            "signature": "SHSTDAPI SHCLSIDFromString( [in] PCWSTR psz, [out] CLSID *pclsid );",
            "name": "SHCLSIDFromString"
        },
        {
            "signature": "SHSTDAPI SHCoCreateInstance( [in, optional] PCWSTR pszCLSID, [in, optional] const CLSID *pclsid, [in, optional] IUnknown *pUnkOuter, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCoCreateInstance"
        },
        {
            "signature": "SHSTDAPI SHCreateDataObject( [in, optional] PCIDLIST_ABSOLUTE pidlFolder, [in] UINT cidl, [in, optional] PCUITEMID_CHILD_ARRAY apidl, [in, optional] IDataObject *pdtInner, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateDataObject"
        },
        {
            "signature": "SHSTDAPI SHCreateDefaultContextMenu( [in] const DEFCONTEXTMENU *pdcm, REFIID riid, [out] void **ppv );",
            "name": "SHCreateDefaultContextMenu"
        },
        {
            "signature": "int SHCreateDirectory( [in, optional] HWND hwnd, [in] PCWSTR pszPath );",
            "name": "SHCreateDirectory"
        },
        {
            "signature": "int SHCreateDirectoryExA( [in, optional] HWND hwnd, [in] LPCSTR pszPath, [in, optional] const SECURITY_ATTRIBUTES *psa );",
            "name": "SHCreateDirectoryExA"
        },
        {
            "signature": "int SHCreateDirectoryExW( [in, optional] HWND hwnd, [in] LPCWSTR pszPath, [in, optional] const SECURITY_ATTRIBUTES *psa );",
            "name": "SHCreateDirectoryExW"
        },
        {
            "signature": "SHSTDAPI SHCreateFileExtractIconA( [in] LPCSTR pszFile, [in] DWORD dwFileAttributes, [in] REFIID riid, void **ppv );",
            "name": "SHCreateFileExtractIconA"
        },
        {
            "signature": "SHSTDAPI SHCreateFileExtractIconW( [in] LPCWSTR pszFile, [in] DWORD dwFileAttributes, [in] REFIID riid, void **ppv );",
            "name": "SHCreateFileExtractIconW"
        },
        {
            "signature": "SHSTDAPI SHCreateShellFolderView( [in] const SFV_CREATE *pcsfv, [out] IShellView **ppsv );",
            "name": "SHCreateShellFolderView"
        },
        {
            "signature": "SHSTDAPI SHCreateShellFolderViewEx( [in] CSFV *pcsfv, [out] IShellView **ppsv );",
            "name": "SHCreateShellFolderViewEx"
        },
        {
            "signature": "SHSTDAPI SHCreateShellItem( [in, optional] PCIDLIST_ABSOLUTE pidlParent, [in, optional] IShellFolder *psfParent, [in] PCUITEMID_CHILD pidl, [out] IShellItem **ppsi );",
            "name": "SHCreateShellItem"
        },
        {
            "signature": "SHSTDAPI SHCreateStdEnumFmtEtc( [in] UINT cfmt, const FORMATETC [] afmt, [out] IEnumFORMATETC **ppenumFormatEtc );",
            "name": "SHCreateStdEnumFmtEtc"
        },
        {
            "signature": "SHSTDAPI SHDefExtractIconA( [in] LPCSTR pszIconFile, int iIndex, [in] UINT uFlags, [out, optional] HICON *phiconLarge, [out, optional] HICON *phiconSmall, UINT nIconSize );",
            "name": "SHDefExtractIconA"
        },
        {
            "signature": "SHSTDAPI SHDefExtractIconW( [in] LPCWSTR pszIconFile, int iIndex, [in] UINT uFlags, [out, optional] HICON *phiconLarge, [out, optional] HICON *phiconSmall, UINT nIconSize );",
            "name": "SHDefExtractIconW"
        },
        {
            "signature": "void SHDestroyPropSheetExtArray( [in] HPSXA hpsxa );",
            "name": "SHDestroyPropSheetExtArray"
        },
        {
            "signature": "SHSTDAPI SHDoDragDrop( [in] HWND hwnd, [in] IDataObject *pdata, [in] IDropSource *pdsrc, [in] DWORD dwEffect, [out] DWORD *pdwEffect );",
            "name": "SHDoDragDrop"
        },
        {
            "signature": "int Shell_GetCachedImageIndex( [in] PCWSTR pwszIconPath, int iIconIndex, UINT uIconFlags );",
            "name": "Shell_GetCachedImageIndex"
        },
        {
            "signature": "int Shell_GetCachedImageIndexA( LPCSTR pszIconPath, int iIconIndex, UINT uIconFlags );",
            "name": "Shell_GetCachedImageIndexA"
        },
        {
            "signature": "int Shell_GetCachedImageIndexW( LPCWSTR pszIconPath, int iIconIndex, UINT uIconFlags );",
            "name": "Shell_GetCachedImageIndexW"
        },
        {
            "signature": "BOOL Shell_GetImageLists( [in] HIMAGELIST *phiml, [in] HIMAGELIST *phimlSmall );",
            "name": "Shell_GetImageLists"
        },
        {
            "signature": "UINT Shell_MergeMenus( [in] HMENU hmDst, [in] HMENU hmSrc, UINT uInsert, UINT uIDAdjust, UINT uIDAdjustMax, ULONG uFlags );",
            "name": "Shell_MergeMenus"
        },
        {
            "signature": "IContextMenu * SHFind_InitMenuPopup( [in] HMENU hmenu, [in, optional] HWND hwndOwner, UINT idCmdFirst, UINT idCmdLast );",
            "name": "SHFind_InitMenuPopup"
        },
        {
            "signature": "BOOL SHFindFiles( [in, optional] PCIDLIST_ABSOLUTE pidlFolder, [in, optional] PCIDLIST_ABSOLUTE pidlSaveFile );",
            "name": "SHFindFiles"
        },
        {
            "signature": "void SHFlushSFCache();",
            "name": "SHFlushSFCache"
        },
        {
            "signature": "DWORD SHFormatDrive( [in] HWND hwnd, UINT drive, UINT fmtID, UINT options );",
            "name": "SHFormatDrive"
        },
        {
            "signature": "void SHFree( [in] void *pv );",
            "name": "SHFree"
        },
        {
            "signature": "HRESULT SHGetAttributesFromDataObject( [in, optional] IDataObject *pdo, DWORD dwAttributeMask, [out, optional] DWORD *pdwAttributes, [out, optional] UINT *pcItems );",
            "name": "SHGetAttributesFromDataObject"
        },
        {
            "signature": "SHSTDAPI SHGetDataFromIDListA( [in] IShellFolder *psf, [in] PCUITEMID_CHILD pidl, int nFormat, [out] void *pv, int cb );",
            "name": "SHGetDataFromIDListA"
        },
        {
            "signature": "SHSTDAPI SHGetDataFromIDListW( [in] IShellFolder *psf, [in] PCUITEMID_CHILD pidl, int nFormat, [out] void *pv, int cb );",
            "name": "SHGetDataFromIDListW"
        },
        {
            "signature": "SHSTDAPI SHGetDesktopFolder( [out] IShellFolder **ppshf );",
            "name": "SHGetDesktopFolder"
        },
        {
            "signature": "SHSTDAPI SHGetFolderLocation( [in] HWND hwnd, [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [out] PIDLIST_ABSOLUTE *ppidl );",
            "name": "SHGetFolderLocation"
        },
        {
            "signature": "SHFOLDERAPI SHGetFolderPathA( [in] HWND hwnd, [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [out] LPSTR pszPath );",
            "name": "SHGetFolderPathA"
        },
        {
            "signature": "HRESULT SHGetFolderPathAndSubDirA( [in] HWND hwnd, [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [in] LPCSTR pszSubDir, [out] LPSTR pszPath );",
            "name": "SHGetFolderPathAndSubDirA"
        },
        {
            "signature": "HRESULT SHGetFolderPathAndSubDirW( [in] HWND hwnd, [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [in] LPCWSTR pszSubDir, [out] LPWSTR pszPath );",
            "name": "SHGetFolderPathAndSubDirW"
        },
        {
            "signature": "SHFOLDERAPI SHGetFolderPathW( [in] HWND hwnd, [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [out] LPWSTR pszPath );",
            "name": "SHGetFolderPathW"
        },
        {
            "signature": "int SHGetIconOverlayIndexA( [in, optional] LPCSTR pszIconPath, int iIconIndex );",
            "name": "SHGetIconOverlayIndexA"
        },
        {
            "signature": "int SHGetIconOverlayIndexW( [in, optional] LPCWSTR pszIconPath, int iIconIndex );",
            "name": "SHGetIconOverlayIndexW"
        },
        {
            "signature": "SHSTDAPI SHGetInstanceExplorer( [out] IUnknown **ppunk );",
            "name": "SHGetInstanceExplorer"
        },
        {
            "signature": "HRESULT SHGetKnownFolderIDList( [in] REFKNOWNFOLDERID rfid, [in] DWORD dwFlags, [in] HANDLE hToken, [out] PIDLIST_ABSOLUTE *ppidl );",
            "name": "SHGetKnownFolderIDList"
        },
        {
            "signature": "HRESULT SHGetKnownFolderItem( [in] REFKNOWNFOLDERID rfid, [in] KNOWN_FOLDER_FLAG flags, [in] HANDLE hToken, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetKnownFolderItem"
        },
        {
            "signature": "HRESULT SHGetKnownFolderPath( [in] REFKNOWNFOLDERID rfid, [in] DWORD dwFlags, [in, optional] HANDLE hToken, [out] PWSTR *ppszPath );",
            "name": "SHGetKnownFolderPath"
        },
        {
            "signature": "SHSTDAPI SHGetMalloc( IMalloc **ppMalloc );",
            "name": "SHGetMalloc"
        },
        {
            "signature": "BOOL SHGetPathFromIDListA( [in] PCIDLIST_ABSOLUTE pidl, [out] LPSTR pszPath );",
            "name": "SHGetPathFromIDListA"
        },
        {
            "signature": "BOOL SHGetPathFromIDListEx( [in] PCIDLIST_ABSOLUTE pidl, [out] PWSTR pszPath, DWORD cchPath, GPFIDL_FLAGS uOpts );",
            "name": "SHGetPathFromIDListEx"
        },
        {
            "signature": "BOOL SHGetPathFromIDListW( [in] PCIDLIST_ABSOLUTE pidl, [out] LPWSTR pszPath );",
            "name": "SHGetPathFromIDListW"
        },
        {
            "signature": "SHSTDAPI SHGetRealIDL( [in] IShellFolder *psf, [in] PCUITEMID_CHILD pidlSimple, [out] PITEMID_CHILD *ppidlReal );",
            "name": "SHGetRealIDL"
        },
        {
            "signature": "SHSTDAPI SHGetSetFolderCustomSettings( [in, out] LPSHFOLDERCUSTOMSETTINGS pfcs, [in] PCWSTR pszPath, DWORD dwReadWrite );",
            "name": "SHGetSetFolderCustomSettings"
        },
        {
            "signature": "void SHGetSetSettings( [in, out] LPSHELLSTATE lpss, [in] DWORD dwMask, [in] BOOL bSet );",
            "name": "SHGetSetSettings"
        },
        {
            "signature": "void SHGetSettings( SHELLFLAGSTATE *psfs, DWORD dwMask );",
            "name": "SHGetSettings"
        },
        {
            "signature": "HRESULT SHGetSpecialFolderLocation( [in] HWND hwnd, [in] int csidl, [out] PIDLIST_ABSOLUTE *ppidl );",
            "name": "SHGetSpecialFolderLocation"
        },
        {
            "signature": "BOOL SHGetSpecialFolderPathA( HWND hwnd, [out] LPSTR pszPath, [in] int csidl, [in] BOOL fCreate );",
            "name": "SHGetSpecialFolderPathA"
        },
        {
            "signature": "BOOL SHGetSpecialFolderPathW( HWND hwnd, [out] LPWSTR pszPath, [in] int csidl, [in] BOOL fCreate );",
            "name": "SHGetSpecialFolderPathW"
        },
        {
            "signature": "int SHHandleUpdateImage( [in] PCIDLIST_ABSOLUTE pidlExtra );",
            "name": "SHHandleUpdateImage"
        },
        {
            "signature": "SHSTDAPI SHILCreateFromPath( [in] PCWSTR pszPath, [out] PIDLIST_ABSOLUTE *ppidl, [in, out, optional] DWORD *rgfInOut );",
            "name": "SHILCreateFromPath"
        },
        {
            "signature": "SHSTDAPI SHLimitInputEdit( [in, optional] HWND hwndEdit, [in] IShellFolder *psf );",
            "name": "SHLimitInputEdit"
        },
        {
            "signature": "SHSTDAPI SHLoadInProc( [in] REFCLSID rclsid );",
            "name": "SHLoadInProc"
        },
        {
            "signature": "int SHMapPIDLToSystemImageListIndex( [in] IShellFolder *pshf, [in] PCUITEMID_CHILD pidl, [out, optional] int *piIndexSel );",
            "name": "SHMapPIDLToSystemImageListIndex"
        },
        {
            "signature": "BOOL SHObjectProperties( [in] HWND hwnd, [in] DWORD shopObjectType, [in] PCWSTR pszObjectName, [in] PCWSTR pszPropertyPage );",
            "name": "SHObjectProperties"
        },
        {
            "signature": "SHSTDAPI SHOpenFolderAndSelectItems( [in] PCIDLIST_ABSOLUTE pidlFolder, UINT cidl, [in, optional] PCUITEMID_CHILD_ARRAY apidl, DWORD dwFlags );",
            "name": "SHOpenFolderAndSelectItems"
        },
        {
            "signature": "SHSTDAPI SHOpenWithDialog( [in, optional] HWND hwndParent, [in] const OPENASINFO *poainfo );",
            "name": "SHOpenWithDialog"
        },
        {
            "signature": "SHSTDAPI SHParseDisplayName( [in] PCWSTR pszName, [in, optional] IBindCtx *pbc, [out] PIDLIST_ABSOLUTE *ppidl, [in] SFGAOF sfgaoIn, [out, optional] SFGAOF *psfgaoOut );",
            "name": "SHParseDisplayName"
        },
        {
            "signature": "SHSTDAPI SHPathPrepareForWriteA( [in, optional] HWND hwnd, [in, optional] IUnknown *punkEnableModless, [in] LPCSTR pszPath, DWORD dwFlags );",
            "name": "SHPathPrepareForWriteA"
        },
        {
            "signature": "SHSTDAPI SHPathPrepareForWriteW( [in, optional] HWND hwnd, [in, optional] IUnknown *punkEnableModless, [in] LPCWSTR pszPath, DWORD dwFlags );",
            "name": "SHPathPrepareForWriteW"
        },
        {
            "signature": "SHSTDAPI SHPropStgCreate( [in] IPropertySetStorage *psstg, [in] REFFMTID fmtid, [in, optional] const CLSID *pclsid, DWORD grfFlags, DWORD grfMode, DWORD dwDisposition, [out] IPropertyStorage **ppstg, [out, optional] UINT *puCodePage );",
            "name": "SHPropStgCreate"
        },
        {
            "signature": "SHSTDAPI SHPropStgReadMultiple( [in] IPropertyStorage *pps, UINT uCodePage, ULONG cpspec, [in] PROPSPEC const [] rgpspec, [out] PROPVARIANT [] rgvar );",
            "name": "SHPropStgReadMultiple"
        },
        {
            "signature": "SHSTDAPI SHPropStgWriteMultiple( [in] IPropertyStorage *pps, [in, out, optional] UINT *puCodePage, ULONG cpspec, [in] PROPSPEC const [] rgpspec, [in, out] PROPVARIANT [] rgvar, PROPID propidNameFirst );",
            "name": "SHPropStgWriteMultiple"
        },
        {
            "signature": "UINT SHReplaceFromPropSheetExtArray( [in] HPSXA hpsxa, UINT uPageID, [in] LPFNADDPROPSHEETPAGE lpfnReplaceWith, LPARAM lParam );",
            "name": "SHReplaceFromPropSheetExtArray"
        },
        {
            "signature": "DWORD SHRestricted( RESTRICTIONS rest );",
            "name": "SHRestricted"
        },
        {
            "signature": "HRESULT SHSetFolderPathA( [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [in] LPCSTR pszPath );",
            "name": "SHSetFolderPathA"
        },
        {
            "signature": "HRESULT SHSetFolderPathW( [in] int csidl, [in] HANDLE hToken, [in] DWORD dwFlags, [in] LPCWSTR pszPath );",
            "name": "SHSetFolderPathW"
        },
        {
            "signature": "void SHSetInstanceExplorer( [in, optional] IUnknown *punk );",
            "name": "SHSetInstanceExplorer"
        },
        {
            "signature": "HRESULT SHSetKnownFolderPath( [in] REFKNOWNFOLDERID rfid, [in] DWORD dwFlags, [in] HANDLE hToken, [in] PCWSTR pszPath );",
            "name": "SHSetKnownFolderPath"
        },
        {
            "signature": "LRESULT SHShellFolderView_Message( [in] HWND hwndMain, UINT uMsg, LPARAM lParam );",
            "name": "SHShellFolderView_Message"
        },
        {
            "signature": "SHSTDAPI SHStartNetConnectionDialogA( [in, optional] HWND hwnd, [in, optional] LPCSTR pszRemoteName, DWORD dwType );",
            "name": "SHStartNetConnectionDialogA"
        },
        {
            "signature": "SHSTDAPI SHStartNetConnectionDialogW( [in, optional] HWND hwnd, [in, optional] LPCWSTR pszRemoteName, DWORD dwType );",
            "name": "SHStartNetConnectionDialogW"
        },
        {
            "signature": "void SHUpdateImageA( [in] LPCSTR pszHashItem, [in] int iIndex, [in] UINT uFlags, [in] int iImageIndex );",
            "name": "SHUpdateImageA"
        },
        {
            "signature": "void SHUpdateImageW( [in] LPCWSTR pszHashItem, [in] int iIndex, [in] UINT uFlags, [in] int iImageIndex );",
            "name": "SHUpdateImageW"
        },
        {
            "signature": "BOOL SHValidateUNC( [in, optional] HWND hwndOwner, [in, out] PWSTR pszFile, UINT fConnect );",
            "name": "SHValidateUNC"
        },
        {
            "signature": "BOOL SignalFileOpen( [in] PCIDLIST_ABSOLUTE pidl );",
            "name": "SignalFileOpen"
        },
        {
            "signature": "HRESULT StgMakeUniqueName( [in] IStorage *pstgParent, [in] PCWSTR pszFileSpec, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "StgMakeUniqueName"
        },
        {
            "signature": "BOOL Win32DeleteFile( [in] PCWSTR pszPath );",
            "name": "Win32DeleteFile"
        },
        {
            "signature": "BOOL WriteCabinetState( [in] CABINETSTATE *pcs );",
            "name": "WriteCabinetState"
        }
    ],
    "Shlwapi.h": [
        {
            "signature": "LWSTDAPI AssocCreate( [in] CLSID clsid, [in] REFIID riid, [out] void **ppv );",
            "name": "AssocCreate"
        },
        {
            "signature": "LWSTDAPI AssocGetPerceivedType( [in] PCWSTR pszExt, [out] PERCEIVED *ptype, [out] PERCEIVEDFLAG *pflag, [out, optional] PWSTR *ppszType );",
            "name": "AssocGetPerceivedType"
        },
        {
            "signature": "BOOL AssocIsDangerous( [in] PCWSTR pszAssoc );",
            "name": "AssocIsDangerous"
        },
        {
            "signature": "LWSTDAPI AssocQueryKeyA( [in] ASSOCF flags, [in] ASSOCKEY key, [in] LPCSTR pszAssoc, [in] LPCSTR pszExtra, [out] HKEY *phkeyOut );",
            "name": "AssocQueryKeyA"
        },
        {
            "signature": "LWSTDAPI AssocQueryKeyW( [in] ASSOCF flags, [in] ASSOCKEY key, [in] LPCWSTR pszAssoc, [in] LPCWSTR pszExtra, [out] HKEY *phkeyOut );",
            "name": "AssocQueryKeyW"
        },
        {
            "signature": "LWSTDAPI AssocQueryStringA( [in] ASSOCF flags, [in] ASSOCSTR str, [in] LPCSTR pszAssoc, [in, optional] LPCSTR pszExtra, [out, optional] LPSTR pszOut, [in, out] DWORD *pcchOut );",
            "name": "AssocQueryStringA"
        },
        {
            "signature": "LWSTDAPI AssocQueryStringByKeyA( [in] ASSOCF flags, [in] ASSOCSTR str, [in] HKEY hkAssoc, [in, optional] LPCSTR pszExtra, [out, optional] LPSTR pszOut, [in, out] DWORD *pcchOut );",
            "name": "AssocQueryStringByKeyA"
        },
        {
            "signature": "LWSTDAPI AssocQueryStringByKeyW( [in] ASSOCF flags, [in] ASSOCSTR str, [in] HKEY hkAssoc, [in, optional] LPCWSTR pszExtra, [out, optional] LPWSTR pszOut, [in, out] DWORD *pcchOut );",
            "name": "AssocQueryStringByKeyW"
        },
        {
            "signature": "LWSTDAPI AssocQueryStringW( [in] ASSOCF flags, [in] ASSOCSTR str, [in] LPCWSTR pszAssoc, [in, optional] LPCWSTR pszExtra, [out, optional] LPWSTR pszOut, [in, out] DWORD *pcchOut );",
            "name": "AssocQueryStringW"
        },
        {
            "signature": "BOOL ChrCmpIA( [in] WORD w1, [in] WORD w2 );",
            "name": "ChrCmpIA"
        },
        {
            "signature": "BOOL ChrCmpIW( [in] WCHAR w1, [in] WCHAR w2 );",
            "name": "ChrCmpIW"
        },
        {
            "signature": "COLORREF ColorAdjustLuma( COLORREF clrRGB, int n, BOOL fScale );",
            "name": "ColorAdjustLuma"
        },
        {
            "signature": "COLORREF ColorHLSToRGB( WORD wHue, WORD wLuminance, WORD wSaturation );",
            "name": "ColorHLSToRGB"
        },
        {
            "signature": "void ColorRGBToHLS( COLORREF clrRGB, [out] WORD *pwHue, [out] WORD *pwLuminance, [out] WORD *pwSaturation );",
            "name": "ColorRGBToHLS"
        },
        {
            "signature": "LWSTDAPI ConnectToConnectionPoint( [in, optional] IUnknown *punk, [in] REFIID riidEvent, BOOL fConnect, [in] IUnknown *punkTarget, [out] DWORD *pdwCookie, [out, optional] IConnectionPoint **ppcpOut );",
            "name": "ConnectToConnectionPoint"
        },
        {
            "signature": "DLLGETVERSIONPROC Dllgetversionproc; HRESULT Dllgetversionproc( DLLVERSIONINFO *unnamedParam1 ) {...}",
            "name": "DLLGETVERSIONPROC callback"
        },
        {
            "signature": "HRESULT DllInstall( BOOL bInstall, [in, optional] PCWSTR pszCmdLine );",
            "name": "DllInstall"
        },
        {
            "signature": "LWSTDAPI GetAcceptLanguagesA( [out] LPSTR pszLanguages, [in, out] DWORD *pcchLanguages );",
            "name": "GetAcceptLanguagesA"
        },
        {
            "signature": "LWSTDAPI GetAcceptLanguagesW( [out] LPWSTR pszLanguages, [in, out] DWORD *pcchLanguages );",
            "name": "GetAcceptLanguagesW"
        },
        {
            "signature": "int GetMenuPosFromID( [in] HMENU hmenu, UINT id );",
            "name": "GetMenuPosFromID"
        },
        {
            "signature": "LWSTDAPI GetProcessReference( [out] IUnknown **punk );",
            "name": "GetProcessReference"
        },
        {
            "signature": "LWSTDAPI HashData( [in] BYTE *pbData, DWORD cbData, [out] BYTE *pbHash, DWORD cbHash );",
            "name": "HashData"
        },
        {
            "signature": "BOOL IntlStrEqWorkerA( [in] BOOL fCaseSens, [in] LPCSTR lpString1, [in] LPCSTR lpString2, [in] int nChar );",
            "name": "IntlStrEqWorkerA"
        },
        {
            "signature": "BOOL IntlStrEqWorkerW( [in] BOOL fCaseSens, [in] LPCWSTR lpString1, [in] LPCWSTR lpString2, [in] int nChar );",
            "name": "IntlStrEqWorkerW"
        },
        {
            "signature": "BOOL IsCharSpaceA( [in] CHAR wch );",
            "name": "IsCharSpaceA"
        },
        {
            "signature": "BOOL IsCharSpaceW( [in] WCHAR wch );",
            "name": "IsCharSpaceW"
        },
        {
            "signature": "BOOL IsInternetESCEnabled();",
            "name": "IsInternetESCEnabled"
        },
        {
            "signature": "BOOL IsOS( [in] DWORD dwOS );",
            "name": "IsOS"
        },
        {
            "signature": "LWSTDAPI IStream_Copy( [in] IStream *pstmFrom, [in] IStream *pstmTo, [in] DWORD cb );",
            "name": "IStream_Copy"
        },
        {
            "signature": "LWSTDAPI IStream_Read( [in] IStream *pstm, [out] void *pv, [in] ULONG cb );",
            "name": "IStream_Read"
        },
        {
            "signature": "LWSTDAPI IStream_ReadPidl( [in] IStream *pstm, [out] PIDLIST_RELATIVE *ppidlOut );",
            "name": "IStream_ReadPidl"
        },
        {
            "signature": "LWSTDAPI IStream_ReadStr( [in] IStream *pstm, [out] PWSTR *ppsz );",
            "name": "IStream_ReadStr"
        },
        {
            "signature": "LWSTDAPI IStream_Reset( [in] IStream *pstm );",
            "name": "IStream_Reset"
        },
        {
            "signature": "LWSTDAPI IStream_Size( [in] IStream *pstm, [out] ULARGE_INTEGER *pui );",
            "name": "IStream_Size"
        },
        {
            "signature": "LWSTDAPI IStream_Write( [in] IStream *pstm, [in] const void *pv, [in] ULONG cb );",
            "name": "IStream_Write"
        },
        {
            "signature": "LWSTDAPI IStream_WritePidl( [in] IStream *pstm, [in] PCUIDLIST_RELATIVE pidlWrite );",
            "name": "IStream_WritePidl"
        },
        {
            "signature": "LWSTDAPI IStream_WriteStr( [in] IStream *pstm, [in] PCWSTR psz );",
            "name": "IStream_WriteStr"
        },
        {
            "signature": "void IUnknown_AtomicRelease( [in, out, optional] void **ppunk );",
            "name": "IUnknown_AtomicRelease"
        },
        {
            "signature": "LWSTDAPI IUnknown_GetSite( [in] IUnknown *punk, [in] REFIID riid, [out] void **ppv );",
            "name": "IUnknown_GetSite"
        },
        {
            "signature": "LWSTDAPI IUnknown_GetWindow( [in] IUnknown *punk, [out] HWND *phwnd );",
            "name": "IUnknown_GetWindow"
        },
        {
            "signature": "LWSTDAPI IUnknown_QueryService( [in] IUnknown *punk, [in] REFGUID guidService, [in] REFIID riid, [out] void **ppvOut );",
            "name": "IUnknown_QueryService"
        },
        {
            "signature": "void IUnknown_Set( [in, out] IUnknown **ppunk, [in, optional] IUnknown *punk );",
            "name": "IUnknown_Set"
        },
        {
            "signature": "LWSTDAPI IUnknown_SetSite( [in] IUnknown *punk, [in] IUnknown *punkSite );",
            "name": "IUnknown_SetSite"
        },
        {
            "signature": "LWSTDAPI ParseURLA( [in] LPCSTR pcszURL, [in, out] PARSEDURLA *ppu );",
            "name": "ParseURLA"
        },
        {
            "signature": "LWSTDAPI ParseURLW( [in] LPCWSTR pcszURL, [in, out] PARSEDURLW *ppu );",
            "name": "ParseURLW"
        },
        {
            "signature": "LPSTR PathAddBackslashA( [in, out] LPSTR pszPath );",
            "name": "PathAddBackslashA"
        },
        {
            "signature": "LPWSTR PathAddBackslashW( [in, out] LPWSTR pszPath );",
            "name": "PathAddBackslashW"
        },
        {
            "signature": "BOOL PathAddExtensionA( [in, out] LPSTR pszPath, [in, optional] LPCSTR pszExt );",
            "name": "PathAddExtensionA"
        },
        {
            "signature": "BOOL PathAddExtensionW( [in, out] LPWSTR pszPath, [in, optional] LPCWSTR pszExt );",
            "name": "PathAddExtensionW"
        },
        {
            "signature": "BOOL PathAppendA( [in, out] LPSTR pszPath, [in] LPCSTR pszMore );",
            "name": "PathAppendA"
        },
        {
            "signature": "BOOL PathAppendW( [in, out] LPWSTR pszPath, [in] LPCWSTR pszMore );",
            "name": "PathAppendW"
        },
        {
            "signature": "LPSTR PathBuildRootA( [out] LPSTR pszRoot, [in] int iDrive );",
            "name": "PathBuildRootA"
        },
        {
            "signature": "LPWSTR PathBuildRootW( [out] LPWSTR pszRoot, [in] int iDrive );",
            "name": "PathBuildRootW"
        },
        {
            "signature": "BOOL PathCanonicalizeA( [out] LPSTR pszBuf, [in] LPCSTR pszPath );",
            "name": "PathCanonicalizeA"
        },
        {
            "signature": "BOOL PathCanonicalizeW( [out] LPWSTR pszBuf, [in] LPCWSTR pszPath );",
            "name": "PathCanonicalizeW"
        },
        {
            "signature": "LPSTR PathCombineA( [out] LPSTR pszDest, [in, optional] LPCSTR pszDir, [in] LPCSTR pszFile );",
            "name": "PathCombineA"
        },
        {
            "signature": "LPWSTR PathCombineW( [out] LPWSTR pszDest, [in, optional] LPCWSTR pszDir, [in] LPCWSTR pszFile );",
            "name": "PathCombineW"
        },
        {
            "signature": "int PathCommonPrefixA( [in] LPCSTR pszFile1, [in] LPCSTR pszFile2, [out, optional] LPSTR achPath );",
            "name": "PathCommonPrefixA"
        },
        {
            "signature": "int PathCommonPrefixW( [in] LPCWSTR pszFile1, [in] LPCWSTR pszFile2, [out, optional] LPWSTR achPath );",
            "name": "PathCommonPrefixW"
        },
        {
            "signature": "BOOL PathCompactPathA( [in] HDC hDC, [in, out] LPSTR pszPath, [in] UINT dx );",
            "name": "PathCompactPathA"
        },
        {
            "signature": "BOOL PathCompactPathExA( [out] LPSTR pszOut, [in] LPCSTR pszSrc, [in] UINT cchMax, [in] DWORD dwFlags );",
            "name": "PathCompactPathExA"
        },
        {
            "signature": "BOOL PathCompactPathExW( [out] LPWSTR pszOut, [in] LPCWSTR pszSrc, [in] UINT cchMax, [in] DWORD dwFlags );",
            "name": "PathCompactPathExW"
        },
        {
            "signature": "BOOL PathCompactPathW( [in] HDC hDC, [in, out] LPWSTR pszPath, [in] UINT dx );",
            "name": "PathCompactPathW"
        },
        {
            "signature": "LWSTDAPI PathCreateFromUrlA( [in] PCSTR pszUrl, [out] PSTR pszPath, [in, out] DWORD *pcchPath, DWORD dwFlags );",
            "name": "PathCreateFromUrlA"
        },
        {
            "signature": "LWSTDAPI PathCreateFromUrlAlloc( [in] PCWSTR pszIn, [out] PWSTR *ppszOut, DWORD dwFlags );",
            "name": "PathCreateFromUrlAlloc"
        },
        {
            "signature": "LWSTDAPI PathCreateFromUrlW( [in] PCWSTR pszUrl, [out] PWSTR pszPath, [in, out] DWORD *pcchPath, DWORD dwFlags );",
            "name": "PathCreateFromUrlW"
        },
        {
            "signature": "BOOL PathFileExistsA( [in] LPCSTR pszPath );",
            "name": "PathFileExistsA"
        },
        {
            "signature": "BOOL PathFileExistsW( [in] LPCWSTR pszPath );",
            "name": "PathFileExistsW"
        },
        {
            "signature": "LPCSTR PathFindExtensionA( [in] LPCSTR pszPath );",
            "name": "PathFindExtensionA"
        },
        {
            "signature": "LPCWSTR PathFindExtensionW( [in] LPCWSTR pszPath );",
            "name": "PathFindExtensionW"
        },
        {
            "signature": "LPCSTR PathFindFileNameA( [in] LPCSTR pszPath );",
            "name": "PathFindFileNameA"
        },
        {
            "signature": "LPCWSTR PathFindFileNameW( [in] LPCWSTR pszPath );",
            "name": "PathFindFileNameW"
        },
        {
            "signature": "LPCSTR PathFindNextComponentA( [in] LPCSTR pszPath );",
            "name": "PathFindNextComponentA"
        },
        {
            "signature": "LPCWSTR PathFindNextComponentW( [in] LPCWSTR pszPath );",
            "name": "PathFindNextComponentW"
        },
        {
            "signature": "BOOL PathFindOnPathA( [in, out] LPSTR pszPath, [in, optional] PZPCSTR ppszOtherDirs );",
            "name": "PathFindOnPathA"
        },
        {
            "signature": "BOOL PathFindOnPathW( [in, out] LPWSTR pszPath, [in, optional] PZPCWSTR ppszOtherDirs );",
            "name": "PathFindOnPathW"
        },
        {
            "signature": "LPCSTR PathFindSuffixArrayA( [in] LPCSTR pszPath, [in] const LPCSTR *apszSuffix, [in] int iArraySize );",
            "name": "PathFindSuffixArrayA"
        },
        {
            "signature": "LPCWSTR PathFindSuffixArrayW( [in] LPCWSTR pszPath, [in] const LPCWSTR *apszSuffix, [in] int iArraySize );",
            "name": "PathFindSuffixArrayW"
        },
        {
            "signature": "LPCSTR PathGetArgsA( [in] LPCSTR pszPath );",
            "name": "PathGetArgsA"
        },
        {
            "signature": "LPCWSTR PathGetArgsW( [in] LPCWSTR pszPath );",
            "name": "PathGetArgsW"
        },
        {
            "signature": "UINT PathGetCharTypeA( [in] UCHAR ch );",
            "name": "PathGetCharTypeA"
        },
        {
            "signature": "UINT PathGetCharTypeW( [in] WCHAR ch );",
            "name": "PathGetCharTypeW"
        },
        {
            "signature": "int PathGetDriveNumberA( [in] LPCSTR pszPath );",
            "name": "PathGetDriveNumberA"
        },
        {
            "signature": "int PathGetDriveNumberW( [in] LPCWSTR pszPath );",
            "name": "PathGetDriveNumberW"
        },
        {
            "signature": "BOOL PathIsContentTypeA( [in] LPCSTR pszPath, [in] LPCSTR pszContentType );",
            "name": "PathIsContentTypeA"
        },
        {
            "signature": "BOOL PathIsContentTypeW( [in] LPCWSTR pszPath, [in] LPCWSTR pszContentType );",
            "name": "PathIsContentTypeW"
        },
        {
            "signature": "BOOL PathIsDirectoryA( [in] LPCSTR pszPath );",
            "name": "PathIsDirectoryA"
        },
        {
            "signature": "BOOL PathIsDirectoryEmptyA( [in] LPCSTR pszPath );",
            "name": "PathIsDirectoryEmptyA"
        },
        {
            "signature": "BOOL PathIsDirectoryEmptyW( [in] LPCWSTR pszPath );",
            "name": "PathIsDirectoryEmptyW"
        },
        {
            "signature": "BOOL PathIsDirectoryW( [in] LPCWSTR pszPath );",
            "name": "PathIsDirectoryW"
        },
        {
            "signature": "BOOL PathIsFileSpecA( [in] LPCSTR pszPath );",
            "name": "PathIsFileSpecA"
        },
        {
            "signature": "BOOL PathIsFileSpecW( [in] LPCWSTR pszPath );",
            "name": "PathIsFileSpecW"
        },
        {
            "signature": "BOOL PathIsLFNFileSpecA( [in] LPCSTR pszName );",
            "name": "PathIsLFNFileSpecA"
        },
        {
            "signature": "BOOL PathIsLFNFileSpecW( [in] LPCWSTR pszName );",
            "name": "PathIsLFNFileSpecW"
        },
        {
            "signature": "BOOL PathIsNetworkPathA( [in] LPCSTR pszPath );",
            "name": "PathIsNetworkPathA"
        },
        {
            "signature": "BOOL PathIsNetworkPathW( [in] LPCWSTR pszPath );",
            "name": "PathIsNetworkPathW"
        },
        {
            "signature": "BOOL PathIsPrefixA( [in] LPCSTR pszPrefix, [in] LPCSTR pszPath );",
            "name": "PathIsPrefixA"
        },
        {
            "signature": "BOOL PathIsPrefixW( [in] LPCWSTR pszPrefix, [in] LPCWSTR pszPath );",
            "name": "PathIsPrefixW"
        },
        {
            "signature": "BOOL PathIsRelativeA( [in] LPCSTR pszPath );",
            "name": "PathIsRelativeA"
        },
        {
            "signature": "BOOL PathIsRelativeW( [in] LPCWSTR pszPath );",
            "name": "PathIsRelativeW"
        },
        {
            "signature": "BOOL PathIsRootA( [in] LPCSTR pszPath );",
            "name": "PathIsRootA"
        },
        {
            "signature": "BOOL PathIsRootW( [in] LPCWSTR pszPath );",
            "name": "PathIsRootW"
        },
        {
            "signature": "BOOL PathIsSameRootA( [in] LPCSTR pszPath1, [in] LPCSTR pszPath2 );",
            "name": "PathIsSameRootA"
        },
        {
            "signature": "BOOL PathIsSameRootW( [in] LPCWSTR pszPath1, [in] LPCWSTR pszPath2 );",
            "name": "PathIsSameRootW"
        },
        {
            "signature": "BOOL PathIsSystemFolderA( [in, optional] LPCSTR pszPath, [in] DWORD dwAttrb );",
            "name": "PathIsSystemFolderA"
        },
        {
            "signature": "BOOL PathIsSystemFolderW( [in, optional] LPCWSTR pszPath, [in] DWORD dwAttrb );",
            "name": "PathIsSystemFolderW"
        },
        {
            "signature": "BOOL PathIsUNCA( [in] LPCSTR pszPath );",
            "name": "PathIsUNCA"
        },
        {
            "signature": "BOOL PathIsUNCServerA( [in] LPCSTR pszPath );",
            "name": "PathIsUNCServerA"
        },
        {
            "signature": "BOOL PathIsUNCServerShareA( [in] LPCSTR pszPath );",
            "name": "PathIsUNCServerShareA"
        },
        {
            "signature": "BOOL PathIsUNCServerShareW( [in] LPCWSTR pszPath );",
            "name": "PathIsUNCServerShareW"
        },
        {
            "signature": "BOOL PathIsUNCServerW( [in] LPCWSTR pszPath );",
            "name": "PathIsUNCServerW"
        },
        {
            "signature": "BOOL PathIsUNCW( [in] LPCWSTR pszPath );",
            "name": "PathIsUNCW"
        },
        {
            "signature": "BOOL PathIsURLA( [in] LPCSTR pszPath );",
            "name": "PathIsURLA"
        },
        {
            "signature": "BOOL PathIsURLW( [in] LPCWSTR pszPath );",
            "name": "PathIsURLW"
        },
        {
            "signature": "BOOL PathMakePrettyA( [in, out] LPSTR pszPath );",
            "name": "PathMakePrettyA"
        },
        {
            "signature": "BOOL PathMakePrettyW( [in, out] LPWSTR pszPath );",
            "name": "PathMakePrettyW"
        },
        {
            "signature": "BOOL PathMakeSystemFolderA( [in] LPCSTR pszPath );",
            "name": "PathMakeSystemFolderA"
        },
        {
            "signature": "BOOL PathMakeSystemFolderW( [in] LPCWSTR pszPath );",
            "name": "PathMakeSystemFolderW"
        },
        {
            "signature": "BOOL PathMatchSpecA( [in] LPCSTR pszFile, [in] LPCSTR pszSpec );",
            "name": "PathMatchSpecA"
        },
        {
            "signature": "LWSTDAPI PathMatchSpecExA( [in] LPCSTR pszFile, [in] LPCSTR pszSpec, [in] DWORD dwFlags );",
            "name": "PathMatchSpecExA"
        },
        {
            "signature": "LWSTDAPI PathMatchSpecExW( [in] LPCWSTR pszFile, [in] LPCWSTR pszSpec, [in] DWORD dwFlags );",
            "name": "PathMatchSpecExW"
        },
        {
            "signature": "BOOL PathMatchSpecW( [in] LPCWSTR pszFile, [in] LPCWSTR pszSpec );",
            "name": "PathMatchSpecW"
        },
        {
            "signature": "int PathParseIconLocationA( [in, out] LPSTR pszIconFile );",
            "name": "PathParseIconLocationA"
        },
        {
            "signature": "int PathParseIconLocationW( [in, out] LPWSTR pszIconFile );",
            "name": "PathParseIconLocationW"
        },
        {
            "signature": "BOOL PathQuoteSpacesA( [in, out] LPSTR lpsz );",
            "name": "PathQuoteSpacesA"
        },
        {
            "signature": "BOOL PathQuoteSpacesW( [in, out] LPWSTR lpsz );",
            "name": "PathQuoteSpacesW"
        },
        {
            "signature": "BOOL PathRelativePathToA( [out] LPSTR pszPath, [in] LPCSTR pszFrom, [in] DWORD dwAttrFrom, [in] LPCSTR pszTo, [in] DWORD dwAttrTo );",
            "name": "PathRelativePathToA"
        },
        {
            "signature": "BOOL PathRelativePathToW( [out] LPWSTR pszPath, [in] LPCWSTR pszFrom, [in] DWORD dwAttrFrom, [in] LPCWSTR pszTo, [in] DWORD dwAttrTo );",
            "name": "PathRelativePathToW"
        },
        {
            "signature": "void PathRemoveArgsA( [in, out] LPSTR pszPath );",
            "name": "PathRemoveArgsA"
        },
        {
            "signature": "void PathRemoveArgsW( [in, out] LPWSTR pszPath );",
            "name": "PathRemoveArgsW"
        },
        {
            "signature": "LPSTR PathRemoveBackslashA( [in, out] LPSTR pszPath );",
            "name": "PathRemoveBackslashA"
        },
        {
            "signature": "LPWSTR PathRemoveBackslashW( [in, out] LPWSTR pszPath );",
            "name": "PathRemoveBackslashW"
        },
        {
            "signature": "void PathRemoveBlanksA( [in, out] LPSTR pszPath );",
            "name": "PathRemoveBlanksA"
        },
        {
            "signature": "void PathRemoveBlanksW( [in, out] LPWSTR pszPath );",
            "name": "PathRemoveBlanksW"
        },
        {
            "signature": "void PathRemoveExtensionA( [in, out] LPSTR pszPath );",
            "name": "PathRemoveExtensionA"
        },
        {
            "signature": "void PathRemoveExtensionW( [in, out] LPWSTR pszPath );",
            "name": "PathRemoveExtensionW"
        },
        {
            "signature": "BOOL PathRemoveFileSpecA( [in, out] LPSTR pszPath );",
            "name": "PathRemoveFileSpecA"
        },
        {
            "signature": "BOOL PathRemoveFileSpecW( [in, out] LPWSTR pszPath );",
            "name": "PathRemoveFileSpecW"
        },
        {
            "signature": "BOOL PathRenameExtensionA( [in, out] LPSTR pszPath, [in] LPCSTR pszExt );",
            "name": "PathRenameExtensionA"
        },
        {
            "signature": "BOOL PathRenameExtensionW( [in, out] LPWSTR pszPath, [in] LPCWSTR pszExt );",
            "name": "PathRenameExtensionW"
        },
        {
            "signature": "BOOL PathSearchAndQualifyA( [in] LPCSTR pszPath, [out] LPSTR pszBuf, [in] UINT cchBuf );",
            "name": "PathSearchAndQualifyA"
        },
        {
            "signature": "BOOL PathSearchAndQualifyW( [in] LPCWSTR pszPath, [out] LPWSTR pszBuf, [in] UINT cchBuf );",
            "name": "PathSearchAndQualifyW"
        },
        {
            "signature": "void PathSetDlgItemPathA( [in] HWND hDlg, [in] int id, [in] LPCSTR pszPath );",
            "name": "PathSetDlgItemPathA"
        },
        {
            "signature": "void PathSetDlgItemPathW( [in] HWND hDlg, [in] int id, [in] LPCWSTR pszPath );",
            "name": "PathSetDlgItemPathW"
        },
        {
            "signature": "LPCSTR PathSkipRootA( [in] LPCSTR pszPath );",
            "name": "PathSkipRootA"
        },
        {
            "signature": "LPCWSTR PathSkipRootW( [in] LPCWSTR pszPath );",
            "name": "PathSkipRootW"
        },
        {
            "signature": "void PathStripPathA( [in, out] LPSTR pszPath );",
            "name": "PathStripPathA"
        },
        {
            "signature": "void PathStripPathW( [in, out] LPWSTR pszPath );",
            "name": "PathStripPathW"
        },
        {
            "signature": "BOOL PathStripToRootA( [in, out] LPSTR pszPath );",
            "name": "PathStripToRootA"
        },
        {
            "signature": "BOOL PathStripToRootW( [in, out] LPWSTR pszPath );",
            "name": "PathStripToRootW"
        },
        {
            "signature": "void PathUndecorateA( [in, out] LPSTR pszPath );",
            "name": "PathUndecorateA"
        },
        {
            "signature": "void PathUndecorateW( [in, out] LPWSTR pszPath );",
            "name": "PathUndecorateW"
        },
        {
            "signature": "BOOL PathUnExpandEnvStringsA( [in] LPCSTR pszPath, [out] LPSTR pszBuf, [in] UINT cchBuf );",
            "name": "PathUnExpandEnvStringsA"
        },
        {
            "signature": "BOOL PathUnExpandEnvStringsW( [in] LPCWSTR pszPath, [out] LPWSTR pszBuf, [in] UINT cchBuf );",
            "name": "PathUnExpandEnvStringsW"
        },
        {
            "signature": "BOOL PathUnmakeSystemFolderA( [in] LPCSTR pszPath );",
            "name": "PathUnmakeSystemFolderA"
        },
        {
            "signature": "BOOL PathUnmakeSystemFolderW( [in] LPCWSTR pszPath );",
            "name": "PathUnmakeSystemFolderW"
        },
        {
            "signature": "BOOL PathUnquoteSpacesA( [in, out] LPSTR lpsz );",
            "name": "PathUnquoteSpacesA"
        },
        {
            "signature": "BOOL PathUnquoteSpacesW( [in, out] LPWSTR lpsz );",
            "name": "PathUnquoteSpacesW"
        },
        {
            "signature": "HRESULT QISearch( [in] void *that, [in] LPCQITAB pqit, [in] REFIID riid, [out] void **ppv );",
            "name": "QISearch"
        },
        {
            "signature": "void SetProcessReference( [in, optional] IUnknown *punk );",
            "name": "SetProcessReference"
        },
        {
            "signature": "HANDLE SHAllocShared( [in, optional] const void *pvData, [in] DWORD dwSize, [in] DWORD dwProcessId );",
            "name": "SHAllocShared"
        },
        {
            "signature": "int SHAnsiToAnsi( [in] PCSTR pszSrc, [out] PSTR pszDst, int cchBuf );",
            "name": "SHAnsiToAnsi"
        },
        {
            "signature": "int SHAnsiToUnicode( [in] PCSTR pszSrc, [out] PWSTR pwszDst, int cwchBuf );",
            "name": "SHAnsiToUnicode"
        },
        {
            "signature": "LWSTDAPI SHAutoComplete( [in] HWND hwndEdit, DWORD dwFlags );",
            "name": "SHAutoComplete"
        },
        {
            "signature": "LSTATUS SHCopyKeyA( [in] HKEY hkeySrc, [in, optional] LPCSTR pszSrcSubKey, [in] HKEY hkeyDest, DWORD fReserved );",
            "name": "SHCopyKeyA"
        },
        {
            "signature": "LSTATUS SHCopyKeyW( [in] HKEY hkeySrc, [in, optional] LPCWSTR pszSrcSubKey, [in] HKEY hkeyDest, DWORD fReserved );",
            "name": "SHCopyKeyW"
        },
        {
            "signature": "IStream * SHCreateMemStream( [in, optional] const BYTE *pInit, [in] UINT cbInit );",
            "name": "SHCreateMemStream"
        },
        {
            "signature": "HPALETTE SHCreateShellPalette( [in, optional] HDC hdc );",
            "name": "SHCreateShellPalette"
        },
        {
            "signature": "LWSTDAPI SHCreateStreamOnFileA( [in] LPCSTR pszFile, [in] DWORD grfMode, [out] IStream **ppstm );",
            "name": "SHCreateStreamOnFileA"
        },
        {
            "signature": "LWSTDAPI SHCreateStreamOnFileEx( [in] LPCWSTR pszFile, [in] DWORD grfMode, [in] DWORD dwAttributes, [in] BOOL fCreate, [in, optional] IStream *pstmTemplate, [out] IStream **ppstm );",
            "name": "SHCreateStreamOnFileEx"
        },
        {
            "signature": "LWSTDAPI SHCreateStreamOnFileW( [in] LPCWSTR pszFile, [in] DWORD grfMode, [out] IStream **ppstm );",
            "name": "SHCreateStreamOnFileW"
        },
        {
            "signature": "BOOL SHCreateThread( [in] LPTHREAD_START_ROUTINE pfnThreadProc, [in, optional] void *pData, [in] SHCT_FLAGS flags, [in, optional] LPTHREAD_START_ROUTINE pfnCallback );",
            "name": "SHCreateThread"
        },
        {
            "signature": "LWSTDAPI SHCreateThreadRef( [in] LONG *pcRef, [out] IUnknown **ppunk );",
            "name": "SHCreateThreadRef"
        },
        {
            "signature": "BOOL SHCreateThreadWithHandle( [in] LPTHREAD_START_ROUTINE pfnThreadProc, [in, optional] void *pData, [in] SHCT_FLAGS flags, [in, optional] LPTHREAD_START_ROUTINE pfnCallback, [out, optional] HANDLE *pHandle );",
            "name": "SHCreateThreadWithHandle"
        },
        {
            "signature": "LSTATUS SHDeleteEmptyKeyA( [in] HKEY hkey, [in, optional] LPCSTR pszSubKey );",
            "name": "SHDeleteEmptyKeyA"
        },
        {
            "signature": "LSTATUS SHDeleteEmptyKeyW( [in] HKEY hkey, [in, optional] LPCWSTR pszSubKey );",
            "name": "SHDeleteEmptyKeyW"
        },
        {
            "signature": "LSTATUS SHDeleteKeyA( [in] HKEY hkey, [in, optional] LPCSTR pszSubKey );",
            "name": "SHDeleteKeyA"
        },
        {
            "signature": "LSTATUS SHDeleteKeyW( [in] HKEY hkey, [in, optional] LPCWSTR pszSubKey );",
            "name": "SHDeleteKeyW"
        },
        {
            "signature": "LSTATUS SHDeleteValueA( HKEY hkey, LPCSTR pszSubKey, LPCSTR pszValue );",
            "name": "SHDeleteValueA"
        },
        {
            "signature": "LSTATUS SHDeleteValueW( HKEY hkey, LPCWSTR pszSubKey, LPCWSTR pszValue );",
            "name": "SHDeleteValueW"
        },
        {
            "signature": "LSTATUS SHEnumKeyExA( [in] HKEY hkey, DWORD dwIndex, LPSTR pszName, [in] LPDWORD pcchName );",
            "name": "SHEnumKeyExA"
        },
        {
            "signature": "LSTATUS SHEnumKeyExW( [in] HKEY hkey, DWORD dwIndex, LPWSTR pszName, [in] LPDWORD pcchName );",
            "name": "SHEnumKeyExW"
        },
        {
            "signature": "LSTATUS SHEnumValueA( [in] HKEY hkey, [in] DWORD dwIndex, PSTR pszValueName, [in, out, optional] LPDWORD pcchValueName, [out, optional] LPDWORD pdwType, void *pvData, [in, out, optional] LPDWORD pcbData );",
            "name": "SHEnumValueA"
        },
        {
            "signature": "LSTATUS SHEnumValueW( [in] HKEY hkey, [in] DWORD dwIndex, PWSTR pszValueName, [in, out, optional] LPDWORD pcchValueName, [out, optional] LPDWORD pdwType, void *pvData, [in, out, optional] LPDWORD pcbData );",
            "name": "SHEnumValueW"
        },
        {
            "signature": "int SHFormatDateTimeA( [in] const FILETIME *pft, [in, out, optional] DWORD *pdwFlags, [out] LPSTR pszBuf, UINT cchBuf );",
            "name": "SHFormatDateTimeA"
        },
        {
            "signature": "int SHFormatDateTimeW( [in] const FILETIME *pft, [in, out, optional] DWORD *pdwFlags, [out] LPWSTR pszBuf, UINT cchBuf );",
            "name": "SHFormatDateTimeW"
        },
        {
            "signature": "BOOL SHFreeShared( [in] HANDLE hData, [in] DWORD dwProcessId );",
            "name": "SHFreeShared"
        },
        {
            "signature": "DWORD SHGetAssocKeys( [in] IQueryAssociations *pqa, [out] HKEY *rgKeys, DWORD cKeys );",
            "name": "SHGetAssocKeys"
        },
        {
            "signature": "LWSTDAPI SHGetInverseCMAP( [out] BYTE *pbMap, [in] ULONG cbMap );",
            "name": "SHGetInverseCMAP"
        },
        {
            "signature": "LWSTDAPI SHGetThreadRef( [in] IUnknown **ppunk );",
            "name": "SHGetThreadRef"
        },
        {
            "signature": "LSTATUS SHGetValueA( [in] HKEY hkey, [in, optional] LPCSTR pszSubKey, [in, optional] LPCSTR pszValue, [out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData );",
            "name": "SHGetValueA"
        },
        {
            "signature": "LSTATUS SHGetValueW( [in] HKEY hkey, [in, optional] LPCWSTR pszSubKey, [in, optional] LPCWSTR pszValue, [out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData );",
            "name": "SHGetValueW"
        },
        {
            "signature": "LWSTDAPI SHGetViewStatePropertyBag( [in, optional] PCIDLIST_ABSOLUTE pidl, [in, optional] PCWSTR pszBagName, DWORD dwFlags, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetViewStatePropertyBag"
        },
        {
            "signature": "long SHGlobalCounterDecrement( [in] const SHGLOBALCOUNTER id );",
            "name": "SHGlobalCounterDecrement"
        },
        {
            "signature": "long SHGlobalCounterGetValue( [in] const SHGLOBALCOUNTER id );",
            "name": "SHGlobalCounterGetValue"
        },
        {
            "signature": "long SHGlobalCounterIncrement( [in] const SHGLOBALCOUNTER id );",
            "name": "SHGlobalCounterIncrement"
        },
        {
            "signature": "BOOL SHIsLowMemoryMachine( [in] DWORD dwType );",
            "name": "SHIsLowMemoryMachine"
        },
        {
            "signature": "LWSTDAPI SHLoadIndirectString( [in] PCWSTR pszSource, [out] PWSTR pszOutBuf, [in] UINT cchOutBuf, void **ppvReserved );",
            "name": "SHLoadIndirectString"
        },
        {
            "signature": "HRESULT SHLocalStrDupA( PCSTR psz, [out, optional] PSTR *ppsz );",
            "name": "SHLocalStrDupA"
        },
        {
            "signature": "HRESULT SHLocalStrDupW( PCWSTR psz, [out, optional] PWSTR *ppsz );",
            "name": "SHLocalStrDupW"
        },
        {
            "signature": "void * SHLockShared( [in] HANDLE hData, [in] DWORD dwProcessId );",
            "name": "SHLockShared"
        },
        {
            "signature": "int SHMessageBoxCheckA( [in, optional] HWND hwnd, [in] LPCSTR pszText, [in] LPCSTR pszCaption, UINT uType, int iDefault, [in] LPCSTR pszRegVal );",
            "name": "SHMessageBoxCheckA"
        },
        {
            "signature": "int SHMessageBoxCheckW( [in, optional] HWND hwnd, [in] LPCWSTR pszText, [in] LPCWSTR pszCaption, UINT uType, int iDefault, [in] LPCWSTR pszRegVal );",
            "name": "SHMessageBoxCheckW"
        },
        {
            "signature": "IStream * SHOpenRegStream2A( [in] HKEY hkey, [in, optional] LPCSTR pszSubkey, [in, optional] LPCSTR pszValue, [in] DWORD grfMode );",
            "name": "SHOpenRegStream2A"
        },
        {
            "signature": "IStream * SHOpenRegStream2W( [in] HKEY hkey, [in, optional] LPCWSTR pszSubkey, [in, optional] LPCWSTR pszValue, [in] DWORD grfMode );",
            "name": "SHOpenRegStream2W"
        },
        {
            "signature": "IStream * SHOpenRegStreamA( [in] HKEY hkey, [in, optional] LPCSTR pszSubkey, [in, optional] LPCSTR pszValue, [in] DWORD grfMode );",
            "name": "SHOpenRegStreamA"
        },
        {
            "signature": "IStream * SHOpenRegStreamW( [in] HKEY hkey, [in, optional] LPCWSTR pszSubkey, [in, optional] LPCWSTR pszValue, [in] DWORD grfMode );",
            "name": "SHOpenRegStreamW"
        },
        {
            "signature": "LSTATUS SHQueryInfoKeyA( [in] HKEY hkey, [out, optional] LPDWORD pcSubKeys, [out, optional] LPDWORD pcchMaxSubKeyLen, [out, optional] LPDWORD pcValues, [out, optional] LPDWORD pcchMaxValueNameLen );",
            "name": "SHQueryInfoKeyA"
        },
        {
            "signature": "LSTATUS SHQueryInfoKeyW( [in] HKEY hkey, [out, optional] LPDWORD pcSubKeys, [out, optional] LPDWORD pcchMaxSubKeyLen, [out, optional] LPDWORD pcValues, [out, optional] LPDWORD pcchMaxValueNameLen );",
            "name": "SHQueryInfoKeyW"
        },
        {
            "signature": "LSTATUS SHQueryValueExA( [in] HKEY hkey, [in, optional] LPCSTR pszValue, DWORD *pdwReserved, [out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData );",
            "name": "SHQueryValueExA"
        },
        {
            "signature": "LSTATUS SHQueryValueExW( [in] HKEY hkey, [in, optional] LPCWSTR pszValue, DWORD *pdwReserved, [out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData );",
            "name": "SHQueryValueExW"
        },
        {
            "signature": "LSTATUS SHRegCloseUSKey( [in] HUSKEY hUSKey );",
            "name": "SHRegCloseUSKey"
        },
        {
            "signature": "LSTATUS SHRegCreateUSKeyA( [in] LPCSTR pszPath, [in] REGSAM samDesired, [in, optional] HUSKEY hRelativeUSKey, [out] PHUSKEY phNewUSKey, [in] DWORD dwFlags );",
            "name": "SHRegCreateUSKeyA"
        },
        {
            "signature": "LSTATUS SHRegCreateUSKeyW( LPCWSTR pwzPath, [in] REGSAM samDesired, [in, optional] HUSKEY hRelativeUSKey, [out] PHUSKEY phNewUSKey, [in] DWORD dwFlags );",
            "name": "SHRegCreateUSKeyW"
        },
        {
            "signature": "LSTATUS SHRegDeleteEmptyUSKeyA( [in] HUSKEY hUSKey, [in] LPCSTR pszSubKey, [in] SHREGDEL_FLAGS delRegFlags );",
            "name": "SHRegDeleteEmptyUSKeyA"
        },
        {
            "signature": "LSTATUS SHRegDeleteEmptyUSKeyW( [in] HUSKEY hUSKey, LPCWSTR pwzSubKey, [in] SHREGDEL_FLAGS delRegFlags );",
            "name": "SHRegDeleteEmptyUSKeyW"
        },
        {
            "signature": "LSTATUS SHRegDeleteUSValueA( [in] HUSKEY hUSKey, [in] LPCSTR pszValue, [in] SHREGDEL_FLAGS delRegFlags );",
            "name": "SHRegDeleteUSValueA"
        },
        {
            "signature": "LSTATUS SHRegDeleteUSValueW( [in] HUSKEY hUSKey, LPCWSTR pwzValue, [in] SHREGDEL_FLAGS delRegFlags );",
            "name": "SHRegDeleteUSValueW"
        },
        {
            "signature": "HKEY SHRegDuplicateHKey( [in] HKEY hkey );",
            "name": "SHRegDuplicateHKey"
        },
        {
            "signature": "LSTATUS SHRegEnumUSKeyA( [in] HUSKEY hUSKey, [in] DWORD dwIndex, [out] LPSTR pszName, [in, out] LPDWORD pcchName, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegEnumUSKeyA"
        },
        {
            "signature": "LSTATUS SHRegEnumUSKeyW( [in] HUSKEY hUSKey, [in] DWORD dwIndex, LPWSTR pwzName, [in, out] LPDWORD pcchName, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegEnumUSKeyW"
        },
        {
            "signature": "LSTATUS SHRegEnumUSValueA( [in] HUSKEY hUSkey, [in] DWORD dwIndex, [out] LPSTR pszValueName, [in, out] LPDWORD pcchValueName, [out, optional] LPDWORD pdwType, [out, optional] void *pvData, [in, out, optional] LPDWORD pcbData, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegEnumUSValueA"
        },
        {
            "signature": "LSTATUS SHRegEnumUSValueW( [in] HUSKEY hUSkey, [in] DWORD dwIndex, [out] LPWSTR pszValueName, [in, out] LPDWORD pcchValueName, [out, optional] LPDWORD pdwType, [out, optional] void *pvData, [in, out, optional] LPDWORD pcbData, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegEnumUSValueW"
        },
        {
            "signature": "BOOL SHRegGetBoolUSValueA( [in] LPCSTR pszSubKey, [in, optional] LPCSTR pszValue, [in] BOOL fIgnoreHKCU, [in] BOOL fDefault );",
            "name": "SHRegGetBoolUSValueA"
        },
        {
            "signature": "BOOL SHRegGetBoolUSValueW( [in] LPCWSTR pszSubKey, [in, optional] LPCWSTR pszValue, [in] BOOL fIgnoreHKCU, [in] BOOL fDefault );",
            "name": "SHRegGetBoolUSValueW"
        },
        {
            "signature": "BOOL SHRegGetBoolValueFromHKCUHKLM( PCWSTR pszKey, [in] PCWSTR pszValue, [in] BOOL fDefault );",
            "name": "SHRegGetBoolValueFromHKCUHKLM"
        },
        {
            "signature": "int SHRegGetIntW( [in] HKEY hk, [in] PCWSTR pwzKey, [in] int iDefault );",
            "name": "SHRegGetIntW"
        },
        {
            "signature": "LSTATUS SHRegGetPathA( [in] HKEY hKey, [in] LPCSTR pcszSubKey, [in] LPCSTR pcszValue, [out] LPSTR pszPath, DWORD dwFlags );",
            "name": "SHRegGetPathA"
        },
        {
            "signature": "LSTATUS SHRegGetPathW( [in] HKEY hKey, [in] LPCWSTR pcszSubKey, [in] LPCWSTR pcszValue, [out] LPWSTR pszPath, DWORD dwFlags );",
            "name": "SHRegGetPathW"
        },
        {
            "signature": "LSTATUS SHRegGetUSValueA( [in] LPCSTR pszSubKey, [in, optional] LPCSTR pszValue, [in, out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData, [in] BOOL fIgnoreHKCU, [in, optional] void *pvDefaultData, [in] DWORD dwDefaultDataSize );",
            "name": "SHRegGetUSValueA"
        },
        {
            "signature": "LSTATUS SHRegGetUSValueW( [in] LPCWSTR pszSubKey, [in, optional] LPCWSTR pszValue, [in, out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out, optional] DWORD *pcbData, [in] BOOL fIgnoreHKCU, [in, optional] void *pvDefaultData, [in] DWORD dwDefaultDataSize );",
            "name": "SHRegGetUSValueW"
        },
        {
            "signature": "LSTATUS SHRegGetValueA( [in] HKEY hkey, [in] LPCSTR pszSubKey, [in] LPCSTR pszValue, [in] SRRF srrfFlags, [in, out] DWORD *pdwType, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "SHRegGetValueA"
        },
        {
            "signature": "LSTATUS SHRegGetValueFromHKCUHKLM( [in] PCWSTR pwszKey, [in] PCWSTR pwszValue, [in] SRRF srrfFlags, [out] DWORD *pdwType, [in] void *pvData, [in, out] DWORD *pcbData );",
            "name": "SHRegGetValueFromHKCUHKLM"
        },
        {
            "signature": "LSTATUS SHRegGetValueW( [in] HKEY hkey, [in] LPCWSTR pszSubKey, [in] LPCWSTR pszValue, [in] SRRF srrfFlags, [in, out] DWORD *pdwType, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "SHRegGetValueW"
        },
        {
            "signature": "LSTATUS SHRegOpenUSKeyA( [in] LPCSTR pszPath, [in] REGSAM samDesired, [in, optional] HUSKEY hRelativeUSKey, [out] PHUSKEY phNewUSKey, [in] BOOL fIgnoreHKCU );",
            "name": "SHRegOpenUSKeyA"
        },
        {
            "signature": "LSTATUS SHRegOpenUSKeyW( LPCWSTR pwzPath, [in] REGSAM samDesired, [in, optional] HUSKEY hRelativeUSKey, [out] PHUSKEY phNewUSKey, [in] BOOL fIgnoreHKCU );",
            "name": "SHRegOpenUSKeyW"
        },
        {
            "signature": "LSTATUS SHRegQueryInfoUSKeyA( [in] HUSKEY hUSKey, [out, optional] LPDWORD pcSubKeys, [out, optional] LPDWORD pcchMaxSubKeyLen, [out, optional] LPDWORD pcValues, [out, optional] LPDWORD pcchMaxValueNameLen, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegQueryInfoUSKeyA"
        },
        {
            "signature": "LSTATUS SHRegQueryInfoUSKeyW( [in] HUSKEY hUSKey, [out, optional] LPDWORD pcSubKeys, [out, optional] LPDWORD pcchMaxSubKeyLen, [out, optional] LPDWORD pcValues, [out, optional] LPDWORD pcchMaxValueNameLen, [in] SHREGENUM_FLAGS enumRegFlags );",
            "name": "SHRegQueryInfoUSKeyW"
        },
        {
            "signature": "LSTATUS SHRegQueryUSValueA( [in] HUSKEY hUSKey, [in, optional] LPCSTR pszValue, [in, out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out] DWORD *pcbData, [in] BOOL fIgnoreHKCU, [in, optional] void *pvDefaultData, [in, optional] DWORD dwDefaultDataSize );",
            "name": "SHRegQueryUSValueA"
        },
        {
            "signature": "LSTATUS SHRegQueryUSValueW( [in] HUSKEY hUSKey, [in, optional] LPCWSTR pszValue, [in, out, optional] DWORD *pdwType, [out, optional] void *pvData, [in, out] DWORD *pcbData, [in] BOOL fIgnoreHKCU, [in, optional] void *pvDefaultData, [in, optional] DWORD dwDefaultDataSize );",
            "name": "SHRegQueryUSValueW"
        },
        {
            "signature": "LSTATUS SHRegSetPathA( [in] HKEY hKey, [in] LPCSTR pcszSubKey, [in] LPCSTR pcszValue, [in] LPCSTR pcszPath, DWORD dwFlags );",
            "name": "SHRegSetPathA"
        },
        {
            "signature": "LSTATUS SHRegSetPathW( [in] HKEY hKey, [in] LPCWSTR pcszSubKey, [in] LPCWSTR pcszValue, [in] LPCWSTR pcszPath, DWORD dwFlags );",
            "name": "SHRegSetPathW"
        },
        {
            "signature": "LSTATUS SHRegSetUSValueA( [in] LPCSTR pszSubKey, [in] LPCSTR pszValue, [in] DWORD dwType, [in, optional] const void *pvData, [in, optional] DWORD cbData, [in, optional] DWORD dwFlags );",
            "name": "SHRegSetUSValueA"
        },
        {
            "signature": "LSTATUS SHRegSetUSValueW( LPCWSTR pwzSubKey, LPCWSTR pwzValue, [in] DWORD dwType, [in, optional] const void *pvData, [in, optional] DWORD cbData, [in, optional] DWORD dwFlags );",
            "name": "SHRegSetUSValueW"
        },
        {
            "signature": "LSTATUS SHRegSetValue( [in] HKEY hkey, [in] LPCWSTR pszSubKey, [in] LPCWSTR pszValue, [in] SRRF srrfFlags, [in] DWORD dwType, [in] LPCVOID pvData, [in] DWORD cbData );",
            "name": "SHRegSetValue"
        },
        {
            "signature": "LSTATUS SHRegWriteUSValueA( [in] HUSKEY hUSKey, [in] LPCSTR pszValue, [in] DWORD dwType, [in] const void *pvData, [in] DWORD cbData, [in] DWORD dwFlags );",
            "name": "SHRegWriteUSValueA"
        },
        {
            "signature": "LSTATUS SHRegWriteUSValueW( [in] HUSKEY hUSKey, LPCWSTR pwzValue, [in] DWORD dwType, [in] const void *pvData, [in] DWORD cbData, [in] DWORD dwFlags );",
            "name": "SHRegWriteUSValueW"
        },
        {
            "signature": "LWSTDAPI SHReleaseThreadRef();",
            "name": "SHReleaseThreadRef"
        },
        {
            "signature": "LRESULT SHSendMessageBroadcastA( [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SHSendMessageBroadcastA"
        },
        {
            "signature": "LRESULT SHSendMessageBroadcastW( [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SHSendMessageBroadcastW"
        },
        {
            "signature": "LWSTDAPI SHSetThreadRef( [in, optional] IUnknown *punk );",
            "name": "SHSetThreadRef"
        },
        {
            "signature": "LSTATUS SHSetValueA( [in] HKEY hkey, [in, optional] LPCSTR pszSubKey, [in, optional] LPCSTR pszValue, [in] DWORD dwType, [in, optional] LPCVOID pvData, [in] DWORD cbData );",
            "name": "SHSetValueA"
        },
        {
            "signature": "LSTATUS SHSetValueW( [in] HKEY hkey, [in, optional] LPCWSTR pszSubKey, [in, optional] LPCWSTR pszValue, [in] DWORD dwType, [in, optional] LPCVOID pvData, [in] DWORD cbData );",
            "name": "SHSetValueW"
        },
        {
            "signature": "BOOL SHSkipJunction( [in, optional] IBindCtx *pbc, [in] const CLSID *pclsid );",
            "name": "SHSkipJunction"
        },
        {
            "signature": "LWSTDAPI SHStrDupA( [in] LPCSTR psz, [out] LPWSTR *ppwsz );",
            "name": "SHStrDupA"
        },
        {
            "signature": "LWSTDAPI SHStrDupW( [in] LPCWSTR psz, [out] LPWSTR *ppwsz );",
            "name": "SHStrDupW"
        },
        {
            "signature": "CHAR SHStripMneumonicA( [in, out] LPSTR pszMenu );",
            "name": "SHStripMneumonicA"
        },
        {
            "signature": "WCHAR SHStripMneumonicW( [in, out] LPWSTR pszMenu );",
            "name": "SHStripMneumonicW"
        },
        {
            "signature": "int SHUnicodeToAnsi( [in] PCWSTR pwszSrc, [out] PSTR pszDst, int cchBuf );",
            "name": "SHUnicodeToAnsi"
        },
        {
            "signature": "int SHUnicodeToUnicode( [in] PCWSTR pwzSrc, [out] PWSTR pwzDst, int cwchBuf );",
            "name": "SHUnicodeToUnicode"
        },
        {
            "signature": "BOOL SHUnlockShared( [in] void *pvData );",
            "name": "SHUnlockShared"
        },
        {
            "signature": "DWORD StopWatchFlush();",
            "name": "StopWatchFlush"
        },
        {
            "signature": "DWORD StopWatchMode();",
            "name": "StopWatchMode"
        },
        {
            "signature": "PSTR StrCatBuffA( [in, out] PSTR pszDest, [in] PCSTR pszSrc, int cchDestBuffSize );",
            "name": "StrCatBuffA"
        },
        {
            "signature": "PWSTR StrCatBuffW( [in, out] PWSTR pszDest, [in] PCWSTR pszSrc, int cchDestBuffSize );",
            "name": "StrCatBuffW"
        },
        {
            "signature": "DWORD StrCatChainW( [out] PWSTR pszDst, DWORD cchDst, DWORD ichAt, [in] PCWSTR pszSrc );",
            "name": "StrCatChainW"
        },
        {
            "signature": "PWSTR StrCatW( [in, out] PWSTR psz1, [in] PCWSTR psz2 );",
            "name": "StrCatW"
        },
        {
            "signature": "PCSTR StrChrA( [in] PCSTR pszStart, WORD wMatch );",
            "name": "StrChrA"
        },
        {
            "signature": "PCSTR StrChrIA( [in] PCSTR pszStart, WORD wMatch );",
            "name": "StrChrIA"
        },
        {
            "signature": "PCWSTR StrChrIW( [in] PCWSTR pszStart, WCHAR wMatch );",
            "name": "StrChrIW"
        },
        {
            "signature": "PCWSTR StrChrNIW( [in] PCWSTR pszStart, WCHAR wMatch, UINT cchMax );",
            "name": "StrChrNIW"
        },
        {
            "signature": "PCWSTR StrChrNW( [in] PCWSTR pszStart, WCHAR wMatch, UINT cchMax );",
            "name": "StrChrNW"
        },
        {
            "signature": "PCWSTR StrChrW( [in] PCWSTR pszStart, WCHAR wMatch );",
            "name": "StrChrW"
        },
        {
            "signature": "int StrCmpCA( [out] LPCSTR pszStr1, [out] LPCSTR pszStr2 );",
            "name": "StrCmpCA"
        },
        {
            "signature": "int StrCmpCW( [out] LPCWSTR pszStr1, [out] LPCWSTR pszStr2 );",
            "name": "StrCmpCW"
        },
        {
            "signature": "int StrCmpICA( [in] LPCSTR pszStr1, [in] LPCSTR pszStr2 );",
            "name": "StrCmpICA"
        },
        {
            "signature": "int StrCmpICW( [in] LPCWSTR pszStr1, [in] LPCWSTR pszStr2 );",
            "name": "StrCmpICW"
        },
        {
            "signature": "int StrCmpIW( [in] PCWSTR psz1, [in] PCWSTR psz2 );",
            "name": "StrCmpIW"
        },
        {
            "signature": "int StrCmpLogicalW( [in] PCWSTR psz1, [in] PCWSTR psz2 );",
            "name": "StrCmpLogicalW"
        },
        {
            "signature": "int StrCmpNA( [in] PCSTR psz1, [in] PCSTR psz2, [in] int nChar );",
            "name": "StrCmpNA"
        },
        {
            "signature": "int StrCmpNCA( [in] LPCSTR pszStr1, [in] LPCSTR pszStr2, int nChar );",
            "name": "StrCmpNCA"
        },
        {
            "signature": "int StrCmpNCW( [in] LPCWSTR pszStr1, [in] LPCWSTR pszStr2, int nChar );",
            "name": "StrCmpNCW"
        },
        {
            "signature": "int StrCmpNIA( [in] PCSTR psz1, [in] PCSTR psz2, [in] int nChar );",
            "name": "StrCmpNIA"
        },
        {
            "signature": "int StrCmpNICA( [in] LPCSTR pszStr1, [in] LPCSTR pszStr2, int nChar );",
            "name": "StrCmpNICA"
        },
        {
            "signature": "int StrCmpNICW( [in] LPCWSTR pszStr1, [in] LPCWSTR pszStr2, int nChar );",
            "name": "StrCmpNICW"
        },
        {
            "signature": "int StrCmpNIW( [in] PCWSTR psz1, [in] PCWSTR psz2, [in] int nChar );",
            "name": "StrCmpNIW"
        },
        {
            "signature": "int StrCmpNW( [in] PCWSTR psz1, [in] PCWSTR psz2, [in] int nChar );",
            "name": "StrCmpNW"
        },
        {
            "signature": "int StrCmpW( [in] PCWSTR psz1, [in] PCWSTR psz2 );",
            "name": "StrCmpW"
        },
        {
            "signature": "PWSTR StrCpyNW( [out] PWSTR pszDst, [in] PCWSTR pszSrc, int cchMax );",
            "name": "StrCpyNW"
        },
        {
            "signature": "PWSTR StrCpyW( [out] PWSTR psz1, [in] PCWSTR psz2 );",
            "name": "StrCpyW"
        },
        {
            "signature": "int StrCSpnA( [in] PCSTR pszStr, [in] PCSTR pszSet );",
            "name": "StrCSpnA"
        },
        {
            "signature": "int StrCSpnIA( [in] PCSTR pszStr, [in] PCSTR pszSet );",
            "name": "StrCSpnIA"
        },
        {
            "signature": "int StrCSpnIW( [in] PCWSTR pszStr, [in] PCWSTR pszSet );",
            "name": "StrCSpnIW"
        },
        {
            "signature": "int StrCSpnW( [in] PCWSTR pszStr, [in] PCWSTR pszSet );",
            "name": "StrCSpnW"
        },
        {
            "signature": "PSTR StrDupA( PCSTR pszSrch );",
            "name": "StrDupA"
        },
        {
            "signature": "PWSTR StrDupW( PCWSTR pszSrch );",
            "name": "StrDupW"
        },
        {
            "signature": "PSTR StrFormatByteSize64A( LONGLONG qdw, [out] PSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatByteSize64A"
        },
        {
            "signature": "PSTR StrFormatByteSizeA( DWORD dw, [out] PSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatByteSizeA"
        },
        {
            "signature": "LWSTDAPI StrFormatByteSizeEx( ULONGLONG ull, SFBS_FLAGS flags, [out] PWSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatByteSizeEx"
        },
        {
            "signature": "PWSTR StrFormatByteSizeW( LONGLONG qdw, [out] PWSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatByteSizeW"
        },
        {
            "signature": "PSTR StrFormatKBSizeA( LONGLONG qdw, [out] PSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatKBSizeA"
        },
        {
            "signature": "PWSTR StrFormatKBSizeW( LONGLONG qdw, [out] PWSTR pszBuf, UINT cchBuf );",
            "name": "StrFormatKBSizeW"
        },
        {
            "signature": "int StrFromTimeIntervalA( [out] PSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits );",
            "name": "StrFromTimeIntervalA"
        },
        {
            "signature": "int StrFromTimeIntervalW( [out] PWSTR pszOut, UINT cchMax, DWORD dwTimeMS, int digits );",
            "name": "StrFromTimeIntervalW"
        },
        {
            "signature": "BOOL StrIsIntlEqualA( BOOL fCaseSens, [in] PCSTR pszString1, [in] PCSTR pszString2, int nChar );",
            "name": "StrIsIntlEqualA"
        },
        {
            "signature": "BOOL StrIsIntlEqualW( BOOL fCaseSens, [in] PCWSTR pszString1, [in] PCWSTR pszString2, int nChar );",
            "name": "StrIsIntlEqualW"
        },
        {
            "signature": "PSTR StrNCatA( [in, out] PSTR psz1, PCSTR psz2, int cchMax );",
            "name": "StrNCatA"
        },
        {
            "signature": "PWSTR StrNCatW( [in, out] PWSTR psz1, PCWSTR psz2, int cchMax );",
            "name": "StrNCatW"
        },
        {
            "signature": "PCSTR StrPBrkA( [in] PCSTR psz, [in] PCSTR pszSet );",
            "name": "StrPBrkA"
        },
        {
            "signature": "PCWSTR StrPBrkW( [in] PCWSTR psz, [in] PCWSTR pszSet );",
            "name": "StrPBrkW"
        },
        {
            "signature": "PCSTR StrRChrA( [in] PCSTR pszStart, [in, optional] PCSTR pszEnd, WORD wMatch );",
            "name": "StrRChrA"
        },
        {
            "signature": "PCSTR StrRChrIA( [in] PCSTR pszStart, [in, optional] PCSTR pszEnd, WORD wMatch );",
            "name": "StrRChrIA"
        },
        {
            "signature": "PCWSTR StrRChrIW( [in] PCWSTR pszStart, [in, optional] PCWSTR pszEnd, WCHAR wMatch );",
            "name": "StrRChrIW"
        },
        {
            "signature": "PCWSTR StrRChrW( [in] PCWSTR pszStart, [in, optional] PCWSTR pszEnd, WCHAR wMatch );",
            "name": "StrRChrW"
        },
        {
            "signature": "LWSTDAPI StrRetToBSTR( [in, out] STRRET *pstr, [in] PCUITEMID_CHILD pidl, [out] BSTR *pbstr );",
            "name": "StrRetToBSTR"
        },
        {
            "signature": "LWSTDAPI StrRetToBufA( [in, out] STRRET *pstr, [in] PCUITEMID_CHILD pidl, [out] LPSTR pszBuf, [in] UINT cchBuf );",
            "name": "StrRetToBufA"
        },
        {
            "signature": "LWSTDAPI StrRetToBufW( [in, out] STRRET *pstr, [in] PCUITEMID_CHILD pidl, [out] LPWSTR pszBuf, [in] UINT cchBuf );",
            "name": "StrRetToBufW"
        },
        {
            "signature": "LWSTDAPI StrRetToStrA( [in, out] STRRET *pstr, [in, optional] PCUITEMID_CHILD pidl, [out] LPSTR *ppsz );",
            "name": "StrRetToStrA"
        },
        {
            "signature": "LWSTDAPI StrRetToStrW( [in, out] STRRET *pstr, [in, optional] PCUITEMID_CHILD pidl, [out] LPWSTR *ppsz );",
            "name": "StrRetToStrW"
        },
        {
            "signature": "PCSTR StrRStrIA( [in] PCSTR pszSource, [in, optional] PCSTR pszLast, [in] PCSTR pszSrch );",
            "name": "StrRStrIA"
        },
        {
            "signature": "PCWSTR StrRStrIW( [in] PCWSTR pszSource, [in, optional] PCWSTR pszLast, [in] PCWSTR pszSrch );",
            "name": "StrRStrIW"
        },
        {
            "signature": "int StrSpnA( [in] PCSTR psz, [in] PCSTR pszSet );",
            "name": "StrSpnA"
        },
        {
            "signature": "int StrSpnW( [in] PCWSTR psz, [in] PCWSTR pszSet );",
            "name": "StrSpnW"
        },
        {
            "signature": "PCSTR StrStrA( [in] PCSTR pszFirst, [in] PCSTR pszSrch );",
            "name": "StrStrA"
        },
        {
            "signature": "PCSTR StrStrIA( [in] PCSTR pszFirst, [in] PCSTR pszSrch );",
            "name": "StrStrIA"
        },
        {
            "signature": "PCWSTR StrStrIW( [in] PCWSTR pszFirst, [in] PCWSTR pszSrch );",
            "name": "StrStrIW"
        },
        {
            "signature": "PCWSTR StrStrNIW( [in] PCWSTR pszFirst, [in] PCWSTR pszSrch, UINT cchMax );",
            "name": "StrStrNIW"
        },
        {
            "signature": "PCWSTR StrStrNW( [in] PCWSTR pszFirst, [in] PCWSTR pszSrch, UINT cchMax );",
            "name": "StrStrNW"
        },
        {
            "signature": "PCWSTR StrStrW( [in] PCWSTR pszFirst, [in] PCWSTR pszSrch );",
            "name": "StrStrW"
        },
        {
            "signature": "BOOL StrToInt64ExA( [in] PCSTR pszString, STIF_FLAGS dwFlags, [out] LONGLONG *pllRet );",
            "name": "StrToInt64ExA"
        },
        {
            "signature": "BOOL StrToInt64ExW( [in] PCWSTR pszString, STIF_FLAGS dwFlags, [out] LONGLONG *pllRet );",
            "name": "StrToInt64ExW"
        },
        {
            "signature": "int StrToIntA( [in] PCSTR pszSrc );",
            "name": "StrToIntA"
        },
        {
            "signature": "BOOL StrToIntExA( [in] PCSTR pszString, STIF_FLAGS dwFlags, [out] int *piRet );",
            "name": "StrToIntExA"
        },
        {
            "signature": "BOOL StrToIntExW( [in] PCWSTR pszString, STIF_FLAGS dwFlags, [out] int *piRet );",
            "name": "StrToIntExW"
        },
        {
            "signature": "int StrToIntW( [in] PCWSTR pszSrc );",
            "name": "StrToIntW"
        },
        {
            "signature": "BOOL StrTrimA( [in, out] PSTR psz, [in] PCSTR pszTrimChars );",
            "name": "StrTrimA"
        },
        {
            "signature": "BOOL StrTrimW( [in, out] PWSTR psz, [in] PCWSTR pszTrimChars );",
            "name": "StrTrimW"
        },
        {
            "signature": "LWSTDAPI UrlApplySchemeA( [in] PCSTR pszIn, [out] PSTR pszOut, [in, out] DWORD *pcchOut, DWORD dwFlags );",
            "name": "UrlApplySchemeA"
        },
        {
            "signature": "LWSTDAPI UrlApplySchemeW( [in] PCWSTR pszIn, [out] PWSTR pszOut, [in, out] DWORD *pcchOut, DWORD dwFlags );",
            "name": "UrlApplySchemeW"
        },
        {
            "signature": "LWSTDAPI UrlCanonicalizeA( [in] PCSTR pszUrl, [out] PSTR pszCanonicalized, [in, out] DWORD *pcchCanonicalized, DWORD dwFlags );",
            "name": "UrlCanonicalizeA"
        },
        {
            "signature": "LWSTDAPI UrlCanonicalizeW( [in] PCWSTR pszUrl, [out] PWSTR pszCanonicalized, [in, out] DWORD *pcchCanonicalized, DWORD dwFlags );",
            "name": "UrlCanonicalizeW"
        },
        {
            "signature": "LWSTDAPI UrlCombineA( [in] PCSTR pszBase, [in] PCSTR pszRelative, [out, optional] PSTR pszCombined, [in, out] DWORD *pcchCombined, DWORD dwFlags );",
            "name": "UrlCombineA"
        },
        {
            "signature": "LWSTDAPI UrlCombineW( [in] PCWSTR pszBase, [in] PCWSTR pszRelative, [out, optional] PWSTR pszCombined, [in, out] DWORD *pcchCombined, DWORD dwFlags );",
            "name": "UrlCombineW"
        },
        {
            "signature": "int UrlCompareA( [in] PCSTR psz1, [in] PCSTR psz2, BOOL fIgnoreSlash );",
            "name": "UrlCompareA"
        },
        {
            "signature": "int UrlCompareW( [in] PCWSTR psz1, [in] PCWSTR psz2, BOOL fIgnoreSlash );",
            "name": "UrlCompareW"
        },
        {
            "signature": "LWSTDAPI UrlCreateFromPathA( [in] PCSTR pszPath, [out] PSTR pszUrl, [in, out] DWORD *pcchUrl, DWORD dwFlags );",
            "name": "UrlCreateFromPathA"
        },
        {
            "signature": "LWSTDAPI UrlCreateFromPathW( [in] PCWSTR pszPath, [out] PWSTR pszUrl, [in, out] DWORD *pcchUrl, DWORD dwFlags );",
            "name": "UrlCreateFromPathW"
        },
        {
            "signature": "LWSTDAPI UrlEscapeA( [in] PCSTR pszUrl, [out] PSTR pszEscaped, [in, out] DWORD *pcchEscaped, DWORD dwFlags );",
            "name": "UrlEscapeA"
        },
        {
            "signature": "LWSTDAPI UrlEscapeW( [in] PCWSTR pszUrl, [out] PWSTR pszEscaped, [in, out] DWORD *pcchEscaped, DWORD dwFlags );",
            "name": "UrlEscapeW"
        },
        {
            "signature": "LWSTDAPI UrlFixupW( [in] PCWSTR pcszUrl, [out] PWSTR pszTranslatedUrl, DWORD cchMax );",
            "name": "UrlFixupW"
        },
        {
            "signature": "LPCSTR UrlGetLocationA( [in] PCSTR pszURL );",
            "name": "UrlGetLocationA"
        },
        {
            "signature": "LPCWSTR UrlGetLocationW( [in] PCWSTR pszURL );",
            "name": "UrlGetLocationW"
        },
        {
            "signature": "LWSTDAPI UrlGetPartA( [in] PCSTR pszIn, [out] PSTR pszOut, [in, out] DWORD *pcchOut, DWORD dwPart, DWORD dwFlags );",
            "name": "UrlGetPartA"
        },
        {
            "signature": "LWSTDAPI UrlGetPartW( [in] PCWSTR pszIn, [out] PWSTR pszOut, [in, out] DWORD *pcchOut, DWORD dwPart, DWORD dwFlags );",
            "name": "UrlGetPartW"
        },
        {
            "signature": "LWSTDAPI UrlHashA( [in] PCSTR pszUrl, [out] BYTE *pbHash, DWORD cbHash );",
            "name": "UrlHashA"
        },
        {
            "signature": "LWSTDAPI UrlHashW( [in] PCWSTR pszUrl, [out] BYTE *pbHash, DWORD cbHash );",
            "name": "UrlHashW"
        },
        {
            "signature": "BOOL UrlIsA( [in] PCSTR pszUrl, URLIS UrlIs );",
            "name": "UrlIsA"
        },
        {
            "signature": "BOOL UrlIsNoHistoryA( [in] PCSTR pszURL );",
            "name": "UrlIsNoHistoryA"
        },
        {
            "signature": "BOOL UrlIsNoHistoryW( [in] PCWSTR pszURL );",
            "name": "UrlIsNoHistoryW"
        },
        {
            "signature": "BOOL UrlIsOpaqueA( [in] PCSTR pszURL );",
            "name": "UrlIsOpaqueA"
        },
        {
            "signature": "BOOL UrlIsOpaqueW( [in] PCWSTR pszURL );",
            "name": "UrlIsOpaqueW"
        },
        {
            "signature": "BOOL UrlIsW( [in] PCWSTR pszUrl, URLIS UrlIs );",
            "name": "UrlIsW"
        },
        {
            "signature": "LWSTDAPI UrlUnescapeA( [in, out] PSTR pszUrl, [out, optional] PSTR pszUnescaped, [in, out, optional] DWORD *pcchUnescaped, DWORD dwFlags );",
            "name": "UrlUnescapeA"
        },
        {
            "signature": "LWSTDAPI UrlUnescapeW( [in, out] PWSTR pszUrl, [out, optional] PWSTR pszUnescaped, [in, out, optional] DWORD *pcchUnescaped, DWORD dwFlags );",
            "name": "UrlUnescapeW"
        },
        {
            "signature": "UINT WhichPlatform();",
            "name": "WhichPlatform"
        },
        {
            "signature": "int wnsprintfA( [out] PSTR pszDest, [in] int cchDest, [in] PCSTR pszFmt, ... );",
            "name": "wnsprintfA"
        },
        {
            "signature": "int wnsprintfW( [out] PWSTR pszDest, [in] int cchDest, [in] PCWSTR pszFmt, ... );",
            "name": "wnsprintfW"
        },
        {
            "signature": "int wvnsprintfA( [out] PSTR pszDest, [in] int cchDest, [in] PCSTR pszFmt, [in] va_list arglist );",
            "name": "wvnsprintfA"
        },
        {
            "signature": "int wvnsprintfW( [out] PWSTR pszDest, [in] int cchDest, [in] PCWSTR pszFmt, [in] va_list arglist );",
            "name": "wvnsprintfW"
        }
    ],
    "Shobjidl.h": [
        {
            "signature": "SHSTDAPI SHAddDefaultPropertiesByExt( [in] PCWSTR pszExt, [in] IPropertyStore *pPropStore );",
            "name": "SHAddDefaultPropertiesByExt"
        },
        {
            "signature": "SHSTDAPI SHCreateDefaultPropertiesOp( [in] IShellItem *psi, [out] IFileOperation **ppFileOp );",
            "name": "SHCreateDefaultPropertiesOp"
        },
        {
            "signature": "HRESULT SHResolveFolderPathInLibrary( [in] IShellLibrary *plib, [in] PCWSTR pszFolderPath, [in] DWORD dwTimeout, [out] PWSTR *ppszResolvedPath );",
            "name": "SHResolveFolderPathInLibrary"
        },
        {
            "signature": "SHSTDAPI SHSetDefaultProperties( [in, optional] HWND hwnd, [in] IShellItem *psi, DWORD dwFileOpFlags, [in, optional] IFileOperationProgressSink *pfops );",
            "name": "SHSetDefaultProperties"
        }
    ],
    "Shobjidl_core.h": [
        {
            "signature": "void FreeIDListArray( [in] PIDLIST_RELATIVE *ppidls, UINT cItems );",
            "name": "FreeIDListArray"
        },
        {
            "signature": "void FreeIDListArrayChild( [in] PITEMID_CHILD *ppidls, UINT cItems );",
            "name": "FreeIDListArrayChild"
        },
        {
            "signature": "void FreeIDListArrayFull( [in] PIDLIST_ABSOLUTE *ppidls, UINT cItems );",
            "name": "FreeIDListArrayFull"
        },
        {
            "signature": "void FreeKnownFolderDefinitionFields( [in] KNOWNFOLDER_DEFINITION *pKFD );",
            "name": "FreeKnownFolderDefinitionFields"
        },
        {
            "signature": "SHSTDAPI GetCurrentProcessExplicitAppUserModelID( [out] PWSTR *AppID );",
            "name": "GetCurrentProcessExplicitAppUserModelID"
        },
        {
            "signature": "void SetContractDelegateWindow( [in] HWND hwndSource, [in, optional] HWND hwndDelegate );",
            "name": "SetContractDelegateWindow"
        },
        {
            "signature": "SHSTDAPI SetCurrentProcessExplicitAppUserModelID( [in] PCWSTR AppID );",
            "name": "SetCurrentProcessExplicitAppUserModelID"
        },
        {
            "signature": "HRESULT SHAddFolderPathToLibrary( [in] IShellLibrary *plib, [in] PCWSTR pszFolderPath );",
            "name": "SHAddFolderPathToLibrary"
        },
        {
            "signature": "SHSTDAPI SHAssocEnumHandlers( [in] PCWSTR pszExtra, [in] ASSOC_FILTER afFilter, [out] IEnumAssocHandlers **ppEnumHandler );",
            "name": "SHAssocEnumHandlers"
        },
        {
            "signature": "SHSTDAPI SHAssocEnumHandlersForProtocolByApplication( [in] PCWSTR protocol, [in] REFIID riid, [out] void **enumHandlers );",
            "name": "SHAssocEnumHandlersForProtocolByApplication"
        },
        {
            "signature": "SHSTDAPI SHCreateAssociationRegistration( [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateAssociationRegistration"
        },
        {
            "signature": "HRESULT SHCreateDefaultExtractIcon( REFIID riid, [out] void **ppv );",
            "name": "SHCreateDefaultExtractIcon"
        },
        {
            "signature": "SHSTDAPI SHCreateItemFromIDList( [in] PCIDLIST_ABSOLUTE pidl, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateItemFromIDList"
        },
        {
            "signature": "SHSTDAPI SHCreateItemFromParsingName( [in] PCWSTR pszPath, [in, optional] IBindCtx *pbc, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateItemFromParsingName"
        },
        {
            "signature": "SHSTDAPI SHCreateItemFromRelativeName( [in] IShellItem *psiParent, [in] PCWSTR pszName, [in] IBindCtx *pbc, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateItemFromRelativeName"
        },
        {
            "signature": "SHSTDAPI SHCreateItemInKnownFolder( [in] REFKNOWNFOLDERID kfid, DWORD dwKFFlags, [in, optional] PCWSTR pszItem, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateItemInKnownFolder"
        },
        {
            "signature": "SHSTDAPI SHCreateItemWithParent( [in] PCIDLIST_ABSOLUTE pidlParent, [in] IShellFolder *psfParent, [in] PCUITEMID_CHILD pidl, [in] REFIID riid, [out] void **ppvItem );",
            "name": "SHCreateItemWithParent"
        },
        {
            "signature": "HRESULT SHCreateLibrary( [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateLibrary"
        },
        {
            "signature": "SHSTDAPI SHCreateShellItemArray( [in] PCIDLIST_ABSOLUTE pidlParent, [in] IShellFolder *psf, [in] UINT cidl, [in] PCUITEMID_CHILD_ARRAY ppidl, [out] IShellItemArray **ppsiItemArray );",
            "name": "SHCreateShellItemArray"
        },
        {
            "signature": "SHSTDAPI SHCreateShellItemArrayFromDataObject( [in] IDataObject *pdo, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateShellItemArrayFromDataObject"
        },
        {
            "signature": "SHSTDAPI SHCreateShellItemArrayFromIDLists( [in] UINT cidl, [in] PCIDLIST_ABSOLUTE_ARRAY rgpidl, [out] IShellItemArray **ppsiItemArray );",
            "name": "SHCreateShellItemArrayFromIDLists"
        },
        {
            "signature": "SHSTDAPI SHCreateShellItemArrayFromShellItem( [in] IShellItem *psi, [in] REFIID riid, [out] void **ppv );",
            "name": "SHCreateShellItemArrayFromShellItem"
        },
        {
            "signature": "SHSTDAPI SHGetIDListFromObject( [in] IUnknown *punk, [out] PIDLIST_ABSOLUTE *ppidl );",
            "name": "SHGetIDListFromObject"
        },
        {
            "signature": "HRESULT SHGetItemFromDataObject( [in] IDataObject *pdtobj, [in] DATAOBJ_GET_ITEM_FLAGS dwFlags, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetItemFromDataObject"
        },
        {
            "signature": "SHSTDAPI SHGetItemFromObject( [in] IUnknown *punk, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetItemFromObject"
        },
        {
            "signature": "SHSTDAPI SHGetNameFromIDList( [in] PCIDLIST_ABSOLUTE pidl, [in] SIGDN sigdnName, [out] PWSTR *ppszName );",
            "name": "SHGetNameFromIDList"
        },
        {
            "signature": "SHSTDAPI SHGetPropertyStoreFromIDList( [in] PCIDLIST_ABSOLUTE pidl, [in] GETPROPERTYSTOREFLAGS flags, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetPropertyStoreFromIDList"
        },
        {
            "signature": "SHSTDAPI SHGetPropertyStoreFromParsingName( [in] PCWSTR pszPath, [in, optional] IBindCtx *pbc, [in] GETPROPERTYSTOREFLAGS flags, [in] REFIID riid, [out] void **ppv );",
            "name": "SHGetPropertyStoreFromParsingName"
        },
        {
            "signature": "SHSTDAPI SHGetTemporaryPropertyForItem( [in] IShellItem *psi, REFPROPERTYKEY propkey, [out] PROPVARIANT *ppropvar );",
            "name": "SHGetTemporaryPropertyForItem"
        },
        {
            "signature": "HRESULT SHLoadLibraryFromItem( [in] IShellItem *psiLibrary, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "SHLoadLibraryFromItem"
        },
        {
            "signature": "HRESULT SHLoadLibraryFromKnownFolder( [in] REFKNOWNFOLDERID kfidLibrary, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "SHLoadLibraryFromKnownFolder"
        },
        {
            "signature": "HRESULT SHLoadLibraryFromParsingName( [in] PCWSTR pszParsingName, [in] DWORD grfMode, [in] REFIID riid, [out] void **ppv );",
            "name": "SHLoadLibraryFromParsingName"
        },
        {
            "signature": "HRESULT SHRemoveFolderPathFromLibrary( [in] IShellLibrary *plib, [in] PCWSTR pszFolderPath );",
            "name": "SHRemoveFolderPathFromLibrary"
        },
        {
            "signature": "HRESULT SHResolveLibrary( [in] IShellItem *psiLibrary );",
            "name": "SHResolveLibrary"
        },
        {
            "signature": "HRESULT SHSaveLibraryInFolderPath( [in] IShellLibrary *plib, [in] PCWSTR pszFolderPath, [in] PCWSTR pszLibraryName, [in] LIBRARYSAVEFLAGS lsf, [out, optional] PWSTR *ppszSavedToPath );",
            "name": "SHSaveLibraryInFolderPath"
        },
        {
            "signature": "SHSTDAPI SHSetTemporaryPropertyForItem( [in] IShellItem *psi, [in] REFPROPERTYKEY propkey, [in] REFPROPVARIANT propvar );",
            "name": "SHSetTemporaryPropertyForItem"
        },
        {
            "signature": "HRESULT SHShowManageLibraryUI( [in] IShellItem *psiLibrary, [in, optional] HWND hwndOwner, [in, optional] LPCWSTR pszTitle, [in, optional] LPCWSTR pszInstruction, [in] LIBRARYMANAGEDIALOGOPTIONS lmdOptions );",
            "name": "SHShowManageLibraryUI"
        },
        {
            "signature": "PIDLIST_ABSOLUTE SHSimpleIDListFromPath( [in] PCWSTR pszPath );",
            "name": "SHSimpleIDListFromPath"
        }
    ],
    "Shtypes.h": [],
    "Slpublic.h": [
        {
            "signature": "HRESULT SLAcquireGenuineTicket( [out] VOID **ppTicketBlob, [out] UINT *pcbTicketBlob, [in] PCWSTR pwszTemplateId, [in] PCWSTR pwszServerUrl, [in, optional] PCWSTR pwszClientToken );",
            "name": "SLAcquireGenuineTicket"
        },
        {
            "signature": "HRESULT SLActivateProduct( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [in, optional] UINT cbAppSpecificData, [in, optional] const PVOID pvAppSpecificData, [in, optional] const SL_ACTIVATION_INFO_HEADER *pActivationInfo, [in, optional] PCWSTR pwszProxyServer, [in, optional] WORD wProxyPort );",
            "name": "SLActivateProduct"
        },
        {
            "signature": "HRESULT SLClose( [in] HSLC hSLC );",
            "name": "SLClose"
        },
        {
            "signature": "HRESULT SLConsumeRight( [in] HSLC hSLC, [in] const SLID *pAppId, [in, optional] const SLID *pProductSkuId, [in, optional] PCWSTR pwszRightName, PVOID pvReserved );",
            "name": "SLConsumeRight"
        },
        {
            "signature": "HRESULT SLDepositMigrationBlob( [in] HANDLE hFile );",
            "name": "SLDepositMigrationBlob"
        },
        {
            "signature": "HRESULT SLDepositOfflineConfirmationId( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [in] PCWSTR pwszInstallationId, [in] PCWSTR pwszConfirmationId );",
            "name": "SLDepositOfflineConfirmationId"
        },
        {
            "signature": "HRESULT SLDepositOfflineConfirmationIdEx( [in] HSLC hSLC, [in, optional] const SLID *pProductSkuId, [in, optional] const SL_ACTIVATION_INFO_HEADER *pActivationInfo, [in] PCWSTR pwszInstallationId, [in] PCWSTR pwszConfirmationId );",
            "name": "SLDepositOfflineConfirmationIdEx"
        },
        {
            "signature": "HRESULT SLFireEvent( [in] HSLC hSLC, [in] PCWSTR pwszEventId, [in] const SLID *pApplicationId );",
            "name": "SLFireEvent"
        },
        {
            "signature": "HRESULT SLGatherMigrationBlob( [in] BOOL bMigratableOnly, [in, optional] LPCWSTR pwszEncryptorUri, [in] HANDLE hFile );",
            "name": "SLGatherMigrationBlob"
        },
        {
            "signature": "HRESULT SLGenerateOfflineInstallationId( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [out] PWSTR *ppwszInstallationId );",
            "name": "SLGenerateOfflineInstallationId"
        },
        {
            "signature": "HRESULT SLGenerateOfflineInstallationIdEx( [in] HSLC hSLC, [in, optional] const SLID *pProductSkuId, [in, optional] const SL_ACTIVATION_INFO_HEADER *pActivationInfo, [out] PWSTR *ppwszInstallationId );",
            "name": "SLGenerateOfflineInstallationIdEx"
        },
        {
            "signature": "HRESULT SLGetApplicationInformation( [in] HSLC hSLC, [in] const SLID *pApplicationId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetApplicationInformation"
        },
        {
            "signature": "HRESULT SLGetApplicationPolicy( [in] HSLP hPolicyContext, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetApplicationPolicy"
        },
        {
            "signature": "HRESULT SLGetAuthenticationResult( [in] HSLC hSLC, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetAuthenticationResult"
        },
        {
            "signature": "HRESULT SLGetGenuineInformation( [in] const SLID *pQueryId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] BYTE **ppbValue );",
            "name": "SLGetGenuineInformation"
        },
        {
            "signature": "HRESULT SLGetGenuineInformationEx( [in] const SLID *pAppId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] BYTE **ppbValue );",
            "name": "SLGetGenuineInformationEx"
        },
        {
            "signature": "HRESULT SLGetInstalledProductKeyIds( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [out] UINT *pnProductKeyIds, [out] SLID **ppProductKeyIds );",
            "name": "SLGetInstalledProductKeyIds"
        },
        {
            "signature": "HRESULT SLGetLicense( [in] HSLC hSLC, [in] const SLID *pLicenseFileId, [out] UINT *pcbLicenseFile, [out] PBYTE *ppbLicenseFile );",
            "name": "SLGetLicense"
        },
        {
            "signature": "HRESULT SLGetLicenseFileId( [in] HSLC hSLC, [in] UINT cbLicenseBlob, [in] const BYTE *pbLicenseBlob, [out] SLID *pLicenseFileId );",
            "name": "SLGetLicenseFileId"
        },
        {
            "signature": "HRESULT SLGetLicenseInformation( [in] HSLC hSLC, [in] const SLID *pSLLicenseId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetLicenseInformation"
        },
        {
            "signature": "HRESULT SLGetLicensingStatusInformation( [in] HSLC hSLC, [in, optional] const SLID *pAppID, [in, optional] const SLID *pProductSkuId, [in, optional] PCWSTR pwszRightName, [out] UINT *pnStatusCount, [out] SL_LICENSING_STATUS **ppLicensingStatus );",
            "name": "SLGetLicensingStatusInformation"
        },
        {
            "signature": "HRESULT SLGetPKeyId( [in] HSLC hSLC, [in] PCWSTR pwszPKeyAlgorithm, [in] PCWSTR pwszPKeyString, [in] UINT cbPKeySpecificData, [in] const BYTE *pbPKeySpecificData, [out] SLID *pPKeyId );",
            "name": "SLGetPKeyId"
        },
        {
            "signature": "HRESULT SLGetPKeyInformation( [in] HSLC hSLC, [in] const SLID *pPKeyId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetPKeyInformation"
        },
        {
            "signature": "HRESULT SLGetPolicyInformation( [in] HSLC hSLC, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetPolicyInformation"
        },
        {
            "signature": "HRESULT SLGetPolicyInformationDWORD( [in] HSLC hSLC, [in] PCWSTR pwszValueName, [out] DWORD *pdwValue );",
            "name": "SLGetPolicyInformationDWORD"
        },
        {
            "signature": "HRESULT SLGetProductSkuInformation( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetProductSkuInformation"
        },
        {
            "signature": "HRESULT SLGetReferralInformation( [in] HSLC hSLC, [in] SLREFERRALTYPE eReferralType, [in] const SLID *pSkuOrAppId, [in] PCWSTR pwszValueName, [out] PWSTR *ppwszValue );",
            "name": "SLGetReferralInformation"
        },
        {
            "signature": "HRESULT SLGetServerStatus( [in] PCWSTR pwszServerURL, [in] PCWSTR pwszAcquisitionType, [in, optional] PCWSTR pwszProxyServer, [in, optional] WORD wProxyPort, [out] HRESULT *phrStatus );",
            "name": "SLGetServerStatus"
        },
        {
            "signature": "HRESULT SLGetServiceInformation( [in] HSLC hSLC, [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetServiceInformation"
        },
        {
            "signature": "HRESULT SLGetSLIDList( [in] HSLC hSLC, [in] SLIDTYPE eQueryIdType, [in, optional] const SLID *pQueryId, [in] SLIDTYPE eReturnIdType, [out] UINT *pnReturnIds, [out] SLID **ppReturnIds );",
            "name": "SLGetSLIDList"
        },
        {
            "signature": "HRESULT SLGetWindowsInformation( [in] PCWSTR pwszValueName, [out, optional] SLDATATYPE *peDataType, [out] UINT *pcbValue, [out] PBYTE *ppbValue );",
            "name": "SLGetWindowsInformation"
        },
        {
            "signature": "HRESULT SLGetWindowsInformationDWORD( [in] PCWSTR pwszValueName, [out] DWORD *pdwValue );",
            "name": "SLGetWindowsInformationDWORD"
        },
        {
            "signature": "HRESULT SLInstallLicense( [in] HSLC hSLC, [in] UINT cbLicenseBlob, [in] const BYTE *pbLicenseBlob, [out] SLID *pLicenseFileId );",
            "name": "SLInstallLicense"
        },
        {
            "signature": "HRESULT SLInstallProofOfPurchase( [in] HSLC hSLC, [in] PCWSTR pwszPKeyAlgorithm, [in] PCWSTR pwszPKeyString, [in] UINT cbPKeySpecificData, [in, optional] PBYTE pbPKeySpecificData, [out] SLID *pPkeyId );",
            "name": "SLInstallProofOfPurchase"
        },
        {
            "signature": "HRESULT SLInstallProofOfPurchaseEx( [in] HSLC hSLC, [in] const SLID *pApplicationId, [in, optional] const SLID *pProductSkuId, [in] PCWSTR pwszPKeyAlgorithm, [in] PCWSTR pwszPKeyString, [in] UINT cbPKeySpecificData, [in, optional] PBYTE pbPKeySpecificData, [out] SLID *pPkeyId );",
            "name": "SLInstallProofOfPurchaseEx"
        },
        {
            "signature": "HRESULT SLIsGenuineLocal( [in] const SLID *pAppId, [out] SL_GENUINE_STATE *pGenuineState, [in, out, optional] SL_NONGENUINE_UI_OPTIONS *pUIOptions );",
            "name": "SLIsGenuineLocal"
        },
        {
            "signature": "HRESULT SLIsGenuineLocalEx( [in] const SLID *pAppId, [in, optional] const SLID *pSkuId, [out] SL_GENUINE_STATE *pGenuineState );",
            "name": "SLIsGenuineLocalEx"
        },
        {
            "signature": "HRESULT SLLoadApplicationPolicies( [in] const SLID *pApplicationId, [in, optional] const SLID *pProductSkuId, [in] DWORD dwFlags, [out] HSLP *phPolicyContext );",
            "name": "SLLoadApplicationPolicies"
        },
        {
            "signature": "HRESULT SLOpen( [out] HSLC *phSLC );",
            "name": "SLOpen"
        },
        {
            "signature": "HRESULT SLPersistApplicationPolicies( [in] const SLID *pApplicationId, [in, optional] const SLID *pProductSkuId, [in] DWORD dwFlags );",
            "name": "SLPersistApplicationPolicies"
        },
        {
            "signature": "HRESULT SLPersistRTSPayloadOverride( [in] HSLC hSLC, [in] const SLID *pApplicationId, [in, optional] const SLID *pProductSkuId, [in] BYTE *pbData, [in] DWORD cbData );",
            "name": "SLPersistRTSPayloadOverride"
        },
        {
            "signature": "HRESULT SLQueryLicenseValueFromApp( [in] PCWSTR valueName, [out, optional] ULONG *valueType, [out, optional] PVOID dataBuffer, [in] ULONG dataSize, [out] ULONG *resultDataSize );",
            "name": "SLQueryLicenseValueFromApp"
        },
        {
            "signature": "HRESULT SLReArm( [in] HSLC hSLC, [in] const SLID *pApplicationId, [in, optional] const SLID *pProductSkuId, [in] DWORD dwFlags );",
            "name": "SLReArm"
        },
        {
            "signature": "HRESULT SLRegisterEvent( [in, optional] HSLC hSLC, [in] PCWSTR pwszEventId, [in] const SLID *pApplicationId, [in] HANDLE hEvent );",
            "name": "SLRegisterEvent"
        },
        {
            "signature": "HRESULT SLSetAuthenticationData( [in] HSLC hSLC, [in, optional] UINT cbValue, [in, optional] const BYTE *pbValue );",
            "name": "SLSetAuthenticationData"
        },
        {
            "signature": "HRESULT SLSetCurrentProductKey( [in] HSLC hSLC, [in] const SLID *pProductSkuId, [in] const SLID *pProductKeyId );",
            "name": "SLSetCurrentProductKey"
        },
        {
            "signature": "HRESULT SLSetGenuineInformation( [in] const SLID *pQueryId, [in] PCWSTR pwszValueName, [in] SLDATATYPE eDataType, [in, optional] UINT cbValue, [in, optional] const BYTE *pbValue );",
            "name": "SLSetGenuineInformation"
        },
        {
            "signature": "HRESULT SLUninstallLicense( [in] HSLC hSLC, [in] const SLID *pLicenseFileId );",
            "name": "SLUninstallLicense"
        },
        {
            "signature": "HRESULT SLUninstallProofOfPurchase( [in] HSLC hSLC, [in] const SLID *pPKeyId );",
            "name": "SLUninstallProofOfPurchase"
        },
        {
            "signature": "HRESULT SLUnloadApplicationPolicies( [in] HSLP hPolicyContext, [in] DWORD dwFlags );",
            "name": "SLUnloadApplicationPolicies"
        },
        {
            "signature": "HRESULT SLUnregisterEvent( [in, optional] HSLC hSLC, [in] PCWSTR pwszEventId, [in] const SLID *pApplicationId, [in] HANDLE hEvent );",
            "name": "SLUnregisterEvent"
        }
    ],
    "Smbclnt.h": [
        {
            "signature": "DWORD RegisterAppInstance( [in] HANDLE ProcessHandle, [in] GUID *AppInstanceId, [in] BOOL ChildrenInheritAppInstance );",
            "name": "RegisterAppInstance"
        },
        {
            "signature": "DWORD SetAppInstanceCsvFlags( [in] HANDLE ProcessHandle, [in] ULONG Mask, [in] ULONG Flags );",
            "name": "SetAppInstanceCsvFlags"
        }
    ],
    "Snmp.h": [
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpExtensionClose();",
            "name": "SnmpExtensionClose"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionInit( [in] DWORD dwUptimeReference, [out] HANDLE *phSubagentTrapEvent, [out] AsnObjectIdentifier *pFirstSupportedRegion );",
            "name": "SnmpExtensionInit"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionInitEx( [out] AsnObjectIdentifier *pNextSupportedRegion );",
            "name": "SnmpExtensionInitEx"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionMonitor( [in] LPVOID pAgentMgmtData );",
            "name": "SnmpExtensionMonitor"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionQuery( [in] BYTE bPduType, [in, out] SnmpVarBindList *pVarBindList, [out] AsnInteger32 *pErrorStatus, [out] AsnInteger32 *pErrorIndex );",
            "name": "SnmpExtensionQuery"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionQueryEx( [in] UINT nRequestType, [in] UINT nTransactionId, [in, out] SnmpVarBindList *pVarBindList, [in, out] AsnOctetString *pContextInfo, [out] AsnInteger32 *pErrorStatus, [out] AsnInteger32 *pErrorIndex );",
            "name": "SnmpExtensionQueryEx"
        },
        {
            "signature": "BOOL SNMP_FUNC_TYPE SnmpExtensionTrap( [out] AsnObjectIdentifier *pEnterpriseOid, [out] AsnInteger32 *pGenericTrapId, [out] AsnInteger32 *pSpecificTrapId, [out] AsnTimeticks *pTimeStamp, [out] SnmpVarBindList *pVarBindList );",
            "name": "SnmpExtensionTrap"
        },
        {
            "signature": "DWORD SNMP_FUNC_TYPE SnmpSvcGetUptime();",
            "name": "SnmpSvcGetUptime"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpSvcSetLogLevel( [in] INT nLogLevel );",
            "name": "SnmpSvcSetLogLevel"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpSvcSetLogType( [in] INT nLogType );",
            "name": "SnmpSvcSetLogType"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilAsnAnyCpy( [out] AsnAny *pAnyDst, [in] AsnAny *pAnySrc );",
            "name": "SnmpUtilAsnAnyCpy"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilAsnAnyFree( [in] AsnAny *pAny );",
            "name": "SnmpUtilAsnAnyFree"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilDbgPrint( [in] INT nLogLevel, [in] LPSTR szFormat, ... );",
            "name": "SnmpUtilDbgPrint"
        },
        {
            "signature": "LPSTR SNMP_FUNC_TYPE SnmpUtilIdsToA( [in] UINT *Ids, [in] UINT IdLength );",
            "name": "SnmpUtilIdsToA"
        },
        {
            "signature": "LPVOID SNMP_FUNC_TYPE SnmpUtilMemAlloc( [in] UINT nBytes );",
            "name": "SnmpUtilMemAlloc"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilMemFree( [in, out] LPVOID pMem );",
            "name": "SnmpUtilMemFree"
        },
        {
            "signature": "LPVOID SNMP_FUNC_TYPE SnmpUtilMemReAlloc( [in] LPVOID pMem, [in] UINT nBytes );",
            "name": "SnmpUtilMemReAlloc"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOctetsCmp( [in] AsnOctetString *pOctets1, [in] AsnOctetString *pOctets2 );",
            "name": "SnmpUtilOctetsCmp"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOctetsCpy( [out] AsnOctetString *pOctetsDst, [in] AsnOctetString *pOctetsSrc );",
            "name": "SnmpUtilOctetsCpy"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilOctetsFree( [in] AsnOctetString *pOctets );",
            "name": "SnmpUtilOctetsFree"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOctetsNCmp( [in] AsnOctetString *pOctets1, [in] AsnOctetString *pOctets2, [in] UINT nChars );",
            "name": "SnmpUtilOctetsNCmp"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOidAppend( [in, out] AsnObjectIdentifier *pOidDst, [in] AsnObjectIdentifier *pOidSrc );",
            "name": "SnmpUtilOidAppend"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOidCmp( [in] AsnObjectIdentifier *pOid1, [in] AsnObjectIdentifier *pOid2 );",
            "name": "SnmpUtilOidCmp"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOidCpy( [out] AsnObjectIdentifier *pOidDst, [in] AsnObjectIdentifier *pOidSrc );",
            "name": "SnmpUtilOidCpy"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilOidFree( [in, out] AsnObjectIdentifier *pOid );",
            "name": "SnmpUtilOidFree"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilOidNCmp( [in] AsnObjectIdentifier *pOid1, [in] AsnObjectIdentifier *pOid2, [in] UINT nSubIds );",
            "name": "SnmpUtilOidNCmp"
        },
        {
            "signature": "LPSTR SNMP_FUNC_TYPE SnmpUtilOidToA( [in] AsnObjectIdentifier *Oid );",
            "name": "SnmpUtilOidToA"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilPrintAsnAny( [in] AsnAny *pAny );",
            "name": "SnmpUtilPrintAsnAny"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilPrintOid( [in] AsnObjectIdentifier *Oid );",
            "name": "SnmpUtilPrintOid"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilVarBindCpy( [out] SnmpVarBind *pVbDst, [in] SnmpVarBind *pVbSrc );",
            "name": "SnmpUtilVarBindCpy"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilVarBindFree( [in, out] SnmpVarBind *pVb );",
            "name": "SnmpUtilVarBindFree"
        },
        {
            "signature": "SNMPAPI SNMP_FUNC_TYPE SnmpUtilVarBindListCpy( [out] SnmpVarBindList *pVblDst, [in] SnmpVarBindList *pVblSrc );",
            "name": "SnmpUtilVarBindListCpy"
        },
        {
            "signature": "VOID SNMP_FUNC_TYPE SnmpUtilVarBindListFree( [in, out] SnmpVarBindList *pVbl );",
            "name": "SnmpUtilVarBindListFree"
        }
    ],
    "Socketapi.h": [
        {
            "signature": "HRESULT SetSocketMediaStreamingMode( BOOL value );",
            "name": "SetSocketMediaStreamingMode"
        }
    ],
    "Spatialaudioclient.h": [],
    "Spatialaudiohrtf.h": [],
    "Spatialaudiometadata.h": [],
    "Spatialinteractionmanagerinterop.h": [],
    "Spellcheck.h": [],
    "Spellcheckprovider.h": [],
    "Sporder.h": [
        {
            "signature": "int WSCWriteNameSpaceOrder( [in] LPGUID lpProviderId, [in] DWORD dwNumberOfEntries );",
            "name": "WSCWriteNameSpaceOrder"
        },
        {
            "signature": "int WSCWriteNameSpaceOrder32( [in] LPGUID lpProviderId, [in] DWORD dwNumberOfEntries );",
            "name": "WSCWriteNameSpaceOrder32"
        },
        {
            "signature": "int WSCWriteProviderOrder( [in] LPDWORD lpwdCatalogEntryId, [in] DWORD dwNumberOfEntries );",
            "name": "WSCWriteProviderOrder"
        },
        {
            "signature": "int WSCWriteProviderOrder32( [in] LPDWORD lpwdCatalogEntryId, [in] DWORD dwNumberOfEntries );",
            "name": "WSCWriteProviderOrder32"
        }
    ],
    "Srpapi.h": [
        {
            "signature": "HRESULT SrpCloseThreadNetworkContext( [in, out] HTHREAD_NETWORK_CONTEXT *threadNetworkContext );",
            "name": "SrpCloseThreadNetworkContext"
        },
        {
            "signature": "HRESULT SrpCreateThreadNetworkContext( [in] PCWSTR enterpriseId, [out] HTHREAD_NETWORK_CONTEXT *threadNetworkContext );",
            "name": "SrpCreateThreadNetworkContext"
        },
        {
            "signature": "HRESULT SrpDisablePermissiveModeFileEncryption();",
            "name": "SrpDisablePermissiveModeFileEncryption"
        },
        {
            "signature": "HRESULT SrpDoesPolicyAllowAppExecution( [in] const PACKAGE_ID *packageId, [out] BOOL *isAllowed );",
            "name": "SrpDoesPolicyAllowAppExecution"
        },
        {
            "signature": "HRESULT SrpEnablePermissiveModeFileEncryption( [in, optional] PCWSTR enterpriseId );",
            "name": "SrpEnablePermissiveModeFileEncryption"
        },
        {
            "signature": "HRESULT SrpGetEnterpriseIds( [in] HANDLE tokenHandle, [in, out, optional] PULONG numberOfBytes, [out, optional] PCWSTR *enterpriseIds, [out] PULONG enterpriseIdCount );",
            "name": "SrpGetEnterpriseIds"
        },
        {
            "signature": "HRESULT SrpGetEnterprisePolicy( [in] HANDLE tokenHandle, [out] ENTERPRISE_DATA_POLICIES *policyFlags );",
            "name": "SrpGetEnterprisePolicy"
        },
        {
            "signature": "NTSTATUS SrpIsTokenService( [in] HANDLE TokenHandle, [out] BOOLEAN *IsTokenService );",
            "name": "SrpIsTokenService"
        },
        {
            "signature": "HRESULT SrpSetTokenEnterpriseId( [in] HANDLE tokenHandle, [in, optional] PCWSTR enterpriseId );",
            "name": "SrpSetTokenEnterpriseId"
        }
    ],
    "Srrestoreptapi.h": [
        {
            "signature": "DWORD SRRemoveRestorePoint( [in] DWORD dwRPNum );",
            "name": "SRRemoveRestorePoint"
        },
        {
            "signature": "BOOL SRSetRestorePointA( [in] PRESTOREPOINTINFOA pRestorePtSpec, [out] PSTATEMGRSTATUS pSMgrStatus );",
            "name": "SRSetRestorePointA"
        },
        {
            "signature": "BOOL SRSetRestorePointW( [in] PRESTOREPOINTINFOW pRestorePtSpec, [out] PSTATEMGRSTATUS pSMgrStatus );",
            "name": "SRSetRestorePointW"
        }
    ],
    "Sspi.h": [
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY AcceptSecurityContext( [in, optional] PCredHandle phCredential, [in, optional] PCtxtHandle phContext, [in, optional] PSecBufferDesc pInput, [in] unsigned long fContextReq, [in] unsigned long TargetDataRep, [in, out, optional] PCtxtHandle phNewContext, [in, out, optional] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "AcceptSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY AcquireCredentialsHandleA( [in, optional] LPSTR pszPrincipal, [in] LPSTR pszPackage, [in] unsigned long fCredentialUse, [in, optional] void *pvLogonId, [in, optional] void *pAuthData, [in, optional] SEC_GET_KEY_FN pGetKeyFn, [in, optional] void *pvGetKeyArgument, [out] PCredHandle phCredential, [out, optional] PTimeStamp ptsExpiry );",
            "name": "AcquireCredentialsHandleA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY AcquireCredentialsHandleW( PSECURITY_STRING pPrincipal, PSECURITY_STRING pPackage, [in] unsigned long fCredentialUse, [in, optional] void *pvLogonId, [in, optional] void *pAuthData, [in, optional] SEC_GET_KEY_FN pGetKeyFn, [in, optional] void *pvGetKeyArgument, [out] PCredHandle phCredential, [out, optional] PTimeStamp ptsExpiry );",
            "name": "AcquireCredentialsHandleW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY AddCredentialsA( PCredHandle hCredentials, LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PTimeStamp ptsExpiry );",
            "name": "AddCredentialsA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY AddCredentialsW( PCredHandle hCredentials, PSECURITY_STRING pPrincipal, PSECURITY_STRING pPackage, unsigned long fCredentialUse, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PTimeStamp ptsExpiry );",
            "name": "AddCredentialsW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY AddSecurityPackageA( [in] LPSTR pszPackageName, [in] PSECURITY_PACKAGE_OPTIONS pOptions );",
            "name": "AddSecurityPackageA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY AddSecurityPackageW( [in] LPWSTR pszPackageName, [in] PSECURITY_PACKAGE_OPTIONS pOptions );",
            "name": "AddSecurityPackageW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY ApplyControlToken( [in] PCtxtHandle phContext, [in] PSecBufferDesc pInput );",
            "name": "ApplyControlToken"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY ChangeAccountPasswordA( [in] SEC_CHAR *pszPackageName, [in] SEC_CHAR *pszDomainName, [in] SEC_CHAR *pszAccountName, [in] SEC_CHAR *pszOldPassword, [in] SEC_CHAR *pszNewPassword, [in] BOOLEAN bImpersonating, [in] unsigned long dwReserved, [in, out] PSecBufferDesc pOutput );",
            "name": "ChangeAccountPasswordA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY ChangeAccountPasswordW( [in] SEC_WCHAR *pszPackageName, [in] SEC_WCHAR *pszDomainName, [in] SEC_WCHAR *pszAccountName, [in] SEC_WCHAR *pszOldPassword, [in] SEC_WCHAR *pszNewPassword, [in] BOOLEAN bImpersonating, [in] unsigned long dwReserved, [in, out] PSecBufferDesc pOutput );",
            "name": "ChangeAccountPasswordW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY CompleteAuthToken( [in] PCtxtHandle phContext, [in] PSecBufferDesc pToken );",
            "name": "CompleteAuthToken"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY DecryptMessage( [in] PCtxtHandle phContext, [in, out] PSecBufferDesc pMessage, [in] unsigned long MessageSeqNo, [out] unsigned long *pfQOP );",
            "name": "DecryptMessage"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY DelegateSecurityContext( PCtxtHandle phContext, PSECURITY_STRING pTarget, SecDelegationType DelegationType, PTimeStamp pExpiry, PSecBuffer pPackageParameters, PSecBufferDesc pOutput );",
            "name": "DelegateSecurityContext"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY DeleteSecurityContext( [in] PCtxtHandle phContext );",
            "name": "DeleteSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY DeleteSecurityPackageA( [in] LPSTR pszPackageName );",
            "name": "DeleteSecurityPackageA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY DeleteSecurityPackageW( [in] LPWSTR pszPackageName );",
            "name": "DeleteSecurityPackageW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY EncryptMessage( [in] PCtxtHandle phContext, [in] unsigned long fQOP, [in, out] PSecBufferDesc pMessage, [in] unsigned long MessageSeqNo );",
            "name": "EncryptMessage"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY EnumerateSecurityPackagesA( [in] unsigned long *pcPackages, [in] PSecPkgInfoA *ppPackageInfo );",
            "name": "EnumerateSecurityPackagesA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY EnumerateSecurityPackagesW( [in] unsigned long *pcPackages, [in] PSecPkgInfoW *ppPackageInfo );",
            "name": "EnumerateSecurityPackagesW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY ExportSecurityContext( [in] PCtxtHandle phContext, [in] ULONG fFlags, [out] PSecBuffer pPackedContext, [out, optional] void **pToken );",
            "name": "ExportSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY FreeContextBuffer( [in] PVOID pvContextBuffer );",
            "name": "FreeContextBuffer"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY FreeCredentialsHandle( [in] PCredHandle phCredential );",
            "name": "FreeCredentialsHandle"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY ImpersonateSecurityContext( [in] PCtxtHandle phContext );",
            "name": "ImpersonateSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY ImportSecurityContextA( [in] LPSTR pszPackage, [in] PSecBuffer pPackedContext, [in, optional] VOID *Token, [out] PCtxtHandle phContext );",
            "name": "ImportSecurityContextA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY ImportSecurityContextW( [in] PSECURITY_STRING pszPackage, [in] PSecBuffer pPackedContext, [in, optional] void *Token, [out] PCtxtHandle phContext );",
            "name": "ImportSecurityContextW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY InitializeSecurityContextA( [in, optional] PCredHandle phCredential, [in, optional] PCtxtHandle phContext, SEC_CHAR *pszTargetName, [in] unsigned long fContextReq, [in] unsigned long Reserved1, [in] unsigned long TargetDataRep, [in, optional] PSecBufferDesc pInput, [in] unsigned long Reserved2, [in, out, optional] PCtxtHandle phNewContext, [in, out, optional] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "InitializeSecurityContextA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY InitializeSecurityContextW( [in, optional] PCredHandle phCredential, [in, optional] PCtxtHandle phContext, [in, optional] PSECURITY_STRING pTargetName, [in] unsigned long fContextReq, [in] unsigned long Reserved1, [in] unsigned long TargetDataRep, [in, optional] PSecBufferDesc pInput, [in] unsigned long Reserved2, [in, out, optional] PCtxtHandle phNewContext, [in, out, optional] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "InitializeSecurityContextW"
        },
        {
            "signature": "PSecurityFunctionTableA SEC_ENTRY InitSecurityInterfaceA();",
            "name": "InitSecurityInterfaceA"
        },
        {
            "signature": "KSECDDDECLSPEC PSecurityFunctionTableW SEC_ENTRY InitSecurityInterfaceW();",
            "name": "InitSecurityInterfaceW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY MakeSignature( [in] PCtxtHandle phContext, [in] unsigned long fQOP, [in, out] PSecBufferDesc pMessage, [in] unsigned long MessageSeqNo );",
            "name": "MakeSignature"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryContextAttributesA( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [out] void *pBuffer );",
            "name": "QueryContextAttributesA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryContextAttributesExA( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [out] void *pBuffer, [in] unsigned long cbBuffer );",
            "name": "QueryContextAttributesExA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryContextAttributesExW( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [out] void *pBuffer, [in] unsigned long cbBuffer );",
            "name": "QueryContextAttributesExW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY QueryContextAttributesW( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [out] void *pBuffer );",
            "name": "QueryContextAttributesW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryCredentialsAttributesA( [in] PCredHandle phCredential, [in] unsigned long ulAttribute, [out] void *pBuffer );",
            "name": "QueryCredentialsAttributesA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryCredentialsAttributesExA( PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer );",
            "name": "QueryCredentialsAttributesExA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QueryCredentialsAttributesExW( PCredHandle phCredential, unsigned long ulAttribute, void *pBuffer, unsigned long cbBuffer );",
            "name": "QueryCredentialsAttributesExW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY QueryCredentialsAttributesW( [in] PCredHandle phCredential, [in] unsigned long ulAttribute, [out] void *pBuffer );",
            "name": "QueryCredentialsAttributesW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY QuerySecurityContextToken( [in] PCtxtHandle phContext, [out] void **Token );",
            "name": "QuerySecurityContextToken"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY QuerySecurityPackageInfoA( [in] LPSTR pszPackageName, [out] PSecPkgInfoA *ppPackageInfo );",
            "name": "QuerySecurityPackageInfoA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY QuerySecurityPackageInfoW( PSECURITY_STRING pPackageName, [out] PSecPkgInfoW *ppPackageInfo );",
            "name": "QuerySecurityPackageInfoW"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY RevertSecurityContext( [in] PCtxtHandle phContext );",
            "name": "RevertSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslAcceptSecurityContext( [in] PCredHandle phCredential, [in, optional] PCtxtHandle phContext, [in] PSecBufferDesc pInput, [in] unsigned long fContextReq, [in] unsigned long TargetDataRep, [out] PCtxtHandle phNewContext, [in, out] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "SaslAcceptSecurityContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslEnumerateProfilesA( [out] LPSTR *ProfileList, [out] ULONG *ProfileCount );",
            "name": "SaslEnumerateProfilesA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslEnumerateProfilesW( [out] LPWSTR *ProfileList, [out] ULONG *ProfileCount );",
            "name": "SaslEnumerateProfilesW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslGetContextOption( [in] PCtxtHandle ContextHandle, [in] ULONG Option, [out] PVOID Value, [out] ULONG Size, [out, optional] PULONG Needed );",
            "name": "SaslGetContextOption"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslGetProfilePackageA( [in] LPSTR ProfileName, [out] PSecPkgInfoA *PackageInfo );",
            "name": "SaslGetProfilePackageA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslGetProfilePackageW( [in] LPWSTR ProfileName, [out] PSecPkgInfoW *PackageInfo );",
            "name": "SaslGetProfilePackageW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslIdentifyPackageA( [in] PSecBufferDesc pInput, [out] PSecPkgInfoA *PackageInfo );",
            "name": "SaslIdentifyPackageA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslIdentifyPackageW( [in] PSecBufferDesc pInput, [out] PSecPkgInfoW *PackageInfo );",
            "name": "SaslIdentifyPackageW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslInitializeSecurityContextA( [in] PCredHandle phCredential, [in] PCtxtHandle phContext, [in] LPSTR pszTargetName, [in] unsigned long fContextReq, [in] unsigned long Reserved1, [in] unsigned long TargetDataRep, [in] PSecBufferDesc pInput, [in] unsigned long Reserved2, [out] PCtxtHandle phNewContext, [in, out] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "SaslInitializeSecurityContextA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslInitializeSecurityContextW( [in] PCredHandle phCredential, [in] PCtxtHandle phContext, [in] LPWSTR pszTargetName, [in] unsigned long fContextReq, [in] unsigned long Reserved1, [in] unsigned long TargetDataRep, [in] PSecBufferDesc pInput, [in] unsigned long Reserved2, [out] PCtxtHandle phNewContext, [in, out] PSecBufferDesc pOutput, [out] unsigned long *pfContextAttr, [out, optional] PTimeStamp ptsExpiry );",
            "name": "SaslInitializeSecurityContextW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SaslSetContextOption( [in] PCtxtHandle ContextHandle, [in] ULONG Option, [in] PVOID Value, [in] ULONG Size );",
            "name": "SaslSetContextOption"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SetContextAttributesA( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [in] void *pBuffer, [in] unsigned long cbBuffer );",
            "name": "SetContextAttributesA"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SetContextAttributesW( [in] PCtxtHandle phContext, [in] unsigned long ulAttribute, [in] void *pBuffer, [in] unsigned long cbBuffer );",
            "name": "SetContextAttributesW"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SetCredentialsAttributesA( [in] PCredHandle phCredential, [in] unsigned long ulAttribute, [in] void *pBuffer, unsigned long cbBuffer );",
            "name": "SetCredentialsAttributesA"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY SetCredentialsAttributesW( [in] PCredHandle phCredential, [in] unsigned long ulAttribute, [in] void *pBuffer, unsigned long cbBuffer );",
            "name": "SetCredentialsAttributesW"
        },
        {
            "signature": "SECURITY_STATUS SspiAcceptSecurityContextAsync( SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSecBufferDesc pInput, unsigned long fContextReq, unsigned long TargetDataRep, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry );",
            "name": "SspiAcceptSecurityContextAsync"
        },
        {
            "signature": "SECURITY_STATUS SspiAcquireCredentialsHandleAsyncA( SspiAsyncContext *AsyncContext, LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry );",
            "name": "SspiAcquireCredentialsHandleAsyncA"
        },
        {
            "signature": "SECURITY_STATUS SspiAcquireCredentialsHandleAsyncW( SspiAsyncContext *AsyncContext, PSECURITY_STRING pszPrincipal, PSECURITY_STRING pszPackage, unsigned long fCredentialUse, void *pvLogonId, void *pAuthData, SEC_GET_KEY_FN pGetKeyFn, void *pvGetKeyArgument, PCredHandle phCredential, PTimeStamp ptsExpiry );",
            "name": "SspiAcquireCredentialsHandleAsyncW"
        },
        {
            "signature": "BOOLEAN SspiAsyncContextRequiresNotify( SspiAsyncContext *AsyncContext );",
            "name": "SspiAsyncContextRequiresNotify"
        },
        {
            "signature": "SspiAsyncNotifyCallback Sspiasyncnotifycallback; void Sspiasyncnotifycallback( SspiAsyncContext *Handle, PVOID CallbackData ) {...}",
            "name": "SspiAsyncNotifyCallback callback"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiCompareAuthIdentities( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity1, [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity2, [out] PBOOLEAN SameSuppliedUser, [out] PBOOLEAN SameSuppliedIdentity );",
            "name": "SspiCompareAuthIdentities"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiCopyAuthIdentity( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *AuthDataCopy );",
            "name": "SspiCopyAuthIdentity"
        },
        {
            "signature": "SspiAsyncContext * SspiCreateAsyncContext();",
            "name": "SspiCreateAsyncContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiDecryptAuthIdentity( [in, out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData );",
            "name": "SspiDecryptAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiDecryptAuthIdentityEx( [in] ULONG Options, [in, out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData );",
            "name": "SspiDecryptAuthIdentityEx"
        },
        {
            "signature": "SECURITY_STATUS SspiDeleteSecurityContextAsync( SspiAsyncContext *AsyncContext, PCtxtHandle phContext );",
            "name": "SspiDeleteSecurityContextAsync"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiEncodeAuthIdentityAsStrings( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE pAuthIdentity, [out] PCWSTR *ppszUserName, [out] PCWSTR *ppszDomainName, [out] PCWSTR *ppszPackedCredentialsString );",
            "name": "SspiEncodeAuthIdentityAsStrings"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiEncodeStringsAsAuthIdentity( [in] PCWSTR pszUserName, [in] PCWSTR pszDomainName, [in] PCWSTR pszPackedCredentialsString, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity );",
            "name": "SspiEncodeStringsAsAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiEncryptAuthIdentity( [in, out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData );",
            "name": "SspiEncryptAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiEncryptAuthIdentityEx( [in] ULONG Options, [in, out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData );",
            "name": "SspiEncryptAuthIdentityEx"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiExcludePackage( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, [in] PCWSTR pszPackageName, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppNewAuthIdentity );",
            "name": "SspiExcludePackage"
        },
        {
            "signature": "void SspiFreeAsyncContext( SspiAsyncContext *Handle );",
            "name": "SspiFreeAsyncContext"
        },
        {
            "signature": "VOID SEC_ENTRY SspiFreeAuthIdentity( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData );",
            "name": "SspiFreeAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SspiFreeCredentialsHandleAsync( SspiAsyncContext *AsyncContext, PCredHandle phCredential );",
            "name": "SspiFreeCredentialsHandleAsync"
        },
        {
            "signature": "SECURITY_STATUS SspiGetAsyncCallStatus( SspiAsyncContext *Handle );",
            "name": "SspiGetAsyncCallStatus"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiGetCredUIContext( [in] HANDLE ContextHandle, [in] GUID *CredType, [in] LUID *LogonId, [out] PSEC_WINNT_CREDUI_CONTEXT_VECTOR *CredUIContexts, [out] HANDLE *TokenHandle );",
            "name": "SspiGetCredUIContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiGetTargetHostName( [in] PCWSTR pszTargetName, [out] PWSTR *pszHostName );",
            "name": "SspiGetTargetHostName"
        },
        {
            "signature": "SECURITY_STATUS SspiInitializeSecurityContextAsyncA( SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, LPSTR pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry );",
            "name": "SspiInitializeSecurityContextAsyncA"
        },
        {
            "signature": "SECURITY_STATUS SspiInitializeSecurityContextAsyncW( SspiAsyncContext *AsyncContext, PCredHandle phCredential, PCtxtHandle phContext, PSECURITY_STRING pszTargetName, unsigned long fContextReq, unsigned long Reserved1, unsigned long TargetDataRep, PSecBufferDesc pInput, unsigned long Reserved2, PCtxtHandle phNewContext, PSecBufferDesc pOutput, unsigned long *pfContextAttr, PTimeStamp ptsExpiry );",
            "name": "SspiInitializeSecurityContextAsyncW"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY SspiIsAuthIdentityEncrypted( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE EncryptedAuthData );",
            "name": "SspiIsAuthIdentityEncrypted"
        },
        {
            "signature": "BOOLEAN SEC_ENTRY SspiIsPromptingNeeded( [in] unsigned long ErrorOrNtStatus );",
            "name": "SspiIsPromptingNeeded"
        },
        {
            "signature": "VOID SEC_ENTRY SspiLocalFree( [in] PVOID DataBuffer );",
            "name": "SspiLocalFree"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiMarshalAuthIdentity( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, [out] unsigned long *AuthIdentityLength, [out] char **AuthIdentityByteArray );",
            "name": "SspiMarshalAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiPrepareForCredRead( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, [in] PCWSTR pszTargetName, [out] PULONG pCredmanCredentialType, [out] PCWSTR *ppszCredmanTargetName );",
            "name": "SspiPrepareForCredRead"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiPrepareForCredWrite( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthIdentity, [in] PCWSTR pszTargetName, [out] PULONG pCredmanCredentialType, [out] PCWSTR *ppszCredmanTargetName, [out] PCWSTR *ppszCredmanUserName, [out] PUCHAR *ppCredentialBlob, [out] PULONG pCredentialBlobSize );",
            "name": "SspiPrepareForCredWrite"
        },
        {
            "signature": "unsigned long SEC_ENTRY SspiPromptForCredentialsA( [in] PCSTR pszTargetName, [in] PCREDUI_INFOA pUiInfo, [in] unsigned long dwAuthError, [in] PCSTR pszPackage, [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE pInputAuthIdentity, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity, [in, out, optional] int *pfSave, [in] unsigned long dwFlags );",
            "name": "SspiPromptForCredentialsA"
        },
        {
            "signature": "unsigned long SEC_ENTRY SspiPromptForCredentialsW( [in] PCWSTR pszTargetName, [in] PCREDUI_INFOW pUiInfo, [in] unsigned long dwAuthError, [in] PCWSTR pszPackage, [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE pInputAuthIdentity, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity, [in, out, optional] int *pfSave, [in] unsigned long dwFlags );",
            "name": "SspiPromptForCredentialsW"
        },
        {
            "signature": "NTSTATUS SspiReinitAsyncContext( SspiAsyncContext *Handle );",
            "name": "SspiReinitAsyncContext"
        },
        {
            "signature": "SECURITY_STATUS SspiSetAsyncNotifyCallback( SspiAsyncContext *Context, SspiAsyncNotifyCallback Callback, void *CallbackData );",
            "name": "SspiSetAsyncNotifyCallback"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiUnmarshalAuthIdentity( [in] unsigned long AuthIdentityLength, [in] char *AuthIdentityByteArray, [out] PSEC_WINNT_AUTH_IDENTITY_OPAQUE *ppAuthIdentity );",
            "name": "SspiUnmarshalAuthIdentity"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiUnmarshalCredUIContext( [in] PUCHAR MarshaledCredUIContext, [in] ULONG MarshaledCredUIContextLength, [out] PSEC_WINNT_CREDUI_CONTEXT *CredUIContext );",
            "name": "SspiUnmarshalCredUIContext"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiUpdateCredentials( [in] HANDLE ContextHandle, [in] GUID *CredType, [in] ULONG FlatCredUIContextLength, [in] PUCHAR FlatCredUIContext );",
            "name": "SspiUpdateCredentials"
        },
        {
            "signature": "SECURITY_STATUS SEC_ENTRY SspiValidateAuthIdentity( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData );",
            "name": "SspiValidateAuthIdentity"
        },
        {
            "signature": "VOID SEC_ENTRY SspiZeroAuthIdentity( [in] PSEC_WINNT_AUTH_IDENTITY_OPAQUE AuthData );",
            "name": "SspiZeroAuthIdentity"
        },
        {
            "signature": "KSECDDDECLSPEC SECURITY_STATUS SEC_ENTRY VerifySignature( [in] PCtxtHandle phContext, [in] PSecBufferDesc pMessage, [in] unsigned long MessageSeqNo, [out] unsigned long *pfQOP );",
            "name": "VerifySignature"
        }
    ],
    "Stm.h": [
        {
            "signature": "PBLOCK_CONVERT_SERVICES_TO_STATIC PblockConvertServicesToStatic; DWORD PblockConvertServicesToStatic( [in] ULONG InterfaceIndex ) {...}",
            "name": "PBLOCK_CONVERT_SERVICES_TO_STATIC callback"
        },
        {
            "signature": "PBLOCK_DELETE_STATIC_SERVICES PblockDeleteStaticServices; DWORD PblockDeleteStaticServices( [in] ULONG InterfaceIndex ) {...}",
            "name": "PBLOCK_DELETE_STATIC_SERVICES callback"
        },
        {
            "signature": "PCLOSE_SERVICE_ENUMERATION_HANDLE PcloseServiceEnumerationHandle; DWORD PcloseServiceEnumerationHandle( [in] HANDLE EnumerationHandle ) {...}",
            "name": "PCLOSE_SERVICE_ENUMERATION_HANDLE callback"
        },
        {
            "signature": "PCREATE_SERVICE_ENUMERATION_HANDLE PcreateServiceEnumerationHandle; HANDLE PcreateServiceEnumerationHandle( [in] DWORD ExclusionFlags, [in] PIPX_SERVICE CriteriaService ) {...}",
            "name": "PCREATE_SERVICE_ENUMERATION_HANDLE callback"
        },
        {
            "signature": "PCREATE_STATIC_SERVICE PcreateStaticService; DWORD PcreateStaticService( [in] ULONG InterfaceIndex, PIPX_SERVER_ENTRY ServerEntry ) {...}",
            "name": "PCREATE_STATIC_SERVICE callback"
        },
        {
            "signature": "PDELETE_STATIC_SERVICE PdeleteStaticService; DWORD PdeleteStaticService( [in] ULONG InterfaceIndex, PIPX_SERVER_ENTRY ServerEntry ) {...}",
            "name": "PDELETE_STATIC_SERVICE callback"
        },
        {
            "signature": "PENUMERATE_GET_NEXT_SERVICE PenumerateGetNextService; DWORD PenumerateGetNextService( [in] HANDLE EnumerationHandle, [out] PIPX_SERVICE Service ) {...}",
            "name": "PENUMERATE_GET_NEXT_SERVICE callback"
        },
        {
            "signature": "PGET_FIRST_ORDERED_SERVICE PgetFirstOrderedService; DWORD PgetFirstOrderedService( [in] DWORD OrderingMethod, [in] DWORD ExclusionFlags, [in, out] PIPX_SERVICE Service ) {...}",
            "name": "PGET_FIRST_ORDERED_SERVICE callback"
        },
        {
            "signature": "PGET_NEXT_ORDERED_SERVICE PgetNextOrderedService; DWORD PgetNextOrderedService( [in] DWORD OrderingMethod, [in] DWORD ExclusionFlags, [in, out] PIPX_SERVICE Service ) {...}",
            "name": "PGET_NEXT_ORDERED_SERVICE callback"
        },
        {
            "signature": "PGET_SERVICE_COUNT PgetServiceCount; ULONG PgetServiceCount() {...}",
            "name": "PGET_SERVICE_COUNT callback"
        },
        {
            "signature": "PIS_SERVICE PisService; BOOL PisService( [in] USHORT Type, [in] PUCHAR Name, [out] PIPX_SERVICE Service ) {...}",
            "name": "PIS_SERVICE callback"
        }
    ],
    "Storageprovider.h": [],
    "Storprop.h": [
        {
            "signature": "LONG CdromDisableDigitalPlayback( [in] HDEVINFO DevInfo, [in] PSP_DEVINFO_DATA DevInfoData );",
            "name": "CdromDisableDigitalPlayback"
        },
        {
            "signature": "LONG CdromEnableDigitalPlayback( [in] HDEVINFO DevInfo, [in] PSP_DEVINFO_DATA DevInfoData, [in] BOOLEAN ForceUnknown );",
            "name": "CdromEnableDigitalPlayback"
        },
        {
            "signature": "LONG CdromIsDigitalPlaybackEnabled( [in] HDEVINFO DevInfo, [in] PSP_DEVINFO_DATA DevInfoData, [out] PBOOLEAN Enabled );",
            "name": "CdromIsDigitalPlaybackEnabled"
        },
        {
            "signature": "BOOL CdromKnownGoodDigitalPlayback( [in] HDEVINFO HDevInfo, [in] PSP_DEVINFO_DATA DevInfoData );",
            "name": "CdromKnownGoodDigitalPlayback"
        }
    ],
    "Stralign.h": [
        {
            "signature": "size_t uaw_wcslen( [in] PCUWSTR String );",
            "name": "uaw_wcslen"
        }
    ],
    "Stringapiset.h": [
        {
            "signature": "int CompareStringEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwCmpFlags, [in] _In_NLS_string_(cchCount1)LPCWCH lpString1, [in] int cchCount1, [in] _In_NLS_string_(cchCount2)LPCWCH lpString2, [in] int cchCount2, [in, optional] LPNLSVERSIONINFO lpVersionInformation, [in, optional] LPVOID lpReserved, [in, optional] LPARAM lParam );",
            "name": "CompareStringEx"
        },
        {
            "signature": "int CompareStringOrdinal( [in] _In_NLS_string_(cchCount1)LPCWCH lpString1, [in] int cchCount1, [in] _In_NLS_string_(cchCount2)LPCWCH lpString2, [in] int cchCount2, [in] BOOL bIgnoreCase );",
            "name": "CompareStringOrdinal"
        },
        {
            "signature": "int CompareStringW( [in] LCID Locale, [in] DWORD dwCmpFlags, [in] _In_NLS_string_(cchCount1)PCNZWCH lpString1, [in] int cchCount1, [in] _In_NLS_string_(cchCount2)PCNZWCH lpString2, [in] int cchCount2 );",
            "name": "CompareStringW"
        },
        {
            "signature": "int FoldStringW( [in] DWORD dwMapFlags, [in] _In_NLS_string_(cchSrc)LPCWCH lpSrcStr, [in] int cchSrc, [out, optional] LPWSTR lpDestStr, [in] int cchDest );",
            "name": "FoldStringW"
        },
        {
            "signature": "BOOL GetStringTypeExW( [in] LCID Locale, [in] DWORD dwInfoType, [in] _In_NLS_string_(cchSrc)LPCWCH lpSrcStr, [in] int cchSrc, [out] LPWORD lpCharType );",
            "name": "GetStringTypeExW"
        },
        {
            "signature": "BOOL GetStringTypeW( [in] DWORD dwInfoType, [in] _In_NLS_string_(cchSrc)LPCWCH lpSrcStr, [in] int cchSrc, [out] LPWORD lpCharType );",
            "name": "GetStringTypeW"
        },
        {
            "signature": "int MultiByteToWideChar( [in] UINT CodePage, [in] DWORD dwFlags, [in] _In_NLS_string_(cbMultiByte)LPCCH lpMultiByteStr, [in] int cbMultiByte, [out, optional] LPWSTR lpWideCharStr, [in] int cchWideChar );",
            "name": "MultiByteToWideChar"
        },
        {
            "signature": "int WideCharToMultiByte( [in] UINT CodePage, [in] DWORD dwFlags, [in] _In_NLS_string_(cchWideChar)LPCWCH lpWideCharStr, [in] int cchWideChar, [out, optional] LPSTR lpMultiByteStr, [in] int cbMultiByte, [in, optional] LPCCH lpDefaultChar, [out, optional] LPBOOL lpUsedDefaultChar );",
            "name": "WideCharToMultiByte"
        }
    ],
    "Strmif.h": [],
    "Strsafe.h": [
        {
            "signature": "STRSAFEAPI StringCbCatA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszSrc );",
            "name": "StringCbCatA"
        },
        {
            "signature": "STRSAFEAPI StringCbCatExA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszSrc, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCatExA"
        },
        {
            "signature": "STRSAFEAPI StringCbCatExW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszSrc, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCatExW"
        },
        {
            "signature": "STRSAFEAPI StringCbCatNA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cbToAppend );",
            "name": "StringCbCatNA"
        },
        {
            "signature": "STRSAFEAPI StringCbCatNExA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cbToAppend, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCatNExA"
        },
        {
            "signature": "STRSAFEAPI StringCbCatNExW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cbToAppend, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCatNExW"
        },
        {
            "signature": "STRSAFEAPI StringCbCatNW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cbToAppend );",
            "name": "StringCbCatNW"
        },
        {
            "signature": "STRSAFEAPI StringCbCatW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszSrc );",
            "name": "StringCbCatW"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszSrc );",
            "name": "StringCbCopyA"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszSrc, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCopyExA"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszSrc, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCopyExW"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyNA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cbToCopy );",
            "name": "StringCbCopyNA"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyNExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cbToCopy, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCopyNExA"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyNExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cbToCopy, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbCopyNExW"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyNW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cbToCopy );",
            "name": "StringCbCopyNW"
        },
        {
            "signature": "STRSAFEAPI StringCbCopyW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszSrc );",
            "name": "StringCbCopyW"
        },
        {
            "signature": "STRSAFEAPI StringCbGetsA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest );",
            "name": "StringCbGetsA"
        },
        {
            "signature": "STRSAFEAPI StringCbGetsExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbGetsExA"
        },
        {
            "signature": "STRSAFEAPI StringCbGetsExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags );",
            "name": "StringCbGetsExW"
        },
        {
            "signature": "STRSAFEAPI StringCbGetsW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest );",
            "name": "StringCbGetsW"
        },
        {
            "signature": "STRSAFEAPI StringCbLengthA( [in] STRSAFE_PCNZCH psz, [in] size_t cbMax, [out] size_t *pcbLength );",
            "name": "StringCbLengthA"
        },
        {
            "signature": "STRSAFEAPI StringCbLengthW( [in] STRSAFE_PCNZWCH psz, [in] size_t cbMax, [out] size_t *pcbLength );",
            "name": "StringCbLengthW"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintf_lA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCbPrintf_lA"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintf_lExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [out] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCbPrintf_lExA"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintf_lExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [out] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCbPrintf_lExW"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintf_lW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCbPrintf_lW"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintfA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszFormat, ... );",
            "name": "StringCbPrintfA"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintfExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCSTR pszFormat, ... );",
            "name": "StringCbPrintfExA"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintfExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCWSTR pszFormat, ... );",
            "name": "StringCbPrintfExW"
        },
        {
            "signature": "STRSAFEAPI StringCbPrintfW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszFormat, ... );",
            "name": "StringCbPrintfW"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintf_lA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCbVPrintf_lA"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintf_lExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [out] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCbVPrintf_lExA"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintf_lExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [out] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCbVPrintf_lExW"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintf_lW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCbVPrintf_lW"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintfA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCSTR pszFormat, [in] va_list argList );",
            "name": "StringCbVPrintfA"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintfExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCSTR pszFormat, [in] va_list argList );",
            "name": "StringCbVPrintfExA"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintfExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcbRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCWSTR pszFormat, [in] va_list argList );",
            "name": "StringCbVPrintfExW"
        },
        {
            "signature": "STRSAFEAPI StringCbVPrintfW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cbDest, [in] STRSAFE_LPCWSTR pszFormat, [in] va_list argList );",
            "name": "StringCbVPrintfW"
        },
        {
            "signature": "STRSAFEAPI StringCchCatA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszSrc );",
            "name": "StringCchCatA"
        },
        {
            "signature": "STRSAFEAPI StringCchCatExA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszSrc, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCatExA"
        },
        {
            "signature": "STRSAFEAPI StringCchCatExW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszSrc, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCatExW"
        },
        {
            "signature": "STRSAFEAPI StringCchCatNA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cchToAppend );",
            "name": "StringCchCatNA"
        },
        {
            "signature": "STRSAFEAPI StringCchCatNExA( [in, out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cchToAppend, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCatNExA"
        },
        {
            "signature": "STRSAFEAPI StringCchCatNExW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cchToAppend, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCatNExW"
        },
        {
            "signature": "STRSAFEAPI StringCchCatNW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cchToAppend );",
            "name": "StringCchCatNW"
        },
        {
            "signature": "STRSAFEAPI StringCchCatW( [in, out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszSrc );",
            "name": "StringCchCatW"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszSrc );",
            "name": "StringCchCopyA"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszSrc, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCopyExA"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszSrc, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCopyExW"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyNA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cchToCopy );",
            "name": "StringCchCopyNA"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyNExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZCH pszSrc, [in] size_t cchToCopy, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCopyNExA"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyNExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cchToCopy, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchCopyNExW"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyNW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_PCNZWCH pszSrc, [in] size_t cchToCopy );",
            "name": "StringCchCopyNW"
        },
        {
            "signature": "STRSAFEAPI StringCchCopyW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszSrc );",
            "name": "StringCchCopyW"
        },
        {
            "signature": "STRSAFEAPI StringCchGetsA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest );",
            "name": "StringCchGetsA"
        },
        {
            "signature": "STRSAFEAPI StringCchGetsExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchGetsExA"
        },
        {
            "signature": "STRSAFEAPI StringCchGetsExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags );",
            "name": "StringCchGetsExW"
        },
        {
            "signature": "STRSAFEAPI StringCchGetsW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest );",
            "name": "StringCchGetsW"
        },
        {
            "signature": "STRSAFEAPI StringCchLengthA( [in] STRSAFE_PCNZCH psz, [in] size_t cchMax, [out] size_t *pcchLength );",
            "name": "StringCchLengthA"
        },
        {
            "signature": "STRSAFEAPI StringCchLengthW( [in] STRSAFE_PCNZWCH psz, [in] size_t cchMax, [out] size_t *pcchLength );",
            "name": "StringCchLengthW"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintf_lA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCchPrintf_lA"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintf_lExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [out] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCchPrintf_lExA"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintf_lExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [out] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCchPrintf_lExW"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintf_lW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, ... );",
            "name": "StringCchPrintf_lW"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintfA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszFormat, ... );",
            "name": "StringCchPrintfA"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintfExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCSTR pszFormat, ... );",
            "name": "StringCchPrintfExA"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintfExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCWSTR pszFormat, ... );",
            "name": "StringCchPrintfExW"
        },
        {
            "signature": "STRSAFEAPI StringCchPrintfW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszFormat, ... );",
            "name": "StringCchPrintfW"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintf_lA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCchVPrintf_lA"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintf_lExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [out] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCchVPrintf_lExA"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintf_lExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [out] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCchVPrintf_lExW"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintf_lW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] _Printf_format_string_params_(2)STRSAFE_LPCWSTR pszFormat, [in] _locale_t locale, [in] va_list argList );",
            "name": "StringCchVPrintf_lW"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintfA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCSTR pszFormat, [in] va_list argList );",
            "name": "StringCchVPrintfA"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintfExA( [out] STRSAFE_LPSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCSTR pszFormat, [in] va_list argList );",
            "name": "StringCchVPrintfExA"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintfExW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [out, optional] STRSAFE_LPWSTR *ppszDestEnd, [out, optional] size_t *pcchRemaining, [in] DWORD dwFlags, [in] STRSAFE_LPCWSTR pszFormat, [in] va_list argList );",
            "name": "StringCchVPrintfExW"
        },
        {
            "signature": "STRSAFEAPI StringCchVPrintfW( [out] STRSAFE_LPWSTR pszDest, [in] size_t cchDest, [in] STRSAFE_LPCWSTR pszFormat, [in] va_list argList );",
            "name": "StringCchVPrintfW"
        }
    ],
    "Structuredquery.h": [],
    "Structuredquerycondition.h": [],
    "Subauth.h": [
        {
            "signature": "NTSTATUS Msv1_0SubAuthenticationFilter( [in] NETLOGON_LOGON_INFO_CLASS LogonLevel, [in] PVOID LogonInformation, [in] ULONG Flags, [in] PUSER_ALL_INFORMATION UserAll, [out] PULONG WhichFields, [out] PULONG UserFlags, [out] PBOOLEAN Authoritative, [out] PLARGE_INTEGER LogoffTime, [out] PLARGE_INTEGER KickoffTime );",
            "name": "Msv1_0SubAuthenticationFilter"
        },
        {
            "signature": "NTSTATUS Msv1_0SubAuthenticationRoutine( [in] NETLOGON_LOGON_INFO_CLASS LogonLevel, [in] PVOID LogonInformation, [in] ULONG Flags, [in] PUSER_ALL_INFORMATION UserAll, [out] PULONG WhichFields, [out] PULONG UserFlags, [out] PBOOLEAN Authoritative, [out] PLARGE_INTEGER LogoffTime, [out] PLARGE_INTEGER KickoffTime );",
            "name": "Msv1_0SubAuthenticationRoutine"
        },
        {
            "signature": "NTSTATUS Msv1_0SubAuthenticationRoutineEx( [in] NETLOGON_LOGON_INFO_CLASS LogonLevel, [in] PVOID LogonInformation, [in] ULONG Flags, [in] PUSER_ALL_INFORMATION UserAll, [in] SAM_HANDLE UserHandle, [in, out] PMSV1_0_VALIDATION_INFO ValidationInfo, [out] PULONG ActionsPerformed );",
            "name": "Msv1_0SubAuthenticationRoutineEx"
        },
        {
            "signature": "NTSTATUS Msv1_0SubAuthenticationRoutineGeneric( PVOID SubmitBuffer, ULONG SubmitBufferLength, [out] PULONG ReturnBufferLength, [out] PVOID *ReturnBuffer );",
            "name": "Msv1_0SubAuthenticationRoutineGeneric"
        }
    ],
    "Subsmgr.h": [],
    "Swdevice.h": [
        {
            "signature": "SW_DEVICE_CREATE_CALLBACK SwDeviceCreateCallback; void SwDeviceCreateCallback( [in] HSWDEVICE hSwDevice, [in] HRESULT CreateResult, [in, optional] PVOID pContext, [in, optional] PCWSTR pszDeviceInstanceId ) {...}",
            "name": "SW_DEVICE_CREATE_CALLBACK callback"
        },
        {
            "signature": "void SwDeviceClose( [in] HSWDEVICE hSwDevice );",
            "name": "SwDeviceClose"
        },
        {
            "signature": "HRESULT SwDeviceCreate( [in] PCWSTR pszEnumeratorName, [in] PCWSTR pszParentDeviceInstance, [in] const SW_DEVICE_CREATE_INFO *pCreateInfo, [in] ULONG cPropertyCount, [in, optional] const DEVPROPERTY *pProperties, [in] SW_DEVICE_CREATE_CALLBACK pCallback, [in, optional] PVOID pContext, [out] PHSWDEVICE phSwDevice );",
            "name": "SwDeviceCreate"
        },
        {
            "signature": "HRESULT SwDeviceGetLifetime( [in] HSWDEVICE hSwDevice, [in] PSW_DEVICE_LIFETIME pLifetime );",
            "name": "SwDeviceGetLifetime"
        },
        {
            "signature": "HRESULT SwDeviceInterfacePropertySet( [in] HSWDEVICE hSwDevice, [in] PCWSTR pszDeviceInterfaceId, [in] ULONG cPropertyCount, [in] const DEVPROPERTY *pProperties );",
            "name": "SwDeviceInterfacePropertySet"
        },
        {
            "signature": "HRESULT SwDeviceInterfaceRegister( [in] HSWDEVICE hSwDevice, [in] const GUID *pInterfaceClassGuid, [in, optional] PCWSTR pszReferenceString, [in] ULONG cPropertyCount, [in, optional] const DEVPROPERTY *pProperties, [in] BOOL fEnabled, [out, optional] PWSTR *ppszDeviceInterfaceId );",
            "name": "SwDeviceInterfaceRegister"
        },
        {
            "signature": "HRESULT SwDeviceInterfaceSetState( [in] HSWDEVICE hSwDevice, [in] PCWSTR pszDeviceInterfaceId, [in] BOOL fEnabled );",
            "name": "SwDeviceInterfaceSetState"
        },
        {
            "signature": "HRESULT SwDevicePropertySet( [in] HSWDEVICE hSwDevice, [in] ULONG cPropertyCount, [in] const DEVPROPERTY *pProperties );",
            "name": "SwDevicePropertySet"
        },
        {
            "signature": "HRESULT SwDeviceSetLifetime( [in] HSWDEVICE hSwDevice, [in] SW_DEVICE_LIFETIME Lifetime );",
            "name": "SwDeviceSetLifetime"
        },
        {
            "signature": "void SwMemFree( [in] PVOID pMem );",
            "name": "SwMemFree"
        }
    ],
    "Swdevicedef.h": [],
    "Synchapi.h": [
        {
            "signature": "void AcquireSRWLockExclusive( [in, out] PSRWLOCK SRWLock );",
            "name": "AcquireSRWLockExclusive"
        },
        {
            "signature": "void AcquireSRWLockShared( [in, out] PSRWLOCK SRWLock );",
            "name": "AcquireSRWLockShared"
        },
        {
            "signature": "BOOL CancelWaitableTimer( [in] HANDLE hTimer );",
            "name": "CancelWaitableTimer"
        },
        {
            "signature": "HANDLE CreateEventA( [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes, [in] BOOL bManualReset, [in] BOOL bInitialState, [in, optional] LPCSTR lpName );",
            "name": "CreateEventA"
        },
        {
            "signature": "HANDLE CreateEventExA( [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes, [in, optional] LPCSTR lpName, [in] DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateEventExA"
        },
        {
            "signature": "HANDLE CreateEventExW( [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes, [in, optional] LPCWSTR lpName, [in] DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateEventExW"
        },
        {
            "signature": "HANDLE CreateEventW( [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes, [in] BOOL bManualReset, [in] BOOL bInitialState, [in, optional] LPCWSTR lpName );",
            "name": "CreateEventW"
        },
        {
            "signature": "HANDLE CreateMutexA( [in, optional] LPSECURITY_ATTRIBUTES lpMutexAttributes, [in] BOOL bInitialOwner, [in, optional] LPCSTR lpName );",
            "name": "CreateMutexA"
        },
        {
            "signature": "HANDLE CreateMutexExA( [in, optional] LPSECURITY_ATTRIBUTES lpMutexAttributes, [in, optional] LPCSTR lpName, [in] DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateMutexExA"
        },
        {
            "signature": "HANDLE CreateMutexExW( [in, optional] LPSECURITY_ATTRIBUTES lpMutexAttributes, [in, optional] LPCWSTR lpName, [in] DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateMutexExW"
        },
        {
            "signature": "HANDLE CreateMutexW( [in, optional] LPSECURITY_ATTRIBUTES lpMutexAttributes, [in] BOOL bInitialOwner, [in, optional] LPCWSTR lpName );",
            "name": "CreateMutexW"
        },
        {
            "signature": "HANDLE CreateSemaphoreExW( [in, optional] LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, [in] LONG lInitialCount, [in] LONG lMaximumCount, [in, optional] LPCWSTR lpName, DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateSemaphoreExW"
        },
        {
            "signature": "HANDLE CreateSemaphoreW( [in, optional] LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, [in] LONG lInitialCount, [in] LONG lMaximumCount, [in, optional] LPCWSTR lpName );",
            "name": "CreateSemaphoreW"
        },
        {
            "signature": "HANDLE CreateWaitableTimerExW( [in, optional] LPSECURITY_ATTRIBUTES lpTimerAttributes, [in, optional] LPCWSTR lpTimerName, [in] DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateWaitableTimerExW"
        },
        {
            "signature": "HANDLE CreateWaitableTimerW( [in, optional] LPSECURITY_ATTRIBUTES lpTimerAttributes, [in] BOOL bManualReset, [in, optional] LPCWSTR lpTimerName );",
            "name": "CreateWaitableTimerW"
        },
        {
            "signature": "void DeleteCriticalSection( [in, out] LPCRITICAL_SECTION lpCriticalSection );",
            "name": "DeleteCriticalSection"
        },
        {
            "signature": "BOOL DeleteSynchronizationBarrier( [in, out] LPSYNCHRONIZATION_BARRIER lpBarrier );",
            "name": "DeleteSynchronizationBarrier"
        },
        {
            "signature": "void EnterCriticalSection( [in, out] LPCRITICAL_SECTION lpCriticalSection );",
            "name": "EnterCriticalSection"
        },
        {
            "signature": "BOOL EnterSynchronizationBarrier( [in, out] LPSYNCHRONIZATION_BARRIER lpBarrier, [in] DWORD dwFlags );",
            "name": "EnterSynchronizationBarrier"
        },
        {
            "signature": "void InitializeConditionVariable( [out] PCONDITION_VARIABLE ConditionVariable );",
            "name": "InitializeConditionVariable"
        },
        {
            "signature": "void InitializeCriticalSection( [out] LPCRITICAL_SECTION lpCriticalSection );",
            "name": "InitializeCriticalSection"
        },
        {
            "signature": "BOOL InitializeCriticalSectionAndSpinCount( [out] LPCRITICAL_SECTION lpCriticalSection, [in] DWORD dwSpinCount );",
            "name": "InitializeCriticalSectionAndSpinCount"
        },
        {
            "signature": "BOOL InitializeCriticalSectionEx( [out] LPCRITICAL_SECTION lpCriticalSection, [in] DWORD dwSpinCount, [in] DWORD Flags );",
            "name": "InitializeCriticalSectionEx"
        },
        {
            "signature": "void InitializeSRWLock( [out] PSRWLOCK SRWLock );",
            "name": "InitializeSRWLock"
        },
        {
            "signature": "BOOL InitializeSynchronizationBarrier( [out] LPSYNCHRONIZATION_BARRIER lpBarrier, [in] LONG lTotalThreads, [in] LONG lSpinCount );",
            "name": "InitializeSynchronizationBarrier"
        },
        {
            "signature": "BOOL InitOnceBeginInitialize( [in, out] LPINIT_ONCE lpInitOnce, [in] DWORD dwFlags, [out] PBOOL fPending, [out, optional] LPVOID *lpContext );",
            "name": "InitOnceBeginInitialize"
        },
        {
            "signature": "BOOL InitOnceComplete( [in, out] LPINIT_ONCE lpInitOnce, [in] DWORD dwFlags, [in, optional] LPVOID lpContext );",
            "name": "InitOnceComplete"
        },
        {
            "signature": "BOOL InitOnceExecuteOnce( [in, out] PINIT_ONCE InitOnce, [in] PINIT_ONCE_FN InitFn, [in, optional] PVOID Parameter, [in, out, optional] LPVOID *Context );",
            "name": "InitOnceExecuteOnce"
        },
        {
            "signature": "void InitOnceInitialize( [out] PINIT_ONCE InitOnce );",
            "name": "InitOnceInitialize"
        },
        {
            "signature": "void LeaveCriticalSection( [in, out] LPCRITICAL_SECTION lpCriticalSection );",
            "name": "LeaveCriticalSection"
        },
        {
            "signature": "HANDLE OpenEventA( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCSTR lpName );",
            "name": "OpenEventA"
        },
        {
            "signature": "HANDLE OpenEventW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpName );",
            "name": "OpenEventW"
        },
        {
            "signature": "HANDLE OpenMutexW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpName );",
            "name": "OpenMutexW"
        },
        {
            "signature": "HANDLE OpenSemaphoreW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpName );",
            "name": "OpenSemaphoreW"
        },
        {
            "signature": "HANDLE OpenWaitableTimerW( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCWSTR lpTimerName );",
            "name": "OpenWaitableTimerW"
        },
        {
            "signature": "PINIT_ONCE_FN PinitOnceFn; BOOL PinitOnceFn( [in, out] PINIT_ONCE InitOnce, [in, out, optional] PVOID Parameter, [out, optional] PVOID *Context ) {...}",
            "name": "PINIT_ONCE_FN callback"
        },
        {
            "signature": "PTIMERAPCROUTINE Ptimerapcroutine; void Ptimerapcroutine( [in, optional] LPVOID lpArgToCompletionRoutine, [in] DWORD dwTimerLowValue, [in] DWORD dwTimerHighValue ) {...}",
            "name": "PTIMERAPCROUTINE callback"
        },
        {
            "signature": "BOOL ReleaseMutex( [in] HANDLE hMutex );",
            "name": "ReleaseMutex"
        },
        {
            "signature": "BOOL ReleaseSemaphore( [in] HANDLE hSemaphore, [in] LONG lReleaseCount, [out, optional] LPLONG lpPreviousCount );",
            "name": "ReleaseSemaphore"
        },
        {
            "signature": "void ReleaseSRWLockExclusive( [in, out] PSRWLOCK SRWLock );",
            "name": "ReleaseSRWLockExclusive"
        },
        {
            "signature": "void ReleaseSRWLockShared( [in, out] PSRWLOCK SRWLock );",
            "name": "ReleaseSRWLockShared"
        },
        {
            "signature": "BOOL ResetEvent( [in] HANDLE hEvent );",
            "name": "ResetEvent"
        },
        {
            "signature": "DWORD SetCriticalSectionSpinCount( [in, out] LPCRITICAL_SECTION lpCriticalSection, [in] DWORD dwSpinCount );",
            "name": "SetCriticalSectionSpinCount"
        },
        {
            "signature": "BOOL SetEvent( [in] HANDLE hEvent );",
            "name": "SetEvent"
        },
        {
            "signature": "BOOL SetWaitableTimer( [in] HANDLE hTimer, [in] const LARGE_INTEGER *lpDueTime, [in] LONG lPeriod, [in, optional] PTIMERAPCROUTINE pfnCompletionRoutine, [in, optional] LPVOID lpArgToCompletionRoutine, [in] BOOL fResume );",
            "name": "SetWaitableTimer"
        },
        {
            "signature": "BOOL SetWaitableTimerEx( [in] HANDLE hTimer, [in] const LARGE_INTEGER *lpDueTime, [in] LONG lPeriod, [in] PTIMERAPCROUTINE pfnCompletionRoutine, [in] LPVOID lpArgToCompletionRoutine, [in] PREASON_CONTEXT WakeContext, [in] ULONG TolerableDelay );",
            "name": "SetWaitableTimerEx"
        },
        {
            "signature": "DWORD SignalObjectAndWait( [in] HANDLE hObjectToSignal, [in] HANDLE hObjectToWaitOn, [in] DWORD dwMilliseconds, [in] BOOL bAlertable );",
            "name": "SignalObjectAndWait"
        },
        {
            "signature": "void Sleep( [in] DWORD dwMilliseconds );",
            "name": "Sleep"
        },
        {
            "signature": "BOOL SleepConditionVariableCS( [in, out] PCONDITION_VARIABLE ConditionVariable, [in, out] PCRITICAL_SECTION CriticalSection, [in] DWORD dwMilliseconds );",
            "name": "SleepConditionVariableCS"
        },
        {
            "signature": "BOOL SleepConditionVariableSRW( [in, out] PCONDITION_VARIABLE ConditionVariable, [in, out] PSRWLOCK SRWLock, [in] DWORD dwMilliseconds, [in] ULONG Flags );",
            "name": "SleepConditionVariableSRW"
        },
        {
            "signature": "DWORD SleepEx( [in] DWORD dwMilliseconds, [in] BOOL bAlertable );",
            "name": "SleepEx"
        },
        {
            "signature": "BOOLEAN TryAcquireSRWLockExclusive( [in, out] PSRWLOCK SRWLock );",
            "name": "TryAcquireSRWLockExclusive"
        },
        {
            "signature": "BOOLEAN TryAcquireSRWLockShared( [in, out] PSRWLOCK SRWLock );",
            "name": "TryAcquireSRWLockShared"
        },
        {
            "signature": "BOOL TryEnterCriticalSection( [in, out] LPCRITICAL_SECTION lpCriticalSection );",
            "name": "TryEnterCriticalSection"
        },
        {
            "signature": "DWORD WaitForMultipleObjects( [in] DWORD nCount, [in] const HANDLE *lpHandles, [in] BOOL bWaitAll, [in] DWORD dwMilliseconds );",
            "name": "WaitForMultipleObjects"
        },
        {
            "signature": "DWORD WaitForMultipleObjectsEx( [in] DWORD nCount, [in] const HANDLE *lpHandles, [in] BOOL bWaitAll, [in] DWORD dwMilliseconds, [in] BOOL bAlertable );",
            "name": "WaitForMultipleObjectsEx"
        },
        {
            "signature": "DWORD WaitForSingleObject( [in] HANDLE hHandle, [in] DWORD dwMilliseconds );",
            "name": "WaitForSingleObject"
        },
        {
            "signature": "DWORD WaitForSingleObjectEx( [in] HANDLE hHandle, [in] DWORD dwMilliseconds, [in] BOOL bAlertable );",
            "name": "WaitForSingleObjectEx"
        },
        {
            "signature": "BOOL WaitOnAddress( [in] volatile VOID *Address, [in] PVOID CompareAddress, [in] SIZE_T AddressSize, [in, optional] DWORD dwMilliseconds );",
            "name": "WaitOnAddress"
        },
        {
            "signature": "void WakeAllConditionVariable( [in, out] PCONDITION_VARIABLE ConditionVariable );",
            "name": "WakeAllConditionVariable"
        },
        {
            "signature": "void WakeByAddressAll( [in] PVOID Address );",
            "name": "WakeByAddressAll"
        },
        {
            "signature": "void WakeByAddressSingle( [in] PVOID Address );",
            "name": "WakeByAddressSingle"
        },
        {
            "signature": "void WakeConditionVariable( [in, out] PCONDITION_VARIABLE ConditionVariable );",
            "name": "WakeConditionVariable"
        }
    ],
    "Syncmgr.h": [
        {
            "signature": "void FreeConfirmConflictItem( [in, out] CONFIRM_CONFLICT_ITEM *pcci );",
            "name": "FreeConfirmConflictItem"
        }
    ],
    "Syncregistration.h": [],
    "Sysinfoapi.h": [
        {
            "signature": "UINT EnumSystemFirmwareTables( [in] DWORD FirmwareTableProviderSignature, [out] PVOID pFirmwareTableEnumBuffer, [in] DWORD BufferSize );",
            "name": "EnumSystemFirmwareTables"
        },
        {
            "signature": "BOOL GetComputerNameExA( [in] COMPUTER_NAME_FORMAT NameType, [out] LPSTR lpBuffer, [in, out] LPDWORD nSize );",
            "name": "GetComputerNameExA"
        },
        {
            "signature": "BOOL GetComputerNameExW( [in] COMPUTER_NAME_FORMAT NameType, [out] LPWSTR lpBuffer, [in, out] LPDWORD nSize );",
            "name": "GetComputerNameExW"
        },
        {
            "signature": "HRESULT GetIntegratedDisplaySize( [out] double *sizeInInches );",
            "name": "GetIntegratedDisplaySize"
        },
        {
            "signature": "void GetLocalTime( [out] LPSYSTEMTIME lpSystemTime );",
            "name": "GetLocalTime"
        },
        {
            "signature": "BOOL GetLogicalProcessorInformation( [out] PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, [in, out] PDWORD ReturnedLength );",
            "name": "GetLogicalProcessorInformation"
        },
        {
            "signature": "BOOL GetLogicalProcessorInformationEx( [in] LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, [out, optional] PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, [in, out] PDWORD ReturnedLength );",
            "name": "GetLogicalProcessorInformationEx"
        },
        {
            "signature": "void GetNativeSystemInfo( [out] LPSYSTEM_INFO lpSystemInfo );",
            "name": "GetNativeSystemInfo"
        },
        {
            "signature": "BOOL GetPhysicallyInstalledSystemMemory( [out] PULONGLONG TotalMemoryInKilobytes );",
            "name": "GetPhysicallyInstalledSystemMemory"
        },
        {
            "signature": "BOOL GetProcessorSystemCycleTime( [in] USHORT Group, [out] PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer, [in, out] PDWORD ReturnedLength );",
            "name": "GetProcessorSystemCycleTime"
        },
        {
            "signature": "BOOL GetProductInfo( [in] DWORD dwOSMajorVersion, [in] DWORD dwOSMinorVersion, [in] DWORD dwSpMajorVersion, [in] DWORD dwSpMinorVersion, [out] PDWORD pdwReturnedProductType );",
            "name": "GetProductInfo"
        },
        {
            "signature": "UINT GetSystemDirectoryA( [out] LPSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemDirectoryA"
        },
        {
            "signature": "UINT GetSystemDirectoryW( [out] LPWSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemDirectoryW"
        },
        {
            "signature": "UINT GetSystemFirmwareTable( [in] DWORD FirmwareTableProviderSignature, [in] DWORD FirmwareTableID, [out] PVOID pFirmwareTableBuffer, [in] DWORD BufferSize );",
            "name": "GetSystemFirmwareTable"
        },
        {
            "signature": "void GetSystemInfo( [out] LPSYSTEM_INFO lpSystemInfo );",
            "name": "GetSystemInfo"
        },
        {
            "signature": "void GetSystemTime( [out] LPSYSTEMTIME lpSystemTime );",
            "name": "GetSystemTime"
        },
        {
            "signature": "BOOL GetSystemTimeAdjustment( [out] PDWORD lpTimeAdjustment, [out] PDWORD lpTimeIncrement, [out] PBOOL lpTimeAdjustmentDisabled );",
            "name": "GetSystemTimeAdjustment"
        },
        {
            "signature": "BOOL GetSystemTimeAdjustmentPrecise( [out] PDWORD64 lpTimeAdjustment, [out] PDWORD64 lpTimeIncrement, [out] PBOOL lpTimeAdjustmentDisabled );",
            "name": "GetSystemTimeAdjustmentPrecise"
        },
        {
            "signature": "void GetSystemTimeAsFileTime( [out] LPFILETIME lpSystemTimeAsFileTime );",
            "name": "GetSystemTimeAsFileTime"
        },
        {
            "signature": "void GetSystemTimePreciseAsFileTime( [out] LPFILETIME lpSystemTimeAsFileTime );",
            "name": "GetSystemTimePreciseAsFileTime"
        },
        {
            "signature": "UINT GetSystemWindowsDirectoryA( [out] LPSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemWindowsDirectoryA"
        },
        {
            "signature": "UINT GetSystemWindowsDirectoryW( [out] LPWSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemWindowsDirectoryW"
        },
        {
            "signature": "DWORD GetTickCount();",
            "name": "GetTickCount"
        },
        {
            "signature": "ULONGLONG GetTickCount64();",
            "name": "GetTickCount64"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE DWORD GetVersion();",
            "name": "GetVersion"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE BOOL GetVersionExA( [in, out] LPOSVERSIONINFOA lpVersionInformation );",
            "name": "GetVersionExA"
        },
        {
            "signature": "NOT_BUILD_WINDOWS_DEPRECATE BOOL GetVersionExW( [in, out] LPOSVERSIONINFOW lpVersionInformation );",
            "name": "GetVersionExW"
        },
        {
            "signature": "UINT GetWindowsDirectoryA( [out] LPSTR lpBuffer, [in] UINT uSize );",
            "name": "GetWindowsDirectoryA"
        },
        {
            "signature": "UINT GetWindowsDirectoryW( [out] LPWSTR lpBuffer, [in] UINT uSize );",
            "name": "GetWindowsDirectoryW"
        },
        {
            "signature": "BOOL GlobalMemoryStatusEx( [in, out] LPMEMORYSTATUSEX lpBuffer );",
            "name": "GlobalMemoryStatusEx"
        },
        {
            "signature": "BOOL InstallELAMCertificateInfo( [in] HANDLE ELAMFile );",
            "name": "InstallELAMCertificateInfo"
        },
        {
            "signature": "BOOL IsUserCetAvailableInEnvironment( DWORD UserCetEnvironment );",
            "name": "IsUserCetAvailableInEnvironment"
        },
        {
            "signature": "BOOL SetComputerNameA( [in] LPCSTR lpComputerName );",
            "name": "SetComputerNameA"
        },
        {
            "signature": "BOOL SetComputerNameExA( [in] COMPUTER_NAME_FORMAT NameType, [in] LPCSTR lpBuffer );",
            "name": "SetComputerNameExA"
        },
        {
            "signature": "BOOL SetComputerNameExW( [in] COMPUTER_NAME_FORMAT NameType, [in] LPCWSTR lpBuffer );",
            "name": "SetComputerNameExW"
        },
        {
            "signature": "BOOL SetComputerNameW( [in] LPCWSTR lpComputerName );",
            "name": "SetComputerNameW"
        },
        {
            "signature": "BOOL SetLocalTime( [in] const SYSTEMTIME *lpSystemTime );",
            "name": "SetLocalTime"
        },
        {
            "signature": "BOOL SetSystemTime( [in] const SYSTEMTIME *lpSystemTime );",
            "name": "SetSystemTime"
        },
        {
            "signature": "BOOL SetSystemTimeAdjustment( [in] DWORD dwTimeAdjustment, [in] BOOL bTimeAdjustmentDisabled );",
            "name": "SetSystemTimeAdjustment"
        },
        {
            "signature": "BOOL SetSystemTimeAdjustmentPrecise( [in] DWORD64 dwTimeAdjustment, [in] BOOL bTimeAdjustmentDisabled );",
            "name": "SetSystemTimeAdjustmentPrecise"
        }
    ],
    "Systemmediatransportcontrolsinterop.h": [],
    "Systemtopologyapi.h": [
        {
            "signature": "BOOL GetNumaHighestNodeNumber( [out] PULONG HighestNodeNumber );",
            "name": "GetNumaHighestNodeNumber"
        },
        {
            "signature": "BOOL GetNumaNodeProcessorMask2( USHORT NodeNumber, PGROUP_AFFINITY ProcessorMasks, USHORT ProcessorMaskCount, PUSHORT RequiredMaskCount );",
            "name": "GetNumaNodeProcessorMask2"
        },
        {
            "signature": "BOOL GetNumaNodeProcessorMaskEx( [in] USHORT Node, [out] PGROUP_AFFINITY ProcessorMask );",
            "name": "GetNumaNodeProcessorMaskEx"
        },
        {
            "signature": "BOOL GetNumaProximityNodeEx( [in] ULONG ProximityId, [out] PUSHORT NodeNumber );",
            "name": "GetNumaProximityNodeEx"
        }
    ],
    "T2embapi.h": [
        {
            "signature": "LONG TTCharToUnicode( [in] HDC hDC, [in] UCHAR *pucCharCodes, [in] ULONG ulCharCodeSize, [out] USHORT *pusShortCodes, [in] ULONG ulShortCodeSize, [in] ULONG ulFlags );",
            "name": "TTCharToUnicode"
        },
        {
            "signature": "LONG TTDeleteEmbeddedFont( [in] HANDLE hFontReference, [in] ULONG ulFlags, [out] ULONG *pulStatus );",
            "name": "TTDeleteEmbeddedFont"
        },
        {
            "signature": "LONG TTEmbedFont( [in] HDC hDC, [in] ULONG ulFlags, [in] ULONG ulCharSet, [out] ULONG *pulPrivStatus, [out] ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, [in] LPVOID lpvWriteStream, [in] USHORT *pusCharCodeSet, [in] USHORT usCharCodeCount, [in] USHORT usLanguage, [in, optional] TTEMBEDINFO *pTTEmbedInfo );",
            "name": "TTEmbedFont"
        },
        {
            "signature": "LONG TTEmbedFontEx( [in] HDC hDC, [in] ULONG ulFlags, [in] ULONG ulCharSet, [out] ULONG *pulPrivStatus, [out] ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, [in] LPVOID lpvWriteStream, [in] ULONG *pulCharCodeSet, [in] USHORT usCharCodeCount, [in] USHORT usLanguage, [in, optional] TTEMBEDINFO *pTTEmbedInfo );",
            "name": "TTEmbedFontEx"
        },
        {
            "signature": "LONG TTEmbedFontFromFileA( [in] HDC hDC, [in] LPCSTR szFontFileName, [in] USHORT usTTCIndex, [in] ULONG ulFlags, [in] ULONG ulCharSet, [out] ULONG *pulPrivStatus, [out] ULONG *pulStatus, WRITEEMBEDPROC lpfnWriteToStream, [in] LPVOID lpvWriteStream, [in] USHORT *pusCharCodeSet, [in] USHORT usCharCodeCount, [in] USHORT usLanguage, [in, optional] TTEMBEDINFO *pTTEmbedInfo );",
            "name": "TTEmbedFontFromFileA"
        },
        {
            "signature": "LONG TTEnableEmbeddingForFacename( [in] LPCSTR lpszFacename, [in] BOOL bEnable );",
            "name": "TTEnableEmbeddingForFacename"
        },
        {
            "signature": "LONG TTGetEmbeddedFontInfo( [in] ULONG ulFlags, [out] ULONG *pulPrivStatus, [in] ULONG ulPrivs, [out] ULONG *pulStatus, READEMBEDPROC lpfnReadFromStream, [in] LPVOID lpvReadStream, [in] TTLOADINFO *pTTLoadInfo );",
            "name": "TTGetEmbeddedFontInfo"
        },
        {
            "signature": "LONG TTGetEmbeddingType( [in] HDC hDC, [in] ULONG *pulEmbedType );",
            "name": "TTGetEmbeddingType"
        },
        {
            "signature": "LONG TTGetNewFontName( [in] HANDLE *phFontReference, [out] LPWSTR wzWinFamilyName, [in] LONG cchMaxWinName, [out] LPSTR szMacFamilyName, [in] LONG cchMaxMacName );",
            "name": "TTGetNewFontName"
        },
        {
            "signature": "LONG TTIsEmbeddingEnabled( [in] HDC hDC, [out] BOOL *pbEnabled );",
            "name": "TTIsEmbeddingEnabled"
        },
        {
            "signature": "LONG TTIsEmbeddingEnabledForFacename( [in] LPCSTR lpszFacename, [out] BOOL *pbEnabled );",
            "name": "TTIsEmbeddingEnabledForFacename"
        },
        {
            "signature": "LONG TTLoadEmbeddedFont( [out] HANDLE *phFontReference, [in] ULONG ulFlags, [out] ULONG *pulPrivStatus, [in] ULONG ulPrivs, [out] ULONG *pulStatus, [in] READEMBEDPROC lpfnReadFromStream, [in] LPVOID lpvReadStream, [in, optional] LPWSTR szWinFamilyName, [in, optional] LPSTR szMacFamilyName, [in, optional] TTLOADINFO *pTTLoadInfo );",
            "name": "TTLoadEmbeddedFont"
        },
        {
            "signature": "LONG TTRunValidationTests( [in] HDC hDC, [in] TTVALIDATIONTESTSPARAMS *pTestParam );",
            "name": "TTRunValidationTests"
        },
        {
            "signature": "LONG TTRunValidationTestsEx( [in] HDC hDC, [in] TTVALIDATIONTESTSPARAMSEX *pTestParam );",
            "name": "TTRunValidationTestsEx"
        }
    ],
    "Tabflicks.h": [],
    "Tapi.h": [
        {
            "signature": "LONG lineAccept( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "lineAccept"
        },
        {
            "signature": "LONG lineAddProvider( LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );",
            "name": "lineAddProvider"
        },
        {
            "signature": "LONG lineAddProviderA( LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );",
            "name": "lineAddProviderA"
        },
        {
            "signature": "LONG lineAddProviderW( LPCWSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );",
            "name": "lineAddProviderW"
        },
        {
            "signature": "LONG lineAddToConference( HCALL hConfCall, HCALL hConsultCall );",
            "name": "lineAddToConference"
        },
        {
            "signature": "LONG lineAgentSpecific( HLINE hLine, DWORD dwAddressID, DWORD dwAgentExtensionIDIndex, LPVOID lpParams, DWORD dwSize );",
            "name": "lineAgentSpecific"
        },
        {
            "signature": "LONG lineAnswer( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "lineAnswer"
        },
        {
            "signature": "LONG lineBlindTransfer( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineBlindTransfer"
        },
        {
            "signature": "LONG lineBlindTransferA( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineBlindTransferA"
        },
        {
            "signature": "LONG lineBlindTransferW( HCALL hCall, LPCWSTR lpszDestAddressW, DWORD dwCountryCode );",
            "name": "lineBlindTransferW"
        },
        {
            "signature": "LINECALLBACK Linecallback; void Linecallback( DWORD hDevice, DWORD dwMessage, DWORD_PTR dwInstance, DWORD_PTR dwParam1, DWORD_PTR dwParam2, DWORD_PTR dwParam3 ) {...}",
            "name": "LINECALLBACK callback"
        },
        {
            "signature": "LONG lineClose( HLINE hLine );",
            "name": "lineClose"
        },
        {
            "signature": "LONG lineCompleteCall( HCALL hCall, LPDWORD lpdwCompletionID, DWORD dwCompletionMode, DWORD dwMessageID );",
            "name": "lineCompleteCall"
        },
        {
            "signature": "LONG lineCompleteTransfer( HCALL hCall, HCALL hConsultCall, LPHCALL lphConfCall, DWORD dwTransferMode );",
            "name": "lineCompleteTransfer"
        },
        {
            "signature": "LONG lineConfigDialog( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "lineConfigDialog"
        },
        {
            "signature": "LONG lineConfigDialogA( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "lineConfigDialogA"
        },
        {
            "signature": "LONG lineConfigDialogEdit( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );",
            "name": "lineConfigDialogEdit"
        },
        {
            "signature": "LONG lineConfigDialogEditA( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );",
            "name": "lineConfigDialogEditA"
        },
        {
            "signature": "LONG lineConfigDialogEditW( DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );",
            "name": "lineConfigDialogEditW"
        },
        {
            "signature": "LONG lineConfigDialogW( DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass );",
            "name": "lineConfigDialogW"
        },
        {
            "signature": "LONG lineConfigProvider( HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "lineConfigProvider"
        },
        {
            "signature": "LONG lineCreateAgentA( HLINE hLine, LPCSTR lpszAgentID, LPCSTR lpszAgentPIN, LPHAGENT lphAgent );",
            "name": "lineCreateAgentA"
        },
        {
            "signature": "LONG lineCreateAgentSessionA( HLINE hLine, HAGENT hAgent, LPCSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession );",
            "name": "lineCreateAgentSessionA"
        },
        {
            "signature": "LONG lineCreateAgentSessionW( HLINE hLine, HAGENT hAgent, LPCWSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession );",
            "name": "lineCreateAgentSessionW"
        },
        {
            "signature": "LONG lineCreateAgentW( HLINE hLine, LPCWSTR lpszAgentID, LPCWSTR lpszAgentPIN, LPHAGENT lphAgent );",
            "name": "lineCreateAgentW"
        },
        {
            "signature": "LONG lineDeallocateCall( HCALL hCall );",
            "name": "lineDeallocateCall"
        },
        {
            "signature": "LONG lineDevSpecific( HLINE hLine, DWORD dwAddressID, HCALL hCall, LPVOID lpParams, DWORD dwSize );",
            "name": "lineDevSpecific"
        },
        {
            "signature": "LONG lineDevSpecificFeature( HLINE hLine, DWORD dwFeature, LPVOID lpParams, DWORD dwSize );",
            "name": "lineDevSpecificFeature"
        },
        {
            "signature": "LONG lineDial( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineDial"
        },
        {
            "signature": "LONG lineDialA( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineDialA"
        },
        {
            "signature": "LONG lineDialW( HCALL hCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineDialW"
        },
        {
            "signature": "LONG lineDrop( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "lineDrop"
        },
        {
            "signature": "LONG lineForward( HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineForward"
        },
        {
            "signature": "LONG lineForwardA( HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineForwardA"
        },
        {
            "signature": "LONG lineForwardW( HLINE hLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineForwardW"
        },
        {
            "signature": "LONG lineGatherDigits( HCALL hCall, DWORD dwDigitModes, LPSTR lpsDigits, DWORD dwNumDigits, LPCSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout );",
            "name": "lineGatherDigits"
        },
        {
            "signature": "LONG lineGatherDigitsA( HCALL hCall, DWORD dwDigitModes, LPSTR lpsDigits, DWORD dwNumDigits, LPCSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout );",
            "name": "lineGatherDigitsA"
        },
        {
            "signature": "LONG lineGatherDigitsW( HCALL hCall, DWORD dwDigitModes, LPWSTR lpsDigits, DWORD dwNumDigits, LPCWSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout );",
            "name": "lineGatherDigitsW"
        },
        {
            "signature": "LONG lineGenerateDigits( HCALL hCall, DWORD dwDigitMode, LPCSTR lpszDigits, DWORD dwDuration );",
            "name": "lineGenerateDigits"
        },
        {
            "signature": "LONG lineGenerateDigitsA( HCALL hCall, DWORD dwDigitMode, LPCSTR lpszDigits, DWORD dwDuration );",
            "name": "lineGenerateDigitsA"
        },
        {
            "signature": "LONG lineGenerateDigitsW( HCALL hCall, DWORD dwDigitMode, LPCWSTR lpszDigits, DWORD dwDuration );",
            "name": "lineGenerateDigitsW"
        },
        {
            "signature": "LONG lineGenerateTone( HCALL hCall, DWORD dwToneMode, DWORD dwDuration, DWORD dwNumTones, LPLINEGENERATETONE const lpTones );",
            "name": "lineGenerateTone"
        },
        {
            "signature": "LONG lineGetAddressCaps( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps );",
            "name": "lineGetAddressCaps"
        },
        {
            "signature": "LONG lineGetAddressCapsA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps );",
            "name": "lineGetAddressCapsA"
        },
        {
            "signature": "LONG lineGetAddressCapsW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps );",
            "name": "lineGetAddressCapsW"
        },
        {
            "signature": "LONG lineGetAddressID( HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCSTR lpsAddress, DWORD dwSize );",
            "name": "lineGetAddressID"
        },
        {
            "signature": "LONG lineGetAddressIDA( HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCSTR lpsAddress, DWORD dwSize );",
            "name": "lineGetAddressIDA"
        },
        {
            "signature": "LONG lineGetAddressIDW( HLINE hLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCWSTR lpsAddress, DWORD dwSize );",
            "name": "lineGetAddressIDW"
        },
        {
            "signature": "LONG lineGetAddressStatus( HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus );",
            "name": "lineGetAddressStatus"
        },
        {
            "signature": "LONG lineGetAddressStatusA( HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus );",
            "name": "lineGetAddressStatusA"
        },
        {
            "signature": "LONG lineGetAddressStatusW( HLINE hLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus );",
            "name": "lineGetAddressStatusW"
        },
        {
            "signature": "LONG lineGetAgentActivityListA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList );",
            "name": "lineGetAgentActivityListA"
        },
        {
            "signature": "LONG lineGetAgentActivityListW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList );",
            "name": "lineGetAgentActivityListW"
        },
        {
            "signature": "LONG lineGetAgentCapsA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps );",
            "name": "lineGetAgentCapsA"
        },
        {
            "signature": "LONG lineGetAgentCapsW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps );",
            "name": "lineGetAgentCapsW"
        },
        {
            "signature": "LONG lineGetAgentGroupListA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );",
            "name": "lineGetAgentGroupListA"
        },
        {
            "signature": "LONG lineGetAgentGroupListW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );",
            "name": "lineGetAgentGroupListW"
        },
        {
            "signature": "LONG lineGetAgentInfo( HLINE hLine, HAGENT hAgent, LPLINEAGENTINFO lpAgentInfo );",
            "name": "lineGetAgentInfo"
        },
        {
            "signature": "LONG lineGetAgentSessionInfo( HLINE hLine, HAGENTSESSION hAgentSession, LPLINEAGENTSESSIONINFO lpAgentSessionInfo );",
            "name": "lineGetAgentSessionInfo"
        },
        {
            "signature": "LONG lineGetAgentSessionList( HLINE hLine, HAGENT hAgent, LPLINEAGENTSESSIONLIST lpAgentSessionList );",
            "name": "lineGetAgentSessionList"
        },
        {
            "signature": "LONG lineGetAgentStatusA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus );",
            "name": "lineGetAgentStatusA"
        },
        {
            "signature": "LONG lineGetAgentStatusW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus );",
            "name": "lineGetAgentStatusW"
        },
        {
            "signature": "LONG lineGetAppPriority( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );",
            "name": "lineGetAppPriority"
        },
        {
            "signature": "LONG lineGetAppPriorityA( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );",
            "name": "lineGetAppPriorityA"
        },
        {
            "signature": "LONG lineGetAppPriorityW( LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );",
            "name": "lineGetAppPriorityW"
        },
        {
            "signature": "LONG lineGetCallInfo( HCALL hCall, LPLINECALLINFO lpCallInfo );",
            "name": "lineGetCallInfo"
        },
        {
            "signature": "LONG lineGetCallInfoA( HCALL hCall, LPLINECALLINFO lpCallInfo );",
            "name": "lineGetCallInfoA"
        },
        {
            "signature": "LONG lineGetCallInfoW( HCALL hCall, LPLINECALLINFO lpCallInfo );",
            "name": "lineGetCallInfoW"
        },
        {
            "signature": "LONG lineGetCallStatus( HCALL hCall, LPLINECALLSTATUS lpCallStatus );",
            "name": "lineGetCallStatus"
        },
        {
            "signature": "LONG lineGetConfRelatedCalls( HCALL hCall, LPLINECALLLIST lpCallList );",
            "name": "lineGetConfRelatedCalls"
        },
        {
            "signature": "LONG lineGetCountry( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );",
            "name": "lineGetCountry"
        },
        {
            "signature": "LONG lineGetCountryA( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );",
            "name": "lineGetCountryA"
        },
        {
            "signature": "LONG lineGetCountryW( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );",
            "name": "lineGetCountryW"
        },
        {
            "signature": "LONG lineGetDevCaps( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );",
            "name": "lineGetDevCaps"
        },
        {
            "signature": "LONG lineGetDevCapsA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );",
            "name": "lineGetDevCapsA"
        },
        {
            "signature": "LONG lineGetDevCapsW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );",
            "name": "lineGetDevCapsW"
        },
        {
            "signature": "LONG lineGetDevConfig( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass );",
            "name": "lineGetDevConfig"
        },
        {
            "signature": "LONG lineGetDevConfigA( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass );",
            "name": "lineGetDevConfigA"
        },
        {
            "signature": "LONG lineGetDevConfigW( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCWSTR lpszDeviceClass );",
            "name": "lineGetDevConfigW"
        },
        {
            "signature": "LONG lineGetGroupListA( HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList );",
            "name": "lineGetGroupListA"
        },
        {
            "signature": "LONG lineGetGroupListW( HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList );",
            "name": "lineGetGroupListW"
        },
        {
            "signature": "LONG lineGetIcon( DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "lineGetIcon"
        },
        {
            "signature": "LONG lineGetIconA( DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "lineGetIconA"
        },
        {
            "signature": "LONG lineGetIconW( DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "lineGetIconW"
        },
        {
            "signature": "LONG lineGetID( HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass );",
            "name": "lineGetID"
        },
        {
            "signature": "LONG lineGetIDA( HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass );",
            "name": "lineGetIDA"
        },
        {
            "signature": "LONG lineGetIDW( HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass );",
            "name": "lineGetIDW"
        },
        {
            "signature": "LONG lineGetLineDevStatus( HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus );",
            "name": "lineGetLineDevStatus"
        },
        {
            "signature": "LONG lineGetLineDevStatusA( HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus );",
            "name": "lineGetLineDevStatusA"
        },
        {
            "signature": "LONG lineGetLineDevStatusW( HLINE hLine, LPLINEDEVSTATUS lpLineDevStatus );",
            "name": "lineGetLineDevStatusW"
        },
        {
            "signature": "LONG lineGetMessage( HLINEAPP hLineApp, LPLINEMESSAGE lpMessage, DWORD dwTimeout );",
            "name": "lineGetMessage"
        },
        {
            "signature": "LONG lineGetNewCalls( HLINE hLine, DWORD dwAddressID, DWORD dwSelect, LPLINECALLLIST lpCallList );",
            "name": "lineGetNewCalls"
        },
        {
            "signature": "LONG lineGetNumRings( HLINE hLine, DWORD dwAddressID, LPDWORD lpdwNumRings );",
            "name": "lineGetNumRings"
        },
        {
            "signature": "LONG lineGetProviderList( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );",
            "name": "lineGetProviderList"
        },
        {
            "signature": "LONG lineGetProviderListA( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );",
            "name": "lineGetProviderListA"
        },
        {
            "signature": "LONG lineGetProviderListW( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );",
            "name": "lineGetProviderListW"
        },
        {
            "signature": "LONG lineGetProxyStatus( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAppAPIVersion, LPLINEPROXYREQUESTLIST lpLineProxyReqestList );",
            "name": "lineGetProxyStatus"
        },
        {
            "signature": "LONG lineGetQueueInfo( HLINE hLine, DWORD dwQueueID, LPLINEQUEUEINFO lpLineQueueInfo );",
            "name": "lineGetQueueInfo"
        },
        {
            "signature": "LONG lineGetQueueListA( HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList );",
            "name": "lineGetQueueListA"
        },
        {
            "signature": "LONG lineGetQueueListW( HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList );",
            "name": "lineGetQueueListW"
        },
        {
            "signature": "LONG lineGetRequest( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );",
            "name": "lineGetRequest"
        },
        {
            "signature": "LONG lineGetRequestA( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );",
            "name": "lineGetRequestA"
        },
        {
            "signature": "LONG lineGetRequestW( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );",
            "name": "lineGetRequestW"
        },
        {
            "signature": "LONG lineGetStatusMessages( HLINE hLine, LPDWORD lpdwLineStates, LPDWORD lpdwAddressStates );",
            "name": "lineGetStatusMessages"
        },
        {
            "signature": "LONG lineGetTranslateCaps( HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps );",
            "name": "lineGetTranslateCaps"
        },
        {
            "signature": "LONG lineGetTranslateCapsA( HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps );",
            "name": "lineGetTranslateCapsA"
        },
        {
            "signature": "LONG lineGetTranslateCapsW( HLINEAPP hLineApp, DWORD dwAPIVersion, LPLINETRANSLATECAPS lpTranslateCaps );",
            "name": "lineGetTranslateCapsW"
        },
        {
            "signature": "LONG lineHandoff( HCALL hCall, LPCSTR lpszFileName, DWORD dwMediaMode );",
            "name": "lineHandoff"
        },
        {
            "signature": "LONG lineHandoffA( HCALL hCall, LPCSTR lpszFileName, DWORD dwMediaMode );",
            "name": "lineHandoffA"
        },
        {
            "signature": "LONG lineHandoffW( HCALL hCall, LPCWSTR lpszFileName, DWORD dwMediaMode );",
            "name": "lineHandoffW"
        },
        {
            "signature": "LONG lineHold( HCALL hCall );",
            "name": "lineHold"
        },
        {
            "signature": "LONG lineInitialize( LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCSTR lpszAppName, LPDWORD lpdwNumDevs );",
            "name": "lineInitialize"
        },
        {
            "signature": "LONG lineInitializeExA( LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams );",
            "name": "lineInitializeExA"
        },
        {
            "signature": "LONG lineInitializeExW( LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams );",
            "name": "lineInitializeExW"
        },
        {
            "signature": "LONG lineMakeCall( HLINE hLine, LPHCALL lphCall, LPCSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineMakeCall"
        },
        {
            "signature": "LONG lineMakeCallA( HLINE hLine, LPHCALL lphCall, LPCSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineMakeCallA"
        },
        {
            "signature": "LONG lineMakeCallW( HLINE hLine, LPHCALL lphCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineMakeCallW"
        },
        {
            "signature": "LONG lineMonitorDigits( HCALL hCall, DWORD dwDigitModes );",
            "name": "lineMonitorDigits"
        },
        {
            "signature": "LONG lineMonitorMedia( HCALL hCall, DWORD dwMediaModes );",
            "name": "lineMonitorMedia"
        },
        {
            "signature": "LONG lineMonitorTones( HCALL hCall, LPLINEMONITORTONE const lpToneList, DWORD dwNumEntries );",
            "name": "lineMonitorTones"
        },
        {
            "signature": "LONG lineNegotiateAPIVersion( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPILowVersion, DWORD dwAPIHighVersion, LPDWORD lpdwAPIVersion, LPLINEEXTENSIONID lpExtensionID );",
            "name": "lineNegotiateAPIVersion"
        },
        {
            "signature": "LONG lineNegotiateExtVersion( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtLowVersion, DWORD dwExtHighVersion, LPDWORD lpdwExtVersion );",
            "name": "lineNegotiateExtVersion"
        },
        {
            "signature": "LONG lineOpen( HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineOpen"
        },
        {
            "signature": "LONG lineOpenA( HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineOpenA"
        },
        {
            "signature": "LONG lineOpenW( HLINEAPP hLineApp, DWORD dwDeviceID, LPHLINE lphLine, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivileges, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineOpenW"
        },
        {
            "signature": "LONG linePark( HCALL hCall, DWORD dwParkMode, LPCSTR lpszDirAddress, LPVARSTRING lpNonDirAddress );",
            "name": "linePark"
        },
        {
            "signature": "LONG lineParkA( HCALL hCall, DWORD dwParkMode, LPCSTR lpszDirAddress, LPVARSTRING lpNonDirAddress );",
            "name": "lineParkA"
        },
        {
            "signature": "LONG lineParkW( HCALL hCall, DWORD dwParkMode, LPCWSTR lpszDirAddress, LPVARSTRING lpNonDirAddress );",
            "name": "lineParkW"
        },
        {
            "signature": "LONG linePickup( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress, LPCSTR lpszGroupID );",
            "name": "linePickup"
        },
        {
            "signature": "LONG linePickupA( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress, LPCSTR lpszGroupID );",
            "name": "linePickupA"
        },
        {
            "signature": "LONG linePickupW( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCWSTR lpszDestAddress, LPCWSTR lpszGroupID );",
            "name": "linePickupW"
        },
        {
            "signature": "LONG linePrepareAddToConference( HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "linePrepareAddToConference"
        },
        {
            "signature": "LONG linePrepareAddToConferenceA( HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "linePrepareAddToConferenceA"
        },
        {
            "signature": "LONG linePrepareAddToConferenceW( HCALL hConfCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "linePrepareAddToConferenceW"
        },
        {
            "signature": "LONG lineProxyMessage( HLINE hLine, HCALL hCall, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3 );",
            "name": "lineProxyMessage"
        },
        {
            "signature": "LONG lineProxyResponse( HLINE hLine, LPLINEPROXYREQUEST lpProxyRequest, DWORD dwResult );",
            "name": "lineProxyResponse"
        },
        {
            "signature": "LONG lineRedirect( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineRedirect"
        },
        {
            "signature": "LONG lineRedirectA( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineRedirectA"
        },
        {
            "signature": "LONG lineRedirectW( HCALL hCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "lineRedirectW"
        },
        {
            "signature": "LONG lineRegisterRequestRecipient( HLINEAPP hLineApp, DWORD dwRegistrationInstance, DWORD dwRequestMode, DWORD bEnable );",
            "name": "lineRegisterRequestRecipient"
        },
        {
            "signature": "LONG lineReleaseUserUserInfo( HCALL hCall );",
            "name": "lineReleaseUserUserInfo"
        },
        {
            "signature": "LONG lineRemoveFromConference( HCALL hCall );",
            "name": "lineRemoveFromConference"
        },
        {
            "signature": "LONG lineRemoveProvider( DWORD dwPermanentProviderID, HWND hwndOwner );",
            "name": "lineRemoveProvider"
        },
        {
            "signature": "LONG lineSecureCall( HCALL hCall );",
            "name": "lineSecureCall"
        },
        {
            "signature": "LONG lineSendUserUserInfo( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "lineSendUserUserInfo"
        },
        {
            "signature": "LONG lineSetAgentActivity( HLINE hLine, DWORD dwAddressID, DWORD dwActivityID );",
            "name": "lineSetAgentActivity"
        },
        {
            "signature": "LONG lineSetAgentGroup( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );",
            "name": "lineSetAgentGroup"
        },
        {
            "signature": "LONG lineSetAgentMeasurementPeriod( HLINE hLine, HAGENT hAgent, DWORD dwMeasurementPeriod );",
            "name": "lineSetAgentMeasurementPeriod"
        },
        {
            "signature": "LONG lineSetAgentSessionState( HLINE hLine, HAGENTSESSION hAgentSession, DWORD dwAgentSessionState, DWORD dwNextAgentSessionState );",
            "name": "lineSetAgentSessionState"
        },
        {
            "signature": "LONG lineSetAgentState( HLINE hLine, DWORD dwAddressID, DWORD dwAgentState, DWORD dwNextAgentState );",
            "name": "lineSetAgentState"
        },
        {
            "signature": "LONG lineSetAgentStateEx( HLINE hLine, HAGENT hAgent, DWORD dwAgentState, DWORD dwNextAgentState );",
            "name": "lineSetAgentStateEx"
        },
        {
            "signature": "LONG lineSetAppPriority( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority );",
            "name": "lineSetAppPriority"
        },
        {
            "signature": "LONG lineSetAppPriorityA( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority );",
            "name": "lineSetAppPriorityA"
        },
        {
            "signature": "LONG lineSetAppPriorityW( LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCWSTR lpszExtensionName, DWORD dwPriority );",
            "name": "lineSetAppPriorityW"
        },
        {
            "signature": "LONG lineSetAppSpecific( HCALL hCall, DWORD dwAppSpecific );",
            "name": "lineSetAppSpecific"
        },
        {
            "signature": "LONG lineSetCallData( HCALL hCall, LPVOID lpCallData, DWORD dwSize );",
            "name": "lineSetCallData"
        },
        {
            "signature": "LONG lineSetCallParams( HCALL hCall, DWORD dwBearerMode, DWORD dwMinRate, DWORD dwMaxRate, LPLINEDIALPARAMS const lpDialParams );",
            "name": "lineSetCallParams"
        },
        {
            "signature": "LONG lineSetCallPrivilege( HCALL hCall, DWORD dwCallPrivilege );",
            "name": "lineSetCallPrivilege"
        },
        {
            "signature": "LONG lineSetCallQualityOfService( HCALL hCall, LPVOID lpSendingFlowspec, DWORD dwSendingFlowspecSize, LPVOID lpReceivingFlowspec, DWORD dwReceivingFlowspecSize );",
            "name": "lineSetCallQualityOfService"
        },
        {
            "signature": "LONG lineSetCallTreatment( HCALL hCall, DWORD dwTreatment );",
            "name": "lineSetCallTreatment"
        },
        {
            "signature": "LONG lineSetCurrentLocation( HLINEAPP hLineApp, DWORD dwLocation );",
            "name": "lineSetCurrentLocation"
        },
        {
            "signature": "LONG lineSetDevConfig( DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCSTR lpszDeviceClass );",
            "name": "lineSetDevConfig"
        },
        {
            "signature": "LONG lineSetDevConfigA( DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCSTR lpszDeviceClass );",
            "name": "lineSetDevConfigA"
        },
        {
            "signature": "LONG lineSetDevConfigW( DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCWSTR lpszDeviceClass );",
            "name": "lineSetDevConfigW"
        },
        {
            "signature": "LONG lineSetLineDevStatus( HLINE hLine, DWORD dwStatusToChange, DWORD fStatus );",
            "name": "lineSetLineDevStatus"
        },
        {
            "signature": "LONG lineSetMediaControl( HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, LPLINEMEDIACONTROLDIGIT const lpDigitList, DWORD dwDigitNumEntries, LPLINEMEDIACONTROLMEDIA const lpMediaList, DWORD dwMediaNumEntries, LPLINEMEDIACONTROLTONE const lpToneList, DWORD dwToneNumEntries, LPLINEMEDIACONTROLCALLSTATE const lpCallStateList, DWORD dwCallStateNumEntries );",
            "name": "lineSetMediaControl"
        },
        {
            "signature": "LONG lineSetMediaMode( HCALL hCall, DWORD dwMediaModes );",
            "name": "lineSetMediaMode"
        },
        {
            "signature": "LONG lineSetNumRings( HLINE hLine, DWORD dwAddressID, DWORD dwNumRings );",
            "name": "lineSetNumRings"
        },
        {
            "signature": "LONG lineSetQueueMeasurementPeriod( HLINE hLine, DWORD dwQueueID, DWORD dwMeasurementPeriod );",
            "name": "lineSetQueueMeasurementPeriod"
        },
        {
            "signature": "LONG lineSetStatusMessages( HLINE hLine, DWORD dwLineStates, DWORD dwAddressStates );",
            "name": "lineSetStatusMessages"
        },
        {
            "signature": "LONG lineSetTerminal( HLINE hLine, DWORD dwAddressID, HCALL hCall, DWORD dwSelect, DWORD dwTerminalModes, DWORD dwTerminalID, DWORD bEnable );",
            "name": "lineSetTerminal"
        },
        {
            "signature": "LONG lineSetTollList( HLINEAPP hLineApp, DWORD dwDeviceID, LPCSTR lpszAddressIn, DWORD dwTollListOption );",
            "name": "lineSetTollList"
        },
        {
            "signature": "LONG lineSetTollListA( HLINEAPP hLineApp, DWORD dwDeviceID, LPCSTR lpszAddressIn, DWORD dwTollListOption );",
            "name": "lineSetTollListA"
        },
        {
            "signature": "LONG lineSetTollListW( HLINEAPP hLineApp, DWORD dwDeviceID, LPCWSTR lpszAddressInW, DWORD dwTollListOption );",
            "name": "lineSetTollListW"
        },
        {
            "signature": "LONG lineSetupConference( HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupConference"
        },
        {
            "signature": "LONG lineSetupConferenceA( HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupConferenceA"
        },
        {
            "signature": "LONG lineSetupConferenceW( HCALL hCall, HLINE hLine, LPHCALL lphConfCall, LPHCALL lphConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupConferenceW"
        },
        {
            "signature": "LONG lineSetupTransfer( HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupTransfer"
        },
        {
            "signature": "LONG lineSetupTransferA( HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupTransferA"
        },
        {
            "signature": "LONG lineSetupTransferW( HCALL hCall, LPHCALL lphConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "lineSetupTransferW"
        },
        {
            "signature": "LONG lineShutdown( HLINEAPP hLineApp );",
            "name": "lineShutdown"
        },
        {
            "signature": "LONG lineSwapHold( HCALL hActiveCall, HCALL hHeldCall );",
            "name": "lineSwapHold"
        },
        {
            "signature": "LONG lineTranslateAddress( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput );",
            "name": "lineTranslateAddress"
        },
        {
            "signature": "LONG lineTranslateAddressA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput );",
            "name": "lineTranslateAddressA"
        },
        {
            "signature": "LONG lineTranslateAddressW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, LPCWSTR lpszAddressIn, DWORD dwCard, DWORD dwTranslateOptions, LPLINETRANSLATEOUTPUT lpTranslateOutput );",
            "name": "lineTranslateAddressW"
        },
        {
            "signature": "LONG lineTranslateDialog( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn );",
            "name": "lineTranslateDialog"
        },
        {
            "signature": "LONG lineTranslateDialogA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn );",
            "name": "lineTranslateDialogA"
        },
        {
            "signature": "LONG lineTranslateDialogW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCWSTR lpszAddressIn );",
            "name": "lineTranslateDialogW"
        },
        {
            "signature": "LONG lineUncompleteCall( HLINE hLine, DWORD dwCompletionID );",
            "name": "lineUncompleteCall"
        },
        {
            "signature": "LONG lineUnhold( HCALL hCall );",
            "name": "lineUnhold"
        },
        {
            "signature": "LONG lineUnpark( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress );",
            "name": "lineUnpark"
        },
        {
            "signature": "LONG lineUnparkA( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCSTR lpszDestAddress );",
            "name": "lineUnparkA"
        },
        {
            "signature": "LONG lineUnparkW( HLINE hLine, DWORD dwAddressID, LPHCALL lphCall, LPCWSTR lpszDestAddress );",
            "name": "lineUnparkW"
        },
        {
            "signature": "PHONECALLBACK Phonecallback; void Phonecallback( DWORD hDevice, DWORD dwMessage, DWORD_PTR dwInstance, DWORD_PTR dwParam1, DWORD_PTR dwParam2, DWORD_PTR dwParam3 ) {...}",
            "name": "PHONECALLBACK callback"
        },
        {
            "signature": "LONG phoneClose( HPHONE hPhone );",
            "name": "phoneClose"
        },
        {
            "signature": "LONG phoneConfigDialog( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "phoneConfigDialog"
        },
        {
            "signature": "LONG phoneConfigDialogA( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "phoneConfigDialogA"
        },
        {
            "signature": "LONG phoneConfigDialogW( DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass );",
            "name": "phoneConfigDialogW"
        },
        {
            "signature": "LONG phoneDevSpecific( HPHONE hPhone, LPVOID lpParams, DWORD dwSize );",
            "name": "phoneDevSpecific"
        },
        {
            "signature": "LONG phoneGetButtonInfo( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo );",
            "name": "phoneGetButtonInfo"
        },
        {
            "signature": "LONG phoneGetButtonInfoA( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo );",
            "name": "phoneGetButtonInfoA"
        },
        {
            "signature": "LONG phoneGetButtonInfoW( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo );",
            "name": "phoneGetButtonInfoW"
        },
        {
            "signature": "LONG phoneGetData( HPHONE hPhone, DWORD dwDataID, LPVOID lpData, DWORD dwSize );",
            "name": "phoneGetData"
        },
        {
            "signature": "LONG phoneGetDevCaps( HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps );",
            "name": "phoneGetDevCaps"
        },
        {
            "signature": "LONG phoneGetDevCapsA( HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps );",
            "name": "phoneGetDevCapsA"
        },
        {
            "signature": "LONG phoneGetDevCapsW( HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps );",
            "name": "phoneGetDevCapsW"
        },
        {
            "signature": "LONG phoneGetDisplay( HPHONE hPhone, LPVARSTRING lpDisplay );",
            "name": "phoneGetDisplay"
        },
        {
            "signature": "LONG phoneGetGain( HPHONE hPhone, DWORD dwHookSwitchDev, LPDWORD lpdwGain );",
            "name": "phoneGetGain"
        },
        {
            "signature": "LONG phoneGetHookSwitch( HPHONE hPhone, LPDWORD lpdwHookSwitchDevs );",
            "name": "phoneGetHookSwitch"
        },
        {
            "signature": "LONG phoneGetIcon( DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "phoneGetIcon"
        },
        {
            "signature": "LONG phoneGetIconA( DWORD dwDeviceID, LPCSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "phoneGetIconA"
        },
        {
            "signature": "LONG phoneGetIconW( DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "phoneGetIconW"
        },
        {
            "signature": "LONG phoneGetID( HPHONE hPhone, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass );",
            "name": "phoneGetID"
        },
        {
            "signature": "LONG phoneGetIDA( HPHONE hPhone, LPVARSTRING lpDeviceID, LPCSTR lpszDeviceClass );",
            "name": "phoneGetIDA"
        },
        {
            "signature": "LONG phoneGetIDW( HPHONE hPhone, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass );",
            "name": "phoneGetIDW"
        },
        {
            "signature": "LONG phoneGetLamp( HPHONE hPhone, DWORD dwButtonLampID, LPDWORD lpdwLampMode );",
            "name": "phoneGetLamp"
        },
        {
            "signature": "LONG phoneGetMessage( HPHONEAPP hPhoneApp, LPPHONEMESSAGE lpMessage, DWORD dwTimeout );",
            "name": "phoneGetMessage"
        },
        {
            "signature": "LONG phoneGetRing( HPHONE hPhone, LPDWORD lpdwRingMode, LPDWORD lpdwVolume );",
            "name": "phoneGetRing"
        },
        {
            "signature": "LONG phoneGetStatus( HPHONE hPhone, LPPHONESTATUS lpPhoneStatus );",
            "name": "phoneGetStatus"
        },
        {
            "signature": "LONG phoneGetStatusA( HPHONE hPhone, LPPHONESTATUS lpPhoneStatus );",
            "name": "phoneGetStatusA"
        },
        {
            "signature": "LONG phoneGetStatusMessages( HPHONE hPhone, LPDWORD lpdwPhoneStates, LPDWORD lpdwButtonModes, LPDWORD lpdwButtonStates );",
            "name": "phoneGetStatusMessages"
        },
        {
            "signature": "LONG phoneGetStatusW( HPHONE hPhone, LPPHONESTATUS lpPhoneStatus );",
            "name": "phoneGetStatusW"
        },
        {
            "signature": "LONG phoneGetVolume( HPHONE hPhone, DWORD dwHookSwitchDev, LPDWORD lpdwVolume );",
            "name": "phoneGetVolume"
        },
        {
            "signature": "LONG phoneInitialize( LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCSTR lpszAppName, LPDWORD lpdwNumDevs );",
            "name": "phoneInitialize"
        },
        {
            "signature": "LONG phoneInitializeExA( LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams );",
            "name": "phoneInitializeExA"
        },
        {
            "signature": "LONG phoneInitializeExW( LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams );",
            "name": "phoneInitializeExW"
        },
        {
            "signature": "LONG phoneNegotiateAPIVersion( HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPILowVersion, DWORD dwAPIHighVersion, LPDWORD lpdwAPIVersion, LPPHONEEXTENSIONID lpExtensionID );",
            "name": "phoneNegotiateAPIVersion"
        },
        {
            "signature": "LONG phoneNegotiateExtVersion( HPHONEAPP hPhoneApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtLowVersion, DWORD dwExtHighVersion, LPDWORD lpdwExtVersion );",
            "name": "phoneNegotiateExtVersion"
        },
        {
            "signature": "LONG phoneOpen( HPHONEAPP hPhoneApp, DWORD dwDeviceID, LPHPHONE lphPhone, DWORD dwAPIVersion, DWORD dwExtVersion, DWORD_PTR dwCallbackInstance, DWORD dwPrivilege );",
            "name": "phoneOpen"
        },
        {
            "signature": "LONG phoneSetButtonInfo( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo );",
            "name": "phoneSetButtonInfo"
        },
        {
            "signature": "LONG phoneSetButtonInfoA( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo );",
            "name": "phoneSetButtonInfoA"
        },
        {
            "signature": "LONG phoneSetButtonInfoW( HPHONE hPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo );",
            "name": "phoneSetButtonInfoW"
        },
        {
            "signature": "LONG phoneSetData( HPHONE hPhone, DWORD dwDataID, LPVOID const lpData, DWORD dwSize );",
            "name": "phoneSetData"
        },
        {
            "signature": "LONG phoneSetDisplay( HPHONE hPhone, DWORD dwRow, DWORD dwColumn, LPCSTR lpsDisplay, DWORD dwSize );",
            "name": "phoneSetDisplay"
        },
        {
            "signature": "LONG phoneSetGain( HPHONE hPhone, DWORD dwHookSwitchDev, DWORD dwGain );",
            "name": "phoneSetGain"
        },
        {
            "signature": "LONG phoneSetHookSwitch( HPHONE hPhone, DWORD dwHookSwitchDevs, DWORD dwHookSwitchMode );",
            "name": "phoneSetHookSwitch"
        },
        {
            "signature": "LONG phoneSetLamp( HPHONE hPhone, DWORD dwButtonLampID, DWORD dwLampMode );",
            "name": "phoneSetLamp"
        },
        {
            "signature": "LONG phoneSetRing( HPHONE hPhone, DWORD dwRingMode, DWORD dwVolume );",
            "name": "phoneSetRing"
        },
        {
            "signature": "LONG phoneSetStatusMessages( HPHONE hPhone, DWORD dwPhoneStates, DWORD dwButtonModes, DWORD dwButtonStates );",
            "name": "phoneSetStatusMessages"
        },
        {
            "signature": "LONG phoneSetVolume( HPHONE hPhone, DWORD dwHookSwitchDev, DWORD dwVolume );",
            "name": "phoneSetVolume"
        },
        {
            "signature": "LONG phoneShutdown( HPHONEAPP hPhoneApp );",
            "name": "phoneShutdown"
        },
        {
            "signature": "LONG tapiGetLocationInfo( LPSTR lpszCountryCode, LPSTR lpszCityCode );",
            "name": "tapiGetLocationInfo"
        },
        {
            "signature": "LONG tapiGetLocationInfoA( LPSTR lpszCountryCode, LPSTR lpszCityCode );",
            "name": "tapiGetLocationInfoA"
        },
        {
            "signature": "LONG tapiGetLocationInfoW( LPWSTR lpszCountryCodeW, LPWSTR lpszCityCodeW );",
            "name": "tapiGetLocationInfoW"
        },
        {
            "signature": "LONG tapiRequestDrop( HWND hwnd, WPARAM wRequestID );",
            "name": "tapiRequestDrop"
        },
        {
            "signature": "LONG tapiRequestMakeCall( LPCSTR lpszDestAddress, LPCSTR lpszAppName, LPCSTR lpszCalledParty, LPCSTR lpszComment );",
            "name": "tapiRequestMakeCall"
        },
        {
            "signature": "LONG tapiRequestMakeCallA( LPCSTR lpszDestAddress, LPCSTR lpszAppName, LPCSTR lpszCalledParty, LPCSTR lpszComment );",
            "name": "tapiRequestMakeCallA"
        },
        {
            "signature": "LONG tapiRequestMakeCallW( LPCWSTR lpszDestAddress, LPCWSTR lpszAppName, LPCWSTR lpszCalledParty, LPCWSTR lpszComment );",
            "name": "tapiRequestMakeCallW"
        }
    ],
    "Tapi3.h": [],
    "Tapi3cc.h": [],
    "Tapi3ds.h": [],
    "Tapi3if.h": [],
    "Taskschd.h": [],
    "Tbs.h": [
        {
            "signature": "TBS_RESULT Tbsi_Context_Create( [in] PCTBS_CONTEXT_PARAMS pContextParams, [out] PTBS_HCONTEXT phContext );",
            "name": "Tbsi_Context_Create"
        },
        {
            "signature": "TBS_RESULT Tbsi_Get_OwnerAuth( [in] TBS_HCONTEXT hContext, [in] TBS_OWNERAUTH_TYPE ownerauthType, [out, optional] PBYTE pOutputBuf, [in, out] PUINT32 pOutputBufLen );",
            "name": "Tbsi_Get_OwnerAuth"
        },
        {
            "signature": "TBS_RESULT Tbsi_Get_TCG_Log( [in] TBS_HCONTEXT hContext, [out] PBYTE pOutputBuf, [in, out] PUINT32 pOutputBufLen );",
            "name": "Tbsi_Get_TCG_Log"
        },
        {
            "signature": "TBS_RESULT Tbsi_Get_TCG_Log_Ex( [in] UINT32 logType, [out, optional] PBYTE pbOutput, [in, out] PUINT32 pcbOutput );",
            "name": "Tbsi_Get_TCG_Log_Ex"
        },
        {
            "signature": "TBS_RESULT Tbsi_GetDeviceInfo( [in] UINT32 Size, [out] PVOID Info );",
            "name": "Tbsi_GetDeviceInfo"
        },
        {
            "signature": "TBS_RESULT Tbsi_Physical_Presence_Command( [in] TBS_HCONTEXT hContext, [in] PCBYTE pabInput, [in] UINT32 cbInput, [out] PBYTE pabOutput, [in, out] PUINT32 pcbOutput );",
            "name": "Tbsi_Physical_Presence_Command"
        },
        {
            "signature": "TBS_RESULT Tbsi_Revoke_Attestation();",
            "name": "Tbsi_Revoke_Attestation"
        },
        {
            "signature": "TBS_RESULT Tbsip_Cancel_Commands( [in] TBS_HCONTEXT hContext );",
            "name": "Tbsip_Cancel_Commands"
        },
        {
            "signature": "TBS_RESULT Tbsip_Context_Close( [in] TBS_HCONTEXT hContext );",
            "name": "Tbsip_Context_Close"
        },
        {
            "signature": "TBS_RESULT Tbsip_Submit_Command( [in] TBS_HCONTEXT hContext, [in] TBS_COMMAND_LOCALITY Locality, [in] TBS_COMMAND_PRIORITY Priority, [in] PCBYTE pabCommand, [in] UINT32 cbCommand, [out] PBYTE pabResult, [in, out] PUINT32 pcbResult );",
            "name": "Tbsip_Submit_Command"
        }
    ],
    "Tcpestats.h": [],
    "Tcpioctl.h": [],
    "Tcpmib.h": [],
    "Tdh.h": [
        {
            "signature": "TDHSTATUS TdhAggregatePayloadFilters( ULONG PayloadFilterCount, PVOID *PayloadFilterPtrs, [in, optional] PBOOLEAN EventMatchALLFlags, [out] PEVENT_FILTER_DESCRIPTOR EventFilterDescriptor );",
            "name": "TdhAggregatePayloadFilters"
        },
        {
            "signature": "TDHSTATUS TdhCleanupPayloadEventFilterDescriptor( [in, out] PEVENT_FILTER_DESCRIPTOR EventFilterDescriptor );",
            "name": "TdhCleanupPayloadEventFilterDescriptor"
        },
        {
            "signature": "TDHSTATUS TdhCloseDecodingHandle( [in] TDH_HANDLE Handle );",
            "name": "TdhCloseDecodingHandle"
        },
        {
            "signature": "TDHSTATUS TdhCreatePayloadFilter( [in] LPCGUID ProviderGuid, [in] PCEVENT_DESCRIPTOR EventDescriptor, [in] BOOLEAN EventMatchANY, [in] ULONG PayloadPredicateCount, [in] PPAYLOAD_FILTER_PREDICATE PayloadPredicates, [out] PVOID *PayloadFilter );",
            "name": "TdhCreatePayloadFilter"
        },
        {
            "signature": "TDHSTATUS TdhDeletePayloadFilter( [in, out] PVOID *PayloadFilter );",
            "name": "TdhDeletePayloadFilter"
        },
        {
            "signature": "TDHSTATUS TdhEnumerateManifestProviderEvents( [in] LPGUID ProviderGuid, [out] PPROVIDER_EVENT_INFO Buffer, [in, out] ULONG *BufferSize );",
            "name": "TdhEnumerateManifestProviderEvents"
        },
        {
            "signature": "TDHSTATUS TdhEnumerateProviderFieldInformation( [in] LPGUID pGuid, [in] EVENT_FIELD_TYPE EventFieldType, [out, optional] PPROVIDER_FIELD_INFOARRAY pBuffer, [in, out] ULONG *pBufferSize );",
            "name": "TdhEnumerateProviderFieldInformation"
        },
        {
            "signature": "TDHSTATUS TdhEnumerateProviderFilters( [in] LPGUID Guid, [in] ULONG TdhContextCount, [in, optional] PTDH_CONTEXT TdhContext, [in] ULONG *FilterCount, [out, optional] PPROVIDER_FILTER_INFO *Buffer, [in, out] ULONG *BufferSize );",
            "name": "TdhEnumerateProviderFilters"
        },
        {
            "signature": "TDHSTATUS TdhEnumerateProviders( [out] PPROVIDER_ENUMERATION_INFO pBuffer, [in, out] ULONG *pBufferSize );",
            "name": "TdhEnumerateProviders"
        },
        {
            "signature": "TDHSTATUS TdhFormatProperty( [in] PTRACE_EVENT_INFO EventInfo, [in, optional] PEVENT_MAP_INFO MapInfo, [in] ULONG PointerSize, [in] USHORT PropertyInType, [in] USHORT PropertyOutType, [in] USHORT PropertyLength, [in] USHORT UserDataLength, [in] PBYTE UserData, [in, out] PULONG BufferSize, [out, optional] PWCHAR Buffer, [out] PUSHORT UserDataConsumed );",
            "name": "TdhFormatProperty"
        },
        {
            "signature": "TDHSTATUS TdhGetDecodingParameter( [in] TDH_HANDLE Handle, [in, out] PTDH_CONTEXT TdhContext );",
            "name": "TdhGetDecodingParameter"
        },
        {
            "signature": "TDHSTATUS TdhGetEventInformation( [in] PEVENT_RECORD Event, [in] ULONG TdhContextCount, [in] PTDH_CONTEXT TdhContext, [out] PTRACE_EVENT_INFO Buffer, [in, out] PULONG BufferSize );",
            "name": "TdhGetEventInformation"
        },
        {
            "signature": "TDHSTATUS TdhGetEventMapInformation( [in] PEVENT_RECORD pEvent, [in] PWSTR pMapName, [out] PEVENT_MAP_INFO pBuffer, [in, out] ULONG *pBufferSize );",
            "name": "TdhGetEventMapInformation"
        },
        {
            "signature": "TDHSTATUS TdhGetManifestEventInformation( [in] LPGUID ProviderGuid, [in] PEVENT_DESCRIPTOR EventDescriptor, [out] PTRACE_EVENT_INFO Buffer, [in, out] ULONG *BufferSize );",
            "name": "TdhGetManifestEventInformation"
        },
        {
            "signature": "TDHSTATUS TdhGetProperty( [in] PEVENT_RECORD pEvent, [in] ULONG TdhContextCount, [in] PTDH_CONTEXT pTdhContext, [in] ULONG PropertyDataCount, [in] PPROPERTY_DATA_DESCRIPTOR pPropertyData, [in] ULONG BufferSize, [out] PBYTE pBuffer );",
            "name": "TdhGetProperty"
        },
        {
            "signature": "TDHSTATUS TdhGetPropertySize( [in] PEVENT_RECORD pEvent, [in] ULONG TdhContextCount, [in] PTDH_CONTEXT pTdhContext, [in] ULONG PropertyDataCount, [in] PPROPERTY_DATA_DESCRIPTOR pPropertyData, [out] ULONG *pPropertySize );",
            "name": "TdhGetPropertySize"
        },
        {
            "signature": "TDHSTATUS TdhGetWppMessage( [in] TDH_HANDLE Handle, [in] PEVENT_RECORD EventRecord, [in, out] PULONG BufferSize, [out] PBYTE Buffer );",
            "name": "TdhGetWppMessage"
        },
        {
            "signature": "TDHSTATUS TdhGetWppProperty( [in] TDH_HANDLE Handle, [in] PEVENT_RECORD EventRecord, [in] PWSTR PropertyName, [in, out] PULONG BufferSize, [out] PBYTE Buffer );",
            "name": "TdhGetWppProperty"
        },
        {
            "signature": "TDHSTATUS TdhLoadManifest( [in] PWSTR Manifest );",
            "name": "TdhLoadManifest"
        },
        {
            "signature": "TDHSTATUS TdhLoadManifestFromBinary( [in] PWSTR BinaryPath );",
            "name": "TdhLoadManifestFromBinary"
        },
        {
            "signature": "TDHSTATUS TdhOpenDecodingHandle( [out] PTDH_HANDLE Handle );",
            "name": "TdhOpenDecodingHandle"
        },
        {
            "signature": "TDHSTATUS TdhQueryProviderFieldInformation( [in] LPGUID pGuid, [in] ULONGLONG EventFieldValue, [in] EVENT_FIELD_TYPE EventFieldType, [out] PPROVIDER_FIELD_INFOARRAY pBuffer, [in, out] ULONG *pBufferSize );",
            "name": "TdhQueryProviderFieldInformation"
        },
        {
            "signature": "TDHSTATUS TdhSetDecodingParameter( [in] TDH_HANDLE Handle, [in] PTDH_CONTEXT TdhContext );",
            "name": "TdhSetDecodingParameter"
        },
        {
            "signature": "TDHSTATUS TdhUnloadManifest( [in] PWSTR Manifest );",
            "name": "TdhUnloadManifest"
        }
    ],
    "Tdiinfo.h": [],
    "Termmgr.h": [],
    "Textserv.h": [
        {
            "signature": "HRESULT CreateTextServices( [in] IUnknown *punkOuter, [in] ITextHost *pITextHost, [out] IUnknown **ppUnk );",
            "name": "CreateTextServices"
        },
        {
            "signature": "HRESULT ShutdownTextServices( [in] IUnknown *pTextServices );",
            "name": "ShutdownTextServices"
        }
    ],
    "Textstor.h": [],
    "Thrdbase.h": [],
    "Threadpoolapiset.h": [
        {
            "signature": "BOOL CallbackMayRunLong( [in, out] PTP_CALLBACK_INSTANCE pci );",
            "name": "CallbackMayRunLong"
        },
        {
            "signature": "void CancelThreadpoolIo( [in, out] PTP_IO pio );",
            "name": "CancelThreadpoolIo"
        },
        {
            "signature": "void CloseThreadpool( [in, out] PTP_POOL ptpp );",
            "name": "CloseThreadpool"
        },
        {
            "signature": "void CloseThreadpoolCleanupGroup( [in, out] PTP_CLEANUP_GROUP ptpcg );",
            "name": "CloseThreadpoolCleanupGroup"
        },
        {
            "signature": "void CloseThreadpoolCleanupGroupMembers( [in, out] PTP_CLEANUP_GROUP ptpcg, [in] BOOL fCancelPendingCallbacks, [in, out, optional] PVOID pvCleanupContext );",
            "name": "CloseThreadpoolCleanupGroupMembers"
        },
        {
            "signature": "void CloseThreadpoolIo( [in, out] PTP_IO pio );",
            "name": "CloseThreadpoolIo"
        },
        {
            "signature": "void CloseThreadpoolTimer( [in, out] PTP_TIMER pti );",
            "name": "CloseThreadpoolTimer"
        },
        {
            "signature": "void CloseThreadpoolWait( [in, out] PTP_WAIT pwa );",
            "name": "CloseThreadpoolWait"
        },
        {
            "signature": "void CloseThreadpoolWork( [in, out] PTP_WORK pwk );",
            "name": "CloseThreadpoolWork"
        },
        {
            "signature": "PTP_POOL CreateThreadpool( PVOID reserved );",
            "name": "CreateThreadpool"
        },
        {
            "signature": "PTP_CLEANUP_GROUP CreateThreadpoolCleanupGroup();",
            "name": "CreateThreadpoolCleanupGroup"
        },
        {
            "signature": "PTP_IO CreateThreadpoolIo( [in] HANDLE fl, [in] PTP_WIN32_IO_CALLBACK pfnio, [in, out, optional] PVOID pv, [in, optional] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "CreateThreadpoolIo"
        },
        {
            "signature": "PTP_TIMER CreateThreadpoolTimer( [in] PTP_TIMER_CALLBACK pfnti, [in, out, optional] PVOID pv, [in, optional] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "CreateThreadpoolTimer"
        },
        {
            "signature": "PTP_WAIT CreateThreadpoolWait( [in] PTP_WAIT_CALLBACK pfnwa, [in, out, optional] PVOID pv, [in, optional] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "CreateThreadpoolWait"
        },
        {
            "signature": "PTP_WORK CreateThreadpoolWork( [in] PTP_WORK_CALLBACK pfnwk, [in, out, optional] PVOID pv, [in, optional] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "CreateThreadpoolWork"
        },
        {
            "signature": "void DisassociateCurrentThreadFromCallback( [in, out] PTP_CALLBACK_INSTANCE pci );",
            "name": "DisassociateCurrentThreadFromCallback"
        },
        {
            "signature": "void FreeLibraryWhenCallbackReturns( [in, out] PTP_CALLBACK_INSTANCE pci, [in] HMODULE mod );",
            "name": "FreeLibraryWhenCallbackReturns"
        },
        {
            "signature": "BOOL IsThreadpoolTimerSet( [in, out] PTP_TIMER pti );",
            "name": "IsThreadpoolTimerSet"
        },
        {
            "signature": "void LeaveCriticalSectionWhenCallbackReturns( [in, out] PTP_CALLBACK_INSTANCE pci, [in, out] PCRITICAL_SECTION pcs );",
            "name": "LeaveCriticalSectionWhenCallbackReturns"
        },
        {
            "signature": "BOOL QueryThreadpoolStackInformation( [in] PTP_POOL ptpp, [out] PTP_POOL_STACK_INFORMATION ptpsi );",
            "name": "QueryThreadpoolStackInformation"
        },
        {
            "signature": "void ReleaseMutexWhenCallbackReturns( [in, out] PTP_CALLBACK_INSTANCE pci, [in] HANDLE mut );",
            "name": "ReleaseMutexWhenCallbackReturns"
        },
        {
            "signature": "void ReleaseSemaphoreWhenCallbackReturns( [in, out] PTP_CALLBACK_INSTANCE pci, [in] HANDLE sem, [in] DWORD crel );",
            "name": "ReleaseSemaphoreWhenCallbackReturns"
        },
        {
            "signature": "void SetEventWhenCallbackReturns( [in, out] PTP_CALLBACK_INSTANCE pci, [in] HANDLE evt );",
            "name": "SetEventWhenCallbackReturns"
        },
        {
            "signature": "BOOL SetThreadpoolStackInformation( [in, out] PTP_POOL ptpp, [in] PTP_POOL_STACK_INFORMATION ptpsi );",
            "name": "SetThreadpoolStackInformation"
        },
        {
            "signature": "void SetThreadpoolThreadMaximum( [in, out] PTP_POOL ptpp, [in] DWORD cthrdMost );",
            "name": "SetThreadpoolThreadMaximum"
        },
        {
            "signature": "BOOL SetThreadpoolThreadMinimum( [in, out] PTP_POOL ptpp, [in] DWORD cthrdMic );",
            "name": "SetThreadpoolThreadMinimum"
        },
        {
            "signature": "void SetThreadpoolTimer( [in, out] PTP_TIMER pti, [in, optional] PFILETIME pftDueTime, [in] DWORD msPeriod, [in] DWORD msWindowLength );",
            "name": "SetThreadpoolTimer"
        },
        {
            "signature": "BOOL SetThreadpoolTimerEx( [in, out] PTP_TIMER pti, [in, optional] PFILETIME pftDueTime, [in] DWORD msPeriod, [in, optional] DWORD msWindowLength );",
            "name": "SetThreadpoolTimerEx"
        },
        {
            "signature": "void SetThreadpoolWait( [in, out] PTP_WAIT pwa, [in, optional] HANDLE h, [in, optional] PFILETIME pftTimeout );",
            "name": "SetThreadpoolWait"
        },
        {
            "signature": "BOOL SetThreadpoolWaitEx( [in, out] PTP_WAIT pwa, [in, optional] HANDLE h, [in, optional] PFILETIME pftTimeout, PVOID Reserved );",
            "name": "SetThreadpoolWaitEx"
        },
        {
            "signature": "void StartThreadpoolIo( [in, out] PTP_IO pio );",
            "name": "StartThreadpoolIo"
        },
        {
            "signature": "void SubmitThreadpoolWork( [in, out] PTP_WORK pwk );",
            "name": "SubmitThreadpoolWork"
        },
        {
            "signature": "BOOL TrySubmitThreadpoolCallback( [in] PTP_SIMPLE_CALLBACK pfns, [in, out, optional] PVOID pv, [in, optional] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "TrySubmitThreadpoolCallback"
        },
        {
            "signature": "void WaitForThreadpoolIoCallbacks( [in, out] PTP_IO pio, [in] BOOL fCancelPendingCallbacks );",
            "name": "WaitForThreadpoolIoCallbacks"
        },
        {
            "signature": "void WaitForThreadpoolTimerCallbacks( [in, out] PTP_TIMER pti, [in] BOOL fCancelPendingCallbacks );",
            "name": "WaitForThreadpoolTimerCallbacks"
        },
        {
            "signature": "void WaitForThreadpoolWaitCallbacks( [in, out] PTP_WAIT pwa, [in] BOOL fCancelPendingCallbacks );",
            "name": "WaitForThreadpoolWaitCallbacks"
        },
        {
            "signature": "void WaitForThreadpoolWorkCallbacks( [in, out] PTP_WORK pwk, [in] BOOL fCancelPendingCallbacks );",
            "name": "WaitForThreadpoolWorkCallbacks"
        }
    ],
    "Threadpoollegacyapiset.h": [
        {
            "signature": "BOOL ChangeTimerQueueTimer( [in, optional] HANDLE TimerQueue, [in, out] HANDLE Timer, [in] ULONG DueTime, [in] ULONG Period );",
            "name": "ChangeTimerQueueTimer"
        },
        {
            "signature": "HANDLE CreateTimerQueue();",
            "name": "CreateTimerQueue"
        },
        {
            "signature": "BOOL CreateTimerQueueTimer( [out] PHANDLE phNewTimer, [in, optional] HANDLE TimerQueue, [in] WAITORTIMERCALLBACK Callback, [in, optional] PVOID Parameter, [in] DWORD DueTime, [in] DWORD Period, [in] ULONG Flags );",
            "name": "CreateTimerQueueTimer"
        },
        {
            "signature": "BOOL DeleteTimerQueue( HANDLE TimerQueue );",
            "name": "DeleteTimerQueue"
        },
        {
            "signature": "BOOL DeleteTimerQueueEx( [in] HANDLE TimerQueue, [in, optional] HANDLE CompletionEvent );",
            "name": "DeleteTimerQueueEx"
        },
        {
            "signature": "BOOL DeleteTimerQueueTimer( [in, optional] HANDLE TimerQueue, [in] HANDLE Timer, [in, optional] HANDLE CompletionEvent );",
            "name": "DeleteTimerQueueTimer"
        },
        {
            "signature": "BOOL QueueUserWorkItem( [in] LPTHREAD_START_ROUTINE Function, [in, optional] PVOID Context, [in] ULONG Flags );",
            "name": "QueueUserWorkItem"
        },
        {
            "signature": "BOOL UnregisterWaitEx( [in] HANDLE WaitHandle, [in, optional] HANDLE CompletionEvent );",
            "name": "UnregisterWaitEx"
        }
    ],
    "Thumbcache.h": [],
    "Thumbnailstreamcache.h": [],
    "Timeapi.h": [
        {
            "signature": "MMRESULT timeBeginPeriod( UINT uPeriod );",
            "name": "timeBeginPeriod"
        },
        {
            "signature": "MMRESULT timeEndPeriod( UINT uPeriod );",
            "name": "timeEndPeriod"
        },
        {
            "signature": "MMRESULT timeGetDevCaps( LPTIMECAPS ptc, UINT cbtc );",
            "name": "timeGetDevCaps"
        },
        {
            "signature": "MMRESULT timeGetSystemTime( LPMMTIME pmmt, UINT cbmmt );",
            "name": "timeGetSystemTime"
        },
        {
            "signature": "DWORD timeGetTime();",
            "name": "timeGetTime"
        }
    ],
    "Timeprov.h": [
        {
            "signature": "AlertSamplesAvailFunc Alertsamplesavailfunc; HRESULT Alertsamplesavailfunc() {...}",
            "name": "AlertSamplesAvailFunc callback"
        },
        {
            "signature": "GetTimeSysInfoFunc Gettimesysinfofunc; HRESULT Gettimesysinfofunc( [in] TimeSysInfo eInfo, [out] void *pvInfo ) {...}",
            "name": "GetTimeSysInfoFunc callback"
        },
        {
            "signature": "LogTimeProvEventFunc Logtimeproveventfunc; HRESULT Logtimeproveventfunc( [in] WORD wType, [in] WCHAR *wszProvName, [in] WCHAR *wszMessage ) {...}",
            "name": "LogTimeProvEventFunc callback"
        },
        {
            "signature": "SetProviderStatusFunc Setproviderstatusfunc; HRESULT Setproviderstatusfunc( [in] SetProviderStatusInfo *pspsi ) {...}",
            "name": "SetProviderStatusFunc callback"
        },
        {
            "signature": "SetProviderStatusInfoFreeFunc Setproviderstatusinfofreefunc; void Setproviderstatusinfofreefunc( [in] SetProviderStatusInfo *pspsi ) {...}",
            "name": "SetProviderStatusInfoFreeFunc callback"
        },
        {
            "signature": "HRESULT TimeProvClose( [in] TimeProvHandle hTimeProv );",
            "name": "TimeProvClose"
        },
        {
            "signature": "HRESULT TimeProvCommand( [in] TimeProvHandle hTimeProv, [in] TimeProvCmd eCmd, [in] TimeProvArgs pvArgs );",
            "name": "TimeProvCommand"
        },
        {
            "signature": "HRESULT TimeProvOpen( [in] PWSTR wszName, [in] TimeProvSysCallbacks *pSysCallbacks, [out] TimeProvHandle *phTimeProv );",
            "name": "TimeProvOpen"
        }
    ],
    "Timezoneapi.h": [
        {
            "signature": "DWORD EnumDynamicTimeZoneInformation( [in] const DWORD dwIndex, [out] PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation );",
            "name": "EnumDynamicTimeZoneInformation"
        },
        {
            "signature": "BOOL FileTimeToSystemTime( [in] const FILETIME *lpFileTime, [out] LPSYSTEMTIME lpSystemTime );",
            "name": "FileTimeToSystemTime"
        },
        {
            "signature": "DWORD GetDynamicTimeZoneInformation( [out] PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation );",
            "name": "GetDynamicTimeZoneInformation"
        },
        {
            "signature": "DWORD GetDynamicTimeZoneInformationEffectiveYears( [in] const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, [out] LPDWORD FirstYear, [out] LPDWORD LastYear );",
            "name": "GetDynamicTimeZoneInformationEffectiveYears"
        },
        {
            "signature": "DWORD GetTimeZoneInformation( [out] LPTIME_ZONE_INFORMATION lpTimeZoneInformation );",
            "name": "GetTimeZoneInformation"
        },
        {
            "signature": "BOOL GetTimeZoneInformationForYear( [in] USHORT wYear, [in, optional] PDYNAMIC_TIME_ZONE_INFORMATION pdtzi, [out] LPTIME_ZONE_INFORMATION ptzi );",
            "name": "GetTimeZoneInformationForYear"
        },
        {
            "signature": "BOOL SetDynamicTimeZoneInformation( [in] const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation );",
            "name": "SetDynamicTimeZoneInformation"
        },
        {
            "signature": "BOOL SetTimeZoneInformation( [in] const TIME_ZONE_INFORMATION *lpTimeZoneInformation );",
            "name": "SetTimeZoneInformation"
        },
        {
            "signature": "BOOL SystemTimeToFileTime( [in] const SYSTEMTIME *lpSystemTime, [out] LPFILETIME lpFileTime );",
            "name": "SystemTimeToFileTime"
        },
        {
            "signature": "BOOL SystemTimeToTzSpecificLocalTime( [in, optional] const TIME_ZONE_INFORMATION *lpTimeZoneInformation, [in] const SYSTEMTIME *lpUniversalTime, [out] LPSYSTEMTIME lpLocalTime );",
            "name": "SystemTimeToTzSpecificLocalTime"
        },
        {
            "signature": "BOOL SystemTimeToTzSpecificLocalTimeEx( [in, optional] const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation, [in] const SYSTEMTIME *lpUniversalTime, [out] LPSYSTEMTIME lpLocalTime );",
            "name": "SystemTimeToTzSpecificLocalTimeEx"
        },
        {
            "signature": "BOOL TzSpecificLocalTimeToSystemTime( [in, optional] const TIME_ZONE_INFORMATION *lpTimeZoneInformation, [in] const SYSTEMTIME *lpLocalTime, [out] LPSYSTEMTIME lpUniversalTime );",
            "name": "TzSpecificLocalTimeToSystemTime"
        },
        {
            "signature": "BOOL TzSpecificLocalTimeToSystemTimeEx( [in, optional] const DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation, [in] const SYSTEMTIME *lpLocalTime, [out] LPSYSTEMTIME lpUniversalTime );",
            "name": "TzSpecificLocalTimeToSystemTimeEx"
        }
    ],
    "Tlhelp32.h": [
        {
            "signature": "HANDLE CreateToolhelp32Snapshot( [in] DWORD dwFlags, [in] DWORD th32ProcessID );",
            "name": "CreateToolhelp32Snapshot"
        },
        {
            "signature": "BOOL Heap32First( [in, out] LPHEAPENTRY32 lphe, [in] DWORD th32ProcessID, [in] ULONG_PTR th32HeapID );",
            "name": "Heap32First"
        },
        {
            "signature": "BOOL Heap32ListFirst( [in] HANDLE hSnapshot, [in, out] LPHEAPLIST32 lphl );",
            "name": "Heap32ListFirst"
        },
        {
            "signature": "BOOL Heap32ListNext( [in] HANDLE hSnapshot, [out] LPHEAPLIST32 lphl );",
            "name": "Heap32ListNext"
        },
        {
            "signature": "BOOL Heap32Next( [out] LPHEAPENTRY32 lphe );",
            "name": "Heap32Next"
        },
        {
            "signature": "BOOL Module32First( [in] HANDLE hSnapshot, [in, out] LPMODULEENTRY32 lpme );",
            "name": "Module32First"
        },
        {
            "signature": "BOOL Module32FirstW( [in] HANDLE hSnapshot, [in, out] LPMODULEENTRY32W lpme );",
            "name": "Module32FirstW"
        },
        {
            "signature": "BOOL Module32Next( [in] HANDLE hSnapshot, [out] LPMODULEENTRY32 lpme );",
            "name": "Module32Next"
        },
        {
            "signature": "BOOL Module32NextW( [in] HANDLE hSnapshot, [out] LPMODULEENTRY32W lpme );",
            "name": "Module32NextW"
        },
        {
            "signature": "BOOL Process32First( [in] HANDLE hSnapshot, [in, out] LPPROCESSENTRY32 lppe );",
            "name": "Process32First"
        },
        {
            "signature": "BOOL Process32FirstW( [in] HANDLE hSnapshot, [in, out] LPPROCESSENTRY32W lppe );",
            "name": "Process32FirstW"
        },
        {
            "signature": "BOOL Process32Next( [in] HANDLE hSnapshot, [out] LPPROCESSENTRY32 lppe );",
            "name": "Process32Next"
        },
        {
            "signature": "BOOL Process32NextW( [in] HANDLE hSnapshot, [out] LPPROCESSENTRY32W lppe );",
            "name": "Process32NextW"
        },
        {
            "signature": "BOOL Thread32First( [in] HANDLE hSnapshot, [in, out] LPTHREADENTRY32 lpte );",
            "name": "Thread32First"
        },
        {
            "signature": "BOOL Thread32Next( [in] HANDLE hSnapshot, [out] LPTHREADENTRY32 lpte );",
            "name": "Thread32Next"
        },
        {
            "signature": "BOOL Toolhelp32ReadProcessMemory( [in] DWORD th32ProcessID, [in] LPCVOID lpBaseAddress, [out] LPVOID lpBuffer, [in] SIZE_T cbRead, [out] SIZE_T *lpNumberOfBytesRead );",
            "name": "Toolhelp32ReadProcessMemory"
        }
    ],
    "Tlogstg.h": [],
    "Tokenbinding.h": [
        {
            "signature": "SECURITY_STATUS TokenBindingDeleteAllBindings();",
            "name": "TokenBindingDeleteAllBindings"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingDeleteBinding( [in] PCWSTR targetURL );",
            "name": "TokenBindingDeleteBinding"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingGenerateBinding( [in] TOKENBINDING_KEY_PARAMETERS_TYPE keyType, [in] PCWSTR targetURL, [in] TOKENBINDING_TYPE bindingType, [in] const void *tlsEKM, [in] DWORD tlsEKMSize, [in] TOKENBINDING_EXTENSION_FORMAT extensionFormat, [in] const void *extensionData, [out] void **tokenBinding, [out] DWORD *tokenBindingSize, [out, optional] TOKENBINDING_RESULT_DATA **resultData );",
            "name": "TokenBindingGenerateBinding"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingGenerateID( [in] TOKENBINDING_KEY_PARAMETERS_TYPE keyType, [in] const void *publicKey, [in] DWORD publicKeySize, [out] TOKENBINDING_RESULT_DATA **resultData );",
            "name": "TokenBindingGenerateID"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingGenerateMessage( [in] const void * [] tokenBindings, [in] const DWORD [] tokenBindingsSize, [in] DWORD tokenBindingsCount, [out] void **tokenBindingMessage, [out] DWORD *tokenBindingMessageSize );",
            "name": "TokenBindingGenerateMessage"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingGetKeyTypesClient( [out] TOKENBINDING_KEY_TYPES **keyTypes );",
            "name": "TokenBindingGetKeyTypesClient"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingGetKeyTypesServer( [out] TOKENBINDING_KEY_TYPES **keyTypes );",
            "name": "TokenBindingGetKeyTypesServer"
        },
        {
            "signature": "SECURITY_STATUS TokenBindingVerifyMessage( [in] const void *tokenBindingMessage, [in] DWORD tokenBindingMessageSize, [in] TOKENBINDING_KEY_PARAMETERS_TYPE keyType, [in] const void *tlsEKM, [in] DWORD tlsEKMSize, [out] TOKENBINDING_RESULT_LIST **resultList );",
            "name": "TokenBindingVerifyMessage"
        }
    ],
    "Tom.h": [],
    "Tpcshrd.h": [],
    "Tpmvscmgr.h": [],
    "Traceloggingactivity.h": [],
    "Traceloggingprovider.h": [
        {
            "signature": "TLG_PFORCEINLINE BOOLEAN TraceLoggingProviderEnabled( TraceLoggingHProvider hProvider, UCHAR eventLevel, ULONGLONG eventKeyword );",
            "name": "TraceLoggingProviderEnabled"
        },
        {
            "signature": "GUID TraceLoggingProviderId( TraceLoggingHProvider hProvider );",
            "name": "TraceLoggingProviderId"
        },
        {
            "signature": "TLG_STATUS TraceLoggingRegister( TraceLoggingHProvider hProvider );",
            "name": "TraceLoggingRegister"
        },
        {
            "signature": "TLG_STATUS TraceLoggingRegisterEx( [in, out] TraceLoggingHProvider hProvider, [in, optional] TLG_PENABLECALLBACK pEnableCallback, [in, optional] PVOID pCallbackContext );",
            "name": "TraceLoggingRegisterEx"
        },
        {
            "signature": "TLG_STATUS TraceLoggingSetInformation( TraceLoggingHProvider hProvider, EVENT_INFO_CLASS informationClass, PVOID pvInformation, ULONG cbInformation );",
            "name": "TraceLoggingSetInformation"
        },
        {
            "signature": "void TraceLoggingUnregister( TraceLoggingHProvider hProvider );",
            "name": "TraceLoggingUnregister"
        }
    ],
    "Traffic.h": [
        {
            "signature": "ULONG TcAddFilter( [in] HANDLE FlowHandle, [in] PTC_GEN_FILTER pGenericFilter, [out] PHANDLE pFilterHandle );",
            "name": "TcAddFilter"
        },
        {
            "signature": "ULONG TcAddFlow( [in] HANDLE IfcHandle, [in] HANDLE ClFlowCtx, [in] ULONG Flags, [in] PTC_GEN_FLOW pGenericFlow, [out] PHANDLE pFlowHandle );",
            "name": "TcAddFlow"
        },
        {
            "signature": "ULONG TcCloseInterface( [in] HANDLE IfcHandle );",
            "name": "TcCloseInterface"
        },
        {
            "signature": "ULONG TcDeleteFilter( [in] HANDLE FilterHandle );",
            "name": "TcDeleteFilter"
        },
        {
            "signature": "ULONG TcDeleteFlow( [in] HANDLE FlowHandle );",
            "name": "TcDeleteFlow"
        },
        {
            "signature": "ULONG TcDeregisterClient( [in] HANDLE ClientHandle );",
            "name": "TcDeregisterClient"
        },
        {
            "signature": "ULONG TcEnumerateFlows( [in] HANDLE IfcHandle, [in, out] PHANDLE pEnumHandle, [in, out] PULONG pFlowCount, [in, out] PULONG pBufSize, [out] PENUMERATION_BUFFER Buffer );",
            "name": "TcEnumerateFlows"
        },
        {
            "signature": "ULONG TcEnumerateInterfaces( [in] HANDLE ClientHandle, [in, out] PULONG pBufferSize, [out] PTC_IFC_DESCRIPTOR InterfaceBuffer );",
            "name": "TcEnumerateInterfaces"
        },
        {
            "signature": "ULONG TcGetFlowNameA( [in] HANDLE FlowHandle, [in] ULONG StrSize, [out] LPSTR pFlowName );",
            "name": "TcGetFlowNameA"
        },
        {
            "signature": "ULONG TcGetFlowNameW( [in] HANDLE FlowHandle, [in] ULONG StrSize, [out] LPWSTR pFlowName );",
            "name": "TcGetFlowNameW"
        },
        {
            "signature": "TCI_ADD_FLOW_COMPLETE_HANDLER TciAddFlowCompleteHandler; void TciAddFlowCompleteHandler( [in] HANDLE ClFlowCtx, [in] ULONG Status ) {...}",
            "name": "TCI_ADD_FLOW_COMPLETE_HANDLER callback"
        },
        {
            "signature": "TCI_DEL_FLOW_COMPLETE_HANDLER TciDelFlowCompleteHandler; void TciDelFlowCompleteHandler( [in] HANDLE ClFlowCtx, [in] ULONG Status ) {...}",
            "name": "TCI_DEL_FLOW_COMPLETE_HANDLER callback"
        },
        {
            "signature": "TCI_MOD_FLOW_COMPLETE_HANDLER TciModFlowCompleteHandler; void TciModFlowCompleteHandler( [in] HANDLE ClFlowCtx, [in] ULONG Status ) {...}",
            "name": "TCI_MOD_FLOW_COMPLETE_HANDLER callback"
        },
        {
            "signature": "TCI_NOTIFY_HANDLER TciNotifyHandler; void TciNotifyHandler( [in] HANDLE ClRegCtx, [in] HANDLE ClIfcCtx, [in] ULONG Event, [in] HANDLE SubCode, [in] ULONG BufSize, [in] PVOID Buffer ) {...}",
            "name": "TCI_NOTIFY_HANDLER callback"
        },
        {
            "signature": "ULONG TcModifyFlow( [in] HANDLE FlowHandle, [in] PTC_GEN_FLOW pGenericFlow );",
            "name": "TcModifyFlow"
        },
        {
            "signature": "ULONG TcOpenInterfaceA( [in] LPSTR pInterfaceName, [in] HANDLE ClientHandle, [in] HANDLE ClIfcCtx, [out] PHANDLE pIfcHandle );",
            "name": "TcOpenInterfaceA"
        },
        {
            "signature": "ULONG TcOpenInterfaceW( [in] LPWSTR pInterfaceName, [in] HANDLE ClientHandle, [in] HANDLE ClIfcCtx, [out] PHANDLE pIfcHandle );",
            "name": "TcOpenInterfaceW"
        },
        {
            "signature": "ULONG TcQueryFlowA( [in] LPSTR pFlowName, [in] LPGUID pGuidParam, [in, out] PULONG pBufferSize, [out] PVOID Buffer );",
            "name": "TcQueryFlowA"
        },
        {
            "signature": "ULONG TcQueryFlowW( [in] LPWSTR pFlowName, [in] LPGUID pGuidParam, [in, out] PULONG pBufferSize, [out] PVOID Buffer );",
            "name": "TcQueryFlowW"
        },
        {
            "signature": "ULONG TcQueryInterface( [in] HANDLE IfcHandle, [in] LPGUID pGuidParam, [in] BOOLEAN NotifyChange, [in, out] PULONG pBufferSize, [out] PVOID Buffer );",
            "name": "TcQueryInterface"
        },
        {
            "signature": "ULONG TcRegisterClient( [in] ULONG TciVersion, [in] HANDLE ClRegCtx, [in] PTCI_CLIENT_FUNC_LIST ClientHandlerList, [out] PHANDLE pClientHandle );",
            "name": "TcRegisterClient"
        },
        {
            "signature": "ULONG TcSetFlowA( [in] LPSTR pFlowName, [in] LPGUID pGuidParam, [in] ULONG BufferSize, [in] PVOID Buffer );",
            "name": "TcSetFlowA"
        },
        {
            "signature": "ULONG TcSetFlowW( [in] LPWSTR pFlowName, [in] LPGUID pGuidParam, [in] ULONG BufferSize, [in] PVOID Buffer );",
            "name": "TcSetFlowW"
        },
        {
            "signature": "ULONG TcSetInterface( [in] HANDLE IfcHandle, [in] LPGUID pGuidParam, [in] ULONG BufferSize, [in] PVOID Buffer );",
            "name": "TcSetInterface"
        }
    ],
    "Transportsettingcommon.h": [],
    "Tsgauthenticationengine.h": [],
    "Tsgpolicyengine.h": [],
    "Tspi.h": [
        {
            "signature": "ASYNC_COMPLETION AsyncCompletion; void AsyncCompletion( DRV_REQUESTID dwRequestID, LONG lResult ) {...}",
            "name": "ASYNC_COMPLETION callback"
        },
        {
            "signature": "LINEEVENT Lineevent; void Lineevent( HTAPILINE htLine, HTAPICALL htCall, DWORD dwMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2, DWORD_PTR dwParam3 ) {...}",
            "name": "LINEEVENT callback"
        },
        {
            "signature": "PHONEEVENT Phoneevent; void Phoneevent( HTAPIPHONE htPhone, DWORD dwMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2, DWORD_PTR dwParam3 ) {...}",
            "name": "PHONEEVENT callback"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineAccept( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "TSPI_lineAccept"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineAddToConference( DRV_REQUESTID dwRequestID, HDRVCALL hdConfCall, HDRVCALL hdConsultCall );",
            "name": "TSPI_lineAddToConference"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineAnswer( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "TSPI_lineAnswer"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineBlindTransfer( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "TSPI_lineBlindTransfer"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineClose( HDRVLINE hdLine );",
            "name": "TSPI_lineClose"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineCloseCall( HDRVCALL hdCall );",
            "name": "TSPI_lineCloseCall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineCloseMSPInstance( HDRVMSPLINE hdMSPLine );",
            "name": "TSPI_lineCloseMSPInstance"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineCompleteCall( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPDWORD lpdwCompletionID, DWORD dwCompletionMode, DWORD dwMessageID );",
            "name": "TSPI_lineCompleteCall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineCompleteTransfer( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, HDRVCALL hdConsultCall, HTAPICALL htConfCall, LPHDRVCALL lphdConfCall, DWORD dwTransferMode );",
            "name": "TSPI_lineCompleteTransfer"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineConditionalMediaDetection( HDRVLINE hdLine, DWORD dwMediaModes, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_lineConditionalMediaDetection"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineConfigDialog( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "TSPI_lineConfigDialog"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineConfigDialogEdit( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );",
            "name": "TSPI_lineConfigDialogEdit"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineCreateMSPInstance( HDRVLINE hdLine, DWORD dwAddressID, HTAPIMSPLINE htMSPLine, LPHDRVMSPLINE lphdMSPLine );",
            "name": "TSPI_lineCreateMSPInstance"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineDevSpecific( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwAddressID, HDRVCALL hdCall, LPVOID lpParams, DWORD dwSize );",
            "name": "TSPI_lineDevSpecific"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineDevSpecificFeature( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwFeature, LPVOID lpParams, DWORD dwSize );",
            "name": "TSPI_lineDevSpecificFeature"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineDial( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "TSPI_lineDial"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineDrop( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "TSPI_lineDrop"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineForward( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD bAllAddresses, DWORD dwAddressID, LPLINEFORWARDLIST const lpForwardList, DWORD dwNumRingsNoAnswer, HTAPICALL htConsultCall, LPHDRVCALL lphdConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_lineForward"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGatherDigits( HDRVCALL hdCall, DWORD dwEndToEndID, DWORD dwDigitModes, LPWSTR lpsDigits, DWORD dwNumDigits, LPCWSTR lpszTerminationDigits, DWORD dwFirstDigitTimeout, DWORD dwInterDigitTimeout );",
            "name": "TSPI_lineGatherDigits"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGenerateDigits( HDRVCALL hdCall, DWORD dwEndToEndID, DWORD dwDigitMode, LPCWSTR lpszDigits, DWORD dwDuration );",
            "name": "TSPI_lineGenerateDigits"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGenerateTone( HDRVCALL hdCall, DWORD dwEndToEndID, DWORD dwToneMode, DWORD dwDuration, DWORD dwNumTones, LPLINEGENERATETONE const lpTones );",
            "name": "TSPI_lineGenerateTone"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetAddressCaps( DWORD dwDeviceID, DWORD dwAddressID, DWORD dwTSPIVersion, DWORD dwExtVersion, LPLINEADDRESSCAPS lpAddressCaps );",
            "name": "TSPI_lineGetAddressCaps"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetAddressID( HDRVLINE hdLine, LPDWORD lpdwAddressID, DWORD dwAddressMode, LPCWSTR lpsAddress, DWORD dwSize );",
            "name": "TSPI_lineGetAddressID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetAddressStatus( HDRVLINE hdLine, DWORD dwAddressID, LPLINEADDRESSSTATUS lpAddressStatus );",
            "name": "TSPI_lineGetAddressStatus"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetCallAddressID( HDRVCALL hdCall, LPDWORD lpdwAddressID );",
            "name": "TSPI_lineGetCallAddressID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetCallHubTracking( HDRVLINE hdLine, LPLINECALLHUBTRACKINGINFO lpTrackingInfo );",
            "name": "TSPI_lineGetCallHubTracking"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetCallIDs( HDRVCALL hdCall, LPDWORD lpdwAddressID, LPDWORD lpdwCallID, LPDWORD lpdwRelatedCallID );",
            "name": "TSPI_lineGetCallIDs"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetCallInfo( HDRVCALL hdCall, LPLINECALLINFO lpCallInfo );",
            "name": "TSPI_lineGetCallInfo"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetCallStatus( HDRVCALL hdCall, LPLINECALLSTATUS lpCallStatus );",
            "name": "TSPI_lineGetCallStatus"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetDevCaps( DWORD dwDeviceID, DWORD dwTSPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );",
            "name": "TSPI_lineGetDevCaps"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetDevConfig( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCWSTR lpszDeviceClass );",
            "name": "TSPI_lineGetDevConfig"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetExtensionID( DWORD dwDeviceID, DWORD dwTSPIVersion, LPLINEEXTENSIONID lpExtensionID );",
            "name": "TSPI_lineGetExtensionID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetIcon( DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "TSPI_lineGetIcon"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetID( HDRVLINE hdLine, DWORD dwAddressID, HDRVCALL hdCall, DWORD dwSelect, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass, HANDLE hTargetProcess );",
            "name": "TSPI_lineGetID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetLineDevStatus( HDRVLINE hdLine, LPLINEDEVSTATUS lpLineDevStatus );",
            "name": "TSPI_lineGetLineDevStatus"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineGetNumAddressIDs( HDRVLINE hdLine, LPDWORD lpdwNumAddressIDs );",
            "name": "TSPI_lineGetNumAddressIDs"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineHold( DRV_REQUESTID dwRequestID, HDRVCALL hdCall );",
            "name": "TSPI_lineHold"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineMakeCall( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, HTAPICALL htCall, LPHDRVCALL lphdCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_lineMakeCall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineMonitorDigits( HDRVCALL hdCall, DWORD dwDigitModes );",
            "name": "TSPI_lineMonitorDigits"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineMonitorMedia( HDRVCALL hdCall, DWORD dwMediaModes );",
            "name": "TSPI_lineMonitorMedia"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineMonitorTones( HDRVCALL hdCall, DWORD dwToneListID, LPLINEMONITORTONE const lpToneList, DWORD dwNumEntries );",
            "name": "TSPI_lineMonitorTones"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineMSPIdentify( DWORD dwDeviceID, GUID *pCLSID );",
            "name": "TSPI_lineMSPIdentify"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineNegotiateExtVersion( DWORD dwDeviceID, DWORD dwTSPIVersion, DWORD dwLowVersion, DWORD dwHighVersion, LPDWORD lpdwExtVersion );",
            "name": "TSPI_lineNegotiateExtVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineNegotiateTSPIVersion( DWORD dwDeviceID, DWORD dwLowVersion, DWORD dwHighVersion, LPDWORD lpdwTSPIVersion );",
            "name": "TSPI_lineNegotiateTSPIVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineOpen( DWORD dwDeviceID, HTAPILINE htLine, LPHDRVLINE lphdLine, DWORD dwTSPIVersion, LINEEVENT lpfnEventProc );",
            "name": "TSPI_lineOpen"
        },
        {
            "signature": "LONG TSPIAPI TSPI_linePark( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, DWORD dwParkMode, LPCWSTR lpszDirAddress, LPVARSTRING lpNonDirAddress );",
            "name": "TSPI_linePark"
        },
        {
            "signature": "LONG TSPIAPI TSPI_linePickup( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwAddressID, HTAPICALL htCall, LPHDRVCALL lphdCall, LPCWSTR lpszDestAddress, LPCWSTR lpszGroupID );",
            "name": "TSPI_linePickup"
        },
        {
            "signature": "LONG TSPIAPI TSPI_linePrepareAddToConference( DRV_REQUESTID dwRequestID, HDRVCALL hdConfCall, HTAPICALL htConsultCall, LPHDRVCALL lphdConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_linePrepareAddToConference"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineReceiveMSPData( HDRVLINE hdLine, HDRVCALL hdCall, HDRVMSPLINE hdMSPLine, LPVOID pBuffer, DWORD dwSize );",
            "name": "TSPI_lineReceiveMSPData"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineRedirect( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );",
            "name": "TSPI_lineRedirect"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineReleaseUserUserInfo( DRV_REQUESTID dwRequestID, HDRVCALL hdCall );",
            "name": "TSPI_lineReleaseUserUserInfo"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineRemoveFromConference( DRV_REQUESTID dwRequestID, HDRVCALL hdCall );",
            "name": "TSPI_lineRemoveFromConference"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSecureCall( DRV_REQUESTID dwRequestID, HDRVCALL hdCall );",
            "name": "TSPI_lineSecureCall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSelectExtVersion( HDRVLINE hdLine, DWORD dwExtVersion );",
            "name": "TSPI_lineSelectExtVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSendUserUserInfo( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPCSTR lpsUserUserInfo, DWORD dwSize );",
            "name": "TSPI_lineSendUserUserInfo"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetAppSpecific( HDRVCALL hdCall, DWORD dwAppSpecific );",
            "name": "TSPI_lineSetAppSpecific"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetCallData( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPVOID lpCallData, DWORD dwSize );",
            "name": "TSPI_lineSetCallData"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetCallHubTracking( HDRVLINE hdLine, LPLINECALLHUBTRACKINGINFO lpTrackingInfo );",
            "name": "TSPI_lineSetCallHubTracking"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetCallParams( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, DWORD dwBearerMode, DWORD dwMinRate, DWORD dwMaxRate, LPLINEDIALPARAMS const lpDialParams );",
            "name": "TSPI_lineSetCallParams"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetCallQualityOfService( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, LPVOID lpSendingFlowspec, DWORD dwSendingFlowspecSize, LPVOID lpReceivingFlowspec, DWORD dwReceivingFlowspecSize );",
            "name": "TSPI_lineSetCallQualityOfService"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetCallTreatment( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, DWORD dwTreatment );",
            "name": "TSPI_lineSetCallTreatment"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetDefaultMediaDetection( HDRVLINE hdLine, DWORD dwMediaModes );",
            "name": "TSPI_lineSetDefaultMediaDetection"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetDevConfig( DWORD dwDeviceID, LPVOID const lpDeviceConfig, DWORD dwSize, LPCWSTR lpszDeviceClass );",
            "name": "TSPI_lineSetDevConfig"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetLineDevStatus( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwStatusToChange, DWORD fStatus );",
            "name": "TSPI_lineSetLineDevStatus"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetMediaControl( HDRVLINE hdLine, DWORD dwAddressID, HDRVCALL hdCall, DWORD dwSelect, LPLINEMEDIACONTROLDIGIT const lpDigitList, DWORD dwDigitNumEntries, LPLINEMEDIACONTROLMEDIA const lpMediaList, DWORD dwMediaNumEntries, LPLINEMEDIACONTROLTONE const lpToneList, DWORD dwToneNumEntries, LPLINEMEDIACONTROLCALLSTATE const lpCallStateList, DWORD dwCallStateNumEntries );",
            "name": "TSPI_lineSetMediaControl"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetMediaMode( HDRVCALL hdCall, DWORD dwMediaMode );",
            "name": "TSPI_lineSetMediaMode"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetStatusMessages( HDRVLINE hdLine, DWORD dwLineStates, DWORD dwAddressStates );",
            "name": "TSPI_lineSetStatusMessages"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetTerminal( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwAddressID, HDRVCALL hdCall, DWORD dwSelect, DWORD dwTerminalModes, DWORD dwTerminalID, DWORD bEnable );",
            "name": "TSPI_lineSetTerminal"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetupConference( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, HDRVLINE hdLine, HTAPICALL htConfCall, LPHDRVCALL lphdConfCall, HTAPICALL htConsultCall, LPHDRVCALL lphdConsultCall, DWORD dwNumParties, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_lineSetupConference"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSetupTransfer( DRV_REQUESTID dwRequestID, HDRVCALL hdCall, HTAPICALL htConsultCall, LPHDRVCALL lphdConsultCall, LPLINECALLPARAMS const lpCallParams );",
            "name": "TSPI_lineSetupTransfer"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineSwapHold( DRV_REQUESTID dwRequestID, HDRVCALL hdActiveCall, HDRVCALL hdHeldCall );",
            "name": "TSPI_lineSwapHold"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineUncompleteCall( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwCompletionID );",
            "name": "TSPI_lineUncompleteCall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineUnhold( DRV_REQUESTID dwRequestID, HDRVCALL hdCall );",
            "name": "TSPI_lineUnhold"
        },
        {
            "signature": "LONG TSPIAPI TSPI_lineUnpark( DRV_REQUESTID dwRequestID, HDRVLINE hdLine, DWORD dwAddressID, HTAPICALL htCall, LPHDRVCALL lphdCall, LPCWSTR lpszDestAddress );",
            "name": "TSPI_lineUnpark"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneClose( HDRVPHONE hdPhone );",
            "name": "TSPI_phoneClose"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneConfigDialog( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );",
            "name": "TSPI_phoneConfigDialog"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneDevSpecific( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, LPVOID lpParams, DWORD dwSize );",
            "name": "TSPI_phoneDevSpecific"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetButtonInfo( HDRVPHONE hdPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO lpButtonInfo );",
            "name": "TSPI_phoneGetButtonInfo"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetData( HDRVPHONE hdPhone, DWORD dwDataID, LPVOID lpData, DWORD dwSize );",
            "name": "TSPI_phoneGetData"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetDevCaps( DWORD dwDeviceID, DWORD dwTSPIVersion, DWORD dwExtVersion, LPPHONECAPS lpPhoneCaps );",
            "name": "TSPI_phoneGetDevCaps"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetDisplay( HDRVPHONE hdPhone, LPVARSTRING lpDisplay );",
            "name": "TSPI_phoneGetDisplay"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetExtensionID( DWORD dwDeviceID, DWORD dwTSPIVersion, LPPHONEEXTENSIONID lpExtensionID );",
            "name": "TSPI_phoneGetExtensionID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetGain( HDRVPHONE hdPhone, DWORD dwHookSwitchDev, LPDWORD lpdwGain );",
            "name": "TSPI_phoneGetGain"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetHookSwitch( HDRVPHONE hdPhone, LPDWORD lpdwHookSwitchDevs );",
            "name": "TSPI_phoneGetHookSwitch"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetIcon( DWORD dwDeviceID, LPCWSTR lpszDeviceClass, LPHICON lphIcon );",
            "name": "TSPI_phoneGetIcon"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetID( HDRVPHONE hdPhone, LPVARSTRING lpDeviceID, LPCWSTR lpszDeviceClass, HANDLE hTargetProcess );",
            "name": "TSPI_phoneGetID"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetLamp( HDRVPHONE hdPhone, DWORD dwButtonLampID, LPDWORD lpdwLampMode );",
            "name": "TSPI_phoneGetLamp"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetRing( HDRVPHONE hdPhone, LPDWORD lpdwRingMode, LPDWORD lpdwVolume );",
            "name": "TSPI_phoneGetRing"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetStatus( HDRVPHONE hdPhone, LPPHONESTATUS lpPhoneStatus );",
            "name": "TSPI_phoneGetStatus"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneGetVolume( HDRVPHONE hdPhone, DWORD dwHookSwitchDev, LPDWORD lpdwVolume );",
            "name": "TSPI_phoneGetVolume"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneNegotiateExtVersion( DWORD dwDeviceID, DWORD dwTSPIVersion, DWORD dwLowVersion, DWORD dwHighVersion, LPDWORD lpdwExtVersion );",
            "name": "TSPI_phoneNegotiateExtVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneNegotiateTSPIVersion( DWORD dwDeviceID, DWORD dwLowVersion, DWORD dwHighVersion, LPDWORD lpdwTSPIVersion );",
            "name": "TSPI_phoneNegotiateTSPIVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneOpen( DWORD dwDeviceID, HTAPIPHONE htPhone, LPHDRVPHONE lphdPhone, DWORD dwTSPIVersion, PHONEEVENT lpfnEventProc );",
            "name": "TSPI_phoneOpen"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSelectExtVersion( HDRVPHONE hdPhone, DWORD dwExtVersion );",
            "name": "TSPI_phoneSelectExtVersion"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetButtonInfo( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwButtonLampID, LPPHONEBUTTONINFO const lpButtonInfo );",
            "name": "TSPI_phoneSetButtonInfo"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetData( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwDataID, LPVOID const lpData, DWORD dwSize );",
            "name": "TSPI_phoneSetData"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetDisplay( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwRow, DWORD dwColumn, LPCWSTR lpsDisplay, DWORD dwSize );",
            "name": "TSPI_phoneSetDisplay"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetGain( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwHookSwitchDev, DWORD dwGain );",
            "name": "TSPI_phoneSetGain"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetHookSwitch( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwHookSwitchDevs, DWORD dwHookSwitchMode );",
            "name": "TSPI_phoneSetHookSwitch"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetLamp( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwButtonLampID, DWORD dwLampMode );",
            "name": "TSPI_phoneSetLamp"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetRing( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwRingMode, DWORD dwVolume );",
            "name": "TSPI_phoneSetRing"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetStatusMessages( HDRVPHONE hdPhone, DWORD dwPhoneStates, DWORD dwButtonModes, DWORD dwButtonStates );",
            "name": "TSPI_phoneSetStatusMessages"
        },
        {
            "signature": "LONG TSPIAPI TSPI_phoneSetVolume( DRV_REQUESTID dwRequestID, HDRVPHONE hdPhone, DWORD dwHookSwitchDev, DWORD dwVolume );",
            "name": "TSPI_phoneSetVolume"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerConfig( HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TSPI_providerConfig"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerCreateLineDevice( DWORD_PTR dwTempID, DWORD dwDeviceID );",
            "name": "TSPI_providerCreateLineDevice"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerCreatePhoneDevice( DWORD_PTR dwTempID, DWORD dwDeviceID );",
            "name": "TSPI_providerCreatePhoneDevice"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerEnumDevices( DWORD dwPermanentProviderID, LPDWORD lpdwNumLines, LPDWORD lpdwNumPhones, HPROVIDER hProvider, LINEEVENT lpfnLineCreateProc, PHONEEVENT lpfnPhoneCreateProc );",
            "name": "TSPI_providerEnumDevices"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerFreeDialogInstance( HDRVDIALOGINSTANCE hdDlgInst );",
            "name": "TSPI_providerFreeDialogInstance"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerGenericDialogData( DWORD_PTR dwObjectID, DWORD dwObjectType, LPVOID lpParams, DWORD dwSize );",
            "name": "TSPI_providerGenericDialogData"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerInit( DWORD dwTSPIVersion, DWORD dwPermanentProviderID, DWORD dwLineDeviceIDBase, DWORD dwPhoneDeviceIDBase, DWORD_PTR dwNumLines, DWORD_PTR dwNumPhones, ASYNC_COMPLETION lpfnCompletionProc, LPDWORD lpdwTSPIOptions );",
            "name": "TSPI_providerInit"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerInstall( HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TSPI_providerInstall"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerRemove( HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TSPI_providerRemove"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerShutdown( DWORD dwTSPIVersion, DWORD dwPermanentProviderID );",
            "name": "TSPI_providerShutdown"
        },
        {
            "signature": "LONG TSPIAPI TSPI_providerUIIdentify( LPWSTR lpszUIDLLName );",
            "name": "TSPI_providerUIIdentify"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_lineConfigDialog( TUISPIDLLCALLBACK lpfnUIDLLCallback, DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass );",
            "name": "TUISPI_lineConfigDialog"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_lineConfigDialogEdit( TUISPIDLLCALLBACK lpfnUIDLLCallback, DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );",
            "name": "TUISPI_lineConfigDialogEdit"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_phoneConfigDialog( TUISPIDLLCALLBACK lpfnUIDLLCallback, DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass );",
            "name": "TUISPI_phoneConfigDialog"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_providerConfig( TUISPIDLLCALLBACK lpfnUIDLLCallback, HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TUISPI_providerConfig"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_providerGenericDialog( TUISPIDLLCALLBACK lpfnUIDLLCallback, HTAPIDIALOGINSTANCE htDlgInst, LPVOID lpParams, DWORD dwSize, HANDLE hEvent );",
            "name": "TUISPI_providerGenericDialog"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_providerGenericDialogData( HTAPIDIALOGINSTANCE htDlgInst, LPVOID lpParams, DWORD dwSize );",
            "name": "TUISPI_providerGenericDialogData"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_providerInstall( TUISPIDLLCALLBACK lpfnUIDLLCallback, HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TUISPI_providerInstall"
        },
        {
            "signature": "LONG TSPIAPI TUISPI_providerRemove( TUISPIDLLCALLBACK lpfnUIDLLCallback, HWND hwndOwner, DWORD dwPermanentProviderID );",
            "name": "TUISPI_providerRemove"
        },
        {
            "signature": "TUISPIDLLCALLBACK Tuispidllcallback; LONG Tuispidllcallback( DWORD_PTR dwObjectID, DWORD dwObjectType, LPVOID lpParams, DWORD dwSize ) {...}",
            "name": "TUISPIDLLCALLBACK callback"
        }
    ],
    "Tspubplugin2com.h": [],
    "Tspubplugincom.h": [],
    "Tssbx.h": [],
    "Tsuserex.h": [],
    "Tsvirtualchannels.h": [],
    "Tvout.h": [],
    "Txfw32.h": [
        {
            "signature": "void TxfGetThreadMiniVersionForCreate( PUSHORT MiniVersion );",
            "name": "TxfGetThreadMiniVersionForCreate"
        },
        {
            "signature": "BOOL TxfLogCreateFileReadContext( [in] LPCWSTR LogPath, [in] CLFS_LSN BeginningLsn, [in] CLFS_LSN EndingLsn, [in] PTXF_ID TxfFileId, [out] PVOID *TxfLogContext );",
            "name": "TxfLogCreateFileReadContext"
        },
        {
            "signature": "BOOL TxfLogCreateRangeReadContext( LPCWSTR LogPath, CLFS_LSN BeginningLsn, CLFS_LSN EndingLsn, PLARGE_INTEGER BeginningVirtualClock, PLARGE_INTEGER EndingVirtualClock, ULONG RecordTypeMask, PVOID *TxfLogContext );",
            "name": "TxfLogCreateRangeReadContext"
        },
        {
            "signature": "BOOL TxfLogDestroyReadContext( [in] PVOID TxfLogContext );",
            "name": "TxfLogDestroyReadContext"
        },
        {
            "signature": "BOOL TxfLogReadRecords( [in] PVOID TxfLogContext, [in] ULONG BufferLength, [out] PVOID Buffer, [out] PULONG BytesUsed, [out] PULONG RecordCount );",
            "name": "TxfLogReadRecords"
        },
        {
            "signature": "void TxfSetThreadMiniVersionForCreate( USHORT MiniVersion );",
            "name": "TxfSetThreadMiniVersionForCreate"
        }
    ],
    "Txlogpub.h": [],
    "Ual.h": [
        {
            "signature": "HRESULT UalInstrument( [in] PUAL_DATA_BLOB Data );",
            "name": "UalInstrument"
        },
        {
            "signature": "HRESULT UalRegisterProduct( [in] const WCHAR *wszProductName, [in] const WCHAR *wszRoleName, [in] const WCHAR *wszGuid );",
            "name": "UalRegisterProduct"
        },
        {
            "signature": "HRESULT UalStart( [in] PUAL_DATA_BLOB Data );",
            "name": "UalStart"
        },
        {
            "signature": "HRESULT UalStop( [in] PUAL_DATA_BLOB Data );",
            "name": "UalStop"
        }
    ],
    "Udpmib.h": [],
    "Uianimation.h": [],
    "Uiautomationclient.h": [],
    "Uiautomationcore.h": [],
    "Uiautomationcoreapi.h": [
        {
            "signature": "HRESULT DockPattern_SetDockPosition( [in] HUIAPATTERNOBJECT hobj, [in] DockPosition dockPosition );",
            "name": "DockPattern_SetDockPosition"
        },
        {
            "signature": "HRESULT ExpandCollapsePattern_Collapse( [in] HUIAPATTERNOBJECT hobj );",
            "name": "ExpandCollapsePattern_Collapse"
        },
        {
            "signature": "HRESULT ExpandCollapsePattern_Expand( [in] HUIAPATTERNOBJECT hobj );",
            "name": "ExpandCollapsePattern_Expand"
        },
        {
            "signature": "HRESULT GridPattern_GetItem( [in] HUIAPATTERNOBJECT hobj, [in] int row, [in] int column, [out] HUIANODE *pResult );",
            "name": "GridPattern_GetItem"
        },
        {
            "signature": "HRESULT InvokePattern_Invoke( [in] HUIAPATTERNOBJECT hobj );",
            "name": "InvokePattern_Invoke"
        },
        {
            "signature": "HRESULT ItemContainerPattern_FindItemByProperty( [in] HUIAPATTERNOBJECT hobj, [in] HUIANODE hnodeStartAfter, [in] PROPERTYID propertyId, [in] VARIANT value, [out] HUIANODE *pFound );",
            "name": "ItemContainerPattern_FindItemByProperty"
        },
        {
            "signature": "HRESULT LegacyIAccessiblePattern_DoDefaultAction( [in] HUIAPATTERNOBJECT hobj );",
            "name": "LegacyIAccessiblePattern_DoDefaultAction"
        },
        {
            "signature": "HRESULT LegacyIAccessiblePattern_GetIAccessible( [in] HUIAPATTERNOBJECT hobj, [out] IAccessible **pAccessible );",
            "name": "LegacyIAccessiblePattern_GetIAccessible"
        },
        {
            "signature": "HRESULT LegacyIAccessiblePattern_Select( [in] HUIAPATTERNOBJECT hobj, [in] long flagsSelect );",
            "name": "LegacyIAccessiblePattern_Select"
        },
        {
            "signature": "HRESULT LegacyIAccessiblePattern_SetValue( [in] HUIAPATTERNOBJECT hobj, [in] LPCWSTR szValue );",
            "name": "LegacyIAccessiblePattern_SetValue"
        },
        {
            "signature": "HRESULT MultipleViewPattern_GetViewName( [in] HUIAPATTERNOBJECT hobj, [in] int viewId, [out] BSTR *ppStr );",
            "name": "MultipleViewPattern_GetViewName"
        },
        {
            "signature": "HRESULT MultipleViewPattern_SetCurrentView( [in] HUIAPATTERNOBJECT hobj, [in] int viewId );",
            "name": "MultipleViewPattern_SetCurrentView"
        },
        {
            "signature": "HRESULT RangeValuePattern_SetValue( [in] HUIAPATTERNOBJECT hobj, [in] double val );",
            "name": "RangeValuePattern_SetValue"
        },
        {
            "signature": "HRESULT ScrollItemPattern_ScrollIntoView( [in] HUIAPATTERNOBJECT hobj );",
            "name": "ScrollItemPattern_ScrollIntoView"
        },
        {
            "signature": "HRESULT ScrollPattern_Scroll( [in] HUIAPATTERNOBJECT hobj, [in] ScrollAmount horizontalAmount, [in] ScrollAmount verticalAmount );",
            "name": "ScrollPattern_Scroll"
        },
        {
            "signature": "HRESULT ScrollPattern_SetScrollPercent( [in] HUIAPATTERNOBJECT hobj, [in] double horizontalPercent, [in] double verticalPercent );",
            "name": "ScrollPattern_SetScrollPercent"
        },
        {
            "signature": "HRESULT SelectionItemPattern_AddToSelection( [in] HUIAPATTERNOBJECT hobj );",
            "name": "SelectionItemPattern_AddToSelection"
        },
        {
            "signature": "HRESULT SelectionItemPattern_RemoveFromSelection( [in] HUIAPATTERNOBJECT hobj );",
            "name": "SelectionItemPattern_RemoveFromSelection"
        },
        {
            "signature": "HRESULT SelectionItemPattern_Select( [in] HUIAPATTERNOBJECT hobj );",
            "name": "SelectionItemPattern_Select"
        },
        {
            "signature": "HRESULT SynchronizedInputPattern_Cancel( [in] HUIAPATTERNOBJECT hobj );",
            "name": "SynchronizedInputPattern_Cancel"
        },
        {
            "signature": "HRESULT SynchronizedInputPattern_StartListening( [in] HUIAPATTERNOBJECT hobj, [in] SynchronizedInputType inputType );",
            "name": "SynchronizedInputPattern_StartListening"
        },
        {
            "signature": "HRESULT TextPattern_get_DocumentRange( [in] HUIAPATTERNOBJECT hobj, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextPattern_get_DocumentRange"
        },
        {
            "signature": "HRESULT TextPattern_get_SupportedTextSelection( [in] HUIAPATTERNOBJECT hobj, [out] SupportedTextSelection *pRetVal );",
            "name": "TextPattern_get_SupportedTextSelection"
        },
        {
            "signature": "HRESULT TextPattern_GetSelection( [in] HUIAPATTERNOBJECT hobj, [out] SAFEARRAY **pRetVal );",
            "name": "TextPattern_GetSelection"
        },
        {
            "signature": "HRESULT TextPattern_GetVisibleRanges( [in] HUIAPATTERNOBJECT hobj, [out] SAFEARRAY **pRetVal );",
            "name": "TextPattern_GetVisibleRanges"
        },
        {
            "signature": "HRESULT TextPattern_RangeFromChild( [in] HUIAPATTERNOBJECT hobj, [in] HUIANODE hnodeChild, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextPattern_RangeFromChild"
        },
        {
            "signature": "HRESULT TextPattern_RangeFromPoint( [in] HUIAPATTERNOBJECT hobj, [in] UiaPoint point, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextPattern_RangeFromPoint"
        },
        {
            "signature": "HRESULT TextRange_AddToSelection( [in] HUIATEXTRANGE hobj );",
            "name": "TextRange_AddToSelection"
        },
        {
            "signature": "HRESULT TextRange_Clone( [in] HUIATEXTRANGE hobj, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextRange_Clone"
        },
        {
            "signature": "HRESULT TextRange_Compare( [in] HUIATEXTRANGE hobj, [in] HUIATEXTRANGE range, [out] BOOL *pRetVal );",
            "name": "TextRange_Compare"
        },
        {
            "signature": "HRESULT TextRange_CompareEndpoints( [in] HUIATEXTRANGE hobj, [in] TextPatternRangeEndpoint endpoint, [in] HUIATEXTRANGE targetRange, [in] TextPatternRangeEndpoint targetEndpoint, [out] int *pRetVal );",
            "name": "TextRange_CompareEndpoints"
        },
        {
            "signature": "HRESULT TextRange_ExpandToEnclosingUnit( [in] HUIATEXTRANGE hobj, [in] TextUnit unit );",
            "name": "TextRange_ExpandToEnclosingUnit"
        },
        {
            "signature": "HRESULT TextRange_FindAttribute( [in] HUIATEXTRANGE hobj, [in] TEXTATTRIBUTEID attributeId, [in] VARIANT val, [in] BOOL backward, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextRange_FindAttribute"
        },
        {
            "signature": "HRESULT TextRange_FindText( [in] HUIATEXTRANGE hobj, [in] BSTR text, [in] BOOL backward, [in] BOOL ignoreCase, [out] HUIATEXTRANGE *pRetVal );",
            "name": "TextRange_FindText"
        },
        {
            "signature": "HRESULT TextRange_GetAttributeValue( [in] HUIATEXTRANGE hobj, [in] TEXTATTRIBUTEID attributeId, [out] VARIANT *pRetVal );",
            "name": "TextRange_GetAttributeValue"
        },
        {
            "signature": "HRESULT TextRange_GetBoundingRectangles( [in] HUIATEXTRANGE hobj, [out] SAFEARRAY **pRetVal );",
            "name": "TextRange_GetBoundingRectangles"
        },
        {
            "signature": "HRESULT TextRange_GetChildren( [in] HUIATEXTRANGE hobj, [out] SAFEARRAY **pRetVal );",
            "name": "TextRange_GetChildren"
        },
        {
            "signature": "HRESULT TextRange_GetEnclosingElement( [in] HUIATEXTRANGE hobj, [out] HUIANODE *pRetVal );",
            "name": "TextRange_GetEnclosingElement"
        },
        {
            "signature": "HRESULT TextRange_GetText( [in] HUIATEXTRANGE hobj, [in] int maxLength, [out] BSTR *pRetVal );",
            "name": "TextRange_GetText"
        },
        {
            "signature": "HRESULT TextRange_Move( [in] HUIATEXTRANGE hobj, [in] TextUnit unit, [in] int count, [out] int *pRetVal );",
            "name": "TextRange_Move"
        },
        {
            "signature": "HRESULT TextRange_MoveEndpointByRange( [in] HUIATEXTRANGE hobj, [in] TextPatternRangeEndpoint endpoint, [in] HUIATEXTRANGE targetRange, [in] TextPatternRangeEndpoint targetEndpoint );",
            "name": "TextRange_MoveEndpointByRange"
        },
        {
            "signature": "HRESULT TextRange_MoveEndpointByUnit( [in] HUIATEXTRANGE hobj, [in] TextPatternRangeEndpoint endpoint, [in] TextUnit unit, [in] int count, [out] int *pRetVal );",
            "name": "TextRange_MoveEndpointByUnit"
        },
        {
            "signature": "HRESULT TextRange_RemoveFromSelection( [in] HUIATEXTRANGE hobj );",
            "name": "TextRange_RemoveFromSelection"
        },
        {
            "signature": "HRESULT TextRange_ScrollIntoView( [in] HUIATEXTRANGE hobj, [in] BOOL alignToTop );",
            "name": "TextRange_ScrollIntoView"
        },
        {
            "signature": "HRESULT TextRange_Select( [in] HUIATEXTRANGE hobj );",
            "name": "TextRange_Select"
        },
        {
            "signature": "HRESULT TogglePattern_Toggle( [in] HUIAPATTERNOBJECT hobj );",
            "name": "TogglePattern_Toggle"
        },
        {
            "signature": "HRESULT TransformPattern_Move( [in] HUIAPATTERNOBJECT hobj, [in] double x, [in] double y );",
            "name": "TransformPattern_Move"
        },
        {
            "signature": "HRESULT TransformPattern_Resize( [in] HUIAPATTERNOBJECT hobj, [in] double width, [in] double height );",
            "name": "TransformPattern_Resize"
        },
        {
            "signature": "HRESULT TransformPattern_Rotate( [in] HUIAPATTERNOBJECT hobj, [in] double degrees );",
            "name": "TransformPattern_Rotate"
        },
        {
            "signature": "HRESULT UiaAddEvent( [in] HUIANODE hnode, [in] EVENTID eventId, [in] UiaEventCallback *pCallback, [in] TreeScope scope, [in] PROPERTYID *pProperties, [in] int cProperties, [in] UiaCacheRequest *pRequest, [out] HUIAEVENT *phEvent );",
            "name": "UiaAddEvent"
        },
        {
            "signature": "BOOL UiaClientsAreListening();",
            "name": "UiaClientsAreListening"
        },
        {
            "signature": "HRESULT UiaDisconnectAllProviders();",
            "name": "UiaDisconnectAllProviders"
        },
        {
            "signature": "HRESULT UiaDisconnectProvider( [in] IRawElementProviderSimple *pProvider );",
            "name": "UiaDisconnectProvider"
        },
        {
            "signature": "HRESULT UiaEventAddWindow( [in] HUIAEVENT hEvent, [in] HWND hwnd );",
            "name": "UiaEventAddWindow"
        },
        {
            "signature": "UiaEventCallback Uiaeventcallback; void Uiaeventcallback( [in] UiaEventArgs *pArgs, [in] SAFEARRAY *pRequestedData, [in] BSTR pTreeStructure ) {...}",
            "name": "UiaEventCallback callback"
        },
        {
            "signature": "HRESULT UiaEventRemoveWindow( [in] HUIAEVENT hEvent, [in] HWND hwnd );",
            "name": "UiaEventRemoveWindow"
        },
        {
            "signature": "HRESULT UiaFind( [in] HUIANODE hnode, [in] UiaFindParams *pParams, [in] UiaCacheRequest *pRequest, [out] SAFEARRAY **ppRequestedData, [out] SAFEARRAY **ppOffsets, [out] SAFEARRAY **ppTreeStructures );",
            "name": "UiaFind"
        },
        {
            "signature": "BOOL UiaGetErrorDescription( [out] BSTR *pDescription );",
            "name": "UiaGetErrorDescription"
        },
        {
            "signature": "HRESULT UiaGetPatternProvider( [in] HUIANODE hnode, [in] PATTERNID patternId, [out] HUIAPATTERNOBJECT *phobj );",
            "name": "UiaGetPatternProvider"
        },
        {
            "signature": "HRESULT UiaGetPropertyValue( [in] HUIANODE hnode, [in] PROPERTYID propertyId, [out] VARIANT *pValue );",
            "name": "UiaGetPropertyValue"
        },
        {
            "signature": "HRESULT UiaGetReservedMixedAttributeValue( [out] IUnknown **punkMixedAttributeValue );",
            "name": "UiaGetReservedMixedAttributeValue"
        },
        {
            "signature": "HRESULT UiaGetReservedNotSupportedValue( [out] IUnknown **punkNotSupportedValue );",
            "name": "UiaGetReservedNotSupportedValue"
        },
        {
            "signature": "HRESULT UiaGetRootNode( [out] HUIANODE *phnode );",
            "name": "UiaGetRootNode"
        },
        {
            "signature": "HRESULT UiaGetRuntimeId( [in] HUIANODE hnode, [out] SAFEARRAY **pruntimeId );",
            "name": "UiaGetRuntimeId"
        },
        {
            "signature": "HRESULT UiaGetUpdatedCache( [in] HUIANODE hnode, [in] UiaCacheRequest *pRequest, [in] NormalizeState normalizeState, [in] UiaCondition *pNormalizeCondition, [out] SAFEARRAY **ppRequestedData, [out] BSTR *ppTreeStructure );",
            "name": "UiaGetUpdatedCache"
        },
        {
            "signature": "BOOL UiaHasServerSideProvider( [in] HWND hwnd );",
            "name": "UiaHasServerSideProvider"
        },
        {
            "signature": "HRESULT UiaHostProviderFromHwnd( [in] HWND hwnd, [out] IRawElementProviderSimple **ppProvider );",
            "name": "UiaHostProviderFromHwnd"
        },
        {
            "signature": "HRESULT UiaHPatternObjectFromVariant( [in] VARIANT *pvar, [out] HUIAPATTERNOBJECT *phobj );",
            "name": "UiaHPatternObjectFromVariant"
        },
        {
            "signature": "HRESULT UiaHTextRangeFromVariant( [in] VARIANT *pvar, [out] HUIATEXTRANGE *phtextrange );",
            "name": "UiaHTextRangeFromVariant"
        },
        {
            "signature": "HRESULT UiaHUiaNodeFromVariant( [in] VARIANT *pvar, [out] HUIANODE *phnode );",
            "name": "UiaHUiaNodeFromVariant"
        },
        {
            "signature": "HRESULT UiaIAccessibleFromProvider( [in] IRawElementProviderSimple *pProvider, [in] DWORD dwFlags, [out] IAccessible **ppAccessible, [out] VARIANT *pvarChild );",
            "name": "UiaIAccessibleFromProvider"
        },
        {
            "signature": "int UiaLookupId( [in] AutomationIdentifierType type, [in] const GUID *pGuid );",
            "name": "UiaLookupId"
        },
        {
            "signature": "HRESULT UiaNavigate( [in] HUIANODE hnode, [in] NavigateDirection direction, [in] UiaCondition *pCondition, [in] UiaCacheRequest *pRequest, [out] SAFEARRAY **ppRequestedData, [out] BSTR *ppTreeStructure );",
            "name": "UiaNavigate"
        },
        {
            "signature": "HRESULT UiaNodeFromFocus( [in] UiaCacheRequest *pRequest, [out] SAFEARRAY **ppRequestedData, [out] BSTR *ppTreeStructure );",
            "name": "UiaNodeFromFocus"
        },
        {
            "signature": "HRESULT UiaNodeFromHandle( [in] HWND hwnd, [out] HUIANODE *phnode );",
            "name": "UiaNodeFromHandle"
        },
        {
            "signature": "HRESULT UiaNodeFromPoint( [in] double x, [in] double y, [in] UiaCacheRequest *pRequest, [out] SAFEARRAY **ppRequestedData, [out] BSTR *ppTreeStructure );",
            "name": "UiaNodeFromPoint"
        },
        {
            "signature": "HRESULT UiaNodeFromProvider( [in] IRawElementProviderSimple *pProvider, [out] HUIANODE *phnode );",
            "name": "UiaNodeFromProvider"
        },
        {
            "signature": "BOOL UiaNodeRelease( [in] HUIANODE hnode );",
            "name": "UiaNodeRelease"
        },
        {
            "signature": "BOOL UiaPatternRelease( [in] HUIAPATTERNOBJECT hobj );",
            "name": "UiaPatternRelease"
        },
        {
            "signature": "UiaProviderCallback Uiaprovidercallback; SAFEARRAY * Uiaprovidercallback( [in] HWND hwnd, [in] ProviderType providerType ) {...}",
            "name": "UiaProviderCallback callback"
        },
        {
            "signature": "HRESULT UiaProviderForNonClient( [in] HWND hwnd, [in] long idObject, [in] long idChild, [out] IRawElementProviderSimple **ppProvider );",
            "name": "UiaProviderForNonClient"
        },
        {
            "signature": "HRESULT UiaProviderFromIAccessible( [in] IAccessible *pAccessible, [in] long idChild, [in] DWORD dwFlags, [out] IRawElementProviderSimple **ppProvider );",
            "name": "UiaProviderFromIAccessible"
        },
        {
            "signature": "HRESULT UiaRaiseActiveTextPositionChangedEvent( [in] IRawElementProviderSimple *provider, [in, optional] ITextRangeProvider *textRange );",
            "name": "UiaRaiseActiveTextPositionChangedEvent"
        },
        {
            "signature": "HRESULT UiaRaiseAsyncContentLoadedEvent( [in] IRawElementProviderSimple *pProvider, [in] AsyncContentLoadedState asyncContentLoadedState, [in] double percentComplete );",
            "name": "UiaRaiseAsyncContentLoadedEvent"
        },
        {
            "signature": "HRESULT UiaRaiseAutomationEvent( [in] IRawElementProviderSimple *pProvider, [in] EVENTID id );",
            "name": "UiaRaiseAutomationEvent"
        },
        {
            "signature": "HRESULT UiaRaiseAutomationPropertyChangedEvent( [in] IRawElementProviderSimple *pProvider, [in] PROPERTYID id, [in] VARIANT oldValue, [in] VARIANT newValue );",
            "name": "UiaRaiseAutomationPropertyChangedEvent"
        },
        {
            "signature": "HRESULT UiaRaiseChangesEvent( [in] IRawElementProviderSimple *pProvider, [in] int eventIdCount, [in] UiaChangeInfo *pUiaChanges );",
            "name": "UiaRaiseChangesEvent"
        },
        {
            "signature": "HRESULT UiaRaiseNotificationEvent( [in] IRawElementProviderSimple *provider, NotificationKind notificationKind, NotificationProcessing notificationProcessing, [in, optional] BSTR displayString, [in] BSTR activityId );",
            "name": "UiaRaiseNotificationEvent"
        },
        {
            "signature": "HRESULT UiaRaiseStructureChangedEvent( [in] IRawElementProviderSimple *pProvider, [in] StructureChangeType structureChangeType, [in] int *pRuntimeId, [in] int cRuntimeIdLen );",
            "name": "UiaRaiseStructureChangedEvent"
        },
        {
            "signature": "HRESULT UiaRaiseTextEditTextChangedEvent( [in] IRawElementProviderSimple *pProvider, [in] TextEditChangeType textEditChangeType, [in] SAFEARRAY *pChangedData );",
            "name": "UiaRaiseTextEditTextChangedEvent"
        },
        {
            "signature": "bool UiaRectIsEmpty( [in, ref] const UiaRect & rc );",
            "name": "UiaRectIsEmpty"
        },
        {
            "signature": "void UiaRectSetEmpty( [in, ref] UiaRect & rc );",
            "name": "UiaRectSetEmpty"
        },
        {
            "signature": "void UiaRegisterProviderCallback( [in] UiaProviderCallback *pCallback );",
            "name": "UiaRegisterProviderCallback"
        },
        {
            "signature": "HRESULT UiaRemoveEvent( [in] HUIAEVENT hEvent );",
            "name": "UiaRemoveEvent"
        },
        {
            "signature": "LRESULT UiaReturnRawElementProvider( [in] HWND hwnd, [in] WPARAM wParam, [in] LPARAM lParam, [in] IRawElementProviderSimple *el );",
            "name": "UiaReturnRawElementProvider"
        },
        {
            "signature": "HRESULT UiaSetFocus( [in] HUIANODE hnode );",
            "name": "UiaSetFocus"
        },
        {
            "signature": "BOOL UiaTextRangeRelease( [in] HUIATEXTRANGE hobj );",
            "name": "UiaTextRangeRelease"
        },
        {
            "signature": "HRESULT ValuePattern_SetValue( [in] HUIAPATTERNOBJECT hobj, [in] LPCWSTR pVal );",
            "name": "ValuePattern_SetValue"
        },
        {
            "signature": "HRESULT VirtualizedItemPattern_Realize( [in] HUIAPATTERNOBJECT hobj );",
            "name": "VirtualizedItemPattern_Realize"
        },
        {
            "signature": "HRESULT WindowPattern_Close( [in] HUIAPATTERNOBJECT hobj );",
            "name": "WindowPattern_Close"
        },
        {
            "signature": "HRESULT WindowPattern_SetWindowVisualState( [in] HUIAPATTERNOBJECT hobj, [in] WindowVisualState state );",
            "name": "WindowPattern_SetWindowVisualState"
        },
        {
            "signature": "HRESULT WindowPattern_WaitForInputIdle( [in] HUIAPATTERNOBJECT hobj, [in] int milliseconds, [out] BOOL *pResult );",
            "name": "WindowPattern_WaitForInputIdle"
        }
    ],
    "Uiribbon.h": [],
    "Uiviewsettingsinterop.h": [],
    "Unknwn.h": [],
    "Unknwnbase.h": [
        {
            "signature": "ULONG IUnknown_AddRef_Proxy( IUnknown *This );",
            "name": "IUnknown_AddRef_Proxy"
        },
        {
            "signature": "HRESULT IUnknown_QueryInterface_Proxy( [in] IUnknown *This, [in] REFIID riid, [out] void **ppvObject );",
            "name": "IUnknown_QueryInterface_Proxy"
        },
        {
            "signature": "ULONG IUnknown_Release_Proxy( IUnknown *This );",
            "name": "IUnknown_Release_Proxy"
        }
    ],
    "Upnp.h": [],
    "Upnphost.h": [],
    "Urlmon.h": [
        {
            "signature": "HRESULT CreateAsyncBindCtx( [in] DWORD reserved, [in] IBindStatusCallback *pBSCb, [in] IEnumFORMATETC *pEFetc, [out] IBindCtx **ppBC );",
            "name": "CreateAsyncBindCtx"
        },
        {
            "signature": "HRESULT CreateFormatEnumerator( [in] UINT cfmtetc, [in] FORMATETC *rgfmtetc, [out] IEnumFORMATETC **ppenumfmtetc );",
            "name": "CreateFormatEnumerator"
        }
    ],
    "Usbuser.h": [],
    "Useractivityinterop.h": [],
    "Userconsentverifierinterop.h": [],
    "Userenv.h": [
        {
            "signature": "USERENVAPI HRESULT CreateAppContainerProfile( [in] PCWSTR pszAppContainerName, [in] PCWSTR pszDisplayName, [in] PCWSTR pszDescription, [in] PSID_AND_ATTRIBUTES pCapabilities, [in] DWORD dwCapabilityCount, [out] PSID *ppSidAppContainerSid );",
            "name": "CreateAppContainerProfile"
        },
        {
            "signature": "BOOL CreateEnvironmentBlock( [out] LPVOID *lpEnvironment, [in, optional] HANDLE hToken, [in] BOOL bInherit );",
            "name": "CreateEnvironmentBlock"
        },
        {
            "signature": "USERENVAPI HRESULT CreateProfile( [in] LPCWSTR pszUserSid, [in] LPCWSTR pszUserName, [out] LPWSTR pszProfilePath, [in] DWORD cchProfilePath );",
            "name": "CreateProfile"
        },
        {
            "signature": "USERENVAPI HRESULT DeleteAppContainerProfile( [in] PCWSTR pszAppContainerName );",
            "name": "DeleteAppContainerProfile"
        },
        {
            "signature": "USERENVAPI BOOL DeleteProfileA( [in] LPCSTR lpSidString, [in, optional] LPCSTR lpProfilePath, [in, optional] LPCSTR lpComputerName );",
            "name": "DeleteProfileA"
        },
        {
            "signature": "USERENVAPI BOOL DeleteProfileW( [in] LPCWSTR lpSidString, [in, optional] LPCWSTR lpProfilePath, [in, optional] LPCWSTR lpComputerName );",
            "name": "DeleteProfileW"
        },
        {
            "signature": "USERENVAPI HRESULT DeriveAppContainerSidFromAppContainerName( [in] PCWSTR pszAppContainerName, [out] PSID *ppsidAppContainerSid );",
            "name": "DeriveAppContainerSidFromAppContainerName"
        },
        {
            "signature": "USERENVAPI HRESULT DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName( [in] PSID psidAppContainerSid, [in] PCWSTR pszRestrictedAppContainerName, [out] PSID *ppsidRestrictedAppContainerSid );",
            "name": "DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName"
        },
        {
            "signature": "BOOL DestroyEnvironmentBlock( [in] LPVOID lpEnvironment );",
            "name": "DestroyEnvironmentBlock"
        },
        {
            "signature": "USERENVAPI HANDLE EnterCriticalPolicySection( [in] BOOL bMachine );",
            "name": "EnterCriticalPolicySection"
        },
        {
            "signature": "USERENVAPI BOOL ExpandEnvironmentStringsForUserA( [in, optional] HANDLE hToken, [in] LPCSTR lpSrc, [out] LPSTR lpDest, [in] DWORD dwSize );",
            "name": "ExpandEnvironmentStringsForUserA"
        },
        {
            "signature": "USERENVAPI BOOL ExpandEnvironmentStringsForUserW( [in, optional] HANDLE hToken, [in] LPCWSTR lpSrc, [out] LPWSTR lpDest, [in] DWORD dwSize );",
            "name": "ExpandEnvironmentStringsForUserW"
        },
        {
            "signature": "USERENVAPI BOOL FreeGPOListA( [in] PGROUP_POLICY_OBJECTA pGPOList );",
            "name": "FreeGPOListA"
        },
        {
            "signature": "USERENVAPI BOOL FreeGPOListW( [in] PGROUP_POLICY_OBJECTW pGPOList );",
            "name": "FreeGPOListW"
        },
        {
            "signature": "USERENVAPI BOOL GetAllUsersProfileDirectoryA( [out, optional] LPSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetAllUsersProfileDirectoryA"
        },
        {
            "signature": "USERENVAPI BOOL GetAllUsersProfileDirectoryW( [out, optional] LPWSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetAllUsersProfileDirectoryW"
        },
        {
            "signature": "USERENVAPI HRESULT GetAppContainerFolderPath( [in] PCWSTR pszAppContainerSid, [out] PWSTR *ppszPath );",
            "name": "GetAppContainerFolderPath"
        },
        {
            "signature": "USERENVAPI HRESULT GetAppContainerRegistryLocation( [in] REGSAM desiredAccess, [out] PHKEY phAppContainerKey );",
            "name": "GetAppContainerRegistryLocation"
        },
        {
            "signature": "USERENVAPI DWORD GetAppliedGPOListA( [in] DWORD dwFlags, [in] LPCSTR pMachineName, [in] PSID pSidUser, [in] GUID *pGuidExtension, [out] PGROUP_POLICY_OBJECTA *ppGPOList );",
            "name": "GetAppliedGPOListA"
        },
        {
            "signature": "USERENVAPI DWORD GetAppliedGPOListW( [in] DWORD dwFlags, [in] LPCWSTR pMachineName, [in] PSID pSidUser, [in] GUID *pGuidExtension, [out] PGROUP_POLICY_OBJECTW *ppGPOList );",
            "name": "GetAppliedGPOListW"
        },
        {
            "signature": "USERENVAPI BOOL GetDefaultUserProfileDirectoryA( [out, optional] LPSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetDefaultUserProfileDirectoryA"
        },
        {
            "signature": "USERENVAPI BOOL GetDefaultUserProfileDirectoryW( [out, optional] LPWSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetDefaultUserProfileDirectoryW"
        },
        {
            "signature": "USERENVAPI BOOL GetGPOListA( [in] HANDLE hToken, [in] LPCSTR lpName, [in] LPCSTR lpHostName, [in] LPCSTR lpComputerName, [in] DWORD dwFlags, [out] PGROUP_POLICY_OBJECTA *pGPOList );",
            "name": "GetGPOListA"
        },
        {
            "signature": "USERENVAPI BOOL GetGPOListW( [in] HANDLE hToken, [in] LPCWSTR lpName, [in] LPCWSTR lpHostName, [in] LPCWSTR lpComputerName, [in] DWORD dwFlags, [out] PGROUP_POLICY_OBJECTW *pGPOList );",
            "name": "GetGPOListW"
        },
        {
            "signature": "USERENVAPI BOOL GetProfilesDirectoryA( [out] LPSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetProfilesDirectoryA"
        },
        {
            "signature": "USERENVAPI BOOL GetProfilesDirectoryW( [out] LPWSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetProfilesDirectoryW"
        },
        {
            "signature": "USERENVAPI BOOL GetProfileType( [out] DWORD *dwFlags );",
            "name": "GetProfileType"
        },
        {
            "signature": "USERENVAPI BOOL GetUserProfileDirectoryA( [in] HANDLE hToken, [out, optional] LPSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetUserProfileDirectoryA"
        },
        {
            "signature": "USERENVAPI BOOL GetUserProfileDirectoryW( [in] HANDLE hToken, [out, optional] LPWSTR lpProfileDir, [in, out] LPDWORD lpcchSize );",
            "name": "GetUserProfileDirectoryW"
        },
        {
            "signature": "USERENVAPI BOOL LeaveCriticalPolicySection( [in] HANDLE hSection );",
            "name": "LeaveCriticalPolicySection"
        },
        {
            "signature": "USERENVAPI BOOL LoadUserProfileA( [in] HANDLE hToken, [in, out] LPPROFILEINFOA lpProfileInfo );",
            "name": "LoadUserProfileA"
        },
        {
            "signature": "USERENVAPI BOOL LoadUserProfileW( [in] HANDLE hToken, [in, out] LPPROFILEINFOW lpProfileInfo );",
            "name": "LoadUserProfileW"
        },
        {
            "signature": "PFNGENERATEGROUPPOLICY Pfngenerategrouppolicy; DWORD Pfngenerategrouppolicy( [in] DWORD dwFlags, [in] BOOL *pbAbort, [in] WCHAR *pwszSite, [in] PRSOP_TARGET pComputerTarget, [in] PRSOP_TARGET pUserTarget ) {...}",
            "name": "PFNGENERATEGROUPPOLICY callback"
        },
        {
            "signature": "PFNPROCESSGROUPPOLICY Pfnprocessgrouppolicy; DWORD Pfnprocessgrouppolicy( [in] DWORD dwFlags, [in] HANDLE hToken, [in] HKEY hKeyRoot, [in] PGROUP_POLICY_OBJECT pDeletedGPOList, [in] PGROUP_POLICY_OBJECT pChangedGPOList, [in] ASYNCCOMPLETIONHANDLE pHandle, [in] BOOL *pbAbort, [in] PFNSTATUSMESSAGECALLBACK pStatusCallback ) {...}",
            "name": "PFNPROCESSGROUPPOLICY callback"
        },
        {
            "signature": "PFNPROCESSGROUPPOLICYEX Pfnprocessgrouppolicyex; DWORD Pfnprocessgrouppolicyex( [in] DWORD dwFlags, [in] HANDLE hToken, [in] HKEY hKeyRoot, [in] PGROUP_POLICY_OBJECT pDeletedGPOList, [in] PGROUP_POLICY_OBJECT pChangedGPOList, [in] ASYNCCOMPLETIONHANDLE pHandle, [in] BOOL *pbAbort, [in] PFNSTATUSMESSAGECALLBACK pStatusCallback, [in] IWbemServices *pWbemServices, [out] HRESULT *pRsopStatus ) {...}",
            "name": "PFNPROCESSGROUPPOLICYEX callback"
        },
        {
            "signature": "PFNSTATUSMESSAGECALLBACK Pfnstatusmessagecallback; DWORD Pfnstatusmessagecallback( [in] BOOL bVerbose, [in] LPWSTR lpMessage ) {...}",
            "name": "PFNSTATUSMESSAGECALLBACK callback"
        },
        {
            "signature": "USERENVAPI DWORD ProcessGroupPolicyCompleted( [in] REFGPEXTENSIONID extensionId, [in] ASYNCCOMPLETIONHANDLE pAsyncHandle, [in] DWORD dwStatus );",
            "name": "ProcessGroupPolicyCompleted"
        },
        {
            "signature": "USERENVAPI DWORD ProcessGroupPolicyCompletedEx( [in] REFGPEXTENSIONID extensionId, [in] ASYNCCOMPLETIONHANDLE pAsyncHandle, [in] DWORD dwStatus, [in] HRESULT RsopStatus );",
            "name": "ProcessGroupPolicyCompletedEx"
        },
        {
            "signature": "USERENVAPI BOOL RefreshPolicy( [in] BOOL bMachine );",
            "name": "RefreshPolicy"
        },
        {
            "signature": "USERENVAPI BOOL RefreshPolicyEx( [in] BOOL bMachine, [in] DWORD dwOptions );",
            "name": "RefreshPolicyEx"
        },
        {
            "signature": "USERENVAPI BOOL RegisterGPNotification( [in] HANDLE hEvent, [in] BOOL bMachine );",
            "name": "RegisterGPNotification"
        },
        {
            "signature": "USERENVAPI HRESULT RsopAccessCheckByType( [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] PSID pPrincipalSelfSid, [in] PRSOPTOKEN pRsopToken, [in] DWORD dwDesiredAccessMask, [in] POBJECT_TYPE_LIST pObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING pGenericMapping, [in] PPRIVILEGE_SET pPrivilegeSet, [in] LPDWORD pdwPrivilegeSetLength, [out] LPDWORD pdwGrantedAccessMask, [out] LPBOOL pbAccessStatus );",
            "name": "RsopAccessCheckByType"
        },
        {
            "signature": "USERENVAPI HRESULT RsopFileAccessCheck( [in] LPWSTR pszFileName, [in] PRSOPTOKEN pRsopToken, [in] DWORD dwDesiredAccessMask, [out] LPDWORD pdwGrantedAccessMask, [out] LPBOOL pbAccessStatus );",
            "name": "RsopFileAccessCheck"
        },
        {
            "signature": "USERENVAPI HRESULT RsopResetPolicySettingStatus( [in] DWORD dwFlags, [in] IWbemServices *pServices, [in] IWbemClassObject *pSettingInstance );",
            "name": "RsopResetPolicySettingStatus"
        },
        {
            "signature": "USERENVAPI HRESULT RsopSetPolicySettingStatus( [in] DWORD dwFlags, [in] IWbemServices *pServices, [in] IWbemClassObject *pSettingInstance, [in] DWORD nInfo, [in] POLICYSETTINGSTATUSINFO *pStatus );",
            "name": "RsopSetPolicySettingStatus"
        },
        {
            "signature": "USERENVAPI BOOL UnloadUserProfile( [in] HANDLE hToken, [in] HANDLE hProfile );",
            "name": "UnloadUserProfile"
        },
        {
            "signature": "USERENVAPI BOOL UnregisterGPNotification( [in] HANDLE hEvent );",
            "name": "UnregisterGPNotification"
        }
    ],
    "Usp10.h": [
        {
            "signature": "HRESULT ScriptApplyDigitSubstitution( [in] const SCRIPT_DIGITSUBSTITUTE *psds, [out] SCRIPT_CONTROL *psc, [out] SCRIPT_STATE *pss );",
            "name": "ScriptApplyDigitSubstitution"
        },
        {
            "signature": "HRESULT ScriptApplyLogicalWidth( [in] const int *piDx, [in] int cChars, [in] int cGlyphs, [in] const WORD *pwLogClust, [in] const SCRIPT_VISATTR *psva, [in] const int *piAdvance, [in] const SCRIPT_ANALYSIS *psa, [in, out, optional] ABC *pABC, [out] int *piJustify );",
            "name": "ScriptApplyLogicalWidth"
        },
        {
            "signature": "HRESULT ScriptBreak( [in] const WCHAR *pwcChars, [in] int cChars, [in] const SCRIPT_ANALYSIS *psa, [out] SCRIPT_LOGATTR *psla );",
            "name": "ScriptBreak"
        },
        {
            "signature": "HRESULT ScriptCacheGetHeight( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [out] long *tmHeight );",
            "name": "ScriptCacheGetHeight"
        },
        {
            "signature": "HRESULT ScriptCPtoX( [in] int iCP, [in] BOOL fTrailing, [in] int cChars, [in] int cGlyphs, [in] const WORD *pwLogClust, [in] const SCRIPT_VISATTR *psva, [in] const int *piAdvance, [in] const SCRIPT_ANALYSIS *psa, [out] int *piX );",
            "name": "ScriptCPtoX"
        },
        {
            "signature": "HRESULT ScriptFreeCache( [in, out] SCRIPT_CACHE *psc );",
            "name": "ScriptFreeCache"
        },
        {
            "signature": "HRESULT ScriptGetCMap( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in] const WCHAR *pwcInChars, [in] int cChars, [in] DWORD dwFlags, [out] WORD *pwOutGlyphs );",
            "name": "ScriptGetCMap"
        },
        {
            "signature": "HRESULT ScriptGetFontAlternateGlyphs( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in] OPENTYPE_TAG tagFeature, [in] WORD wGlyphId, [in] int cMaxAlternates, [out] WORD *pAlternateGlyphs, [out] int *pcAlternates );",
            "name": "ScriptGetFontAlternateGlyphs"
        },
        {
            "signature": "HRESULT ScriptGetFontFeatureTags( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in] int cMaxTags, [out] OPENTYPE_TAG *pFeatureTags, [out] int *pcTags );",
            "name": "ScriptGetFontFeatureTags"
        },
        {
            "signature": "HRESULT ScriptGetFontLanguageTags( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] int cMaxTags, [out] OPENTYPE_TAG *pLangsysTags, [out] int *pcTags );",
            "name": "ScriptGetFontLanguageTags"
        },
        {
            "signature": "HRESULT ScriptGetFontProperties( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [out] SCRIPT_FONTPROPERTIES *sfp );",
            "name": "ScriptGetFontProperties"
        },
        {
            "signature": "HRESULT ScriptGetFontScriptTags( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] int cMaxTags, [out] OPENTYPE_TAG *pScriptTags, [out] int *pcTags );",
            "name": "ScriptGetFontScriptTags"
        },
        {
            "signature": "HRESULT ScriptGetGlyphABCWidth( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in] WORD wGlyph, [out] ABC *pABC );",
            "name": "ScriptGetGlyphABCWidth"
        },
        {
            "signature": "HRESULT ScriptGetLogicalWidths( [in] const SCRIPT_ANALYSIS *psa, [in] int cChars, [in] int cGlyphs, [in] const int *piGlyphWidth, [in] const WORD *pwLogClust, [in] const SCRIPT_VISATTR *psva, [out] int *piDx );",
            "name": "ScriptGetLogicalWidths"
        },
        {
            "signature": "HRESULT ScriptGetProperties( [out] const SCRIPT_PROPERTIES ***ppSp, [out] int *piNumScripts );",
            "name": "ScriptGetProperties"
        },
        {
            "signature": "HRESULT ScriptIsComplex( [in] const WCHAR *pwcInChars, [in] int cInChars, [in] DWORD dwFlags );",
            "name": "ScriptIsComplex"
        },
        {
            "signature": "HRESULT ScriptItemize( [in] const WCHAR *pwcInChars, [in] int cInChars, [in] int cMaxItems, [in, optional] const SCRIPT_CONTROL *psControl, [in, optional] const SCRIPT_STATE *psState, [out] SCRIPT_ITEM *pItems, [out] int *pcItems );",
            "name": "ScriptItemize"
        },
        {
            "signature": "HRESULT ScriptItemizeOpenType( [in] const WCHAR *pwcInChars, [in] int cInChars, [in] int cMaxItems, [in, optional] const SCRIPT_CONTROL *psControl, [in, optional] const SCRIPT_STATE *psState, [out] SCRIPT_ITEM *pItems, [out] OPENTYPE_TAG *pScriptTags, [out] int *pcItems );",
            "name": "ScriptItemizeOpenType"
        },
        {
            "signature": "HRESULT ScriptJustify( [in] const SCRIPT_VISATTR *psva, [in] const int *piAdvance, [in] int cGlyphs, [in] int iDx, [in] int iMinKashida, [out] int *piJustify );",
            "name": "ScriptJustify"
        },
        {
            "signature": "HRESULT ScriptLayout( [in] int cRuns, [in] const BYTE *pbLevel, [out, optional] int *piVisualToLogical, [out, optional] int *piLogicalToVisual );",
            "name": "ScriptLayout"
        },
        {
            "signature": "HRESULT ScriptPlace( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in] const WORD *pwGlyphs, [in] int cGlyphs, [in] const SCRIPT_VISATTR *psva, [in, out] SCRIPT_ANALYSIS *psa, [out] int *piAdvance, [out] GOFFSET *pGoffset, [out] ABC *pABC );",
            "name": "ScriptPlace"
        },
        {
            "signature": "HRESULT ScriptPlaceOpenType( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, out] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in, optional] int *rcRangeChars, [in, optional] TEXTRANGE_PROPERTIES **rpRangeProperties, [in] int cRanges, [in] const WCHAR *pwcChars, [in] WORD *pwLogClust, [in] SCRIPT_CHARPROP *pCharProps, [in] int cChars, [in] const WORD *pwGlyphs, [in] const SCRIPT_GLYPHPROP *pGlyphProps, [in] int cGlyphs, [out] int *piAdvance, [out] GOFFSET *pGoffset, [out, optional] ABC *pABC );",
            "name": "ScriptPlaceOpenType"
        },
        {
            "signature": "HRESULT ScriptPositionSingleGlyph( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in] OPENTYPE_TAG tagFeature, [in] LONG lParameter, [in] WORD wGlyphId, [in] int iAdvance, [in] GOFFSET GOffset, [out] int *piOutAdvance, [out] GOFFSET *pOutGoffset );",
            "name": "ScriptPositionSingleGlyph"
        },
        {
            "signature": "HRESULT ScriptRecordDigitSubstitution( [in] LCID Locale, [out] SCRIPT_DIGITSUBSTITUTE *psds );",
            "name": "ScriptRecordDigitSubstitution"
        },
        {
            "signature": "HRESULT ScriptShape( [in] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in] const WCHAR *pwcChars, [in] int cChars, [in] int cMaxGlyphs, [in, out] SCRIPT_ANALYSIS *psa, [out] WORD *pwOutGlyphs, [out] WORD *pwLogClust, [out] SCRIPT_VISATTR *psva, [out] int *pcGlyphs );",
            "name": "ScriptShape"
        },
        {
            "signature": "HRESULT ScriptShapeOpenType( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, out] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in, optional] int *rcRangeChars, [in, optional] TEXTRANGE_PROPERTIES **rpRangeProperties, [in] int cRanges, [in] const WCHAR *pwcChars, [in] int cChars, [in] int cMaxGlyphs, [out] WORD *pwLogClust, [out] SCRIPT_CHARPROP *pCharProps, [out] WORD *pwOutGlyphs, [out] SCRIPT_GLYPHPROP *pOutGlyphProps, [out] int *pcGlyphs );",
            "name": "ScriptShapeOpenType"
        },
        {
            "signature": "const int * ScriptString_pcOutChars( [in] SCRIPT_STRING_ANALYSIS ssa );",
            "name": "ScriptString_pcOutChars"
        },
        {
            "signature": "const SCRIPT_LOGATTR * ScriptString_pLogAttr( [in] SCRIPT_STRING_ANALYSIS ssa );",
            "name": "ScriptString_pLogAttr"
        },
        {
            "signature": "const SIZE * ScriptString_pSize( [in] SCRIPT_STRING_ANALYSIS ssa );",
            "name": "ScriptString_pSize"
        },
        {
            "signature": "HRESULT ScriptStringAnalyse( [in] HDC hdc, [in] const void *pString, [in] int cString, [in] int cGlyphs, [in] int iCharset, [in] DWORD dwFlags, [in] int iReqWidth, [in, optional] SCRIPT_CONTROL *psControl, [in, optional] SCRIPT_STATE *psState, [in, optional] const int *piDx, [in, optional] SCRIPT_TABDEF *pTabdef, [in] const BYTE *pbInClass, [out] SCRIPT_STRING_ANALYSIS *pssa );",
            "name": "ScriptStringAnalyse"
        },
        {
            "signature": "HRESULT ScriptStringCPtoX( [in] SCRIPT_STRING_ANALYSIS ssa, [in] int icp, [in] BOOL fTrailing, [out] int *pX );",
            "name": "ScriptStringCPtoX"
        },
        {
            "signature": "HRESULT ScriptStringFree( [in, out] SCRIPT_STRING_ANALYSIS *pssa );",
            "name": "ScriptStringFree"
        },
        {
            "signature": "HRESULT ScriptStringGetLogicalWidths( [in] SCRIPT_STRING_ANALYSIS ssa, [out] int *piDx );",
            "name": "ScriptStringGetLogicalWidths"
        },
        {
            "signature": "HRESULT ScriptStringGetOrder( [in] SCRIPT_STRING_ANALYSIS ssa, [out] UINT *puOrder );",
            "name": "ScriptStringGetOrder"
        },
        {
            "signature": "HRESULT ScriptStringOut( [in] SCRIPT_STRING_ANALYSIS ssa, [in] int iX, [in] int iY, [in] UINT uOptions, [in, optional] const RECT *prc, [in] int iMinSel, [in] int iMaxSel, [in] BOOL fDisabled );",
            "name": "ScriptStringOut"
        },
        {
            "signature": "HRESULT ScriptStringValidate( [in] SCRIPT_STRING_ANALYSIS ssa );",
            "name": "ScriptStringValidate"
        },
        {
            "signature": "HRESULT ScriptStringXtoCP( [in] SCRIPT_STRING_ANALYSIS ssa, [in] int iX, [out] int *piCh, [out] int *piTrailing );",
            "name": "ScriptStringXtoCP"
        },
        {
            "signature": "HRESULT ScriptSubstituteSingleGlyph( [in, optional] HDC hdc, [in, out] SCRIPT_CACHE *psc, [in, optional] SCRIPT_ANALYSIS *psa, [in] OPENTYPE_TAG tagScript, [in] OPENTYPE_TAG tagLangSys, [in] OPENTYPE_TAG tagFeature, [in] LONG lParameter, [in] WORD wGlyphId, [out] WORD *pwOutGlyphId );",
            "name": "ScriptSubstituteSingleGlyph"
        },
        {
            "signature": "HRESULT ScriptTextOut( [in] const HDC hdc, [in, out] SCRIPT_CACHE *psc, [in] int x, [in] int y, [in] UINT fuOptions, [in, optional] const RECT *lprc, [in] const SCRIPT_ANALYSIS *psa, [in] const WCHAR *pwcReserved, [in] int iReserved, [in] const WORD *pwGlyphs, [in] int cGlyphs, [in] const int *piAdvance, [in, optional] const int *piJustify, [in] const GOFFSET *pGoffset );",
            "name": "ScriptTextOut"
        },
        {
            "signature": "HRESULT ScriptXtoCP( [in] int iX, [in] int cChars, [in] int cGlyphs, [in] const WORD *pwLogClust, [in] const SCRIPT_VISATTR *psva, [in] const int *piAdvance, [in] const SCRIPT_ANALYSIS *psa, [out] int *piCP, [out] int *piTrailing );",
            "name": "ScriptXtoCP"
        }
    ],
    "Utilapiset.h": [
        {
            "signature": "BOOL Beep( [in] DWORD dwFreq, [in] DWORD dwDuration );",
            "name": "Beep"
        }
    ],
    "Uxtheme.h": [
        {
            "signature": "HANIMATIONBUFFER BeginBufferedAnimation( HWND hwnd, HDC hdcTarget, const RECT *prcTarget, BP_BUFFERFORMAT dwFormat, [in] BP_PAINTPARAMS *pPaintParams, [in] BP_ANIMATIONPARAMS *pAnimationParams, [out] HDC *phdcFrom, [out] HDC *phdcTo );",
            "name": "BeginBufferedAnimation"
        },
        {
            "signature": "HPAINTBUFFER BeginBufferedPaint( HDC hdcTarget, const RECT *prcTarget, BP_BUFFERFORMAT dwFormat, [in] BP_PAINTPARAMS *pPaintParams, [out] HDC *phdc );",
            "name": "BeginBufferedPaint"
        },
        {
            "signature": "BOOL BeginPanningFeedback( [in] HWND hwnd );",
            "name": "BeginPanningFeedback"
        },
        {
            "signature": "HRESULT BufferedPaintClear( HPAINTBUFFER hBufferedPaint, [in] const RECT *prc );",
            "name": "BufferedPaintClear"
        },
        {
            "signature": "HRESULT BufferedPaintInit();",
            "name": "BufferedPaintInit"
        },
        {
            "signature": "BOOL BufferedPaintRenderAnimation( HWND hwnd, HDC hdcTarget );",
            "name": "BufferedPaintRenderAnimation"
        },
        {
            "signature": "HRESULT BufferedPaintSetAlpha( HPAINTBUFFER hBufferedPaint, [in] const RECT *prc, BYTE alpha );",
            "name": "BufferedPaintSetAlpha"
        },
        {
            "signature": "HRESULT BufferedPaintStopAllAnimations( HWND hwnd );",
            "name": "BufferedPaintStopAllAnimations"
        },
        {
            "signature": "HRESULT BufferedPaintUnInit();",
            "name": "BufferedPaintUnInit"
        },
        {
            "signature": "HRESULT CloseThemeData( [in] HTHEME hTheme );",
            "name": "CloseThemeData"
        },
        {
            "signature": "HRESULT DrawThemeBackground( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pRect, [in] LPCRECT pClipRect );",
            "name": "DrawThemeBackground"
        },
        {
            "signature": "HRESULT DrawThemeBackgroundEx( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pRect, [in] const DTBGOPTS *pOptions );",
            "name": "DrawThemeBackgroundEx"
        },
        {
            "signature": "HRESULT DrawThemeEdge( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pDestRect, [in] UINT uEdge, [in] UINT uFlags, [out] LPRECT pContentRect );",
            "name": "DrawThemeEdge"
        },
        {
            "signature": "HRESULT DrawThemeIcon( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pRect, [in] HIMAGELIST himl, [in] int iImageIndex );",
            "name": "DrawThemeIcon"
        },
        {
            "signature": "HRESULT DrawThemeParentBackground( [in] HWND hwnd, [in] HDC hdc, [in] const RECT *prc );",
            "name": "DrawThemeParentBackground"
        },
        {
            "signature": "HRESULT DrawThemeParentBackgroundEx( [in] HWND hwnd, [in] HDC hdc, [in] DWORD dwFlags, [in] const RECT *prc );",
            "name": "DrawThemeParentBackgroundEx"
        },
        {
            "signature": "HRESULT DrawThemeText( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCWSTR pszText, [in] int cchText, [in] DWORD dwTextFlags, [in] DWORD dwTextFlags2, [in] LPCRECT pRect );",
            "name": "DrawThemeText"
        },
        {
            "signature": "HRESULT DrawThemeTextEx( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCWSTR pszText, [in] int cchText, [in] DWORD dwTextFlags, [in, out] LPRECT pRect, [in] const DTTOPTS *pOptions );",
            "name": "DrawThemeTextEx"
        },
        {
            "signature": "HRESULT EnableThemeDialogTexture( [in] HWND hwnd, [in] DWORD dwFlags );",
            "name": "EnableThemeDialogTexture"
        },
        {
            "signature": "HRESULT EnableTheming( [in] BOOL fEnable );",
            "name": "EnableTheming"
        },
        {
            "signature": "HRESULT EndBufferedAnimation( HANIMATIONBUFFER hbpAnimation, BOOL fUpdateTarget );",
            "name": "EndBufferedAnimation"
        },
        {
            "signature": "HRESULT EndBufferedPaint( HPAINTBUFFER hBufferedPaint, BOOL fUpdateTarget );",
            "name": "EndBufferedPaint"
        },
        {
            "signature": "BOOL EndPanningFeedback( [in] HWND hwnd, [in] BOOL fAnimateBack );",
            "name": "EndPanningFeedback"
        },
        {
            "signature": "HRESULT GetBufferedPaintBits( HPAINTBUFFER hBufferedPaint, [out] RGBQUAD **ppbBuffer, [out] int *pcxRow );",
            "name": "GetBufferedPaintBits"
        },
        {
            "signature": "HDC GetBufferedPaintDC( HPAINTBUFFER hBufferedPaint );",
            "name": "GetBufferedPaintDC"
        },
        {
            "signature": "HDC GetBufferedPaintTargetDC( HPAINTBUFFER hBufferedPaint );",
            "name": "GetBufferedPaintTargetDC"
        },
        {
            "signature": "HRESULT GetBufferedPaintTargetRect( HPAINTBUFFER hBufferedPaint, [out] RECT *prc );",
            "name": "GetBufferedPaintTargetRect"
        },
        {
            "signature": "HRESULT GetCurrentThemeName( [out] LPWSTR pszThemeFileName, [in] int cchMaxNameChars, [out] LPWSTR pszColorBuff, [in] int cchMaxColorChars, [out] LPWSTR pszSizeBuff, [in] int cchMaxSizeChars );",
            "name": "GetCurrentThemeName"
        },
        {
            "signature": "HRESULT GetThemeAnimationProperty( [in] HTHEME hTheme, [in] int iStoryboardId, [in] int iTargetId, [in] TA_PROPERTY eProperty, [out] VOID *pvProperty, [in] DWORD cbSize, [out] DWORD *pcbSizeOut );",
            "name": "GetThemeAnimationProperty"
        },
        {
            "signature": "HRESULT GetThemeAnimationTransform( [in] HTHEME hTheme, [in] int iStoryboardId, [in] int iTargetId, [in] DWORD dwTransformIndex, [out] TA_TRANSFORM *pTransform, [in] DWORD cbSize, [out] DWORD *pcbSizeOut );",
            "name": "GetThemeAnimationTransform"
        },
        {
            "signature": "DWORD GetThemeAppProperties();",
            "name": "GetThemeAppProperties"
        },
        {
            "signature": "HRESULT GetThemeBackgroundContentRect( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pBoundingRect, [out] LPRECT pContentRect );",
            "name": "GetThemeBackgroundContentRect"
        },
        {
            "signature": "HRESULT GetThemeBackgroundExtent( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pContentRect, [out] LPRECT pExtentRect );",
            "name": "GetThemeBackgroundExtent"
        },
        {
            "signature": "HRESULT GetThemeBackgroundRegion( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT pRect, [out] HRGN *pRegion );",
            "name": "GetThemeBackgroundRegion"
        },
        {
            "signature": "HRESULT GetThemeBitmap( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [in] ULONG dwFlags, [out] HBITMAP *phBitmap );",
            "name": "GetThemeBitmap"
        },
        {
            "signature": "HRESULT GetThemeBool( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] BOOL *pfVal );",
            "name": "GetThemeBool"
        },
        {
            "signature": "HRESULT GetThemeColor( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] COLORREF *pColor );",
            "name": "GetThemeColor"
        },
        {
            "signature": "HRESULT GetThemeDocumentationProperty( [in] LPCWSTR pszThemeName, [in] LPCWSTR pszPropertyName, [out] LPWSTR pszValueBuff, [in] int cchMaxValChars );",
            "name": "GetThemeDocumentationProperty"
        },
        {
            "signature": "HRESULT GetThemeEnumValue( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] int *piVal );",
            "name": "GetThemeEnumValue"
        },
        {
            "signature": "HRESULT GetThemeFilename( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] LPWSTR pszThemeFileName, [in] int cchMaxBuffChars );",
            "name": "GetThemeFilename"
        },
        {
            "signature": "HRESULT GetThemeFont( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] LOGFONTW *pFont );",
            "name": "GetThemeFont"
        },
        {
            "signature": "HRESULT GetThemeInt( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] int *piVal );",
            "name": "GetThemeInt"
        },
        {
            "signature": "HRESULT GetThemeIntList( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] INTLIST *pIntList );",
            "name": "GetThemeIntList"
        },
        {
            "signature": "HRESULT GetThemeMargins( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] int iPropId, [in] LPCRECT prc, [out] MARGINS *pMargins );",
            "name": "GetThemeMargins"
        },
        {
            "signature": "HRESULT GetThemeMetric( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] int *piVal );",
            "name": "GetThemeMetric"
        },
        {
            "signature": "HRESULT GetThemePartSize( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCRECT prc, THEMESIZE eSize, [out] SIZE *psz );",
            "name": "GetThemePartSize"
        },
        {
            "signature": "HRESULT GetThemePosition( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] POINT *pPoint );",
            "name": "GetThemePosition"
        },
        {
            "signature": "HRESULT GetThemePropertyOrigin( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, PROPERTYORIGIN *pOrigin );",
            "name": "GetThemePropertyOrigin"
        },
        {
            "signature": "HRESULT GetThemeRect( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] LPRECT pRect );",
            "name": "GetThemeRect"
        },
        {
            "signature": "HRESULT GetThemeStream( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] VOID **ppvStream, [out] DWORD *pcbStream, [in] HINSTANCE hInst );",
            "name": "GetThemeStream"
        },
        {
            "signature": "HRESULT GetThemeString( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId, [in] int iPropId, [out] LPWSTR pszBuff, [in] int cchMaxBuffChars );",
            "name": "GetThemeString"
        },
        {
            "signature": "BOOL GetThemeSysBool( [in] HTHEME hTheme, [in] int iBoolId );",
            "name": "GetThemeSysBool"
        },
        {
            "signature": "COLORREF GetThemeSysColor( [in] HTHEME hTheme, [in] int iColorId );",
            "name": "GetThemeSysColor"
        },
        {
            "signature": "HBRUSH GetThemeSysColorBrush( [in] HTHEME hTheme, [in] int iColorId );",
            "name": "GetThemeSysColorBrush"
        },
        {
            "signature": "HRESULT GetThemeSysFont( [in] HTHEME hTheme, [in] int iFontId, [out] LOGFONTW *plf );",
            "name": "GetThemeSysFont"
        },
        {
            "signature": "HRESULT GetThemeSysInt( [in] HTHEME hTheme, [in] int iIntId, [in] int *piValue );",
            "name": "GetThemeSysInt"
        },
        {
            "signature": "int GetThemeSysSize( [in] HTHEME hTheme, [in] int iSizeId );",
            "name": "GetThemeSysSize"
        },
        {
            "signature": "HRESULT GetThemeSysString( [in] HTHEME hTheme, [in] int iStringId, [out] LPWSTR pszStringBuff, [in] int cchMaxStringChars );",
            "name": "GetThemeSysString"
        },
        {
            "signature": "HRESULT GetThemeTextExtent( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] LPCWSTR pszText, [in] int cchCharCount, [in] DWORD dwTextFlags, [in] LPCRECT pBoundingRect, [out] LPRECT pExtentRect );",
            "name": "GetThemeTextExtent"
        },
        {
            "signature": "HRESULT GetThemeTextMetrics( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [out] TEXTMETRICW *ptm );",
            "name": "GetThemeTextMetrics"
        },
        {
            "signature": "HRESULT GetThemeTimingFunction( [in] HTHEME hTheme, [in] int iTimingFunctionId, [out] TA_TIMINGFUNCTION *pTimingFunction, [in] DWORD cbSize, [out] DWORD *pcbSizeOut );",
            "name": "GetThemeTimingFunction"
        },
        {
            "signature": "HRESULT GetThemeTransitionDuration( HTHEME hTheme, int iPartId, int iStateIdFrom, int iStateIdTo, int iPropId, [out] DWORD *pdwDuration );",
            "name": "GetThemeTransitionDuration"
        },
        {
            "signature": "HTHEME GetWindowTheme( [in] HWND hwnd );",
            "name": "GetWindowTheme"
        },
        {
            "signature": "HRESULT HitTestThemeBackground( [in] HTHEME hTheme, [in] HDC hdc, [in] int iPartId, [in] int iStateId, [in] DWORD dwOptions, [in] LPCRECT pRect, [in] HRGN hrgn, [in] POINT ptTest, [out] WORD *pwHitTestCode );",
            "name": "HitTestThemeBackground"
        },
        {
            "signature": "BOOL IsAppThemed();",
            "name": "IsAppThemed"
        },
        {
            "signature": "BOOL IsCompositionActive();",
            "name": "IsCompositionActive"
        },
        {
            "signature": "BOOL IsThemeActive();",
            "name": "IsThemeActive"
        },
        {
            "signature": "BOOL IsThemeBackgroundPartiallyTransparent( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId );",
            "name": "IsThemeBackgroundPartiallyTransparent"
        },
        {
            "signature": "BOOL IsThemeDialogTextureEnabled( [in] HWND hwnd );",
            "name": "IsThemeDialogTextureEnabled"
        },
        {
            "signature": "BOOL IsThemePartDefined( [in] HTHEME hTheme, [in] int iPartId, [in] int iStateId );",
            "name": "IsThemePartDefined"
        },
        {
            "signature": "HTHEME OpenThemeData( [in] HWND hwnd, [in] LPCWSTR pszClassList );",
            "name": "OpenThemeData"
        },
        {
            "signature": "HTHEME OpenThemeDataEx( [in] HWND hwnd, [in] LPCWSTR pszClassList, [in] DWORD dwFlags );",
            "name": "OpenThemeDataEx"
        },
        {
            "signature": "HTHEME OpenThemeDataForDpi( HWND hwnd, LPCWSTR pszClassList, UINT dpi );",
            "name": "OpenThemeDataForDpi"
        },
        {
            "signature": "void SetThemeAppProperties( DWORD dwFlags );",
            "name": "SetThemeAppProperties"
        },
        {
            "signature": "HRESULT SetWindowTheme( [in] HWND hwnd, [in] LPCWSTR pszSubAppName, [in] LPCWSTR pszSubIdList );",
            "name": "SetWindowTheme"
        },
        {
            "signature": "HRESULT SetWindowThemeAttribute( [in] HWND hwnd, WINDOWTHEMEATTRIBUTETYPE eAttribute, [in] PVOID pvAttribute, [in] DWORD cbAttribute );",
            "name": "SetWindowThemeAttribute"
        },
        {
            "signature": "HRESULT SetWindowThemeNonClientAttributes( [in] HWND hwnd, [in] DWORD dwMask, [in] DWORD dwAttributes );",
            "name": "SetWindowThemeNonClientAttributes"
        },
        {
            "signature": "BOOL UpdatePanningFeedback( [in] HWND hwnd, [in] LONG lTotalOverpanOffsetX, [in] LONG lTotalOverpanOffsetY, [in] BOOL fInInertia );",
            "name": "UpdatePanningFeedback"
        }
    ],
    "Vbinterf.h": [],
    "Vdmdbg.h": [
        {
            "signature": "PROCESSENUMPROC Processenumproc; BOOL Processenumproc( [out] DWORD dwProcessId, [out] DWORD dwAttributes, [out] LPARAM lpUserDefined ) {...}",
            "name": "PROCESSENUMPROC callback"
        },
        {
            "signature": "TASKENUMPROCEX Taskenumprocex; BOOL Taskenumprocex( [out] DWORD dwThreadId, [out] WORD hMod16, [out] WORD hTask16, [out] PSZ pszModName, [out] PSZ pszFileName, [out] LPARAM lpUserDefined ) {...}",
            "name": "TASKENUMPROCEX callback"
        },
        {
            "signature": "INT VDMEnumProcessWOW( [in] PROCESSENUMPROC fp, [in] LPARAM lparam );",
            "name": "VDMEnumProcessWOW"
        },
        {
            "signature": "INT VDMEnumTaskWOWEx( [in] DWORD dwProcessId, [in] TASKENUMPROCEX fp, [in] LPARAM lparam );",
            "name": "VDMEnumTaskWOWEx"
        }
    ],
    "Vds.h": [],
    "Vdshwprv.h": [],
    "Vdslun.h": [],
    "Verrsrc.h": [],
    "Versionhelpers.h": [
        {
            "signature": "VERSIONHELPERAPI IsWindows10OrGreater();",
            "name": "IsWindows10OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindows7OrGreater();",
            "name": "IsWindows7OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindows7SP1OrGreater();",
            "name": "IsWindows7SP1OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindows8OrGreater();",
            "name": "IsWindows8OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindows8Point1OrGreater();",
            "name": "IsWindows8Point1OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsServer();",
            "name": "IsWindowsServer"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsVersionOrGreater( WORD wMajorVersion, WORD wMinorVersion, WORD wServicePackMajor );",
            "name": "IsWindowsVersionOrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsVistaOrGreater();",
            "name": "IsWindowsVistaOrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsVistaSP1OrGreater();",
            "name": "IsWindowsVistaSP1OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsVistaSP2OrGreater();",
            "name": "IsWindowsVistaSP2OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsXPOrGreater();",
            "name": "IsWindowsXPOrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsXPSP1OrGreater();",
            "name": "IsWindowsXPSP1OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsXPSP2OrGreater();",
            "name": "IsWindowsXPSP2OrGreater"
        },
        {
            "signature": "VERSIONHELPERAPI IsWindowsXPSP3OrGreater();",
            "name": "IsWindowsXPSP3OrGreater"
        }
    ],
    "Vfw.h": [
        {
            "signature": "HRESULT AVIBuildFilterA( LPSTR lpszFilter, LONG cbFilter, BOOL fSaving );",
            "name": "AVIBuildFilterA"
        },
        {
            "signature": "HRESULT AVIBuildFilterW( LPWSTR lpszFilter, LONG cbFilter, BOOL fSaving );",
            "name": "AVIBuildFilterW"
        },
        {
            "signature": "HRESULT AVIClearClipboard();",
            "name": "AVIClearClipboard"
        },
        {
            "signature": "ULONG AVIFileAddRef( PAVIFILE pfile );",
            "name": "AVIFileAddRef"
        },
        {
            "signature": "HRESULT AVIFileCreateStream( PAVIFILE pfile, PAVISTREAM *ppavi, AVISTREAMINFO *psi );",
            "name": "AVIFileCreateStream"
        },
        {
            "signature": "HRESULT AVIFileCreateStreamA( PAVIFILE pfile, PAVISTREAM *ppavi, AVISTREAMINFOA *psi );",
            "name": "AVIFileCreateStreamA"
        },
        {
            "signature": "HRESULT AVIFileCreateStreamW( PAVIFILE pfile, PAVISTREAM *ppavi, AVISTREAMINFOW *psi );",
            "name": "AVIFileCreateStreamW"
        },
        {
            "signature": "HRESULT AVIFileEndRecord( PAVIFILE pfile );",
            "name": "AVIFileEndRecord"
        },
        {
            "signature": "void AVIFileExit();",
            "name": "AVIFileExit"
        },
        {
            "signature": "HRESULT AVIFileGetStream( PAVIFILE pfile, PAVISTREAM *ppavi, DWORD fccType, LONG lParam );",
            "name": "AVIFileGetStream"
        },
        {
            "signature": "HRESULT AVIFileInfo( PAVIFILE pfile, LPAVIFILEINFO pfi, LONG lSize );",
            "name": "AVIFileInfo"
        },
        {
            "signature": "HRESULT AVIFileInfoA( PAVIFILE pfile, LPAVIFILEINFOA pfi, LONG lSize );",
            "name": "AVIFileInfoA"
        },
        {
            "signature": "HRESULT AVIFileInfoW( PAVIFILE pfile, LPAVIFILEINFOW pfi, LONG lSize );",
            "name": "AVIFileInfoW"
        },
        {
            "signature": "void AVIFileInit();",
            "name": "AVIFileInit"
        },
        {
            "signature": "HRESULT AVIFileOpen( PAVIFILE *ppfile, LPCSTR szFile, UINT uMode, LPCLSID lpHandler );",
            "name": "AVIFileOpen"
        },
        {
            "signature": "HRESULT AVIFileOpenA( PAVIFILE *ppfile, LPCSTR szFile, UINT uMode, LPCLSID lpHandler );",
            "name": "AVIFileOpenA"
        },
        {
            "signature": "HRESULT AVIFileOpenW( PAVIFILE *ppfile, LPCWSTR szFile, UINT uMode, LPCLSID lpHandler );",
            "name": "AVIFileOpenW"
        },
        {
            "signature": "HRESULT AVIFileReadData( PAVIFILE pfile, DWORD ckid, LPVOID lpData, LONG *lpcbData );",
            "name": "AVIFileReadData"
        },
        {
            "signature": "ULONG AVIFileRelease( PAVIFILE pfile );",
            "name": "AVIFileRelease"
        },
        {
            "signature": "HRESULT AVIFileWriteData( PAVIFILE pfile, DWORD ckid, LPVOID lpData, LONG cbData );",
            "name": "AVIFileWriteData"
        },
        {
            "signature": "HRESULT AVIGetFromClipboard( PAVIFILE *lppf );",
            "name": "AVIGetFromClipboard"
        },
        {
            "signature": "HRESULT AVIMakeCompressedStream( PAVISTREAM *ppsCompressed, PAVISTREAM ppsSource, AVICOMPRESSOPTIONS *lpOptions, CLSID *pclsidHandler );",
            "name": "AVIMakeCompressedStream"
        },
        {
            "signature": "HRESULT AVIMakeFileFromStreams( PAVIFILE *ppfile, int nStreams, PAVISTREAM *papStreams );",
            "name": "AVIMakeFileFromStreams"
        },
        {
            "signature": "HRESULT AVIMakeStreamFromClipboard( UINT cfFormat, HANDLE hGlobal, PAVISTREAM *ppstream );",
            "name": "AVIMakeStreamFromClipboard"
        },
        {
            "signature": "HRESULT AVIPutFileOnClipboard( PAVIFILE pf );",
            "name": "AVIPutFileOnClipboard"
        },
        {
            "signature": "HRESULT AVISaveA( LPCSTR szFile, CLSID *pclsidHandler, AVISAVECALLBACK lpfnCallback, int nStreams, PAVISTREAM pfile, LPAVICOMPRESSOPTIONS lpOptions, ... );",
            "name": "AVISaveA"
        },
        {
            "signature": "INT_PTR AVISaveOptions( HWND hwnd, UINT uiFlags, int nStreams, PAVISTREAM *ppavi, LPAVICOMPRESSOPTIONS *plpOptions );",
            "name": "AVISaveOptions"
        },
        {
            "signature": "HRESULT AVISaveOptionsFree( int nStreams, LPAVICOMPRESSOPTIONS *plpOptions );",
            "name": "AVISaveOptionsFree"
        },
        {
            "signature": "HRESULT AVISaveVA( LPCSTR szFile, CLSID *pclsidHandler, AVISAVECALLBACK lpfnCallback, int nStreams, PAVISTREAM *ppavi, LPAVICOMPRESSOPTIONS *plpOptions );",
            "name": "AVISaveVA"
        },
        {
            "signature": "HRESULT AVISaveVW( LPCWSTR szFile, CLSID *pclsidHandler, AVISAVECALLBACK lpfnCallback, int nStreams, PAVISTREAM *ppavi, LPAVICOMPRESSOPTIONS *plpOptions );",
            "name": "AVISaveVW"
        },
        {
            "signature": "HRESULT AVISaveW( LPCWSTR szFile, CLSID *pclsidHandler, AVISAVECALLBACK lpfnCallback, int nStreams, PAVISTREAM pfile, LPAVICOMPRESSOPTIONS lpOptions, ... );",
            "name": "AVISaveW"
        },
        {
            "signature": "ULONG AVIStreamAddRef( PAVISTREAM pavi );",
            "name": "AVIStreamAddRef"
        },
        {
            "signature": "HRESULT AVIStreamBeginStreaming( PAVISTREAM pavi, LONG lStart, LONG lEnd, LONG lRate );",
            "name": "AVIStreamBeginStreaming"
        },
        {
            "signature": "HRESULT AVIStreamCreate( PAVISTREAM *ppavi, LONG lParam1, LONG lParam2, CLSID *pclsidHandler );",
            "name": "AVIStreamCreate"
        },
        {
            "signature": "HRESULT AVIStreamEndStreaming( PAVISTREAM pavi );",
            "name": "AVIStreamEndStreaming"
        },
        {
            "signature": "LONG AVIStreamFindSample( PAVISTREAM pavi, LONG lPos, LONG lFlags );",
            "name": "AVIStreamFindSample"
        },
        {
            "signature": "LPVOID AVIStreamGetFrame( PGETFRAME pg, LONG lPos );",
            "name": "AVIStreamGetFrame"
        },
        {
            "signature": "HRESULT AVIStreamGetFrameClose( PGETFRAME pg );",
            "name": "AVIStreamGetFrameClose"
        },
        {
            "signature": "PGETFRAME AVIStreamGetFrameOpen( PAVISTREAM pavi, LPBITMAPINFOHEADER lpbiWanted );",
            "name": "AVIStreamGetFrameOpen"
        },
        {
            "signature": "HRESULT AVIStreamInfoA( PAVISTREAM pavi, LPAVISTREAMINFOA psi, LONG lSize );",
            "name": "AVIStreamInfoA"
        },
        {
            "signature": "HRESULT AVIStreamInfoW( PAVISTREAM pavi, LPAVISTREAMINFOW psi, LONG lSize );",
            "name": "AVIStreamInfoW"
        },
        {
            "signature": "LONG AVIStreamLength( PAVISTREAM pavi );",
            "name": "AVIStreamLength"
        },
        {
            "signature": "HRESULT AVIStreamOpenFromFileA( PAVISTREAM *ppavi, LPCSTR szFile, DWORD fccType, LONG lParam, UINT mode, CLSID *pclsidHandler );",
            "name": "AVIStreamOpenFromFileA"
        },
        {
            "signature": "HRESULT AVIStreamOpenFromFileW( PAVISTREAM *ppavi, LPCWSTR szFile, DWORD fccType, LONG lParam, UINT mode, CLSID *pclsidHandler );",
            "name": "AVIStreamOpenFromFileW"
        },
        {
            "signature": "HRESULT AVIStreamRead( PAVISTREAM pavi, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, LONG *plBytes, LONG *plSamples );",
            "name": "AVIStreamRead"
        },
        {
            "signature": "HRESULT AVIStreamReadData( PAVISTREAM pavi, DWORD fcc, LPVOID lp, LONG *lpcb );",
            "name": "AVIStreamReadData"
        },
        {
            "signature": "HRESULT AVIStreamReadFormat( PAVISTREAM pavi, LONG lPos, LPVOID lpFormat, LONG *lpcbFormat );",
            "name": "AVIStreamReadFormat"
        },
        {
            "signature": "ULONG AVIStreamRelease( PAVISTREAM pavi );",
            "name": "AVIStreamRelease"
        },
        {
            "signature": "LONG AVIStreamSampleToTime( PAVISTREAM pavi, LONG lSample );",
            "name": "AVIStreamSampleToTime"
        },
        {
            "signature": "HRESULT AVIStreamSetFormat( PAVISTREAM pavi, LONG lPos, LPVOID lpFormat, LONG cbFormat );",
            "name": "AVIStreamSetFormat"
        },
        {
            "signature": "LONG AVIStreamStart( PAVISTREAM pavi );",
            "name": "AVIStreamStart"
        },
        {
            "signature": "LONG AVIStreamTimeToSample( PAVISTREAM pavi, LONG lTime );",
            "name": "AVIStreamTimeToSample"
        },
        {
            "signature": "HRESULT AVIStreamWrite( PAVISTREAM pavi, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, DWORD dwFlags, LONG *plSampWritten, LONG *plBytesWritten );",
            "name": "AVIStreamWrite"
        },
        {
            "signature": "HRESULT AVIStreamWriteData( PAVISTREAM pavi, DWORD fcc, LPVOID lp, LONG cb );",
            "name": "AVIStreamWriteData"
        },
        {
            "signature": "CAPCONTROLCALLBACK Capcontrolcallback; LRESULT Capcontrolcallback( HWND hWnd, int nState ) {...}",
            "name": "CAPCONTROLCALLBACK callback"
        },
        {
            "signature": "HWND VFWAPI capCreateCaptureWindowA( LPCSTR lpszWindowName, DWORD dwStyle, int x, int y, int nWidth, int nHeight, HWND hwndParent, int nID );",
            "name": "capCreateCaptureWindowA"
        },
        {
            "signature": "HWND VFWAPI capCreateCaptureWindowW( LPCWSTR lpszWindowName, DWORD dwStyle, int x, int y, int nWidth, int nHeight, HWND hwndParent, int nID );",
            "name": "capCreateCaptureWindowW"
        },
        {
            "signature": "CAPERRORCALLBACKA Caperrorcallbacka; LRESULT Caperrorcallbacka( HWND hWnd, int nID, LPCSTR lpsz ) {...}",
            "name": "CAPERRORCALLBACKA callback"
        },
        {
            "signature": "CAPERRORCALLBACKW Caperrorcallbackw; LRESULT Caperrorcallbackw( HWND hWnd, int nID, LPCWSTR lpsz ) {...}",
            "name": "CAPERRORCALLBACKW callback"
        },
        {
            "signature": "BOOL VFWAPI capGetDriverDescriptionA( UINT wDriverIndex, LPSTR lpszName, int cbName, LPSTR lpszVer, int cbVer );",
            "name": "capGetDriverDescriptionA"
        },
        {
            "signature": "BOOL VFWAPI capGetDriverDescriptionW( UINT wDriverIndex, LPWSTR lpszName, int cbName, LPWSTR lpszVer, int cbVer );",
            "name": "capGetDriverDescriptionW"
        },
        {
            "signature": "CAPSTATUSCALLBACKA Capstatuscallbacka; LRESULT Capstatuscallbacka( HWND hWnd, int nID, LPCSTR lpsz ) {...}",
            "name": "CAPSTATUSCALLBACKA callback"
        },
        {
            "signature": "CAPSTATUSCALLBACKW Capstatuscallbackw; LRESULT Capstatuscallbackw( HWND hWnd, int nID, LPCWSTR lpsz ) {...}",
            "name": "CAPSTATUSCALLBACKW callback"
        },
        {
            "signature": "CAPVIDEOCALLBACK Capvideocallback; LRESULT Capvideocallback( HWND hWnd, LPVIDEOHDR lpVHdr ) {...}",
            "name": "CAPVIDEOCALLBACK callback"
        },
        {
            "signature": "CAPWAVECALLBACK Capwavecallback; LRESULT Capwavecallback( HWND hWnd, LPWAVEHDR lpWHdr ) {...}",
            "name": "CAPWAVECALLBACK callback"
        },
        {
            "signature": "CAPYIELDCALLBACK Capyieldcallback; LRESULT Capyieldcallback( HWND hWnd ) {...}",
            "name": "CAPYIELDCALLBACK callback"
        },
        {
            "signature": "HRESULT CreateEditableStream( PAVISTREAM *ppsEditable, PAVISTREAM psSource );",
            "name": "CreateEditableStream"
        },
        {
            "signature": "BOOL VFWAPI DrawDibBegin( HDRAWDIB hdd, HDC hdc, int dxDst, int dyDst, LPBITMAPINFOHEADER lpbi, int dxSrc, int dySrc, UINT wFlags );",
            "name": "DrawDibBegin"
        },
        {
            "signature": "BOOL VFWAPI DrawDibChangePalette( HDRAWDIB hdd, int iStart, int iLen, LPPALETTEENTRY lppe );",
            "name": "DrawDibChangePalette"
        },
        {
            "signature": "BOOL VFWAPI DrawDibClose( HDRAWDIB hdd );",
            "name": "DrawDibClose"
        },
        {
            "signature": "BOOL VFWAPI DrawDibDraw( HDRAWDIB hdd, HDC hdc, int xDst, int yDst, int dxDst, int dyDst, LPBITMAPINFOHEADER lpbi, LPVOID lpBits, int xSrc, int ySrc, int dxSrc, int dySrc, UINT wFlags );",
            "name": "DrawDibDraw"
        },
        {
            "signature": "BOOL VFWAPI DrawDibEnd( HDRAWDIB hdd );",
            "name": "DrawDibEnd"
        },
        {
            "signature": "LPVOID VFWAPI DrawDibGetBuffer( HDRAWDIB hdd, LPBITMAPINFOHEADER lpbi, DWORD dwSize, DWORD dwFlags );",
            "name": "DrawDibGetBuffer"
        },
        {
            "signature": "HPALETTE VFWAPI DrawDibGetPalette( HDRAWDIB hdd );",
            "name": "DrawDibGetPalette"
        },
        {
            "signature": "HDRAWDIB VFWAPI DrawDibOpen();",
            "name": "DrawDibOpen"
        },
        {
            "signature": "LRESULT VFWAPI DrawDibProfileDisplay( LPBITMAPINFOHEADER lpbi );",
            "name": "DrawDibProfileDisplay"
        },
        {
            "signature": "UINT VFWAPI DrawDibRealize( HDRAWDIB hdd, HDC hdc, BOOL fBackground );",
            "name": "DrawDibRealize"
        },
        {
            "signature": "BOOL VFWAPI DrawDibSetPalette( HDRAWDIB hdd, HPALETTE hpal );",
            "name": "DrawDibSetPalette"
        },
        {
            "signature": "BOOL VFWAPI DrawDibStart( HDRAWDIB hdd, DWORD rate );",
            "name": "DrawDibStart"
        },
        {
            "signature": "BOOL VFWAPI DrawDibStop( HDRAWDIB hdd );",
            "name": "DrawDibStop"
        },
        {
            "signature": "BOOL VFWAPI DrawDibTime( HDRAWDIB hdd, LPDRAWDIBTIME lpddtime );",
            "name": "DrawDibTime"
        },
        {
            "signature": "HRESULT EditStreamClone( PAVISTREAM pavi, PAVISTREAM *ppResult );",
            "name": "EditStreamClone"
        },
        {
            "signature": "HRESULT EditStreamCopy( PAVISTREAM pavi, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult );",
            "name": "EditStreamCopy"
        },
        {
            "signature": "HRESULT EditStreamCut( PAVISTREAM pavi, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult );",
            "name": "EditStreamCut"
        },
        {
            "signature": "HRESULT EditStreamPaste( PAVISTREAM pavi, LONG *plPos, LONG *plLength, PAVISTREAM pstream, LONG lStart, LONG lEnd );",
            "name": "EditStreamPaste"
        },
        {
            "signature": "HRESULT EditStreamSetInfoA( PAVISTREAM pavi, LPAVISTREAMINFOA lpInfo, LONG cbInfo );",
            "name": "EditStreamSetInfoA"
        },
        {
            "signature": "HRESULT EditStreamSetInfoW( PAVISTREAM pavi, LPAVISTREAMINFOW lpInfo, LONG cbInfo );",
            "name": "EditStreamSetInfoW"
        },
        {
            "signature": "HRESULT EditStreamSetNameA( PAVISTREAM pavi, LPCSTR lpszName );",
            "name": "EditStreamSetNameA"
        },
        {
            "signature": "HRESULT EditStreamSetNameW( PAVISTREAM pavi, LPCWSTR lpszName );",
            "name": "EditStreamSetNameW"
        },
        {
            "signature": "BOOL VFWAPI GetOpenFileNamePreviewA( LPOPENFILENAMEA lpofn );",
            "name": "GetOpenFileNamePreviewA"
        },
        {
            "signature": "BOOL VFWAPI GetOpenFileNamePreviewW( LPOPENFILENAMEW lpofn );",
            "name": "GetOpenFileNamePreviewW"
        },
        {
            "signature": "BOOL VFWAPI GetSaveFileNamePreviewA( LPOPENFILENAMEA lpofn );",
            "name": "GetSaveFileNamePreviewA"
        },
        {
            "signature": "BOOL VFWAPI GetSaveFileNamePreviewW( LPOPENFILENAMEW lpofn );",
            "name": "GetSaveFileNamePreviewW"
        },
        {
            "signature": "LRESULT VFWAPI ICClose( HIC hic );",
            "name": "ICClose"
        },
        {
            "signature": "DWORD VFWAPIV ICCompress( HIC hic, DWORD dwFlags, LPBITMAPINFOHEADER lpbiOutput, LPVOID lpData, LPBITMAPINFOHEADER lpbiInput, LPVOID lpBits, LPDWORD lpckid, LPDWORD lpdwFlags, LONG lFrameNum, DWORD dwFrameSize, DWORD dwQuality, LPBITMAPINFOHEADER lpbiPrev, LPVOID lpPrev );",
            "name": "ICCompress"
        },
        {
            "signature": "BOOL VFWAPI ICCompressorChoose( HWND hwnd, UINT uiFlags, LPVOID pvIn, LPVOID lpData, PCOMPVARS pc, LPSTR lpszTitle );",
            "name": "ICCompressorChoose"
        },
        {
            "signature": "void VFWAPI ICCompressorFree( PCOMPVARS pc );",
            "name": "ICCompressorFree"
        },
        {
            "signature": "DWORD VFWAPIV ICDecompress( HIC hic, DWORD dwFlags, LPBITMAPINFOHEADER lpbiFormat, LPVOID lpData, LPBITMAPINFOHEADER lpbi, LPVOID lpBits );",
            "name": "ICDecompress"
        },
        {
            "signature": "LRESULT VFWAPI_INLINE ICDecompressEx( HIC hic, DWORD dwFlags, LPBITMAPINFOHEADER lpbiSrc, LPVOID lpSrc, int xSrc, int ySrc, int dxSrc, int dySrc, LPBITMAPINFOHEADER lpbiDst, LPVOID lpDst, int xDst, int yDst, int dxDst, int dyDst );",
            "name": "ICDecompressEx"
        },
        {
            "signature": "LRESULT VFWAPI_INLINE ICDecompressExBegin( HIC hic, DWORD dwFlags, LPBITMAPINFOHEADER lpbiSrc, LPVOID lpSrc, int xSrc, int ySrc, int dxSrc, int dySrc, LPBITMAPINFOHEADER lpbiDst, LPVOID lpDst, int xDst, int yDst, int dxDst, int dyDst );",
            "name": "ICDecompressExBegin"
        },
        {
            "signature": "LRESULT VFWAPI_INLINE ICDecompressExQuery( HIC hic, DWORD dwFlags, LPBITMAPINFOHEADER lpbiSrc, LPVOID lpSrc, int xSrc, int ySrc, int dxSrc, int dySrc, LPBITMAPINFOHEADER lpbiDst, LPVOID lpDst, int xDst, int yDst, int dxDst, int dyDst );",
            "name": "ICDecompressExQuery"
        },
        {
            "signature": "DWORD VFWAPIV ICDraw( HIC hic, DWORD dwFlags, LPVOID lpFormat, LPVOID lpData, DWORD cbData, LONG lTime );",
            "name": "ICDraw"
        },
        {
            "signature": "DWORD VFWAPIV ICDrawBegin( HIC hic, DWORD dwFlags, HPALETTE hpal, HWND hwnd, HDC hdc, int xDst, int yDst, int dxDst, int dyDst, LPBITMAPINFOHEADER lpbi, int xSrc, int ySrc, int dxSrc, int dySrc, DWORD dwRate, DWORD dwScale );",
            "name": "ICDrawBegin"
        },
        {
            "signature": "LRESULT VFWAPI_INLINE ICDrawSuggestFormat( HIC hic, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut, int dxSrc, int dySrc, int dxDst, int dyDst, HIC hicDecomp );",
            "name": "ICDrawSuggestFormat"
        },
        {
            "signature": "HIC VFWAPI ICGetDisplayFormat( HIC hic, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut, int BitDepth, int dx, int dy );",
            "name": "ICGetDisplayFormat"
        },
        {
            "signature": "LRESULT VFWAPI ICGetInfo( HIC hic, ICINFO *picinfo, DWORD cb );",
            "name": "ICGetInfo"
        },
        {
            "signature": "HANDLE VFWAPI ICImageCompress( HIC hic, UINT uiFlags, LPBITMAPINFO lpbiIn, LPVOID lpBits, LPBITMAPINFO lpbiOut, LONG lQuality, LONG *plSize );",
            "name": "ICImageCompress"
        },
        {
            "signature": "HANDLE VFWAPI ICImageDecompress( HIC hic, UINT uiFlags, LPBITMAPINFO lpbiIn, LPVOID lpBits, LPBITMAPINFO lpbiOut );",
            "name": "ICImageDecompress"
        },
        {
            "signature": "BOOL VFWAPI ICInfo( DWORD fccType, DWORD fccHandler, ICINFO *lpicinfo );",
            "name": "ICInfo"
        },
        {
            "signature": "BOOL VFWAPI ICInstall( DWORD fccType, DWORD fccHandler, LPARAM lParam, LPSTR szDesc, UINT wFlags );",
            "name": "ICInstall"
        },
        {
            "signature": "HIC VFWAPI ICLocate( DWORD fccType, DWORD fccHandler, LPBITMAPINFOHEADER lpbiIn, LPBITMAPINFOHEADER lpbiOut, WORD wFlags );",
            "name": "ICLocate"
        },
        {
            "signature": "HIC VFWAPI ICOpen( DWORD fccType, DWORD fccHandler, UINT wMode );",
            "name": "ICOpen"
        },
        {
            "signature": "HIC VFWAPI ICOpenFunction( DWORD fccType, DWORD fccHandler, UINT wMode, FARPROC lpfnHandler );",
            "name": "ICOpenFunction"
        },
        {
            "signature": "BOOL VFWAPI ICRemove( DWORD fccType, DWORD fccHandler, UINT wFlags );",
            "name": "ICRemove"
        },
        {
            "signature": "LRESULT VFWAPI ICSendMessage( HIC hic, UINT msg, DWORD_PTR dw1, DWORD_PTR dw2 );",
            "name": "ICSendMessage"
        },
        {
            "signature": "LPVOID VFWAPI ICSeqCompressFrame( PCOMPVARS pc, UINT uiFlags, LPVOID lpBits, BOOL *pfKey, LONG *plSize );",
            "name": "ICSeqCompressFrame"
        },
        {
            "signature": "void VFWAPI ICSeqCompressFrameEnd( PCOMPVARS pc );",
            "name": "ICSeqCompressFrameEnd"
        },
        {
            "signature": "BOOL VFWAPI ICSeqCompressFrameStart( PCOMPVARS pc, LPBITMAPINFO lpbiIn );",
            "name": "ICSeqCompressFrameStart"
        },
        {
            "signature": "LRESULT VFWAPI_INLINE ICSetStatusProc( HIC hic, DWORD dwFlags, LRESULT lParam, LONG(* )(LPARAM,UINT,LONG) fpfnStatus );",
            "name": "ICSetStatusProc"
        },
        {
            "signature": "HWND VFWAPIV MCIWndCreateA( HWND hwndParent, HINSTANCE hInstance, DWORD dwStyle, LPCSTR szFile );",
            "name": "MCIWndCreateA"
        },
        {
            "signature": "HWND VFWAPIV MCIWndCreateW( HWND hwndParent, HINSTANCE hInstance, DWORD dwStyle, LPCWSTR szFile );",
            "name": "MCIWndCreateW"
        },
        {
            "signature": "BOOL VFWAPIV MCIWndRegisterClass();",
            "name": "MCIWndRegisterClass"
        },
        {
            "signature": "void StretchDIB( LPBITMAPINFOHEADER biDst, LPVOID lpDst, int DstX, int DstY, int DstXE, int DstYE, LPBITMAPINFOHEADER biSrc, LPVOID lpSrc, int SrcX, int SrcY, int SrcXE, int SrcYE );",
            "name": "StretchDIB"
        }
    ],
    "Virtdisk.h": [
        {
            "signature": "DWORD AddVirtualDiskParent( [in] HANDLE VirtualDiskHandle, [in] PCWSTR ParentPath );",
            "name": "AddVirtualDiskParent"
        },
        {
            "signature": "DWORD ApplySnapshotVhdSet( [in] HANDLE VirtualDiskHandle, [in] const PAPPLY_SNAPSHOT_VHDSET_PARAMETERS Parameters, [in] APPLY_SNAPSHOT_VHDSET_FLAG Flags );",
            "name": "ApplySnapshotVhdSet"
        },
        {
            "signature": "DWORD AttachVirtualDisk( [in] HANDLE VirtualDiskHandle, [in, optional] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] ATTACH_VIRTUAL_DISK_FLAG Flags, [in] ULONG ProviderSpecificFlags, [in, optional] PATTACH_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "AttachVirtualDisk"
        },
        {
            "signature": "DWORD BreakMirrorVirtualDisk( [in] HANDLE VirtualDiskHandle );",
            "name": "BreakMirrorVirtualDisk"
        },
        {
            "signature": "DWORD CompactVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] COMPACT_VIRTUAL_DISK_FLAG Flags, [in, optional] PCOMPACT_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "CompactVirtualDisk"
        },
        {
            "signature": "DWORD CreateVirtualDisk( [in] PVIRTUAL_STORAGE_TYPE VirtualStorageType, [in] PCWSTR Path, [in] VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, [in, optional] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] CREATE_VIRTUAL_DISK_FLAG Flags, [in] ULONG ProviderSpecificFlags, [in] PCREATE_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped, [out] PHANDLE Handle );",
            "name": "CreateVirtualDisk"
        },
        {
            "signature": "DWORD DeleteSnapshotVhdSet( [in] HANDLE VirtualDiskHandle, [in] const PDELETE_SNAPSHOT_VHDSET_PARAMETERS Parameters, [in] DELETE_SNAPSHOT_VHDSET_FLAG Flags );",
            "name": "DeleteSnapshotVhdSet"
        },
        {
            "signature": "DWORD DeleteVirtualDiskMetadata( [in] HANDLE VirtualDiskHandle, [in] const GUID *Item );",
            "name": "DeleteVirtualDiskMetadata"
        },
        {
            "signature": "DWORD DetachVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] DETACH_VIRTUAL_DISK_FLAG Flags, [in] ULONG ProviderSpecificFlags );",
            "name": "DetachVirtualDisk"
        },
        {
            "signature": "DWORD EnumerateVirtualDiskMetadata( [in] HANDLE VirtualDiskHandle, [in, out] PULONG NumberOfItems, [out] GUID *Items );",
            "name": "EnumerateVirtualDiskMetadata"
        },
        {
            "signature": "DWORD ExpandVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] EXPAND_VIRTUAL_DISK_FLAG Flags, [in] PEXPAND_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "ExpandVirtualDisk"
        },
        {
            "signature": "DWORD GetStorageDependencyInformation( [in] HANDLE ObjectHandle, [in] GET_STORAGE_DEPENDENCY_FLAG Flags, [in] ULONG StorageDependencyInfoSize, [in, out] PSTORAGE_DEPENDENCY_INFO StorageDependencyInfo, [in, out, optional] PULONG SizeUsed );",
            "name": "GetStorageDependencyInformation"
        },
        {
            "signature": "DWORD GetVirtualDiskInformation( [in] HANDLE VirtualDiskHandle, [in, out] PULONG VirtualDiskInfoSize, [in, out] PGET_VIRTUAL_DISK_INFO VirtualDiskInfo, [in, out, optional] PULONG SizeUsed );",
            "name": "GetVirtualDiskInformation"
        },
        {
            "signature": "DWORD GetVirtualDiskMetadata( [in] HANDLE VirtualDiskHandle, [in] const GUID *Item, [in, out] PULONG MetaDataSize, [out] PVOID MetaData );",
            "name": "GetVirtualDiskMetadata"
        },
        {
            "signature": "DWORD GetVirtualDiskOperationProgress( [in] HANDLE VirtualDiskHandle, [in] LPOVERLAPPED Overlapped, [out] PVIRTUAL_DISK_PROGRESS Progress );",
            "name": "GetVirtualDiskOperationProgress"
        },
        {
            "signature": "DWORD GetVirtualDiskPhysicalPath( [in] HANDLE VirtualDiskHandle, [in, out] PULONG DiskPathSizeInBytes, [out, optional] PWSTR DiskPath );",
            "name": "GetVirtualDiskPhysicalPath"
        },
        {
            "signature": "DWORD MergeVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] MERGE_VIRTUAL_DISK_FLAG Flags, [in] PMERGE_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "MergeVirtualDisk"
        },
        {
            "signature": "DWORD MirrorVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] MIRROR_VIRTUAL_DISK_FLAG Flags, [in] PMIRROR_VIRTUAL_DISK_PARAMETERS Parameters, [in] LPOVERLAPPED Overlapped );",
            "name": "MirrorVirtualDisk"
        },
        {
            "signature": "DWORD ModifyVhdSet( [in] HANDLE VirtualDiskHandle, [in] const PMODIFY_VHDSET_PARAMETERS Parameters, [in] MODIFY_VHDSET_FLAG Flags );",
            "name": "ModifyVhdSet"
        },
        {
            "signature": "DWORD OpenVirtualDisk( [in] PVIRTUAL_STORAGE_TYPE VirtualStorageType, [in] PCWSTR Path, [in] VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, [in] OPEN_VIRTUAL_DISK_FLAG Flags, [in, optional] POPEN_VIRTUAL_DISK_PARAMETERS Parameters, [out] PHANDLE Handle );",
            "name": "OpenVirtualDisk"
        },
        {
            "signature": "DWORD QueryChangesVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] PCWSTR ChangeTrackingId, [in] ULONG64 ByteOffset, [in] ULONG64 ByteLength, [in] QUERY_CHANGES_VIRTUAL_DISK_FLAG Flags, [out] PQUERY_CHANGES_VIRTUAL_DISK_RANGE Ranges, [in, out] PULONG RangeCount, [out] PULONG64 ProcessedLength );",
            "name": "QueryChangesVirtualDisk"
        },
        {
            "signature": "DWORD RawSCSIVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] const PRAW_SCSI_VIRTUAL_DISK_PARAMETERS Parameters, [in] RAW_SCSI_VIRTUAL_DISK_FLAG Flags, [out] PRAW_SCSI_VIRTUAL_DISK_RESPONSE Response );",
            "name": "RawSCSIVirtualDisk"
        },
        {
            "signature": "DWORD ResizeVirtualDisk( [in] HANDLE VirtualDiskHandle, [in] RESIZE_VIRTUAL_DISK_FLAG Flags, [in] PRESIZE_VIRTUAL_DISK_PARAMETERS Parameters, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "ResizeVirtualDisk"
        },
        {
            "signature": "DWORD SetVirtualDiskInformation( [in] HANDLE VirtualDiskHandle, [in] PSET_VIRTUAL_DISK_INFO VirtualDiskInfo );",
            "name": "SetVirtualDiskInformation"
        },
        {
            "signature": "DWORD SetVirtualDiskMetadata( [in] HANDLE VirtualDiskHandle, [in] const GUID *Item, [in] ULONG MetaDataSize, [in] const void *MetaData );",
            "name": "SetVirtualDiskMetadata"
        },
        {
            "signature": "DWORD TakeSnapshotVhdSet( [in] HANDLE VirtualDiskHandle, [in] const PTAKE_SNAPSHOT_VHDSET_PARAMETERS Parameters, [in] TAKE_SNAPSHOT_VHDSET_FLAG Flags );",
            "name": "TakeSnapshotVhdSet"
        }
    ],
    "Vmgenerationcounter.h": [],
    "Vsadmin.h": [],
    "Vsbackup.h": [
        {
            "signature": "HRESULT CreateVssBackupComponents( [out] IVssBackupComponents **ppBackup );",
            "name": "CreateVssBackupComponents"
        },
        {
            "signature": "HRESULT CreateVssBackupComponentsInternal( [out] IVssBackupComponents **ppBackup );",
            "name": "CreateVssBackupComponentsInternal"
        },
        {
            "signature": "HRESULT CreateVssExamineWriterMetadata( [in] BSTR bstrXML, [out] IVssExamineWriterMetadata **ppMetadata );",
            "name": "CreateVssExamineWriterMetadata"
        },
        {
            "signature": "HRESULT CreateVssExamineWriterMetadataInternal( [in] BSTR bstrXML, [out] IVssExamineWriterMetadata **ppMetadata );",
            "name": "CreateVssExamineWriterMetadataInternal"
        },
        {
            "signature": "HRESULT IsVolumeSnapshotted( [in] VSS_PWSZ pwszVolumeName, [out] BOOL *pbSnapshotsPresent, [out] LONG *plSnapshotCapability );",
            "name": "IsVolumeSnapshotted"
        },
        {
            "signature": "HRESULT IsVolumeSnapshottedInternal( [in] VSS_PWSZ pwszVolumeName, [out] BOOL *pbSnapshotsPresent, [out] LONG *plSnapshotCapability );",
            "name": "IsVolumeSnapshottedInternal"
        },
        {
            "signature": "HRESULT ShouldBlockRevert( [in] LPCWSTR wszVolumeName, [out] bool *pbBlock );",
            "name": "ShouldBlockRevert"
        },
        {
            "signature": "void VssFreeSnapshotProperties( [in] VSS_SNAPSHOT_PROP *pProp );",
            "name": "VssFreeSnapshotProperties"
        },
        {
            "signature": "void VssFreeSnapshotPropertiesInternal( [in] VSS_SNAPSHOT_PROP *pProp );",
            "name": "VssFreeSnapshotPropertiesInternal"
        }
    ],
    "Vsmgmt.h": [],
    "Vsprov.h": [],
    "Vss.h": [],
    "Vswriter.h": [
        {
            "signature": "HRESULT CreateVssExpressWriter( [out] IVssExpressWriter **ppWriter );",
            "name": "CreateVssExpressWriter"
        },
        {
            "signature": "HRESULT CreateVssExpressWriterInternal( [out] IVssExpressWriter **ppWriter );",
            "name": "CreateVssExpressWriterInternal"
        },
        {
            "signature": "HRESULT CreateWriter( CVssWriter *pWriter, IVssWriterImpl **pWriterImpl );",
            "name": "CreateWriter"
        },
        {
            "signature": "HRESULT CreateWriterEx( [in] CVssWriterEx *pWriter, [out] IVssWriterImpl **pWriterImpl );",
            "name": "CreateWriterEx"
        }
    ],
    "Waasapi.h": [],
    "Waasapitypes.h": [],
    "Wabapi.h": [
        {
            "signature": "WABOpen Wabopen; HRESULT Wabopen( LPADRBOOK *lppAdrBook, LPWABOBJECT *lppWABObject, LPWAB_PARAM lpWP, DWORD Reserved2 ) {...}",
            "name": "WABOpen callback"
        },
        {
            "signature": "WABOpenEx Wabopenex; HRESULT Wabopenex( LPADRBOOK *lppAdrBook, LPWABOBJECT *lppWABObject, LPWAB_PARAM lpWP, DWORD Reserved, ALLOCATEBUFFER *fnAllocateBuffer, ALLOCATEMORE *fnAllocateMore, FREEBUFFER *fnFreeBuffer ) {...}",
            "name": "WABOpenEx callback"
        }
    ],
    "Wabdefs.h": [],
    "Wabiab.h": [],
    "Wabmem.h": [
        {
            "signature": "MAPIFREEBUFFER Mapifreebuffer; ULONG Mapifreebuffer( LPVOID lpBuffer ) {...}",
            "name": "MAPIFREEBUFFER callback"
        }
    ],
    "Wabtags.h": [],
    "Wbemcli.h": [],
    "Wbemdisp.h": [],
    "Wbemglue.h": [],
    "Wbemprov.h": [],
    "Wbemtime.h": [],
    "Wcmapi.h": [
        {
            "signature": "void WcmFreeMemory( __deallocate(Mem) void *pMemory );",
            "name": "WcmFreeMemory"
        },
        {
            "signature": "DWORD WcmGetProfileList( void *pReserved, [out] WCM_PROFILE_INFO_LIST **ppProfileList );",
            "name": "WcmGetProfileList"
        },
        {
            "signature": "DWORD WcmQueryProperty( [in, optional] const GUID *pInterface, [in, optional] LPCWSTR strProfileName, [in] WCM_PROPERTY Property, void *pReserved, [out] PDWORD pdwDataSize, [out] PBYTE *ppData );",
            "name": "WcmQueryProperty"
        },
        {
            "signature": "DWORD WcmSetProfileList( [in] WCM_PROFILE_INFO_LIST *pProfileList, [in] DWORD dwPosition, [in] BOOL fIgnoreUnknownProfiles, void *pReserved );",
            "name": "WcmSetProfileList"
        },
        {
            "signature": "DWORD WcmSetProperty( [in, optional] const GUID *pInterface, [in, optional] LPCWSTR strProfileName, [in] WCM_PROPERTY Property, void *pReserved, [in] DWORD dwDataSize, [in, optional] const BYTE *pbData );",
            "name": "WcmSetProperty"
        }
    ],
    "Wcmconfig.h": [],
    "Wcndevice.h": [],
    "Wcntypes.h": [],
    "Wcsplugin.h": [],
    "Wct.h": [
        {
            "signature": "void CloseThreadWaitChainSession( [in] HWCT WctHandle );",
            "name": "CloseThreadWaitChainSession"
        },
        {
            "signature": "BOOL GetThreadWaitChain( [in] HWCT WctHandle, [in, optional] DWORD_PTR Context, [in] DWORD Flags, [in] DWORD ThreadId, [in, out] LPDWORD NodeCount, [out] PWAITCHAIN_NODE_INFO NodeInfoArray, [out] LPBOOL IsCycle );",
            "name": "GetThreadWaitChain"
        },
        {
            "signature": "HWCT OpenThreadWaitChainSession( [in] DWORD Flags, [in, optional] PWAITCHAINCALLBACK callback );",
            "name": "OpenThreadWaitChainSession"
        },
        {
            "signature": "PWAITCHAINCALLBACK Pwaitchaincallback; void Pwaitchaincallback( HWCT WctHandle, DWORD_PTR Context, DWORD CallbackStatus, LPDWORD NodeCount, PWAITCHAIN_NODE_INFO NodeInfoArray, LPBOOL IsCycle ) {...}",
            "name": "PWAITCHAINCALLBACK callback"
        },
        {
            "signature": "void RegisterWaitChainCOMCallback( [in] PCOGETCALLSTATE CallStateCallback, [in] PCOGETACTIVATIONSTATE ActivationStateCallback );",
            "name": "RegisterWaitChainCOMCallback"
        }
    ],
    "Wdsbp.h": [
        {
            "signature": "DWORD WDSBPAPI WdsBpAddOption( [in] HANDLE hHandle, [in] ULONG uOption, [in] ULONG uValueLen, [in] PVOID pValue );",
            "name": "WdsBpAddOption"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpCloseHandle( [in] HANDLE hHandle );",
            "name": "WdsBpCloseHandle"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpGetOptionBuffer( [in] HANDLE hHandle, [in] ULONG uBufferLen, [out] PVOID pBuffer, [out] PULONG puBytes );",
            "name": "WdsBpGetOptionBuffer"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpInitialize( [in] BYTE bPacketType, [out] HANDLE *phHandle );",
            "name": "WdsBpInitialize"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpParseInitialize( [in] PVOID pPacket, [in] ULONG uPacketLen, [out, optional] PBYTE pbPacketType, [out] HANDLE *phHandle );",
            "name": "WdsBpParseInitialize"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpParseInitializev6( [in] PVOID pPacket, [in] ULONG uPacketLen, [out, optional] PBYTE pbPacketType, [out] HANDLE *phHandle );",
            "name": "WdsBpParseInitializev6"
        },
        {
            "signature": "DWORD WDSBPAPI WdsBpQueryOption( [in] HANDLE hHandle, [in] ULONG uOption, [out] ULONG uValueLen, [out] PVOID pValue, [out] PULONG puBytes );",
            "name": "WdsBpQueryOption"
        }
    ],
    "Wdsclientapi.h": [
        {
            "signature": "PFN_WdsCliCallback PfnWdsclicallback; void PfnWdsclicallback( [in] DWORD dwMessageId, [in, optional] WPARAM wParam, [in, optional] LPARAM lParam, [in, optional] PVOID pvUserData ) {...}",
            "name": "PFN_WdsCliCallback callback"
        },
        {
            "signature": "PFN_WdsCliTraceFunction PfnWdsclitracefunction; void PfnWdsclitracefunction( [in] LPCWSTR pwszFormat, [in] va_list Params ) {...}",
            "name": "PFN_WdsCliTraceFunction callback"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliAuthorizeSession( [in, out] HANDLE hSession, [in, optional] PWDS_CLI_CRED pCred );",
            "name": "WdsCliAuthorizeSession"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliCancelTransfer( [in] HANDLE hTransfer );",
            "name": "WdsCliCancelTransfer"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliClose( [in] HANDLE Handle );",
            "name": "WdsCliClose"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliCreateSession( [in] PWSTR pwszServer, [in, optional] PWDS_CLI_CRED pCred, [out] PHANDLE phSession );",
            "name": "WdsCliCreateSession"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliFindFirstImage( [in] HANDLE hSession, [out] PHANDLE phFindHandle );",
            "name": "WdsCliFindFirstImage"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliFindNextImage( [in] HANDLE Handle );",
            "name": "WdsCliFindNextImage"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliFreeStringArray( [in, out, optional] PWSTR *ppwszArray, [in] ULONG ulCount );",
            "name": "WdsCliFreeStringArray"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetDriverQueryXml( [in, optional] PWSTR pwszWinDirPath, [out] PWSTR *ppwszDriverQuery );",
            "name": "WdsCliGetDriverQueryXml"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetEnumerationFlags( [in] HANDLE Handle, [out] PDWORD pdwFlags );",
            "name": "WdsCliGetEnumerationFlags"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageArchitecture( [in] HANDLE hIfh, [out] PDWORD pdwValue );",
            "name": "WdsCliGetImageArchitecture"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageDescription( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageDescription"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageGroup( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageGroup"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageHalName( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageHalName"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageHandleFromFindHandle( [in] HANDLE FindHandle, [out] PHANDLE phImageHandle );",
            "name": "WdsCliGetImageHandleFromFindHandle"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageHandleFromTransferHandle( HANDLE hTransfer, [out] PHANDLE phImageHandle );",
            "name": "WdsCliGetImageHandleFromTransferHandle"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageIndex( [in] HANDLE hIfh, [out] PDWORD pdwValue );",
            "name": "WdsCliGetImageIndex"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageLanguage( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageLanguage"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageLanguages( [in] HANDLE hIfh, [out] PTSTR **pppszValues, [out] PDWORD pdwNumValues );",
            "name": "WdsCliGetImageLanguages"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageLastModifiedTime( [in] HANDLE hIfh, [out] PSYSTEMTIME *ppSysTimeValue );",
            "name": "WdsCliGetImageLastModifiedTime"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageName( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageName"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageNamespace( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageNamespace"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImagePath( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImagePath"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageSize( [in] HANDLE hIfh, [out] PULONGLONG pullValue );",
            "name": "WdsCliGetImageSize"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetImageVersion( [in] HANDLE hIfh, [out] PWSTR *ppwszValue );",
            "name": "WdsCliGetImageVersion"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliGetTransferSize( [in] HANDLE hIfh, [out] PULONGLONG pullValue );",
            "name": "WdsCliGetTransferSize"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliInitializeLog( [in] HANDLE hSession, [in] ULONG ulClientArchitecture, [in] PWSTR pwszClientId, [in] PWSTR pwszClientAddress );",
            "name": "WdsCliInitializeLog"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliLog( [in] HANDLE hSession, [in] ULONG ulLogLevel, [in] ULONG ulMessageCode, ... );",
            "name": "WdsCliLog"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliObtainDriverPackages( [in] HANDLE hImage, [out] PWSTR *ppwszServerName, [out] PWSTR **pppwszDriverPackages, [out] ULONG *pulCount );",
            "name": "WdsCliObtainDriverPackages"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliObtainDriverPackagesEx( [in] HANDLE hSession, [out] PWSTR pwszMachineInfo, [out] PWSTR *ppwszServerName, [out] PWSTR **pppwszDriverPackages, [out] ULONG *pulCount );",
            "name": "WdsCliObtainDriverPackagesEx"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliRegisterTrace( [in, optional] PFN_WdsCliTraceFunction pfn );",
            "name": "WdsCliRegisterTrace"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliTransferFile( [in] PCWSTR pwszServer, [in] PCWSTR pwszNamespace, [in] PCWSTR pwszRemoteFilePath, [in] PCWSTR pwszLocalFilePath, [in] DWORD dwFlags, [in] DWORD dwReserved, [in, optional] PFN_WdsCliCallback pfnWdsCliCallback, [in, optional] PVOID pvUserData, [out] PHANDLE phTransfer );",
            "name": "WdsCliTransferFile"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliTransferImage( [in] HANDLE hImage, [in] PWSTR pwszLocalPath, [in] DWORD dwFlags, [in] DWORD dwReserved, [in, optional] PFN_WdsCliCallback pfnWdsCliCallback, [in, optional] PVOID pvUserData, [out] PHANDLE phTransfer );",
            "name": "WdsCliTransferImage"
        },
        {
            "signature": "HRESULT WDSCLIAPI WdsCliWaitForTransfer( [in] HANDLE hTransfer );",
            "name": "WdsCliWaitForTransfer"
        }
    ],
    "Wdspxe.h": [
        {
            "signature": "DWORD PXEAPI PxeAsyncRecvDone( [in] HANDLE hClientRequest, [in] PXE_BOOT_ACTION Action );",
            "name": "PxeAsyncRecvDone"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpAppendOption( [in, out] PVOID pReplyPacket, [in] ULONG uMaxReplyPacketLen, [in, out] PULONG puReplyPacketLen, [in] BYTE bOption, [in] BYTE bOptionLen, [in] PVOID pValue );",
            "name": "PxeDhcpAppendOption"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpAppendOptionRaw( [in, out] PVOID pReplyPacket, [in] ULONG uMaxReplyPacketLen, [in, out] PULONG puReplyPacketLen, [in] USHORT uBufferLen, [in] PVOID pBuffer );",
            "name": "PxeDhcpAppendOptionRaw"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpGetOptionValue( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] ULONG uInstance, [in] BYTE bOption, [out, optional] PBYTE pbOptionLen, [out, optional] PVOID *ppOptionValue );",
            "name": "PxeDhcpGetOptionValue"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpGetVendorOptionValue( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] BYTE bOption, [in] ULONG uInstance, [out, optional] PBYTE pbOptionLen, [out, optional] PVOID *ppOptionValue );",
            "name": "PxeDhcpGetVendorOptionValue"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpInitialize( [in] PVOID pRecvPacket, [in] ULONG uRecvPacketLen, [in, out] PVOID pReplyPacket, [in] ULONG uMaxReplyPacketLen, [out] PULONG puReplyPacketLen );",
            "name": "PxeDhcpInitialize"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpIsValid( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] BOOL bRequestPacket, [out] PBOOL pbPxeOptionPresent );",
            "name": "PxeDhcpIsValid"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6AppendOption( [in, out] PVOID pReply, [in] ULONG cbReply, [in, out] PULONG pcbReplyUsed, [in] WORD wOptionType, [in] WORD cbOption, [in] PVOID pOption );",
            "name": "PxeDhcpv6AppendOption"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6AppendOptionRaw( [in, out] PVOID pReply, [in] ULONG cbReply, [in, out] PULONG pcbReplyUsed, [in] USHORT cbBuffer, [in] PVOID pBuffer );",
            "name": "PxeDhcpv6AppendOptionRaw"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6CreateRelayRepl( [in] PPXE_DHCPV6_NESTED_RELAY_MESSAGE pRelayMessages, [in] ULONG nRelayMessages, [in] PBYTE pInnerPacket, [in] ULONG cbInnerPacket, [out] PVOID pReplyBuffer, [in] ULONG cbReplyBuffer, [out] PULONG pcbReplyBuffer );",
            "name": "PxeDhcpv6CreateRelayRepl"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6GetOptionValue( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] ULONG uInstance, [in] WORD wOption, [out, optional] PWORD pwOptionLen, [out, optional] PVOID *ppOptionValue );",
            "name": "PxeDhcpv6GetOptionValue"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6GetVendorOptionValue( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] DWORD dwEnterpriseNumber, [in] WORD wOption, [in] ULONG uInstance, [out, optional] PWORD pwOptionLen, [out, optional] PVOID *ppOptionValue );",
            "name": "PxeDhcpv6GetVendorOptionValue"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6Initialize( [in] PVOID pRequest, [in] ULONG cbRequest, [in, out] PVOID pReply, [in] ULONG cbReply, [out] PULONG pcbReplyUsed );",
            "name": "PxeDhcpv6Initialize"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6IsValid( [in] PVOID pPacket, [in] ULONG uPacketLen, [in] BOOL bRequestPacket, [out] PBOOL pbPxeOptionPresent );",
            "name": "PxeDhcpv6IsValid"
        },
        {
            "signature": "DWORD PXEAPI PxeDhcpv6ParseRelayForw( [in] PVOID pRelayForwPacket, [in] ULONG uRelayForwPacketLen, [out] PPXE_DHCPV6_NESTED_RELAY_MESSAGE pRelayMessages, [in] ULONG nRelayMessages, [out] PULONG pnRelayMessages, [out] PBYTE *ppInnerPacket, [out] PULONG pcbInnerPacket );",
            "name": "PxeDhcpv6ParseRelayForw"
        },
        {
            "signature": "DWORD PXEAPI PxeGetServerInfo( [in] PXE_GSI_TYPE uInfoType, [out] PVOID pBuffer, [in] ULONG uBufferLen );",
            "name": "PxeGetServerInfo"
        },
        {
            "signature": "DWORD PXEAPI PxeGetServerInfoEx( [in] PXE_GSI_TYPE uInfoType, [out] PVOID pBuffer, [in] ULONG uBufferLen, [out] PULONG puBufferUsed );",
            "name": "PxeGetServerInfoEx"
        },
        {
            "signature": "PVOID PXEAPI PxePacketAllocate( [in] HANDLE hProvider, [in] HANDLE hClientRequest, [in] ULONG uSize );",
            "name": "PxePacketAllocate"
        },
        {
            "signature": "DWORD PXEAPI PxePacketFree( [in] HANDLE hProvider, [in] HANDLE hClientRequest, [in] PVOID pPacket );",
            "name": "PxePacketFree"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderEnumClose( [in] HANDLE hEnum );",
            "name": "PxeProviderEnumClose"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderEnumFirst( [out] HANDLE *phEnum );",
            "name": "PxeProviderEnumFirst"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderEnumNext( [in] HANDLE hEnum, [out] PPXE_PROVIDER *ppProvider );",
            "name": "PxeProviderEnumNext"
        },
        {
            "signature": "DWORD PxeProviderFreeInfo( [in] PPXE_PROVIDER pProvider );",
            "name": "PxeProviderFreeInfo"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderQueryIndex( [in] LPCWSTR pszProviderName, [out] PULONG puIndex );",
            "name": "PxeProviderQueryIndex"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderRegister( [in] LPCWSTR pszProviderName, [in] LPCWSTR pszModulePath, [in] PXE_REG_INDEX Index, [in] BOOL bIsCritical, [out] PHKEY phProviderKey );",
            "name": "PxeProviderRegister"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderSetAttribute( [in] HANDLE hProvider, [in] PXE_PROVIDER_ATTRIBUTE Attribute, [in] PVOID pParameterBuffer, [in] ULONG uParamLen );",
            "name": "PxeProviderSetAttribute"
        },
        {
            "signature": "DWORD PXEAPI PxeProviderUnRegister( [in] LPCWSTR pszProviderName );",
            "name": "PxeProviderUnRegister"
        },
        {
            "signature": "DWORD PXEAPI PxeRegisterCallback( [in] HANDLE hProvider, [in] PXE_CALLBACK_TYPE CallbackType, [in] PVOID pCallbackFunction, [in] PVOID pContext );",
            "name": "PxeRegisterCallback"
        },
        {
            "signature": "DWORD PXEAPI PxeSendReply( [in] HANDLE hClientRequest, [in] PVOID pPacket, [in] ULONG uPacketLen, [in] PXE_ADDRESS *pAddress );",
            "name": "PxeSendReply"
        },
        {
            "signature": "DWORD PXEAPI PxeTrace( [in] HANDLE hProvider, [in] PXE_SEVERITY Severity, [in] LPCWSTR pszFormat, ... );",
            "name": "PxeTrace"
        }
    ],
    "Wdstci.h": [
        {
            "signature": "PFN_WdsTransportClientReceiveContents PfnWdstransportclientreceivecontents; void PfnWdstransportclientreceivecontents( [in] HANDLE hSessionKey, [in] PVOID pCallerData, PVOID pContents, [in] ULONG ulSize, PULARGE_INTEGER pullContentOffset ) {...}",
            "name": "PFN_WdsTransportClientReceiveContents callback"
        },
        {
            "signature": "PFN_WdsTransportClientReceiveMetadata PfnWdstransportclientreceivemetadata; void PfnWdstransportclientreceivemetadata( [in] HANDLE hSessionKey, [in] PVOID pCallerData, [in] PVOID pMetadata, [in] ULONG ulSize ) {...}",
            "name": "PFN_WdsTransportClientReceiveMetadata callback"
        },
        {
            "signature": "PFN_WdsTransportClientSessionComplete PfnWdstransportclientsessioncomplete; void PfnWdstransportclientsessioncomplete( [in] HANDLE hSessionKey, [in] PVOID pCallerData, [in] DWORD dwError ) {...}",
            "name": "PFN_WdsTransportClientSessionComplete callback"
        },
        {
            "signature": "PFN_WdsTransportClientSessionStart PfnWdstransportclientsessionstart; void PfnWdstransportclientsessionstart( [in] HANDLE hSessionKey, [in] PVOID pCallerData, PULARGE_INTEGER ullFileSize ) {...}",
            "name": "PFN_WdsTransportClientSessionStart callback"
        },
        {
            "signature": "PFN_WdsTransportClientSessionStartEx PfnWdstransportclientsessionstartex; void PfnWdstransportclientsessionstartex( [in] HANDLE hSessionKey, [in] PVOID pCallerData, [in] PTRANSPORTCLIENT_SESSION_INFO Info ) {...}",
            "name": "PFN_WdsTransportClientSessionStartEx callback"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientAddRefBuffer( [in] PVOID pvBuffer );",
            "name": "WdsTransportClientAddRefBuffer"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientCancelSession( [in] HANDLE hSessionKey );",
            "name": "WdsTransportClientCancelSession"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientCloseSession( [in] HANDLE hSessionKey );",
            "name": "WdsTransportClientCloseSession"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientCompleteReceive( [in] HANDLE hSessionKey, [in] ULONG ulSize, [in] PULARGE_INTEGER pullOffset );",
            "name": "WdsTransportClientCompleteReceive"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientInitialize();",
            "name": "WdsTransportClientInitialize"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientInitializeSession( [in] PWDS_TRANSPORTCLIENT_REQUEST pSessionRequest, [in] PVOID pCallerData, [out] PHANDLE hSessionKey );",
            "name": "WdsTransportClientInitializeSession"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientQueryStatus( [in] HANDLE hSessionKey, [out] PULONG puStatus, [out] PULONG puErrorCode );",
            "name": "WdsTransportClientQueryStatus"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientRegisterCallback( [in] HANDLE hSessionKey, [in] TRANSPORTCLIENT_CALLBACK_ID CallbackId, [in] PVOID pfnCallback );",
            "name": "WdsTransportClientRegisterCallback"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientReleaseBuffer( [in] PVOID pvBuffer );",
            "name": "WdsTransportClientReleaseBuffer"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientShutdown();",
            "name": "WdsTransportClientShutdown"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientStartSession( [in] HANDLE hSessionKey );",
            "name": "WdsTransportClientStartSession"
        },
        {
            "signature": "DWORD WDSTCIAPI WdsTransportClientWaitForCompletion( [in] HANDLE hSessionKey, [in] ULONG uTimeout );",
            "name": "WdsTransportClientWaitForCompletion"
        }
    ],
    "Wdstpdi.h": [
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderCloseContent( [in] HANDLE hContent );",
            "name": "WdsTransportProviderCloseContent"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderCloseInstance( [in] HANDLE hInstance );",
            "name": "WdsTransportProviderCloseInstance"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderCompareContent( [in] HANDLE hInstance, [in] PCWSTR pwszContentName, [in] HANDLE hContent, [out] PBOOL pbContentMatches );",
            "name": "WdsTransportProviderCompareContent"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderCreateInstance( [in] PCWSTR pwszConfigString, [out] PHANDLE phInstance );",
            "name": "WdsTransportProviderCreateInstance"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderDumpState();",
            "name": "WdsTransportProviderDumpState"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderGetContentMetadata( [in] HANDLE hContent, [out] PVOID *pvData, [out] PULONG pulLength );",
            "name": "WdsTransportProviderGetContentMetadata"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderGetContentSize( [in] HANDLE hContent, [out] PULARGE_INTEGER pContentSize );",
            "name": "WdsTransportProviderGetContentSize"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderInitialize( [in] PWDS_TRANSPORTPROVIDER_INIT_PARAMS pInParameters, [out] PWDS_TRANSPORTPROVIDER_SETTINGS pSettings, [in] ULONG ulLength );",
            "name": "WdsTransportProviderInitialize"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderOpenContent( [in] HANDLE hInstance, [in] PCWSTR pwszContentName, [out] PHANDLE phContent );",
            "name": "WdsTransportProviderOpenContent"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderReadContent( [in] HANDLE hContent, [in] PVOID pBuffer, [in] ULONG ulBytesToRead, [in] PULARGE_INTEGER pContentOffset, [in] PVOID pvUserData );",
            "name": "WdsTransportProviderReadContent"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderRefreshSettings();",
            "name": "WdsTransportProviderRefreshSettings"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderShutdown();",
            "name": "WdsTransportProviderShutdown"
        },
        {
            "signature": "HRESULT WDSTRANSPORTPROVIDERAPI WdsTransportProviderUserAccessCheck( [in] HANDLE hContent, [in] HANDLE hUserToken, [out] PBOOL pbAccessAllowed );",
            "name": "WdsTransportProviderUserAccessCheck"
        },
        {
            "signature": "PVOID WDSMCSAPI WdsTransportServerAllocateBuffer( [in] HANDLE hProvider, [in] ULONG ulBufferSize );",
            "name": "WdsTransportServerAllocateBuffer"
        },
        {
            "signature": "HRESULT WDSMCSAPI WdsTransportServerCompleteRead( [in] HANDLE hProvider, [in] ULONG ulBytesRead, [in] PVOID pvUserData, [in] HRESULT hReadResult );",
            "name": "WdsTransportServerCompleteRead"
        },
        {
            "signature": "HRESULT WDSMCSAPI WdsTransportServerFreeBuffer( [in] HANDLE hProvider, [in] PVOID pvBuffer );",
            "name": "WdsTransportServerFreeBuffer"
        },
        {
            "signature": "HRESULT WDSMCSAPI WdsTransportServerRegisterCallback( [in] HANDLE hProvider, [in] TRANSPORTPROVIDER_CALLBACK_ID CallbackId, [in] PVOID pfnCallback );",
            "name": "WdsTransportServerRegisterCallback"
        },
        {
            "signature": "HRESULT WDSMCSAPI WdsTransportServerTrace( [in] HANDLE hProvider, [in] WDS_MC_SEVERITY Severity, [in] LPCWSTR pwszFormat, ... );",
            "name": "WdsTransportServerTrace"
        },
        {
            "signature": "HRESULT WDSMCSAPI WdsTransportServerTraceV( [in] HANDLE hProvider, [in] WDS_MC_SEVERITY Severity, [in] LPCWSTR pwszFormat, [in] va_list Params );",
            "name": "WdsTransportServerTraceV"
        }
    ],
    "Wdstptmgmt.h": [],
    "Weakreference.h": [],
    "Webapplication.h": [
        {
            "signature": "RegisterAuthoringClientFunctionType Registerauthoringclientfunctiontype; HRESULT Registerauthoringclientfunctiontype( [in] IWebApplicationAuthoringMode *authoringModeObject, [in] IWebApplicationHost *host ) {...}",
            "name": "RegisterAuthoringClientFunctionType callback"
        },
        {
            "signature": "UnregisterAuthoringClientFunctionType Unregisterauthoringclientfunctiontype; HRESULT Unregisterauthoringclientfunctiontype( [in] IWebApplicationHost *host ) {...}",
            "name": "UnregisterAuthoringClientFunctionType callback"
        }
    ],
    "Webauthenticationcoremanagerinterop.h": [],
    "Webauthn.h": [
        {
            "signature": "HRESULT WebAuthNAuthenticatorGetAssertion( HWND hWnd, LPCWSTR pwszRpId, PCWEBAUTHN_CLIENT_DATA pWebAuthNClientData, PCWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS pWebAuthNGetAssertionOptions, PWEBAUTHN_ASSERTION *ppWebAuthNAssertion );",
            "name": "WebAuthNAuthenticatorGetAssertion"
        },
        {
            "signature": "HRESULT WebAuthNAuthenticatorMakeCredential( HWND hWnd, PCWEBAUTHN_RP_ENTITY_INFORMATION pRpInformation, PCWEBAUTHN_USER_ENTITY_INFORMATION pUserInformation, PCWEBAUTHN_COSE_CREDENTIAL_PARAMETERS pPubKeyCredParams, PCWEBAUTHN_CLIENT_DATA pWebAuthNClientData, PCWEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS pWebAuthNMakeCredentialOptions, PWEBAUTHN_CREDENTIAL_ATTESTATION *ppWebAuthNCredentialAttestation );",
            "name": "WebAuthNAuthenticatorMakeCredential"
        },
        {
            "signature": "HRESULT WebAuthNCancelCurrentOperation( const GUID *pCancellationId );",
            "name": "WebAuthNCancelCurrentOperation"
        },
        {
            "signature": "HRESULT WebAuthNDeletePlatformCredential( DWORD cbCredentialId, const BYTE *pbCredentialId );",
            "name": "WebAuthNDeletePlatformCredential"
        },
        {
            "signature": "void WebAuthNFreeAssertion( PWEBAUTHN_ASSERTION pWebAuthNAssertion );",
            "name": "WebAuthNFreeAssertion"
        },
        {
            "signature": "void WebAuthNFreeCredentialAttestation( PWEBAUTHN_CREDENTIAL_ATTESTATION pWebAuthNCredentialAttestation );",
            "name": "WebAuthNFreeCredentialAttestation"
        },
        {
            "signature": "void WebAuthNFreePlatformCredentialList( PWEBAUTHN_CREDENTIAL_DETAILS_LIST pCredentialDetailsList );",
            "name": "WebAuthNFreePlatformCredentialList"
        },
        {
            "signature": "DWORD WebAuthNGetApiVersionNumber();",
            "name": "WebAuthNGetApiVersionNumber"
        },
        {
            "signature": "HRESULT WebAuthNGetCancellationId( GUID *pCancellationId );",
            "name": "WebAuthNGetCancellationId"
        },
        {
            "signature": "PCWSTR WebAuthNGetErrorName( HRESULT hr );",
            "name": "WebAuthNGetErrorName"
        },
        {
            "signature": "HRESULT WebAuthNGetPlatformCredentialList( PCWEBAUTHN_GET_CREDENTIALS_OPTIONS pGetCredentialsOptions, PWEBAUTHN_CREDENTIAL_DETAILS_LIST *ppCredentialDetailsList );",
            "name": "WebAuthNGetPlatformCredentialList"
        },
        {
            "signature": "HRESULT WebAuthNGetW3CExceptionDOMError( HRESULT hr );",
            "name": "WebAuthNGetW3CExceptionDOMError"
        },
        {
            "signature": "HRESULT WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable( BOOL *pbIsUserVerifyingPlatformAuthenticatorAvailable );",
            "name": "WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable"
        }
    ],
    "Webservices.h": [
        {
            "signature": "WS_ABANDON_MESSAGE_CALLBACK WsAbandonMessageCallback; HRESULT WsAbandonMessageCallback( [in] void *channelInstance, [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ABANDON_MESSAGE_CALLBACK callback"
        },
        {
            "signature": "WS_ABORT_CHANNEL_CALLBACK WsAbortChannelCallback; HRESULT WsAbortChannelCallback( [in] void *channelInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ABORT_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_ABORT_LISTENER_CALLBACK WsAbortListenerCallback; HRESULT WsAbortListenerCallback( [in] void *listenerInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ABORT_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_ACCEPT_CHANNEL_CALLBACK WsAcceptChannelCallback; HRESULT WsAcceptChannelCallback( [in] void *listenerInstance, [in] void *channelInstance, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ACCEPT_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_ASYNC_CALLBACK WsAsyncCallback; void WsAsyncCallback( [in] HRESULT errorCode, [in] WS_CALLBACK_MODEL callbackModel, [in] void *callbackState ) {...}",
            "name": "WS_ASYNC_CALLBACK callback"
        },
        {
            "signature": "WS_ASYNC_FUNCTION WsAsyncFunction; HRESULT WsAsyncFunction( [in] HRESULT hr, [in] WS_CALLBACK_MODEL callbackModel, [in] void *callbackState, WS_ASYNC_OPERATION *next, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ASYNC_FUNCTION callback"
        },
        {
            "signature": "WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK WsCertIssuerListNotificationCallback; HRESULT WsCertIssuerListNotificationCallback( [in] void *certIssuerListNotificationCallbackState, [in] const _SecPkgContext_IssuerListInfoEx *issuerList, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK callback"
        },
        {
            "signature": "WS_CERTIFICATE_VALIDATION_CALLBACK WsCertificateValidationCallback; HRESULT WsCertificateValidationCallback( [in] PCCERT_CONTEXT certContext, [in, optional] void *state ) {...}",
            "name": "WS_CERTIFICATE_VALIDATION_CALLBACK callback"
        },
        {
            "signature": "WS_CLOSE_CHANNEL_CALLBACK WsCloseChannelCallback; HRESULT WsCloseChannelCallback( [in] void *channelInstance, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CLOSE_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_CLOSE_LISTENER_CALLBACK WsCloseListenerCallback; HRESULT WsCloseListenerCallback( [in] void *listenerInstance, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CLOSE_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_CREATE_CHANNEL_CALLBACK WsCreateChannelCallback; HRESULT WsCreateChannelCallback( [in] WS_CHANNEL_TYPE channelType, const void *channelParameters, [in] ULONG channelParametersSize, void **channelInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CREATE_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK WsCreateChannelForListenerCallback; HRESULT WsCreateChannelForListenerCallback( [in] void *listenerInstance, const void *channelParameters, [in] ULONG channelParametersSize, void **channelInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_CREATE_DECODER_CALLBACK WsCreateDecoderCallback; HRESULT WsCreateDecoderCallback( [in] void *createContext, [in] WS_READ_CALLBACK readCallback, [in] void *readContext, void **decoderContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CREATE_DECODER_CALLBACK callback"
        },
        {
            "signature": "WS_CREATE_ENCODER_CALLBACK WsCreateEncoderCallback; HRESULT WsCreateEncoderCallback( [in] void *createContext, [in] WS_WRITE_CALLBACK writeCallback, [in] void *writeContext, void **encoderContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CREATE_ENCODER_CALLBACK callback"
        },
        {
            "signature": "WS_CREATE_LISTENER_CALLBACK WsCreateListenerCallback; HRESULT WsCreateListenerCallback( [in] WS_CHANNEL_TYPE channelType, const void *listenerParameters, [in] ULONG listenerParametersSize, void **listenerInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_CREATE_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_DECODER_DECODE_CALLBACK WsDecoderDecodeCallback; HRESULT WsDecoderDecodeCallback( [in] void *encoderContext, void *buffer, [in] ULONG maxLength, [out] ULONG *length, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DECODER_DECODE_CALLBACK callback"
        },
        {
            "signature": "WS_DECODER_END_CALLBACK WsDecoderEndCallback; HRESULT WsDecoderEndCallback( [in] void *encoderContext, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DECODER_END_CALLBACK callback"
        },
        {
            "signature": "WS_DECODER_GET_CONTENT_TYPE_CALLBACK WsDecoderGetContentTypeCallback; HRESULT WsDecoderGetContentTypeCallback( [in] void *decoderContext, [in] const WS_STRING *contentType, [in, optional] const WS_STRING *contentEncoding, [out] WS_STRING *newContentType, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DECODER_GET_CONTENT_TYPE_CALLBACK callback"
        },
        {
            "signature": "WS_DECODER_START_CALLBACK WsDecoderStartCallback; HRESULT WsDecoderStartCallback( [in] void *encoderContext, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DECODER_START_CALLBACK callback"
        },
        {
            "signature": "WS_DURATION_COMPARISON_CALLBACK WsDurationComparisonCallback; HRESULT WsDurationComparisonCallback( [in] const WS_DURATION *duration1, [in] const WS_DURATION *duration2, [out] int *result, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DURATION_COMPARISON_CALLBACK callback"
        },
        {
            "signature": "WS_DYNAMIC_STRING_CALLBACK WsDynamicStringCallback; HRESULT WsDynamicStringCallback( [in] void *callbackState, [in] const WS_XML_STRING *string, [out] BOOL *found, [out] ULONG *id, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_DYNAMIC_STRING_CALLBACK callback"
        },
        {
            "signature": "WS_ENCODER_ENCODE_CALLBACK WsEncoderEncodeCallback; HRESULT WsEncoderEncodeCallback( [in] void *encoderContext, const WS_BYTES *buffers, [in] ULONG count, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ENCODER_ENCODE_CALLBACK callback"
        },
        {
            "signature": "WS_ENCODER_END_CALLBACK WsEncoderEndCallback; HRESULT WsEncoderEndCallback( [in] void *encoderContext, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ENCODER_END_CALLBACK callback"
        },
        {
            "signature": "WS_ENCODER_GET_CONTENT_TYPE_CALLBACK WsEncoderGetContentTypeCallback; HRESULT WsEncoderGetContentTypeCallback( [in] void *encoderContext, [in] const WS_STRING *contentType, [out] WS_STRING *newContentType, [out] WS_STRING *contentEncoding, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ENCODER_GET_CONTENT_TYPE_CALLBACK callback"
        },
        {
            "signature": "WS_ENCODER_START_CALLBACK WsEncoderStartCallback; HRESULT WsEncoderStartCallback( [in] void *encoderContext, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_ENCODER_START_CALLBACK callback"
        },
        {
            "signature": "WS_FREE_CHANNEL_CALLBACK WsFreeChannelCallback; void WsFreeChannelCallback( [in] void *channelInstance ) {...}",
            "name": "WS_FREE_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_FREE_DECODER_CALLBACK WsFreeDecoderCallback; void WsFreeDecoderCallback( [in] void *decoderContext ) {...}",
            "name": "WS_FREE_DECODER_CALLBACK callback"
        },
        {
            "signature": "WS_FREE_ENCODER_CALLBACK WsFreeEncoderCallback; void WsFreeEncoderCallback( [in] void *encoderContext ) {...}",
            "name": "WS_FREE_ENCODER_CALLBACK callback"
        },
        {
            "signature": "WS_FREE_LISTENER_CALLBACK WsFreeListenerCallback; void WsFreeListenerCallback( [in] void *listenerInstance ) {...}",
            "name": "WS_FREE_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_GET_CERT_CALLBACK WsGetCertCallback; HRESULT WsGetCertCallback( [in] void *getCertCallbackState, [in, optional] const WS_ENDPOINT_ADDRESS *targetAddress, [in, optional] const WS_STRING *viaUri, const _CERT_CONTEXT **cert, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_GET_CERT_CALLBACK callback"
        },
        {
            "signature": "WS_GET_CHANNEL_PROPERTY_CALLBACK WsGetChannelPropertyCallback; HRESULT WsGetChannelPropertyCallback( [in] void *channelInstance, [in] WS_CHANNEL_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_GET_CHANNEL_PROPERTY_CALLBACK callback"
        },
        {
            "signature": "WS_GET_LISTENER_PROPERTY_CALLBACK WsGetListenerPropertyCallback; HRESULT WsGetListenerPropertyCallback( [in] void *listenerInstance, [in] WS_LISTENER_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_GET_LISTENER_PROPERTY_CALLBACK callback"
        },
        {
            "signature": "WS_HTTP_REDIRECT_CALLBACK WsHttpRedirectCallback; HRESULT WsHttpRedirectCallback( [in] void *state, [in] const WS_STRING *originalUrl, [in] const WS_STRING *newUrl ) {...}",
            "name": "WS_HTTP_REDIRECT_CALLBACK callback"
        },
        {
            "signature": "WS_IS_DEFAULT_VALUE_CALLBACK WsIsDefaultValueCallback; HRESULT WsIsDefaultValueCallback( [in] const void *descriptionData, const void *value, const void *defaultValue, [in] ULONG valueSize, [out] BOOL *isDefault, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_IS_DEFAULT_VALUE_CALLBACK callback"
        },
        {
            "signature": "WS_MESSAGE_DONE_CALLBACK WsMessageDoneCallback; void WsMessageDoneCallback( [in] void *doneCallbackState ) {...}",
            "name": "WS_MESSAGE_DONE_CALLBACK callback"
        },
        {
            "signature": "WS_OPEN_CHANNEL_CALLBACK WsOpenChannelCallback; HRESULT WsOpenChannelCallback( [in] void *channelInstance, [in] const WS_ENDPOINT_ADDRESS *endpointAddress, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_OPEN_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_OPEN_LISTENER_CALLBACK WsOpenListenerCallback; HRESULT WsOpenListenerCallback( [in] void *listenerInstance, [in] const WS_STRING *url, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_OPEN_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_OPERATION_CANCEL_CALLBACK WsOperationCancelCallback; void WsOperationCancelCallback( [in] const WS_SERVICE_CANCEL_REASON reason, [in] void *state ) {...}",
            "name": "WS_OPERATION_CANCEL_CALLBACK callback"
        },
        {
            "signature": "WS_OPERATION_FREE_STATE_CALLBACK WsOperationFreeStateCallback; void WsOperationFreeStateCallback( [in] void *state ) {...}",
            "name": "WS_OPERATION_FREE_STATE_CALLBACK callback"
        },
        {
            "signature": "WS_PROXY_MESSAGE_CALLBACK WsProxyMessageCallback; HRESULT WsProxyMessageCallback( [in] WS_MESSAGE *message, [in] WS_HEAP *heap, [in] void *state, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_PROXY_MESSAGE_CALLBACK callback"
        },
        {
            "signature": "WS_PULL_BYTES_CALLBACK WsPullBytesCallback; HRESULT WsPullBytesCallback( [in] void *callbackState, void *bytes, [in] ULONG maxSize, [out] ULONG *actualSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_PULL_BYTES_CALLBACK callback"
        },
        {
            "signature": "WS_PUSH_BYTES_CALLBACK WsPushBytesCallback; HRESULT WsPushBytesCallback( [in] void *callbackState, [in] WS_WRITE_CALLBACK writeCallback, [in] void *writeCallbackState, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_PUSH_BYTES_CALLBACK callback"
        },
        {
            "signature": "WS_READ_CALLBACK WsReadCallback; HRESULT WsReadCallback( [in] void *callbackState, void *bytes, [in] ULONG maxSize, [out] ULONG *actualSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_READ_CALLBACK callback"
        },
        {
            "signature": "WS_READ_MESSAGE_END_CALLBACK WsReadMessageEndCallback; HRESULT WsReadMessageEndCallback( [in] void *channelInstance, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_READ_MESSAGE_END_CALLBACK callback"
        },
        {
            "signature": "WS_READ_MESSAGE_START_CALLBACK WsReadMessageStartCallback; HRESULT WsReadMessageStartCallback( [in] void *channelInstance, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_READ_MESSAGE_START_CALLBACK callback"
        },
        {
            "signature": "WS_READ_TYPE_CALLBACK WsReadTypeCallback; HRESULT WsReadTypeCallback( [in] WS_XML_READER *reader, [in] WS_TYPE_MAPPING typeMapping, [in] const void *descriptionData, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_READ_TYPE_CALLBACK callback"
        },
        {
            "signature": "WS_RESET_CHANNEL_CALLBACK WsResetChannelCallback; HRESULT WsResetChannelCallback( [in] void *channelInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_RESET_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_RESET_LISTENER_CALLBACK WsResetListenerCallback; HRESULT WsResetListenerCallback( [in] void *listenerInstance, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_RESET_LISTENER_CALLBACK callback"
        },
        {
            "signature": "WS_SERVICE_ACCEPT_CHANNEL_CALLBACK WsServiceAcceptChannelCallback; HRESULT WsServiceAcceptChannelCallback( [in] const WS_OPERATION_CONTEXT *context, void **channelState, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SERVICE_ACCEPT_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_SERVICE_CLOSE_CHANNEL_CALLBACK WsServiceCloseChannelCallback; HRESULT WsServiceCloseChannelCallback( [in] const WS_OPERATION_CONTEXT *context, [in, optional] const WS_ASYNC_CONTEXT *asyncContext ) {...}",
            "name": "WS_SERVICE_CLOSE_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_SERVICE_MESSAGE_RECEIVE_CALLBACK WsServiceMessageReceiveCallback; HRESULT WsServiceMessageReceiveCallback( [in] const WS_OPERATION_CONTEXT *context, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SERVICE_MESSAGE_RECEIVE_CALLBACK callback"
        },
        {
            "signature": "WS_SERVICE_SECURITY_CALLBACK WsServiceSecurityCallback; HRESULT WsServiceSecurityCallback( [in] const WS_OPERATION_CONTEXT *context, [out] BOOL *authorized, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SERVICE_SECURITY_CALLBACK callback"
        },
        {
            "signature": "WS_SERVICE_STUB_CALLBACK WsServiceStubCallback; HRESULT WsServiceStubCallback( [in] const WS_OPERATION_CONTEXT *context, [in] void *frame, [in] const void *callback, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SERVICE_STUB_CALLBACK callback"
        },
        {
            "signature": "WS_SET_CHANNEL_PROPERTY_CALLBACK WsSetChannelPropertyCallback; HRESULT WsSetChannelPropertyCallback( [in] void *channelInstance, [in] WS_CHANNEL_PROPERTY_ID id, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SET_CHANNEL_PROPERTY_CALLBACK callback"
        },
        {
            "signature": "WS_SET_LISTENER_PROPERTY_CALLBACK WsSetListenerPropertyCallback; HRESULT WsSetListenerPropertyCallback( [in] void *listenerInstance, [in] WS_LISTENER_PROPERTY_ID id, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SET_LISTENER_PROPERTY_CALLBACK callback"
        },
        {
            "signature": "WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK WsShutdownSessionChannelCallback; HRESULT WsShutdownSessionChannelCallback( [in] void *channelInstance, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK callback"
        },
        {
            "signature": "WS_VALIDATE_PASSWORD_CALLBACK WsValidatePasswordCallback; HRESULT WsValidatePasswordCallback( [in, optional] void *passwordValidatorCallbackState, [in] const WS_STRING *username, [in] const WS_STRING *password, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_VALIDATE_PASSWORD_CALLBACK callback"
        },
        {
            "signature": "WS_VALIDATE_SAML_CALLBACK WsValidateSamlCallback; HRESULT WsValidateSamlCallback( [in, optional] void *samlValidatorCallbackState, [in] WS_XML_BUFFER *samlAssertion, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_VALIDATE_SAML_CALLBACK callback"
        },
        {
            "signature": "WS_WRITE_CALLBACK WsWriteCallback; HRESULT WsWriteCallback( [in] void *callbackState, const WS_BYTES *buffers, [in] ULONG count, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_WRITE_CALLBACK callback"
        },
        {
            "signature": "WS_WRITE_MESSAGE_END_CALLBACK WsWriteMessageEndCallback; HRESULT WsWriteMessageEndCallback( [in] void *channelInstance, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_WRITE_MESSAGE_END_CALLBACK callback"
        },
        {
            "signature": "WS_WRITE_MESSAGE_START_CALLBACK WsWriteMessageStartCallback; HRESULT WsWriteMessageStartCallback( [in] void *channelInstance, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_WRITE_MESSAGE_START_CALLBACK callback"
        },
        {
            "signature": "WS_WRITE_TYPE_CALLBACK WsWriteTypeCallback; HRESULT WsWriteTypeCallback( [in] WS_XML_WRITER *writer, [in] WS_TYPE_MAPPING typeMapping, [in] const void *descriptionData, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error ) {...}",
            "name": "WS_WRITE_TYPE_CALLBACK callback"
        },
        {
            "signature": "HRESULT WsAbandonCall( [in] WS_SERVICE_PROXY *serviceProxy, [in] ULONG callId, [in, optional] WS_ERROR *error );",
            "name": "WsAbandonCall"
        },
        {
            "signature": "HRESULT WsAbandonMessage( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error );",
            "name": "WsAbandonMessage"
        },
        {
            "signature": "HRESULT WsAbortChannel( [in] WS_CHANNEL *channel, [in, optional] WS_ERROR *error );",
            "name": "WsAbortChannel"
        },
        {
            "signature": "HRESULT WsAbortListener( [in] WS_LISTENER *listener, [in, optional] WS_ERROR *error );",
            "name": "WsAbortListener"
        },
        {
            "signature": "HRESULT WsAbortServiceHost( [in] WS_SERVICE_HOST *serviceHost, [in, optional] WS_ERROR *error );",
            "name": "WsAbortServiceHost"
        },
        {
            "signature": "HRESULT WsAbortServiceProxy( [in] WS_SERVICE_PROXY *serviceProxy, [in, optional] WS_ERROR *error );",
            "name": "WsAbortServiceProxy"
        },
        {
            "signature": "HRESULT WsAcceptChannel( [in] WS_LISTENER *listener, [in] WS_CHANNEL *channel, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsAcceptChannel"
        },
        {
            "signature": "HRESULT WsAddCustomHeader( [in] WS_MESSAGE *message, [in] const WS_ELEMENT_DESCRIPTION *headerDescription, [in] WS_WRITE_OPTION writeOption, [in, ref] const void *value, [in] ULONG valueSize, [in] ULONG headerAttributes, [in, optional] WS_ERROR *error );",
            "name": "WsAddCustomHeader"
        },
        {
            "signature": "HRESULT WsAddErrorString( [in] WS_ERROR *error, [in] const WS_STRING *string );",
            "name": "WsAddErrorString"
        },
        {
            "signature": "HRESULT WsAddMappedHeader( [in] WS_MESSAGE *message, [in] const WS_XML_STRING *headerName, [in] WS_TYPE valueType, [in] WS_WRITE_OPTION writeOption, [in] const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsAddMappedHeader"
        },
        {
            "signature": "HRESULT WsAddressMessage( [in] WS_MESSAGE *message, [in, optional] const WS_ENDPOINT_ADDRESS *address, [in, optional] WS_ERROR *error );",
            "name": "WsAddressMessage"
        },
        {
            "signature": "HRESULT WsAlloc( [in] WS_HEAP *heap, [in] SIZE_T size, void **ptr, [in, optional] WS_ERROR *error );",
            "name": "WsAlloc"
        },
        {
            "signature": "HRESULT WsAsyncExecute( [in] WS_ASYNC_STATE *asyncState, [in, optional] WS_ASYNC_FUNCTION operation, [in] WS_CALLBACK_MODEL callbackModel, [in] void *callbackState, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsAsyncExecute"
        },
        {
            "signature": "HRESULT WsCall( [in] WS_SERVICE_PROXY *serviceProxy, [in] const WS_OPERATION_DESCRIPTION *operation, [in, optional] const void **arguments, [in] WS_HEAP *heap, const WS_CALL_PROPERTY *callProperties, [in] const ULONG callPropertyCount, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsCall"
        },
        {
            "signature": "HRESULT WsCheckMustUnderstandHeaders( [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error );",
            "name": "WsCheckMustUnderstandHeaders"
        },
        {
            "signature": "HRESULT WsCloseChannel( [in] WS_CHANNEL *channel, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsCloseChannel"
        },
        {
            "signature": "HRESULT WsCloseListener( [in] WS_LISTENER *listener, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsCloseListener"
        },
        {
            "signature": "HRESULT WsCloseServiceHost( [in] WS_SERVICE_HOST *serviceHost, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsCloseServiceHost"
        },
        {
            "signature": "HRESULT WsCloseServiceProxy( [in] WS_SERVICE_PROXY *serviceProxy, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsCloseServiceProxy"
        },
        {
            "signature": "HRESULT WsCombineUrl( [in] const WS_STRING *baseUrl, [in] const WS_STRING *referenceUrl, [in] ULONG flags, [in] WS_HEAP *heap, [out] WS_STRING *resultUrl, [in, optional] WS_ERROR *error );",
            "name": "WsCombineUrl"
        },
        {
            "signature": "HRESULT WsCopyError( [in] WS_ERROR *source, [in] WS_ERROR *destination );",
            "name": "WsCopyError"
        },
        {
            "signature": "HRESULT WsCopyNode( [in] WS_XML_WRITER *writer, [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsCopyNode"
        },
        {
            "signature": "HRESULT WsCreateChannel( [in] WS_CHANNEL_TYPE channelType, [in] WS_CHANNEL_BINDING channelBinding, [in] const WS_CHANNEL_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] const WS_SECURITY_DESCRIPTION *securityDescription, WS_CHANNEL **channel, [in, optional] WS_ERROR *error );",
            "name": "WsCreateChannel"
        },
        {
            "signature": "HRESULT WsCreateChannelForListener( [in] WS_LISTENER *listener, const WS_CHANNEL_PROPERTY *properties, [in] ULONG propertyCount, WS_CHANNEL **channel, [in, optional] WS_ERROR *error );",
            "name": "WsCreateChannelForListener"
        },
        {
            "signature": "HRESULT WsCreateError( const WS_ERROR_PROPERTY *properties, [in] ULONG propertyCount, WS_ERROR **error );",
            "name": "WsCreateError"
        },
        {
            "signature": "HRESULT WsCreateFaultFromError( [in] WS_ERROR *error, [in] HRESULT faultErrorCode, [in] WS_FAULT_DISCLOSURE faultDisclosure, [in] WS_HEAP *heap, [out] WS_FAULT *fault );",
            "name": "WsCreateFaultFromError"
        },
        {
            "signature": "HRESULT WsCreateHeap( [in] SIZE_T maxSize, [in] SIZE_T trimSize, [in, optional] const WS_HEAP_PROPERTY *properties, [in] ULONG propertyCount, WS_HEAP **heap, [in, optional] WS_ERROR *error );",
            "name": "WsCreateHeap"
        },
        {
            "signature": "HRESULT WsCreateListener( [in] WS_CHANNEL_TYPE channelType, [in] WS_CHANNEL_BINDING channelBinding, const WS_LISTENER_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] const WS_SECURITY_DESCRIPTION *securityDescription, WS_LISTENER **listener, [in, optional] WS_ERROR *error );",
            "name": "WsCreateListener"
        },
        {
            "signature": "HRESULT WsCreateMessage( [in] WS_ENVELOPE_VERSION envelopeVersion, [in] WS_ADDRESSING_VERSION addressingVersion, const WS_MESSAGE_PROPERTY *properties, [in] ULONG propertyCount, WS_MESSAGE **message, [in, optional] WS_ERROR *error );",
            "name": "WsCreateMessage"
        },
        {
            "signature": "HRESULT WsCreateMessageForChannel( [in] WS_CHANNEL *channel, const WS_MESSAGE_PROPERTY *properties, [in] ULONG propertyCount, WS_MESSAGE **message, [in, optional] WS_ERROR *error );",
            "name": "WsCreateMessageForChannel"
        },
        {
            "signature": "HRESULT WsCreateMetadata( const WS_METADATA_PROPERTY *properties, [in] ULONG propertyCount, WS_METADATA **metadata, [in, optional] WS_ERROR *error );",
            "name": "WsCreateMetadata"
        },
        {
            "signature": "HRESULT WsCreateReader( const WS_XML_READER_PROPERTY *properties, [in] ULONG propertyCount, WS_XML_READER **reader, [in, optional] WS_ERROR *error );",
            "name": "WsCreateReader"
        },
        {
            "signature": "HRESULT WsCreateServiceEndpointFromTemplate( [in] WS_CHANNEL_TYPE channelType, [in] const WS_SERVICE_ENDPOINT_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] const WS_STRING *addressUrl, [in] const WS_SERVICE_CONTRACT *contract, [in] WS_SERVICE_SECURITY_CALLBACK authorizationCallback, [in] WS_HEAP *heap, [in] WS_BINDING_TEMPLATE_TYPE templateType, [in] void *templateValue, [in] ULONG templateSize, [in] const void *templateDescription, [in] ULONG templateDescriptionSize, [out] WS_SERVICE_ENDPOINT **serviceEndpoint, [in, optional] WS_ERROR *error );",
            "name": "WsCreateServiceEndpointFromTemplate"
        },
        {
            "signature": "HRESULT WsCreateServiceHost( const WS_SERVICE_ENDPOINT **endpoints, [in] const USHORT endpointCount, const WS_SERVICE_PROPERTY *serviceProperties, [in] ULONG servicePropertyCount, WS_SERVICE_HOST **serviceHost, [in, optional] WS_ERROR *error );",
            "name": "WsCreateServiceHost"
        },
        {
            "signature": "HRESULT WsCreateServiceProxy( [in] const WS_CHANNEL_TYPE channelType, [in] const WS_CHANNEL_BINDING channelBinding, [in, optional] const WS_SECURITY_DESCRIPTION *securityDescription, const WS_PROXY_PROPERTY *properties, [in] const ULONG propertyCount, const WS_CHANNEL_PROPERTY *channelProperties, [in] const ULONG channelPropertyCount, WS_SERVICE_PROXY **serviceProxy, [in, optional] WS_ERROR *error );",
            "name": "WsCreateServiceProxy"
        },
        {
            "signature": "HRESULT WsCreateServiceProxyFromTemplate( [in] WS_CHANNEL_TYPE channelType, const WS_PROXY_PROPERTY *properties, [in] const ULONG propertyCount, [in] WS_BINDING_TEMPLATE_TYPE templateType, void *templateValue, [in] ULONG templateSize, [in] const void *templateDescription, [in] ULONG templateDescriptionSize, WS_SERVICE_PROXY **serviceProxy, [in, optional] WS_ERROR *error );",
            "name": "WsCreateServiceProxyFromTemplate"
        },
        {
            "signature": "HRESULT WsCreateWriter( const WS_XML_WRITER_PROPERTY *properties, [in] ULONG propertyCount, WS_XML_WRITER **writer, [in, optional] WS_ERROR *error );",
            "name": "WsCreateWriter"
        },
        {
            "signature": "HRESULT WsCreateXmlBuffer( [in] WS_HEAP *heap, const WS_XML_BUFFER_PROPERTY *properties, [in] ULONG propertyCount, WS_XML_BUFFER **buffer, [in, optional] WS_ERROR *error );",
            "name": "WsCreateXmlBuffer"
        },
        {
            "signature": "HRESULT WsCreateXmlSecurityToken( [in] WS_XML_BUFFER *tokenXml, [in, optional] WS_SECURITY_KEY_HANDLE *tokenKey, const WS_XML_SECURITY_TOKEN_PROPERTY *properties, [in] ULONG propertyCount, WS_SECURITY_TOKEN **token, [in, optional] WS_ERROR *error );",
            "name": "WsCreateXmlSecurityToken"
        },
        {
            "signature": "HRESULT WsDateTimeToFileTime( [in] const WS_DATETIME *dateTime, [out] FILETIME *fileTime, [in, optional] WS_ERROR *error );",
            "name": "WsDateTimeToFileTime"
        },
        {
            "signature": "HRESULT WsDecodeUrl( [in] const WS_STRING *url, [in] ULONG flags, [in] WS_HEAP *heap, WS_URL **outUrl, [in, optional] WS_ERROR *error );",
            "name": "WsDecodeUrl"
        },
        {
            "signature": "HRESULT WsEncodeUrl( [in] const WS_URL *url, [in] ULONG flags, [in] WS_HEAP *heap, [out] WS_STRING *outUrl, [in, optional] WS_ERROR *error );",
            "name": "WsEncodeUrl"
        },
        {
            "signature": "HRESULT WsEndReaderCanonicalization( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsEndReaderCanonicalization"
        },
        {
            "signature": "HRESULT WsEndWriterCanonicalization( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsEndWriterCanonicalization"
        },
        {
            "signature": "HRESULT WsFileTimeToDateTime( [in] const FILETIME *fileTime, [out] WS_DATETIME *dateTime, [in, optional] WS_ERROR *error );",
            "name": "WsFileTimeToDateTime"
        },
        {
            "signature": "HRESULT WsFillBody( [in] WS_MESSAGE *message, [in] ULONG minSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsFillBody"
        },
        {
            "signature": "HRESULT WsFillReader( [in] WS_XML_READER *reader, [in] ULONG minSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsFillReader"
        },
        {
            "signature": "HRESULT WsFindAttribute( [in] WS_XML_READER *reader, [in] const WS_XML_STRING *localName, [in] const WS_XML_STRING *ns, [in] BOOL required, [out] ULONG *attributeIndex, [in, optional] WS_ERROR *error );",
            "name": "WsFindAttribute"
        },
        {
            "signature": "HRESULT WsFlushBody( [in] WS_MESSAGE *message, [in] ULONG minSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsFlushBody"
        },
        {
            "signature": "HRESULT WsFlushWriter( [in] WS_XML_WRITER *writer, [in] ULONG minSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsFlushWriter"
        },
        {
            "signature": "void WsFreeChannel( [in] WS_CHANNEL *channel );",
            "name": "WsFreeChannel"
        },
        {
            "signature": "void WsFreeError( [in] WS_ERROR *error );",
            "name": "WsFreeError"
        },
        {
            "signature": "void WsFreeHeap( [in] WS_HEAP *heap );",
            "name": "WsFreeHeap"
        },
        {
            "signature": "void WsFreeListener( [in] WS_LISTENER *listener );",
            "name": "WsFreeListener"
        },
        {
            "signature": "void WsFreeMessage( [in] WS_MESSAGE *message );",
            "name": "WsFreeMessage"
        },
        {
            "signature": "void WsFreeMetadata( [in] WS_METADATA *metadata );",
            "name": "WsFreeMetadata"
        },
        {
            "signature": "void WsFreeReader( [in] WS_XML_READER *reader );",
            "name": "WsFreeReader"
        },
        {
            "signature": "void WsFreeSecurityToken( [in] WS_SECURITY_TOKEN *token );",
            "name": "WsFreeSecurityToken"
        },
        {
            "signature": "void WsFreeServiceHost( [in] WS_SERVICE_HOST *serviceHost );",
            "name": "WsFreeServiceHost"
        },
        {
            "signature": "void WsFreeServiceProxy( [in] WS_SERVICE_PROXY *serviceProxy );",
            "name": "WsFreeServiceProxy"
        },
        {
            "signature": "void WsFreeWriter( [in] WS_XML_WRITER *writer );",
            "name": "WsFreeWriter"
        },
        {
            "signature": "HRESULT WsGetChannelProperty( [in] WS_CHANNEL *channel, [in] WS_CHANNEL_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetChannelProperty"
        },
        {
            "signature": "HRESULT WsGetCustomHeader( [in] WS_MESSAGE *message, [in] const WS_ELEMENT_DESCRIPTION *customHeaderDescription, [in] WS_REPEATING_HEADER_OPTION repeatingOption, [in] ULONG headerIndex, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, ULONG *headerAttributes, [in, optional] WS_ERROR *error );",
            "name": "WsGetCustomHeader"
        },
        {
            "signature": "HRESULT WsGetDictionary( [in] WS_ENCODING encoding, WS_XML_DICTIONARY **dictionary, [in, optional] WS_ERROR *error );",
            "name": "WsGetDictionary"
        },
        {
            "signature": "HRESULT WsGetErrorProperty( [in] WS_ERROR *error, [in] WS_ERROR_PROPERTY_ID id, void *buffer, [in] ULONG bufferSize );",
            "name": "WsGetErrorProperty"
        },
        {
            "signature": "HRESULT WsGetErrorString( [in] WS_ERROR *error, [in] ULONG index, [out] WS_STRING *string );",
            "name": "WsGetErrorString"
        },
        {
            "signature": "HRESULT WsGetFaultErrorDetail( [in] WS_ERROR *error, [in] const WS_FAULT_DETAIL_DESCRIPTION *faultDetailDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize );",
            "name": "WsGetFaultErrorDetail"
        },
        {
            "signature": "HRESULT WsGetFaultErrorProperty( [in] WS_ERROR *error, [in] WS_FAULT_ERROR_PROPERTY_ID id, void *buffer, [in] ULONG bufferSize );",
            "name": "WsGetFaultErrorProperty"
        },
        {
            "signature": "HRESULT WsGetHeader( [in] WS_MESSAGE *message, [in] WS_HEADER_TYPE headerType, [in] WS_TYPE valueType, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetHeader"
        },
        {
            "signature": "HRESULT WsGetHeaderAttributes( [in] WS_MESSAGE *message, [in] WS_XML_READER *reader, [out] ULONG *headerAttributes, [in, optional] WS_ERROR *error );",
            "name": "WsGetHeaderAttributes"
        },
        {
            "signature": "HRESULT WsGetHeapProperty( [in] WS_HEAP *heap, [in] WS_HEAP_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetHeapProperty"
        },
        {
            "signature": "HRESULT WsGetListenerProperty( [in] WS_LISTENER *listener, [in] WS_LISTENER_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetListenerProperty"
        },
        {
            "signature": "HRESULT WsGetMappedHeader( [in] WS_MESSAGE *message, [in] const WS_XML_STRING *headerName, [in] WS_REPEATING_HEADER_OPTION repeatingOption, [in] ULONG headerIndex, [in] WS_TYPE valueType, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetMappedHeader"
        },
        {
            "signature": "HRESULT WsGetMessageProperty( [in] WS_MESSAGE *message, [in] WS_MESSAGE_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetMessageProperty"
        },
        {
            "signature": "HRESULT WsGetMetadataEndpoints( [in] WS_METADATA *metadata, [out] WS_METADATA_ENDPOINTS *endpoints, [in, optional] WS_ERROR *error );",
            "name": "WsGetMetadataEndpoints"
        },
        {
            "signature": "HRESULT WsGetMetadataProperty( [in] WS_METADATA *metadata, [in] WS_METADATA_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetMetadataProperty"
        },
        {
            "signature": "HRESULT WsGetMissingMetadataDocumentAddress( [in] WS_METADATA *metadata, WS_ENDPOINT_ADDRESS **address, [in, optional] WS_ERROR *error );",
            "name": "WsGetMissingMetadataDocumentAddress"
        },
        {
            "signature": "HRESULT WsGetNamespaceFromPrefix( [in] WS_XML_READER *reader, [in] const WS_XML_STRING *prefix, [in] BOOL required, const WS_XML_STRING **ns, [in, optional] WS_ERROR *error );",
            "name": "WsGetNamespaceFromPrefix"
        },
        {
            "signature": "HRESULT WsGetOperationContextProperty( [in] const WS_OPERATION_CONTEXT *context, [in] const WS_OPERATION_CONTEXT_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetOperationContextProperty"
        },
        {
            "signature": "HRESULT WsGetPolicyAlternativeCount( [in] WS_POLICY *policy, [out] ULONG *count, [in, optional] WS_ERROR *error );",
            "name": "WsGetPolicyAlternativeCount"
        },
        {
            "signature": "HRESULT WsGetPolicyProperty( [in] WS_POLICY *policy, [in] WS_POLICY_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetPolicyProperty"
        },
        {
            "signature": "HRESULT WsGetPrefixFromNamespace( [in] WS_XML_WRITER *writer, [in] const WS_XML_STRING *ns, [in] BOOL required, const WS_XML_STRING **prefix, [in, optional] WS_ERROR *error );",
            "name": "WsGetPrefixFromNamespace"
        },
        {
            "signature": "HRESULT WsGetReaderNode( [in] WS_XML_READER *xmlReader, const WS_XML_NODE **node, [in, optional] WS_ERROR *error );",
            "name": "WsGetReaderNode"
        },
        {
            "signature": "HRESULT WsGetReaderPosition( [in] WS_XML_READER *reader, [out] WS_XML_NODE_POSITION *nodePosition, [in, optional] WS_ERROR *error );",
            "name": "WsGetReaderPosition"
        },
        {
            "signature": "HRESULT WsGetReaderProperty( [in] WS_XML_READER *reader, [in] WS_XML_READER_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetReaderProperty"
        },
        {
            "signature": "HRESULT WsGetSecurityContextProperty( [in] WS_SECURITY_CONTEXT *securityContext, [in] WS_SECURITY_CONTEXT_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetSecurityContextProperty"
        },
        {
            "signature": "HRESULT WsGetSecurityTokenProperty( [in] WS_SECURITY_TOKEN *securityToken, [in] WS_SECURITY_TOKEN_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_HEAP *heap, [in, optional] WS_ERROR *error );",
            "name": "WsGetSecurityTokenProperty"
        },
        {
            "signature": "HRESULT WsGetServiceHostProperty( [in] WS_SERVICE_HOST *serviceHost, [in] const WS_SERVICE_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetServiceHostProperty"
        },
        {
            "signature": "HRESULT WsGetServiceProxyProperty( [in] WS_SERVICE_PROXY *serviceProxy, [in] const WS_PROXY_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetServiceProxyProperty"
        },
        {
            "signature": "HRESULT WsGetWriterPosition( [in] WS_XML_WRITER *writer, [out] WS_XML_NODE_POSITION *nodePosition, [in, optional] WS_ERROR *error );",
            "name": "WsGetWriterPosition"
        },
        {
            "signature": "HRESULT WsGetWriterProperty( [in] WS_XML_WRITER *writer, [in] WS_XML_WRITER_PROPERTY_ID id, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsGetWriterProperty"
        },
        {
            "signature": "HRESULT WsGetXmlAttribute( [in] WS_XML_READER *reader, [in] const WS_XML_STRING *localName, [in] WS_HEAP *heap, WCHAR **valueChars, [out] ULONG *valueCharCount, [in, optional] WS_ERROR *error );",
            "name": "WsGetXmlAttribute"
        },
        {
            "signature": "HRESULT WsInitializeMessage( [in] WS_MESSAGE *message, [in] WS_MESSAGE_INITIALIZATION initialization, [in, optional] WS_MESSAGE *sourceMessage, [in, optional] WS_ERROR *error );",
            "name": "WsInitializeMessage"
        },
        {
            "signature": "HRESULT WsMarkHeaderAsUnderstood( [in] WS_MESSAGE *message, [in] const WS_XML_NODE_POSITION *headerPosition, [in, optional] WS_ERROR *error );",
            "name": "WsMarkHeaderAsUnderstood"
        },
        {
            "signature": "HRESULT WsMatchPolicyAlternative( [in] WS_POLICY *policy, [in] ULONG alternativeIndex, [in] WS_POLICY_CONSTRAINTS *policyConstraints, [in] BOOL matchRequired, [in] WS_HEAP *heap, [in, optional] WS_ERROR *error );",
            "name": "WsMatchPolicyAlternative"
        },
        {
            "signature": "HRESULT WsMoveReader( [in] WS_XML_READER *reader, [in] WS_MOVE_TO moveTo, BOOL *found, [in, optional] WS_ERROR *error );",
            "name": "WsMoveReader"
        },
        {
            "signature": "HRESULT WsMoveWriter( [in] WS_XML_WRITER *writer, [in] WS_MOVE_TO moveTo, BOOL *found, [in, optional] WS_ERROR *error );",
            "name": "WsMoveWriter"
        },
        {
            "signature": "HRESULT WsOpenChannel( [in] WS_CHANNEL *channel, [in] const WS_ENDPOINT_ADDRESS *endpointAddress, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsOpenChannel"
        },
        {
            "signature": "HRESULT WsOpenListener( [in] WS_LISTENER *listener, [in] const WS_STRING *url, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsOpenListener"
        },
        {
            "signature": "HRESULT WsOpenServiceHost( [in] WS_SERVICE_HOST *serviceHost, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsOpenServiceHost"
        },
        {
            "signature": "HRESULT WsOpenServiceProxy( [in] WS_SERVICE_PROXY *serviceProxy, [in] const WS_ENDPOINT_ADDRESS *address, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsOpenServiceProxy"
        },
        {
            "signature": "HRESULT WsPullBytes( [in] WS_XML_WRITER *writer, [in] WS_PULL_BYTES_CALLBACK callback, [in, optional] void *callbackState, [in, optional] WS_ERROR *error );",
            "name": "WsPullBytes"
        },
        {
            "signature": "HRESULT WsPushBytes( [in] WS_XML_WRITER *writer, [in] WS_PUSH_BYTES_CALLBACK callback, [in, optional] void *callbackState, [in, optional] WS_ERROR *error );",
            "name": "WsPushBytes"
        },
        {
            "signature": "HRESULT WsReadArray( [in] WS_XML_READER *reader, [in] const WS_XML_STRING *localName, [in] const WS_XML_STRING *ns, [in] WS_VALUE_TYPE valueType, void *array, [in] ULONG arraySize, [in] ULONG itemOffset, [in] ULONG itemCount, [out] ULONG *actualItemCount, [in, optional] WS_ERROR *error );",
            "name": "WsReadArray"
        },
        {
            "signature": "HRESULT WsReadAttribute( [in] WS_XML_READER *reader, [in] const WS_ATTRIBUTE_DESCRIPTION *attributeDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadAttribute"
        },
        {
            "signature": "HRESULT WsReadBody( [in] WS_MESSAGE *message, [in] const WS_ELEMENT_DESCRIPTION *bodyDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadBody"
        },
        {
            "signature": "HRESULT WsReadBytes( [in] WS_XML_READER *reader, void *bytes, [in] ULONG maxByteCount, [out] ULONG *actualByteCount, [in, optional] WS_ERROR *error );",
            "name": "WsReadBytes"
        },
        {
            "signature": "HRESULT WsReadChars( [in] WS_XML_READER *reader, WCHAR *chars, [in] ULONG maxCharCount, [out] ULONG *actualCharCount, [in, optional] WS_ERROR *error );",
            "name": "WsReadChars"
        },
        {
            "signature": "HRESULT WsReadCharsUtf8( [in] WS_XML_READER *reader, BYTE *bytes, [in] ULONG maxByteCount, [out] ULONG *actualByteCount, [in, optional] WS_ERROR *error );",
            "name": "WsReadCharsUtf8"
        },
        {
            "signature": "HRESULT WsReadElement( [in] WS_XML_READER *reader, [in] const WS_ELEMENT_DESCRIPTION *elementDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadElement"
        },
        {
            "signature": "HRESULT WsReadEndAttribute( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsReadEndAttribute"
        },
        {
            "signature": "HRESULT WsReadEndElement( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsReadEndElement"
        },
        {
            "signature": "HRESULT WsReadEndpointAddressExtension( [in] WS_XML_READER *reader, [in] WS_ENDPOINT_ADDRESS *endpointAddress, [in] WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType, [in] WS_READ_OPTION readOption, [in] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadEndpointAddressExtension"
        },
        {
            "signature": "HRESULT WsReadEnvelopeEnd( [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error );",
            "name": "WsReadEnvelopeEnd"
        },
        {
            "signature": "HRESULT WsReadEnvelopeStart( [in] WS_MESSAGE *message, [in] WS_XML_READER *reader, [in, optional] WS_MESSAGE_DONE_CALLBACK doneCallback, [in, optional] void *doneCallbackState, [in, optional] WS_ERROR *error );",
            "name": "WsReadEnvelopeStart"
        },
        {
            "signature": "HRESULT WsReadMessageEnd( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsReadMessageEnd"
        },
        {
            "signature": "HRESULT WsReadMessageStart( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsReadMessageStart"
        },
        {
            "signature": "HRESULT WsReadMetadata( [in] WS_METADATA *metadata, [in] WS_XML_READER *reader, [in] const WS_STRING *url, [in, optional] WS_ERROR *error );",
            "name": "WsReadMetadata"
        },
        {
            "signature": "HRESULT WsReadNode( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsReadNode"
        },
        {
            "signature": "HRESULT WsReadQualifiedName( [in] WS_XML_READER *reader, [in] WS_HEAP *heap, WS_XML_STRING *prefix, [out] WS_XML_STRING *localName, WS_XML_STRING *ns, [in, optional] WS_ERROR *error );",
            "name": "WsReadQualifiedName"
        },
        {
            "signature": "HRESULT WsReadStartAttribute( [in] WS_XML_READER *reader, [in] ULONG attributeIndex, [in, optional] WS_ERROR *error );",
            "name": "WsReadStartAttribute"
        },
        {
            "signature": "HRESULT WsReadStartElement( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsReadStartElement"
        },
        {
            "signature": "HRESULT WsReadToStartElement( [in] WS_XML_READER *reader, [in, optional] const WS_XML_STRING *localName, [in, optional] const WS_XML_STRING *ns, BOOL *found, [in, optional] WS_ERROR *error );",
            "name": "WsReadToStartElement"
        },
        {
            "signature": "HRESULT WsReadType( [in] WS_XML_READER *reader, [in] WS_TYPE_MAPPING typeMapping, [in] WS_TYPE type, [in, optional] const void *typeDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadType"
        },
        {
            "signature": "HRESULT WsReadValue( [in] WS_XML_READER *reader, [in] WS_VALUE_TYPE valueType, void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsReadValue"
        },
        {
            "signature": "HRESULT WsReadXmlBuffer( [in] WS_XML_READER *reader, [in] WS_HEAP *heap, WS_XML_BUFFER **xmlBuffer, [in, optional] WS_ERROR *error );",
            "name": "WsReadXmlBuffer"
        },
        {
            "signature": "HRESULT WsReadXmlBufferFromBytes( [in] WS_XML_READER *reader, [in, optional] const WS_XML_READER_ENCODING *encoding, const WS_XML_READER_PROPERTY *properties, [in] ULONG propertyCount, const void *bytes, [in] ULONG byteCount, [in] WS_HEAP *heap, WS_XML_BUFFER **xmlBuffer, [in, optional] WS_ERROR *error );",
            "name": "WsReadXmlBufferFromBytes"
        },
        {
            "signature": "HRESULT WsReceiveMessage( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, const WS_MESSAGE_DESCRIPTION **messageDescriptions, [in] ULONG messageDescriptionCount, [in] WS_RECEIVE_OPTION receiveOption, [in] WS_READ_OPTION readBodyOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, ULONG *index, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsReceiveMessage"
        },
        {
            "signature": "HRESULT WsRegisterOperationForCancel( [in] const WS_OPERATION_CONTEXT *context, [in] WS_OPERATION_CANCEL_CALLBACK cancelCallback, [in, optional] WS_OPERATION_FREE_STATE_CALLBACK freestateCallback, [in, optional] void *userState, [in, optional] WS_ERROR *error );",
            "name": "WsRegisterOperationForCancel"
        },
        {
            "signature": "HRESULT WsRemoveCustomHeader( [in] WS_MESSAGE *message, [in] const WS_XML_STRING *headerName, [in] const WS_XML_STRING *headerNs, [in, optional] WS_ERROR *error );",
            "name": "WsRemoveCustomHeader"
        },
        {
            "signature": "HRESULT WsRemoveHeader( [in] WS_MESSAGE *message, [in] WS_HEADER_TYPE headerType, [in, optional] WS_ERROR *error );",
            "name": "WsRemoveHeader"
        },
        {
            "signature": "HRESULT WsRemoveMappedHeader( [in] WS_MESSAGE *message, [in] const WS_XML_STRING *headerName, [in, optional] WS_ERROR *error );",
            "name": "WsRemoveMappedHeader"
        },
        {
            "signature": "HRESULT WsRemoveNode( [in] const WS_XML_NODE_POSITION *nodePosition, [in, optional] WS_ERROR *error );",
            "name": "WsRemoveNode"
        },
        {
            "signature": "HRESULT WsRequestReply( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *requestMessage, [in] const WS_MESSAGE_DESCRIPTION *requestMessageDescription, [in] WS_WRITE_OPTION writeOption, const void *requestBodyValue, [in] ULONG requestBodyValueSize, [in] WS_MESSAGE *replyMessage, [in] const WS_MESSAGE_DESCRIPTION *replyMessageDescription, [in] WS_READ_OPTION readOption, [in, optional] WS_HEAP *heap, void *value, [in] ULONG valueSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsRequestReply"
        },
        {
            "signature": "HRESULT WsRequestSecurityToken( [in] WS_CHANNEL *channel, const WS_REQUEST_SECURITY_TOKEN_PROPERTY *properties, [in] ULONG propertyCount, WS_SECURITY_TOKEN **token, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsRequestSecurityToken"
        },
        {
            "signature": "HRESULT WsResetChannel( [in] WS_CHANNEL *channel, [in, optional] WS_ERROR *error );",
            "name": "WsResetChannel"
        },
        {
            "signature": "HRESULT WsResetError( [in] WS_ERROR *error );",
            "name": "WsResetError"
        },
        {
            "signature": "HRESULT WsResetHeap( [in] WS_HEAP *heap, [in, optional] WS_ERROR *error );",
            "name": "WsResetHeap"
        },
        {
            "signature": "HRESULT WsResetListener( [in] WS_LISTENER *listener, [in, optional] WS_ERROR *error );",
            "name": "WsResetListener"
        },
        {
            "signature": "HRESULT WsResetMessage( [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error );",
            "name": "WsResetMessage"
        },
        {
            "signature": "HRESULT WsResetMetadata( [in] WS_METADATA *metadata, [in, optional] WS_ERROR *error );",
            "name": "WsResetMetadata"
        },
        {
            "signature": "HRESULT WsResetServiceHost( [in] WS_SERVICE_HOST *serviceHost, [in, optional] WS_ERROR *error );",
            "name": "WsResetServiceHost"
        },
        {
            "signature": "HRESULT WsResetServiceProxy( [in] WS_SERVICE_PROXY *serviceProxy, [in, optional] WS_ERROR *error );",
            "name": "WsResetServiceProxy"
        },
        {
            "signature": "HRESULT WsRevokeSecurityContext( [in] WS_SECURITY_CONTEXT *securityContext, [in, optional] WS_ERROR *error );",
            "name": "WsRevokeSecurityContext"
        },
        {
            "signature": "HRESULT WsSendFaultMessageForError( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *replyMessage, [in] WS_ERROR *faultError, [in] HRESULT faultErrorCode, [in] WS_FAULT_DISCLOSURE faultDisclosure, [in] WS_MESSAGE *requestMessage, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsSendFaultMessageForError"
        },
        {
            "signature": "HRESULT WsSendMessage( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in] const WS_MESSAGE_DESCRIPTION *messageDescription, [in] WS_WRITE_OPTION writeOption, const void *bodyValue, [in] ULONG bodyValueSize, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsSendMessage"
        },
        {
            "signature": "HRESULT WsSendReplyMessage( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *replyMessage, [in] const WS_MESSAGE_DESCRIPTION *replyMessageDescription, [in] WS_WRITE_OPTION writeOption, const void *replyBodyValue, [in] ULONG replyBodyValueSize, [in] WS_MESSAGE *requestMessage, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsSendReplyMessage"
        },
        {
            "signature": "HRESULT WsSetChannelProperty( [in] WS_CHANNEL *channel, [in] WS_CHANNEL_PROPERTY_ID id, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsSetChannelProperty"
        },
        {
            "signature": "HRESULT WsSetErrorProperty( [in] WS_ERROR *error, [in] WS_ERROR_PROPERTY_ID id, const void *value, [in] ULONG valueSize );",
            "name": "WsSetErrorProperty"
        },
        {
            "signature": "HRESULT WsSetFaultErrorDetail( [in] WS_ERROR *error, [in] const WS_FAULT_DETAIL_DESCRIPTION *faultDetailDescription, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize );",
            "name": "WsSetFaultErrorDetail"
        },
        {
            "signature": "HRESULT WsSetFaultErrorProperty( [in] WS_ERROR *error, [in] WS_FAULT_ERROR_PROPERTY_ID id, const void *value, [in] ULONG valueSize );",
            "name": "WsSetFaultErrorProperty"
        },
        {
            "signature": "HRESULT WsSetHeader( [in] WS_MESSAGE *message, [in] WS_HEADER_TYPE headerType, [in] WS_TYPE valueType, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsSetHeader"
        },
        {
            "signature": "HRESULT WsSetInput( [in] WS_XML_READER *reader, [in, optional] const WS_XML_READER_ENCODING *encoding, [in, optional] const WS_XML_READER_INPUT *input, const WS_XML_READER_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsSetInput"
        },
        {
            "signature": "HRESULT WsSetInputToBuffer( [in] WS_XML_READER *reader, [in] WS_XML_BUFFER *buffer, const WS_XML_READER_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsSetInputToBuffer"
        },
        {
            "signature": "HRESULT WsSetListenerProperty( [in] WS_LISTENER *listener, [in] WS_LISTENER_PROPERTY_ID id, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsSetListenerProperty"
        },
        {
            "signature": "HRESULT WsSetMessageProperty( [in] WS_MESSAGE *message, [in] WS_MESSAGE_PROPERTY_ID id, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsSetMessageProperty"
        },
        {
            "signature": "HRESULT WsSetOutput( [in] WS_XML_WRITER *writer, [in, optional] const WS_XML_WRITER_ENCODING *encoding, [in, optional] const WS_XML_WRITER_OUTPUT *output, const WS_XML_WRITER_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsSetOutput"
        },
        {
            "signature": "HRESULT WsSetOutputToBuffer( [in] WS_XML_WRITER *writer, [in] WS_XML_BUFFER *buffer, const WS_XML_WRITER_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsSetOutputToBuffer"
        },
        {
            "signature": "HRESULT WsSetReaderPosition( [in] WS_XML_READER *reader, [in] const WS_XML_NODE_POSITION *nodePosition, [in, optional] WS_ERROR *error );",
            "name": "WsSetReaderPosition"
        },
        {
            "signature": "HRESULT WsSetWriterPosition( [in] WS_XML_WRITER *writer, [in] const WS_XML_NODE_POSITION *nodePosition, [in, optional] WS_ERROR *error );",
            "name": "WsSetWriterPosition"
        },
        {
            "signature": "HRESULT WsShutdownSessionChannel( [in] WS_CHANNEL *channel, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsShutdownSessionChannel"
        },
        {
            "signature": "HRESULT WsSkipNode( [in] WS_XML_READER *reader, [in, optional] WS_ERROR *error );",
            "name": "WsSkipNode"
        },
        {
            "signature": "HRESULT WsStartReaderCanonicalization( [in] WS_XML_READER *reader, [in] WS_WRITE_CALLBACK writeCallback, [in] void *writeCallbackState, const WS_XML_CANONICALIZATION_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsStartReaderCanonicalization"
        },
        {
            "signature": "HRESULT WsStartWriterCanonicalization( [in] WS_XML_WRITER *writer, [in] WS_WRITE_CALLBACK writeCallback, [in] void *writeCallbackState, const WS_XML_CANONICALIZATION_PROPERTY *properties, [in] ULONG propertyCount, [in, optional] WS_ERROR *error );",
            "name": "WsStartWriterCanonicalization"
        },
        {
            "signature": "HRESULT WsTrimXmlWhitespace( WCHAR *chars, [in] ULONG charCount, WCHAR **trimmedChars, [out] ULONG *trimmedCount, [in, optional] WS_ERROR *error );",
            "name": "WsTrimXmlWhitespace"
        },
        {
            "signature": "HRESULT WsVerifyXmlNCName( const WCHAR *ncNameChars, [in] ULONG ncNameCharCount, [in, optional] WS_ERROR *error );",
            "name": "WsVerifyXmlNCName"
        },
        {
            "signature": "HRESULT WsWriteArray( [in] WS_XML_WRITER *writer, [in] const WS_XML_STRING *localName, [in] const WS_XML_STRING *ns, [in] WS_VALUE_TYPE valueType, const void *array, [in] ULONG arraySize, [in] ULONG itemOffset, [in] ULONG itemCount, [in, optional] WS_ERROR *error );",
            "name": "WsWriteArray"
        },
        {
            "signature": "HRESULT WsWriteAttribute( [in] WS_XML_WRITER *writer, [in] const WS_ATTRIBUTE_DESCRIPTION *attributeDescription, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsWriteAttribute"
        },
        {
            "signature": "HRESULT WsWriteBody( [in] WS_MESSAGE *message, [in] const WS_ELEMENT_DESCRIPTION *bodyDescription, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsWriteBody"
        },
        {
            "signature": "HRESULT WsWriteBytes( [in] WS_XML_WRITER *writer, const void *bytes, [in] ULONG byteCount, [in, optional] WS_ERROR *error );",
            "name": "WsWriteBytes"
        },
        {
            "signature": "HRESULT WsWriteChars( [in] WS_XML_WRITER *writer, const WCHAR *chars, [in] ULONG charCount, [in, optional] WS_ERROR *error );",
            "name": "WsWriteChars"
        },
        {
            "signature": "HRESULT WsWriteCharsUtf8( [in] WS_XML_WRITER *writer, const BYTE *bytes, [in] ULONG byteCount, [in, optional] WS_ERROR *error );",
            "name": "WsWriteCharsUtf8"
        },
        {
            "signature": "HRESULT WsWriteElement( [in] WS_XML_WRITER *writer, [in] const WS_ELEMENT_DESCRIPTION *elementDescription, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsWriteElement"
        },
        {
            "signature": "HRESULT WsWriteEndAttribute( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEndAttribute"
        },
        {
            "signature": "HRESULT WsWriteEndCData( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEndCData"
        },
        {
            "signature": "HRESULT WsWriteEndElement( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEndElement"
        },
        {
            "signature": "HRESULT WsWriteEndStartElement( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEndStartElement"
        },
        {
            "signature": "HRESULT WsWriteEnvelopeEnd( [in] WS_MESSAGE *message, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEnvelopeEnd"
        },
        {
            "signature": "HRESULT WsWriteEnvelopeStart( [in] WS_MESSAGE *message, [in] WS_XML_WRITER *writer, [in, optional] WS_MESSAGE_DONE_CALLBACK doneCallback, [in, optional] void *doneCallbackState, [in, optional] WS_ERROR *error );",
            "name": "WsWriteEnvelopeStart"
        },
        {
            "signature": "HRESULT WsWriteMessageEnd( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsWriteMessageEnd"
        },
        {
            "signature": "HRESULT WsWriteMessageStart( [in] WS_CHANNEL *channel, [in] WS_MESSAGE *message, [in, optional] const WS_ASYNC_CONTEXT *asyncContext, [in, optional] WS_ERROR *error );",
            "name": "WsWriteMessageStart"
        },
        {
            "signature": "HRESULT WsWriteNode( [in] WS_XML_WRITER *writer, [in] const WS_XML_NODE *node, [in, optional] WS_ERROR *error );",
            "name": "WsWriteNode"
        },
        {
            "signature": "HRESULT WsWriteQualifiedName( [in] WS_XML_WRITER *writer, [in, optional] const WS_XML_STRING *prefix, [in] const WS_XML_STRING *localName, [in, optional] const WS_XML_STRING *ns, [in, optional] WS_ERROR *error );",
            "name": "WsWriteQualifiedName"
        },
        {
            "signature": "HRESULT WsWriteStartAttribute( [in] WS_XML_WRITER *writer, [in, optional] const WS_XML_STRING *prefix, [in] const WS_XML_STRING *localName, [in] const WS_XML_STRING *ns, [in] BOOL singleQuote, [in, optional] WS_ERROR *error );",
            "name": "WsWriteStartAttribute"
        },
        {
            "signature": "HRESULT WsWriteStartCData( [in] WS_XML_WRITER *writer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteStartCData"
        },
        {
            "signature": "HRESULT WsWriteStartElement( [in] WS_XML_WRITER *writer, [in, optional] const WS_XML_STRING *prefix, [in] const WS_XML_STRING *localName, [in] const WS_XML_STRING *ns, [in, optional] WS_ERROR *error );",
            "name": "WsWriteStartElement"
        },
        {
            "signature": "HRESULT WsWriteText( [in] WS_XML_WRITER *writer, [in] const WS_XML_TEXT *text, [in, optional] WS_ERROR *error );",
            "name": "WsWriteText"
        },
        {
            "signature": "HRESULT WsWriteType( [in] WS_XML_WRITER *writer, [in] WS_TYPE_MAPPING typeMapping, [in] WS_TYPE type, [in, optional] const void *typeDescription, [in] WS_WRITE_OPTION writeOption, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsWriteType"
        },
        {
            "signature": "HRESULT WsWriteValue( [in] WS_XML_WRITER *writer, [in] WS_VALUE_TYPE valueType, const void *value, [in] ULONG valueSize, [in, optional] WS_ERROR *error );",
            "name": "WsWriteValue"
        },
        {
            "signature": "HRESULT WsWriteXmlBuffer( [in] WS_XML_WRITER *writer, [in] WS_XML_BUFFER *xmlBuffer, [in, optional] WS_ERROR *error );",
            "name": "WsWriteXmlBuffer"
        },
        {
            "signature": "HRESULT WsWriteXmlBufferToBytes( [in] WS_XML_WRITER *writer, [in] WS_XML_BUFFER *xmlBuffer, [in, optional] const WS_XML_WRITER_ENCODING *encoding, const WS_XML_WRITER_PROPERTY *properties, [in] ULONG propertyCount, [in] WS_HEAP *heap, void **bytes, [out] ULONG *byteCount, [in, optional] WS_ERROR *error );",
            "name": "WsWriteXmlBufferToBytes"
        },
        {
            "signature": "HRESULT WsWriteXmlnsAttribute( [in] WS_XML_WRITER *writer, [in, optional] const WS_XML_STRING *prefix, [in] const WS_XML_STRING *ns, [in] BOOL singleQuote, [in, optional] WS_ERROR *error );",
            "name": "WsWriteXmlnsAttribute"
        },
        {
            "signature": "HRESULT WsXmlStringEquals( [in] const WS_XML_STRING *string1, [in] const WS_XML_STRING *string2, [in, optional] WS_ERROR *error );",
            "name": "WsXmlStringEquals"
        }
    ],
    "Websocket.h": [
        {
            "signature": "void WebSocketAbortHandle( [in] WEB_SOCKET_HANDLE hWebSocket );",
            "name": "WebSocketAbortHandle"
        },
        {
            "signature": "HRESULT WebSocketBeginClientHandshake( [in] WEB_SOCKET_HANDLE hWebSocket, [in, optional] PCSTR *pszSubprotocols, [in] ULONG ulSubprotocolCount, [in, optional] PCSTR *pszExtensions, [in] ULONG ulExtensionCount, [in, optional] const PWEB_SOCKET_HTTP_HEADER pInitialHeaders, [in] ULONG ulInitialHeaderCount, [out] PWEB_SOCKET_HTTP_HEADER *pAdditionalHeaders, [out] ULONG *pulAdditionalHeaderCount );",
            "name": "WebSocketBeginClientHandshake"
        },
        {
            "signature": "HRESULT WebSocketBeginServerHandshake( [in] WEB_SOCKET_HANDLE hWebSocket, [in, optional] PCSTR pszSubprotocolSelected, [in, optional] PCSTR *pszExtensionSelected, [in] ULONG ulExtensionSelectedCount, [in] const PWEB_SOCKET_HTTP_HEADER pRequestHeaders, [in] ULONG ulRequestHeaderCount, [out] PWEB_SOCKET_HTTP_HEADER *pResponseHeaders, [out] ULONG *pulResponseHeaderCount );",
            "name": "WebSocketBeginServerHandshake"
        },
        {
            "signature": "void WebSocketCompleteAction( [in] WEB_SOCKET_HANDLE hWebSocket, [in] PVOID pvActionContext, [in] ULONG ulBytesTransferred );",
            "name": "WebSocketCompleteAction"
        },
        {
            "signature": "HRESULT WebSocketCreateClientHandle( [in] const PWEB_SOCKET_PROPERTY pProperties, [in] ULONG ulPropertyCount, [out] WEB_SOCKET_HANDLE *phWebSocket );",
            "name": "WebSocketCreateClientHandle"
        },
        {
            "signature": "HRESULT WebSocketCreateServerHandle( [in] const PWEB_SOCKET_PROPERTY pProperties, [in] ULONG ulPropertyCount, [out] WEB_SOCKET_HANDLE *phWebSocket );",
            "name": "WebSocketCreateServerHandle"
        },
        {
            "signature": "void WebSocketDeleteHandle( [in] WEB_SOCKET_HANDLE hWebSocket );",
            "name": "WebSocketDeleteHandle"
        },
        {
            "signature": "HRESULT WebSocketEndClientHandshake( [in] WEB_SOCKET_HANDLE hWebSocket, [in] const PWEB_SOCKET_HTTP_HEADER pResponseHeaders, [in] ULONG ulReponseHeaderCount, [in, out, optional] ULONG *pulSelectedExtensions, [in, out, optional] ULONG *pulSelectedExtensionCount, [in, out, optional] ULONG *pulSelectedSubprotocol );",
            "name": "WebSocketEndClientHandshake"
        },
        {
            "signature": "HRESULT WebSocketEndServerHandshake( [in] WEB_SOCKET_HANDLE hWebSocket );",
            "name": "WebSocketEndServerHandshake"
        },
        {
            "signature": "HRESULT WebSocketGetAction( [in] WEB_SOCKET_HANDLE hWebSocket, [in] WEB_SOCKET_ACTION_QUEUE eActionQueue, [in, out] WEB_SOCKET_BUFFER *pDataBuffers, [in, out] ULONG *pulDataBufferCount, [out] WEB_SOCKET_ACTION *pAction, [out] WEB_SOCKET_BUFFER_TYPE *pBufferType, [out, optional] PVOID *pvApplicationContext, [out] PVOID *pvActionContext );",
            "name": "WebSocketGetAction"
        },
        {
            "signature": "HRESULT WebSocketGetGlobalProperty( [in] WEB_SOCKET_PROPERTY_TYPE eType, [in, out] PVOID pvValue, [in, out] ULONG *ulSize );",
            "name": "WebSocketGetGlobalProperty"
        },
        {
            "signature": "HRESULT WebSocketReceive( [in] WEB_SOCKET_HANDLE hWebSocket, [in, optional] WEB_SOCKET_BUFFER *pBuffer, [in, optional] PVOID pvContext );",
            "name": "WebSocketReceive"
        },
        {
            "signature": "HRESULT WebSocketSend( [in] WEB_SOCKET_HANDLE hWebSocket, [in] WEB_SOCKET_BUFFER_TYPE BufferType, [in, optional] WEB_SOCKET_BUFFER *pBuffer, [in, optional] PVOID Context );",
            "name": "WebSocketSend"
        }
    ],
    "Werapi.h": [
        {
            "signature": "PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH PfnWerRuntimeExceptionDebuggerLaunch; HRESULT PfnWerRuntimeExceptionDebuggerLaunch( [in] PVOID pContext, [in] const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation, [out] PBOOL pbIsCustomDebugger, [out] PWSTR pwszDebuggerLaunch, [in, out] PDWORD pchDebuggerLaunch, [out] PBOOL pbIsDebuggerAutolaunch ) {...}",
            "name": "PFN_WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH callback"
        },
        {
            "signature": "PFN_WER_RUNTIME_EXCEPTION_EVENT PfnWerRuntimeExceptionEvent; HRESULT PfnWerRuntimeExceptionEvent( [in] PVOID pContext, [in] const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation, [out] BOOL *pbOwnershipClaimed, [out] PWSTR pwszEventName, [in, out] PDWORD pchSize, [out] PDWORD pdwSignatureCount ) {...}",
            "name": "PFN_WER_RUNTIME_EXCEPTION_EVENT callback"
        },
        {
            "signature": "PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE PfnWerRuntimeExceptionEventSignature; HRESULT PfnWerRuntimeExceptionEventSignature( [in] PVOID pContext, [in] const PWER_RUNTIME_EXCEPTION_INFORMATION pExceptionInformation, [in] DWORD dwIndex, [out] PWSTR pwszName, [in, out] PDWORD pchName, [out] PWSTR pwszValue, [in, out] PDWORD pchValue ) {...}",
            "name": "PFN_WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE callback"
        },
        {
            "signature": "HRESULT WerAddExcludedApplication( [in] PCWSTR pwzExeName, [in] BOOL bAllUsers );",
            "name": "WerAddExcludedApplication"
        },
        {
            "signature": "void WerFreeString( PCWSTR pwszStr );",
            "name": "WerFreeString"
        },
        {
            "signature": "HRESULT WerGetFlags( [in] HANDLE hProcess, [out] PDWORD pdwFlags );",
            "name": "WerGetFlags"
        },
        {
            "signature": "HRESULT WerRegisterAdditionalProcess( DWORD processId, [optional] DWORD captureExtraInfoForThreadId );",
            "name": "WerRegisterAdditionalProcess"
        },
        {
            "signature": "HRESULT WerRegisterAppLocalDump( [in] PCWSTR localAppDataRelativePath );",
            "name": "WerRegisterAppLocalDump"
        },
        {
            "signature": "HRESULT WerRegisterCustomMetadata( PCWSTR key, PCWSTR value );",
            "name": "WerRegisterCustomMetadata"
        },
        {
            "signature": "HRESULT WerRegisterExcludedMemoryBlock( const void *address, DWORD size );",
            "name": "WerRegisterExcludedMemoryBlock"
        },
        {
            "signature": "HRESULT WerRegisterFile( [in] PCWSTR pwzFile, [in] WER_REGISTER_FILE_TYPE regFileType, [in] DWORD dwFlags );",
            "name": "WerRegisterFile"
        },
        {
            "signature": "HRESULT WerRegisterMemoryBlock( [in] PVOID pvAddress, [in] DWORD dwSize );",
            "name": "WerRegisterMemoryBlock"
        },
        {
            "signature": "HRESULT WerRegisterRuntimeExceptionModule( [in] PCWSTR pwszOutOfProcessCallbackDll, [in, optional] PVOID pContext );",
            "name": "WerRegisterRuntimeExceptionModule"
        },
        {
            "signature": "HRESULT WerRemoveExcludedApplication( [in] PCWSTR pwzExeName, [in] BOOL bAllUsers );",
            "name": "WerRemoveExcludedApplication"
        },
        {
            "signature": "HRESULT WerReportAddDump( [in] HREPORT hReportHandle, [in] HANDLE hProcess, [in, optional] HANDLE hThread, [in] WER_DUMP_TYPE dumpType, [in, optional] PWER_EXCEPTION_INFORMATION pExceptionParam, [in, optional] PWER_DUMP_CUSTOM_OPTIONS pDumpCustomOptions, [in] DWORD dwFlags );",
            "name": "WerReportAddDump"
        },
        {
            "signature": "HRESULT WerReportAddFile( [in] HREPORT hReportHandle, [in] PCWSTR pwzPath, [in] WER_FILE_TYPE repFileType, [in] DWORD dwFileFlags );",
            "name": "WerReportAddFile"
        },
        {
            "signature": "HRESULT WerReportCloseHandle( [in] HREPORT hReportHandle );",
            "name": "WerReportCloseHandle"
        },
        {
            "signature": "HRESULT WerReportCreate( [in] PCWSTR pwzEventType, [in] WER_REPORT_TYPE repType, [in, optional] PWER_REPORT_INFORMATION pReportInformation, [out] HREPORT *phReportHandle );",
            "name": "WerReportCreate"
        },
        {
            "signature": "HRESULT WerReportSetParameter( [in] HREPORT hReportHandle, [in] DWORD dwparamID, [in, optional] PCWSTR pwzName, [in] PCWSTR pwzValue );",
            "name": "WerReportSetParameter"
        },
        {
            "signature": "HRESULT WerReportSetUIOption( [in] HREPORT hReportHandle, [in] WER_REPORT_UI repUITypeID, [in] PCWSTR pwzValue );",
            "name": "WerReportSetUIOption"
        },
        {
            "signature": "HRESULT WerReportSubmit( [in] HREPORT hReportHandle, [in] WER_CONSENT consent, [in] DWORD dwFlags, [out, optional] PWER_SUBMIT_RESULT pSubmitResult );",
            "name": "WerReportSubmit"
        },
        {
            "signature": "HRESULT WerSetFlags( [in] DWORD dwFlags );",
            "name": "WerSetFlags"
        },
        {
            "signature": "void WerStoreClose( HREPORTSTORE hReportStore );",
            "name": "WerStoreClose"
        },
        {
            "signature": "HRESULT WerStoreGetFirstReportKey( HREPORTSTORE hReportStore, PCWSTR *ppszReportKey );",
            "name": "WerStoreGetFirstReportKey"
        },
        {
            "signature": "HRESULT WerStoreGetNextReportKey( HREPORTSTORE hReportStore, PCWSTR *ppszReportKey );",
            "name": "WerStoreGetNextReportKey"
        },
        {
            "signature": "HRESULT WerStoreOpen( REPORT_STORE_TYPES repStoreType, PHREPORTSTORE phReportStore );",
            "name": "WerStoreOpen"
        },
        {
            "signature": "HRESULT WerStoreQueryReportMetadataV2( HREPORTSTORE hReportStore, PCWSTR pszReportKey, PWER_REPORT_METADATA_V2 pReportMetadata );",
            "name": "WerStoreQueryReportMetadataV2"
        },
        {
            "signature": "HRESULT WerUnregisterAdditionalProcess( DWORD processId );",
            "name": "WerUnregisterAdditionalProcess"
        },
        {
            "signature": "HRESULT WerUnregisterAppLocalDump();",
            "name": "WerUnregisterAppLocalDump"
        },
        {
            "signature": "HRESULT WerUnregisterCustomMetadata( PCWSTR key );",
            "name": "WerUnregisterCustomMetadata"
        },
        {
            "signature": "HRESULT WerUnregisterExcludedMemoryBlock( const void *address );",
            "name": "WerUnregisterExcludedMemoryBlock"
        },
        {
            "signature": "HRESULT WerUnregisterFile( [in] PCWSTR pwzFilePath );",
            "name": "WerUnregisterFile"
        },
        {
            "signature": "HRESULT WerUnregisterMemoryBlock( [in] PVOID pvAddress );",
            "name": "WerUnregisterMemoryBlock"
        },
        {
            "signature": "HRESULT WerUnregisterRuntimeExceptionModule( [in] PCWSTR pwszOutOfProcessCallbackDll, [in, optional] PVOID pContext );",
            "name": "WerUnregisterRuntimeExceptionModule"
        }
    ],
    "Wia_xp.h": [
        {
            "signature": "void LPSAFEARRAY_UserFree( [in] unsigned long *unnamedParam1, [in] LPSAFEARRAY *unnamedParam2 );",
            "name": "LPSAFEARRAY_UserFree"
        },
        {
            "signature": "void LPSAFEARRAY_UserFree64( [in] unsigned long *unnamedParam1, [in] LPSAFEARRAY *unnamedParam2 );",
            "name": "LPSAFEARRAY_UserFree64"
        },
        {
            "signature": "unsigned char * LPSAFEARRAY_UserMarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserMarshal"
        },
        {
            "signature": "unsigned char * LPSAFEARRAY_UserMarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserMarshal64"
        },
        {
            "signature": "unsigned long LPSAFEARRAY_UserSize( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserSize"
        },
        {
            "signature": "unsigned long LPSAFEARRAY_UserSize64( [in] unsigned long *unnamedParam1, [in] unsigned long unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserSize64"
        },
        {
            "signature": "unsigned char * LPSAFEARRAY_UserUnmarshal( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserUnmarshal"
        },
        {
            "signature": "unsigned char * LPSAFEARRAY_UserUnmarshal64( [in] unsigned long *unnamedParam1, [in, out] unsigned char *unnamedParam2, [in] LPSAFEARRAY *unnamedParam3 );",
            "name": "LPSAFEARRAY_UserUnmarshal64"
        }
    ],
    "Wiavideo.h": [],
    "Winbase.h": [
        {
            "signature": "HFILE _lclose( HFILE hFile );",
            "name": "_lclose"
        },
        {
            "signature": "HFILE _lcreat( LPCSTR lpPathName, int iAttribute );",
            "name": "_lcreat"
        },
        {
            "signature": "LONG _llseek( HFILE hFile, LONG lOffset, int iOrigin );",
            "name": "_llseek"
        },
        {
            "signature": "HFILE _lopen( LPCSTR lpPathName, int iReadWrite );",
            "name": "_lopen"
        },
        {
            "signature": "UINT _lread( HFILE hFile, LPVOID lpBuffer, UINT uBytes );",
            "name": "_lread"
        },
        {
            "signature": "UINT _lwrite( HFILE hFile, LPCCH lpBuffer, UINT uBytes );",
            "name": "_lwrite"
        },
        {
            "signature": "BOOL AccessCheckAndAuditAlarmA( [in] LPCSTR SubsystemName, [in, optional] LPVOID HandleId, [in] LPSTR ObjectTypeName, [in, optional] LPSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in] DWORD DesiredAccess, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckAndAuditAlarmA"
        },
        {
            "signature": "BOOL AccessCheckByTypeAndAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] LPCSTR ObjectTypeName, [in, optional] LPCSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPBOOL AccessStatus, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeAndAuditAlarmA"
        },
        {
            "signature": "BOOL AccessCheckByTypeResultListAndAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] LPCSTR ObjectTypeName, [in, optional] LPCSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPDWORD AccessStatusList, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeResultListAndAuditAlarmA"
        },
        {
            "signature": "BOOL AccessCheckByTypeResultListAndAuditAlarmByHandleA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] HANDLE ClientToken, [in] LPCSTR ObjectTypeName, [in, optional] LPCSTR ObjectName, [in] PSECURITY_DESCRIPTOR SecurityDescriptor, [in, optional] PSID PrincipalSelfSid, [in] DWORD DesiredAccess, [in] AUDIT_EVENT_TYPE AuditType, [in] DWORD Flags, [in, out, optional] POBJECT_TYPE_LIST ObjectTypeList, [in] DWORD ObjectTypeListLength, [in] PGENERIC_MAPPING GenericMapping, [in] BOOL ObjectCreation, [out] LPDWORD GrantedAccess, [out] LPDWORD AccessStatusList, [out] LPBOOL pfGenerateOnClose );",
            "name": "AccessCheckByTypeResultListAndAuditAlarmByHandleA"
        },
        {
            "signature": "BOOL ActivateActCtx( [in] HANDLE hActCtx, [out] ULONG_PTR *lpCookie );",
            "name": "ActivateActCtx"
        },
        {
            "signature": "ATOM AddAtomA( [in] LPCSTR lpString );",
            "name": "AddAtomA"
        },
        {
            "signature": "ATOM AddAtomW( [in] LPCWSTR lpString );",
            "name": "AddAtomW"
        },
        {
            "signature": "BOOL AddConditionalAce( [in, out] PACL pAcl, [in] DWORD dwAceRevision, [in] DWORD AceFlags, [in] UCHAR AceType, [in] DWORD AccessMask, [in] PSID pSid, [in] PWCHAR ConditionStr, [out] DWORD *ReturnLength );",
            "name": "AddConditionalAce"
        },
        {
            "signature": "BOOL AddIntegrityLabelToBoundaryDescriptor( [in, out] HANDLE *BoundaryDescriptor, [in] PSID IntegrityLabel );",
            "name": "AddIntegrityLabelToBoundaryDescriptor"
        },
        {
            "signature": "void AddRefActCtx( [in] HANDLE hActCtx );",
            "name": "AddRefActCtx"
        },
        {
            "signature": "BOOL AddSecureMemoryCacheCallback( [in] PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack );",
            "name": "AddSecureMemoryCacheCallback"
        },
        {
            "signature": "void ApplicationRecoveryFinished( [in] BOOL bSuccess );",
            "name": "ApplicationRecoveryFinished"
        },
        {
            "signature": "HRESULT ApplicationRecoveryInProgress( [out] PBOOL pbCancelled );",
            "name": "ApplicationRecoveryInProgress"
        },
        {
            "signature": "BOOL BackupEventLogA( [in] HANDLE hEventLog, [in] LPCSTR lpBackupFileName );",
            "name": "BackupEventLogA"
        },
        {
            "signature": "BOOL BackupEventLogW( [in] HANDLE hEventLog, [in] LPCWSTR lpBackupFileName );",
            "name": "BackupEventLogW"
        },
        {
            "signature": "BOOL BackupRead( [in] HANDLE hFile, [out] LPBYTE lpBuffer, [in] DWORD nNumberOfBytesToRead, [out] LPDWORD lpNumberOfBytesRead, [in] BOOL bAbort, [in] BOOL bProcessSecurity, [out] LPVOID *lpContext );",
            "name": "BackupRead"
        },
        {
            "signature": "BOOL BackupSeek( [in] HANDLE hFile, [in] DWORD dwLowBytesToSeek, [in] DWORD dwHighBytesToSeek, [out] LPDWORD lpdwLowByteSeeked, [out] LPDWORD lpdwHighByteSeeked, [in] LPVOID *lpContext );",
            "name": "BackupSeek"
        },
        {
            "signature": "BOOL BackupWrite( [in] HANDLE hFile, [in] LPBYTE lpBuffer, [in] DWORD nNumberOfBytesToWrite, [out] LPDWORD lpNumberOfBytesWritten, [in] BOOL bAbort, [in] BOOL bProcessSecurity, [out] LPVOID *lpContext );",
            "name": "BackupWrite"
        },
        {
            "signature": "HANDLE BeginUpdateResourceA( [in] LPCSTR pFileName, [in] BOOL bDeleteExistingResources );",
            "name": "BeginUpdateResourceA"
        },
        {
            "signature": "HANDLE BeginUpdateResourceW( [in] LPCWSTR pFileName, [in] BOOL bDeleteExistingResources );",
            "name": "BeginUpdateResourceW"
        },
        {
            "signature": "BOOL BindIoCompletionCallback( [in] HANDLE FileHandle, [in] LPOVERLAPPED_COMPLETION_ROUTINE Function, [in] ULONG Flags );",
            "name": "BindIoCompletionCallback"
        },
        {
            "signature": "BOOL BuildCommDCBA( [in] LPCSTR lpDef, [out] LPDCB lpDCB );",
            "name": "BuildCommDCBA"
        },
        {
            "signature": "BOOL BuildCommDCBAndTimeoutsA( [in] LPCSTR lpDef, [out] LPDCB lpDCB, [out] LPCOMMTIMEOUTS lpCommTimeouts );",
            "name": "BuildCommDCBAndTimeoutsA"
        },
        {
            "signature": "BOOL BuildCommDCBAndTimeoutsW( [in] LPCWSTR lpDef, [out] LPDCB lpDCB, [out] LPCOMMTIMEOUTS lpCommTimeouts );",
            "name": "BuildCommDCBAndTimeoutsW"
        },
        {
            "signature": "BOOL BuildCommDCBW( [in] LPCWSTR lpDef, [out] LPDCB lpDCB );",
            "name": "BuildCommDCBW"
        },
        {
            "signature": "BOOL CallNamedPipeA( [in] LPCSTR lpNamedPipeName, [in] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out] LPDWORD lpBytesRead, [in] DWORD nTimeOut );",
            "name": "CallNamedPipeA"
        },
        {
            "signature": "BOOL CheckNameLegalDOS8Dot3A( [in] LPCSTR lpName, [out, optional] LPSTR lpOemName, [in] DWORD OemNameSize, [out, optional] PBOOL pbNameContainsSpaces, [out] PBOOL pbNameLegal );",
            "name": "CheckNameLegalDOS8Dot3A"
        },
        {
            "signature": "BOOL CheckNameLegalDOS8Dot3W( [in] LPCWSTR lpName, [out, optional] LPSTR lpOemName, [in] DWORD OemNameSize, [out, optional] PBOOL pbNameContainsSpaces, [out] PBOOL pbNameLegal );",
            "name": "CheckNameLegalDOS8Dot3W"
        },
        {
            "signature": "BOOL ClearCommBreak( [in] HANDLE hFile );",
            "name": "ClearCommBreak"
        },
        {
            "signature": "BOOL ClearCommError( [in] HANDLE hFile, [out, optional] LPDWORD lpErrors, [out, optional] LPCOMSTAT lpStat );",
            "name": "ClearCommError"
        },
        {
            "signature": "BOOL ClearEventLogA( [in] HANDLE hEventLog, [in] LPCSTR lpBackupFileName );",
            "name": "ClearEventLogA"
        },
        {
            "signature": "BOOL ClearEventLogW( [in] HANDLE hEventLog, [in] LPCWSTR lpBackupFileName );",
            "name": "ClearEventLogW"
        },
        {
            "signature": "void CloseEncryptedFileRaw( [in] PVOID pvContext );",
            "name": "CloseEncryptedFileRaw"
        },
        {
            "signature": "BOOL CloseEventLog( [in, out] HANDLE hEventLog );",
            "name": "CloseEventLog"
        },
        {
            "signature": "BOOL CommConfigDialogA( [in] LPCSTR lpszName, [in] HWND hWnd, [in, out] LPCOMMCONFIG lpCC );",
            "name": "CommConfigDialogA"
        },
        {
            "signature": "BOOL CommConfigDialogW( [in] LPCWSTR lpszName, [in] HWND hWnd, [in, out] LPCOMMCONFIG lpCC );",
            "name": "CommConfigDialogW"
        },
        {
            "signature": "BOOL ConvertFiberToThread();",
            "name": "ConvertFiberToThread"
        },
        {
            "signature": "LPVOID ConvertThreadToFiber( [in, optional] LPVOID lpParameter );",
            "name": "ConvertThreadToFiber"
        },
        {
            "signature": "LPVOID ConvertThreadToFiberEx( [in, optional] LPVOID lpParameter, [in] DWORD dwFlags );",
            "name": "ConvertThreadToFiberEx"
        },
        {
            "signature": "BOOL CopyContext( [in, out] PCONTEXT Destination, [in] DWORD ContextFlags, [in] PCONTEXT Source );",
            "name": "CopyContext"
        },
        {
            "signature": "BOOL CopyFile( [in] LPCTSTR lpExistingFileName, [in] LPCTSTR lpNewFileName, [in] BOOL bFailIfExists );",
            "name": "CopyFile"
        },
        {
            "signature": "HRESULT CopyFile2( [in] PCWSTR pwszExistingFileName, [in] PCWSTR pwszNewFileName, [in, optional] COPYFILE2_EXTENDED_PARAMETERS *pExtendedParameters );",
            "name": "CopyFile2"
        },
        {
            "signature": "BOOL CopyFileA( [in] LPCSTR lpExistingFileName, [in] LPCSTR lpNewFileName, [in] BOOL bFailIfExists );",
            "name": "CopyFileA"
        },
        {
            "signature": "BOOL CopyFileExA( [in] LPCSTR lpExistingFileName, [in] LPCSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in, optional] LPBOOL pbCancel, [in] DWORD dwCopyFlags );",
            "name": "CopyFileExA"
        },
        {
            "signature": "BOOL CopyFileExW( [in] LPCWSTR lpExistingFileName, [in] LPCWSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in, optional] LPBOOL pbCancel, [in] DWORD dwCopyFlags );",
            "name": "CopyFileExW"
        },
        {
            "signature": "BOOL CopyFileTransactedA( [in] LPCSTR lpExistingFileName, [in] LPCSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in, optional] LPBOOL pbCancel, [in] DWORD dwCopyFlags, [in] HANDLE hTransaction );",
            "name": "CopyFileTransactedA"
        },
        {
            "signature": "BOOL CopyFileTransactedW( [in] LPCWSTR lpExistingFileName, [in] LPCWSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in, optional] LPBOOL pbCancel, [in] DWORD dwCopyFlags, [in] HANDLE hTransaction );",
            "name": "CopyFileTransactedW"
        },
        {
            "signature": "BOOL CopyFileW( [in] LPCWSTR lpExistingFileName, [in] LPCWSTR lpNewFileName, [in] BOOL bFailIfExists );",
            "name": "CopyFileW"
        },
        {
            "signature": "HANDLE CreateActCtxA( [in, out] PCACTCTXA pActCtx );",
            "name": "CreateActCtxA"
        },
        {
            "signature": "HANDLE CreateActCtxW( [in, out] PCACTCTXW pActCtx );",
            "name": "CreateActCtxW"
        },
        {
            "signature": "HANDLE CreateBoundaryDescriptorA( [in] LPCSTR Name, [in] ULONG Flags );",
            "name": "CreateBoundaryDescriptorA"
        },
        {
            "signature": "BOOL CreateDirectory( [in] LPCTSTR lpPathName, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateDirectory"
        },
        {
            "signature": "BOOL CreateDirectoryExA( [in] LPCSTR lpTemplateDirectory, [in] LPCSTR lpNewDirectory, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateDirectoryExA"
        },
        {
            "signature": "BOOL CreateDirectoryExW( [in] LPCWSTR lpTemplateDirectory, [in] LPCWSTR lpNewDirectory, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateDirectoryExW"
        },
        {
            "signature": "BOOL CreateDirectoryTransactedA( [in, optional] LPCSTR lpTemplateDirectory, [in] LPCSTR lpNewDirectory, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] HANDLE hTransaction );",
            "name": "CreateDirectoryTransactedA"
        },
        {
            "signature": "BOOL CreateDirectoryTransactedW( [in, optional] LPCWSTR lpTemplateDirectory, [in] LPCWSTR lpNewDirectory, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] HANDLE hTransaction );",
            "name": "CreateDirectoryTransactedW"
        },
        {
            "signature": "LPVOID CreateFiber( [in] SIZE_T dwStackSize, [in] LPFIBER_START_ROUTINE lpStartAddress, [in, optional] LPVOID lpParameter );",
            "name": "CreateFiber"
        },
        {
            "signature": "LPVOID CreateFiberEx( [in] SIZE_T dwStackCommitSize, [in] SIZE_T dwStackReserveSize, [in] DWORD dwFlags, [in] LPFIBER_START_ROUTINE lpStartAddress, [in, optional] LPVOID lpParameter );",
            "name": "CreateFiberEx"
        },
        {
            "signature": "HANDLE CreateFileMappingA( [in] HANDLE hFile, [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes, [in] DWORD flProtect, [in] DWORD dwMaximumSizeHigh, [in] DWORD dwMaximumSizeLow, [in, optional] LPCSTR lpName );",
            "name": "CreateFileMappingA"
        },
        {
            "signature": "HANDLE CreateFileMappingNumaA( [in] HANDLE hFile, [in, optional] LPSECURITY_ATTRIBUTES lpFileMappingAttributes, [in] DWORD flProtect, [in] DWORD dwMaximumSizeHigh, [in] DWORD dwMaximumSizeLow, [in, optional] LPCSTR lpName, [in] DWORD nndPreferred );",
            "name": "CreateFileMappingNumaA"
        },
        {
            "signature": "HANDLE CreateFileTransactedA( [in] LPCSTR lpFileName, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD dwCreationDisposition, [in] DWORD dwFlagsAndAttributes, [in, optional] HANDLE hTemplateFile, [in] HANDLE hTransaction, [in, optional] PUSHORT pusMiniVersion, PVOID lpExtendedParameter );",
            "name": "CreateFileTransactedA"
        },
        {
            "signature": "HANDLE CreateFileTransactedW( [in] LPCWSTR lpFileName, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD dwCreationDisposition, [in] DWORD dwFlagsAndAttributes, [in, optional] HANDLE hTemplateFile, [in] HANDLE hTransaction, [in, optional] PUSHORT pusMiniVersion, PVOID lpExtendedParameter );",
            "name": "CreateFileTransactedW"
        },
        {
            "signature": "BOOL CreateHardLinkA( [in] LPCSTR lpFileName, [in] LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateHardLinkA"
        },
        {
            "signature": "BOOL CreateHardLinkTransactedA( [in] LPCSTR lpFileName, [in] LPCSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] HANDLE hTransaction );",
            "name": "CreateHardLinkTransactedA"
        },
        {
            "signature": "BOOL CreateHardLinkTransactedW( [in] LPCWSTR lpFileName, [in] LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] HANDLE hTransaction );",
            "name": "CreateHardLinkTransactedW"
        },
        {
            "signature": "BOOL CreateHardLinkW( [in] LPCWSTR lpFileName, [in] LPCWSTR lpExistingFileName, LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateHardLinkW"
        },
        {
            "signature": "HANDLE CreateJobObjectA( [in, optional] LPSECURITY_ATTRIBUTES lpJobAttributes, [in, optional] LPCSTR lpName );",
            "name": "CreateJobObjectA"
        },
        {
            "signature": "HANDLE CreateMailslotA( [in] LPCSTR lpName, [in] DWORD nMaxMessageSize, [in] DWORD lReadTimeout, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateMailslotA"
        },
        {
            "signature": "HANDLE CreateMailslotW( [in] LPCWSTR lpName, [in] DWORD nMaxMessageSize, [in] DWORD lReadTimeout, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateMailslotW"
        },
        {
            "signature": "HANDLE CreateNamedPipeA( [in] LPCSTR lpName, [in] DWORD dwOpenMode, [in] DWORD dwPipeMode, [in] DWORD nMaxInstances, [in] DWORD nOutBufferSize, [in] DWORD nInBufferSize, [in] DWORD nDefaultTimeOut, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "CreateNamedPipeA"
        },
        {
            "signature": "HANDLE CreatePrivateNamespaceA( [in, optional] LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes, [in] LPVOID lpBoundaryDescriptor, [in] LPCSTR lpAliasPrefix );",
            "name": "CreatePrivateNamespaceA"
        },
        {
            "signature": "BOOL CreateProcessWithLogonW( [in] LPCWSTR lpUsername, [in, optional] LPCWSTR lpDomain, [in] LPCWSTR lpPassword, [in] DWORD dwLogonFlags, [in, optional] LPCWSTR lpApplicationName, [in, out, optional] LPWSTR lpCommandLine, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCWSTR lpCurrentDirectory, [in] LPSTARTUPINFOW lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessWithLogonW"
        },
        {
            "signature": "BOOL CreateProcessWithTokenW( [in] HANDLE hToken, [in] DWORD dwLogonFlags, [in, optional] LPCWSTR lpApplicationName, [in, out, optional] LPWSTR lpCommandLine, [in] DWORD dwCreationFlags, [in, optional] LPVOID lpEnvironment, [in, optional] LPCWSTR lpCurrentDirectory, [in] LPSTARTUPINFOW lpStartupInfo, [out] LPPROCESS_INFORMATION lpProcessInformation );",
            "name": "CreateProcessWithTokenW"
        },
        {
            "signature": "HANDLE CreateSemaphoreA( [in, optional] LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, [in] LONG lInitialCount, [in] LONG lMaximumCount, [in, optional] LPCSTR lpName );",
            "name": "CreateSemaphoreA"
        },
        {
            "signature": "HANDLE CreateSemaphoreExA( [in, optional] LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, [in] LONG lInitialCount, [in] LONG lMaximumCount, [in, optional] LPCSTR lpName, DWORD dwFlags, [in] DWORD dwDesiredAccess );",
            "name": "CreateSemaphoreExA"
        },
        {
            "signature": "BOOLEAN CreateSymbolicLinkA( [in] LPCSTR lpSymlinkFileName, [in] LPCSTR lpTargetFileName, [in] DWORD dwFlags );",
            "name": "CreateSymbolicLinkA"
        },
        {
            "signature": "BOOLEAN CreateSymbolicLinkTransactedA( [in] LPCSTR lpSymlinkFileName, [in] LPCSTR lpTargetFileName, [in] DWORD dwFlags, [in] HANDLE hTransaction );",
            "name": "CreateSymbolicLinkTransactedA"
        },
        {
            "signature": "BOOLEAN CreateSymbolicLinkTransactedW( [in] LPCWSTR lpSymlinkFileName, [in] LPCWSTR lpTargetFileName, [in] DWORD dwFlags, [in] HANDLE hTransaction );",
            "name": "CreateSymbolicLinkTransactedW"
        },
        {
            "signature": "BOOLEAN CreateSymbolicLinkW( [in] LPCWSTR lpSymlinkFileName, [in] LPCWSTR lpTargetFileName, [in] DWORD dwFlags );",
            "name": "CreateSymbolicLinkW"
        },
        {
            "signature": "DWORD CreateTapePartition( [in] HANDLE hDevice, [in] DWORD dwPartitionMethod, [in] DWORD dwCount, [in] DWORD dwSize );",
            "name": "CreateTapePartition"
        },
        {
            "signature": "BOOL CreateUmsCompletionList( [out] PUMS_COMPLETION_LIST *UmsCompletionList );",
            "name": "CreateUmsCompletionList"
        },
        {
            "signature": "BOOL CreateUmsThreadContext( [out] PUMS_CONTEXT *lpUmsThread );",
            "name": "CreateUmsThreadContext"
        },
        {
            "signature": "BOOL DeactivateActCtx( [in] DWORD dwFlags, [in] ULONG_PTR ulCookie );",
            "name": "DeactivateActCtx"
        },
        {
            "signature": "BOOL DebugBreakProcess( [in] HANDLE Process );",
            "name": "DebugBreakProcess"
        },
        {
            "signature": "BOOL DebugSetProcessKillOnExit( [in] BOOL KillOnExit );",
            "name": "DebugSetProcessKillOnExit"
        },
        {
            "signature": "BOOL DecryptFileA( [in] LPCSTR lpFileName, DWORD dwReserved );",
            "name": "DecryptFileA"
        },
        {
            "signature": "BOOL DecryptFileW( [in] LPCWSTR lpFileName, DWORD dwReserved );",
            "name": "DecryptFileW"
        },
        {
            "signature": "BOOL DefineDosDeviceA( [in] DWORD dwFlags, [in] LPCSTR lpDeviceName, [in, optional] LPCSTR lpTargetPath );",
            "name": "DefineDosDeviceA"
        },
        {
            "signature": "ATOM DeleteAtom( [in] ATOM nAtom );",
            "name": "DeleteAtom"
        },
        {
            "signature": "void DeleteFiber( [in] LPVOID lpFiber );",
            "name": "DeleteFiber"
        },
        {
            "signature": "BOOL DeleteFile( [in] LPCTSTR lpFileName );",
            "name": "DeleteFile"
        },
        {
            "signature": "BOOL DeleteFileTransactedA( [in] LPCSTR lpFileName, [in] HANDLE hTransaction );",
            "name": "DeleteFileTransactedA"
        },
        {
            "signature": "BOOL DeleteFileTransactedW( [in] LPCWSTR lpFileName, [in] HANDLE hTransaction );",
            "name": "DeleteFileTransactedW"
        },
        {
            "signature": "BOOL DeleteUmsCompletionList( [in] PUMS_COMPLETION_LIST UmsCompletionList );",
            "name": "DeleteUmsCompletionList"
        },
        {
            "signature": "BOOL DeleteUmsThreadContext( [in] PUMS_CONTEXT UmsThread );",
            "name": "DeleteUmsThreadContext"
        },
        {
            "signature": "BOOL DeleteVolumeMountPointA( [in] LPCSTR lpszVolumeMountPoint );",
            "name": "DeleteVolumeMountPointA"
        },
        {
            "signature": "BOOL DequeueUmsCompletionListItems( [in] PUMS_COMPLETION_LIST UmsCompletionList, [in] DWORD WaitTimeOut, [out] PUMS_CONTEXT *UmsThreadList );",
            "name": "DequeueUmsCompletionListItems"
        },
        {
            "signature": "BOOL DeregisterEventSource( [in, out] HANDLE hEventLog );",
            "name": "DeregisterEventSource"
        },
        {
            "signature": "void DestroyThreadpoolEnvironment( [in, out] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "DestroyThreadpoolEnvironment"
        },
        {
            "signature": "DWORD DisableThreadProfiling( [in] HANDLE PerformanceDataHandle );",
            "name": "DisableThreadProfiling"
        },
        {
            "signature": "BOOL DnsHostnameToComputerNameA( [in] LPCSTR Hostname, [out] LPSTR ComputerName, [in, out] LPDWORD nSize );",
            "name": "DnsHostnameToComputerNameA"
        },
        {
            "signature": "BOOL DnsHostnameToComputerNameW( [in] LPCWSTR Hostname, [out] LPWSTR ComputerName, [in, out] LPDWORD nSize );",
            "name": "DnsHostnameToComputerNameW"
        },
        {
            "signature": "BOOL DosDateTimeToFileTime( [in] WORD wFatDate, [in] WORD wFatTime, [out] LPFILETIME lpFileTime );",
            "name": "DosDateTimeToFileTime"
        },
        {
            "signature": "BOOL EnableProcessOptionalXStateFeatures( DWORD64 Features );",
            "name": "EnableProcessOptionalXStateFeatures"
        },
        {
            "signature": "DWORD EnableThreadProfiling( [in] HANDLE ThreadHandle, [in] DWORD Flags, [in] DWORD64 HardwareCounters, [out] HANDLE *PerformanceDataHandle );",
            "name": "EnableThreadProfiling"
        },
        {
            "signature": "BOOL EncryptFileA( [in] LPCSTR lpFileName );",
            "name": "EncryptFileA"
        },
        {
            "signature": "BOOL EncryptFileW( [in] LPCWSTR lpFileName );",
            "name": "EncryptFileW"
        },
        {
            "signature": "BOOL EndUpdateResourceA( [in] HANDLE hUpdate, [in] BOOL fDiscard );",
            "name": "EndUpdateResourceA"
        },
        {
            "signature": "BOOL EndUpdateResourceW( [in] HANDLE hUpdate, [in] BOOL fDiscard );",
            "name": "EndUpdateResourceW"
        },
        {
            "signature": "BOOL EnterUmsSchedulingMode( [in] PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo );",
            "name": "EnterUmsSchedulingMode"
        },
        {
            "signature": "BOOL EnumResourceLanguagesA( [in] HMODULE hModule, [in] LPCSTR lpType, [in] LPCSTR lpName, [in] ENUMRESLANGPROCA lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceLanguagesA"
        },
        {
            "signature": "BOOL EnumResourceLanguagesW( [in] HMODULE hModule, [in] LPCWSTR lpType, [in] LPCWSTR lpName, [in] ENUMRESLANGPROCW lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceLanguagesW"
        },
        {
            "signature": "BOOL EnumResourceTypesA( [in, optional] HMODULE hModule, [in] ENUMRESTYPEPROCA lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceTypesA"
        },
        {
            "signature": "BOOL EnumResourceTypesW( [in, optional] HMODULE hModule, [in] ENUMRESTYPEPROCW lpEnumFunc, [in] LONG_PTR lParam );",
            "name": "EnumResourceTypesW"
        },
        {
            "signature": "DWORD EraseTape( [in] HANDLE hDevice, [in] DWORD dwEraseType, [in] BOOL bImmediate );",
            "name": "EraseTape"
        },
        {
            "signature": "BOOL EscapeCommFunction( [in] HANDLE hFile, [in] DWORD dwFunc );",
            "name": "EscapeCommFunction"
        },
        {
            "signature": "BOOL ExecuteUmsThread( [in, out] PUMS_CONTEXT UmsThread );",
            "name": "ExecuteUmsThread"
        },
        {
            "signature": "__analysis_noreturn VOID FatalExit( [in] int ExitCode );",
            "name": "FatalExit"
        },
        {
            "signature": "BOOL FileEncryptionStatusA( [in] LPCSTR lpFileName, [out] LPDWORD lpStatus );",
            "name": "FileEncryptionStatusA"
        },
        {
            "signature": "BOOL FileEncryptionStatusW( [in] LPCWSTR lpFileName, [out] LPDWORD lpStatus );",
            "name": "FileEncryptionStatusW"
        },
        {
            "signature": "BOOL FileTimeToDosDateTime( [in] const FILETIME *lpFileTime, [out] LPWORD lpFatDate, [out] LPWORD lpFatTime );",
            "name": "FileTimeToDosDateTime"
        },
        {
            "signature": "BOOL FindActCtxSectionGuid( [in] DWORD dwFlags, [in] const GUID *lpExtensionGuid, [in] ULONG ulSectionId, [in] const GUID *lpGuidToFind, [out] PACTCTX_SECTION_KEYED_DATA ReturnedData );",
            "name": "FindActCtxSectionGuid"
        },
        {
            "signature": "BOOL FindActCtxSectionStringA( [in] DWORD dwFlags, [in] const GUID *lpExtensionGuid, [in] ULONG ulSectionId, [in] LPCSTR lpStringToFind, [out] PACTCTX_SECTION_KEYED_DATA ReturnedData );",
            "name": "FindActCtxSectionStringA"
        },
        {
            "signature": "BOOL FindActCtxSectionStringW( [in] DWORD dwFlags, [in] const GUID *lpExtensionGuid, [in] ULONG ulSectionId, [in] LPCWSTR lpStringToFind, [out] PACTCTX_SECTION_KEYED_DATA ReturnedData );",
            "name": "FindActCtxSectionStringW"
        },
        {
            "signature": "ATOM FindAtomA( [in] LPCSTR lpString );",
            "name": "FindAtomA"
        },
        {
            "signature": "ATOM FindAtomW( [in] LPCWSTR lpString );",
            "name": "FindAtomW"
        },
        {
            "signature": "HANDLE FindFirstFileNameTransactedW( [in] LPCWSTR lpFileName, [in] DWORD dwFlags, [in, out] LPDWORD StringLength, [in, out] PWSTR LinkName, [in, optional] HANDLE hTransaction );",
            "name": "FindFirstFileNameTransactedW"
        },
        {
            "signature": "HANDLE FindFirstFileTransactedA( [in] LPCSTR lpFileName, [in] FINDEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFindFileData, [in] FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, [in] DWORD dwAdditionalFlags, [in] HANDLE hTransaction );",
            "name": "FindFirstFileTransactedA"
        },
        {
            "signature": "HANDLE FindFirstFileTransactedW( [in] LPCWSTR lpFileName, [in] FINDEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFindFileData, [in] FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, [in] DWORD dwAdditionalFlags, [in] HANDLE hTransaction );",
            "name": "FindFirstFileTransactedW"
        },
        {
            "signature": "HANDLE FindFirstStreamTransactedW( [in] LPCWSTR lpFileName, [in] STREAM_INFO_LEVELS InfoLevel, [out] LPVOID lpFindStreamData, DWORD dwFlags, [in] HANDLE hTransaction );",
            "name": "FindFirstStreamTransactedW"
        },
        {
            "signature": "HANDLE FindFirstVolumeA( [out] LPSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "FindFirstVolumeA"
        },
        {
            "signature": "HANDLE FindFirstVolumeMountPointA( [in] LPCSTR lpszRootPathName, [out] LPSTR lpszVolumeMountPoint, [in] DWORD cchBufferLength );",
            "name": "FindFirstVolumeMountPointA"
        },
        {
            "signature": "HANDLE FindFirstVolumeMountPointW( [in] LPCWSTR lpszRootPathName, [out] LPWSTR lpszVolumeMountPoint, [in] DWORD cchBufferLength );",
            "name": "FindFirstVolumeMountPointW"
        },
        {
            "signature": "BOOL FindNextVolumeA( [in] HANDLE hFindVolume, [out] LPSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "FindNextVolumeA"
        },
        {
            "signature": "BOOL FindNextVolumeMountPointA( [in] HANDLE hFindVolumeMountPoint, [out] LPSTR lpszVolumeMountPoint, [in] DWORD cchBufferLength );",
            "name": "FindNextVolumeMountPointA"
        },
        {
            "signature": "BOOL FindNextVolumeMountPointW( [in] HANDLE hFindVolumeMountPoint, [out] LPWSTR lpszVolumeMountPoint, [in] DWORD cchBufferLength );",
            "name": "FindNextVolumeMountPointW"
        },
        {
            "signature": "HRSRC FindResourceA( [in, optional] HMODULE hModule, [in] LPCSTR lpName, [in] LPCSTR lpType );",
            "name": "FindResourceA"
        },
        {
            "signature": "HRSRC FindResourceExA( [in, optional] HMODULE hModule, [in] LPCSTR lpType, [in] LPCSTR lpName, [in] WORD wLanguage );",
            "name": "FindResourceExA"
        },
        {
            "signature": "BOOL FindVolumeMountPointClose( [in] HANDLE hFindVolumeMountPoint );",
            "name": "FindVolumeMountPointClose"
        },
        {
            "signature": "DWORD FormatMessage( [in] DWORD dwFlags, [in, optional] LPCVOID lpSource, [in] DWORD dwMessageId, [in] DWORD dwLanguageId, [out] LPTSTR lpBuffer, [in] DWORD nSize, [in, optional] va_list *Arguments );",
            "name": "FormatMessage"
        },
        {
            "signature": "DWORD FormatMessageA( [in] DWORD dwFlags, [in, optional] LPCVOID lpSource, [in] DWORD dwMessageId, [in] DWORD dwLanguageId, [out] LPSTR lpBuffer, [in] DWORD nSize, [in, optional] va_list *Arguments );",
            "name": "FormatMessageA"
        },
        {
            "signature": "DWORD FormatMessageW( [in] DWORD dwFlags, [in, optional] LPCVOID lpSource, [in] DWORD dwMessageId, [in] DWORD dwLanguageId, [out] LPWSTR lpBuffer, [in] DWORD nSize, [in, optional] va_list *Arguments );",
            "name": "FormatMessageW"
        },
        {
            "signature": "DWORD GetActiveProcessorCount( [in] WORD GroupNumber );",
            "name": "GetActiveProcessorCount"
        },
        {
            "signature": "WORD GetActiveProcessorGroupCount();",
            "name": "GetActiveProcessorGroupCount"
        },
        {
            "signature": "HRESULT GetApplicationRecoveryCallback( [in] HANDLE hProcess, [out] APPLICATION_RECOVERY_CALLBACK *pRecoveryCallback, [out] PVOID *ppvParameter, [out] PDWORD pdwPingInterval, [out] PDWORD pdwFlags );",
            "name": "GetApplicationRecoveryCallback"
        },
        {
            "signature": "HRESULT GetApplicationRestartSettings( [in] HANDLE hProcess, [out, optional] PWSTR pwzCommandline, [in, out] PDWORD pcchSize, [out, optional] PDWORD pdwFlags );",
            "name": "GetApplicationRestartSettings"
        },
        {
            "signature": "UINT GetAtomNameA( [in] ATOM nAtom, [out] LPSTR lpBuffer, [in] int nSize );",
            "name": "GetAtomNameA"
        },
        {
            "signature": "UINT GetAtomNameW( [in] ATOM nAtom, [out] LPWSTR lpBuffer, [in] int nSize );",
            "name": "GetAtomNameW"
        },
        {
            "signature": "BOOL GetBinaryTypeA( [in] LPCSTR lpApplicationName, [out] LPDWORD lpBinaryType );",
            "name": "GetBinaryTypeA"
        },
        {
            "signature": "BOOL GetBinaryTypeW( [in] LPCWSTR lpApplicationName, [out] LPDWORD lpBinaryType );",
            "name": "GetBinaryTypeW"
        },
        {
            "signature": "BOOL GetCommConfig( [in] HANDLE hCommDev, [out] LPCOMMCONFIG lpCC, [in, out] LPDWORD lpdwSize );",
            "name": "GetCommConfig"
        },
        {
            "signature": "BOOL GetCommMask( [in] HANDLE hFile, [out] LPDWORD lpEvtMask );",
            "name": "GetCommMask"
        },
        {
            "signature": "BOOL GetCommModemStatus( [in] HANDLE hFile, [out] LPDWORD lpModemStat );",
            "name": "GetCommModemStatus"
        },
        {
            "signature": "ULONG GetCommPorts( [out] PULONG lpPortNumbers, [in] ULONG uPortNumbersCount, [out] PULONG puPortNumbersFound );",
            "name": "GetCommPorts"
        },
        {
            "signature": "BOOL GetCommProperties( [in] HANDLE hFile, [out] LPCOMMPROP lpCommProp );",
            "name": "GetCommProperties"
        },
        {
            "signature": "BOOL GetCommState( [in] HANDLE hFile, [in, out] LPDCB lpDCB );",
            "name": "GetCommState"
        },
        {
            "signature": "BOOL GetCommTimeouts( [in] HANDLE hFile, [out] LPCOMMTIMEOUTS lpCommTimeouts );",
            "name": "GetCommTimeouts"
        },
        {
            "signature": "DWORD GetCompressedFileSizeTransactedA( [in] LPCSTR lpFileName, [out, optional] LPDWORD lpFileSizeHigh, [in] HANDLE hTransaction );",
            "name": "GetCompressedFileSizeTransactedA"
        },
        {
            "signature": "DWORD GetCompressedFileSizeTransactedW( [in] LPCWSTR lpFileName, [out, optional] LPDWORD lpFileSizeHigh, [in] HANDLE hTransaction );",
            "name": "GetCompressedFileSizeTransactedW"
        },
        {
            "signature": "BOOL GetComputerNameA( [out] LPSTR lpBuffer, [in, out] LPDWORD nSize );",
            "name": "GetComputerNameA"
        },
        {
            "signature": "BOOL GetComputerNameW( [out] LPWSTR lpBuffer, [in, out] LPDWORD nSize );",
            "name": "GetComputerNameW"
        },
        {
            "signature": "BOOL GetCurrentActCtx( [out] HANDLE *lphActCtx );",
            "name": "GetCurrentActCtx"
        },
        {
            "signature": "DWORD GetCurrentDirectory( [in] DWORD nBufferLength, [out] LPTSTR lpBuffer );",
            "name": "GetCurrentDirectory"
        },
        {
            "signature": "BOOL GetCurrentHwProfileA( [out] LPHW_PROFILE_INFOA lpHwProfileInfo );",
            "name": "GetCurrentHwProfileA"
        },
        {
            "signature": "BOOL GetCurrentHwProfileW( [out] LPHW_PROFILE_INFOW lpHwProfileInfo );",
            "name": "GetCurrentHwProfileW"
        },
        {
            "signature": "PUMS_CONTEXT GetCurrentUmsThread();",
            "name": "GetCurrentUmsThread"
        },
        {
            "signature": "BOOL GetDefaultCommConfigA( [in] LPCSTR lpszName, [out] LPCOMMCONFIG lpCC, [in, out] LPDWORD lpdwSize );",
            "name": "GetDefaultCommConfigA"
        },
        {
            "signature": "BOOL GetDefaultCommConfigW( [in] LPCWSTR lpszName, [out] LPCOMMCONFIG lpCC, [in, out] LPDWORD lpdwSize );",
            "name": "GetDefaultCommConfigW"
        },
        {
            "signature": "BOOL GetDevicePowerState( [in] HANDLE hDevice, [out] BOOL *pfOn );",
            "name": "GetDevicePowerState"
        },
        {
            "signature": "DWORD GetDllDirectoryA( [in] DWORD nBufferLength, [out] LPSTR lpBuffer );",
            "name": "GetDllDirectoryA"
        },
        {
            "signature": "DWORD GetDllDirectoryW( [in] DWORD nBufferLength, [out] LPWSTR lpBuffer );",
            "name": "GetDllDirectoryW"
        },
        {
            "signature": "DWORD64 GetEnabledXStateFeatures();",
            "name": "GetEnabledXStateFeatures"
        },
        {
            "signature": "DWORD GetEnvironmentVariable( [in, optional] LPCTSTR lpName, [out, optional] LPTSTR lpBuffer, [in] DWORD nSize );",
            "name": "GetEnvironmentVariable"
        },
        {
            "signature": "BOOL GetEventLogInformation( [in] HANDLE hEventLog, [in] DWORD dwInfoLevel, [out] LPVOID lpBuffer, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "GetEventLogInformation"
        },
        {
            "signature": "BOOL GetFileAttributesTransactedA( [in] LPCSTR lpFileName, [in] GET_FILEEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFileInformation, [in] HANDLE hTransaction );",
            "name": "GetFileAttributesTransactedA"
        },
        {
            "signature": "BOOL GetFileAttributesTransactedW( [in] LPCWSTR lpFileName, [in] GET_FILEEX_INFO_LEVELS fInfoLevelId, [out] LPVOID lpFileInformation, [in] HANDLE hTransaction );",
            "name": "GetFileAttributesTransactedW"
        },
        {
            "signature": "BOOL GetFileBandwidthReservation( [in] HANDLE hFile, [out] LPDWORD lpPeriodMilliseconds, [out] LPDWORD lpBytesPerPeriod, [out] LPBOOL pDiscardable, [out] LPDWORD lpTransferSize, [out] LPDWORD lpNumOutstandingRequests );",
            "name": "GetFileBandwidthReservation"
        },
        {
            "signature": "BOOL GetFileInformationByHandleEx( [in] HANDLE hFile, [in] FILE_INFO_BY_HANDLE_CLASS FileInformationClass, [out] LPVOID lpFileInformation, [in] DWORD dwBufferSize );",
            "name": "GetFileInformationByHandleEx"
        },
        {
            "signature": "BOOL GetFileSecurityA( [in] LPCSTR lpFileName, [in] SECURITY_INFORMATION RequestedInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "GetFileSecurityA"
        },
        {
            "signature": "DWORD GetFirmwareEnvironmentVariableA( [in] LPCSTR lpName, [in] LPCSTR lpGuid, [out] PVOID pBuffer, [in] DWORD nSize );",
            "name": "GetFirmwareEnvironmentVariableA"
        },
        {
            "signature": "DWORD GetFirmwareEnvironmentVariableExA( LPCSTR lpName, LPCSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes );",
            "name": "GetFirmwareEnvironmentVariableExA"
        },
        {
            "signature": "DWORD GetFirmwareEnvironmentVariableExW( LPCWSTR lpName, LPCWSTR lpGuid, PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes );",
            "name": "GetFirmwareEnvironmentVariableExW"
        },
        {
            "signature": "DWORD GetFirmwareEnvironmentVariableW( [in] LPCWSTR lpName, [in] LPCWSTR lpGuid, [out] PVOID pBuffer, [in] DWORD nSize );",
            "name": "GetFirmwareEnvironmentVariableW"
        },
        {
            "signature": "BOOL GetFirmwareType( [in, out] PFIRMWARE_TYPE FirmwareType );",
            "name": "GetFirmwareType"
        },
        {
            "signature": "DWORD GetFullPathNameTransactedA( [in] LPCSTR lpFileName, [in] DWORD nBufferLength, [out] LPSTR lpBuffer, [out] LPSTR *lpFilePart, [in] HANDLE hTransaction );",
            "name": "GetFullPathNameTransactedA"
        },
        {
            "signature": "DWORD GetFullPathNameTransactedW( [in] LPCWSTR lpFileName, [in] DWORD nBufferLength, [out] LPWSTR lpBuffer, [out] LPWSTR *lpFilePart, [in] HANDLE hTransaction );",
            "name": "GetFullPathNameTransactedW"
        },
        {
            "signature": "DWORD GetLogicalDriveStringsA( [in] DWORD nBufferLength, [out] LPSTR lpBuffer );",
            "name": "GetLogicalDriveStringsA"
        },
        {
            "signature": "DWORD GetLongPathNameTransactedA( [in] LPCSTR lpszShortPath, [out] LPSTR lpszLongPath, [in] DWORD cchBuffer, [in] HANDLE hTransaction );",
            "name": "GetLongPathNameTransactedA"
        },
        {
            "signature": "DWORD GetLongPathNameTransactedW( [in] LPCWSTR lpszShortPath, [out] LPWSTR lpszLongPath, [in] DWORD cchBuffer, [in] HANDLE hTransaction );",
            "name": "GetLongPathNameTransactedW"
        },
        {
            "signature": "BOOL GetMailslotInfo( [in] HANDLE hMailslot, [out, optional] LPDWORD lpMaxMessageSize, [out, optional] LPDWORD lpNextSize, [out, optional] LPDWORD lpMessageCount, [out, optional] LPDWORD lpReadTimeout );",
            "name": "GetMailslotInfo"
        },
        {
            "signature": "DWORD GetMaximumProcessorCount( [in] WORD GroupNumber );",
            "name": "GetMaximumProcessorCount"
        },
        {
            "signature": "WORD GetMaximumProcessorGroupCount();",
            "name": "GetMaximumProcessorGroupCount"
        },
        {
            "signature": "BOOL GetNamedPipeClientComputerNameA( [in] HANDLE Pipe, [out] LPSTR ClientComputerName, [in] ULONG ClientComputerNameLength );",
            "name": "GetNamedPipeClientComputerNameA"
        },
        {
            "signature": "BOOL GetNamedPipeClientProcessId( [in] HANDLE Pipe, [out] PULONG ClientProcessId );",
            "name": "GetNamedPipeClientProcessId"
        },
        {
            "signature": "BOOL GetNamedPipeClientSessionId( [in] HANDLE Pipe, [out] PULONG ClientSessionId );",
            "name": "GetNamedPipeClientSessionId"
        },
        {
            "signature": "BOOL GetNamedPipeHandleStateA( [in] HANDLE hNamedPipe, [out, optional] LPDWORD lpState, [out, optional] LPDWORD lpCurInstances, [out, optional] LPDWORD lpMaxCollectionCount, [out, optional] LPDWORD lpCollectDataTimeout, [out, optional] LPSTR lpUserName, [in] DWORD nMaxUserNameSize );",
            "name": "GetNamedPipeHandleStateA"
        },
        {
            "signature": "BOOL GetNamedPipeServerProcessId( [in] HANDLE Pipe, [out] PULONG ServerProcessId );",
            "name": "GetNamedPipeServerProcessId"
        },
        {
            "signature": "BOOL GetNamedPipeServerSessionId( [in] HANDLE Pipe, [out] PULONG ServerSessionId );",
            "name": "GetNamedPipeServerSessionId"
        },
        {
            "signature": "PUMS_CONTEXT GetNextUmsListItem( [in, out] PUMS_CONTEXT UmsContext );",
            "name": "GetNextUmsListItem"
        },
        {
            "signature": "BOOL GetNumaAvailableMemoryNode( [in] UCHAR Node, [out] PULONGLONG AvailableBytes );",
            "name": "GetNumaAvailableMemoryNode"
        },
        {
            "signature": "BOOL GetNumaAvailableMemoryNodeEx( [in] USHORT Node, [out] PULONGLONG AvailableBytes );",
            "name": "GetNumaAvailableMemoryNodeEx"
        },
        {
            "signature": "BOOL GetNumaNodeNumberFromHandle( [in] HANDLE hFile, [out] PUSHORT NodeNumber );",
            "name": "GetNumaNodeNumberFromHandle"
        },
        {
            "signature": "BOOL GetNumaNodeProcessorMask( [in] UCHAR Node, [out] PULONGLONG ProcessorMask );",
            "name": "GetNumaNodeProcessorMask"
        },
        {
            "signature": "BOOL GetNumaProcessorNode( [in] UCHAR Processor, [out] PUCHAR NodeNumber );",
            "name": "GetNumaProcessorNode"
        },
        {
            "signature": "BOOL GetNumaProcessorNodeEx( [in] PPROCESSOR_NUMBER Processor, [out] PUSHORT NodeNumber );",
            "name": "GetNumaProcessorNodeEx"
        },
        {
            "signature": "BOOL GetNumaProximityNode( [in] ULONG ProximityId, [out] PUCHAR NodeNumber );",
            "name": "GetNumaProximityNode"
        },
        {
            "signature": "BOOL GetNumberOfEventLogRecords( [in] HANDLE hEventLog, [out] PDWORD NumberOfRecords );",
            "name": "GetNumberOfEventLogRecords"
        },
        {
            "signature": "BOOL GetOldestEventLogRecord( [in] HANDLE hEventLog, [out] PDWORD OldestRecord );",
            "name": "GetOldestEventLogRecord"
        },
        {
            "signature": "UINT GetPrivateProfileInt( [in] LPCTSTR lpAppName, [in] LPCTSTR lpKeyName, [in] INT nDefault, [in] LPCTSTR lpFileName );",
            "name": "GetPrivateProfileInt"
        },
        {
            "signature": "UINT GetPrivateProfileIntA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] INT nDefault, [in] LPCSTR lpFileName );",
            "name": "GetPrivateProfileIntA"
        },
        {
            "signature": "UINT GetPrivateProfileIntW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] INT nDefault, [in] LPCWSTR lpFileName );",
            "name": "GetPrivateProfileIntW"
        },
        {
            "signature": "DWORD GetPrivateProfileSection( [in] LPCTSTR lpAppName, [out] LPTSTR lpReturnedString, [in] DWORD nSize, [in] LPCTSTR lpFileName );",
            "name": "GetPrivateProfileSection"
        },
        {
            "signature": "DWORD GetPrivateProfileSectionA( [in] LPCSTR lpAppName, [out] LPSTR lpReturnedString, [in] DWORD nSize, [in] LPCSTR lpFileName );",
            "name": "GetPrivateProfileSectionA"
        },
        {
            "signature": "DWORD GetPrivateProfileSectionNames( [out] LPTSTR lpszReturnBuffer, [in] DWORD nSize, [in] LPCTSTR lpFileName );",
            "name": "GetPrivateProfileSectionNames"
        },
        {
            "signature": "DWORD GetPrivateProfileSectionNamesA( [out] LPSTR lpszReturnBuffer, [in] DWORD nSize, [in] LPCSTR lpFileName );",
            "name": "GetPrivateProfileSectionNamesA"
        },
        {
            "signature": "DWORD GetPrivateProfileSectionNamesW( [out] LPWSTR lpszReturnBuffer, [in] DWORD nSize, [in] LPCWSTR lpFileName );",
            "name": "GetPrivateProfileSectionNamesW"
        },
        {
            "signature": "DWORD GetPrivateProfileSectionW( [in] LPCWSTR lpAppName, [out] LPWSTR lpReturnedString, [in] DWORD nSize, [in] LPCWSTR lpFileName );",
            "name": "GetPrivateProfileSectionW"
        },
        {
            "signature": "DWORD GetPrivateProfileString( [in] LPCTSTR lpAppName, [in] LPCTSTR lpKeyName, [in] LPCTSTR lpDefault, [out] LPTSTR lpReturnedString, [in] DWORD nSize, [in] LPCTSTR lpFileName );",
            "name": "GetPrivateProfileString"
        },
        {
            "signature": "DWORD GetPrivateProfileStringA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] LPCSTR lpDefault, [out] LPSTR lpReturnedString, [in] DWORD nSize, [in] LPCSTR lpFileName );",
            "name": "GetPrivateProfileStringA"
        },
        {
            "signature": "DWORD GetPrivateProfileStringW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] LPCWSTR lpDefault, [out] LPWSTR lpReturnedString, [in] DWORD nSize, [in] LPCWSTR lpFileName );",
            "name": "GetPrivateProfileStringW"
        },
        {
            "signature": "BOOL GetPrivateProfileStruct( [in] LPCTSTR lpszSection, [in] LPCTSTR lpszKey, [out] LPVOID lpStruct, [in] UINT uSizeStruct, [in] LPCTSTR szFile );",
            "name": "GetPrivateProfileStruct"
        },
        {
            "signature": "BOOL GetPrivateProfileStructA( [in] LPCSTR lpszSection, [in] LPCSTR lpszKey, [out] LPVOID lpStruct, [in] UINT uSizeStruct, [in] LPCSTR szFile );",
            "name": "GetPrivateProfileStructA"
        },
        {
            "signature": "BOOL GetPrivateProfileStructW( [in] LPCWSTR lpszSection, [in] LPCWSTR lpszKey, [out] LPVOID lpStruct, [in] UINT uSizeStruct, [in] LPCWSTR szFile );",
            "name": "GetPrivateProfileStructW"
        },
        {
            "signature": "BOOL GetProcessAffinityMask( [in] HANDLE hProcess, [out] PDWORD_PTR lpProcessAffinityMask, [out] PDWORD_PTR lpSystemAffinityMask );",
            "name": "GetProcessAffinityMask"
        },
        {
            "signature": "BOOL GetProcessDEPPolicy( [in] HANDLE hProcess, [out] LPDWORD lpFlags, [out] PBOOL lpPermanent );",
            "name": "GetProcessDEPPolicy"
        },
        {
            "signature": "BOOL GetProcessIoCounters( [in] HANDLE hProcess, [out] PIO_COUNTERS lpIoCounters );",
            "name": "GetProcessIoCounters"
        },
        {
            "signature": "UINT GetProfileIntA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] INT nDefault );",
            "name": "GetProfileIntA"
        },
        {
            "signature": "UINT GetProfileIntW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] INT nDefault );",
            "name": "GetProfileIntW"
        },
        {
            "signature": "DWORD GetProfileSectionA( [in] LPCSTR lpAppName, [out] LPSTR lpReturnedString, [in] DWORD nSize );",
            "name": "GetProfileSectionA"
        },
        {
            "signature": "DWORD GetProfileSectionW( [in] LPCWSTR lpAppName, [out] LPWSTR lpReturnedString, [in] DWORD nSize );",
            "name": "GetProfileSectionW"
        },
        {
            "signature": "DWORD GetProfileStringA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] LPCSTR lpDefault, [out] LPSTR lpReturnedString, [in] DWORD nSize );",
            "name": "GetProfileStringA"
        },
        {
            "signature": "DWORD GetProfileStringW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] LPCWSTR lpDefault, [out] LPWSTR lpReturnedString, [in] DWORD nSize );",
            "name": "GetProfileStringW"
        },
        {
            "signature": "DWORD GetShortPathNameA( [in] LPCSTR lpszLongPath, [out] LPSTR lpszShortPath, [in] DWORD cchBuffer );",
            "name": "GetShortPathNameA"
        },
        {
            "signature": "DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy();",
            "name": "GetSystemDEPPolicy"
        },
        {
            "signature": "BOOL GetSystemPowerStatus( [out] LPSYSTEM_POWER_STATUS lpSystemPowerStatus );",
            "name": "GetSystemPowerStatus"
        },
        {
            "signature": "BOOL GetSystemRegistryQuota( [out, optional] PDWORD pdwQuotaAllowed, [out, optional] PDWORD pdwQuotaUsed );",
            "name": "GetSystemRegistryQuota"
        },
        {
            "signature": "DWORD GetTapeParameters( [in] HANDLE hDevice, [in] DWORD dwOperation, [out] LPDWORD lpdwSize, [out] LPVOID lpTapeInformation );",
            "name": "GetTapeParameters"
        },
        {
            "signature": "DWORD GetTapePosition( [in] HANDLE hDevice, [in] DWORD dwPositionType, [out] LPDWORD lpdwPartition, [out] LPDWORD lpdwOffsetLow, [out] LPDWORD lpdwOffsetHigh );",
            "name": "GetTapePosition"
        },
        {
            "signature": "DWORD GetTapeStatus( [in] HANDLE hDevice );",
            "name": "GetTapeStatus"
        },
        {
            "signature": "UINT GetTempFileName( [in] LPCTSTR lpPathName, [in] LPCTSTR lpPrefixString, [in] UINT uUnique, [out] LPTSTR lpTempFileName );",
            "name": "GetTempFileName"
        },
        {
            "signature": "DWORD64 GetThreadEnabledXStateFeatures();",
            "name": "GetThreadEnabledXStateFeatures"
        },
        {
            "signature": "BOOL GetThreadSelectorEntry( [in] HANDLE hThread, [in] DWORD dwSelector, [out] LPLDT_ENTRY lpSelectorEntry );",
            "name": "GetThreadSelectorEntry"
        },
        {
            "signature": "BOOL GetUmsCompletionListEvent( [in] PUMS_COMPLETION_LIST UmsCompletionList, [in, out] PHANDLE UmsCompletionEvent );",
            "name": "GetUmsCompletionListEvent"
        },
        {
            "signature": "BOOL GetUmsSystemThreadInformation( [in] HANDLE ThreadHandle, [in, out] PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo );",
            "name": "GetUmsSystemThreadInformation"
        },
        {
            "signature": "BOOL GetUserNameA( [out] LPSTR lpBuffer, [in, out] LPDWORD pcbBuffer );",
            "name": "GetUserNameA"
        },
        {
            "signature": "BOOL GetUserNameW( [out] LPWSTR lpBuffer, [in, out] LPDWORD pcbBuffer );",
            "name": "GetUserNameW"
        },
        {
            "signature": "BOOL GetVolumeNameForVolumeMountPointA( [in] LPCSTR lpszVolumeMountPoint, [out] LPSTR lpszVolumeName, [in] DWORD cchBufferLength );",
            "name": "GetVolumeNameForVolumeMountPointA"
        },
        {
            "signature": "BOOL GetVolumePathNameA( [in] LPCSTR lpszFileName, [out] LPSTR lpszVolumePathName, [in] DWORD cchBufferLength );",
            "name": "GetVolumePathNameA"
        },
        {
            "signature": "BOOL GetVolumePathNamesForVolumeNameA( [in] LPCSTR lpszVolumeName, [out] LPCH lpszVolumePathNames, [in] DWORD cchBufferLength, [out] PDWORD lpcchReturnLength );",
            "name": "GetVolumePathNamesForVolumeNameA"
        },
        {
            "signature": "BOOL GetXStateFeaturesMask( [in] PCONTEXT Context, [out] PDWORD64 FeatureMask );",
            "name": "GetXStateFeaturesMask"
        },
        {
            "signature": "ATOM GlobalAddAtomA( [in] LPCSTR lpString );",
            "name": "GlobalAddAtomA"
        },
        {
            "signature": "ATOM GlobalAddAtomExA( [in, optional] LPCSTR lpString, [in] DWORD Flags );",
            "name": "GlobalAddAtomExA"
        },
        {
            "signature": "ATOM GlobalAddAtomExW( [in, optional] LPCWSTR lpString, [in] DWORD Flags );",
            "name": "GlobalAddAtomExW"
        },
        {
            "signature": "ATOM GlobalAddAtomW( [in] LPCWSTR lpString );",
            "name": "GlobalAddAtomW"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR HGLOBAL GlobalAlloc( [in] UINT uFlags, [in] SIZE_T dwBytes );",
            "name": "GlobalAlloc"
        },
        {
            "signature": "ATOM GlobalDeleteAtom( [in] ATOM nAtom );",
            "name": "GlobalDeleteAtom"
        },
        {
            "signature": "ATOM GlobalFindAtomA( [in] LPCSTR lpString );",
            "name": "GlobalFindAtomA"
        },
        {
            "signature": "ATOM GlobalFindAtomW( [in] LPCWSTR lpString );",
            "name": "GlobalFindAtomW"
        },
        {
            "signature": "UINT GlobalFlags( [in] HGLOBAL hMem );",
            "name": "GlobalFlags"
        },
        {
            "signature": "HGLOBAL GlobalFree( [in] _Frees_ptr_opt_ HGLOBAL hMem );",
            "name": "GlobalFree"
        },
        {
            "signature": "UINT GlobalGetAtomNameA( [in] ATOM nAtom, [out] LPSTR lpBuffer, [in] int nSize );",
            "name": "GlobalGetAtomNameA"
        },
        {
            "signature": "UINT GlobalGetAtomNameW( [in] ATOM nAtom, [out] LPWSTR lpBuffer, [in] int nSize );",
            "name": "GlobalGetAtomNameW"
        },
        {
            "signature": "HGLOBAL GlobalHandle( [in] LPCVOID pMem );",
            "name": "GlobalHandle"
        },
        {
            "signature": "LPVOID GlobalLock( [in] HGLOBAL hMem );",
            "name": "GlobalLock"
        },
        {
            "signature": "void GlobalMemoryStatus( [out] LPMEMORYSTATUS lpBuffer );",
            "name": "GlobalMemoryStatus"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR HGLOBAL GlobalReAlloc( [in] _Frees_ptr_ HGLOBAL hMem, [in] SIZE_T dwBytes, [in] UINT uFlags );",
            "name": "GlobalReAlloc"
        },
        {
            "signature": "SIZE_T GlobalSize( [in] HGLOBAL hMem );",
            "name": "GlobalSize"
        },
        {
            "signature": "BOOL GlobalUnlock( [in] HGLOBAL hMem );",
            "name": "GlobalUnlock"
        },
        {
            "signature": "BOOL InitAtomTable( [in] DWORD nSize );",
            "name": "InitAtomTable"
        },
        {
            "signature": "BOOL InitializeContext( [out, optional] PVOID Buffer, [in] DWORD ContextFlags, [out, optional] PCONTEXT *Context, [in, out] PDWORD ContextLength );",
            "name": "InitializeContext"
        },
        {
            "signature": "BOOL InitializeContext2( [out, optional] PVOID Buffer, DWORD ContextFlags, [out, optional] PCONTEXT *Context, [in, out] PDWORD ContextLength, ULONG64 XStateCompactionMask );",
            "name": "InitializeContext2"
        },
        {
            "signature": "void InitializeThreadpoolEnvironment( [out] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "InitializeThreadpoolEnvironment"
        },
        {
            "signature": "unsigned InterlockedExchangeSubtract( [in, out] unsigned volatile *Addend, [in] unsigned Value );",
            "name": "InterlockedExchangeSubtract"
        },
        {
            "signature": "BOOL IsBadCodePtr( [in] FARPROC lpfn );",
            "name": "IsBadCodePtr"
        },
        {
            "signature": "BOOL IsBadReadPtr( [in] const VOID *lp, [in] UINT_PTR ucb );",
            "name": "IsBadReadPtr"
        },
        {
            "signature": "BOOL IsBadStringPtrA( [in] LPCSTR lpsz, [in] UINT_PTR ucchMax );",
            "name": "IsBadStringPtrA"
        },
        {
            "signature": "BOOL IsBadStringPtrW( [in] LPCWSTR lpsz, [in] UINT_PTR ucchMax );",
            "name": "IsBadStringPtrW"
        },
        {
            "signature": "BOOL IsBadWritePtr( [in] LPVOID lp, [in] UINT_PTR ucb );",
            "name": "IsBadWritePtr"
        },
        {
            "signature": "BOOL IsNativeVhdBoot( [out] PBOOL NativeVhdBoot );",
            "name": "IsNativeVhdBoot"
        },
        {
            "signature": "BOOL IsSystemResumeAutomatic();",
            "name": "IsSystemResumeAutomatic"
        },
        {
            "signature": "BOOL IsTextUnicode( [in] const VOID *lpv, [in] int iSize, [in, out, optional] LPINT lpiResult );",
            "name": "IsTextUnicode"
        },
        {
            "signature": "DWORD LoadModule( [in] LPCSTR lpModuleName, [in] LPVOID lpParameterBlock );",
            "name": "LoadModule"
        },
        {
            "signature": "HMODULE LoadPackagedLibrary( [in] LPCWSTR lpwLibFileName, DWORD Reserved );",
            "name": "LoadPackagedLibrary"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR HLOCAL LocalAlloc( [in] UINT uFlags, [in] SIZE_T uBytes );",
            "name": "LocalAlloc"
        },
        {
            "signature": "UINT LocalFlags( [in] HLOCAL hMem );",
            "name": "LocalFlags"
        },
        {
            "signature": "HLOCAL LocalFree( [in] _Frees_ptr_opt_ HLOCAL hMem );",
            "name": "LocalFree"
        },
        {
            "signature": "HLOCAL LocalHandle( [in] LPCVOID pMem );",
            "name": "LocalHandle"
        },
        {
            "signature": "LPVOID LocalLock( [in] HLOCAL hMem );",
            "name": "LocalLock"
        },
        {
            "signature": "DECLSPEC_ALLOCATOR HLOCAL LocalReAlloc( [in] _Frees_ptr_opt_ HLOCAL hMem, [in] SIZE_T uBytes, [in] UINT uFlags );",
            "name": "LocalReAlloc"
        },
        {
            "signature": "SIZE_T LocalSize( [in] HLOCAL hMem );",
            "name": "LocalSize"
        },
        {
            "signature": "BOOL LocalUnlock( [in] HLOCAL hMem );",
            "name": "LocalUnlock"
        },
        {
            "signature": "PVOID LocateXStateFeature( [in] PCONTEXT Context, [in] DWORD FeatureId, [out, optional] PDWORD Length );",
            "name": "LocateXStateFeature"
        },
        {
            "signature": "BOOL LogonUserA( [in] LPCSTR lpszUsername, [in, optional] LPCSTR lpszDomain, [in, optional] LPCSTR lpszPassword, [in] DWORD dwLogonType, [in] DWORD dwLogonProvider, [out] PHANDLE phToken );",
            "name": "LogonUserA"
        },
        {
            "signature": "BOOL LogonUserExA( [in] LPCSTR lpszUsername, [in, optional] LPCSTR lpszDomain, [in, optional] LPCSTR lpszPassword, [in] DWORD dwLogonType, [in] DWORD dwLogonProvider, [out, optional] PHANDLE phToken, [out, optional] PSID *ppLogonSid, [out, optional] PVOID *ppProfileBuffer, [out, optional] LPDWORD pdwProfileLength, [out, optional] PQUOTA_LIMITS pQuotaLimits );",
            "name": "LogonUserExA"
        },
        {
            "signature": "BOOL LogonUserExW( [in] LPCWSTR lpszUsername, [in, optional] LPCWSTR lpszDomain, [in, optional] LPCWSTR lpszPassword, [in] DWORD dwLogonType, [in] DWORD dwLogonProvider, [out, optional] PHANDLE phToken, [out, optional] PSID *ppLogonSid, [out, optional] PVOID *ppProfileBuffer, [out, optional] LPDWORD pdwProfileLength, [out, optional] PQUOTA_LIMITS pQuotaLimits );",
            "name": "LogonUserExW"
        },
        {
            "signature": "BOOL LogonUserW( [in] LPCWSTR lpszUsername, [in, optional] LPCWSTR lpszDomain, [in, optional] LPCWSTR lpszPassword, [in] DWORD dwLogonType, [in] DWORD dwLogonProvider, [out] PHANDLE phToken );",
            "name": "LogonUserW"
        },
        {
            "signature": "BOOL LookupAccountNameA( [in, optional] LPCSTR lpSystemName, [in] LPCSTR lpAccountName, [out, optional] PSID Sid, [in, out] LPDWORD cbSid, [out, optional] LPSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountNameA"
        },
        {
            "signature": "BOOL LookupAccountNameW( [in, optional] LPCWSTR lpSystemName, [in] LPCWSTR lpAccountName, [out, optional] PSID Sid, [in, out] LPDWORD cbSid, [out, optional] LPWSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountNameW"
        },
        {
            "signature": "BOOL LookupAccountSidA( [in, optional] LPCSTR lpSystemName, [in] PSID Sid, [out, optional] LPSTR Name, [in, out] LPDWORD cchName, [out, optional] LPSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountSidA"
        },
        {
            "signature": "BOOL LookupAccountSidLocalA( [in] PSID Sid, [out, optional] LPSTR Name, [in, out] LPDWORD cchName, [out, optional] LPSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountSidLocalA"
        },
        {
            "signature": "BOOL LookupAccountSidLocalW( [in] PSID Sid, [out, optional] LPWSTR Name, [in, out] LPDWORD cchName, [out, optional] LPWSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountSidLocalW"
        },
        {
            "signature": "BOOL LookupAccountSidW( [in, optional] LPCWSTR lpSystemName, [in] PSID Sid, [out, optional] LPWSTR Name, [in, out] LPDWORD cchName, [out, optional] LPWSTR ReferencedDomainName, [in, out] LPDWORD cchReferencedDomainName, [out] PSID_NAME_USE peUse );",
            "name": "LookupAccountSidW"
        },
        {
            "signature": "BOOL LookupPrivilegeDisplayNameA( [in, optional] LPCSTR lpSystemName, [in] LPCSTR lpName, [out, optional] LPSTR lpDisplayName, [in, out] LPDWORD cchDisplayName, [out] LPDWORD lpLanguageId );",
            "name": "LookupPrivilegeDisplayNameA"
        },
        {
            "signature": "BOOL LookupPrivilegeDisplayNameW( [in, optional] LPCWSTR lpSystemName, [in] LPCWSTR lpName, [out, optional] LPWSTR lpDisplayName, [in, out] LPDWORD cchDisplayName, [out] LPDWORD lpLanguageId );",
            "name": "LookupPrivilegeDisplayNameW"
        },
        {
            "signature": "BOOL LookupPrivilegeNameA( [in, optional] LPCSTR lpSystemName, [in] PLUID lpLuid, [out, optional] LPSTR lpName, [in, out] LPDWORD cchName );",
            "name": "LookupPrivilegeNameA"
        },
        {
            "signature": "BOOL LookupPrivilegeNameW( [in, optional] LPCWSTR lpSystemName, [in] PLUID lpLuid, [out, optional] LPWSTR lpName, [in, out] LPDWORD cchName );",
            "name": "LookupPrivilegeNameW"
        },
        {
            "signature": "BOOL LookupPrivilegeValueA( [in, optional] LPCSTR lpSystemName, [in] LPCSTR lpName, [out] PLUID lpLuid );",
            "name": "LookupPrivilegeValueA"
        },
        {
            "signature": "BOOL LookupPrivilegeValueW( [in, optional] LPCWSTR lpSystemName, [in] LPCWSTR lpName, [out] PLUID lpLuid );",
            "name": "LookupPrivilegeValueW"
        },
        {
            "signature": "LPPROGRESS_ROUTINE LpprogressRoutine; DWORD LpprogressRoutine( [in] LARGE_INTEGER TotalFileSize, [in] LARGE_INTEGER TotalBytesTransferred, [in] LARGE_INTEGER StreamSize, [in] LARGE_INTEGER StreamBytesTransferred, [in] DWORD dwStreamNumber, [in] DWORD dwCallbackReason, [in] HANDLE hSourceFile, [in] HANDLE hDestinationFile, [in, optional] LPVOID lpData ) {...}",
            "name": "LPPROGRESS_ROUTINE callback"
        },
        {
            "signature": "LPSTR lstrcatA( [in, out] LPSTR lpString1, [in] LPCSTR lpString2 );",
            "name": "lstrcatA"
        },
        {
            "signature": "LPWSTR lstrcatW( [in, out] LPWSTR lpString1, [in] LPCWSTR lpString2 );",
            "name": "lstrcatW"
        },
        {
            "signature": "int lstrcmpA( [in] LPCSTR lpString1, [in] LPCSTR lpString2 );",
            "name": "lstrcmpA"
        },
        {
            "signature": "int lstrcmpiA( [in] LPCSTR lpString1, [in] LPCSTR lpString2 );",
            "name": "lstrcmpiA"
        },
        {
            "signature": "int lstrcmpiW( [in] LPCWSTR lpString1, [in] LPCWSTR lpString2 );",
            "name": "lstrcmpiW"
        },
        {
            "signature": "int lstrcmpW( [in] LPCWSTR lpString1, [in] LPCWSTR lpString2 );",
            "name": "lstrcmpW"
        },
        {
            "signature": "LPSTR lstrcpyA( [out] LPSTR lpString1, [in] LPCSTR lpString2 );",
            "name": "lstrcpyA"
        },
        {
            "signature": "LPSTR lstrcpynA( [out] LPSTR lpString1, [in] LPCSTR lpString2, [in] int iMaxLength );",
            "name": "lstrcpynA"
        },
        {
            "signature": "LPWSTR lstrcpynW( [out] LPWSTR lpString1, [in] LPCWSTR lpString2, [in] int iMaxLength );",
            "name": "lstrcpynW"
        },
        {
            "signature": "LPWSTR lstrcpyW( [out] LPWSTR lpString1, [in] LPCWSTR lpString2 );",
            "name": "lstrcpyW"
        },
        {
            "signature": "int lstrlenA( [in] LPCSTR lpString );",
            "name": "lstrlenA"
        },
        {
            "signature": "int lstrlenW( [in] LPCWSTR lpString );",
            "name": "lstrlenW"
        },
        {
            "signature": "BOOL MapUserPhysicalPagesScatter( [in] PVOID *VirtualAddresses, [in] ULONG_PTR NumberOfPages, [in] PULONG_PTR PageArray );",
            "name": "MapUserPhysicalPagesScatter"
        },
        {
            "signature": "LPVOID MapViewOfFileExNuma( [in] HANDLE hFileMappingObject, [in] DWORD dwDesiredAccess, [in] DWORD dwFileOffsetHigh, [in] DWORD dwFileOffsetLow, [in] SIZE_T dwNumberOfBytesToMap, [in, optional] LPVOID lpBaseAddress, [in] DWORD nndPreferred );",
            "name": "MapViewOfFileExNuma"
        },
        {
            "signature": "BOOL MoveFile( [in] LPCTSTR lpExistingFileName, [in] LPCTSTR lpNewFileName );",
            "name": "MoveFile"
        },
        {
            "signature": "BOOL MoveFileA( [in] LPCSTR lpExistingFileName, [in] LPCSTR lpNewFileName );",
            "name": "MoveFileA"
        },
        {
            "signature": "BOOL MoveFileExA( [in] LPCSTR lpExistingFileName, [in, optional] LPCSTR lpNewFileName, [in] DWORD dwFlags );",
            "name": "MoveFileExA"
        },
        {
            "signature": "BOOL MoveFileExW( [in] LPCWSTR lpExistingFileName, [in, optional] LPCWSTR lpNewFileName, [in] DWORD dwFlags );",
            "name": "MoveFileExW"
        },
        {
            "signature": "BOOL MoveFileTransactedA( [in] LPCSTR lpExistingFileName, [in, optional] LPCSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in] DWORD dwFlags, [in] HANDLE hTransaction );",
            "name": "MoveFileTransactedA"
        },
        {
            "signature": "BOOL MoveFileTransactedW( [in] LPCWSTR lpExistingFileName, [in, optional] LPCWSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in] DWORD dwFlags, [in] HANDLE hTransaction );",
            "name": "MoveFileTransactedW"
        },
        {
            "signature": "BOOL MoveFileW( [in] LPCWSTR lpExistingFileName, [in] LPCWSTR lpNewFileName );",
            "name": "MoveFileW"
        },
        {
            "signature": "BOOL MoveFileWithProgressA( [in] LPCSTR lpExistingFileName, [in, optional] LPCSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in] DWORD dwFlags );",
            "name": "MoveFileWithProgressA"
        },
        {
            "signature": "BOOL MoveFileWithProgressW( [in] LPCWSTR lpExistingFileName, [in, optional] LPCWSTR lpNewFileName, [in, optional] LPPROGRESS_ROUTINE lpProgressRoutine, [in, optional] LPVOID lpData, [in] DWORD dwFlags );",
            "name": "MoveFileWithProgressW"
        },
        {
            "signature": "int MulDiv( [in] int nNumber, [in] int nNumerator, [in] int nDenominator );",
            "name": "MulDiv"
        },
        {
            "signature": "BOOL NotifyChangeEventLog( [in] HANDLE hEventLog, [in] HANDLE hEvent );",
            "name": "NotifyChangeEventLog"
        },
        {
            "signature": "BOOL ObjectCloseAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] BOOL GenerateOnClose );",
            "name": "ObjectCloseAuditAlarmA"
        },
        {
            "signature": "BOOL ObjectDeleteAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] BOOL GenerateOnClose );",
            "name": "ObjectDeleteAuditAlarmA"
        },
        {
            "signature": "BOOL ObjectOpenAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] LPSTR ObjectTypeName, [in, optional] LPSTR ObjectName, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in] DWORD GrantedAccess, [in, optional] PPRIVILEGE_SET Privileges, [in] BOOL ObjectCreation, [in] BOOL AccessGranted, [out] LPBOOL GenerateOnClose );",
            "name": "ObjectOpenAuditAlarmA"
        },
        {
            "signature": "BOOL ObjectPrivilegeAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPVOID HandleId, [in] HANDLE ClientToken, [in] DWORD DesiredAccess, [in] PPRIVILEGE_SET Privileges, [in] BOOL AccessGranted );",
            "name": "ObjectPrivilegeAuditAlarmA"
        },
        {
            "signature": "HANDLE OpenBackupEventLogA( [in] LPCSTR lpUNCServerName, [in] LPCSTR lpFileName );",
            "name": "OpenBackupEventLogA"
        },
        {
            "signature": "HANDLE OpenBackupEventLogW( [in] LPCWSTR lpUNCServerName, [in] LPCWSTR lpFileName );",
            "name": "OpenBackupEventLogW"
        },
        {
            "signature": "HANDLE OpenCommPort( [in] ULONG uPortNumber, [in] DWORD dwDesiredAccess, [in] DWORD dwFlagsAndAttributes );",
            "name": "OpenCommPort"
        },
        {
            "signature": "DWORD OpenEncryptedFileRawA( [in] LPCSTR lpFileName, [in] ULONG ulFlags, [out] PVOID *pvContext );",
            "name": "OpenEncryptedFileRawA"
        },
        {
            "signature": "DWORD OpenEncryptedFileRawW( [in] LPCWSTR lpFileName, [in] ULONG ulFlags, [out] PVOID *pvContext );",
            "name": "OpenEncryptedFileRawW"
        },
        {
            "signature": "HANDLE OpenEventLogA( [in] LPCSTR lpUNCServerName, [in] LPCSTR lpSourceName );",
            "name": "OpenEventLogA"
        },
        {
            "signature": "HANDLE OpenEventLogW( [in] LPCWSTR lpUNCServerName, [in] LPCWSTR lpSourceName );",
            "name": "OpenEventLogW"
        },
        {
            "signature": "HFILE OpenFile( [in] LPCSTR lpFileName, [out] LPOFSTRUCT lpReOpenBuff, [in] UINT uStyle );",
            "name": "OpenFile"
        },
        {
            "signature": "HANDLE OpenFileById( [in] HANDLE hVolumeHint, [in] LPFILE_ID_DESCRIPTOR lpFileId, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in, optional] LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD dwFlagsAndAttributes );",
            "name": "OpenFileById"
        },
        {
            "signature": "HANDLE OpenFileMappingA( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCSTR lpName );",
            "name": "OpenFileMappingA"
        },
        {
            "signature": "HANDLE OpenJobObjectA( [in] DWORD dwDesiredAccess, [in] BOOL bInheritHandle, [in] LPCSTR lpName );",
            "name": "OpenJobObjectA"
        },
        {
            "signature": "HANDLE OpenPrivateNamespaceA( [in] LPVOID lpBoundaryDescriptor, [in] LPCSTR lpAliasPrefix );",
            "name": "OpenPrivateNamespaceA"
        },
        {
            "signature": "BOOL OperationEnd( [in] OPERATION_END_PARAMETERS *OperationEndParams );",
            "name": "OperationEnd"
        },
        {
            "signature": "BOOL OperationStart( [in] OPERATION_START_PARAMETERS *OperationStartParams );",
            "name": "OperationStart"
        },
        {
            "signature": "PCOPYFILE2_PROGRESS_ROUTINE Pcopyfile2ProgressRoutine; COPYFILE2_MESSAGE_ACTION Pcopyfile2ProgressRoutine( [in] const COPYFILE2_MESSAGE *pMessage, [in, optional] PVOID pvCallbackContext ) {...}",
            "name": "PCOPYFILE2_PROGRESS_ROUTINE callback"
        },
        {
            "signature": "PFE_EXPORT_FUNC PfeExportFunc; DWORD PfeExportFunc( [in] PBYTE pbData, [in, optional] PVOID pvCallbackContext, [in] ULONG ulLength ) {...}",
            "name": "PFE_EXPORT_FUNC callback"
        },
        {
            "signature": "PFE_IMPORT_FUNC PfeImportFunc; DWORD PfeImportFunc( [in] PBYTE pbData, [in, optional] PVOID pvCallbackContext, [in, out] PULONG ulLength ) {...}",
            "name": "PFE_IMPORT_FUNC callback"
        },
        {
            "signature": "PFIBER_START_ROUTINE PfiberStartRoutine; void PfiberStartRoutine( LPVOID lpFiberParameter ) {...}",
            "name": "PFIBER_START_ROUTINE callback"
        },
        {
            "signature": "BOOL PowerClearRequest( [in] HANDLE PowerRequest, [in] POWER_REQUEST_TYPE RequestType );",
            "name": "PowerClearRequest"
        },
        {
            "signature": "HANDLE PowerCreateRequest( [in] PREASON_CONTEXT Context );",
            "name": "PowerCreateRequest"
        },
        {
            "signature": "BOOL PowerSetRequest( [in] HANDLE PowerRequest, [in] POWER_REQUEST_TYPE RequestType );",
            "name": "PowerSetRequest"
        },
        {
            "signature": "DWORD PrepareTape( [in] HANDLE hDevice, [in] DWORD dwOperation, [in] BOOL bImmediate );",
            "name": "PrepareTape"
        },
        {
            "signature": "BOOL PrivilegedServiceAuditAlarmA( [in] LPCSTR SubsystemName, [in] LPCSTR ServiceName, [in] HANDLE ClientToken, [in] PPRIVILEGE_SET Privileges, [in] BOOL AccessGranted );",
            "name": "PrivilegedServiceAuditAlarmA"
        },
        {
            "signature": "BOOL PulseEvent( [in] HANDLE hEvent );",
            "name": "PulseEvent"
        },
        {
            "signature": "BOOL PurgeComm( [in] HANDLE hFile, [in] DWORD dwFlags );",
            "name": "PurgeComm"
        },
        {
            "signature": "BOOL QueryActCtxSettingsW( [in, optional] DWORD dwFlags, [in, optional] HANDLE hActCtx, [in, optional] PCWSTR settingsNameSpace, [in] PCWSTR settingName, [out] PWSTR pvBuffer, [in] SIZE_T dwBuffer, [out, optional] SIZE_T *pdwWrittenOrRequired );",
            "name": "QueryActCtxSettingsW"
        },
        {
            "signature": "BOOL QueryActCtxW( [in] DWORD dwFlags, [in] HANDLE hActCtx, [in, optional] PVOID pvSubInstance, [in] ULONG ulInfoClass, [out] PVOID pvBuffer, [in, optional] SIZE_T cbBuffer, [out, optional] SIZE_T *pcbWrittenOrRequired );",
            "name": "QueryActCtxW"
        },
        {
            "signature": "DWORD QueryDosDeviceA( [in, optional] LPCSTR lpDeviceName, [out] LPSTR lpTargetPath, [in] DWORD ucchMax );",
            "name": "QueryDosDeviceA"
        },
        {
            "signature": "BOOL QueryFullProcessImageNameA( [in] HANDLE hProcess, [in] DWORD dwFlags, [out] LPSTR lpExeName, [in, out] PDWORD lpdwSize );",
            "name": "QueryFullProcessImageNameA"
        },
        {
            "signature": "BOOL QueryFullProcessImageNameW( [in] HANDLE hProcess, [in] DWORD dwFlags, [out] LPWSTR lpExeName, [in, out] PDWORD lpdwSize );",
            "name": "QueryFullProcessImageNameW"
        },
        {
            "signature": "DWORD QueryThreadProfiling( [in] HANDLE ThreadHandle, [out] PBOOLEAN Enabled );",
            "name": "QueryThreadProfiling"
        },
        {
            "signature": "BOOL QueryUmsThreadInformation( [in] PUMS_CONTEXT UmsThread, [in] UMS_THREAD_INFO_CLASS UmsThreadInfoClass, [out] PVOID UmsThreadInformation, [in] ULONG UmsThreadInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "QueryUmsThreadInformation"
        },
        {
            "signature": "BOOL ReadDirectoryChangesExW( [in] HANDLE hDirectory, [out] LPVOID lpBuffer, [in] DWORD nBufferLength, [in] BOOL bWatchSubtree, [in] DWORD dwNotifyFilter, [out, optional] LPDWORD lpBytesReturned, [in, out, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, [in] READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass );",
            "name": "ReadDirectoryChangesExW"
        },
        {
            "signature": "BOOL ReadDirectoryChangesW( [in] HANDLE hDirectory, [out] LPVOID lpBuffer, [in] DWORD nBufferLength, [in] BOOL bWatchSubtree, [in] DWORD dwNotifyFilter, [out, optional] LPDWORD lpBytesReturned, [in, out, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "ReadDirectoryChangesW"
        },
        {
            "signature": "DWORD ReadEncryptedFileRaw( [in] PFE_EXPORT_FUNC pfExportCallback, [in, optional] PVOID pvCallbackContext, [in] PVOID pvContext );",
            "name": "ReadEncryptedFileRaw"
        },
        {
            "signature": "BOOL ReadEventLogA( [in] HANDLE hEventLog, [in] DWORD dwReadFlags, [in] DWORD dwRecordOffset, [out] LPVOID lpBuffer, [in] DWORD nNumberOfBytesToRead, [out] DWORD *pnBytesRead, [out] DWORD *pnMinNumberOfBytesNeeded );",
            "name": "ReadEventLogA"
        },
        {
            "signature": "BOOL ReadEventLogW( [in] HANDLE hEventLog, [in] DWORD dwReadFlags, [in] DWORD dwRecordOffset, [out] LPVOID lpBuffer, [in] DWORD nNumberOfBytesToRead, [out] DWORD *pnBytesRead, [out] DWORD *pnMinNumberOfBytesNeeded );",
            "name": "ReadEventLogW"
        },
        {
            "signature": "DWORD ReadThreadProfilingData( [in] HANDLE PerformanceDataHandle, [in] DWORD Flags, [out] PPERFORMANCE_DATA PerformanceData );",
            "name": "ReadThreadProfilingData"
        },
        {
            "signature": "HRESULT RegisterApplicationRecoveryCallback( [in] APPLICATION_RECOVERY_CALLBACK pRecoveyCallback, [in, optional] PVOID pvParameter, [in] DWORD dwPingInterval, [in] DWORD dwFlags );",
            "name": "RegisterApplicationRecoveryCallback"
        },
        {
            "signature": "HRESULT RegisterApplicationRestart( [in, optional] PCWSTR pwzCommandline, [in] DWORD dwFlags );",
            "name": "RegisterApplicationRestart"
        },
        {
            "signature": "HANDLE RegisterEventSourceA( [in] LPCSTR lpUNCServerName, [in] LPCSTR lpSourceName );",
            "name": "RegisterEventSourceA"
        },
        {
            "signature": "HANDLE RegisterEventSourceW( [in] LPCWSTR lpUNCServerName, [in] LPCWSTR lpSourceName );",
            "name": "RegisterEventSourceW"
        },
        {
            "signature": "BOOL RegisterWaitForSingleObject( [out] PHANDLE phNewWaitObject, [in] HANDLE hObject, [in] WAITORTIMERCALLBACK Callback, [in, optional] PVOID Context, [in] ULONG dwMilliseconds, [in] ULONG dwFlags );",
            "name": "RegisterWaitForSingleObject"
        },
        {
            "signature": "void ReleaseActCtx( [in] HANDLE hActCtx );",
            "name": "ReleaseActCtx"
        },
        {
            "signature": "BOOL RemoveDirectoryTransactedA( [in] LPCSTR lpPathName, [in] HANDLE hTransaction );",
            "name": "RemoveDirectoryTransactedA"
        },
        {
            "signature": "BOOL RemoveDirectoryTransactedW( [in] LPCWSTR lpPathName, [in] HANDLE hTransaction );",
            "name": "RemoveDirectoryTransactedW"
        },
        {
            "signature": "BOOL RemoveSecureMemoryCacheCallback( [in] PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack );",
            "name": "RemoveSecureMemoryCacheCallback"
        },
        {
            "signature": "HANDLE ReOpenFile( [in] HANDLE hOriginalFile, [in] DWORD dwDesiredAccess, [in] DWORD dwShareMode, [in] DWORD dwFlagsAndAttributes );",
            "name": "ReOpenFile"
        },
        {
            "signature": "BOOL ReplaceFileA( [in] LPCSTR lpReplacedFileName, [in] LPCSTR lpReplacementFileName, [in, optional] LPCSTR lpBackupFileName, [in] DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved );",
            "name": "ReplaceFileA"
        },
        {
            "signature": "BOOL ReplaceFileW( [in] LPCWSTR lpReplacedFileName, [in] LPCWSTR lpReplacementFileName, [in, optional] LPCWSTR lpBackupFileName, [in] DWORD dwReplaceFlags, LPVOID lpExclude, LPVOID lpReserved );",
            "name": "ReplaceFileW"
        },
        {
            "signature": "BOOL ReportEventA( [in] HANDLE hEventLog, [in] WORD wType, [in] WORD wCategory, [in] DWORD dwEventID, [in] PSID lpUserSid, [in] WORD wNumStrings, [in] DWORD dwDataSize, [in] LPCSTR *lpStrings, [in] LPVOID lpRawData );",
            "name": "ReportEventA"
        },
        {
            "signature": "BOOL ReportEventW( [in] HANDLE hEventLog, [in] WORD wType, [in] WORD wCategory, [in] DWORD dwEventID, [in] PSID lpUserSid, [in] WORD wNumStrings, [in] DWORD dwDataSize, [in] LPCWSTR *lpStrings, [in] LPVOID lpRawData );",
            "name": "ReportEventW"
        },
        {
            "signature": "BOOL RequestWakeupLatency( [in] LATENCY_TIME latency );",
            "name": "RequestWakeupLatency"
        },
        {
            "signature": "BOOL SetCommBreak( [in] HANDLE hFile );",
            "name": "SetCommBreak"
        },
        {
            "signature": "BOOL SetCommConfig( [in] HANDLE hCommDev, [in] LPCOMMCONFIG lpCC, [in] DWORD dwSize );",
            "name": "SetCommConfig"
        },
        {
            "signature": "BOOL SetCommMask( [in] HANDLE hFile, [in] DWORD dwEvtMask );",
            "name": "SetCommMask"
        },
        {
            "signature": "BOOL SetCommState( [in] HANDLE hFile, [in] LPDCB lpDCB );",
            "name": "SetCommState"
        },
        {
            "signature": "BOOL SetCommTimeouts( [in] HANDLE hFile, [in] LPCOMMTIMEOUTS lpCommTimeouts );",
            "name": "SetCommTimeouts"
        },
        {
            "signature": "BOOL SetCurrentDirectory( [in] LPCTSTR lpPathName );",
            "name": "SetCurrentDirectory"
        },
        {
            "signature": "BOOL SetDefaultCommConfigA( [in] LPCSTR lpszName, [in] LPCOMMCONFIG lpCC, [in] DWORD dwSize );",
            "name": "SetDefaultCommConfigA"
        },
        {
            "signature": "BOOL SetDefaultCommConfigW( [in] LPCWSTR lpszName, [in] LPCOMMCONFIG lpCC, [in] DWORD dwSize );",
            "name": "SetDefaultCommConfigW"
        },
        {
            "signature": "BOOL SetDllDirectoryA( [in, optional] LPCSTR lpPathName );",
            "name": "SetDllDirectoryA"
        },
        {
            "signature": "BOOL SetDllDirectoryW( [in, optional] LPCWSTR lpPathName );",
            "name": "SetDllDirectoryW"
        },
        {
            "signature": "BOOL SetEnvironmentVariable( [in] LPCTSTR lpName, [in, optional] LPCTSTR lpValue );",
            "name": "SetEnvironmentVariable"
        },
        {
            "signature": "BOOL SetFileAttributesTransactedA( [in] LPCSTR lpFileName, [in] DWORD dwFileAttributes, [in] HANDLE hTransaction );",
            "name": "SetFileAttributesTransactedA"
        },
        {
            "signature": "BOOL SetFileAttributesTransactedW( [in] LPCWSTR lpFileName, [in] DWORD dwFileAttributes, [in] HANDLE hTransaction );",
            "name": "SetFileAttributesTransactedW"
        },
        {
            "signature": "BOOL SetFileBandwidthReservation( [in] HANDLE hFile, [in] DWORD nPeriodMilliseconds, [in] DWORD nBytesPerPeriod, [in] BOOL bDiscardable, [out] LPDWORD lpTransferSize, [out] LPDWORD lpNumOutstandingRequests );",
            "name": "SetFileBandwidthReservation"
        },
        {
            "signature": "BOOL SetFileCompletionNotificationModes( [in] HANDLE FileHandle, [in] UCHAR Flags );",
            "name": "SetFileCompletionNotificationModes"
        },
        {
            "signature": "BOOL SetFileSecurityA( [in] LPCSTR lpFileName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "SetFileSecurityA"
        },
        {
            "signature": "BOOL SetFileShortNameA( [in] HANDLE hFile, [in] LPCSTR lpShortName );",
            "name": "SetFileShortNameA"
        },
        {
            "signature": "BOOL SetFileShortNameW( [in] HANDLE hFile, [in] LPCWSTR lpShortName );",
            "name": "SetFileShortNameW"
        },
        {
            "signature": "BOOL SetFirmwareEnvironmentVariableA( [in] LPCSTR lpName, [in] LPCSTR lpGuid, [in] PVOID pValue, [in] DWORD nSize );",
            "name": "SetFirmwareEnvironmentVariableA"
        },
        {
            "signature": "BOOL SetFirmwareEnvironmentVariableExA( [in] LPCSTR lpName, [in] LPCSTR lpGuid, [in] PVOID pValue, [in] DWORD nSize, [in] DWORD dwAttributes );",
            "name": "SetFirmwareEnvironmentVariableExA"
        },
        {
            "signature": "BOOL SetFirmwareEnvironmentVariableExW( [in] LPCWSTR lpName, [in] LPCWSTR lpGuid, [in] PVOID pValue, [in] DWORD nSize, [in] DWORD dwAttributes );",
            "name": "SetFirmwareEnvironmentVariableExW"
        },
        {
            "signature": "BOOL SetFirmwareEnvironmentVariableW( [in] LPCWSTR lpName, [in] LPCWSTR lpGuid, [in] PVOID pValue, [in] DWORD nSize );",
            "name": "SetFirmwareEnvironmentVariableW"
        },
        {
            "signature": "UINT SetHandleCount( UINT uNumber );",
            "name": "SetHandleCount"
        },
        {
            "signature": "BOOL SetMailslotInfo( [in] HANDLE hMailslot, [in] DWORD lReadTimeout );",
            "name": "SetMailslotInfo"
        },
        {
            "signature": "BOOL SetProcessAffinityMask( [in] HANDLE hProcess, [in] DWORD_PTR dwProcessAffinityMask );",
            "name": "SetProcessAffinityMask"
        },
        {
            "signature": "BOOL SetProcessDEPPolicy( [in] DWORD dwFlags );",
            "name": "SetProcessDEPPolicy"
        },
        {
            "signature": "BOOL SetSearchPathMode( [in] DWORD Flags );",
            "name": "SetSearchPathMode"
        },
        {
            "signature": "BOOL SetSystemPowerState( [in] BOOL fSuspend, [in] BOOL fForce );",
            "name": "SetSystemPowerState"
        },
        {
            "signature": "DWORD SetTapeParameters( [in] HANDLE hDevice, [in] DWORD dwOperation, [in] LPVOID lpTapeInformation );",
            "name": "SetTapeParameters"
        },
        {
            "signature": "DWORD SetTapePosition( [in] HANDLE hDevice, [in] DWORD dwPositionMethod, [in] DWORD dwPartition, [in] DWORD dwOffsetLow, [in] DWORD dwOffsetHigh, [in] BOOL bImmediate );",
            "name": "SetTapePosition"
        },
        {
            "signature": "DWORD_PTR SetThreadAffinityMask( [in] HANDLE hThread, [in] DWORD_PTR dwThreadAffinityMask );",
            "name": "SetThreadAffinityMask"
        },
        {
            "signature": "EXECUTION_STATE SetThreadExecutionState( [in] EXECUTION_STATE esFlags );",
            "name": "SetThreadExecutionState"
        },
        {
            "signature": "void SetThreadpoolCallbackCleanupGroup( [in, out] PTP_CALLBACK_ENVIRON pcbe, [in] PTP_CLEANUP_GROUP ptpcg, [in, optional] PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng );",
            "name": "SetThreadpoolCallbackCleanupGroup"
        },
        {
            "signature": "void SetThreadpoolCallbackLibrary( [in, out] PTP_CALLBACK_ENVIRON pcbe, [in] PVOID mod );",
            "name": "SetThreadpoolCallbackLibrary"
        },
        {
            "signature": "void SetThreadpoolCallbackPersistent( [in, out] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "SetThreadpoolCallbackPersistent"
        },
        {
            "signature": "void SetThreadpoolCallbackPool( [in, out] PTP_CALLBACK_ENVIRON pcbe, [in] PTP_POOL ptpp );",
            "name": "SetThreadpoolCallbackPool"
        },
        {
            "signature": "void SetThreadpoolCallbackPriority( [in, out] PTP_CALLBACK_ENVIRON pcbe, [in] TP_CALLBACK_PRIORITY Priority );",
            "name": "SetThreadpoolCallbackPriority"
        },
        {
            "signature": "void SetThreadpoolCallbackRunsLong( [in, out] PTP_CALLBACK_ENVIRON pcbe );",
            "name": "SetThreadpoolCallbackRunsLong"
        },
        {
            "signature": "BOOL SetUmsThreadInformation( [in] PUMS_CONTEXT UmsThread, [in] UMS_THREAD_INFO_CLASS UmsThreadInfoClass, [in] PVOID UmsThreadInformation, [in] ULONG UmsThreadInformationLength );",
            "name": "SetUmsThreadInformation"
        },
        {
            "signature": "BOOL SetupComm( [in] HANDLE hFile, [in] DWORD dwInQueue, [in] DWORD dwOutQueue );",
            "name": "SetupComm"
        },
        {
            "signature": "BOOL SetVolumeLabelA( [in, optional] LPCSTR lpRootPathName, [in, optional] LPCSTR lpVolumeName );",
            "name": "SetVolumeLabelA"
        },
        {
            "signature": "BOOL SetVolumeLabelW( [in, optional] LPCWSTR lpRootPathName, [in, optional] LPCWSTR lpVolumeName );",
            "name": "SetVolumeLabelW"
        },
        {
            "signature": "BOOL SetVolumeMountPointA( [in] LPCSTR lpszVolumeMountPoint, [in] LPCSTR lpszVolumeName );",
            "name": "SetVolumeMountPointA"
        },
        {
            "signature": "BOOL SetVolumeMountPointW( [in] LPCWSTR lpszVolumeMountPoint, [in] LPCWSTR lpszVolumeName );",
            "name": "SetVolumeMountPointW"
        },
        {
            "signature": "BOOL SetXStateFeaturesMask( [in, out] PCONTEXT Context, [in] DWORD64 FeatureMask );",
            "name": "SetXStateFeaturesMask"
        },
        {
            "signature": "void SwitchToFiber( [in] LPVOID lpFiber );",
            "name": "SwitchToFiber"
        },
        {
            "signature": "BOOL TransmitCommChar( [in] HANDLE hFile, [in] char cChar );",
            "name": "TransmitCommChar"
        },
        {
            "signature": "BOOL UmsThreadYield( [in] PVOID SchedulerParam );",
            "name": "UmsThreadYield"
        },
        {
            "signature": "HRESULT UnregisterApplicationRecoveryCallback();",
            "name": "UnregisterApplicationRecoveryCallback"
        },
        {
            "signature": "HRESULT UnregisterApplicationRestart();",
            "name": "UnregisterApplicationRestart"
        },
        {
            "signature": "BOOL UnregisterWait( [in] HANDLE WaitHandle );",
            "name": "UnregisterWait"
        },
        {
            "signature": "BOOL UpdateResourceA( [in] HANDLE hUpdate, [in] LPCSTR lpType, [in] LPCSTR lpName, [in] WORD wLanguage, [in, optional] LPVOID lpData, [in] DWORD cb );",
            "name": "UpdateResourceA"
        },
        {
            "signature": "BOOL UpdateResourceW( [in] HANDLE hUpdate, [in] LPCWSTR lpType, [in] LPCWSTR lpName, [in] WORD wLanguage, [in, optional] LPVOID lpData, [in] DWORD cb );",
            "name": "UpdateResourceW"
        },
        {
            "signature": "BOOL VerifyVersionInfoA( [in] LPOSVERSIONINFOEXA lpVersionInformation, [in] DWORD dwTypeMask, [in] DWORDLONG dwlConditionMask );",
            "name": "VerifyVersionInfoA"
        },
        {
            "signature": "BOOL VerifyVersionInfoW( [in] LPOSVERSIONINFOEXW lpVersionInformation, [in] DWORD dwTypeMask, [in] DWORDLONG dwlConditionMask );",
            "name": "VerifyVersionInfoW"
        },
        {
            "signature": "BOOL WaitCommEvent( [in] HANDLE hFile, [out] LPDWORD lpEvtMask, [in] LPOVERLAPPED lpOverlapped );",
            "name": "WaitCommEvent"
        },
        {
            "signature": "BOOL WaitNamedPipeA( [in] LPCSTR lpNamedPipeName, [in] DWORD nTimeOut );",
            "name": "WaitNamedPipeA"
        },
        {
            "signature": "UINT WinExec( [in] LPCSTR lpCmdLine, [in] UINT uCmdShow );",
            "name": "WinExec"
        },
        {
            "signature": "int __clrcall WinMain( [in] HINSTANCE hInstance, [in] HINSTANCE hPrevInstance, [in] LPSTR lpCmdLine, [in] int nShowCmd );",
            "name": "WinMain"
        },
        {
            "signature": "BOOL Wow64GetThreadSelectorEntry( [in] HANDLE hThread, [in] DWORD dwSelector, [out] PWOW64_LDT_ENTRY lpSelectorEntry );",
            "name": "Wow64GetThreadSelectorEntry"
        },
        {
            "signature": "DWORD WriteEncryptedFileRaw( [in] PFE_IMPORT_FUNC pfImportCallback, [in, optional] PVOID pvCallbackContext, [in] PVOID pvContext );",
            "name": "WriteEncryptedFileRaw"
        },
        {
            "signature": "BOOL WritePrivateProfileSectionA( [in] LPCSTR lpAppName, [in] LPCSTR lpString, [in] LPCSTR lpFileName );",
            "name": "WritePrivateProfileSectionA"
        },
        {
            "signature": "BOOL WritePrivateProfileSectionW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpString, [in] LPCWSTR lpFileName );",
            "name": "WritePrivateProfileSectionW"
        },
        {
            "signature": "BOOL WritePrivateProfileStringA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] LPCSTR lpString, [in] LPCSTR lpFileName );",
            "name": "WritePrivateProfileStringA"
        },
        {
            "signature": "BOOL WritePrivateProfileStringW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] LPCWSTR lpString, [in] LPCWSTR lpFileName );",
            "name": "WritePrivateProfileStringW"
        },
        {
            "signature": "BOOL WritePrivateProfileStructA( [in] LPCSTR lpszSection, [in] LPCSTR lpszKey, [in] LPVOID lpStruct, [in] UINT uSizeStruct, [in] LPCSTR szFile );",
            "name": "WritePrivateProfileStructA"
        },
        {
            "signature": "BOOL WritePrivateProfileStructW( [in] LPCWSTR lpszSection, [in] LPCWSTR lpszKey, [in] LPVOID lpStruct, [in] UINT uSizeStruct, [in] LPCWSTR szFile );",
            "name": "WritePrivateProfileStructW"
        },
        {
            "signature": "BOOL WriteProfileSectionA( [in] LPCSTR lpAppName, [in] LPCSTR lpString );",
            "name": "WriteProfileSectionA"
        },
        {
            "signature": "BOOL WriteProfileSectionW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpString );",
            "name": "WriteProfileSectionW"
        },
        {
            "signature": "BOOL WriteProfileStringA( [in] LPCSTR lpAppName, [in] LPCSTR lpKeyName, [in] LPCSTR lpString );",
            "name": "WriteProfileStringA"
        },
        {
            "signature": "BOOL WriteProfileStringW( [in] LPCWSTR lpAppName, [in] LPCWSTR lpKeyName, [in] LPCWSTR lpString );",
            "name": "WriteProfileStringW"
        },
        {
            "signature": "DWORD WriteTapemark( [in] HANDLE hDevice, [in] DWORD dwTapemarkType, [in] DWORD dwTapemarkCount, [in] BOOL bImmediate );",
            "name": "WriteTapemark"
        },
        {
            "signature": "DWORD WTSGetActiveConsoleSessionId();",
            "name": "WTSGetActiveConsoleSessionId"
        },
        {
            "signature": "BOOL ZombifyActCtx( [in] HANDLE hActCtx );",
            "name": "ZombifyActCtx"
        }
    ],
    "Winber.h": [
        {
            "signature": "WINBERAPI BerElement *BERAPI ber_alloc_t( [in] INT options );",
            "name": "ber_alloc_t"
        },
        {
            "signature": "WINBERAPI BERVAL *BERAPI ber_bvdup( [in] BERVAL *pBerVal );",
            "name": "ber_bvdup"
        },
        {
            "signature": "WINBERAPI VOID BERAPI ber_bvecfree( [in] PBERVAL *pBerVal );",
            "name": "ber_bvecfree"
        },
        {
            "signature": "WINBERAPI VOID BERAPI ber_bvfree( [in] BERVAL *pBerVal );",
            "name": "ber_bvfree"
        },
        {
            "signature": "WINBERAPI ULONG BERAPI ber_first_element( [in] BerElement *pBerElement, [out] ULONG *pLen, [out] CHAR **ppOpaque );",
            "name": "ber_first_element"
        },
        {
            "signature": "WINBERAPI INT BERAPI ber_flatten( [in] BerElement *pBerElement, [out] PBERVAL *pBerVal );",
            "name": "ber_flatten"
        },
        {
            "signature": "WINBERAPI VOID BERAPI ber_free( [in] BerElement *pBerElement, [in] INT fbuf );",
            "name": "ber_free"
        },
        {
            "signature": "WINBERAPI BerElement *BERAPI ber_init( [in] BERVAL *pBerVal );",
            "name": "ber_init"
        },
        {
            "signature": "WINBERAPI ULONG BERAPI ber_next_element( [in] BerElement *pBerElement, [in, out] ULONG *pLen, [in, out] CHAR *opaque );",
            "name": "ber_next_element"
        },
        {
            "signature": "WINBERAPI ULONG BERAPI ber_peek_tag( [in] BerElement *pBerElement, [out] ULONG *pLen );",
            "name": "ber_peek_tag"
        },
        {
            "signature": "WINBERAPI INT BERAPI ber_printf( [in, out] BerElement *pBerElement, [in] PSTR fmt, ... );",
            "name": "ber_printf"
        },
        {
            "signature": "WINBERAPI ULONG BERAPI ber_scanf( [in, out] BerElement *pBerElement, [in] PSTR fmt, ... );",
            "name": "ber_scanf"
        },
        {
            "signature": "WINBERAPI ULONG BERAPI ber_skip_tag( [in] BerElement *pBerElement, [out] ULONG *pLen );",
            "name": "ber_skip_tag"
        }
    ],
    "Winbio.h": [
        {
            "signature": "PWINBIO_ASYNC_COMPLETION_CALLBACK PwinbioAsyncCompletionCallback; void PwinbioAsyncCompletionCallback( [in] PWINBIO_ASYNC_RESULT AsyncResult ) {...}",
            "name": "PWINBIO_ASYNC_COMPLETION_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_CAPTURE_CALLBACK PwinbioCaptureCallback; void PwinbioCaptureCallback( [in, optional] PVOID CaptureCallbackContext, [in] HRESULT OperationStatus, [in] WINBIO_UNIT_ID UnitId, [in] PWINBIO_BIR Sample, [in] SIZE_T SampleSize, [in] WINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PWINBIO_CAPTURE_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_ENROLL_CAPTURE_CALLBACK PwinbioEnrollCaptureCallback; void PwinbioEnrollCaptureCallback( [in, optional] PVOID EnrollCallbackContext, [in] HRESULT OperationStatus, [in] WINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PWINBIO_ENROLL_CAPTURE_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_EVENT_CALLBACK PwinbioEventCallback; void PwinbioEventCallback( [in, optional] PVOID EventCallbackContext, [in] HRESULT OperationStatus, [in] PWINBIO_EVENT Event ) {...}",
            "name": "PWINBIO_EVENT_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_IDENTIFY_CALLBACK PwinbioIdentifyCallback; void PwinbioIdentifyCallback( [in, optional] PVOID IdentifyCallbackContext, [in] HRESULT OperationStatus, [in] WINBIO_UNIT_ID UnitId, [in] WINBIO_IDENTITY *Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [in] WINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PWINBIO_IDENTIFY_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_LOCATE_SENSOR_CALLBACK PwinbioLocateSensorCallback; void PwinbioLocateSensorCallback( [in, optional] PVOID LocateCallbackContext, [in] HRESULT OperationStatus, WINBIO_UNIT_ID UnitId ) {...}",
            "name": "PWINBIO_LOCATE_SENSOR_CALLBACK callback"
        },
        {
            "signature": "PWINBIO_VERIFY_CALLBACK PwinbioVerifyCallback; void PwinbioVerifyCallback( [in, optional] PVOID VerifyCallbackContext, [in] HRESULT OperationStatus, [in] WINBIO_UNIT_ID UnitId, [in] BOOLEAN Match, [in] WINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PWINBIO_VERIFY_CALLBACK callback"
        },
        {
            "signature": "HRESULT WinBioAcquireFocus();",
            "name": "WinBioAcquireFocus"
        },
        {
            "signature": "HRESULT WinBioAsyncEnumBiometricUnits( [in] WINBIO_FRAMEWORK_HANDLE FrameworkHandle, [in] WINBIO_BIOMETRIC_TYPE Factor );",
            "name": "WinBioAsyncEnumBiometricUnits"
        },
        {
            "signature": "HRESULT WinBioAsyncEnumDatabases( [in] WINBIO_FRAMEWORK_HANDLE FrameworkHandle, [in] WINBIO_BIOMETRIC_TYPE Factor );",
            "name": "WinBioAsyncEnumDatabases"
        },
        {
            "signature": "HRESULT WinBioAsyncEnumServiceProviders( [in] WINBIO_FRAMEWORK_HANDLE FrameworkHandle, [in] WINBIO_BIOMETRIC_TYPE Factor );",
            "name": "WinBioAsyncEnumServiceProviders"
        },
        {
            "signature": "HRESULT WinBioAsyncMonitorFrameworkChanges( [in] WINBIO_FRAMEWORK_HANDLE FrameworkHandle, [in] WINBIO_FRAMEWORK_CHANGE_TYPE ChangeTypes );",
            "name": "WinBioAsyncMonitorFrameworkChanges"
        },
        {
            "signature": "HRESULT WinBioAsyncOpenFramework( [in] WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, [in, optional] HWND TargetWindow, [in, optional] UINT MessageCode, [in, optional] PWINBIO_ASYNC_COMPLETION_CALLBACK CallbackRoutine, [in, optional] PVOID UserData, [in] BOOL AsynchronousOpen, [out] WINBIO_FRAMEWORK_HANDLE *FrameworkHandle );",
            "name": "WinBioAsyncOpenFramework"
        },
        {
            "signature": "HRESULT WinBioAsyncOpenSession( [in] WINBIO_BIOMETRIC_TYPE Factor, [in] WINBIO_POOL_TYPE PoolType, [in] WINBIO_SESSION_FLAGS Flags, [in, optional] WINBIO_UNIT_ID *UnitArray, [in, optional] SIZE_T UnitCount, [in, optional] GUID *DatabaseId, [in] WINBIO_ASYNC_NOTIFICATION_METHOD NotificationMethod, [in, optional] HWND TargetWindow, [in, optional] UINT MessageCode, [in, optional] PWINBIO_ASYNC_COMPLETION_CALLBACK CallbackRoutine, [in, optional] PVOID UserData, [in] BOOL AsynchronousOpen, [out, optional] WINBIO_SESSION_HANDLE *SessionHandle );",
            "name": "WinBioAsyncOpenSession"
        },
        {
            "signature": "HRESULT WinBioCancel( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioCancel"
        },
        {
            "signature": "HRESULT WinBioCaptureSample( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_BIR_PURPOSE Purpose, [in] WINBIO_BIR_DATA_FLAGS Flags, [out, optional] WINBIO_UNIT_ID *UnitId, PWINBIO_BIR *Sample, [out, optional] SIZE_T *SampleSize, [out, optional] WINBIO_REJECT_DETAIL *RejectDetail );",
            "name": "WinBioCaptureSample"
        },
        {
            "signature": "HRESULT WinBioCaptureSampleWithCallback( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_BIR_PURPOSE Purpose, [in] WINBIO_BIR_DATA_FLAGS Flags, [in] PWINBIO_CAPTURE_CALLBACK CaptureCallback, [in, optional] PVOID CaptureCallbackContext );",
            "name": "WinBioCaptureSampleWithCallback"
        },
        {
            "signature": "HRESULT WinBioCloseFramework( [in] WINBIO_FRAMEWORK_HANDLE FrameworkHandle );",
            "name": "WinBioCloseFramework"
        },
        {
            "signature": "HRESULT WinBioCloseSession( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioCloseSession"
        },
        {
            "signature": "HRESULT WinBioControlUnit( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId, [in] WINBIO_COMPONENT Component, [in] ULONG ControlCode, PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, SIZE_T *ReceiveDataSize, [out, optional] ULONG *OperationStatus );",
            "name": "WinBioControlUnit"
        },
        {
            "signature": "HRESULT WinBioControlUnitPrivileged( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId, [in] WINBIO_COMPONENT Component, [in] ULONG ControlCode, PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, SIZE_T *ReceiveDataSize, [out, optional] ULONG *OperationStatus );",
            "name": "WinBioControlUnitPrivileged"
        },
        {
            "signature": "HRESULT WinBioDeleteTemplate( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId, [in] WINBIO_IDENTITY *Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor );",
            "name": "WinBioDeleteTemplate"
        },
        {
            "signature": "HRESULT WinBioEnrollBegin( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [in] WINBIO_UNIT_ID UnitId );",
            "name": "WinBioEnrollBegin"
        },
        {
            "signature": "HRESULT WinBioEnrollCapture( [in] WINBIO_SESSION_HANDLE SessionHandle, [out, optional] WINBIO_REJECT_DETAIL *RejectDetail );",
            "name": "WinBioEnrollCapture"
        },
        {
            "signature": "HRESULT WinBioEnrollCaptureWithCallback( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] PWINBIO_ENROLL_CAPTURE_CALLBACK EnrollCallback, [in, optional] PVOID EnrollCallbackContext );",
            "name": "WinBioEnrollCaptureWithCallback"
        },
        {
            "signature": "HRESULT WinBioEnrollCommit( [in] WINBIO_SESSION_HANDLE SessionHandle, [out, optional] WINBIO_IDENTITY *Identity, [out, optional] BOOLEAN *IsNewTemplate );",
            "name": "WinBioEnrollCommit"
        },
        {
            "signature": "HRESULT WinBioEnrollDiscard( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioEnrollDiscard"
        },
        {
            "signature": "HRESULT WinBioEnrollSelect( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] ULONGLONG SelectorValue );",
            "name": "WinBioEnrollSelect"
        },
        {
            "signature": "HRESULT WinBioEnumBiometricUnits( [in] WINBIO_BIOMETRIC_TYPE Factor, [out] WINBIO_UNIT_SCHEMA **UnitSchemaArray, [out] SIZE_T *UnitCount );",
            "name": "WinBioEnumBiometricUnits"
        },
        {
            "signature": "HRESULT WinBioEnumDatabases( [in] WINBIO_BIOMETRIC_TYPE Factor, [out] WINBIO_STORAGE_SCHEMA **StorageSchemaArray, [out] SIZE_T *StorageCount );",
            "name": "WinBioEnumDatabases"
        },
        {
            "signature": "HRESULT WinBioEnumEnrollments( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId, [in] WINBIO_IDENTITY *Identity, WINBIO_BIOMETRIC_SUBTYPE **SubFactorArray, [out, optional] SIZE_T *SubFactorCount );",
            "name": "WinBioEnumEnrollments"
        },
        {
            "signature": "HRESULT WinBioEnumServiceProviders( [in] WINBIO_BIOMETRIC_TYPE Factor, [out] WINBIO_BSP_SCHEMA **BspSchemaArray, [out] SIZE_T *BspCount );",
            "name": "WinBioEnumServiceProviders"
        },
        {
            "signature": "HRESULT WinBioFree( [in] PVOID Address );",
            "name": "WinBioFree"
        },
        {
            "signature": "HRESULT WinBioGetCredentialState( [in] WINBIO_IDENTITY Identity, [in] WINBIO_CREDENTIAL_TYPE Type, [out] WINBIO_CREDENTIAL_STATE *CredentialState );",
            "name": "WinBioGetCredentialState"
        },
        {
            "signature": "void WinBioGetDomainLogonSetting( [out] BOOLEAN *Value, [out] PWINBIO_SETTING_SOURCE_TYPE Source );",
            "name": "WinBioGetDomainLogonSetting"
        },
        {
            "signature": "void WinBioGetEnabledSetting( [out] BOOLEAN *Value, [out] PWINBIO_SETTING_SOURCE_TYPE Source );",
            "name": "WinBioGetEnabledSetting"
        },
        {
            "signature": "HRESULT WinBioGetEnrolledFactors( [in] WINBIO_IDENTITY *AccountOwner, [out] WINBIO_BIOMETRIC_TYPE *EnrolledFactors );",
            "name": "WinBioGetEnrolledFactors"
        },
        {
            "signature": "void WinBioGetLogonSetting( [out] BOOLEAN *Value, [out] PWINBIO_SETTING_SOURCE_TYPE Source );",
            "name": "WinBioGetLogonSetting"
        },
        {
            "signature": "HRESULT WinBioGetProperty( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_PROPERTY_TYPE PropertyType, [in] WINBIO_PROPERTY_ID PropertyId, [in, optional] WINBIO_UNIT_ID UnitId, [in, optional] WINBIO_IDENTITY *Identity, [in, optional] WINBIO_BIOMETRIC_SUBTYPE SubFactor, PVOID *PropertyBuffer, [out, optional] SIZE_T *PropertyBufferSize );",
            "name": "WinBioGetProperty"
        },
        {
            "signature": "HRESULT WinBioIdentify( [in] WINBIO_SESSION_HANDLE SessionHandle, [out, optional] WINBIO_UNIT_ID *UnitId, [out, optional] WINBIO_IDENTITY *Identity, [out, optional] WINBIO_BIOMETRIC_SUBTYPE *SubFactor, [out, optional] WINBIO_REJECT_DETAIL *RejectDetail );",
            "name": "WinBioIdentify"
        },
        {
            "signature": "HRESULT WinBioIdentifyWithCallback( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] PWINBIO_IDENTIFY_CALLBACK IdentifyCallback, [in, optional] PVOID IdentifyCallbackContext );",
            "name": "WinBioIdentifyWithCallback"
        },
        {
            "signature": "HRESULT WinBioLocateSensor( [in] WINBIO_SESSION_HANDLE SessionHandle, [out, optional] WINBIO_UNIT_ID *UnitId );",
            "name": "WinBioLocateSensor"
        },
        {
            "signature": "HRESULT WinBioLocateSensorWithCallback( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] PWINBIO_LOCATE_SENSOR_CALLBACK LocateCallback, [in, optional] PVOID LocateCallbackContext );",
            "name": "WinBioLocateSensorWithCallback"
        },
        {
            "signature": "HRESULT WinBioLockUnit( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId );",
            "name": "WinBioLockUnit"
        },
        {
            "signature": "HRESULT WinBioLogonIdentifiedUser( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioLogonIdentifiedUser"
        },
        {
            "signature": "HRESULT WinBioMonitorPresence( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId );",
            "name": "WinBioMonitorPresence"
        },
        {
            "signature": "HRESULT WinBioOpenSession( [in] WINBIO_BIOMETRIC_TYPE Factor, [in] WINBIO_POOL_TYPE PoolType, [in] WINBIO_SESSION_FLAGS Flags, [in] WINBIO_UNIT_ID *UnitArray, [in] SIZE_T UnitCount, [in] GUID *DatabaseId, [out] WINBIO_SESSION_HANDLE *SessionHandle );",
            "name": "WinBioOpenSession"
        },
        {
            "signature": "HRESULT WinBioRegisterEventMonitor( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_EVENT_TYPE EventMask, [in] PWINBIO_EVENT_CALLBACK EventCallback, [in] PVOID EventCallbackContext );",
            "name": "WinBioRegisterEventMonitor"
        },
        {
            "signature": "HRESULT WinBioReleaseFocus();",
            "name": "WinBioReleaseFocus"
        },
        {
            "signature": "HRESULT WinBioRemoveAllCredentials();",
            "name": "WinBioRemoveAllCredentials"
        },
        {
            "signature": "HRESULT WinBioRemoveAllDomainCredentials();",
            "name": "WinBioRemoveAllDomainCredentials"
        },
        {
            "signature": "HRESULT WinBioRemoveCredential( [in] WINBIO_IDENTITY Identity, [in] WINBIO_CREDENTIAL_TYPE Type );",
            "name": "WinBioRemoveCredential"
        },
        {
            "signature": "HRESULT WinBioSetCredential( [in] WINBIO_CREDENTIAL_TYPE Type, [in] PUCHAR Credential, [in] SIZE_T CredentialSize, [in] WINBIO_CREDENTIAL_FORMAT Format );",
            "name": "WinBioSetCredential"
        },
        {
            "signature": "HRESULT WinBioSetProperty( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_PROPERTY_TYPE PropertyType, [in] WINBIO_PROPERTY_ID PropertyId, [in, optional] WINBIO_UNIT_ID UnitId, [in, optional] WINBIO_IDENTITY *Identity, [in, optional] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [in] PVOID PropertyBuffer, [in] SIZE_T PropertyBufferSize );",
            "name": "WinBioSetProperty"
        },
        {
            "signature": "HRESULT WinBioUnlockUnit( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_UNIT_ID UnitId );",
            "name": "WinBioUnlockUnit"
        },
        {
            "signature": "HRESULT WinBioUnregisterEventMonitor( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioUnregisterEventMonitor"
        },
        {
            "signature": "HRESULT WinBioVerify( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_IDENTITY *Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [out, optional] WINBIO_UNIT_ID *UnitId, [out, optional] BOOLEAN *Match, [out, optional] WINBIO_REJECT_DETAIL *RejectDetail );",
            "name": "WinBioVerify"
        },
        {
            "signature": "HRESULT WinBioVerifyWithCallback( [in] WINBIO_SESSION_HANDLE SessionHandle, [in] WINBIO_IDENTITY *Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [in] PWINBIO_VERIFY_CALLBACK VerifyCallback, [in, optional] PVOID VerifyCallbackContext );",
            "name": "WinBioVerifyWithCallback"
        },
        {
            "signature": "HRESULT WinBioWait( [in] WINBIO_SESSION_HANDLE SessionHandle );",
            "name": "WinBioWait"
        }
    ],
    "Winbio_adapter.h": [
        {
            "signature": "PIBIO_ENGINE_ACCEPT_SAMPLE_DATA_FN PibioEngineAcceptSampleDataFn; HRESULT PibioEngineAcceptSampleDataFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_BIR SampleBuffer, [in] SIZE_T SampleSize, [in] WINBIO_BIR_PURPOSE Purpose, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_ENGINE_ACCEPT_SAMPLE_DATA_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_ACTIVATE_FN PibioEngineActivateFn; HRESULT PibioEngineActivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_ACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_ATTACH_FN PibioEngineAttachFn; HRESULT PibioEngineAttachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_ATTACH_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CHECK_FOR_DUPLICATE_FN PibioEngineCheckForDuplicateFn; HRESULT PibioEngineCheckForDuplicateFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_IDENTITY Identity, [out] PWINBIO_BIOMETRIC_SUBTYPE SubFactor, [out] PBOOLEAN Duplicate ) {...}",
            "name": "PIBIO_ENGINE_CHECK_FOR_DUPLICATE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CLEAR_CONTEXT_FN PibioEngineClearContextFn; HRESULT PibioEngineClearContextFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_CLEAR_CONTEXT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_COMMIT_ENROLLMENT_FN PibioEngineCommitEnrollmentFn; HRESULT PibioEngineCommitEnrollmentFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_IDENTITY Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [in, optional] PUCHAR PayloadBlob, [in] SIZE_T PayloadBlobSize ) {...}",
            "name": "PIBIO_ENGINE_COMMIT_ENROLLMENT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CONTROL_UNIT_FN PibioEngineControlUnitFn; HRESULT PibioEngineControlUnitFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_ENGINE_CONTROL_UNIT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CONTROL_UNIT_PRIVILEGED_FN PibioEngineControlUnitPrivilegedFn; HRESULT PibioEngineControlUnitPrivilegedFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_ENGINE_CONTROL_UNIT_PRIVILEGED_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CREATE_ENROLLMENT_FN PibioEngineCreateEnrollmentFn; HRESULT PibioEngineCreateEnrollmentFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_CREATE_ENROLLMENT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_CREATE_KEY_FN PibioEngineCreateKeyFn; HRESULT PibioEngineCreateKeyFn( PWINBIO_PIPELINE Pipeline, const UCHAR *Key, SIZE_T KeySize, PUCHAR KeyIdentifier, SIZE_T KeyIdentifierSize, PSIZE_T ResultSize ) {...}",
            "name": "PIBIO_ENGINE_CREATE_KEY_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_DEACTIVATE_FN PibioEngineDeactivateFn; HRESULT PibioEngineDeactivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_DEACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_DETACH_FN PibioEngineDetachFn; HRESULT PibioEngineDetachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_DETACH_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_DISCARD_ENROLLMENT_FN PibioEngineDiscardEnrollmentFn; HRESULT PibioEngineDiscardEnrollmentFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_DISCARD_ENROLLMENT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_EXPORT_ENGINE_DATA_FN PibioEngineExportEngineDataFn; HRESULT PibioEngineExportEngineDataFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_BIR_DATA_FLAGS Flags, [out] PWINBIO_BIR *SampleBuffer, [out] PSIZE_T SampleSize ) {...}",
            "name": "PIBIO_ENGINE_EXPORT_ENGINE_DATA_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_GET_ENROLLMENT_HASH_FN PibioEngineGetEnrollmentHashFn; HRESULT PibioEngineGetEnrollmentHashFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PUCHAR *HashValue, [out] PSIZE_T HashSize ) {...}",
            "name": "PIBIO_ENGINE_GET_ENROLLMENT_HASH_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_GET_ENROLLMENT_STATUS_FN PibioEngineGetEnrollmentStatusFn; HRESULT PibioEngineGetEnrollmentStatusFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_ENGINE_GET_ENROLLMENT_STATUS_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_IDENTIFY_ALL_FN PibioEngineIdentifyAllFn; HRESULT PibioEngineIdentifyAllFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T PresenceCount, [out] PWINBIO_PRESENCE *PresenceArray ) {...}",
            "name": "PIBIO_ENGINE_IDENTIFY_ALL_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_IDENTIFY_FEATURE_SET_FN PibioEngineIdentifyFeatureSetFn; HRESULT PibioEngineIdentifyFeatureSetFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_IDENTITY Identity, [out] PWINBIO_BIOMETRIC_SUBTYPE SubFactor, [out] PUCHAR *PayloadBlob, [out] PSIZE_T PayloadBlobSize, [out] PUCHAR *HashValue, [out] PSIZE_T HashSize, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_ENGINE_IDENTIFY_FEATURE_SET_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_IDENTIFY_FEATURE_SET_SECURE_FN PibioEngineIdentifyFeatureSetSecureFn; HRESULT PibioEngineIdentifyFeatureSetSecureFn( PWINBIO_PIPELINE Pipeline, const UCHAR *Nonce, SIZE_T NonceSize, const UCHAR *KeyIdentifier, SIZE_T KeyIdentifierSize, PWINBIO_IDENTITY Identity, PWINBIO_BIOMETRIC_SUBTYPE SubFactor, PWINBIO_REJECT_DETAIL RejectDetail, PUCHAR *Authorization, PSIZE_T AuthorizationSize ) {...}",
            "name": "PIBIO_ENGINE_IDENTIFY_FEATURE_SET_SECURE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_NOTIFY_POWER_CHANGE_FN PibioEngineNotifyPowerChangeFn; HRESULT PibioEngineNotifyPowerChangeFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG PowerEventType ) {...}",
            "name": "PIBIO_ENGINE_NOTIFY_POWER_CHANGE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_PIPELINE_CLEANUP_FN PibioEnginePipelineCleanupFn; HRESULT PibioEnginePipelineCleanupFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_PIPELINE_CLEANUP_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_PIPELINE_INIT_FN PibioEnginePipelineInitFn; HRESULT PibioEnginePipelineInitFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_PIPELINE_INIT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_CALIBRATION_DATA_FN PibioEngineQueryCalibrationDataFn; HRESULT PibioEngineQueryCalibrationDataFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PBOOLEAN DiscardAndRepeatCapture, [out] PUCHAR CalibrationBuffer, [out] PSIZE_T CalibrationBufferSize, [in] SIZE_T MaxBufferSize ) {...}",
            "name": "PIBIO_ENGINE_QUERY_CALIBRATION_DATA_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_EXTENDED_ENROLLMENT_STATUS_FN PibioEngineQueryExtendedEnrollmentStatusFn; HRESULT PibioEngineQueryExtendedEnrollmentStatusFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_EXTENDED_ENROLLMENT_STATUS EnrollmentStatus, [in] SIZE_T EnrollmentStatusSize ) {...}",
            "name": "PIBIO_ENGINE_QUERY_EXTENDED_ENROLLMENT_STATUS_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_EXTENDED_INFO_FN PibioEngineQueryExtendedInfoFn; HRESULT PibioEngineQueryExtendedInfoFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_EXTENDED_ENGINE_INFO EngineInfo, [in] SIZE_T EngineInfoSize ) {...}",
            "name": "PIBIO_ENGINE_QUERY_EXTENDED_INFO_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_HASH_ALGORITHMS_FN PibioEngineQueryHashAlgorithmsFn; HRESULT PibioEngineQueryHashAlgorithmsFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T AlgorithmCount, [out] PSIZE_T AlgorithmBufferSize, [out] PUCHAR *AlgorithmBuffer ) {...}",
            "name": "PIBIO_ENGINE_QUERY_HASH_ALGORITHMS_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_INDEX_VECTOR_SIZE_FN PibioEngineQueryIndexVectorSizeFn; HRESULT PibioEngineQueryIndexVectorSizeFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T IndexElementCount ) {...}",
            "name": "PIBIO_ENGINE_QUERY_INDEX_VECTOR_SIZE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_PREFERRED_FORMAT_FN PibioEngineQueryPreferredFormatFn; HRESULT PibioEngineQueryPreferredFormatFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_REGISTERED_FORMAT StandardFormat, [out] PWINBIO_UUID VendorFormat ) {...}",
            "name": "PIBIO_ENGINE_QUERY_PREFERRED_FORMAT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_QUERY_SAMPLE_HINT_FN PibioEngineQuerySampleHintFn; HRESULT PibioEngineQuerySampleHintFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T SampleHint ) {...}",
            "name": "PIBIO_ENGINE_QUERY_SAMPLE_HINT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_REFRESH_CACHE_FN PibioEngineRefreshCacheFn; HRESULT PibioEngineRefreshCacheFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_ENGINE_REFRESH_CACHE_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_SELECT_CALIBRATION_FORMAT_FN PibioEngineSelectCalibrationFormatFn; HRESULT PibioEngineSelectCalibrationFormatFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_UUID FormatArray, [in] SIZE_T FormatCount, [out] PWINBIO_UUID SelectedFormat, [out] PSIZE_T MaxBufferSize ) {...}",
            "name": "PIBIO_ENGINE_SELECT_CALIBRATION_FORMAT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_SET_ACCOUNT_POLICY_FN PibioEngineSetAccountPolicyFn; HRESULT PibioEngineSetAccountPolicyFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_ACCOUNT_POLICY PolicyItemArray, [in] SIZE_T PolicyItemCount ) {...}",
            "name": "PIBIO_ENGINE_SET_ACCOUNT_POLICY_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_SET_ENROLLMENT_PARAMETERS_FN PibioEngineSetEnrollmentParametersFn; HRESULT PibioEngineSetEnrollmentParametersFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_EXTENDED_ENROLLMENT_PARAMETERS Parameters ) {...}",
            "name": "PIBIO_ENGINE_SET_ENROLLMENT_PARAMETERS_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_SET_ENROLLMENT_SELECTOR_FN PibioEngineSetEnrollmentSelectorFn; HRESULT PibioEngineSetEnrollmentSelectorFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONGLONG SelectorValue ) {...}",
            "name": "PIBIO_ENGINE_SET_ENROLLMENT_SELECTOR_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_SET_HASH_ALGORITHM_FN PibioEngineSetHashAlgorithmFn; HRESULT PibioEngineSetHashAlgorithmFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] SIZE_T AlgorithmBufferSize, [in] PUCHAR AlgorithmBuffer ) {...}",
            "name": "PIBIO_ENGINE_SET_HASH_ALGORITHM_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_UPDATE_ENROLLMENT_FN PibioEngineUpdateEnrollmentFn; HRESULT PibioEngineUpdateEnrollmentFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_ENGINE_UPDATE_ENROLLMENT_FN callback"
        },
        {
            "signature": "PIBIO_ENGINE_VERIFY_FEATURE_SET_FN PibioEngineVerifyFeatureSetFn; HRESULT PibioEngineVerifyFeatureSetFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_IDENTITY Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, [out] PBOOLEAN Match, [out] PUCHAR *PayloadBlob, [out] PSIZE_T PayloadBlobSize, [out] PUCHAR *HashValue, [out] PSIZE_T HashSize, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_ENGINE_VERIFY_FEATURE_SET_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_ACCEPT_CALIBRATION_DATA_FN PibioSensorAcceptCalibrationDataFn; HRESULT PibioSensorAcceptCalibrationDataFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PUCHAR CalibrationBuffer, [in] SIZE_T CalibrationBufferSize ) {...}",
            "name": "PIBIO_SENSOR_ACCEPT_CALIBRATION_DATA_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_ACTIVATE_FN PibioSensorActivateFn; HRESULT PibioSensorActivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_ACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_ATTACH_FN PibioSensorAttachFn; HRESULT PibioSensorAttachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_ATTACH_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_CANCEL_FN PibioSensorCancelFn; HRESULT PibioSensorCancelFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_CANCEL_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_CLEAR_CONTEXT_FN PibioSensorClearContextFn; HRESULT PibioSensorClearContextFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_CLEAR_CONTEXT_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_CONTROL_UNIT_FN PibioSensorControlUnitFn; HRESULT PibioSensorControlUnitFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_SENSOR_CONTROL_UNIT_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_CONTROL_UNIT_PRIVILEGED_FN PibioSensorControlUnitPrivilegedFn; HRESULT PibioSensorControlUnitPrivilegedFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_SENSOR_CONTROL_UNIT_PRIVILEGED_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_DEACTIVATE_FN PibioSensorDeactivateFn; HRESULT PibioSensorDeactivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_DEACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_DETACH_FN PibioSensorDetachFn; HRESULT PibioSensorDetachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_DETACH_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_EXPORT_SENSOR_DATA_FN PibioSensorExportSensorDataFn; HRESULT PibioSensorExportSensorDataFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_BIR *SampleBuffer, [out] PSIZE_T SampleSize ) {...}",
            "name": "PIBIO_SENSOR_EXPORT_SENSOR_DATA_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_FINISH_CAPTURE_FN PibioSensorFinishCaptureFn; HRESULT PibioSensorFinishCaptureFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_SENSOR_FINISH_CAPTURE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_GET_INDICATOR_STATUS_FN PibioSensorGetIndicatorStatusFn; HRESULT PibioSensorGetIndicatorStatusFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_INDICATOR_STATUS IndicatorStatus ) {...}",
            "name": "PIBIO_SENSOR_GET_INDICATOR_STATUS_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN PibioSensorNotifyPowerChangeFn; HRESULT PibioSensorNotifyPowerChangeFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG PowerEventType ) {...}",
            "name": "PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_PIPELINE_CLEANUP_FN PibioSensorPipelineCleanupFn; HRESULT PibioSensorPipelineCleanupFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_PIPELINE_CLEANUP_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_PIPELINE_INIT_FN PibioSensorPipelineInitFn; HRESULT PibioSensorPipelineInitFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_PIPELINE_INIT_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN PibioSensorPushDataToEngineFn; HRESULT PibioSensorPushDataToEngineFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_BIR_PURPOSE Purpose, [in] WINBIO_BIR_DATA_FLAGS Flags, [out] PWINBIO_REJECT_DETAIL RejectDetail ) {...}",
            "name": "PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_QUERY_CALIBRATION_FORMATS_FN PibioSensorQueryCalibrationFormatsFn; HRESULT PibioSensorQueryCalibrationFormatsFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_UUID FormatArray, [in] SIZE_T FormatArraySize, [out] PSIZE_T FormatCount ) {...}",
            "name": "PIBIO_SENSOR_QUERY_CALIBRATION_FORMATS_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_QUERY_EXTENDED_INFO_FN PibioSensorQueryExtendedInfoFn; HRESULT PibioSensorQueryExtendedInfoFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_EXTENDED_SENSOR_INFO SensorInfo, [in] SIZE_T SensorInfoSize ) {...}",
            "name": "PIBIO_SENSOR_QUERY_EXTENDED_INFO_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_QUERY_STATUS_FN PibioSensorQueryStatusFn; HRESULT PibioSensorQueryStatusFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_SENSOR_STATUS Status ) {...}",
            "name": "PIBIO_SENSOR_QUERY_STATUS_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_RESET_FN PibioSensorResetFn; HRESULT PibioSensorResetFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_SENSOR_RESET_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_SET_CALIBRATION_FORMAT_FN PibioSensorSetCalibrationFormatFn; HRESULT PibioSensorSetCalibrationFormatFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_UUID Format ) {...}",
            "name": "PIBIO_SENSOR_SET_CALIBRATION_FORMAT_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_SET_INDICATOR_STATUS_FN PibioSensorSetIndicatorStatusFn; HRESULT PibioSensorSetIndicatorStatusFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_INDICATOR_STATUS IndicatorStatus ) {...}",
            "name": "PIBIO_SENSOR_SET_INDICATOR_STATUS_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_SET_MODE_FN PibioSensorSetModeFn; HRESULT PibioSensorSetModeFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_SENSOR_MODE Mode ) {...}",
            "name": "PIBIO_SENSOR_SET_MODE_FN callback"
        },
        {
            "signature": "PIBIO_SENSOR_START_CAPTURE_FN PibioSensorStartCaptureFn; HRESULT PibioSensorStartCaptureFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_BIR_PURPOSE Purpose, [out] LPOVERLAPPED *Overlapped ) {...}",
            "name": "PIBIO_SENSOR_START_CAPTURE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_ACTIVATE_FN PibioStorageActivateFn; HRESULT PibioStorageActivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_ACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_ADD_RECORD_FN PibioStorageAddRecordFn; HRESULT PibioStorageAddRecordFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_STORAGE_RECORD RecordContents ) {...}",
            "name": "PIBIO_STORAGE_ADD_RECORD_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_ATTACH_FN PibioStorageAttachFn; HRESULT PibioStorageAttachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_ATTACH_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_CLEAR_CONTEXT_FN PibioStorageClearContextFn; HRESULT PibioStorageClearContextFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_CLEAR_CONTEXT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_CLOSE_DATABASE_FN PibioStorageCloseDatabaseFn; HRESULT PibioStorageCloseDatabaseFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_CLOSE_DATABASE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_CONTROL_UNIT_FN PibioStorageControlUnitFn; HRESULT PibioStorageControlUnitFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_STORAGE_CONTROL_UNIT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_CONTROL_UNIT_PRIVILEGED_FN PibioStorageControlUnitPrivilegedFn; HRESULT PibioStorageControlUnitPrivilegedFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG ControlCode, [in] PUCHAR SendBuffer, [in] SIZE_T SendBufferSize, [in] PUCHAR ReceiveBuffer, [in] SIZE_T ReceiveBufferSize, [out] PSIZE_T ReceiveDataSize, [out] PULONG OperationStatus ) {...}",
            "name": "PIBIO_STORAGE_CONTROL_UNIT_PRIVILEGED_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_CREATE_DATABASE_FN PibioStorageCreateDatabaseFn; HRESULT PibioStorageCreateDatabaseFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_UUID DatabaseId, [in] WINBIO_BIOMETRIC_TYPE Factor, [in] PWINBIO_UUID Format, [in] LPCWSTR FilePath, [in] LPCWSTR ConnectString, [in] SIZE_T IndexElementCount, [in] SIZE_T InitialSize ) {...}",
            "name": "PIBIO_STORAGE_CREATE_DATABASE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_DEACTIVATE_FN PibioStorageDeactivateFn; HRESULT PibioStorageDeactivateFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_DEACTIVATE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_DELETE_RECORD_FN PibioStorageDeleteRecordFn; HRESULT PibioStorageDeleteRecordFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_IDENTITY Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor ) {...}",
            "name": "PIBIO_STORAGE_DELETE_RECORD_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_DETACH_FN PibioStorageDetachFn; HRESULT PibioStorageDetachFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_DETACH_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_ERASE_DATABASE_FN PibioStorageEraseDatabaseFn; HRESULT PibioStorageEraseDatabaseFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_UUID DatabaseId, [in] LPCWSTR FilePath, [in] LPCWSTR ConnectString ) {...}",
            "name": "PIBIO_STORAGE_ERASE_DATABASE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_FIRST_RECORD_FN PibioStorageFirstRecordFn; HRESULT PibioStorageFirstRecordFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_FIRST_RECORD_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_GET_CURRENT_RECORD_FN PibioStorageGetCurrentRecordFn; HRESULT PibioStorageGetCurrentRecordFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_STORAGE_RECORD RecordContents ) {...}",
            "name": "PIBIO_STORAGE_GET_CURRENT_RECORD_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_GET_DATA_FORMAT_FN PibioStorageGetDataFormatFn; HRESULT PibioStorageGetDataFormatFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_UUID Format, [out] PWINBIO_VERSION Version ) {...}",
            "name": "PIBIO_STORAGE_GET_DATA_FORMAT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_GET_DATABASE_SIZE_FN PibioStorageGetDatabaseSizeFn; HRESULT PibioStorageGetDatabaseSizeFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T AvailableRecordCount, [out] PSIZE_T TotalRecordCount ) {...}",
            "name": "PIBIO_STORAGE_GET_DATABASE_SIZE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_GET_RECORD_COUNT_FN PibioStorageGetRecordCountFn; HRESULT PibioStorageGetRecordCountFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PSIZE_T RecordCount ) {...}",
            "name": "PIBIO_STORAGE_GET_RECORD_COUNT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_NEXT_RECORD_FN PibioStorageNextRecordFn; HRESULT PibioStorageNextRecordFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_NEXT_RECORD_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN PibioStorageNotifyPowerChangeFn; HRESULT PibioStorageNotifyPowerChangeFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] ULONG PowerEventType ) {...}",
            "name": "PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_OPEN_DATABASE_FN PibioStorageOpenDatabaseFn; HRESULT PibioStorageOpenDatabaseFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_UUID DatabaseId, [in] LPCWSTR FilePath, [in] LPCWSTR ConnectString ) {...}",
            "name": "PIBIO_STORAGE_OPEN_DATABASE_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_PIPELINE_CLEANUP_FN PibioStoragePipelineCleanupFn; HRESULT PibioStoragePipelineCleanupFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_PIPELINE_CLEANUP_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_PIPELINE_INIT_FN PibioStoragePipelineInitFn; HRESULT PibioStoragePipelineInitFn( [in, out] PWINBIO_PIPELINE Pipeline ) {...}",
            "name": "PIBIO_STORAGE_PIPELINE_INIT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_QUERY_BY_CONTENT_FN PibioStorageQueryByContentFn; HRESULT PibioStorageQueryByContentFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor, ULONG IndexVector[], [in] SIZE_T IndexElementCount ) {...}",
            "name": "PIBIO_STORAGE_QUERY_BY_CONTENT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_QUERY_BY_SUBJECT_FN PibioStorageQueryBySubjectFn; HRESULT PibioStorageQueryBySubjectFn( [in, out] PWINBIO_PIPELINE Pipeline, [in] PWINBIO_IDENTITY Identity, [in] WINBIO_BIOMETRIC_SUBTYPE SubFactor ) {...}",
            "name": "PIBIO_STORAGE_QUERY_BY_SUBJECT_FN callback"
        },
        {
            "signature": "PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN PibioStorageQueryExtendedInfoFn; HRESULT PibioStorageQueryExtendedInfoFn( [in, out] PWINBIO_PIPELINE Pipeline, [out] PWINBIO_EXTENDED_STORAGE_INFO StorageInfo, [in] SIZE_T StorageInfoSize ) {...}",
            "name": "PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN callback"
        },
        {
            "signature": "HRESULT WbioQueryEngineInterface( [out] PWINBIO_ENGINE_INTERFACE *EngineInterface );",
            "name": "WbioQueryEngineInterface"
        },
        {
            "signature": "HRESULT WbioQuerySensorInterface( [out] PWINBIO_SENSOR_INTERFACE *SensorInterface );",
            "name": "WbioQuerySensorInterface"
        },
        {
            "signature": "HRESULT WbioQueryStorageInterface( [out] PWINBIO_STORAGE_INTERFACE *StorageInterface );",
            "name": "WbioQueryStorageInterface"
        }
    ],
    "Wincodec.h": [
        {
            "signature": "PFNProgressNotification Pfnprogressnotification; HRESULT Pfnprogressnotification( LPVOID pvData, ULONG uFrameNum, WICProgressOperation operation, double dblProgress ) {...}",
            "name": "PFNProgressNotification callback"
        },
        {
            "signature": "HRESULT WICConvertBitmapSource( [in] REFWICPixelFormatGUID dstFormat, [in] IWICBitmapSource *pISrc, [out] IWICBitmapSource **ppIDst );",
            "name": "WICConvertBitmapSource"
        },
        {
            "signature": "HRESULT WICCreateBitmapFromSection( [in] UINT width, [in] UINT height, REFWICPixelFormatGUID pixelFormat, [in] HANDLE hSection, [in] UINT stride, [in] UINT offset, [out] IWICBitmap **ppIBitmap );",
            "name": "WICCreateBitmapFromSection"
        },
        {
            "signature": "HRESULT WICCreateBitmapFromSectionEx( [in] UINT width, [in] UINT height, REFWICPixelFormatGUID pixelFormat, [in] HANDLE hSection, [in] UINT stride, [in] UINT offset, [in] WICSectionAccessLevel desiredAccessLevel, [out] IWICBitmap **ppIBitmap );",
            "name": "WICCreateBitmapFromSectionEx"
        },
        {
            "signature": "HRESULT WICMapGuidToShortName( [in] REFGUID guid, [in] UINT cchName, [in, out] WCHAR *wzName, [out] UINT *pcchActual );",
            "name": "WICMapGuidToShortName"
        },
        {
            "signature": "HRESULT WICMapSchemaToName( [in] REFGUID guidMetadataFormat, [in] LPWSTR pwzSchema, [in] UINT cchName, [in, out] WCHAR *wzName, [out] UINT *pcchActual );",
            "name": "WICMapSchemaToName"
        },
        {
            "signature": "HRESULT WICMapShortNameToGuid( [in] PCWSTR wzName, [out] GUID *pguid );",
            "name": "WICMapShortNameToGuid"
        }
    ],
    "Wincodecsdk.h": [
        {
            "signature": "HRESULT WICGetMetadataContentSize( [in] REFGUID guidContainerFormat, [in] IWICMetadataWriter *pIWriter, [out] ULARGE_INTEGER *pcbSize );",
            "name": "WICGetMetadataContentSize"
        },
        {
            "signature": "HRESULT WICMatchMetadataContent( [in] REFGUID guidContainerFormat, [in] const GUID *pguidVendor, [in] IStream *pIStream, [out] GUID *pguidMetadataFormat );",
            "name": "WICMatchMetadataContent"
        },
        {
            "signature": "HRESULT WICSerializeMetadataContent( [in] REFGUID guidContainerFormat, [in] IWICMetadataWriter *pIWriter, [in] DWORD dwPersistOptions, [in] IStream *pIStream );",
            "name": "WICSerializeMetadataContent"
        }
    ],
    "Wincred.h": [
        {
            "signature": "BOOL CredDeleteA( [in] LPCSTR TargetName, [in] DWORD Type, [in] DWORD Flags );",
            "name": "CredDeleteA"
        },
        {
            "signature": "BOOL CredDeleteW( [in] LPCWSTR TargetName, [in] DWORD Type, [in] DWORD Flags );",
            "name": "CredDeleteW"
        },
        {
            "signature": "BOOL CredEnumerateA( [in] LPCSTR Filter, [in] DWORD Flags, [out] DWORD *Count, [out] PCREDENTIALA **Credential );",
            "name": "CredEnumerateA"
        },
        {
            "signature": "BOOL CredEnumerateW( [in] LPCWSTR Filter, [in] DWORD Flags, [out] DWORD *Count, [out] PCREDENTIALW **Credential );",
            "name": "CredEnumerateW"
        },
        {
            "signature": "BOOL CredFindBestCredentialA( [in] LPCSTR TargetName, [in] DWORD Type, [in] DWORD Flags, [out] PCREDENTIALA *Credential );",
            "name": "CredFindBestCredentialA"
        },
        {
            "signature": "BOOL CredFindBestCredentialW( [in] LPCWSTR TargetName, [in] DWORD Type, [in] DWORD Flags, [out] PCREDENTIALW *Credential );",
            "name": "CredFindBestCredentialW"
        },
        {
            "signature": "void CredFree( [in] PVOID Buffer );",
            "name": "CredFree"
        },
        {
            "signature": "BOOL CredGetSessionTypes( [in] DWORD MaximumPersistCount, [out] LPDWORD MaximumPersist );",
            "name": "CredGetSessionTypes"
        },
        {
            "signature": "BOOL CredGetTargetInfoA( [in] LPCSTR TargetName, [in] DWORD Flags, [out] PCREDENTIAL_TARGET_INFORMATIONA *TargetInfo );",
            "name": "CredGetTargetInfoA"
        },
        {
            "signature": "BOOL CredGetTargetInfoW( [in] LPCWSTR TargetName, [in] DWORD Flags, [out] PCREDENTIAL_TARGET_INFORMATIONW *TargetInfo );",
            "name": "CredGetTargetInfoW"
        },
        {
            "signature": "BOOL CredIsMarshaledCredentialA( [in] LPCSTR MarshaledCredential );",
            "name": "CredIsMarshaledCredentialA"
        },
        {
            "signature": "BOOL CredIsMarshaledCredentialW( [in] LPCWSTR MarshaledCredential );",
            "name": "CredIsMarshaledCredentialW"
        },
        {
            "signature": "BOOL CredIsProtectedA( [in] LPSTR pszProtectedCredentials, [out] CRED_PROTECTION_TYPE *pProtectionType );",
            "name": "CredIsProtectedA"
        },
        {
            "signature": "BOOL CredIsProtectedW( [in] LPWSTR pszProtectedCredentials, [out] CRED_PROTECTION_TYPE *pProtectionType );",
            "name": "CredIsProtectedW"
        },
        {
            "signature": "BOOL CredMarshalCredentialA( [in] CRED_MARSHAL_TYPE CredType, [in] PVOID Credential, [out] LPSTR *MarshaledCredential );",
            "name": "CredMarshalCredentialA"
        },
        {
            "signature": "BOOL CredMarshalCredentialW( [in] CRED_MARSHAL_TYPE CredType, [in] PVOID Credential, [out] LPWSTR *MarshaledCredential );",
            "name": "CredMarshalCredentialW"
        },
        {
            "signature": "CREDUIAPI BOOL CredPackAuthenticationBufferA( [in] DWORD dwFlags, [in] LPSTR pszUserName, [in] LPSTR pszPassword, [out] PBYTE pPackedCredentials, [in, out] DWORD *pcbPackedCredentials );",
            "name": "CredPackAuthenticationBufferA"
        },
        {
            "signature": "CREDUIAPI BOOL CredPackAuthenticationBufferW( [in] DWORD dwFlags, [in] LPWSTR pszUserName, [in] LPWSTR pszPassword, [out] PBYTE pPackedCredentials, [in, out] DWORD *pcbPackedCredentials );",
            "name": "CredPackAuthenticationBufferW"
        },
        {
            "signature": "BOOL CredProtectA( [in] BOOL fAsSelf, [in] LPSTR pszCredentials, [in] DWORD cchCredentials, [out] LPSTR pszProtectedCredentials, [in, out] DWORD *pcchMaxChars, [out] CRED_PROTECTION_TYPE *ProtectionType );",
            "name": "CredProtectA"
        },
        {
            "signature": "BOOL CredProtectW( [in] BOOL fAsSelf, [in] LPWSTR pszCredentials, [in] DWORD cchCredentials, [out] LPWSTR pszProtectedCredentials, [in, out] DWORD *pcchMaxChars, [out] CRED_PROTECTION_TYPE *ProtectionType );",
            "name": "CredProtectW"
        },
        {
            "signature": "BOOL CredReadA( [in] LPCSTR TargetName, [in] DWORD Type, [in] DWORD Flags, [out] PCREDENTIALA *Credential );",
            "name": "CredReadA"
        },
        {
            "signature": "BOOL CredReadDomainCredentialsA( [in] PCREDENTIAL_TARGET_INFORMATIONA TargetInfo, [in] DWORD Flags, [out] DWORD *Count, [out] PCREDENTIALA **Credential );",
            "name": "CredReadDomainCredentialsA"
        },
        {
            "signature": "BOOL CredReadDomainCredentialsW( [in] PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, [in] DWORD Flags, [out] DWORD *Count, [out] PCREDENTIALW **Credential );",
            "name": "CredReadDomainCredentialsW"
        },
        {
            "signature": "BOOL CredReadW( [in] LPCWSTR TargetName, [in] DWORD Type, [in] DWORD Flags, [out] PCREDENTIALW *Credential );",
            "name": "CredReadW"
        },
        {
            "signature": "BOOL CredRenameA( [in] LPCSTR OldTargetName, [in] LPCSTR NewTargetName, [in] DWORD Type, [in] DWORD Flags );",
            "name": "CredRenameA"
        },
        {
            "signature": "BOOL CredRenameW( [in] LPCWSTR OldTargetName, [in] LPCWSTR NewTargetName, [in] DWORD Type, [in] DWORD Flags );",
            "name": "CredRenameW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUICmdLinePromptForCredentialsA( [in] PCSTR pszTargetName, [in] PCtxtHandle pContext, [in, optional] DWORD dwAuthError, [in, out] PSTR UserName, [in] ULONG ulUserBufferSize, [in, out] PSTR pszPassword, [in] ULONG ulPasswordBufferSize, [in, out] PBOOL pfSave, [in] DWORD dwFlags );",
            "name": "CredUICmdLinePromptForCredentialsA"
        },
        {
            "signature": "CREDUIAPI DWORD CredUICmdLinePromptForCredentialsW( [in] PCWSTR pszTargetName, [in] PCtxtHandle pContext, [in, optional] DWORD dwAuthError, [in, out] PWSTR UserName, [in] ULONG ulUserBufferSize, [in, out] PWSTR pszPassword, [in] ULONG ulPasswordBufferSize, [in, out] PBOOL pfSave, [in] DWORD dwFlags );",
            "name": "CredUICmdLinePromptForCredentialsW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIConfirmCredentialsA( [in] PCSTR pszTargetName, [in] BOOL bConfirm );",
            "name": "CredUIConfirmCredentialsA"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIConfirmCredentialsW( [in] PCWSTR pszTargetName, [in] BOOL bConfirm );",
            "name": "CredUIConfirmCredentialsW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIParseUserNameA( [in] PCSTR userName, [out] CHAR *user, [in] ULONG userBufferSize, [out] CHAR *domain, [in] ULONG domainBufferSize );",
            "name": "CredUIParseUserNameA"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIParseUserNameW( [in] PCWSTR UserName, [out] WCHAR *user, [in] ULONG userBufferSize, [out] WCHAR *domain, [in] ULONG domainBufferSize );",
            "name": "CredUIParseUserNameW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIPromptForCredentialsA( [in, optional] PCREDUI_INFOA pUiInfo, [in] PCSTR pszTargetName, [in] PCtxtHandle pContext, [in, optional] DWORD dwAuthError, [in, out] PSTR pszUserName, [in] ULONG ulUserNameBufferSize, [in, out] PSTR pszPassword, [in] ULONG ulPasswordBufferSize, [in, out] BOOL *save, [in] DWORD dwFlags );",
            "name": "CredUIPromptForCredentialsA"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIPromptForCredentialsW( [in, optional] PCREDUI_INFOW pUiInfo, [in] PCWSTR pszTargetName, [in] PCtxtHandle pContext, [in, optional] DWORD dwAuthError, [in, out] PWSTR pszUserName, [in] ULONG ulUserNameBufferSize, [in, out] PWSTR pszPassword, [in] ULONG ulPasswordBufferSize, [in, out] BOOL *save, [in] DWORD dwFlags );",
            "name": "CredUIPromptForCredentialsW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIPromptForWindowsCredentialsA( [in, optional] PCREDUI_INFOA pUiInfo, [in] DWORD dwAuthError, [in, out] ULONG *pulAuthPackage, [in, optional] LPCVOID pvInAuthBuffer, [in] ULONG ulInAuthBufferSize, [out] LPVOID *ppvOutAuthBuffer, [out] ULONG *pulOutAuthBufferSize, [in, out, optional] BOOL *pfSave, [in] DWORD dwFlags );",
            "name": "CredUIPromptForWindowsCredentialsA"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIPromptForWindowsCredentialsW( [in, optional] PCREDUI_INFOW pUiInfo, [in] DWORD dwAuthError, [in, out] ULONG *pulAuthPackage, [in, optional] LPCVOID pvInAuthBuffer, [in] ULONG ulInAuthBufferSize, [out] LPVOID *ppvOutAuthBuffer, [out] ULONG *pulOutAuthBufferSize, [in, out, optional] BOOL *pfSave, [in] DWORD dwFlags );",
            "name": "CredUIPromptForWindowsCredentialsW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIReadSSOCredW( [in] PCWSTR pszRealm, [out] PWSTR *ppszUsername );",
            "name": "CredUIReadSSOCredW"
        },
        {
            "signature": "CREDUIAPI DWORD CredUIStoreSSOCredW( [in] PCWSTR pszRealm, [in] PCWSTR pszUsername, [in] PCWSTR pszPassword, [in] BOOL bPersist );",
            "name": "CredUIStoreSSOCredW"
        },
        {
            "signature": "BOOL CredUnmarshalCredentialA( [in] LPCSTR MarshaledCredential, [out] PCRED_MARSHAL_TYPE CredType, [out] PVOID *Credential );",
            "name": "CredUnmarshalCredentialA"
        },
        {
            "signature": "BOOL CredUnmarshalCredentialW( [in] LPCWSTR MarshaledCredential, [out] PCRED_MARSHAL_TYPE CredType, [out] PVOID *Credential );",
            "name": "CredUnmarshalCredentialW"
        },
        {
            "signature": "CREDUIAPI BOOL CredUnPackAuthenticationBufferA( [in] DWORD dwFlags, [in] PVOID pAuthBuffer, [in] DWORD cbAuthBuffer, [out] LPSTR pszUserName, [in, out] DWORD *pcchlMaxUserName, [out] LPSTR pszDomainName, [in, out] DWORD *pcchMaxDomainName, [out] LPSTR pszPassword, [in, out] DWORD *pcchMaxPassword );",
            "name": "CredUnPackAuthenticationBufferA"
        },
        {
            "signature": "CREDUIAPI BOOL CredUnPackAuthenticationBufferW( [in] DWORD dwFlags, [in] PVOID pAuthBuffer, [in] DWORD cbAuthBuffer, [out] LPWSTR pszUserName, [in, out] DWORD *pcchMaxUserName, [out] LPWSTR pszDomainName, [in, out] DWORD *pcchMaxDomainName, [out] LPWSTR pszPassword, [in, out] DWORD *pcchMaxPassword );",
            "name": "CredUnPackAuthenticationBufferW"
        },
        {
            "signature": "BOOL CredUnprotectA( [in] BOOL fAsSelf, [in] LPSTR pszProtectedCredentials, [in] DWORD cchProtectedCredentials, [out] LPSTR pszCredentials, [in, out] DWORD *pcchMaxChars );",
            "name": "CredUnprotectA"
        },
        {
            "signature": "BOOL CredUnprotectW( [in] BOOL fAsSelf, [in] LPWSTR pszProtectedCredentials, [in] DWORD cchProtectedCredentials, [out] LPWSTR pszCredentials, [in, out] DWORD *pcchMaxChars );",
            "name": "CredUnprotectW"
        },
        {
            "signature": "BOOL CredWriteA( [in] PCREDENTIALA Credential, [in] DWORD Flags );",
            "name": "CredWriteA"
        },
        {
            "signature": "BOOL CredWriteDomainCredentialsA( [in] PCREDENTIAL_TARGET_INFORMATIONA TargetInfo, [in] PCREDENTIALA Credential, [in] DWORD Flags );",
            "name": "CredWriteDomainCredentialsA"
        },
        {
            "signature": "BOOL CredWriteDomainCredentialsW( [in] PCREDENTIAL_TARGET_INFORMATIONW TargetInfo, [in] PCREDENTIALW Credential, [in] DWORD Flags );",
            "name": "CredWriteDomainCredentialsW"
        },
        {
            "signature": "BOOL CredWriteW( [in] PCREDENTIALW Credential, [in] DWORD Flags );",
            "name": "CredWriteW"
        }
    ],
    "Wincrypt.h": [
        {
            "signature": "BOOL CertAddCertificateContextToStore( [in] HCERTSTORE hCertStore, [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwAddDisposition, [out, optional] PCCERT_CONTEXT *ppStoreContext );",
            "name": "CertAddCertificateContextToStore"
        },
        {
            "signature": "BOOL CertAddCertificateLinkToStore( [in] HCERTSTORE hCertStore, [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwAddDisposition, [out, optional] PCCERT_CONTEXT *ppStoreContext );",
            "name": "CertAddCertificateLinkToStore"
        },
        {
            "signature": "BOOL CertAddCRLContextToStore( [in] HCERTSTORE hCertStore, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwAddDisposition, [out, optional] PCCRL_CONTEXT *ppStoreContext );",
            "name": "CertAddCRLContextToStore"
        },
        {
            "signature": "BOOL CertAddCRLLinkToStore( [in] HCERTSTORE hCertStore, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwAddDisposition, [out, optional] PCCRL_CONTEXT *ppStoreContext );",
            "name": "CertAddCRLLinkToStore"
        },
        {
            "signature": "BOOL CertAddCTLContextToStore( [in] HCERTSTORE hCertStore, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwAddDisposition, [out, optional] PCCTL_CONTEXT *ppStoreContext );",
            "name": "CertAddCTLContextToStore"
        },
        {
            "signature": "BOOL CertAddCTLLinkToStore( [in] HCERTSTORE hCertStore, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwAddDisposition, [out, optional] PCCTL_CONTEXT *ppStoreContext );",
            "name": "CertAddCTLLinkToStore"
        },
        {
            "signature": "BOOL CertAddEncodedCertificateToStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] const BYTE *pbCertEncoded, [in] DWORD cbCertEncoded, [in] DWORD dwAddDisposition, [out, optional] PCCERT_CONTEXT *ppCertContext );",
            "name": "CertAddEncodedCertificateToStore"
        },
        {
            "signature": "BOOL CertAddEncodedCertificateToSystemStoreA( [in] LPCSTR szCertStoreName, [in] const BYTE *pbCertEncoded, [in] DWORD cbCertEncoded );",
            "name": "CertAddEncodedCertificateToSystemStoreA"
        },
        {
            "signature": "BOOL CertAddEncodedCertificateToSystemStoreW( [in] LPCWSTR szCertStoreName, [in] const BYTE *pbCertEncoded, [in] DWORD cbCertEncoded );",
            "name": "CertAddEncodedCertificateToSystemStoreW"
        },
        {
            "signature": "BOOL CertAddEncodedCRLToStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] const BYTE *pbCrlEncoded, [in] DWORD cbCrlEncoded, [in] DWORD dwAddDisposition, [out, optional] PCCRL_CONTEXT *ppCrlContext );",
            "name": "CertAddEncodedCRLToStore"
        },
        {
            "signature": "BOOL CertAddEncodedCTLToStore( [in] HCERTSTORE hCertStore, [in] DWORD dwMsgAndCertEncodingType, [in] const BYTE *pbCtlEncoded, [in] DWORD cbCtlEncoded, [in] DWORD dwAddDisposition, [out, optional] PCCTL_CONTEXT *ppCtlContext );",
            "name": "CertAddEncodedCTLToStore"
        },
        {
            "signature": "BOOL CertAddEnhancedKeyUsageIdentifier( [in] PCCERT_CONTEXT pCertContext, [in] LPCSTR pszUsageIdentifier );",
            "name": "CertAddEnhancedKeyUsageIdentifier"
        },
        {
            "signature": "void CertAddRefServerOcspResponse( [in] HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse );",
            "name": "CertAddRefServerOcspResponse"
        },
        {
            "signature": "void CertAddRefServerOcspResponseContext( [in] PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext );",
            "name": "CertAddRefServerOcspResponseContext"
        },
        {
            "signature": "BOOL CertAddSerializedElementToStore( [in] HCERTSTORE hCertStore, [in] const BYTE *pbElement, [in] DWORD cbElement, [in] DWORD dwAddDisposition, [in] DWORD dwFlags, [in] DWORD dwContextTypeFlags, [out] DWORD *pdwContextType, [out] const void **ppvContext );",
            "name": "CertAddSerializedElementToStore"
        },
        {
            "signature": "BOOL CertAddStoreToCollection( [in] HCERTSTORE hCollectionStore, [in, optional] HCERTSTORE hSiblingStore, [in] DWORD dwUpdateFlags, [in] DWORD dwPriority );",
            "name": "CertAddStoreToCollection"
        },
        {
            "signature": "LPCSTR CertAlgIdToOID( [in] DWORD dwAlgId );",
            "name": "CertAlgIdToOID"
        },
        {
            "signature": "void CertCloseServerOcspResponse( [in] HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, [in] DWORD dwFlags );",
            "name": "CertCloseServerOcspResponse"
        },
        {
            "signature": "BOOL CertCloseStore( [in] HCERTSTORE hCertStore, [in] DWORD dwFlags );",
            "name": "CertCloseStore"
        },
        {
            "signature": "BOOL CertCompareCertificate( [in] DWORD dwCertEncodingType, [in] PCERT_INFO pCertId1, [in] PCERT_INFO pCertId2 );",
            "name": "CertCompareCertificate"
        },
        {
            "signature": "BOOL CertCompareCertificateName( [in] DWORD dwCertEncodingType, [in] PCERT_NAME_BLOB pCertName1, [in] PCERT_NAME_BLOB pCertName2 );",
            "name": "CertCompareCertificateName"
        },
        {
            "signature": "BOOL CertCompareIntegerBlob( [in] PCRYPT_INTEGER_BLOB pInt1, [in] PCRYPT_INTEGER_BLOB pInt2 );",
            "name": "CertCompareIntegerBlob"
        },
        {
            "signature": "BOOL CertComparePublicKeyInfo( [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pPublicKey1, [in] PCERT_PUBLIC_KEY_INFO pPublicKey2 );",
            "name": "CertComparePublicKeyInfo"
        },
        {
            "signature": "BOOL CertControlStore( [in] HCERTSTORE hCertStore, [in] DWORD dwFlags, [in] DWORD dwCtrlType, [in] void const *pvCtrlPara );",
            "name": "CertControlStore"
        },
        {
            "signature": "BOOL CertCreateCertificateChainEngine( [in] PCERT_CHAIN_ENGINE_CONFIG pConfig, [out] HCERTCHAINENGINE *phChainEngine );",
            "name": "CertCreateCertificateChainEngine"
        },
        {
            "signature": "PCCERT_CONTEXT CertCreateCertificateContext( [in] DWORD dwCertEncodingType, [in] const BYTE *pbCertEncoded, [in] DWORD cbCertEncoded );",
            "name": "CertCreateCertificateContext"
        },
        {
            "signature": "const void * CertCreateContext( [in] DWORD dwContextType, [in] DWORD dwEncodingType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [in] DWORD dwFlags, [in, optional] PCERT_CREATE_CONTEXT_PARA pCreatePara );",
            "name": "CertCreateContext"
        },
        {
            "signature": "PCCRL_CONTEXT CertCreateCRLContext( [in] DWORD dwCertEncodingType, [in] const BYTE *pbCrlEncoded, [in] DWORD cbCrlEncoded );",
            "name": "CertCreateCRLContext"
        },
        {
            "signature": "PCCTL_CONTEXT CertCreateCTLContext( [in] DWORD dwMsgAndCertEncodingType, [in] const BYTE *pbCtlEncoded, [in] DWORD cbCtlEncoded );",
            "name": "CertCreateCTLContext"
        },
        {
            "signature": "BOOL CertCreateCTLEntryFromCertificateContextProperties( [in] PCCERT_CONTEXT pCertContext, [in] DWORD cOptAttr, [in] PCRYPT_ATTRIBUTE rgOptAttr, [in] DWORD dwFlags, [in] void *pvReserved, [out] PCTL_ENTRY pCtlEntry, [in, out] DWORD *pcbCtlEntry );",
            "name": "CertCreateCTLEntryFromCertificateContextProperties"
        },
        {
            "signature": "PCCERT_CONTEXT CertCreateSelfSignCertificate( [in, optional] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [in] PCERT_NAME_BLOB pSubjectIssuerBlob, [in] DWORD dwFlags, [in, optional] PCRYPT_KEY_PROV_INFO pKeyProvInfo, [in, optional] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [in, optional] PSYSTEMTIME pStartTime, [in, optional] PSYSTEMTIME pEndTime, [optional] PCERT_EXTENSIONS pExtensions );",
            "name": "CertCreateSelfSignCertificate"
        },
        {
            "signature": "BOOL CertDeleteCertificateFromStore( [in] PCCERT_CONTEXT pCertContext );",
            "name": "CertDeleteCertificateFromStore"
        },
        {
            "signature": "BOOL CertDeleteCRLFromStore( [in] PCCRL_CONTEXT pCrlContext );",
            "name": "CertDeleteCRLFromStore"
        },
        {
            "signature": "BOOL CertDeleteCTLFromStore( [in] PCCTL_CONTEXT pCtlContext );",
            "name": "CertDeleteCTLFromStore"
        },
        {
            "signature": "PCCERT_CHAIN_CONTEXT CertDuplicateCertificateChain( [in] PCCERT_CHAIN_CONTEXT pChainContext );",
            "name": "CertDuplicateCertificateChain"
        },
        {
            "signature": "PCCERT_CONTEXT CertDuplicateCertificateContext( [in] PCCERT_CONTEXT pCertContext );",
            "name": "CertDuplicateCertificateContext"
        },
        {
            "signature": "PCCRL_CONTEXT CertDuplicateCRLContext( [in] PCCRL_CONTEXT pCrlContext );",
            "name": "CertDuplicateCRLContext"
        },
        {
            "signature": "PCCTL_CONTEXT CertDuplicateCTLContext( [in] PCCTL_CONTEXT pCtlContext );",
            "name": "CertDuplicateCTLContext"
        },
        {
            "signature": "HCERTSTORE CertDuplicateStore( [in] HCERTSTORE hCertStore );",
            "name": "CertDuplicateStore"
        },
        {
            "signature": "DWORD CertEnumCertificateContextProperties( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwPropId );",
            "name": "CertEnumCertificateContextProperties"
        },
        {
            "signature": "PCCERT_CONTEXT CertEnumCertificatesInStore( [in] HCERTSTORE hCertStore, [in] PCCERT_CONTEXT pPrevCertContext );",
            "name": "CertEnumCertificatesInStore"
        },
        {
            "signature": "DWORD CertEnumCRLContextProperties( [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwPropId );",
            "name": "CertEnumCRLContextProperties"
        },
        {
            "signature": "PCCRL_CONTEXT CertEnumCRLsInStore( [in] HCERTSTORE hCertStore, [in] PCCRL_CONTEXT pPrevCrlContext );",
            "name": "CertEnumCRLsInStore"
        },
        {
            "signature": "DWORD CertEnumCTLContextProperties( [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwPropId );",
            "name": "CertEnumCTLContextProperties"
        },
        {
            "signature": "PCCTL_CONTEXT CertEnumCTLsInStore( [in] HCERTSTORE hCertStore, [in] PCCTL_CONTEXT pPrevCtlContext );",
            "name": "CertEnumCTLsInStore"
        },
        {
            "signature": "BOOL CertEnumPhysicalStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] void *pvArg, [in] PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum );",
            "name": "CertEnumPhysicalStore"
        },
        {
            "signature": "BOOL CertEnumSubjectInSortedCTL( [in] PCCTL_CONTEXT pCtlContext, [in, out] void **ppvNextSubject, [out] PCRYPT_DER_BLOB pSubjectIdentifier, [out] PCRYPT_DER_BLOB pEncodedAttributes );",
            "name": "CertEnumSubjectInSortedCTL"
        },
        {
            "signature": "BOOL CertEnumSystemStore( [in] DWORD dwFlags, [in, optional] void *pvSystemStoreLocationPara, [in] void *pvArg, [in] PFN_CERT_ENUM_SYSTEM_STORE pfnEnum );",
            "name": "CertEnumSystemStore"
        },
        {
            "signature": "BOOL CertEnumSystemStoreLocation( [in] DWORD dwFlags, [in] void *pvArg, [in] PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum );",
            "name": "CertEnumSystemStoreLocation"
        },
        {
            "signature": "PCRYPT_ATTRIBUTE CertFindAttribute( [in] LPCSTR pszObjId, [in] DWORD cAttr, [in] CRYPT_ATTRIBUTE [] rgAttr );",
            "name": "CertFindAttribute"
        },
        {
            "signature": "BOOL CertFindCertificateInCRL( [in] PCCERT_CONTEXT pCert, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwFlags, [in, optional] void *pvReserved, [out] PCRL_ENTRY *ppCrlEntry );",
            "name": "CertFindCertificateInCRL"
        },
        {
            "signature": "PCCERT_CONTEXT CertFindCertificateInStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] DWORD dwFindFlags, [in] DWORD dwFindType, [in] const void *pvFindPara, [in] PCCERT_CONTEXT pPrevCertContext );",
            "name": "CertFindCertificateInStore"
        },
        {
            "signature": "PCCERT_CHAIN_CONTEXT CertFindChainInStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] DWORD dwFindFlags, [in] DWORD dwFindType, [in] const void *pvFindPara, [in] PCCERT_CHAIN_CONTEXT pPrevChainContext );",
            "name": "CertFindChainInStore"
        },
        {
            "signature": "PCCRL_CONTEXT CertFindCRLInStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] DWORD dwFindFlags, [in] DWORD dwFindType, [in] const void *pvFindPara, [in] PCCRL_CONTEXT pPrevCrlContext );",
            "name": "CertFindCRLInStore"
        },
        {
            "signature": "PCCTL_CONTEXT CertFindCTLInStore( [in] HCERTSTORE hCertStore, [in] DWORD dwMsgAndCertEncodingType, [in] DWORD dwFindFlags, [in] DWORD dwFindType, [in] const void *pvFindPara, [in] PCCTL_CONTEXT pPrevCtlContext );",
            "name": "CertFindCTLInStore"
        },
        {
            "signature": "PCERT_EXTENSION CertFindExtension( [in] LPCSTR pszObjId, [in] DWORD cExtensions, [in] CERT_EXTENSION [] rgExtensions );",
            "name": "CertFindExtension"
        },
        {
            "signature": "PCERT_RDN_ATTR CertFindRDNAttr( [in] LPCSTR pszObjId, [in] PCERT_NAME_INFO pName );",
            "name": "CertFindRDNAttr"
        },
        {
            "signature": "PCTL_ENTRY CertFindSubjectInCTL( [in] DWORD dwEncodingType, [in] DWORD dwSubjectType, [in] void *pvSubject, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwFlags );",
            "name": "CertFindSubjectInCTL"
        },
        {
            "signature": "BOOL CertFindSubjectInSortedCTL( [in] PCRYPT_DATA_BLOB pSubjectIdentifier, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwFlags, [in] void *pvReserved, [out] PCRYPT_DER_BLOB pEncodedAttributes );",
            "name": "CertFindSubjectInSortedCTL"
        },
        {
            "signature": "void CertFreeCertificateChain( [in] PCCERT_CHAIN_CONTEXT pChainContext );",
            "name": "CertFreeCertificateChain"
        },
        {
            "signature": "void CertFreeCertificateChainEngine( [in] HCERTCHAINENGINE hChainEngine );",
            "name": "CertFreeCertificateChainEngine"
        },
        {
            "signature": "void CertFreeCertificateChainList( [in] PCCERT_CHAIN_CONTEXT *prgpSelection );",
            "name": "CertFreeCertificateChainList"
        },
        {
            "signature": "BOOL CertFreeCertificateContext( [in] PCCERT_CONTEXT pCertContext );",
            "name": "CertFreeCertificateContext"
        },
        {
            "signature": "BOOL CertFreeCRLContext( [in] PCCRL_CONTEXT pCrlContext );",
            "name": "CertFreeCRLContext"
        },
        {
            "signature": "BOOL CertFreeCTLContext( [in] PCCTL_CONTEXT pCtlContext );",
            "name": "CertFreeCTLContext"
        },
        {
            "signature": "void CertFreeServerOcspResponseContext( [in] PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext );",
            "name": "CertFreeServerOcspResponseContext"
        },
        {
            "signature": "BOOL CertGetCertificateChain( [in, optional] HCERTCHAINENGINE hChainEngine, [in] PCCERT_CONTEXT pCertContext, [in, optional] LPFILETIME pTime, [in] HCERTSTORE hAdditionalStore, [in] PCERT_CHAIN_PARA pChainPara, [in] DWORD dwFlags, [in] LPVOID pvReserved, [out] PCCERT_CHAIN_CONTEXT *ppChainContext );",
            "name": "CertGetCertificateChain"
        },
        {
            "signature": "BOOL CertGetCertificateContextProperty( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwPropId, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CertGetCertificateContextProperty"
        },
        {
            "signature": "BOOL CertGetCRLContextProperty( [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwPropId, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CertGetCRLContextProperty"
        },
        {
            "signature": "PCCRL_CONTEXT CertGetCRLFromStore( [in] HCERTSTORE hCertStore, [in, optional] PCCERT_CONTEXT pIssuerContext, [in] PCCRL_CONTEXT pPrevCrlContext, [in, out] DWORD *pdwFlags );",
            "name": "CertGetCRLFromStore"
        },
        {
            "signature": "BOOL CertGetCTLContextProperty( [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwPropId, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CertGetCTLContextProperty"
        },
        {
            "signature": "BOOL CertGetEnhancedKeyUsage( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwFlags, [out] PCERT_ENHKEY_USAGE pUsage, [in, out] DWORD *pcbUsage );",
            "name": "CertGetEnhancedKeyUsage"
        },
        {
            "signature": "BOOL CertGetIntendedKeyUsage( [in] DWORD dwCertEncodingType, [in] PCERT_INFO pCertInfo, [out] BYTE *pbKeyUsage, [in] DWORD cbKeyUsage );",
            "name": "CertGetIntendedKeyUsage"
        },
        {
            "signature": "PCCERT_CONTEXT CertGetIssuerCertificateFromStore( [in] HCERTSTORE hCertStore, [in] PCCERT_CONTEXT pSubjectContext, [in, optional] PCCERT_CONTEXT pPrevIssuerContext, [in, out] DWORD *pdwFlags );",
            "name": "CertGetIssuerCertificateFromStore"
        },
        {
            "signature": "DWORD CertGetNameStringA( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwType, [in] DWORD dwFlags, [in] void *pvTypePara, [out] LPSTR pszNameString, [in] DWORD cchNameString );",
            "name": "CertGetNameStringA"
        },
        {
            "signature": "DWORD CertGetNameStringW( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwType, [in] DWORD dwFlags, [in] void *pvTypePara, [out] LPWSTR pszNameString, [in] DWORD cchNameString );",
            "name": "CertGetNameStringW"
        },
        {
            "signature": "DWORD CertGetPublicKeyLength( [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pPublicKey );",
            "name": "CertGetPublicKeyLength"
        },
        {
            "signature": "PCCERT_SERVER_OCSP_RESPONSE_CONTEXT CertGetServerOcspResponseContext( [in] HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, [in] DWORD dwFlags, LPVOID pvReserved );",
            "name": "CertGetServerOcspResponseContext"
        },
        {
            "signature": "BOOL CertGetStoreProperty( [in] HCERTSTORE hCertStore, [in] DWORD dwPropId, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CertGetStoreProperty"
        },
        {
            "signature": "PCCERT_CONTEXT CertGetSubjectCertificateFromStore( [in] HCERTSTORE hCertStore, [in] DWORD dwCertEncodingType, [in] PCERT_INFO pCertId );",
            "name": "CertGetSubjectCertificateFromStore"
        },
        {
            "signature": "BOOL CertGetValidUsages( [in] DWORD cCerts, [in] PCCERT_CONTEXT *rghCerts, [out] int *cNumOIDs, [out] LPSTR *rghOIDs, [in, out] DWORD *pcbOIDs );",
            "name": "CertGetValidUsages"
        },
        {
            "signature": "BOOL CertIsRDNAttrsInCertificateName( [in] DWORD dwCertEncodingType, [in] DWORD dwFlags, [in] PCERT_NAME_BLOB pCertName, [in] PCERT_RDN pRDN );",
            "name": "CertIsRDNAttrsInCertificateName"
        },
        {
            "signature": "BOOL CertIsStrongHashToSign( [in] PCCERT_STRONG_SIGN_PARA pStrongSignPara, [in] LPCWSTR pwszCNGHashAlgid, [in, optional] PCCERT_CONTEXT pSigningCert );",
            "name": "CertIsStrongHashToSign"
        },
        {
            "signature": "BOOL CertIsValidCRLForCertificate( [in] PCCERT_CONTEXT pCert, [in] PCCRL_CONTEXT pCrl, [in] DWORD dwFlags, [in] void *pvReserved );",
            "name": "CertIsValidCRLForCertificate"
        },
        {
            "signature": "DWORD CertNameToStrA( [in] DWORD dwCertEncodingType, [in] PCERT_NAME_BLOB pName, [in] DWORD dwStrType, [out] LPSTR psz, [in] DWORD csz );",
            "name": "CertNameToStrA"
        },
        {
            "signature": "DWORD CertNameToStrW( [in] DWORD dwCertEncodingType, [in] PCERT_NAME_BLOB pName, [in] DWORD dwStrType, [out] LPWSTR psz, [in] DWORD csz );",
            "name": "CertNameToStrW"
        },
        {
            "signature": "DWORD CertOIDToAlgId( [in] LPCSTR pszObjId );",
            "name": "CertOIDToAlgId"
        },
        {
            "signature": "HCERT_SERVER_OCSP_RESPONSE CertOpenServerOcspResponse( [in] PCCERT_CHAIN_CONTEXT pChainContext, [in] DWORD dwFlags, PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA pOpenPara );",
            "name": "CertOpenServerOcspResponse"
        },
        {
            "signature": "HCERTSTORE CertOpenStore( [in] LPCSTR lpszStoreProvider, [in] DWORD dwEncodingType, [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwFlags, [in] const void *pvPara );",
            "name": "CertOpenStore"
        },
        {
            "signature": "HCERTSTORE CertOpenSystemStoreA( [in] HCRYPTPROV_LEGACY hProv, [in] LPCSTR szSubsystemProtocol );",
            "name": "CertOpenSystemStoreA"
        },
        {
            "signature": "HCERTSTORE CertOpenSystemStoreW( [in] HCRYPTPROV_LEGACY hProv, [in] LPCWSTR szSubsystemProtocol );",
            "name": "CertOpenSystemStoreW"
        },
        {
            "signature": "DWORD CertRDNValueToStrA( [in] DWORD dwValueType, [in] PCERT_RDN_VALUE_BLOB pValue, [out] LPSTR psz, [in] DWORD csz );",
            "name": "CertRDNValueToStrA"
        },
        {
            "signature": "DWORD CertRDNValueToStrW( [in] DWORD dwValueType, [in] PCERT_RDN_VALUE_BLOB pValue, [out] LPWSTR psz, [in] DWORD csz );",
            "name": "CertRDNValueToStrW"
        },
        {
            "signature": "BOOL CertRegisterPhysicalStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] LPCWSTR pwszStoreName, [in] PCERT_PHYSICAL_STORE_INFO pStoreInfo, [in] void *pvReserved );",
            "name": "CertRegisterPhysicalStore"
        },
        {
            "signature": "BOOL CertRegisterSystemStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] PCERT_SYSTEM_STORE_INFO pStoreInfo, [in] void *pvReserved );",
            "name": "CertRegisterSystemStore"
        },
        {
            "signature": "BOOL CertRemoveEnhancedKeyUsageIdentifier( [in] PCCERT_CONTEXT pCertContext, [in] LPCSTR pszUsageIdentifier );",
            "name": "CertRemoveEnhancedKeyUsageIdentifier"
        },
        {
            "signature": "void CertRemoveStoreFromCollection( [in] HCERTSTORE hCollectionStore, [in] HCERTSTORE hSiblingStore );",
            "name": "CertRemoveStoreFromCollection"
        },
        {
            "signature": "BOOL CertResyncCertificateChainEngine( [in, optional] HCERTCHAINENGINE hChainEngine );",
            "name": "CertResyncCertificateChainEngine"
        },
        {
            "signature": "BOOL CertRetrieveLogoOrBiometricInfo( [in] PCCERT_CONTEXT pCertContext, [in] LPCSTR lpszLogoOrBiometricType, [in] DWORD dwRetrievalFlags, [in] DWORD dwTimeout, [in] DWORD dwFlags, void *pvReserved, [out] BYTE **ppbData, [out] DWORD *pcbData, [out] LPWSTR *ppwszMimeType );",
            "name": "CertRetrieveLogoOrBiometricInfo"
        },
        {
            "signature": "BOOL CertSaveStore( [in] HCERTSTORE hCertStore, [in] DWORD dwEncodingType, [in] DWORD dwSaveAs, [in] DWORD dwSaveTo, [in, out] void *pvSaveToPara, [in] DWORD dwFlags );",
            "name": "CertSaveStore"
        },
        {
            "signature": "BOOL CertSelectCertificateChains( [in, optional] LPCGUID pSelectionContext, [in] DWORD dwFlags, [in, optional] PCCERT_SELECT_CHAIN_PARA pChainParameters, [in] DWORD cCriteria, [in, optional] PCCERT_SELECT_CRITERIA rgpCriteria, [in] HCERTSTORE hStore, [out] PDWORD pcSelection, [out] PCCERT_CHAIN_CONTEXT **pprgpSelection );",
            "name": "CertSelectCertificateChains"
        },
        {
            "signature": "BOOL CertSerializeCertificateStoreElement( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwFlags, [out] BYTE *pbElement, [in, out] DWORD *pcbElement );",
            "name": "CertSerializeCertificateStoreElement"
        },
        {
            "signature": "BOOL CertSerializeCRLStoreElement( [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwFlags, [out] BYTE *pbElement, [in, out] DWORD *pcbElement );",
            "name": "CertSerializeCRLStoreElement"
        },
        {
            "signature": "BOOL CertSerializeCTLStoreElement( [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwFlags, [out] BYTE *pbElement, [in, out] DWORD *pcbElement );",
            "name": "CertSerializeCTLStoreElement"
        },
        {
            "signature": "BOOL CertSetCertificateContextPropertiesFromCTLEntry( [in] PCCERT_CONTEXT pCertContext, [in] PCTL_ENTRY pCtlEntry, [in] DWORD dwFlags );",
            "name": "CertSetCertificateContextPropertiesFromCTLEntry"
        },
        {
            "signature": "BOOL CertSetCertificateContextProperty( [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData );",
            "name": "CertSetCertificateContextProperty"
        },
        {
            "signature": "BOOL CertSetCRLContextProperty( [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData );",
            "name": "CertSetCRLContextProperty"
        },
        {
            "signature": "BOOL CertSetCTLContextProperty( [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData );",
            "name": "CertSetCTLContextProperty"
        },
        {
            "signature": "BOOL CertSetEnhancedKeyUsage( [in] PCCERT_CONTEXT pCertContext, [in] PCERT_ENHKEY_USAGE pUsage );",
            "name": "CertSetEnhancedKeyUsage"
        },
        {
            "signature": "BOOL CertSetStoreProperty( [in] HCERTSTORE hCertStore, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData );",
            "name": "CertSetStoreProperty"
        },
        {
            "signature": "BOOL CertStrToNameA( [in] DWORD dwCertEncodingType, [in] LPCSTR pszX500, [in] DWORD dwStrType, [in, optional] void *pvReserved, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded, [out, optional] LPCSTR *ppszError );",
            "name": "CertStrToNameA"
        },
        {
            "signature": "BOOL CertStrToNameW( [in] DWORD dwCertEncodingType, [in] LPCWSTR pszX500, [in] DWORD dwStrType, [in, optional] void *pvReserved, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded, [out, optional] LPCWSTR *ppszError );",
            "name": "CertStrToNameW"
        },
        {
            "signature": "BOOL CertUnregisterPhysicalStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] LPCWSTR pwszStoreName );",
            "name": "CertUnregisterPhysicalStore"
        },
        {
            "signature": "BOOL CertUnregisterSystemStore( [in] const void *pvSystemStore, [in] DWORD dwFlags );",
            "name": "CertUnregisterSystemStore"
        },
        {
            "signature": "BOOL CertVerifyCertificateChainPolicy( [in] LPCSTR pszPolicyOID, [in] PCCERT_CHAIN_CONTEXT pChainContext, [in] PCERT_CHAIN_POLICY_PARA pPolicyPara, [in, out] PCERT_CHAIN_POLICY_STATUS pPolicyStatus );",
            "name": "CertVerifyCertificateChainPolicy"
        },
        {
            "signature": "BOOL CertVerifyCRLRevocation( [in] DWORD dwCertEncodingType, [in] PCERT_INFO pCertId, [in] DWORD cCrlInfo, [in] PCRL_INFO [] rgpCrlInfo );",
            "name": "CertVerifyCRLRevocation"
        },
        {
            "signature": "LONG CertVerifyCRLTimeValidity( [in] LPFILETIME pTimeToVerify, [in] PCRL_INFO pCrlInfo );",
            "name": "CertVerifyCRLTimeValidity"
        },
        {
            "signature": "BOOL CertVerifyCTLUsage( [in] DWORD dwEncodingType, [in] DWORD dwSubjectType, [in] void *pvSubject, [in] PCTL_USAGE pSubjectUsage, [in] DWORD dwFlags, [in, optional] PCTL_VERIFY_USAGE_PARA pVerifyUsagePara, [in, out] PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus );",
            "name": "CertVerifyCTLUsage"
        },
        {
            "signature": "BOOL CertVerifyRevocation( [in] DWORD dwEncodingType, [in] DWORD dwRevType, [in] DWORD cContext, [in] PVOID [] rgpvContext, [in] DWORD dwFlags, [in, optional] PCERT_REVOCATION_PARA pRevPara, [in, out] PCERT_REVOCATION_STATUS pRevStatus );",
            "name": "CertVerifyRevocation"
        },
        {
            "signature": "BOOL CertVerifySubjectCertificateContext( [in] PCCERT_CONTEXT pSubject, [in, optional] PCCERT_CONTEXT pIssuer, [in, out] DWORD *pdwFlags );",
            "name": "CertVerifySubjectCertificateContext"
        },
        {
            "signature": "LONG CertVerifyTimeValidity( [in] LPFILETIME pTimeToVerify, [in] PCERT_INFO pCertInfo );",
            "name": "CertVerifyTimeValidity"
        },
        {
            "signature": "BOOL CertVerifyValidityNesting( [in] PCERT_INFO pSubjectInfo, [in] PCERT_INFO pIssuerInfo );",
            "name": "CertVerifyValidityNesting"
        },
        {
            "signature": "BOOL CryptAcquireCertificatePrivateKey( [in] PCCERT_CONTEXT pCert, [in] DWORD dwFlags, [in, optional] void *pvParameters, [out] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey, [out] DWORD *pdwKeySpec, [out] BOOL *pfCallerFreeProvOrNCryptKey );",
            "name": "CryptAcquireCertificatePrivateKey"
        },
        {
            "signature": "BOOL CryptAcquireContextA( [out] HCRYPTPROV *phProv, [in] LPCSTR szContainer, [in] LPCSTR szProvider, [in] DWORD dwProvType, [in] DWORD dwFlags );",
            "name": "CryptAcquireContextA"
        },
        {
            "signature": "BOOL CryptAcquireContextW( [out] HCRYPTPROV *phProv, [in] LPCWSTR szContainer, [in] LPCWSTR szProvider, [in] DWORD dwProvType, [in] DWORD dwFlags );",
            "name": "CryptAcquireContextW"
        },
        {
            "signature": "BOOL CryptBinaryToStringA( [in] const BYTE *pbBinary, [in] DWORD cbBinary, [in] DWORD dwFlags, [out, optional] LPSTR pszString, [in, out] DWORD *pcchString );",
            "name": "CryptBinaryToStringA"
        },
        {
            "signature": "BOOL CryptBinaryToStringW( [in] const BYTE *pbBinary, [in] DWORD cbBinary, [in] DWORD dwFlags, [out, optional] LPWSTR pszString, [in, out] DWORD *pcchString );",
            "name": "CryptBinaryToStringW"
        },
        {
            "signature": "BOOL CryptCloseAsyncHandle( HCRYPTASYNC hAsync );",
            "name": "CryptCloseAsyncHandle"
        },
        {
            "signature": "BOOL CryptContextAddRef( [in] HCRYPTPROV hProv, [in] DWORD *pdwReserved, [in] DWORD dwFlags );",
            "name": "CryptContextAddRef"
        },
        {
            "signature": "BOOL CryptCreateAsyncHandle( DWORD dwFlags, PHCRYPTASYNC phAsync );",
            "name": "CryptCreateAsyncHandle"
        },
        {
            "signature": "BOOL CryptCreateHash( [in] HCRYPTPROV hProv, [in] ALG_ID Algid, [in] HCRYPTKEY hKey, [in] DWORD dwFlags, [out] HCRYPTHASH *phHash );",
            "name": "CryptCreateHash"
        },
        {
            "signature": "BOOL CryptCreateKeyIdentifierFromCSP( [in] DWORD dwCertEncodingType, [in] LPCSTR pszPubKeyOID, [in] const PUBLICKEYSTRUC *pPubKeyStruc, [in] DWORD cbPubKeyStruc, [in] DWORD dwFlags, [in] void *pvReserved, [out] BYTE *pbHash, [in, out] DWORD *pcbHash );",
            "name": "CryptCreateKeyIdentifierFromCSP"
        },
        {
            "signature": "BOOL CryptDecodeMessage( [in] DWORD dwMsgTypeFlags, [in] PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, [in] PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, [in] DWORD dwSignerIndex, [in] const BYTE *pbEncodedBlob, [in] DWORD cbEncodedBlob, [in] DWORD dwPrevInnerContentType, [out, optional] DWORD *pdwMsgType, [out, optional] DWORD *pdwInnerContentType, [out, optional] BYTE *pbDecoded, [in, out, optional] DWORD *pcbDecoded, [out, optional] PCCERT_CONTEXT *ppXchgCert, [out, optional] PCCERT_CONTEXT *ppSignerCert );",
            "name": "CryptDecodeMessage"
        },
        {
            "signature": "BOOL CryptDecodeObject( [in] DWORD dwCertEncodingType, [in] LPCSTR lpszStructType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [in] DWORD dwFlags, [out] void *pvStructInfo, [in, out] DWORD *pcbStructInfo );",
            "name": "CryptDecodeObject"
        },
        {
            "signature": "BOOL CryptDecodeObjectEx( [in] DWORD dwCertEncodingType, [in] LPCSTR lpszStructType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [in] DWORD dwFlags, [in] PCRYPT_DECODE_PARA pDecodePara, [out] void *pvStructInfo, [in, out] DWORD *pcbStructInfo );",
            "name": "CryptDecodeObjectEx"
        },
        {
            "signature": "BOOL CryptDecrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen );",
            "name": "CryptDecrypt"
        },
        {
            "signature": "BOOL CryptDecryptAndVerifyMessageSignature( [in] PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, [in] PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, [in] DWORD dwSignerIndex, [in] const BYTE *pbEncryptedBlob, [in] DWORD cbEncryptedBlob, [out, optional] BYTE *pbDecrypted, [in, out, optional] DWORD *pcbDecrypted, [out, optional] PCCERT_CONTEXT *ppXchgCert, [out, optional] PCCERT_CONTEXT *ppSignerCert );",
            "name": "CryptDecryptAndVerifyMessageSignature"
        },
        {
            "signature": "BOOL CryptDecryptMessage( [in] PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara, [in] const BYTE *pbEncryptedBlob, [in] DWORD cbEncryptedBlob, [out, optional] BYTE *pbDecrypted, [in, out, optional] DWORD *pcbDecrypted, [out, optional] PCCERT_CONTEXT *ppXchgCert );",
            "name": "CryptDecryptMessage"
        },
        {
            "signature": "BOOL CryptDeriveKey( [in] HCRYPTPROV hProv, [in] ALG_ID Algid, [in] HCRYPTHASH hBaseData, [in] DWORD dwFlags, [in, out] HCRYPTKEY *phKey );",
            "name": "CryptDeriveKey"
        },
        {
            "signature": "BOOL CryptDestroyHash( [in] HCRYPTHASH hHash );",
            "name": "CryptDestroyHash"
        },
        {
            "signature": "BOOL CryptDestroyKey( [in] HCRYPTKEY hKey );",
            "name": "CryptDestroyKey"
        },
        {
            "signature": "BOOL CryptDuplicateHash( [in] HCRYPTHASH hHash, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] HCRYPTHASH *phHash );",
            "name": "CryptDuplicateHash"
        },
        {
            "signature": "BOOL CryptDuplicateKey( [in] HCRYPTKEY hKey, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] HCRYPTKEY *phKey );",
            "name": "CryptDuplicateKey"
        },
        {
            "signature": "BOOL CryptEncodeObject( [in] DWORD dwCertEncodingType, [in] LPCSTR lpszStructType, [in] const void *pvStructInfo, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded );",
            "name": "CryptEncodeObject"
        },
        {
            "signature": "BOOL CryptEncodeObjectEx( [in] DWORD dwCertEncodingType, [in] LPCSTR lpszStructType, [in] const void *pvStructInfo, [in] DWORD dwFlags, [in] PCRYPT_ENCODE_PARA pEncodePara, [out] void *pvEncoded, [in, out] DWORD *pcbEncoded );",
            "name": "CryptEncodeObjectEx"
        },
        {
            "signature": "BOOL CryptEncrypt( [in] HCRYPTKEY hKey, [in] HCRYPTHASH hHash, [in] BOOL Final, [in] DWORD dwFlags, [in, out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwBufLen );",
            "name": "CryptEncrypt"
        },
        {
            "signature": "BOOL CryptEncryptMessage( [in] PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, [in] DWORD cRecipientCert, [in] PCCERT_CONTEXT [] rgpRecipientCert, [in] const BYTE *pbToBeEncrypted, [in] DWORD cbToBeEncrypted, [out] BYTE *pbEncryptedBlob, [in, out] DWORD *pcbEncryptedBlob );",
            "name": "CryptEncryptMessage"
        },
        {
            "signature": "BOOL CryptEnumKeyIdentifierProperties( [in, optional] const CRYPT_HASH_BLOB *pKeyIdentifier, [in] DWORD dwPropId, [in] DWORD dwFlags, [in, optional] LPCWSTR pwszComputerName, [in] void *pvReserved, [in, optional] void *pvArg, [in] PFN_CRYPT_ENUM_KEYID_PROP pfnEnum );",
            "name": "CryptEnumKeyIdentifierProperties"
        },
        {
            "signature": "BOOL CryptEnumOIDFunction( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCSTR pszOID, [in] DWORD dwFlags, [in] void *pvArg, [in] PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc );",
            "name": "CryptEnumOIDFunction"
        },
        {
            "signature": "BOOL CryptEnumOIDInfo( [in] DWORD dwGroupId, [in] DWORD dwFlags, [in] void *pvArg, [in] PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo );",
            "name": "CryptEnumOIDInfo"
        },
        {
            "signature": "BOOL CryptEnumProvidersA( [in] DWORD dwIndex, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] DWORD *pdwProvType, [out] LPSTR szProvName, [in, out] DWORD *pcbProvName );",
            "name": "CryptEnumProvidersA"
        },
        {
            "signature": "BOOL CryptEnumProvidersW( [in] DWORD dwIndex, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] DWORD *pdwProvType, [out] LPWSTR szProvName, [in, out] DWORD *pcbProvName );",
            "name": "CryptEnumProvidersW"
        },
        {
            "signature": "BOOL CryptEnumProviderTypesA( [in] DWORD dwIndex, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] DWORD *pdwProvType, [out] LPSTR szTypeName, [in, out] DWORD *pcbTypeName );",
            "name": "CryptEnumProviderTypesA"
        },
        {
            "signature": "BOOL CryptEnumProviderTypesW( [in] DWORD dwIndex, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] DWORD *pdwProvType, [out] LPWSTR szTypeName, [in, out] DWORD *pcbTypeName );",
            "name": "CryptEnumProviderTypesW"
        },
        {
            "signature": "BOOL CryptExportKey( [in] HCRYPTKEY hKey, [in] HCRYPTKEY hExpKey, [in] DWORD dwBlobType, [in] DWORD dwFlags, [out] BYTE *pbData, [in, out] DWORD *pdwDataLen );",
            "name": "CryptExportKey"
        },
        {
            "signature": "BOOL CryptExportPKCS8( [in] HCRYPTPROV hCryptProv, [in] DWORD dwKeySpec, [in] LPSTR pszPrivateKeyObjId, [in] DWORD dwFlags, [in, optional] void *pvAuxInfo, [out, optional] BYTE *pbPrivateKeyBlob, [in, out] DWORD *pcbPrivateKeyBlob );",
            "name": "CryptExportPKCS8"
        },
        {
            "signature": "BOOL CryptExportPKCS8Ex( [in] CRYPT_PKCS8_EXPORT_PARAMS *psExportParams, [in] DWORD dwFlags, [in, optional] void *pvAuxInfo, [out, optional] BYTE *pbPrivateKeyBlob, [in, out] DWORD *pcbPrivateKeyBlob );",
            "name": "CryptExportPKCS8Ex"
        },
        {
            "signature": "BOOL CryptExportPublicKeyInfo( [in] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [in] DWORD dwKeySpec, [in] DWORD dwCertEncodingType, [out] PCERT_PUBLIC_KEY_INFO pInfo, [in, out] DWORD *pcbInfo );",
            "name": "CryptExportPublicKeyInfo"
        },
        {
            "signature": "BOOL CryptExportPublicKeyInfoEx( [in] HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, [in] DWORD dwKeySpec, [in] DWORD dwCertEncodingType, [in] LPSTR pszPublicKeyObjId, [in] DWORD dwFlags, [in] void *pvAuxInfo, [out] PCERT_PUBLIC_KEY_INFO pInfo, [in, out] DWORD *pcbInfo );",
            "name": "CryptExportPublicKeyInfoEx"
        },
        {
            "signature": "BOOL CryptExportPublicKeyInfoFromBCryptKeyHandle( [in] BCRYPT_KEY_HANDLE hBCryptKey, [in] DWORD dwCertEncodingType, [in, optional] LPSTR pszPublicKeyObjId, [in] DWORD dwFlags, [in, optional] void *pvAuxInfo, [out, optional] PCERT_PUBLIC_KEY_INFO pInfo, [in, out] DWORD *pcbInfo );",
            "name": "CryptExportPublicKeyInfoFromBCryptKeyHandle"
        },
        {
            "signature": "BOOL CryptFindCertificateKeyProvInfo( [in] PCCERT_CONTEXT pCert, [in] DWORD dwFlags, [in] void *pvReserved );",
            "name": "CryptFindCertificateKeyProvInfo"
        },
        {
            "signature": "LPCWSTR CryptFindLocalizedName( [in] LPCWSTR pwszCryptName );",
            "name": "CryptFindLocalizedName"
        },
        {
            "signature": "PCCRYPT_OID_INFO CryptFindOIDInfo( [in] DWORD dwKeyType, [in] void *pvKey, [in] DWORD dwGroupId );",
            "name": "CryptFindOIDInfo"
        },
        {
            "signature": "BOOL CryptFormatObject( [in] DWORD dwCertEncodingType, [in] DWORD dwFormatType, [in] DWORD dwFormatStrType, [in] void *pFormatStruct, [in] LPCSTR lpszStructType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [out] void *pbFormat, [in, out] DWORD *pcbFormat );",
            "name": "CryptFormatObject"
        },
        {
            "signature": "BOOL CryptFreeOIDFunctionAddress( [in] HCRYPTOIDFUNCADDR hFuncAddr, [in] DWORD dwFlags );",
            "name": "CryptFreeOIDFunctionAddress"
        },
        {
            "signature": "BOOL CryptGenKey( [in] HCRYPTPROV hProv, [in] ALG_ID Algid, [in] DWORD dwFlags, [out] HCRYPTKEY *phKey );",
            "name": "CryptGenKey"
        },
        {
            "signature": "BOOL CryptGenRandom( [in] HCRYPTPROV hProv, [in] DWORD dwLen, [in, out] BYTE *pbBuffer );",
            "name": "CryptGenRandom"
        },
        {
            "signature": "BOOL CryptGetAsyncParam( HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID *ppvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC *ppfnFree );",
            "name": "CryptGetAsyncParam"
        },
        {
            "signature": "BOOL CryptGetDefaultOIDDllList( [in] HCRYPTOIDFUNCSET hFuncSet, [in] DWORD dwEncodingType, [out] WCHAR *pwszDllList, [in, out] DWORD *pcchDllList );",
            "name": "CryptGetDefaultOIDDllList"
        },
        {
            "signature": "BOOL CryptGetDefaultOIDFunctionAddress( [in] HCRYPTOIDFUNCSET hFuncSet, [in] DWORD dwEncodingType, [in, optional] LPCWSTR pwszDll, [in] DWORD dwFlags, [out] void **ppvFuncAddr, [in, out] HCRYPTOIDFUNCADDR *phFuncAddr );",
            "name": "CryptGetDefaultOIDFunctionAddress"
        },
        {
            "signature": "BOOL CryptGetDefaultProviderA( [in] DWORD dwProvType, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] LPSTR pszProvName, [in, out] DWORD *pcbProvName );",
            "name": "CryptGetDefaultProviderA"
        },
        {
            "signature": "BOOL CryptGetDefaultProviderW( [in] DWORD dwProvType, [in] DWORD *pdwReserved, [in] DWORD dwFlags, [out] LPWSTR pszProvName, [in, out] DWORD *pcbProvName );",
            "name": "CryptGetDefaultProviderW"
        },
        {
            "signature": "BOOL CryptGetHashParam( [in] HCRYPTHASH hHash, [in] DWORD dwParam, [out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwFlags );",
            "name": "CryptGetHashParam"
        },
        {
            "signature": "BOOL CryptGetKeyIdentifierProperty( [in] const CRYPT_HASH_BLOB *pKeyIdentifier, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] LPCWSTR pwszComputerName, [in] void *pvReserved, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CryptGetKeyIdentifierProperty"
        },
        {
            "signature": "BOOL CryptGetKeyParam( [in] HCRYPTKEY hKey, [in] DWORD dwParam, [out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwFlags );",
            "name": "CryptGetKeyParam"
        },
        {
            "signature": "HCERTSTORE CryptGetMessageCertificates( [in] DWORD dwMsgAndCertEncodingType, [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwFlags, [in] const BYTE *pbSignedBlob, [in] DWORD cbSignedBlob );",
            "name": "CryptGetMessageCertificates"
        },
        {
            "signature": "LONG CryptGetMessageSignerCount( [in] DWORD dwMsgEncodingType, [in] const BYTE *pbSignedBlob, [in] DWORD cbSignedBlob );",
            "name": "CryptGetMessageSignerCount"
        },
        {
            "signature": "BOOL CryptGetObjectUrl( [in] LPCSTR pszUrlOid, [in] LPVOID pvPara, [in] DWORD dwFlags, [out] PCRYPT_URL_ARRAY pUrlArray, [in, out] DWORD *pcbUrlArray, [out] PCRYPT_URL_INFO pUrlInfo, [in, out] DWORD *pcbUrlInfo, LPVOID pvReserved );",
            "name": "CryptGetObjectUrl"
        },
        {
            "signature": "BOOL CryptGetOIDFunctionAddress( [in] HCRYPTOIDFUNCSET hFuncSet, [in] DWORD dwEncodingType, [in] LPCSTR pszOID, [in] DWORD dwFlags, [out] void **ppvFuncAddr, [out] HCRYPTOIDFUNCADDR *phFuncAddr );",
            "name": "CryptGetOIDFunctionAddress"
        },
        {
            "signature": "BOOL CryptGetOIDFunctionValue( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCSTR pszOID, [in] LPCWSTR pwszValueName, [out] DWORD *pdwValueType, [out] BYTE *pbValueData, [in, out] DWORD *pcbValueData );",
            "name": "CryptGetOIDFunctionValue"
        },
        {
            "signature": "BOOL CryptGetProvParam( [in] HCRYPTPROV hProv, [in] DWORD dwParam, [out] BYTE *pbData, [in, out] DWORD *pdwDataLen, [in] DWORD dwFlags );",
            "name": "CryptGetProvParam"
        },
        {
            "signature": "BOOL CryptGetTimeValidObject( [in] LPCSTR pszTimeValidOid, [in] LPVOID pvPara, [in] PCCERT_CONTEXT pIssuer, [in, optional] LPFILETIME pftValidFor, [in] DWORD dwFlags, [in] DWORD dwTimeout, [out, optional] LPVOID *ppvObject, [in, optional] PCRYPT_CREDENTIALS pCredentials, [in, out, optional] PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo );",
            "name": "CryptGetTimeValidObject"
        },
        {
            "signature": "BOOL CryptGetUserKey( [in] HCRYPTPROV hProv, [in] DWORD dwKeySpec, [out] HCRYPTKEY *phUserKey );",
            "name": "CryptGetUserKey"
        },
        {
            "signature": "BOOL CryptHashCertificate( [in] HCRYPTPROV_LEGACY hCryptProv, [in] ALG_ID Algid, [in] DWORD dwFlags, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [out] BYTE *pbComputedHash, [in, out] DWORD *pcbComputedHash );",
            "name": "CryptHashCertificate"
        },
        {
            "signature": "BOOL CryptHashCertificate2( [in] LPCWSTR pwszCNGHashAlgid, [in] DWORD dwFlags, void *pvReserved, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [out] BYTE *pbComputedHash, [in, out] DWORD *pcbComputedHash );",
            "name": "CryptHashCertificate2"
        },
        {
            "signature": "BOOL CryptHashData( [in] HCRYPTHASH hHash, [in] const BYTE *pbData, [in] DWORD dwDataLen, [in] DWORD dwFlags );",
            "name": "CryptHashData"
        },
        {
            "signature": "BOOL CryptHashMessage( [in] PCRYPT_HASH_MESSAGE_PARA pHashPara, [in] BOOL fDetachedHash, [in] DWORD cToBeHashed, [in] const BYTE * [] rgpbToBeHashed, [in] DWORD [] rgcbToBeHashed, [out] BYTE *pbHashedBlob, [in, out] DWORD *pcbHashedBlob, [out, optional] BYTE *pbComputedHash, [in, out, optional] DWORD *pcbComputedHash );",
            "name": "CryptHashMessage"
        },
        {
            "signature": "BOOL CryptHashPublicKeyInfo( [in] HCRYPTPROV_LEGACY hCryptProv, [in] ALG_ID Algid, [in] DWORD dwFlags, [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pInfo, [out] BYTE *pbComputedHash, [in, out] DWORD *pcbComputedHash );",
            "name": "CryptHashPublicKeyInfo"
        },
        {
            "signature": "BOOL CryptHashSessionKey( [in] HCRYPTHASH hHash, [in] HCRYPTKEY hKey, [in] DWORD dwFlags );",
            "name": "CryptHashSessionKey"
        },
        {
            "signature": "BOOL CryptHashToBeSigned( [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwCertEncodingType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [out] BYTE *pbComputedHash, [in, out] DWORD *pcbComputedHash );",
            "name": "CryptHashToBeSigned"
        },
        {
            "signature": "BOOL CryptImportKey( [in] HCRYPTPROV hProv, [in] const BYTE *pbData, [in] DWORD dwDataLen, [in] HCRYPTKEY hPubKey, [in] DWORD dwFlags, [out] HCRYPTKEY *phKey );",
            "name": "CryptImportKey"
        },
        {
            "signature": "BOOL CryptImportPKCS8( [in] CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, [in] DWORD dwFlags, [out, optional] HCRYPTPROV *phCryptProv, [in, optional] void *pvAuxInfo );",
            "name": "CryptImportPKCS8"
        },
        {
            "signature": "BOOL CryptImportPublicKeyInfo( [in] HCRYPTPROV hCryptProv, [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pInfo, [out] HCRYPTKEY *phKey );",
            "name": "CryptImportPublicKeyInfo"
        },
        {
            "signature": "BOOL CryptImportPublicKeyInfoEx( [in] HCRYPTPROV hCryptProv, [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pInfo, [in] ALG_ID aiKeyAlg, [in] DWORD dwFlags, [in] void *pvAuxInfo, [out] HCRYPTKEY *phKey );",
            "name": "CryptImportPublicKeyInfoEx"
        },
        {
            "signature": "BOOL CryptImportPublicKeyInfoEx2( [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pInfo, [in] DWORD dwFlags, [in] void *pvAuxInfo, [out] BCRYPT_KEY_HANDLE *phKey );",
            "name": "CryptImportPublicKeyInfoEx2"
        },
        {
            "signature": "HCRYPTOIDFUNCSET CryptInitOIDFunctionSet( [in] LPCSTR pszFuncName, [in] DWORD dwFlags );",
            "name": "CryptInitOIDFunctionSet"
        },
        {
            "signature": "BOOL CryptInstallDefaultContext( [in] HCRYPTPROV hCryptProv, [in] DWORD dwDefaultType, [in] const void *pvDefaultPara, [in] DWORD dwFlags, [in] void *pvReserved, [out] HCRYPTDEFAULTCONTEXT *phDefaultContext );",
            "name": "CryptInstallDefaultContext"
        },
        {
            "signature": "BOOL CryptInstallOIDFunctionAddress( [in] HMODULE hModule, [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] DWORD cFuncEntry, [in] const CRYPT_OID_FUNC_ENTRY [] rgFuncEntry, [in] DWORD dwFlags );",
            "name": "CryptInstallOIDFunctionAddress"
        },
        {
            "signature": "LPVOID CryptMemAlloc( [in] ULONG cbSize );",
            "name": "CryptMemAlloc"
        },
        {
            "signature": "void CryptMemFree( [in] LPVOID pv );",
            "name": "CryptMemFree"
        },
        {
            "signature": "LPVOID CryptMemRealloc( [in] LPVOID pv, [in] ULONG cbSize );",
            "name": "CryptMemRealloc"
        },
        {
            "signature": "DWORD CryptMsgCalculateEncodedLength( [in] DWORD dwMsgEncodingType, [in] DWORD dwFlags, [in] DWORD dwMsgType, [in] void const *pvMsgEncodeInfo, [in, optional] LPSTR pszInnerContentObjID, [in] DWORD cbData );",
            "name": "CryptMsgCalculateEncodedLength"
        },
        {
            "signature": "BOOL CryptMsgClose( [in] HCRYPTMSG hCryptMsg );",
            "name": "CryptMsgClose"
        },
        {
            "signature": "BOOL CryptMsgControl( [in] HCRYPTMSG hCryptMsg, [in] DWORD dwFlags, [in] DWORD dwCtrlType, [in] void const *pvCtrlPara );",
            "name": "CryptMsgControl"
        },
        {
            "signature": "BOOL CryptMsgCountersign( [in, out] HCRYPTMSG hCryptMsg, [in] DWORD dwIndex, [in] DWORD cCountersigners, [in] PCMSG_SIGNER_ENCODE_INFO rgCountersigners );",
            "name": "CryptMsgCountersign"
        },
        {
            "signature": "BOOL CryptMsgCountersignEncoded( [in] DWORD dwEncodingType, [in] PBYTE pbSignerInfo, [in] DWORD cbSignerInfo, [in] DWORD cCountersigners, [in] PCMSG_SIGNER_ENCODE_INFO rgCountersigners, [out] PBYTE pbCountersignature, [in, out] PDWORD pcbCountersignature );",
            "name": "CryptMsgCountersignEncoded"
        },
        {
            "signature": "HCRYPTMSG CryptMsgDuplicate( [in] HCRYPTMSG hCryptMsg );",
            "name": "CryptMsgDuplicate"
        },
        {
            "signature": "BOOL CryptMsgEncodeAndSignCTL( [in] DWORD dwMsgEncodingType, [in] PCTL_INFO pCtlInfo, [in] PCMSG_SIGNED_ENCODE_INFO pSignInfo, [in] DWORD dwFlags, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded );",
            "name": "CryptMsgEncodeAndSignCTL"
        },
        {
            "signature": "BOOL CryptMsgGetAndVerifySigner( [in] HCRYPTMSG hCryptMsg, [in] DWORD cSignerStore, [in, optional] HCERTSTORE *rghSignerStore, [in] DWORD dwFlags, [out, optional] PCCERT_CONTEXT *ppSigner, [in, out, optional] DWORD *pdwSignerIndex );",
            "name": "CryptMsgGetAndVerifySigner"
        },
        {
            "signature": "BOOL CryptMsgGetParam( [in] HCRYPTMSG hCryptMsg, [in] DWORD dwParamType, [in] DWORD dwIndex, [out] void *pvData, [in, out] DWORD *pcbData );",
            "name": "CryptMsgGetParam"
        },
        {
            "signature": "HCRYPTMSG CryptMsgOpenToDecode( [in] DWORD dwMsgEncodingType, [in] DWORD dwFlags, [in] DWORD dwMsgType, [in] HCRYPTPROV_LEGACY hCryptProv, [in] PCERT_INFO pRecipientInfo, [in, optional] PCMSG_STREAM_INFO pStreamInfo );",
            "name": "CryptMsgOpenToDecode"
        },
        {
            "signature": "HCRYPTMSG CryptMsgOpenToEncode( [in] DWORD dwMsgEncodingType, [in] DWORD dwFlags, [in] DWORD dwMsgType, [in] void const *pvMsgEncodeInfo, [in, optional] LPSTR pszInnerContentObjID, [in] PCMSG_STREAM_INFO pStreamInfo );",
            "name": "CryptMsgOpenToEncode"
        },
        {
            "signature": "BOOL CryptMsgSignCTL( [in] DWORD dwMsgEncodingType, [in] BYTE *pbCtlContent, [in] DWORD cbCtlContent, [in] PCMSG_SIGNED_ENCODE_INFO pSignInfo, [in] DWORD dwFlags, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded );",
            "name": "CryptMsgSignCTL"
        },
        {
            "signature": "BOOL CryptMsgUpdate( [in] HCRYPTMSG hCryptMsg, [in] const BYTE *pbData, [in] DWORD cbData, [in] BOOL fFinal );",
            "name": "CryptMsgUpdate"
        },
        {
            "signature": "BOOL CryptMsgVerifyCountersignatureEncoded( [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwEncodingType, [in] PBYTE pbSignerInfo, [in] DWORD cbSignerInfo, [in] PBYTE pbSignerInfoCountersignature, [in] DWORD cbSignerInfoCountersignature, [in] PCERT_INFO pciCountersigner );",
            "name": "CryptMsgVerifyCountersignatureEncoded"
        },
        {
            "signature": "BOOL CryptMsgVerifyCountersignatureEncodedEx( [in, optional] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwEncodingType, [in] PBYTE pbSignerInfo, [in] DWORD cbSignerInfo, [in] PBYTE pbSignerInfoCountersignature, [in] DWORD cbSignerInfoCountersignature, [in] DWORD dwSignerType, [in] void *pvSigner, DWORD dwFlags, void *pvExtra );",
            "name": "CryptMsgVerifyCountersignatureEncodedEx"
        },
        {
            "signature": "BOOL CryptQueryObject( [in] DWORD dwObjectType, [in] const void *pvObject, [in] DWORD dwExpectedContentTypeFlags, [in] DWORD dwExpectedFormatTypeFlags, [in] DWORD dwFlags, [out] DWORD *pdwMsgAndCertEncodingType, [out] DWORD *pdwContentType, [out] DWORD *pdwFormatType, [out] HCERTSTORE *phCertStore, [out] HCRYPTMSG *phMsg, [out] const void **ppvContext );",
            "name": "CryptQueryObject"
        },
        {
            "signature": "BOOL CryptRegisterDefaultOIDFunction( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] DWORD dwIndex, [in] LPCWSTR pwszDll );",
            "name": "CryptRegisterDefaultOIDFunction"
        },
        {
            "signature": "BOOL CryptRegisterOIDFunction( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCSTR pszOID, [in] LPCWSTR pwszDll, [in] LPCSTR pszOverrideFuncName );",
            "name": "CryptRegisterOIDFunction"
        },
        {
            "signature": "BOOL CryptRegisterOIDInfo( [in] PCCRYPT_OID_INFO pInfo, [in] DWORD dwFlags );",
            "name": "CryptRegisterOIDInfo"
        },
        {
            "signature": "BOOL CryptReleaseContext( [in] HCRYPTPROV hProv, [in] DWORD dwFlags );",
            "name": "CryptReleaseContext"
        },
        {
            "signature": "BOOL CryptRetrieveObjectByUrlA( [in] LPCSTR pszUrl, [in] LPCSTR pszObjectOid, [in] DWORD dwRetrievalFlags, [in] DWORD dwTimeout, [out] LPVOID *ppvObject, [in] HCRYPTASYNC hAsyncRetrieve, [in, optional] PCRYPT_CREDENTIALS pCredentials, [in, optional] LPVOID pvVerify, [in] PCRYPT_RETRIEVE_AUX_INFO pAuxInfo );",
            "name": "CryptRetrieveObjectByUrlA"
        },
        {
            "signature": "BOOL CryptRetrieveObjectByUrlW( [in] LPCWSTR pszUrl, [in] LPCSTR pszObjectOid, [in] DWORD dwRetrievalFlags, [in] DWORD dwTimeout, [out] LPVOID *ppvObject, [in] HCRYPTASYNC hAsyncRetrieve, [in, optional] PCRYPT_CREDENTIALS pCredentials, [in, optional] LPVOID pvVerify, [in] PCRYPT_RETRIEVE_AUX_INFO pAuxInfo );",
            "name": "CryptRetrieveObjectByUrlW"
        },
        {
            "signature": "BOOL CryptRetrieveTimeStamp( [in] LPCWSTR wszUrl, DWORD dwRetrievalFlags, DWORD dwTimeout, [in] LPCSTR pszHashId, [in, optional] const CRYPT_TIMESTAMP_PARA *pPara, [in] const BYTE *pbData, DWORD cbData, [out] PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, [out, optional] PCCERT_CONTEXT *ppTsSigner, [out, optional] HCERTSTORE *phStore );",
            "name": "CryptRetrieveTimeStamp"
        },
        {
            "signature": "BOOL CryptSetAsyncParam( HCRYPTASYNC hAsync, LPSTR pszParamOid, LPVOID pvParam, PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree );",
            "name": "CryptSetAsyncParam"
        },
        {
            "signature": "BOOL CryptSetHashParam( [in] HCRYPTHASH hHash, [in] DWORD dwParam, [in] const BYTE *pbData, [in] DWORD dwFlags );",
            "name": "CryptSetHashParam"
        },
        {
            "signature": "BOOL CryptSetKeyIdentifierProperty( [in] const CRYPT_HASH_BLOB *pKeyIdentifier, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] LPCWSTR pwszComputerName, [in] void *pvReserved, [out] const void *pvData );",
            "name": "CryptSetKeyIdentifierProperty"
        },
        {
            "signature": "BOOL CryptSetKeyParam( [in] HCRYPTKEY hKey, [in] DWORD dwParam, [in] const BYTE *pbData, [in] DWORD dwFlags );",
            "name": "CryptSetKeyParam"
        },
        {
            "signature": "BOOL CryptSetOIDFunctionValue( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCSTR pszOID, [in] LPCWSTR pwszValueName, [in] DWORD dwValueType, [in] const BYTE *pbValueData, [in] DWORD cbValueData );",
            "name": "CryptSetOIDFunctionValue"
        },
        {
            "signature": "BOOL CryptSetProviderA( [in] LPCSTR pszProvName, [in] DWORD dwProvType );",
            "name": "CryptSetProviderA"
        },
        {
            "signature": "BOOL CryptSetProviderExA( [in] LPCSTR pszProvName, [in] DWORD dwProvType, [in] DWORD *pdwReserved, [in] DWORD dwFlags );",
            "name": "CryptSetProviderExA"
        },
        {
            "signature": "BOOL CryptSetProviderExW( [in] LPCWSTR pszProvName, [in] DWORD dwProvType, [in] DWORD *pdwReserved, [in] DWORD dwFlags );",
            "name": "CryptSetProviderExW"
        },
        {
            "signature": "BOOL CryptSetProviderW( [in] LPCWSTR pszProvName, [in] DWORD dwProvType );",
            "name": "CryptSetProviderW"
        },
        {
            "signature": "BOOL CryptSetProvParam( [in] HCRYPTPROV hProv, [in] DWORD dwParam, [in] const BYTE *pbData, [in] DWORD dwFlags );",
            "name": "CryptSetProvParam"
        },
        {
            "signature": "BOOL CryptSignAndEncodeCertificate( [in] BCRYPT_KEY_HANDLE hBCryptKey, [in] DWORD dwKeySpec, [in] DWORD dwCertEncodingType, [in] LPCSTR lpszStructType, [in] const void *pvStructInfo, [in] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [in] const void *pvHashAuxInfo, [out] BYTE *pbEncoded, [in, out] DWORD *pcbEncoded );",
            "name": "CryptSignAndEncodeCertificate"
        },
        {
            "signature": "BOOL CryptSignAndEncryptMessage( [in] PCRYPT_SIGN_MESSAGE_PARA pSignPara, [in] PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara, [in] DWORD cRecipientCert, [in] PCCERT_CONTEXT [] rgpRecipientCert, [in] const BYTE *pbToBeSignedAndEncrypted, [in] DWORD cbToBeSignedAndEncrypted, [out] BYTE *pbSignedAndEncryptedBlob, [in, out] DWORD *pcbSignedAndEncryptedBlob );",
            "name": "CryptSignAndEncryptMessage"
        },
        {
            "signature": "BOOL CryptSignCertificate( [in] BCRYPT_KEY_HANDLE hBCryptKey, [in] DWORD dwKeySpec, [in] DWORD dwCertEncodingType, [in] const BYTE *pbEncodedToBeSigned, [in] DWORD cbEncodedToBeSigned, [in] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [in] const void *pvHashAuxInfo, [out] BYTE *pbSignature, [in, out] DWORD *pcbSignature );",
            "name": "CryptSignCertificate"
        },
        {
            "signature": "BOOL CryptSignHashA( [in] HCRYPTHASH hHash, [in] DWORD dwKeySpec, [in] LPCSTR szDescription, [in] DWORD dwFlags, [out] BYTE *pbSignature, [in, out] DWORD *pdwSigLen );",
            "name": "CryptSignHashA"
        },
        {
            "signature": "BOOL CryptSignHashW( [in] HCRYPTHASH hHash, [in] DWORD dwKeySpec, [in] LPCWSTR szDescription, [in] DWORD dwFlags, [out] BYTE *pbSignature, [in, out] DWORD *pdwSigLen );",
            "name": "CryptSignHashW"
        },
        {
            "signature": "BOOL CryptSignMessage( [in] PCRYPT_SIGN_MESSAGE_PARA pSignPara, [in] BOOL fDetachedSignature, [in] DWORD cToBeSigned, [in] const BYTE * [] rgpbToBeSigned, [in] DWORD [] rgcbToBeSigned, [out] BYTE *pbSignedBlob, [in, out] DWORD *pcbSignedBlob );",
            "name": "CryptSignMessage"
        },
        {
            "signature": "BOOL CryptSignMessageWithKey( [in] PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara, [in] const BYTE *pbToBeSigned, [in] DWORD cbToBeSigned, [out] BYTE *pbSignedBlob, [in, out] DWORD *pcbSignedBlob );",
            "name": "CryptSignMessageWithKey"
        },
        {
            "signature": "BOOL CryptStringToBinaryA( [in] LPCSTR pszString, [in] DWORD cchString, [in] DWORD dwFlags, [in] BYTE *pbBinary, [in, out] DWORD *pcbBinary, [out] DWORD *pdwSkip, [out] DWORD *pdwFlags );",
            "name": "CryptStringToBinaryA"
        },
        {
            "signature": "BOOL CryptStringToBinaryW( [in] LPCWSTR pszString, [in] DWORD cchString, [in] DWORD dwFlags, [in] BYTE *pbBinary, [in, out] DWORD *pcbBinary, [out] DWORD *pdwSkip, [out] DWORD *pdwFlags );",
            "name": "CryptStringToBinaryW"
        },
        {
            "signature": "BOOL CryptUninstallDefaultContext( [in] HCRYPTDEFAULTCONTEXT hDefaultContext, [in] DWORD dwFlags, [in] void *pvReserved );",
            "name": "CryptUninstallDefaultContext"
        },
        {
            "signature": "BOOL CryptUnregisterDefaultOIDFunction( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCWSTR pwszDll );",
            "name": "CryptUnregisterDefaultOIDFunction"
        },
        {
            "signature": "BOOL CryptUnregisterOIDFunction( [in] DWORD dwEncodingType, [in] LPCSTR pszFuncName, [in] LPCSTR pszOID );",
            "name": "CryptUnregisterOIDFunction"
        },
        {
            "signature": "BOOL CryptUnregisterOIDInfo( [in] PCCRYPT_OID_INFO pInfo );",
            "name": "CryptUnregisterOIDInfo"
        },
        {
            "signature": "BOOL CryptVerifyCertificateSignature( [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwCertEncodingType, [in] const BYTE *pbEncoded, [in] DWORD cbEncoded, [in] PCERT_PUBLIC_KEY_INFO pPublicKey );",
            "name": "CryptVerifyCertificateSignature"
        },
        {
            "signature": "BOOL CryptVerifyCertificateSignatureEx( [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwCertEncodingType, [in] DWORD dwSubjectType, [in] void *pvSubject, [in] DWORD dwIssuerType, [in] void *pvIssuer, [in] DWORD dwFlags, [in, out, optional] void *pvExtra );",
            "name": "CryptVerifyCertificateSignatureEx"
        },
        {
            "signature": "BOOL CryptVerifyDetachedMessageHash( [in] PCRYPT_HASH_MESSAGE_PARA pHashPara, [in] BYTE *pbDetachedHashBlob, [in] DWORD cbDetachedHashBlob, [in] DWORD cToBeHashed, [in] const BYTE * [] rgpbToBeHashed, [in] DWORD [] rgcbToBeHashed, [out] BYTE *pbComputedHash, [in, out] DWORD *pcbComputedHash );",
            "name": "CryptVerifyDetachedMessageHash"
        },
        {
            "signature": "BOOL CryptVerifyDetachedMessageSignature( [in] PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, [in] DWORD dwSignerIndex, [in] const BYTE *pbDetachedSignBlob, [in] DWORD cbDetachedSignBlob, [in] DWORD cToBeSigned, [in] const BYTE * [] rgpbToBeSigned, [in] DWORD [] rgcbToBeSigned, [out, optional] PCCERT_CONTEXT *ppSignerCert );",
            "name": "CryptVerifyDetachedMessageSignature"
        },
        {
            "signature": "BOOL CryptVerifyMessageHash( [in] PCRYPT_HASH_MESSAGE_PARA pHashPara, [in] BYTE *pbHashedBlob, [in] DWORD cbHashedBlob, [out] BYTE *pbToBeHashed, [in, out] DWORD *pcbToBeHashed, [out, optional] BYTE *pbComputedHash, [in, out, optional] DWORD *pcbComputedHash );",
            "name": "CryptVerifyMessageHash"
        },
        {
            "signature": "BOOL CryptVerifyMessageSignature( [in] PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara, [in] DWORD dwSignerIndex, [in] const BYTE *pbSignedBlob, [in] DWORD cbSignedBlob, [out] BYTE *pbDecoded, [in, out] DWORD *pcbDecoded, [out, optional] PCCERT_CONTEXT *ppSignerCert );",
            "name": "CryptVerifyMessageSignature"
        },
        {
            "signature": "BOOL CryptVerifyMessageSignatureWithKey( [in] PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara, [in] PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, [in] const BYTE *pbSignedBlob, [in] DWORD cbSignedBlob, [out] BYTE *pbDecoded, [in, out] DWORD *pcbDecoded );",
            "name": "CryptVerifyMessageSignatureWithKey"
        },
        {
            "signature": "BOOL CryptVerifySignatureA( [in] HCRYPTHASH hHash, [in] const BYTE *pbSignature, [in] DWORD dwSigLen, [in] HCRYPTKEY hPubKey, [in] LPCSTR szDescription, [in] DWORD dwFlags );",
            "name": "CryptVerifySignatureA"
        },
        {
            "signature": "BOOL CryptVerifySignatureW( [in] HCRYPTHASH hHash, [in] const BYTE *pbSignature, [in] DWORD dwSigLen, [in] HCRYPTKEY hPubKey, [in] LPCWSTR szDescription, [in] DWORD dwFlags );",
            "name": "CryptVerifySignatureW"
        },
        {
            "signature": "BOOL CryptVerifyTimeStampSignature( [in] const BYTE *pbTSContentInfo, DWORD cbTSContentInfo, [in, optional] const BYTE *pbData, DWORD cbData, [in, optional] HCERTSTORE hAdditionalStore, [out] PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, [out, optional] PCCERT_CONTEXT *ppTsSigner, [out, optional] HCERTSTORE *phStore );",
            "name": "CryptVerifyTimeStampSignature"
        },
        {
            "signature": "BOOL GetEncSChannel( [out] BYTE **pData, [out] DWORD *dwDecSize );",
            "name": "GetEncSChannel"
        },
        {
            "signature": "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC PcryptDecryptPrivateKeyFunc; BOOL PcryptDecryptPrivateKeyFunc( [in] CRYPT_ALGORITHM_IDENTIFIER Algorithm, [in] CRYPT_DATA_BLOB EncryptedPrivateKey, [out] BYTE *pbClearTextKey, [in, out] DWORD *pcbClearTextKey, [in] LPVOID pVoidDecryptFunc ) {...}",
            "name": "PCRYPT_DECRYPT_PRIVATE_KEY_FUNC callback"
        },
        {
            "signature": "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC PcryptEncryptPrivateKeyFunc; BOOL PcryptEncryptPrivateKeyFunc( [out] CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, [in] CRYPT_DATA_BLOB *pClearTextPrivateKey, [out] BYTE *pbEncryptedKey, [in, out] DWORD *pcbEncryptedKey, [in] LPVOID pVoidEncryptFunc ) {...}",
            "name": "PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC callback"
        },
        {
            "signature": "PCRYPT_RESOLVE_HCRYPTPROV_FUNC PcryptResolveHcryptprovFunc; BOOL PcryptResolveHcryptprovFunc( [in] CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, [out] HCRYPTPROV *phCryptProv, [in] LPVOID pVoidResolveFunc ) {...}",
            "name": "PCRYPT_RESOLVE_HCRYPTPROV_FUNC callback"
        },
        {
            "signature": "PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK PfnCertChainFindByIssuerCallback; BOOL PfnCertChainFindByIssuerCallback( [in] PCCERT_CONTEXT pCert, [in] void *pvFindArg ) {...}",
            "name": "PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK callback"
        },
        {
            "signature": "PFN_CERT_CREATE_CONTEXT_SORT_FUNC PfnCertCreateContextSortFunc; BOOL PfnCertCreateContextSortFunc( [in] DWORD cbTotalEncoded, [in] DWORD cbRemainEncoded, [in] DWORD cEntry, [in, out] void *pvSort ) {...}",
            "name": "PFN_CERT_CREATE_CONTEXT_SORT_FUNC callback"
        },
        {
            "signature": "PFN_CERT_DLL_OPEN_STORE_PROV_FUNC PfnCertDllOpenStoreProvFunc; BOOL PfnCertDllOpenStoreProvFunc( [in] LPCSTR lpszStoreProvider, [in] DWORD dwEncodingType, [in] HCRYPTPROV_LEGACY hCryptProv, [in] DWORD dwFlags, [in] const void *pvPara, [in] HCERTSTORE hCertStore, [in, out] PCERT_STORE_PROV_INFO pStoreProvInfo ) {...}",
            "name": "PFN_CERT_DLL_OPEN_STORE_PROV_FUNC callback"
        },
        {
            "signature": "PFN_CERT_ENUM_PHYSICAL_STORE PfnCertEnumPhysicalStore; BOOL PfnCertEnumPhysicalStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] LPCWSTR pwszStoreName, [in] PCERT_PHYSICAL_STORE_INFO pStoreInfo, [in] void *pvReserved, [in] void *pvArg ) {...}",
            "name": "PFN_CERT_ENUM_PHYSICAL_STORE callback"
        },
        {
            "signature": "PFN_CERT_ENUM_SYSTEM_STORE PfnCertEnumSystemStore; BOOL PfnCertEnumSystemStore( [in] const void *pvSystemStore, [in] DWORD dwFlags, [in] PCERT_SYSTEM_STORE_INFO pStoreInfo, [in] void *pvReserved, [in] void *pvArg ) {...}",
            "name": "PFN_CERT_ENUM_SYSTEM_STORE callback"
        },
        {
            "signature": "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION PfnCertEnumSystemStoreLocation; BOOL PfnCertEnumSystemStoreLocation( [in] LPCWSTR pwszStoreLocation, [in] DWORD dwFlags, [in] void *pvReserved, [in] void *pvArg ) {...}",
            "name": "PFN_CERT_ENUM_SYSTEM_STORE_LOCATION callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_CLOSE PfnCertStoreProvClose; void PfnCertStoreProvClose( [in] HCERTSTOREPROV hStoreProv, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_CLOSE callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_CONTROL PfnCertStoreProvControl; BOOL PfnCertStoreProvControl( [in, out] HCERTSTOREPROV hStoreProv, [in] DWORD dwFlags, [in] DWORD dwCtrlType, [in, optional] void const *pvCtrlPara ) {...}",
            "name": "PFN_CERT_STORE_PROV_CONTROL callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_DELETE_CERT PfnCertStoreProvDeleteCert; BOOL PfnCertStoreProvDeleteCert( [in] HCERTSTOREPROV hStoreProv, [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_DELETE_CERT callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_DELETE_CRL PfnCertStoreProvDeleteCrl; BOOL PfnCertStoreProvDeleteCrl( [in] HCERTSTOREPROV hStoreProv, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_DELETE_CRL callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_READ_CERT PfnCertStoreProvReadCert; BOOL PfnCertStoreProvReadCert( [in] HCERTSTOREPROV hStoreProv, [in] PCCERT_CONTEXT pStoreCertContext, [in] DWORD dwFlags, [out] PCCERT_CONTEXT *ppProvCertContext ) {...}",
            "name": "PFN_CERT_STORE_PROV_READ_CERT callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_READ_CRL PfnCertStoreProvReadCrl; BOOL PfnCertStoreProvReadCrl( [in] HCERTSTOREPROV hStoreProv, [in] PCCRL_CONTEXT pStoreCrlContext, [in] DWORD dwFlags, [out] PCCRL_CONTEXT *ppProvCrlContext ) {...}",
            "name": "PFN_CERT_STORE_PROV_READ_CRL callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_READ_CTL PfnCertStoreProvReadCtl; BOOL PfnCertStoreProvReadCtl( [in] HCERTSTOREPROV hStoreProv, [in] PCCTL_CONTEXT pStoreCtlContext, [in] DWORD dwFlags, [out] PCCTL_CONTEXT *ppProvCtlContext ) {...}",
            "name": "PFN_CERT_STORE_PROV_READ_CTL callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_SET_CERT_PROPERTY PfnCertStoreProvSetCertProperty; BOOL PfnCertStoreProvSetCertProperty( [in] HCERTSTOREPROV hStoreProv, [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData ) {...}",
            "name": "PFN_CERT_STORE_PROV_SET_CERT_PROPERTY callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_SET_CRL_PROPERTY PfnCertStoreProvSetCrlProperty; BOOL PfnCertStoreProvSetCrlProperty( [in] HCERTSTOREPROV hStoreProv, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData ) {...}",
            "name": "PFN_CERT_STORE_PROV_SET_CRL_PROPERTY callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_SET_CTL_PROPERTY PfnCertStoreProvSetCtlProperty; BOOL PfnCertStoreProvSetCtlProperty( [in] HCERTSTOREPROV hStoreProv, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwPropId, [in] DWORD dwFlags, [in] const void *pvData ) {...}",
            "name": "PFN_CERT_STORE_PROV_SET_CTL_PROPERTY callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_WRITE_CERT PfnCertStoreProvWriteCert; BOOL PfnCertStoreProvWriteCert( [in] HCERTSTOREPROV hStoreProv, [in] PCCERT_CONTEXT pCertContext, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_WRITE_CERT callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_WRITE_CRL PfnCertStoreProvWriteCrl; BOOL PfnCertStoreProvWriteCrl( [in] HCERTSTOREPROV hStoreProv, [in] PCCRL_CONTEXT pCrlContext, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_WRITE_CRL callback"
        },
        {
            "signature": "PFN_CERT_STORE_PROV_WRITE_CTL PfnCertStoreProvWriteCtl; BOOL PfnCertStoreProvWriteCtl( [in] HCERTSTOREPROV hStoreProv, [in] PCCTL_CONTEXT pCtlContext, [in] DWORD dwFlags ) {...}",
            "name": "PFN_CERT_STORE_PROV_WRITE_CTL callback"
        },
        {
            "signature": "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY PfnCmsgCngImportContentEncryptKey; BOOL PfnCmsgCngImportContentEncryptKey( [in, out] PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY callback"
        },
        {
            "signature": "PFN_CMSG_CNG_IMPORT_KEY_AGREE PfnCmsgCngImportKeyAgree; BOOL PfnCmsgCngImportKeyAgree( [in, out] PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, [in] PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_CNG_IMPORT_KEY_AGREE callback"
        },
        {
            "signature": "PFN_CMSG_CNG_IMPORT_KEY_TRANS PfnCmsgCngImportKeyTrans; BOOL PfnCmsgCngImportKeyTrans( [in, out] PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo, [in] PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_CNG_IMPORT_KEY_TRANS callback"
        },
        {
            "signature": "PFN_CMSG_EXPORT_KEY_AGREE PfnCmsgExportKeyAgree; BOOL PfnCmsgExportKeyAgree( [in] PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, [in] PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, [in, out] PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_EXPORT_KEY_AGREE callback"
        },
        {
            "signature": "PFN_CMSG_EXPORT_KEY_TRANS PfnCmsgExportKeyTrans; BOOL PfnCmsgExportKeyTrans( [in] PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, [in] PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, [in, out] PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_EXPORT_KEY_TRANS callback"
        },
        {
            "signature": "PFN_CMSG_EXPORT_MAIL_LIST PfnCmsgExportMailList; BOOL PfnCmsgExportMailList( [in] PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, [in] PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, [in, out] PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_EXPORT_MAIL_LIST callback"
        },
        {
            "signature": "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY PfnCmsgGenContentEncryptKey; BOOL PfnCmsgGenContentEncryptKey( [in, out] PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, [in] DWORD dwFlags, void *pvReserved ) {...}",
            "name": "PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY callback"
        },
        {
            "signature": "PFN_CMSG_IMPORT_KEY_AGREE PfnCmsgImportKeyAgree; BOOL PfnCmsgImportKeyAgree( [in] PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, [in] PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, [in] DWORD dwFlags, void *pvReserved, [out] HCRYPTKEY *phContentEncryptKey ) {...}",
            "name": "PFN_CMSG_IMPORT_KEY_AGREE callback"
        },
        {
            "signature": "PFN_CMSG_IMPORT_KEY_TRANS PfnCmsgImportKeyTrans; BOOL PfnCmsgImportKeyTrans( [in] PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, [in] PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, [in] DWORD dwFlags, void *pvReserved, [out] HCRYPTKEY *phContentEncryptKey ) {...}",
            "name": "PFN_CMSG_IMPORT_KEY_TRANS callback"
        },
        {
            "signature": "PFN_CMSG_IMPORT_MAIL_LIST PfnCmsgImportMailList; BOOL PfnCmsgImportMailList( [in] PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, [in] PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, [in] DWORD dwFlags, void *pvReserved, [out] HCRYPTKEY *phContentEncryptKey ) {...}",
            "name": "PFN_CMSG_IMPORT_MAIL_LIST callback"
        },
        {
            "signature": "PFN_CRYPT_ENUM_KEYID_PROP PfnCryptEnumKeyidProp; BOOL PfnCryptEnumKeyidProp( [in] const CRYPT_HASH_BLOB *pKeyIdentifier, [in] DWORD dwFlags, [in] void *pvReserved, [in, out] void *pvArg, [in] DWORD cProp, [in] DWORD *rgdwPropId, [in] void **rgpvData, [in] DWORD *rgcbData ) {...}",
            "name": "PFN_CRYPT_ENUM_KEYID_PROP callback"
        },
        {
            "signature": "PFN_CRYPT_ENUM_OID_FUNC PfnCryptEnumOidFunc; BOOL PfnCryptEnumOidFunc( [in] DWORD dwEncodingType, LPCSTR pszFuncName, [in] LPCSTR pszOID, [in] DWORD cValue, const DWORD rgdwValueType[], LPCWSTR const rgpwszValueName[], const BYTE * const rgpbValueData[], const DWORD rgcbValueData[], [in] void *pvArg ) {...}",
            "name": "PFN_CRYPT_ENUM_OID_FUNC callback"
        },
        {
            "signature": "PFN_CRYPT_ENUM_OID_INFO PfnCryptEnumOidInfo; BOOL PfnCryptEnumOidInfo( [in] PCCRYPT_OID_INFO pInfo, [in] void *pvArg ) {...}",
            "name": "PFN_CRYPT_ENUM_OID_INFO callback"
        },
        {
            "signature": "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC PfnCryptExportPublicKeyInfoEx2Func; BOOL PfnCryptExportPublicKeyInfoEx2Func( [in] NCRYPT_KEY_HANDLE hNCryptKey, [in] DWORD dwCertEncodingType, [in] LPSTR pszPublicKeyObjId, [in] DWORD dwFlags, [in, optional] void *pvAuxInfo, [out, optional] PCERT_PUBLIC_KEY_INFO pInfo, [in, out] DWORD *pcbInfo ) {...}",
            "name": "PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC callback"
        },
        {
            "signature": "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC PfnCryptExtractEncodedSignatureParametersFunc; BOOL PfnCryptExtractEncodedSignatureParametersFunc( [in] DWORD dwCertEncodingType, [in] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [out, optional] void **ppvDecodedSignPara, [out] LPWSTR *ppwszCNGHashAlgid ) {...}",
            "name": "PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC callback"
        },
        {
            "signature": "PFN_CRYPT_GET_SIGNER_CERTIFICATE PfnCryptGetSignerCertificate; PCCERT_CONTEXT PfnCryptGetSignerCertificate( [in] void *pvGetArg, [in] DWORD dwCertEncodingType, [in] PCERT_INFO pSignerId, [in] HCERTSTORE hMsgCertStore ) {...}",
            "name": "PFN_CRYPT_GET_SIGNER_CERTIFICATE callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH PfnCryptObjectLocatorProviderFlush; BOOL PfnCryptObjectLocatorProviderFlush( [in] LPVOID pContext, [in] PCERT_NAME_BLOB *rgIdentifierOrNameList, [in] DWORD dwIdentifierOrNameListCount ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE PfnCryptObjectLocatorProviderFree; void PfnCryptObjectLocatorProviderFree( [in, optional] LPVOID pPluginContext, [in] PBYTE pbData ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER PfnCryptObjectLocatorProviderFreeIdentifier; void PfnCryptObjectLocatorProviderFreeIdentifier( [in, optional] LPVOID pPluginContext, [in] PCRYPT_DATA_BLOB pIdentifier ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD PfnCryptObjectLocatorProviderFreePassword; void PfnCryptObjectLocatorProviderFreePassword( [in, optional] LPVOID pPluginContext, [in] PCWSTR pwszPassword ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET PfnCryptObjectLocatorProviderGet; BOOL PfnCryptObjectLocatorProviderGet( [in, optional] LPVOID pPluginContext, [in, optional] PCRYPT_DATA_BLOB pIdentifier, [in] DWORD dwNameType, [in] PCERT_NAME_BLOB pNameBlob, [out] PBYTE *ppbContent, [out] DWORD *pcbContent, [out] PCWSTR *ppwszPassword, [out] PCRYPT_DATA_BLOB *ppIdentifier ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE PfnCryptObjectLocatorProviderInitialize; BOOL PfnCryptObjectLocatorProviderInitialize( [in] PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush, [in] LPVOID pContext, [out] DWORD *pdwExpectedObjectCount, [out] PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable, [out] void **ppPluginContext ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE callback"
        },
        {
            "signature": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE PfnCryptObjectLocatorProviderRelease; void PfnCryptObjectLocatorProviderRelease( [in] DWORD dwReason, [in, optional] LPVOID pPluginContext ) {...}",
            "name": "PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE callback"
        },
        {
            "signature": "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC PfnCryptSignAndEncodeHashFunc; BOOL PfnCryptSignAndEncodeHashFunc( [in] NCRYPT_KEY_HANDLE hKey, [in] DWORD dwCertEncodingType, [in] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [in] void *pvDecodedSignPara, [in] LPCWSTR pwszCNGPubKeyAlgid, [in] LPCWSTR pwszCNGHashAlgid, [in] BYTE *pbComputedHash, [in] DWORD cbComputedHash, [out] BYTE *pbSignature, [in, out] DWORD *pcbSignature ) {...}",
            "name": "PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC callback"
        },
        {
            "signature": "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC PfnCryptVerifyEncodedSignatureFunc; BOOL PfnCryptVerifyEncodedSignatureFunc( [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pPubKeyInfo, [in] PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, [in, optional] void *pvDecodedSignPara, [in] LPCWSTR pwszCNGPubKeyAlgid, [in] LPCWSTR pwszCNGHashAlgid, [in] BYTE *pbComputedHash, [in] DWORD cbComputedHash, [in] BYTE *pbSignature, [in] DWORD cbSignature ) {...}",
            "name": "PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC callback"
        },
        {
            "signature": "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC PfnImportPublicKeyInfoEx2Func; BOOL PfnImportPublicKeyInfoEx2Func( [in] DWORD dwCertEncodingType, [in] PCERT_PUBLIC_KEY_INFO pInfo, [in] DWORD dwFlags, [in] void *pvAuxInfo, [out] BCRYPT_KEY_HANDLE *phKey ) {...}",
            "name": "PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC callback"
        },
        {
            "signature": "BOOL PFXExportCertStore( [in] HCERTSTORE hStore, [in, out] CRYPT_DATA_BLOB *pPFX, [in] LPCWSTR szPassword, [in] DWORD dwFlags );",
            "name": "PFXExportCertStore"
        },
        {
            "signature": "BOOL PFXExportCertStoreEx( [in] HCERTSTORE hStore, [in, out] CRYPT_DATA_BLOB *pPFX, [in] LPCWSTR szPassword, [in] void *pvPara, [in] DWORD dwFlags );",
            "name": "PFXExportCertStoreEx"
        },
        {
            "signature": "HCERTSTORE PFXImportCertStore( [in] CRYPT_DATA_BLOB *pPFX, [in] LPCWSTR szPassword, [in] DWORD dwFlags );",
            "name": "PFXImportCertStore"
        },
        {
            "signature": "BOOL PFXIsPFXBlob( [in] CRYPT_DATA_BLOB *pPFX );",
            "name": "PFXIsPFXBlob"
        },
        {
            "signature": "BOOL PFXVerifyPassword( [in] CRYPT_DATA_BLOB *pPFX, [in] LPCWSTR szPassword, [in] DWORD dwFlags );",
            "name": "PFXVerifyPassword"
        }
    ],
    "Winddi.h": [
        {
            "signature": "ENGAPI HANDLE BRUSHOBJ_hGetColorTransform( BRUSHOBJ *pbo );",
            "name": "BRUSHOBJ_hGetColorTransform"
        },
        {
            "signature": "ENGAPI PVOID BRUSHOBJ_pvAllocRbrush( BRUSHOBJ *pbo, ULONG cj );",
            "name": "BRUSHOBJ_pvAllocRbrush"
        },
        {
            "signature": "ENGAPI PVOID BRUSHOBJ_pvGetRbrush( BRUSHOBJ *pbo );",
            "name": "BRUSHOBJ_pvGetRbrush"
        },
        {
            "signature": "ENGAPI ULONG BRUSHOBJ_ulGetBrushColor( BRUSHOBJ *pbo );",
            "name": "BRUSHOBJ_ulGetBrushColor"
        },
        {
            "signature": "ENGAPI BOOL CLIPOBJ_bEnum( [in] CLIPOBJ *pco, [in] ULONG cj, [out] ULONG *pul );",
            "name": "CLIPOBJ_bEnum"
        },
        {
            "signature": "ENGAPI ULONG CLIPOBJ_cEnumStart( [in] CLIPOBJ *pco, [in] BOOL bAll, [in] ULONG iType, [in] ULONG iDirection, [in] ULONG cLimit );",
            "name": "CLIPOBJ_cEnumStart"
        },
        {
            "signature": "PATHOBJ * CLIPOBJ_ppoGetPath( [in] CLIPOBJ *pco );",
            "name": "CLIPOBJ_ppoGetPath"
        },
        {
            "signature": "BOOL DrvAlphaBlend( [in, out] SURFOBJ *psoDest, [in] SURFOBJ *psoSrc, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in] RECTL *prclDest, [in] RECTL *prclSrc, [in] BLENDOBJ *pBlendObj );",
            "name": "DrvAlphaBlend"
        },
        {
            "signature": "BOOL DrvAssertMode( [in] DHPDEV dhpdev, [in] BOOL bEnable );",
            "name": "DrvAssertMode"
        },
        {
            "signature": "BOOL DrvBitBlt( [in, out] SURFOBJ *psoTrg, [in, optional] SURFOBJ *psoSrc, [in, optional] SURFOBJ *psoMask, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in] RECTL *prclTrg, [in, optional] POINTL *pptlSrc, [in, optional] POINTL *pptlMask, [in, optional] BRUSHOBJ *pbo, [in, optional] POINTL *pptlBrush, [in] ROP4 rop4 );",
            "name": "DrvBitBlt"
        },
        {
            "signature": "void DrvCompletePDEV( DHPDEV dhpdev, HDEV hdev );",
            "name": "DrvCompletePDEV"
        },
        {
            "signature": "BOOL DrvCopyBits( SURFOBJ *psoDest, SURFOBJ *psoSrc, CLIPOBJ *pco, XLATEOBJ *pxlo, RECTL *prclDest, POINTL *pptlSrc );",
            "name": "DrvCopyBits"
        },
        {
            "signature": "HBITMAP DrvCreateDeviceBitmap( DHPDEV dhpdev, SIZEL sizl, ULONG iFormat );",
            "name": "DrvCreateDeviceBitmap"
        },
        {
            "signature": "void DrvDeleteDeviceBitmap( DHSURF dhsurf );",
            "name": "DrvDeleteDeviceBitmap"
        },
        {
            "signature": "HBITMAP DrvDeriveSurface( DD_DIRECTDRAW_GLOBAL *pDirectDraw, DD_SURFACE_LOCAL *pSurface );",
            "name": "DrvDeriveSurface"
        },
        {
            "signature": "LONG DrvDescribePixelFormat( DHPDEV dhpdev, LONG iPixelFormat, ULONG cjpfd, PIXELFORMATDESCRIPTOR *ppfd );",
            "name": "DrvDescribePixelFormat"
        },
        {
            "signature": "void DrvDestroyFont( FONTOBJ *pfo );",
            "name": "DrvDestroyFont"
        },
        {
            "signature": "void DrvDisableDirectDraw( DHPDEV dhpdev );",
            "name": "DrvDisableDirectDraw"
        },
        {
            "signature": "void DrvDisableDriver();",
            "name": "DrvDisableDriver"
        },
        {
            "signature": "void DrvDisablePDEV( DHPDEV dhpdev );",
            "name": "DrvDisablePDEV"
        },
        {
            "signature": "void DrvDisableSurface( DHPDEV dhpdev );",
            "name": "DrvDisableSurface"
        },
        {
            "signature": "ULONG DrvDitherColor( [in] DHPDEV dhpdev, [in] ULONG iMode, [in] ULONG rgb, [in, out] ULONG *pul );",
            "name": "DrvDitherColor"
        },
        {
            "signature": "ULONG DrvDrawEscape( [in] SURFOBJ *pso, [in] ULONG iEsc, [in] CLIPOBJ *pco, [in] RECTL *prcl, [in] ULONG cjIn, [in] PVOID pvIn );",
            "name": "DrvDrawEscape"
        },
        {
            "signature": "BOOL DrvEnableDirectDraw( DHPDEV dhpdev, DD_CALLBACKS *pCallBacks, DD_SURFACECALLBACKS *pSurfaceCallBacks, DD_PALETTECALLBACKS *pPaletteCallBacks );",
            "name": "DrvEnableDirectDraw"
        },
        {
            "signature": "BOOL DrvEnableDriver( ULONG iEngineVersion, ULONG cj, [in] DRVENABLEDATA *pded );",
            "name": "DrvEnableDriver"
        },
        {
            "signature": "DHPDEV DrvEnablePDEV( [in] DEVMODEW *pdm, [in] LPWSTR pwszLogAddress, ULONG cPat, [in, optional] HSURF *phsurfPatterns, ULONG cjCaps, [out] ULONG *pdevcaps, ULONG cjDevInfo, [out] DEVINFO *pdi, HDEV hdev, [in] LPWSTR pwszDeviceName, HANDLE hDriver );",
            "name": "DrvEnablePDEV"
        },
        {
            "signature": "HSURF DrvEnableSurface( DHPDEV dhpdev );",
            "name": "DrvEnableSurface"
        },
        {
            "signature": "BOOL DrvEndDoc( [in] SURFOBJ *pso, [in] FLONG fl );",
            "name": "DrvEndDoc"
        },
        {
            "signature": "ULONG DrvEscape( [in] SURFOBJ *pso, [in] ULONG iEsc, [in] ULONG cjIn, [in] PVOID pvIn, [in] ULONG cjOut, [out] PVOID pvOut );",
            "name": "DrvEscape"
        },
        {
            "signature": "BOOL DrvFillPath( [in, out] SURFOBJ *pso, [in] PATHOBJ *ppo, [in] CLIPOBJ *pco, [in] BRUSHOBJ *pbo, [in] POINTL *pptlBrushOrg, [in] MIX mix, [in] FLONG flOptions );",
            "name": "DrvFillPath"
        },
        {
            "signature": "ULONG DrvFontManagement( [in] SURFOBJ *pso, [in, optional] FONTOBJ *pfo, [in] ULONG iMode, [in] ULONG cjIn, [in] PVOID pvIn, [in] ULONG cjOut, [out] PVOID pvOut );",
            "name": "DrvFontManagement"
        },
        {
            "signature": "void DrvFree( PVOID pv, ULONG_PTR id );",
            "name": "DrvFree"
        },
        {
            "signature": "BOOL DrvGetDirectDrawInfo( DHPDEV dhpdev, DD_HALINFO *pHalInfo, DWORD *pdwNumHeaps, VIDEOMEMORY *pvmList, DWORD *pdwNumFourCCCodes, DWORD *pdwFourCC );",
            "name": "DrvGetDirectDrawInfo"
        },
        {
            "signature": "ULONG DrvGetGlyphMode( [in] DHPDEV unnamedParam1, [in] FONTOBJ *unnamedParam2 );",
            "name": "DrvGetGlyphMode"
        },
        {
            "signature": "ULONG DrvGetModes( [in] HANDLE hDriver, ULONG cjSize, [out, optional] DEVMODEW *pdm );",
            "name": "DrvGetModes"
        },
        {
            "signature": "PVOID DrvGetTrueTypeFile( ULONG_PTR iFile, ULONG *pcj );",
            "name": "DrvGetTrueTypeFile"
        },
        {
            "signature": "BOOL DrvGradientFill( [in, out] SURFOBJ *psoDest, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in] TRIVERTEX *pVertex, [in] ULONG nVertex, [in] PVOID pMesh, [in] ULONG nMesh, [in] RECTL *prclExtents, [in] POINTL *pptlDitherOrg, [in] ULONG ulMode );",
            "name": "DrvGradientFill"
        },
        {
            "signature": "BOOL DrvIcmCheckBitmapBits( DHPDEV dhpdev, HANDLE hColorTransform, SURFOBJ *pso, PBYTE paResults );",
            "name": "DrvIcmCheckBitmapBits"
        },
        {
            "signature": "HANDLE DrvIcmCreateColorTransform( [in] DHPDEV dhpdev, [in] LPLOGCOLORSPACEW pLogColorSpace, [in, optional] PVOID pvSourceProfile, [in] ULONG cjSourceProfile, [in] PVOID pvDestProfile, [in] ULONG cjDestProfile, [in, optional] PVOID pvTargetProfile, [in] ULONG cjTargetProfile, [in] DWORD dwReserved );",
            "name": "DrvIcmCreateColorTransform"
        },
        {
            "signature": "BOOL DrvIcmDeleteColorTransform( [in] DHPDEV dhpdev, [in] HANDLE hcmXform );",
            "name": "DrvIcmDeleteColorTransform"
        },
        {
            "signature": "BOOL DrvIcmSetDeviceGammaRamp( DHPDEV dhpdev, ULONG iFormat, LPVOID lpRamp );",
            "name": "DrvIcmSetDeviceGammaRamp"
        },
        {
            "signature": "BOOL DrvLineTo( SURFOBJ *pso, CLIPOBJ *pco, BRUSHOBJ *pbo, LONG x1, LONG y1, LONG x2, LONG y2, RECTL *prclBounds, MIX mix );",
            "name": "DrvLineTo"
        },
        {
            "signature": "ULONG_PTR DrvLoadFontFile( ULONG cFiles, ULONG_PTR *piFile, PVOID *ppvView, ULONG *pcjView, DESIGNVECTOR *pdv, ULONG ulLangID, ULONG ulFastCheckSum );",
            "name": "DrvLoadFontFile"
        },
        {
            "signature": "void DrvMovePointer( [in] SURFOBJ *pso, [in] LONG x, [in] LONG y, [in] RECTL *prcl );",
            "name": "DrvMovePointer"
        },
        {
            "signature": "BOOL DrvNextBand( [in] SURFOBJ *pso, [in] POINTL *pptl );",
            "name": "DrvNextBand"
        },
        {
            "signature": "void DrvNotify( SURFOBJ *pso, ULONG iType, PVOID pvData );",
            "name": "DrvNotify"
        },
        {
            "signature": "BOOL DrvPaint( [in] SURFOBJ *pso, [in] CLIPOBJ *pco, [in] BRUSHOBJ *pbo, [in] POINTL *pptlBrushOrg, [in] MIX mix );",
            "name": "DrvPaint"
        },
        {
            "signature": "BOOL DrvPlgBlt( [in, out] SURFOBJ *psoTrg, [in, out] SURFOBJ *psoSrc, [in, optional] SURFOBJ *psoMsk, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in, optional] COLORADJUSTMENT *pca, [in, optional] POINTL *pptlBrushOrg, [in] POINTFIX *pptfx, [in] RECTL *prcl, [in, optional] POINTL *pptl, [in] ULONG iMode );",
            "name": "DrvPlgBlt"
        },
        {
            "signature": "BOOL DrvQueryAdvanceWidths( DHPDEV dhpdev, FONTOBJ *pfo, ULONG iMode, [in] HGLYPH *phg, [out] PVOID pvWidths, ULONG cGlyphs );",
            "name": "DrvQueryAdvanceWidths"
        },
        {
            "signature": "BOOL DrvQueryDeviceSupport( SURFOBJ *pso, XLATEOBJ *pxlo, XFORMOBJ *pxo, ULONG iType, ULONG cjIn, [in] PVOID pvIn, ULONG cjOut, [out] PVOID pvOut );",
            "name": "DrvQueryDeviceSupport"
        },
        {
            "signature": "BOOL DrvQueryDriverInfo( DWORD dwMode, [out] PVOID pBuffer, DWORD cbBuf, [out] PDWORD pcbNeeded );",
            "name": "DrvQueryDriverInfo"
        },
        {
            "signature": "PIFIMETRICS DrvQueryFont( DHPDEV dhpdev, ULONG_PTR iFile, ULONG iFace, ULONG_PTR *pid );",
            "name": "DrvQueryFont"
        },
        {
            "signature": "LONG DrvQueryFontCaps( ULONG culCaps, ULONG *pulCaps );",
            "name": "DrvQueryFontCaps"
        },
        {
            "signature": "LONG DrvQueryFontData( DHPDEV dhpdev, FONTOBJ *pfo, ULONG iMode, HGLYPH hg, GLYPHDATA *pgd, [out] PVOID pv, ULONG cjSize );",
            "name": "DrvQueryFontData"
        },
        {
            "signature": "LONG DrvQueryFontFile( ULONG_PTR iFile, ULONG ulMode, ULONG cjBuf, ULONG *pulBuf );",
            "name": "DrvQueryFontFile"
        },
        {
            "signature": "PVOID DrvQueryFontTree( DHPDEV dhpdev, ULONG_PTR iFile, ULONG iFace, ULONG iMode, ULONG_PTR *pid );",
            "name": "DrvQueryFontTree"
        },
        {
            "signature": "ULONG DrvQueryPerBandInfo( [in] SURFOBJ *pso, [in, out] PERBANDINFO *pbi );",
            "name": "DrvQueryPerBandInfo"
        },
        {
            "signature": "LONG DrvQueryTrueTypeOutline( DHPDEV dhpdev, FONTOBJ *pfo, HGLYPH hglyph, BOOL bMetricsOnly, GLYPHDATA *pgldt, ULONG cjBuf, TTPOLYGONHEADER *ppoly );",
            "name": "DrvQueryTrueTypeOutline"
        },
        {
            "signature": "LONG DrvQueryTrueTypeTable( ULONG_PTR iFile, ULONG ulFont, ULONG ulTag, PTRDIFF dpStart, ULONG cjBuf, BYTE *pjBuf, PBYTE *ppjTable, ULONG *pcjTable );",
            "name": "DrvQueryTrueTypeTable"
        },
        {
            "signature": "BOOL DrvRealizeBrush( [in] BRUSHOBJ *pbo, [in, out] SURFOBJ *psoTarget, [in] SURFOBJ *psoPattern, [in, optional] SURFOBJ *psoMask, [in] XLATEOBJ *pxlo, [in] ULONG iHatch );",
            "name": "DrvRealizeBrush"
        },
        {
            "signature": "ULONG DrvResetDevice( DHPDEV dhpdev, PVOID Reserved );",
            "name": "DrvResetDevice"
        },
        {
            "signature": "BOOL DrvResetPDEV( DHPDEV dhpdevOld, DHPDEV dhpdevNew );",
            "name": "DrvResetPDEV"
        },
        {
            "signature": "ULONG_PTR DrvSaveScreenBits( SURFOBJ *pso, ULONG iMode, ULONG_PTR ident, RECTL *prcl );",
            "name": "DrvSaveScreenBits"
        },
        {
            "signature": "BOOL DrvSendPage( [in] SURFOBJ *pso );",
            "name": "DrvSendPage"
        },
        {
            "signature": "BOOL DrvSetPalette( DHPDEV dhpdev, PALOBJ *ppalo, FLONG fl, ULONG iStart, ULONG cColors );",
            "name": "DrvSetPalette"
        },
        {
            "signature": "BOOL DrvSetPixelFormat( SURFOBJ *pso, LONG iPixelFormat, HWND hwnd );",
            "name": "DrvSetPixelFormat"
        },
        {
            "signature": "ULONG DrvSetPointerShape( [in] SURFOBJ *pso, [in] SURFOBJ *psoMask, [in] SURFOBJ *psoColor, [in] XLATEOBJ *pxlo, [in] LONG xHot, [in] LONG yHot, [in] LONG x, [in] LONG y, [in] RECTL *prcl, [in] FLONG fl );",
            "name": "DrvSetPointerShape"
        },
        {
            "signature": "BOOL DrvStartBanding( [in] SURFOBJ *pso, [in] POINTL *pptl );",
            "name": "DrvStartBanding"
        },
        {
            "signature": "BOOL DrvStartDoc( [in] SURFOBJ *pso, [in] LPWSTR pwszDocName, [in] DWORD dwJobId );",
            "name": "DrvStartDoc"
        },
        {
            "signature": "BOOL DrvStartPage( [in] SURFOBJ *pso );",
            "name": "DrvStartPage"
        },
        {
            "signature": "BOOL DrvStretchBlt( [in, out] SURFOBJ *psoDest, [in, out] SURFOBJ *psoSrc, [in, optional] SURFOBJ *psoMask, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in, optional] COLORADJUSTMENT *pca, [in] POINTL *pptlHTOrg, [in] RECTL *prclDest, [in] RECTL *prclSrc, [in, optional] POINTL *pptlMask, [in] ULONG iMode );",
            "name": "DrvStretchBlt"
        },
        {
            "signature": "BOOL DrvStretchBltROP( [in, out] SURFOBJ *psoDest, [in, out] SURFOBJ *psoSrc, [in, optional] SURFOBJ *psoMask, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in, optional] COLORADJUSTMENT *pca, [in] POINTL *pptlHTOrg, [in] RECTL *prclDest, [in] RECTL *prclSrc, [in, optional] POINTL *pptlMask, [in] ULONG iMode, [in] BRUSHOBJ *pbo, [in] DWORD rop4 );",
            "name": "DrvStretchBltROP"
        },
        {
            "signature": "BOOL DrvStrokeAndFillPath( [in, out] SURFOBJ *pso, [in, out] PATHOBJ *ppo, [in] CLIPOBJ *pco, [in, optional] XFORMOBJ *pxo, [in] BRUSHOBJ *pboStroke, [in] LINEATTRS *plineattrs, [in] BRUSHOBJ *pboFill, [in] POINTL *pptlBrushOrg, [in] MIX mixFill, [in] FLONG flOptions );",
            "name": "DrvStrokeAndFillPath"
        },
        {
            "signature": "BOOL DrvStrokePath( [in, out] SURFOBJ *pso, [in] PATHOBJ *ppo, [in] CLIPOBJ *pco, [in, optional] XFORMOBJ *pxo, [in] BRUSHOBJ *pbo, [in] POINTL *pptlBrushOrg, [in] LINEATTRS *plineattrs, [in] MIX mix );",
            "name": "DrvStrokePath"
        },
        {
            "signature": "BOOL DrvSwapBuffers( SURFOBJ *pso, WNDOBJ *pwo );",
            "name": "DrvSwapBuffers"
        },
        {
            "signature": "void DrvSynchronize( DHPDEV dhpdev, RECTL *prcl );",
            "name": "DrvSynchronize"
        },
        {
            "signature": "void DrvSynchronizeSurface( SURFOBJ *pso, RECTL *prcl, FLONG fl );",
            "name": "DrvSynchronizeSurface"
        },
        {
            "signature": "BOOL DrvTextOut( SURFOBJ *pso, STROBJ *pstro, FONTOBJ *pfo, CLIPOBJ *pco, RECTL *prclExtra, RECTL *prclOpaque, BRUSHOBJ *pboFore, BRUSHOBJ *pboOpaque, POINTL *pptlOrg, MIX mix );",
            "name": "DrvTextOut"
        },
        {
            "signature": "BOOL DrvTransparentBlt( [in, out] SURFOBJ *psoDst, [in] SURFOBJ *psoSrc, [in] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in] RECTL *prclDst, [in] RECTL *prclSrc, [in] ULONG iTransColor, [in] ULONG ulReserved );",
            "name": "DrvTransparentBlt"
        },
        {
            "signature": "BOOL DrvUnloadFontFile( ULONG_PTR iFile );",
            "name": "DrvUnloadFontFile"
        },
        {
            "signature": "ENGAPI VOID EngAcquireSemaphore( [in] HSEMAPHORE hsem );",
            "name": "EngAcquireSemaphore"
        },
        {
            "signature": "ENGAPI BOOL EngAlphaBlend( SURFOBJ *psoDest, SURFOBJ *psoSrc, CLIPOBJ *pco, XLATEOBJ *pxlo, RECTL *prclDest, RECTL *prclSrc, BLENDOBJ *pBlendObj );",
            "name": "EngAlphaBlend"
        },
        {
            "signature": "ENGAPI BOOL EngAssociateSurface( HSURF hsurf, HDEV hdev, FLONG flHooks );",
            "name": "EngAssociateSurface"
        },
        {
            "signature": "ENGAPI BOOL EngBitBlt( SURFOBJ *psoTrg, SURFOBJ *psoSrc, SURFOBJ *psoMask, CLIPOBJ *pco, XLATEOBJ *pxlo, RECTL *prclTrg, POINTL *pptlSrc, POINTL *pptlMask, BRUSHOBJ *pbo, POINTL *pptlBrush, [in] ROP4 rop4 );",
            "name": "EngBitBlt"
        },
        {
            "signature": "ENGAPI VOID EngBugCheckEx( [in] ULONG BugCheckCode, [in] ULONG_PTR P1, [in] ULONG_PTR P2, [in] ULONG_PTR P3, [in] ULONG_PTR P4 );",
            "name": "EngBugCheckEx"
        },
        {
            "signature": "ENGAPI BOOL EngCheckAbort( SURFOBJ *pso );",
            "name": "EngCheckAbort"
        },
        {
            "signature": "ENGAPI VOID EngClearEvent( [in] PEVENT pEvent );",
            "name": "EngClearEvent"
        },
        {
            "signature": "ENGAPI FD_GLYPHSET * EngComputeGlyphSet( [in] INT nCodePage, [in] INT nFirstChar, [in] INT cChars );",
            "name": "EngComputeGlyphSet"
        },
        {
            "signature": "ENGAPI BOOL EngControlSprites( WNDOBJ *pwo, FLONG fl );",
            "name": "EngControlSprites"
        },
        {
            "signature": "ENGAPI BOOL EngCopyBits( SURFOBJ *psoDest, SURFOBJ *psoSrc, CLIPOBJ *pco, XLATEOBJ *pxlo, [in] RECTL *prclDest, [in] POINTL *pptlSrc );",
            "name": "EngCopyBits"
        },
        {
            "signature": "ENGAPI HBITMAP EngCreateBitmap( SIZEL sizl, LONG lWidth, [in] ULONG iFormat, [in] FLONG fl, [in] PVOID pvBits );",
            "name": "EngCreateBitmap"
        },
        {
            "signature": "ENGAPI CLIPOBJ * EngCreateClip();",
            "name": "EngCreateClip"
        },
        {
            "signature": "ENGAPI HBITMAP EngCreateDeviceBitmap( [in] DHSURF dhsurf, [in] SIZEL sizl, ULONG iFormatCompat );",
            "name": "EngCreateDeviceBitmap"
        },
        {
            "signature": "ENGAPI HSURF EngCreateDeviceSurface( [in] DHSURF dhsurf, [in] SIZEL sizl, ULONG iFormatCompat );",
            "name": "EngCreateDeviceSurface"
        },
        {
            "signature": "ENGAPI HDRVOBJ EngCreateDriverObj( PVOID pvObj, FREEOBJPROC pFreeObjProc, HDEV hdev );",
            "name": "EngCreateDriverObj"
        },
        {
            "signature": "ENGAPI BOOL EngCreateEvent( [out] PEVENT *ppEvent );",
            "name": "EngCreateEvent"
        },
        {
            "signature": "ENGAPI HPALETTE EngCreatePalette( [in] ULONG iMode, [in] ULONG cColors, [in] ULONG *pulColors, [in] FLONG flRed, [in] FLONG flGreen, [in] FLONG flBlue );",
            "name": "EngCreatePalette"
        },
        {
            "signature": "ENGAPI PATHOBJ * EngCreatePath();",
            "name": "EngCreatePath"
        },
        {
            "signature": "ENGAPI HSEMAPHORE EngCreateSemaphore();",
            "name": "EngCreateSemaphore"
        },
        {
            "signature": "ENGAPI WNDOBJ * EngCreateWnd( SURFOBJ *pso, HWND hwnd, WNDOBJCHANGEPROC pfn, FLONG fl, int iPixelFormat );",
            "name": "EngCreateWnd"
        },
        {
            "signature": "__analysis_noreturn ENGAPI VOID EngDebugBreak();",
            "name": "EngDebugBreak"
        },
        {
            "signature": "ENGAPI VOID EngDebugPrint( [in] PCHAR StandardPrefix, [in] PCHAR DebugMessage, [in] va_list ap );",
            "name": "EngDebugPrint"
        },
        {
            "signature": "ENGAPI VOID EngDeleteClip( CLIPOBJ *pco );",
            "name": "EngDeleteClip"
        },
        {
            "signature": "ENGAPI BOOL EngDeleteDriverObj( HDRVOBJ hdo, BOOL bCallBack, BOOL bLocked );",
            "name": "EngDeleteDriverObj"
        },
        {
            "signature": "ENGAPI BOOL EngDeleteEvent( [in] PEVENT pEvent );",
            "name": "EngDeleteEvent"
        },
        {
            "signature": "ENGAPI BOOL EngDeleteFile( [in] LPWSTR pwszFileName );",
            "name": "EngDeleteFile"
        },
        {
            "signature": "ENGAPI BOOL EngDeletePalette( [in] HPALETTE hpal );",
            "name": "EngDeletePalette"
        },
        {
            "signature": "ENGAPI VOID EngDeletePath( PATHOBJ *ppo );",
            "name": "EngDeletePath"
        },
        {
            "signature": "ENGAPI VOID EngDeleteSafeSemaphore( [in, out] ENGSAFESEMAPHORE *pssem );",
            "name": "EngDeleteSafeSemaphore"
        },
        {
            "signature": "ENGAPI VOID EngDeleteSemaphore( [in] HSEMAPHORE hsem );",
            "name": "EngDeleteSemaphore"
        },
        {
            "signature": "ENGAPI BOOL EngDeleteSurface( [in] HSURF hsurf );",
            "name": "EngDeleteSurface"
        },
        {
            "signature": "ENGAPI VOID EngDeleteWnd( WNDOBJ *pwo );",
            "name": "EngDeleteWnd"
        },
        {
            "signature": "ENGAPI DWORD EngDeviceIoControl( [in] HANDLE hDevice, [in] DWORD dwIoControlCode, [in, optional] LPVOID lpInBuffer, [in] DWORD nInBufferSize, [out, optional] LPVOID lpOutBuffer, [in] DWORD nOutBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "EngDeviceIoControl"
        },
        {
            "signature": "ENGAPI ULONG EngDitherColor( HDEV hdev, ULONG iMode, ULONG rgb, ULONG *pul );",
            "name": "EngDitherColor"
        },
        {
            "signature": "ENGAPI BOOL EngEnumForms( [in] HANDLE hPrinter, [in] DWORD Level, [out, optional] LPBYTE pForm, [in] DWORD cbBuf, [out] LPDWORD pcbNeeded, [out] LPDWORD pcReturned );",
            "name": "EngEnumForms"
        },
        {
            "signature": "ENGAPI BOOL EngEraseSurface( SURFOBJ *pso, RECTL *prcl, [in] ULONG iColor );",
            "name": "EngEraseSurface"
        },
        {
            "signature": "ENGAPI BOOL EngFillPath( SURFOBJ *pso, PATHOBJ *ppo, CLIPOBJ *pco, BRUSHOBJ *pbo, POINTL *pptlBrushOrg, [in] MIX mix, [in] FLONG flOptions );",
            "name": "EngFillPath"
        },
        {
            "signature": "ENGAPI PVOID EngFindResource( [in] HANDLE h, [in] int iName, [in] int iType, [out] PULONG pulSize );",
            "name": "EngFindResource"
        },
        {
            "signature": "ENGAPI PVOID EngFntCacheAlloc( [in] ULONG FastCheckSum, [in] ULONG ulSize );",
            "name": "EngFntCacheAlloc"
        },
        {
            "signature": "ENGAPI VOID EngFntCacheFault( [in] ULONG ulFastCheckSum, [in] ULONG iFaultMode );",
            "name": "EngFntCacheFault"
        },
        {
            "signature": "ENGAPI PVOID EngFntCacheLookUp( [in] ULONG FastCheckSum, [out] ULONG *pulSize );",
            "name": "EngFntCacheLookUp"
        },
        {
            "signature": "ENGAPI VOID EngFreeModule( [in] HANDLE h );",
            "name": "EngFreeModule"
        },
        {
            "signature": "ENGAPI VOID EngGetCurrentCodePage( [out] PUSHORT OemCodePage, [out] PUSHORT AnsiCodePage );",
            "name": "EngGetCurrentCodePage"
        },
        {
            "signature": "ENGAPI HANDLE EngGetCurrentProcessId();",
            "name": "EngGetCurrentProcessId"
        },
        {
            "signature": "ENGAPI HANDLE EngGetCurrentThreadId();",
            "name": "EngGetCurrentThreadId"
        },
        {
            "signature": "ENGAPI LPWSTR EngGetDriverName( [in] HDEV hdev );",
            "name": "EngGetDriverName"
        },
        {
            "signature": "ENGAPI BOOL EngGetFileChangeTime( [in] HANDLE h, [out] LARGE_INTEGER *pChangeTime );",
            "name": "EngGetFileChangeTime"
        },
        {
            "signature": "ENGAPI BOOL EngGetFilePath( [in] HANDLE h, [out] WCHAR(* )[MAX_PATH + 1] pDest );",
            "name": "EngGetFilePath"
        },
        {
            "signature": "ENGAPI BOOL EngGetForm( [in] HANDLE hPrinter, [in] LPWSTR pFormName, [in] DWORD Level, [in, optional] LPBYTE pForm, [in] DWORD cbBuf, [out] LPDWORD pcbNeeded );",
            "name": "EngGetForm"
        },
        {
            "signature": "ENGAPI ULONG EngGetLastError();",
            "name": "EngGetLastError"
        },
        {
            "signature": "ENGAPI BOOL EngGetPrinter( [in] HANDLE hPrinter, [in] DWORD dwLevel, [out, optional] LPBYTE pPrinter, [in] DWORD cbBuf, [out] LPDWORD pcbNeeded );",
            "name": "EngGetPrinter"
        },
        {
            "signature": "ENGAPI DWORD EngGetPrinterData( [in] HANDLE hPrinter, [in] LPWSTR pValueName, [out, optional] LPDWORD pType, [out, optional] LPBYTE pData, [in] DWORD nSize, [out] LPDWORD pcbNeeded );",
            "name": "EngGetPrinterData"
        },
        {
            "signature": "ENGAPI LPWSTR EngGetPrinterDataFileName( [in] HDEV hdev );",
            "name": "EngGetPrinterDataFileName"
        },
        {
            "signature": "ENGAPI BOOL EngGetPrinterDriver( [in] HANDLE hPrinter, [in, optional] LPWSTR pEnvironment, [in] DWORD dwLevel, [out, optional] BYTE *lpbDrvInfo, [in] DWORD cbBuf, [out] DWORD *pcbNeeded );",
            "name": "EngGetPrinterDriver"
        },
        {
            "signature": "ENGAPI HANDLE EngGetProcessHandle();",
            "name": "EngGetProcessHandle"
        },
        {
            "signature": "ENGAPI BOOL EngGetType1FontList( [in] HDEV hdev, [out, optional] TYPE1_FONT *pType1Buffer, [in] ULONG cjType1Buffer, [out] PULONG pulLocalFonts, [out] PULONG pulRemoteFonts, [out] LARGE_INTEGER *pLastModified );",
            "name": "EngGetType1FontList"
        },
        {
            "signature": "ENGAPI BOOL EngGradientFill( SURFOBJ *psoDest, CLIPOBJ *pco, XLATEOBJ *pxlo, TRIVERTEX *pVertex, ULONG nVertex, PVOID pMesh, ULONG nMesh, RECTL *prclExtents, POINTL *pptlDitherOrg, [in] ULONG ulMode );",
            "name": "EngGradientFill"
        },
        {
            "signature": "ENGAPI ULONG EngHangNotification( HDEV hdev, PVOID Reserved );",
            "name": "EngHangNotification"
        },
        {
            "signature": "ENGAPI BOOL EngInitializeSafeSemaphore( [out] ENGSAFESEMAPHORE *pssem );",
            "name": "EngInitializeSafeSemaphore"
        },
        {
            "signature": "ENGAPI BOOL EngIsSemaphoreOwned( [in] HSEMAPHORE hsem );",
            "name": "EngIsSemaphoreOwned"
        },
        {
            "signature": "ENGAPI BOOL EngIsSemaphoreOwnedByCurrentThread( [in] HSEMAPHORE hsem );",
            "name": "EngIsSemaphoreOwnedByCurrentThread"
        },
        {
            "signature": "ENGAPI BOOL EngLineTo( SURFOBJ *pso, CLIPOBJ *pco, BRUSHOBJ *pbo, LONG x1, LONG y1, LONG x2, LONG y2, RECTL *prclBounds, MIX mix );",
            "name": "EngLineTo"
        },
        {
            "signature": "ENGAPI HANDLE EngLoadModule( [in] LPWSTR pwsz );",
            "name": "EngLoadModule"
        },
        {
            "signature": "ENGAPI HANDLE EngLoadModuleForWrite( [in] LPWSTR pwsz, [in] ULONG cjSizeOfModule );",
            "name": "EngLoadModuleForWrite"
        },
        {
            "signature": "ENGAPI PDD_SURFACE_LOCAL EngLockDirectDrawSurface( [in] HANDLE hSurface );",
            "name": "EngLockDirectDrawSurface"
        },
        {
            "signature": "ENGAPI DRIVEROBJ * EngLockDriverObj( HDRVOBJ hdo );",
            "name": "EngLockDriverObj"
        },
        {
            "signature": "ENGAPI SURFOBJ * EngLockSurface( HSURF hsurf );",
            "name": "EngLockSurface"
        },
        {
            "signature": "ENGAPI BOOL EngLpkInstalled();",
            "name": "EngLpkInstalled"
        },
        {
            "signature": "ENGAPI PEVENT EngMapEvent( [in] HDEV hDev, [in] HANDLE hUserObject, PVOID Reserved1, PVOID Reserved2, PVOID Reserved3 );",
            "name": "EngMapEvent"
        },
        {
            "signature": "ENGAPI PVOID EngMapFile( [in] LPWSTR pwsz, [in] ULONG cjSize, [out] ULONG_PTR *piFile );",
            "name": "EngMapFile"
        },
        {
            "signature": "ENGAPI BOOL EngMapFontFile( ULONG_PTR iFile, PULONG *ppjBuf, ULONG *pcjBuf );",
            "name": "EngMapFontFile"
        },
        {
            "signature": "ENGAPI BOOL EngMapFontFileFD( [in] ULONG_PTR iFile, [out] PULONG *ppjBuf, [out] ULONG *pcjBuf );",
            "name": "EngMapFontFileFD"
        },
        {
            "signature": "ENGAPI PVOID EngMapModule( [in] HANDLE h, [in] PULONG pSize );",
            "name": "EngMapModule"
        },
        {
            "signature": "ENGAPI BOOL EngMarkBandingSurface( [in] HSURF hsurf );",
            "name": "EngMarkBandingSurface"
        },
        {
            "signature": "ENGAPI BOOL EngModifySurface( HSURF hsurf, HDEV hdev, FLONG flHooks, FLONG flSurface, DHSURF dhsurf, VOID *pvScan0, LONG lDelta, VOID *pvReserved );",
            "name": "EngModifySurface"
        },
        {
            "signature": "ENGAPI VOID EngMovePointer( [in] SURFOBJ *pso, [in] LONG x, [in] LONG y, [in] RECTL *prcl );",
            "name": "EngMovePointer"
        },
        {
            "signature": "int EngMulDiv( [in] int a, [in] int b, [in] int c );",
            "name": "EngMulDiv"
        },
        {
            "signature": "ENGAPI VOID EngMultiByteToUnicodeN( [out] LPWSTR UnicodeString, [in] ULONG MaxBytesInUnicodeString, [out, optional] PULONG BytesInUnicodeString, [in] PCHAR MultiByteString, [in] ULONG BytesInMultiByteString );",
            "name": "EngMultiByteToUnicodeN"
        },
        {
            "signature": "ENGAPI INT EngMultiByteToWideChar( [in] UINT CodePage, [out, optional] LPWSTR WideCharString, [in] INT BytesInWideCharString, [in, optional] LPSTR MultiByteString, [in] INT BytesInMultiByteString );",
            "name": "EngMultiByteToWideChar"
        },
        {
            "signature": "ENGAPI BOOL EngPaint( SURFOBJ *pso, CLIPOBJ *pco, BRUSHOBJ *pbo, POINTL *pptlBrushOrg, [in] MIX mix );",
            "name": "EngPaint"
        },
        {
            "signature": "ENGAPI BOOL EngPlgBlt( SURFOBJ *psoTrg, SURFOBJ *psoSrc, SURFOBJ *psoMsk, CLIPOBJ *pco, XLATEOBJ *pxlo, COLORADJUSTMENT *pca, POINTL *pptlBrushOrg, POINTFIX *pptfx, RECTL *prcl, POINTL *pptl, [in] ULONG iMode );",
            "name": "EngPlgBlt"
        },
        {
            "signature": "ENGAPI VOID EngProbeForRead( [in] PVOID Address, [in] ULONG Length, [in] ULONG Alignment );",
            "name": "EngProbeForRead"
        },
        {
            "signature": "ENGAPI VOID EngProbeForReadAndWrite( [in, out] PVOID Address, [in] ULONG Length, [in] ULONG Alignment );",
            "name": "EngProbeForReadAndWrite"
        },
        {
            "signature": "ENGAPI BOOL EngQueryDeviceAttribute( [in] HDEV hdev, [in] ENG_DEVICE_ATTRIBUTE devAttr, [in] VOID *pvIn, [in] ULONG ulInSize, [out] VOID *pvOut, [out] ULONG ulOutSize );",
            "name": "EngQueryDeviceAttribute"
        },
        {
            "signature": "ENGAPI LARGE_INTEGER EngQueryFileTimeStamp( [in] LPWSTR pwsz );",
            "name": "EngQueryFileTimeStamp"
        },
        {
            "signature": "ENGAPI VOID EngQueryLocalTime( [out] PENG_TIME_FIELDS unnamedParam1 );",
            "name": "EngQueryLocalTime"
        },
        {
            "signature": "ENGAPI ULONG EngQueryPalette( HPALETTE hpal, ULONG *piMode, ULONG cColors, ULONG *pulColors );",
            "name": "EngQueryPalette"
        },
        {
            "signature": "ENGAPI VOID EngQueryPerformanceCounter( [out] LONGLONG *pPerformanceCount );",
            "name": "EngQueryPerformanceCounter"
        },
        {
            "signature": "ENGAPI VOID EngQueryPerformanceFrequency( [out] LONGLONG *pFrequency );",
            "name": "EngQueryPerformanceFrequency"
        },
        {
            "signature": "ENGAPI BOOL EngQuerySystemAttribute( [in] ENG_SYSTEM_ATTRIBUTE CapNum, [out] PDWORD pCapability );",
            "name": "EngQuerySystemAttribute"
        },
        {
            "signature": "ENGAPI LONG EngReadStateEvent( [in] PEVENT pEvent );",
            "name": "EngReadStateEvent"
        },
        {
            "signature": "ENGAPI VOID EngReleaseSemaphore( [in] HSEMAPHORE hsem );",
            "name": "EngReleaseSemaphore"
        },
        {
            "signature": "BOOL EngRestoreFloatingPointState( [in] VOID *pBuffer );",
            "name": "EngRestoreFloatingPointState"
        },
        {
            "signature": "ULONG EngSaveFloatingPointState( VOID *pBuffer, [in, out] ULONG cjBufferSize );",
            "name": "EngSaveFloatingPointState"
        },
        {
            "signature": "ENGAPI HANDLE EngSecureMem( [in] PVOID Address, [in] ULONG Length );",
            "name": "EngSecureMem"
        },
        {
            "signature": "ENGAPI LONG EngSetEvent( [in] PEVENT pEvent );",
            "name": "EngSetEvent"
        },
        {
            "signature": "ENGAPI VOID EngSetLastError( [in] ULONG unnamedParam1 );",
            "name": "EngSetLastError"
        },
        {
            "signature": "ENGAPI ULONG EngSetPointerShape( [in] SURFOBJ *pso, [in] SURFOBJ *psoMask, [in] SURFOBJ *psoColor, [in] XLATEOBJ *pxlo, [in] LONG xHot, [in] LONG yHot, [in] LONG x, [in] LONG y, [in] RECTL *prcl, [in] FLONG fl );",
            "name": "EngSetPointerShape"
        },
        {
            "signature": "ENGAPI BOOL EngSetPointerTag( [in] HDEV hdev, [in] SURFOBJ *psoMask, [in] SURFOBJ *psoColor, [in] XLATEOBJ *pxlo, [in] FLONG fl );",
            "name": "EngSetPointerTag"
        },
        {
            "signature": "ENGAPI DWORD EngSetPrinterData( [in] HANDLE hPrinter, [in] LPWSTR pType, [in] DWORD dwType, [in] LPBYTE lpbPrinterData, [in] DWORD cjPrinterData );",
            "name": "EngSetPrinterData"
        },
        {
            "signature": "ENGAPI VOID EngSort( [in, out] PBYTE pjBuf, [in] ULONG c, [in] ULONG cjElem, [in] SORTCOMP pfnComp );",
            "name": "EngSort"
        },
        {
            "signature": "ENGAPI BOOL EngStretchBlt( SURFOBJ *psoDest, SURFOBJ *psoSrc, SURFOBJ *psoMask, CLIPOBJ *pco, XLATEOBJ *pxlo, [in] COLORADJUSTMENT *pca, [in] POINTL *pptlHTOrg, [in] RECTL *prclDest, [in] RECTL *prclSrc, POINTL *pptlMask, [in] ULONG iMode );",
            "name": "EngStretchBlt"
        },
        {
            "signature": "ENGAPI BOOL EngStretchBltROP( SURFOBJ *psoDest, SURFOBJ *psoSrc, SURFOBJ *psoMask, CLIPOBJ *pco, XLATEOBJ *pxlo, COLORADJUSTMENT *pca, POINTL *pptlHTOrg, [in] RECTL *prclDest, [in] RECTL *prclSrc, POINTL *pptlMask, [in] ULONG iMode, BRUSHOBJ *pbo, [in] DWORD rop4 );",
            "name": "EngStretchBltROP"
        },
        {
            "signature": "ENGAPI BOOL EngStrokeAndFillPath( SURFOBJ *pso, PATHOBJ *ppo, CLIPOBJ *pco, XFORMOBJ *pxo, BRUSHOBJ *pboStroke, LINEATTRS *plineattrs, BRUSHOBJ *pboFill, POINTL *pptlBrushOrg, [in] MIX mixFill, [in] FLONG flOptions );",
            "name": "EngStrokeAndFillPath"
        },
        {
            "signature": "ENGAPI BOOL EngStrokePath( SURFOBJ *pso, PATHOBJ *ppo, CLIPOBJ *pco, XFORMOBJ *pxo, BRUSHOBJ *pbo, POINTL *pptlBrushOrg, [in] LINEATTRS *plineattrs, [in] MIX mix );",
            "name": "EngStrokePath"
        },
        {
            "signature": "ENGAPI BOOL EngTextOut( SURFOBJ *pso, STROBJ *pstro, FONTOBJ *pfo, CLIPOBJ *pco, RECTL *prclExtra, RECTL *prclOpaque, BRUSHOBJ *pboFore, BRUSHOBJ *pboOpaque, POINTL *pptlOrg, [in] MIX mix );",
            "name": "EngTextOut"
        },
        {
            "signature": "ENGAPI BOOL EngTransparentBlt( [in] SURFOBJ *psoDst, [in] SURFOBJ *psoSrc, [in, optional] CLIPOBJ *pco, [in, optional] XLATEOBJ *pxlo, [in] RECTL *prclDst, [in] RECTL *prclSrc, [in] ULONG TransColor, [in] ULONG bCalledFromBitBlt );",
            "name": "EngTransparentBlt"
        },
        {
            "signature": "ENGAPI VOID EngUnicodeToMultiByteN( [out] PCHAR MultiByteString, [in] ULONG MaxBytesInMultiByteString, [out, optional] PULONG BytesInMultiByteString, [in] PWSTR UnicodeString, [in] ULONG BytesInUnicodeString );",
            "name": "EngUnicodeToMultiByteN"
        },
        {
            "signature": "ENGAPI BOOL EngUnlockDirectDrawSurface( [in] PDD_SURFACE_LOCAL pSurface );",
            "name": "EngUnlockDirectDrawSurface"
        },
        {
            "signature": "ENGAPI BOOL EngUnlockDriverObj( HDRVOBJ hdo );",
            "name": "EngUnlockDriverObj"
        },
        {
            "signature": "ENGAPI VOID EngUnlockSurface( [in] SURFOBJ *pso );",
            "name": "EngUnlockSurface"
        },
        {
            "signature": "ENGAPI BOOL EngUnmapEvent( [in] PEVENT pEvent );",
            "name": "EngUnmapEvent"
        },
        {
            "signature": "ENGAPI BOOL EngUnmapFile( [in] ULONG_PTR iFile );",
            "name": "EngUnmapFile"
        },
        {
            "signature": "ENGAPI VOID EngUnmapFontFile( ULONG_PTR iFile );",
            "name": "EngUnmapFontFile"
        },
        {
            "signature": "ENGAPI VOID EngUnmapFontFileFD( [in] ULONG_PTR iFile );",
            "name": "EngUnmapFontFileFD"
        },
        {
            "signature": "ENGAPI VOID EngUnsecureMem( [in] HANDLE hSecure );",
            "name": "EngUnsecureMem"
        },
        {
            "signature": "ENGAPI BOOL EngWaitForSingleObject( [in] PEVENT pEvent, [in] PLARGE_INTEGER pTimeOut );",
            "name": "EngWaitForSingleObject"
        },
        {
            "signature": "ENGAPI INT EngWideCharToMultiByte( [in] UINT CodePage, [in, optional] LPWSTR WideCharString, [in] INT BytesInWideCharString, [out, optional] LPSTR MultiByteString, [in] INT BytesInMultiByteString );",
            "name": "EngWideCharToMultiByte"
        },
        {
            "signature": "ENGAPI BOOL EngWritePrinter( [in] HANDLE hPrinter, [in] LPVOID pBuf, [in] DWORD cbBuf, [out] LPDWORD pcWritten );",
            "name": "EngWritePrinter"
        },
        {
            "signature": "void FLOATOBJ_Add( [in, out] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_Add"
        },
        {
            "signature": "void FLOATOBJ_AddFloat( [in, out] PFLOATOBJ unnamedParam1, [in] FLOATL unnamedParam2 );",
            "name": "FLOATOBJ_AddFloat"
        },
        {
            "signature": "void FLOATOBJ_AddLong( [in, out] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_AddLong"
        },
        {
            "signature": "void FLOATOBJ_Div( [in, out] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_Div"
        },
        {
            "signature": "void FLOATOBJ_DivFloat( [in] PFLOATOBJ unnamedParam1, [in] FLOATL unnamedParam2 );",
            "name": "FLOATOBJ_DivFloat"
        },
        {
            "signature": "void FLOATOBJ_DivLong( [in, out] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_DivLong"
        },
        {
            "signature": "BOOL FLOATOBJ_Equal( [in] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_Equal"
        },
        {
            "signature": "BOOL FLOATOBJ_EqualLong( [in] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_EqualLong"
        },
        {
            "signature": "LONG FLOATOBJ_GetFloat( [in] PFLOATOBJ unnamedParam1 );",
            "name": "FLOATOBJ_GetFloat"
        },
        {
            "signature": "LONG FLOATOBJ_GetLong( [in] PFLOATOBJ unnamedParam1 );",
            "name": "FLOATOBJ_GetLong"
        },
        {
            "signature": "BOOL FLOATOBJ_GreaterThan( [in] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_GreaterThan"
        },
        {
            "signature": "BOOL FLOATOBJ_GreaterThanLong( [in] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_GreaterThanLong"
        },
        {
            "signature": "BOOL FLOATOBJ_LessThan( [in] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_LessThan"
        },
        {
            "signature": "BOOL FLOATOBJ_LessThanLong( [in] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_LessThanLong"
        },
        {
            "signature": "void FLOATOBJ_Mul( [in, out] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_Mul"
        },
        {
            "signature": "void FLOATOBJ_MulFloat( [in, out] PFLOATOBJ unnamedParam1, [in] FLOATL unnamedParam2 );",
            "name": "FLOATOBJ_MulFloat"
        },
        {
            "signature": "void FLOATOBJ_MulLong( [in, out] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_MulLong"
        },
        {
            "signature": "void FLOATOBJ_Neg( [in, out] PFLOATOBJ unnamedParam1 );",
            "name": "FLOATOBJ_Neg"
        },
        {
            "signature": "void FLOATOBJ_SetFloat( [out] PFLOATOBJ unnamedParam1, [in] FLOATL unnamedParam2 );",
            "name": "FLOATOBJ_SetFloat"
        },
        {
            "signature": "void FLOATOBJ_SetLong( [out] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_SetLong"
        },
        {
            "signature": "void FLOATOBJ_Sub( [in, out] PFLOATOBJ unnamedParam1, [in] PFLOATOBJ unnamedParam2 );",
            "name": "FLOATOBJ_Sub"
        },
        {
            "signature": "void FLOATOBJ_SubFloat( [in] PFLOATOBJ unnamedParam1, [in] FLOATL unnamedParam2 );",
            "name": "FLOATOBJ_SubFloat"
        },
        {
            "signature": "void FLOATOBJ_SubLong( [in, out] PFLOATOBJ unnamedParam1, [in] LONG unnamedParam2 );",
            "name": "FLOATOBJ_SubLong"
        },
        {
            "signature": "ULONG FONTOBJ_cGetAllGlyphHandles( FONTOBJ *pfo, HGLYPH *phg );",
            "name": "FONTOBJ_cGetAllGlyphHandles"
        },
        {
            "signature": "ULONG FONTOBJ_cGetGlyphs( FONTOBJ *pfo, [in] ULONG iMode, ULONG cGlyph, HGLYPH *phg, PVOID *ppvGlyph );",
            "name": "FONTOBJ_cGetGlyphs"
        },
        {
            "signature": "FD_GLYPHSET * FONTOBJ_pfdg( FONTOBJ *pfo );",
            "name": "FONTOBJ_pfdg"
        },
        {
            "signature": "IFIMETRICS * FONTOBJ_pifi( FONTOBJ *pfo );",
            "name": "FONTOBJ_pifi"
        },
        {
            "signature": "PBYTE FONTOBJ_pjOpenTypeTablePointer( FONTOBJ *pfo, ULONG ulTag, ULONG *pcjTable );",
            "name": "FONTOBJ_pjOpenTypeTablePointer"
        },
        {
            "signature": "PFD_GLYPHATTR FONTOBJ_pQueryGlyphAttrs( FONTOBJ *pfo, [in] ULONG iMode );",
            "name": "FONTOBJ_pQueryGlyphAttrs"
        },
        {
            "signature": "PVOID FONTOBJ_pvTrueTypeFontFile( FONTOBJ *pfo, ULONG *pcjFile );",
            "name": "FONTOBJ_pvTrueTypeFontFile"
        },
        {
            "signature": "LPWSTR FONTOBJ_pwszFontFilePaths( FONTOBJ *pfo, ULONG *pcwc );",
            "name": "FONTOBJ_pwszFontFilePaths"
        },
        {
            "signature": "XFORMOBJ * FONTOBJ_pxoGetXform( FONTOBJ *pfo );",
            "name": "FONTOBJ_pxoGetXform"
        },
        {
            "signature": "void FONTOBJ_vGetInfo( FONTOBJ *pfo, [in] ULONG cjSize, FONTINFO *pfi );",
            "name": "FONTOBJ_vGetInfo"
        },
        {
            "signature": "LONG HT_ComputeRGBGammaTable( [in] USHORT GammaTableEntries, [in] USHORT GammaTableType, [in] USHORT RedGamma, [in] USHORT GreenGamma, [in] USHORT BlueGamma, [out] LPBYTE pGammaTable );",
            "name": "HT_ComputeRGBGammaTable"
        },
        {
            "signature": "LONG HT_Get8BPPFormatPalette( [out] LPPALETTEENTRY pPaletteEntry, [in] USHORT RedGamma, [in] USHORT GreenGamma, [in] USHORT BlueGamma );",
            "name": "HT_Get8BPPFormatPalette"
        },
        {
            "signature": "LONG HT_Get8BPPMaskPalette( [in, out] LPPALETTEENTRY pPaletteEntry, [in] BOOL Use8BPPMaskPal, [in] BYTE CMYMask, [in] USHORT RedGamma, [in] USHORT GreenGamma, [in] USHORT BlueGamma );",
            "name": "HT_Get8BPPMaskPalette"
        },
        {
            "signature": "LONG HTUI_DeviceColorAdjustment( [in, optional] LPSTR pDeviceName, [in] PDEVHTADJDATA pDevHTAdjData );",
            "name": "HTUI_DeviceColorAdjustment"
        },
        {
            "signature": "ULONG PALOBJ_cGetColors( PALOBJ *ppalo, ULONG iStart, ULONG cColors, ULONG *pulColors );",
            "name": "PALOBJ_cGetColors"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bCloseFigure( PATHOBJ *ppo );",
            "name": "PATHOBJ_bCloseFigure"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bEnum( PATHOBJ *ppo, PATHDATA *ppd );",
            "name": "PATHOBJ_bEnum"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bEnumClipLines( PATHOBJ *ppo, ULONG cb, CLIPLINE *pcl );",
            "name": "PATHOBJ_bEnumClipLines"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bMoveTo( PATHOBJ *ppo, POINTFIX ptfx );",
            "name": "PATHOBJ_bMoveTo"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bPolyBezierTo( PATHOBJ *ppo, POINTFIX *pptfx, ULONG cptfx );",
            "name": "PATHOBJ_bPolyBezierTo"
        },
        {
            "signature": "ENGAPI BOOL PATHOBJ_bPolyLineTo( PATHOBJ *ppo, POINTFIX *pptfx, ULONG cptfx );",
            "name": "PATHOBJ_bPolyLineTo"
        },
        {
            "signature": "ENGAPI VOID PATHOBJ_vEnumStart( PATHOBJ *ppo );",
            "name": "PATHOBJ_vEnumStart"
        },
        {
            "signature": "ENGAPI VOID PATHOBJ_vEnumStartClipLines( PATHOBJ *ppo, CLIPOBJ *pco, SURFOBJ *pso, LINEATTRS *pla );",
            "name": "PATHOBJ_vEnumStartClipLines"
        },
        {
            "signature": "ENGAPI VOID PATHOBJ_vGetBounds( PATHOBJ *ppo, PRECTFX prectfx );",
            "name": "PATHOBJ_vGetBounds"
        },
        {
            "signature": "PFN_DrvQueryGlyphAttrs PfnDrvqueryglyphattrs; PFD_GLYPHATTR PfnDrvqueryglyphattrs( FONTOBJ *unnamedParam1, ULONG unnamedParam2 ) {...}",
            "name": "PFN_DrvQueryGlyphAttrs callback"
        },
        {
            "signature": "ENGAPI BOOL STROBJ_bEnum( STROBJ *pstro, ULONG *pc, PGLYPHPOS *ppgpos );",
            "name": "STROBJ_bEnum"
        },
        {
            "signature": "ENGAPI BOOL STROBJ_bEnumPositionsOnly( STROBJ *pstro, ULONG *pc, PGLYPHPOS *ppgpos );",
            "name": "STROBJ_bEnumPositionsOnly"
        },
        {
            "signature": "ENGAPI BOOL STROBJ_bGetAdvanceWidths( STROBJ *pso, [in] ULONG iFirst, ULONG c, POINTQF *pptqD );",
            "name": "STROBJ_bGetAdvanceWidths"
        },
        {
            "signature": "ENGAPI DWORD STROBJ_dwGetCodePage( STROBJ *pstro );",
            "name": "STROBJ_dwGetCodePage"
        },
        {
            "signature": "ENGAPI FIX STROBJ_fxBreakExtra( STROBJ *pstro );",
            "name": "STROBJ_fxBreakExtra"
        },
        {
            "signature": "ENGAPI FIX STROBJ_fxCharacterExtra( STROBJ *pstro );",
            "name": "STROBJ_fxCharacterExtra"
        },
        {
            "signature": "ENGAPI VOID STROBJ_vEnumStart( STROBJ *pstro );",
            "name": "STROBJ_vEnumStart"
        },
        {
            "signature": "ENGAPI BOOL WNDOBJ_bEnum( WNDOBJ *pwo, ULONG cj, ULONG *pul );",
            "name": "WNDOBJ_bEnum"
        },
        {
            "signature": "ENGAPI ULONG WNDOBJ_cEnumStart( WNDOBJ *pwo, ULONG iType, ULONG iDirection, ULONG cLimit );",
            "name": "WNDOBJ_cEnumStart"
        },
        {
            "signature": "ENGAPI VOID WNDOBJ_vSetConsumer( WNDOBJ *pwo, PVOID pvConsumer );",
            "name": "WNDOBJ_vSetConsumer"
        },
        {
            "signature": "WNDOBJCHANGEPROC Wndobjchangeproc; void Wndobjchangeproc( WNDOBJ *pwo, FLONG fl ) {...}",
            "name": "WNDOBJCHANGEPROC callback"
        },
        {
            "signature": "ENGAPI BOOL XFORMOBJ_bApplyXform( XFORMOBJ *pxo, [in] __out_validated(GRAPHIC)ULONG iMode, ULONG cPoints, PVOID pvIn, PVOID pvOut );",
            "name": "XFORMOBJ_bApplyXform"
        },
        {
            "signature": "ULONG XFORMOBJ_iGetFloatObjXform( XFORMOBJ *pxo, FLOATOBJ_XFORM *pfxo );",
            "name": "XFORMOBJ_iGetFloatObjXform"
        },
        {
            "signature": "ENGAPI ULONG XFORMOBJ_iGetXform( XFORMOBJ *pxo, XFORML *pxform );",
            "name": "XFORMOBJ_iGetXform"
        },
        {
            "signature": "ENGAPI ULONG XLATEOBJ_cGetPalette( XLATEOBJ *pxlo, [in] ULONG iPal, ULONG cPal, ULONG *pPal );",
            "name": "XLATEOBJ_cGetPalette"
        },
        {
            "signature": "ENGAPI HANDLE XLATEOBJ_hGetColorTransform( XLATEOBJ *pxlo );",
            "name": "XLATEOBJ_hGetColorTransform"
        },
        {
            "signature": "ENGAPI ULONG XLATEOBJ_iXlate( XLATEOBJ *pxlo, ULONG iColor );",
            "name": "XLATEOBJ_iXlate"
        },
        {
            "signature": "ENGAPI ULONG * XLATEOBJ_piVector( XLATEOBJ *pxlo );",
            "name": "XLATEOBJ_piVector"
        }
    ],
    "Windef.h": [],
    "Windns.h": [
        {
            "signature": "DNS_QUERY_COMPLETION_ROUTINE DnsQueryCompletionRoutine; void DnsQueryCompletionRoutine( [in] PVOID pQueryContext, [in, out] PDNS_QUERY_RESULT pQueryResults ) {...}",
            "name": "DNS_QUERY_COMPLETION_ROUTINE callback"
        },
        {
            "signature": "DNS_SERVICE_BROWSE_CALLBACK DnsServiceBrowseCallback; void DnsServiceBrowseCallback( DWORD Status, PVOID pQueryContext, PDNS_RECORD pDnsRecord ) {...}",
            "name": "DNS_SERVICE_BROWSE_CALLBACK callback"
        },
        {
            "signature": "DNS_SERVICE_REGISTER_COMPLETE DnsServiceRegisterComplete; void DnsServiceRegisterComplete( DWORD Status, PVOID pQueryContext, PDNS_SERVICE_INSTANCE pInstance ) {...}",
            "name": "DNS_SERVICE_REGISTER_COMPLETE callback"
        },
        {
            "signature": "DNS_SERVICE_RESOLVE_COMPLETE DnsServiceResolveComplete; void DnsServiceResolveComplete( DWORD Status, PVOID pQueryContext, PDNS_SERVICE_INSTANCE pInstance ) {...}",
            "name": "DNS_SERVICE_RESOLVE_COMPLETE callback"
        },
        {
            "signature": "DNS_STATUS DnsAcquireContextHandle_A( [in] DWORD CredentialFlags, [in, optional] PVOID Credentials, [out] PHANDLE pContext );",
            "name": "DnsAcquireContextHandle_A"
        },
        {
            "signature": "DNS_STATUS DnsAcquireContextHandle_W( [in] DWORD CredentialFlags, [in, optional] PVOID Credentials, [out] PHANDLE pContext );",
            "name": "DnsAcquireContextHandle_W"
        },
        {
            "signature": "DNS_STATUS DnsCancelQuery( [in] PDNS_QUERY_CANCEL pCancelHandle );",
            "name": "DnsCancelQuery"
        },
        {
            "signature": "DNS_STATUS DnsExtractRecordsFromMessage_UTF8( [in] PDNS_MESSAGE_BUFFER pDnsBuffer, [in] WORD wMessageLength, [out] PDNS_RECORD *ppRecord );",
            "name": "DnsExtractRecordsFromMessage_UTF8"
        },
        {
            "signature": "DNS_STATUS DnsExtractRecordsFromMessage_W( [in] PDNS_MESSAGE_BUFFER pDnsBuffer, [in] WORD wMessageLength, [out] PDNS_RECORD *ppRecord );",
            "name": "DnsExtractRecordsFromMessage_W"
        },
        {
            "signature": "void DnsFree( [in, out] _Frees_ptr_opt_ PVOID pData, [in] DNS_FREE_TYPE FreeType );",
            "name": "DnsFree"
        },
        {
            "signature": "void DnsFreeCustomServers( DWORD *pcServers, DNS_CUSTOM_SERVER **ppServers );",
            "name": "DnsFreeCustomServers"
        },
        {
            "signature": "void DnsFreeProxyName( [in, out] _Frees_ptr_opt_ PWSTR proxyName );",
            "name": "DnsFreeProxyName"
        },
        {
            "signature": "DWORD DnsGetApplicationSettings( DWORD *pcServers, DNS_CUSTOM_SERVER **ppDefaultServers, DNS_APPLICATION_SETTINGS *pSettings );",
            "name": "DnsGetApplicationSettings"
        },
        {
            "signature": "DWORD DnsGetProxyInformation( [in] PCWSTR hostName, [in, out] DNS_PROXY_INFORMATION *proxyInformation, [in, out, optional] DNS_PROXY_INFORMATION *defaultProxyInformation, [in, optional] DNS_PROXY_COMPLETION_ROUTINE completionRoutine, [in, optional] void *completionContext );",
            "name": "DnsGetProxyInformation"
        },
        {
            "signature": "DNS_STATUS DnsModifyRecordsInSet_A( [in, optional] PDNS_RECORD pAddRecords, [in, optional] PDNS_RECORD pDeleteRecords, [in] DWORD Options, [in, optional] HANDLE hCredentials, [in, out, optional] PVOID pExtraList, [in, out, optional] PVOID pReserved );",
            "name": "DnsModifyRecordsInSet_A"
        },
        {
            "signature": "DNS_STATUS DnsModifyRecordsInSet_UTF8( [in, optional] PDNS_RECORD pAddRecords, [in, optional] PDNS_RECORD pDeleteRecords, [in] DWORD Options, [in, optional] HANDLE hCredentials, [in, out, optional] PVOID pExtraList, [in, out, optional] PVOID pReserved );",
            "name": "DnsModifyRecordsInSet_UTF8"
        },
        {
            "signature": "DNS_STATUS DnsModifyRecordsInSet_W( [in, optional] PDNS_RECORD pAddRecords, [in, optional] PDNS_RECORD pDeleteRecords, [in] DWORD Options, [in, optional] HANDLE hCredentials, [in, out, optional] PVOID pExtraList, [in, out, optional] PVOID pReserved );",
            "name": "DnsModifyRecordsInSet_W"
        },
        {
            "signature": "BOOL DnsNameCompare_A( [in] PCSTR pName1, [in] PCSTR pName2 );",
            "name": "DnsNameCompare_A"
        },
        {
            "signature": "BOOL DnsNameCompare_W( [in] PCWSTR pName1, [in] PCWSTR pName2 );",
            "name": "DnsNameCompare_W"
        },
        {
            "signature": "DNS_STATUS DnsQuery_A( [in] PCSTR pszName, [in] WORD wType, [in] DWORD Options, [in, out, optional] PVOID pExtra, [out, optional] PDNS_RECORD *ppQueryResults, [out, optional] PVOID *pReserved );",
            "name": "DnsQuery_A"
        },
        {
            "signature": "DNS_STATUS DnsQuery_UTF8( [in] PCSTR pszName, [in] WORD wType, [in] DWORD Options, [in, out, optional] PVOID pExtra, [out, optional] PDNS_RECORD *ppQueryResults, [out, optional] PVOID *pReserved );",
            "name": "DnsQuery_UTF8"
        },
        {
            "signature": "DNS_STATUS DnsQuery_W( [in] PCWSTR pszName, [in] WORD wType, [in] DWORD Options, [in, out, optional] PVOID pExtra, [out, optional] PDNS_RECORD *ppQueryResults, [out, optional] PVOID *pReserved );",
            "name": "DnsQuery_W"
        },
        {
            "signature": "DNS_STATUS DnsQueryConfig( [in] DNS_CONFIG_TYPE Config, [in] DWORD Flag, [in, optional] PCWSTR pwsAdapterName, [in, optional] PVOID pReserved, [out] PVOID pBuffer, [in, out] PDWORD pBufLen );",
            "name": "DnsQueryConfig"
        },
        {
            "signature": "DNS_STATUS DnsQueryEx( [in] PDNS_QUERY_REQUEST pQueryRequest, [in, out] PDNS_QUERY_RESULT pQueryResults, [in, out, optional] PDNS_QUERY_CANCEL pCancelHandle );",
            "name": "DnsQueryEx"
        },
        {
            "signature": "BOOL DnsRecordCompare( [in] PDNS_RECORD pRecord1, [in] PDNS_RECORD pRecord2 );",
            "name": "DnsRecordCompare"
        },
        {
            "signature": "PDNS_RECORD DnsRecordCopyEx( [in] PDNS_RECORD pRecord, [in] DNS_CHARSET CharSetIn, [in] DNS_CHARSET CharSetOut );",
            "name": "DnsRecordCopyEx"
        },
        {
            "signature": "BOOL DnsRecordSetCompare( [in, out] PDNS_RECORD pRR1, [in, out] PDNS_RECORD pRR2, [out, optional] PDNS_RECORD *ppDiff1, [out, optional] PDNS_RECORD *ppDiff2 );",
            "name": "DnsRecordSetCompare"
        },
        {
            "signature": "PDNS_RECORD DnsRecordSetCopyEx( [in] PDNS_RECORD pRecordSet, [in] DNS_CHARSET CharSetIn, [in] DNS_CHARSET CharSetOut );",
            "name": "DnsRecordSetCopyEx"
        },
        {
            "signature": "PDNS_RECORD DnsRecordSetDetach( [in, out] PDNS_RECORD pRecordList );",
            "name": "DnsRecordSetDetach"
        },
        {
            "signature": "void DnsReleaseContextHandle( [in] HANDLE hContext );",
            "name": "DnsReleaseContextHandle"
        },
        {
            "signature": "DNS_STATUS DnsReplaceRecordSetA( [in] PDNS_RECORD pReplaceSet, [in] DWORD Options, [in, optional] HANDLE hContext, [in, out, optional] PVOID pExtraInfo, [in, out, optional] PVOID pReserved );",
            "name": "DnsReplaceRecordSetA"
        },
        {
            "signature": "DNS_STATUS DnsReplaceRecordSetUTF8( [in] PDNS_RECORD pReplaceSet, [in] DWORD Options, [in, optional] HANDLE hContext, [in, out, optional] PVOID pExtraInfo, [in, out, optional] PVOID pReserved );",
            "name": "DnsReplaceRecordSetUTF8"
        },
        {
            "signature": "DNS_STATUS DnsReplaceRecordSetW( [in] PDNS_RECORD pReplaceSet, [in] DWORD Options, [in, optional] HANDLE hContext, [in, out, optional] PVOID pExtraInfo, [in, out, optional] PVOID pReserved );",
            "name": "DnsReplaceRecordSetW"
        },
        {
            "signature": "DNS_STATUS DnsServiceBrowse( PDNS_SERVICE_BROWSE_REQUEST pRequest, PDNS_SERVICE_CANCEL pCancel );",
            "name": "DnsServiceBrowse"
        },
        {
            "signature": "DNS_STATUS DnsServiceBrowseCancel( PDNS_SERVICE_CANCEL pCancelHandle );",
            "name": "DnsServiceBrowseCancel"
        },
        {
            "signature": "PDNS_SERVICE_INSTANCE DnsServiceConstructInstance( PCWSTR pServiceName, PCWSTR pHostName, PIP4_ADDRESS pIp4, PIP6_ADDRESS pIp6, WORD wPort, WORD wPriority, WORD wWeight, DWORD dwPropertiesCount, PCWSTR *keys, PCWSTR *values );",
            "name": "DnsServiceConstructInstance"
        },
        {
            "signature": "PDNS_SERVICE_INSTANCE DnsServiceCopyInstance( PDNS_SERVICE_INSTANCE pOrig );",
            "name": "DnsServiceCopyInstance"
        },
        {
            "signature": "DWORD DnsServiceDeRegister( PDNS_SERVICE_REGISTER_REQUEST pRequest, PDNS_SERVICE_CANCEL pCancel );",
            "name": "DnsServiceDeRegister"
        },
        {
            "signature": "void DnsServiceFreeInstance( PDNS_SERVICE_INSTANCE pInstance );",
            "name": "DnsServiceFreeInstance"
        },
        {
            "signature": "DWORD DnsServiceRegister( PDNS_SERVICE_REGISTER_REQUEST pRequest, PDNS_SERVICE_CANCEL pCancel );",
            "name": "DnsServiceRegister"
        },
        {
            "signature": "DWORD DnsServiceRegisterCancel( PDNS_SERVICE_CANCEL pCancelHandle );",
            "name": "DnsServiceRegisterCancel"
        },
        {
            "signature": "DNS_STATUS DnsServiceResolve( PDNS_SERVICE_RESOLVE_REQUEST pRequest, PDNS_SERVICE_CANCEL pCancel );",
            "name": "DnsServiceResolve"
        },
        {
            "signature": "DNS_STATUS DnsServiceResolveCancel( PDNS_SERVICE_CANCEL pCancelHandle );",
            "name": "DnsServiceResolveCancel"
        },
        {
            "signature": "DWORD DnsSetApplicationSettings( DWORD cServers, const DNS_CUSTOM_SERVER *pServers, const DNS_APPLICATION_SETTINGS *pSettings );",
            "name": "DnsSetApplicationSettings"
        },
        {
            "signature": "DNS_STATUS DnsStartMulticastQuery( PMDNS_QUERY_REQUEST pQueryRequest, PMDNS_QUERY_HANDLE pHandle );",
            "name": "DnsStartMulticastQuery"
        },
        {
            "signature": "DNS_STATUS DnsStopMulticastQuery( PMDNS_QUERY_HANDLE pHandle );",
            "name": "DnsStopMulticastQuery"
        },
        {
            "signature": "DNS_STATUS DnsValidateName_A( [in] PCSTR pszName, [in] DNS_NAME_FORMAT Format );",
            "name": "DnsValidateName_A"
        },
        {
            "signature": "DNS_STATUS DnsValidateName_UTF8( [in] PCSTR pszName, [in] DNS_NAME_FORMAT Format );",
            "name": "DnsValidateName_UTF8"
        },
        {
            "signature": "DNS_STATUS DnsValidateName_W( [in] PCWSTR pszName, [in] DNS_NAME_FORMAT Format );",
            "name": "DnsValidateName_W"
        },
        {
            "signature": "DNS_STATUS DnsValidateServerStatus( [in] PSOCKADDR server, [in] PCWSTR queryName, [out] PDWORD serverStatus );",
            "name": "DnsValidateServerStatus"
        },
        {
            "signature": "BOOL DnsWriteQuestionToBuffer_UTF8( [in, out] PDNS_MESSAGE_BUFFER pDnsBuffer, [in, out] PDWORD pdwBufferSize, [in] PCSTR pszName, [in] WORD wType, [in] WORD Xid, [in] BOOL fRecursionDesired );",
            "name": "DnsWriteQuestionToBuffer_UTF8"
        },
        {
            "signature": "BOOL DnsWriteQuestionToBuffer_W( [in, out] PDNS_MESSAGE_BUFFER pDnsBuffer, [in, out] PDWORD pdwBufferSize, [in] PCWSTR pszName, [in] WORD wType, [in] WORD Xid, [in] BOOL fRecursionDesired );",
            "name": "DnsWriteQuestionToBuffer_W"
        },
        {
            "signature": "MDNS_QUERY_CALLBACK MdnsQueryCallback; void MdnsQueryCallback( PVOID pQueryContext, PMDNS_QUERY_HANDLE pQueryHandle, PDNS_QUERY_RESULT pQueryResults ) {...}",
            "name": "MDNS_QUERY_CALLBACK callback"
        }
    ],
    "Windows.data.pdf.interop.h": [
        {
            "signature": "HRESULT PdfCreateRenderer( [in] IDXGIDevice *pDevice, [out] IPdfRendererNative **ppRenderer );",
            "name": "PdfCreateRenderer"
        },
        {
            "signature": "PDF_RENDER_PARAMS PdfRenderParams( [in] const D2D_RECT_F & srcRect, [in] UINT32 destinationWidth, [in] UINT32 destinationHeight, [in] const D2D_COLOR_F & bkColor, [in] BOOLEAN ignoreHighContrast );",
            "name": "PdfRenderParams"
        }
    ],
    "Windows.devices.alljoyn.interop.h": [],
    "Windows.devices.display.core.interop.h": [
        {
            "signature": "INT64 Int64FromLuid( const LUID & Luid );",
            "name": "Int64FromLuid"
        },
        {
            "signature": "LUID LuidFromInt64( INT64 Int64 );",
            "name": "LuidFromInt64"
        }
    ],
    "Windows.foundation.h": [],
    "Windows.graphics.capture.interop.h": [],
    "Windows.graphics.directx.direct3d11.interop.h": [
        {
            "signature": "HRESULT CreateDirect3D11DeviceFromDXGIDevice( [in] IDXGIDevice *dxgiDevice, [out] IInspectable **graphicsDevice );",
            "name": "CreateDirect3D11DeviceFromDXGIDevice"
        },
        {
            "signature": "HRESULT CreateDirect3D11SurfaceFromDXGISurface( IDXGISurface *dgxiSurface, [out] IInspectable **graphicsSurface );",
            "name": "CreateDirect3D11SurfaceFromDXGISurface"
        },
        {
            "signature": "IDirect3DDevice ^ CreateDirect3DDevice( [in] IDXGIDevice *dxgiDevice );",
            "name": "CreateDirect3DDevice"
        },
        {
            "signature": "IDirect3DSurface ^ CreateDirect3DSurface( [in] IDXGISurface *dxgiSurface );",
            "name": "CreateDirect3DSurface"
        },
        {
            "signature": "HRESULT GetDXGIInterface( IDirect3DDevice ^ device, DXGI_TYPE **dxgi );",
            "name": "GetDXGIInterface"
        },
        {
            "signature": "HRESULT GetDXGIInterface( IDirect3DSurface ^ surface, DXGI_TYPE **dxgi );",
            "name": "GetDXGIInterface"
        },
        {
            "signature": "HRESULT GetDXGIInterfaceFromObject( Platform::Object ^ object, REFIID iid, void **p );",
            "name": "GetDXGIInterfaceFromObject"
        }
    ],
    "Windows.graphics.display.interop.h": [],
    "Windows.graphics.effects.interop.h": [],
    "Windows.graphics.holographic.interop.h": [],
    "Windows.graphics.imaging.interop.h": [],
    "Windows.media.core.interop.h": [],
    "Windows.ui.composition.interop.h": [],
    "Windows.ui.viewmanagement.core.coreframeworkinputviewinterop.h": [],
    "Windows.ui.xaml.hosting.desktopwindowxamlsource.h": [],
    "Windows.ui.xaml.hosting.referencetracker.h": [],
    "Windows.ui.xaml.media.dxinterop.h": [],
    "Windowsceip.h": [
        {
            "signature": "BOOL CeipIsOptedIn();",
            "name": "CeipIsOptedIn"
        }
    ],
    "Windowsdefender.h": [
        {
            "signature": "HRESULT WDEnable( [in] BOOL fEnable );",
            "name": "WDEnable"
        },
        {
            "signature": "HRESULT WDStatus( [out] BOOL *pfEnabled );",
            "name": "WDStatus"
        }
    ],
    "Windowsstoragecom.h": [],
    "Windowsx.h": [],
    "Winefs.h": [
        {
            "signature": "DWORD AddUsersToEncryptedFile( [in] LPCWSTR lpFileName, [in] PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates );",
            "name": "AddUsersToEncryptedFile"
        },
        {
            "signature": "DWORD DuplicateEncryptionInfoFile( [in] LPCWSTR SrcFileName, [in] LPCWSTR DstFileName, [in] DWORD dwCreationDistribution, [in] DWORD dwAttributes, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "DuplicateEncryptionInfoFile"
        },
        {
            "signature": "BOOL EncryptionDisable( [in] LPCWSTR DirPath, [in] BOOL Disable );",
            "name": "EncryptionDisable"
        },
        {
            "signature": "void FreeEncryptionCertificateHashList( [in] PENCRYPTION_CERTIFICATE_HASH_LIST pUsers );",
            "name": "FreeEncryptionCertificateHashList"
        },
        {
            "signature": "DWORD QueryRecoveryAgentsOnEncryptedFile( [in] LPCWSTR lpFileName, [out] PENCRYPTION_CERTIFICATE_HASH_LIST *pRecoveryAgents );",
            "name": "QueryRecoveryAgentsOnEncryptedFile"
        },
        {
            "signature": "DWORD QueryUsersOnEncryptedFile( [in] LPCWSTR lpFileName, [out] PENCRYPTION_CERTIFICATE_HASH_LIST *pUsers );",
            "name": "QueryUsersOnEncryptedFile"
        },
        {
            "signature": "DWORD RemoveUsersFromEncryptedFile( [in] LPCWSTR lpFileName, [in] PENCRYPTION_CERTIFICATE_HASH_LIST pHashes );",
            "name": "RemoveUsersFromEncryptedFile"
        },
        {
            "signature": "DWORD SetUserFileEncryptionKey( [in] PENCRYPTION_CERTIFICATE pEncryptionCertificate );",
            "name": "SetUserFileEncryptionKey"
        }
    ],
    "Winenclaveapi.h": [
        {
            "signature": "HRESULT EnclaveGetAttestationReport( [in, optional] const UINT8 [ENCLAVE_REPORT_DATA_LENGTH] EnclaveData, [out] PVOID Report, [in] UINT32 BufferSize, [out] UINT32 *OutputSize );",
            "name": "EnclaveGetAttestationReport"
        },
        {
            "signature": "HRESULT EnclaveGetEnclaveInformation( [in] UINT32 InformationSize, [out] ENCLAVE_INFORMATION *EnclaveInformation );",
            "name": "EnclaveGetEnclaveInformation"
        },
        {
            "signature": "HRESULT EnclaveSealData( [in] const VOID *DataToEncrypt, [in] UINT32 DataToEncryptSize, [in] ENCLAVE_SEALING_IDENTITY_POLICY IdentityPolicy, [in] UINT32 RuntimePolicy, [out] PVOID ProtectedBlob, [in] UINT32 BufferSize, [out] UINT32 *ProtectedBlobSize );",
            "name": "EnclaveSealData"
        },
        {
            "signature": "HRESULT EnclaveUnsealData( [in] const VOID *ProtectedBlob, [in] UINT32 ProtectedBlobSize, [out] PVOID DecryptedData, [in] UINT32 BufferSize, [out] UINT32 *DecryptedDataSize, [out, optional] ENCLAVE_IDENTITY *SealingIdentity, [out, optional] UINT32 *UnsealingFlags );",
            "name": "EnclaveUnsealData"
        },
        {
            "signature": "HRESULT EnclaveVerifyAttestationReport( [in] UINT32 EnclaveType, [in] const VOID *Report, [in] UINT32 ReportSize );",
            "name": "EnclaveVerifyAttestationReport"
        }
    ],
    "Winerror.h": [],
    "Winevt.h": [
        {
            "signature": "EVT_SUBSCRIBE_CALLBACK EvtSubscribeCallback; DWORD EvtSubscribeCallback( EVT_SUBSCRIBE_NOTIFY_ACTION Action, PVOID UserContext, EVT_HANDLE Event ) {...}",
            "name": "EVT_SUBSCRIBE_CALLBACK callback"
        },
        {
            "signature": "BOOL EvtArchiveExportedLog( [in] EVT_HANDLE Session, [in] LPCWSTR LogFilePath, [in] LCID Locale, [in] DWORD Flags );",
            "name": "EvtArchiveExportedLog"
        },
        {
            "signature": "BOOL EvtCancel( EVT_HANDLE Object );",
            "name": "EvtCancel"
        },
        {
            "signature": "BOOL EvtClearLog( [in, optional] EVT_HANDLE Session, [in] LPCWSTR ChannelPath, [in, optional] LPCWSTR TargetFilePath, [in] DWORD Flags );",
            "name": "EvtClearLog"
        },
        {
            "signature": "BOOL EvtClose( [in] EVT_HANDLE Object );",
            "name": "EvtClose"
        },
        {
            "signature": "EVT_HANDLE EvtCreateBookmark( [in, optional] LPCWSTR BookmarkXml );",
            "name": "EvtCreateBookmark"
        },
        {
            "signature": "EVT_HANDLE EvtCreateRenderContext( [in] DWORD ValuePathsCount, [in] LPCWSTR *ValuePaths, [in] DWORD Flags );",
            "name": "EvtCreateRenderContext"
        },
        {
            "signature": "BOOL EvtExportLog( [in, optional] EVT_HANDLE Session, [in] LPCWSTR Path, [in] LPCWSTR Query, [in] LPCWSTR TargetFilePath, [in] DWORD Flags );",
            "name": "EvtExportLog"
        },
        {
            "signature": "BOOL EvtFormatMessage( [in] EVT_HANDLE PublisherMetadata, [in] EVT_HANDLE Event, [in] DWORD MessageId, [in] DWORD ValueCount, [in] PEVT_VARIANT Values, [in] DWORD Flags, [in] DWORD BufferSize, [in] LPWSTR Buffer, [out] PDWORD BufferUsed );",
            "name": "EvtFormatMessage"
        },
        {
            "signature": "BOOL EvtGetChannelConfigProperty( [in] EVT_HANDLE ChannelConfig, [in] EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] DWORD PropertyValueBufferSize, [in] PEVT_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EvtGetChannelConfigProperty"
        },
        {
            "signature": "BOOL EvtGetEventInfo( [in] EVT_HANDLE Event, [in] EVT_EVENT_PROPERTY_ID PropertyId, [in] DWORD PropertyValueBufferSize, [in] PEVT_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EvtGetEventInfo"
        },
        {
            "signature": "BOOL EvtGetEventMetadataProperty( [in] EVT_HANDLE EventMetadata, [in] EVT_EVENT_METADATA_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] DWORD EventMetadataPropertyBufferSize, [in] PEVT_VARIANT EventMetadataPropertyBuffer, [out] PDWORD EventMetadataPropertyBufferUsed );",
            "name": "EvtGetEventMetadataProperty"
        },
        {
            "signature": "DWORD EvtGetExtendedStatus( [in] DWORD BufferSize, [in] LPWSTR Buffer, [out] PDWORD BufferUsed );",
            "name": "EvtGetExtendedStatus"
        },
        {
            "signature": "BOOL EvtGetLogInfo( [in] EVT_HANDLE Log, [in] EVT_LOG_PROPERTY_ID PropertyId, [in] DWORD PropertyValueBufferSize, [in] PEVT_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EvtGetLogInfo"
        },
        {
            "signature": "BOOL EvtGetObjectArrayProperty( [in] EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [in] DWORD PropertyId, [in] DWORD ArrayIndex, [in] DWORD Flags, [in] DWORD PropertyValueBufferSize, [in] PEVT_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EvtGetObjectArrayProperty"
        },
        {
            "signature": "BOOL EvtGetObjectArraySize( [in] EVT_OBJECT_ARRAY_PROPERTY_HANDLE ObjectArray, [out] PDWORD ObjectArraySize );",
            "name": "EvtGetObjectArraySize"
        },
        {
            "signature": "BOOL EvtGetPublisherMetadataProperty( [in] EVT_HANDLE PublisherMetadata, [in] EVT_PUBLISHER_METADATA_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] DWORD PublisherMetadataPropertyBufferSize, [in] PEVT_VARIANT PublisherMetadataPropertyBuffer, [out] PDWORD PublisherMetadataPropertyBufferUsed );",
            "name": "EvtGetPublisherMetadataProperty"
        },
        {
            "signature": "BOOL EvtGetQueryInfo( [in] EVT_HANDLE QueryOrSubscription, [in] EVT_QUERY_PROPERTY_ID PropertyId, [in] DWORD PropertyValueBufferSize, [in] PEVT_VARIANT PropertyValueBuffer, [out] PDWORD PropertyValueBufferUsed );",
            "name": "EvtGetQueryInfo"
        },
        {
            "signature": "BOOL EvtNext( [in] EVT_HANDLE ResultSet, [in] DWORD EventsSize, [in] PEVT_HANDLE Events, [in] DWORD Timeout, [in] DWORD Flags, [out] PDWORD Returned );",
            "name": "EvtNext"
        },
        {
            "signature": "BOOL EvtNextChannelPath( [in] EVT_HANDLE ChannelEnum, [in] DWORD ChannelPathBufferSize, [in] LPWSTR ChannelPathBuffer, [out] PDWORD ChannelPathBufferUsed );",
            "name": "EvtNextChannelPath"
        },
        {
            "signature": "EVT_HANDLE EvtNextEventMetadata( [in] EVT_HANDLE EventMetadataEnum, [in] DWORD Flags );",
            "name": "EvtNextEventMetadata"
        },
        {
            "signature": "BOOL EvtNextPublisherId( [in] EVT_HANDLE PublisherEnum, [in] DWORD PublisherIdBufferSize, [in] LPWSTR PublisherIdBuffer, [out] PDWORD PublisherIdBufferUsed );",
            "name": "EvtNextPublisherId"
        },
        {
            "signature": "EVT_HANDLE EvtOpenChannelConfig( [in] EVT_HANDLE Session, [in] LPCWSTR ChannelPath, [in] DWORD Flags );",
            "name": "EvtOpenChannelConfig"
        },
        {
            "signature": "EVT_HANDLE EvtOpenChannelEnum( [in] EVT_HANDLE Session, [in] DWORD Flags );",
            "name": "EvtOpenChannelEnum"
        },
        {
            "signature": "EVT_HANDLE EvtOpenEventMetadataEnum( [in] EVT_HANDLE PublisherMetadata, [in] DWORD Flags );",
            "name": "EvtOpenEventMetadataEnum"
        },
        {
            "signature": "EVT_HANDLE EvtOpenLog( [in] EVT_HANDLE Session, [in] LPCWSTR Path, [in] DWORD Flags );",
            "name": "EvtOpenLog"
        },
        {
            "signature": "EVT_HANDLE EvtOpenPublisherEnum( [in] EVT_HANDLE Session, [in] DWORD Flags );",
            "name": "EvtOpenPublisherEnum"
        },
        {
            "signature": "EVT_HANDLE EvtOpenPublisherMetadata( [in, optional] EVT_HANDLE Session, [in] LPCWSTR PublisherId, [in, optional] LPCWSTR LogFilePath, [in] LCID Locale, [in] DWORD Flags );",
            "name": "EvtOpenPublisherMetadata"
        },
        {
            "signature": "EVT_HANDLE EvtOpenSession( [in] EVT_LOGIN_CLASS LoginClass, [in] PVOID Login, [in] DWORD Timeout, [in] DWORD Flags );",
            "name": "EvtOpenSession"
        },
        {
            "signature": "EVT_HANDLE EvtQuery( [in] EVT_HANDLE Session, [in] LPCWSTR Path, [in] LPCWSTR Query, [in] DWORD Flags );",
            "name": "EvtQuery"
        },
        {
            "signature": "BOOL EvtRender( [in] EVT_HANDLE Context, [in] EVT_HANDLE Fragment, [in] DWORD Flags, [in] DWORD BufferSize, [in] PVOID Buffer, [out] PDWORD BufferUsed, [out] PDWORD PropertyCount );",
            "name": "EvtRender"
        },
        {
            "signature": "BOOL EvtSaveChannelConfig( [in] EVT_HANDLE ChannelConfig, [in] DWORD Flags );",
            "name": "EvtSaveChannelConfig"
        },
        {
            "signature": "BOOL EvtSeek( [in] EVT_HANDLE ResultSet, [in] LONGLONG Position, [in] EVT_HANDLE Bookmark, [in] DWORD Timeout, [in] DWORD Flags );",
            "name": "EvtSeek"
        },
        {
            "signature": "BOOL EvtSetChannelConfigProperty( [in] EVT_HANDLE ChannelConfig, [in] EVT_CHANNEL_CONFIG_PROPERTY_ID PropertyId, [in] DWORD Flags, [in] PEVT_VARIANT PropertyValue );",
            "name": "EvtSetChannelConfigProperty"
        },
        {
            "signature": "EVT_HANDLE EvtSubscribe( [in] EVT_HANDLE Session, [in] HANDLE SignalEvent, [in] LPCWSTR ChannelPath, [in] LPCWSTR Query, [in] EVT_HANDLE Bookmark, [in] PVOID Context, [in] EVT_SUBSCRIBE_CALLBACK Callback, [in] DWORD Flags );",
            "name": "EvtSubscribe"
        },
        {
            "signature": "BOOL EvtUpdateBookmark( [in] EVT_HANDLE Bookmark, [in] EVT_HANDLE Event );",
            "name": "EvtUpdateBookmark"
        }
    ],
    "Winfax.h": [
        {
            "signature": "WINFAXAPI BOOL FaxCompleteJobParamsA( [in, out] PFAX_JOB_PARAMA *JobParams, [in, out] PFAX_COVERPAGE_INFOA *CoverpageInfo );",
            "name": "FaxCompleteJobParamsA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxCompleteJobParamsW( [in, out] PFAX_JOB_PARAMW *JobParams, [in, out] PFAX_COVERPAGE_INFOW *CoverpageInfo );",
            "name": "FaxCompleteJobParamsW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxConnectFaxServerA( [in, optional] LPCSTR MachineName, [out] LPHANDLE FaxHandle );",
            "name": "FaxConnectFaxServerA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxConnectFaxServerW( [in, optional] LPCWSTR MachineName, [out] LPHANDLE FaxHandle );",
            "name": "FaxConnectFaxServerW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnableRoutingMethodA( [in] HANDLE FaxPortHandle, [in] LPCSTR RoutingGuid, [in] BOOL Enabled );",
            "name": "FaxEnableRoutingMethodA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnableRoutingMethodW( [in] HANDLE FaxPortHandle, [in] LPCWSTR RoutingGuid, [in] BOOL Enabled );",
            "name": "FaxEnableRoutingMethodW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumGlobalRoutingInfoA( [in] HANDLE FaxHandle, [out] PFAX_GLOBAL_ROUTING_INFOA *RoutingInfo, [out] LPDWORD MethodsReturned );",
            "name": "FaxEnumGlobalRoutingInfoA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumGlobalRoutingInfoW( [in] HANDLE FaxHandle, [out] PFAX_GLOBAL_ROUTING_INFOW *RoutingInfo, [out] LPDWORD MethodsReturned );",
            "name": "FaxEnumGlobalRoutingInfoW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumJobsA( [in] HANDLE FaxHandle, [out] PFAX_JOB_ENTRYA *JobEntry, [out] LPDWORD JobsReturned );",
            "name": "FaxEnumJobsA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumJobsW( [in] HANDLE FaxHandle, [out] PFAX_JOB_ENTRYW *JobEntry, [out] LPDWORD JobsReturned );",
            "name": "FaxEnumJobsW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumPortsA( [in] HANDLE FaxHandle, [out] PFAX_PORT_INFOA *PortInfo, [out] LPDWORD PortsReturned );",
            "name": "FaxEnumPortsA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumPortsW( [in] HANDLE FaxHandle, [out] PFAX_PORT_INFOW *PortInfo, [out] LPDWORD PortsReturned );",
            "name": "FaxEnumPortsW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumRoutingMethodsA( [in] HANDLE FaxPortHandle, [out] PFAX_ROUTING_METHODA *RoutingMethod, [out] LPDWORD MethodsReturned );",
            "name": "FaxEnumRoutingMethodsA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxEnumRoutingMethodsW( [in] HANDLE FaxPortHandle, [out] PFAX_ROUTING_METHODW *RoutingMethod, [out] LPDWORD MethodsReturned );",
            "name": "FaxEnumRoutingMethodsW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetConfigurationA( [in] HANDLE FaxHandle, [out] PFAX_CONFIGURATIONA *FaxConfig );",
            "name": "FaxGetConfigurationA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetConfigurationW( [in] HANDLE FaxHandle, [out] PFAX_CONFIGURATIONW *FaxConfig );",
            "name": "FaxGetConfigurationW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetDeviceStatusA( [in] HANDLE FaxPortHandle, [out] PFAX_DEVICE_STATUSA *DeviceStatus );",
            "name": "FaxGetDeviceStatusA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetDeviceStatusW( [in] HANDLE FaxPortHandle, [out] PFAX_DEVICE_STATUSW *DeviceStatus );",
            "name": "FaxGetDeviceStatusW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetJobA( [in] HANDLE FaxHandle, [in] DWORD JobId, [out] PFAX_JOB_ENTRYA *JobEntry );",
            "name": "FaxGetJobA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetJobW( [in] HANDLE FaxHandle, [in] DWORD JobId, [out] PFAX_JOB_ENTRYW *JobEntry );",
            "name": "FaxGetJobW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetLoggingCategoriesA( [in] HANDLE FaxHandle, [out] PFAX_LOG_CATEGORYA *Categories, [out] LPDWORD NumberCategories );",
            "name": "FaxGetLoggingCategoriesA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetLoggingCategoriesW( [in] HANDLE FaxHandle, [out] PFAX_LOG_CATEGORYW *Categories, [out] LPDWORD NumberCategories );",
            "name": "FaxGetLoggingCategoriesW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetPortA( [in] HANDLE FaxPortHandle, [out] PFAX_PORT_INFOA *PortInfo );",
            "name": "FaxGetPortA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetPortW( [in] HANDLE FaxPortHandle, [out] PFAX_PORT_INFOW *PortInfo );",
            "name": "FaxGetPortW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetRoutingInfoA( [in] HANDLE FaxPortHandle, [in] LPCSTR RoutingGuid, [out] LPBYTE *RoutingInfoBuffer, [out] LPDWORD RoutingInfoBufferSize );",
            "name": "FaxGetRoutingInfoA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxGetRoutingInfoW( [in] HANDLE FaxPortHandle, [in] LPCWSTR RoutingGuid, [out] LPBYTE *RoutingInfoBuffer, [out] LPDWORD RoutingInfoBufferSize );",
            "name": "FaxGetRoutingInfoW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxPrintCoverPageA( [in] const FAX_CONTEXT_INFOA *FaxContextInfo, [in] const FAX_COVERPAGE_INFOA *CoverPageInfo );",
            "name": "FaxPrintCoverPageA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxPrintCoverPageW( [in] const FAX_CONTEXT_INFOW *FaxContextInfo, [in] const FAX_COVERPAGE_INFOW *CoverPageInfo );",
            "name": "FaxPrintCoverPageW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxRegisterRoutingExtensionW( [in] HANDLE FaxHandle, [in] LPCWSTR ExtensionName, [in] LPCWSTR FriendlyName, [in] LPCWSTR ImageName, [in] PFAX_ROUTING_INSTALLATION_CALLBACKW CallBack, [in] LPVOID Context );",
            "name": "FaxRegisterRoutingExtensionW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxRegisterServiceProviderW( [in] LPCWSTR DeviceProvider, [in] LPCWSTR FriendlyName, [in] LPCWSTR ImageName, [in] LPCWSTR TspName );",
            "name": "FaxRegisterServiceProviderW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSendDocumentA( [in] HANDLE FaxHandle, [in] LPCSTR FileName, [in] PFAX_JOB_PARAMA JobParams, [in, optional] const FAX_COVERPAGE_INFOA *CoverpageInfo, [out] LPDWORD FaxJobId );",
            "name": "FaxSendDocumentA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSendDocumentForBroadcastA( [in] HANDLE FaxHandle, [in] LPCSTR FileName, [out] LPDWORD FaxJobId, [in] PFAX_RECIPIENT_CALLBACKA FaxRecipientCallback, [in] LPVOID Context );",
            "name": "FaxSendDocumentForBroadcastA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSendDocumentForBroadcastW( [in] HANDLE FaxHandle, [in] LPCWSTR FileName, [out] LPDWORD FaxJobId, [in] PFAX_RECIPIENT_CALLBACKW FaxRecipientCallback, [in] LPVOID Context );",
            "name": "FaxSendDocumentForBroadcastW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSendDocumentW( [in] HANDLE FaxHandle, [in] LPCWSTR FileName, [in] PFAX_JOB_PARAMW JobParams, [in, optional] const FAX_COVERPAGE_INFOW *CoverpageInfo, [out] LPDWORD FaxJobId );",
            "name": "FaxSendDocumentW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetConfigurationA( [in] HANDLE FaxHandle, [in] const FAX_CONFIGURATIONA *FaxConfig );",
            "name": "FaxSetConfigurationA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetConfigurationW( [in] HANDLE FaxHandle, [in] const FAX_CONFIGURATIONW *FaxConfig );",
            "name": "FaxSetConfigurationW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetGlobalRoutingInfoA( [in] HANDLE FaxHandle, [in] const FAX_GLOBAL_ROUTING_INFOA *RoutingInfo );",
            "name": "FaxSetGlobalRoutingInfoA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetGlobalRoutingInfoW( [in] HANDLE FaxHandle, [in] const FAX_GLOBAL_ROUTING_INFOW *RoutingInfo );",
            "name": "FaxSetGlobalRoutingInfoW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetJobA( [in] HANDLE FaxHandle, [in] DWORD JobId, [in] DWORD Command, [in] const FAX_JOB_ENTRYA *JobEntry );",
            "name": "FaxSetJobA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetJobW( [in] HANDLE FaxHandle, [in] DWORD JobId, [in] DWORD Command, [in] const FAX_JOB_ENTRYW *JobEntry );",
            "name": "FaxSetJobW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetLoggingCategoriesA( [in] HANDLE FaxHandle, [in] const FAX_LOG_CATEGORYA *Categories, [in] DWORD NumberCategories );",
            "name": "FaxSetLoggingCategoriesA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetLoggingCategoriesW( [in] HANDLE FaxHandle, [in] const FAX_LOG_CATEGORYW *Categories, [in] DWORD NumberCategories );",
            "name": "FaxSetLoggingCategoriesW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetPortA( [in] HANDLE FaxPortHandle, [in] const FAX_PORT_INFOA *PortInfo );",
            "name": "FaxSetPortA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetPortW( [in] HANDLE FaxPortHandle, [in] const FAX_PORT_INFOW *PortInfo );",
            "name": "FaxSetPortW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetRoutingInfoA( [in] HANDLE FaxPortHandle, [in] LPCSTR RoutingGuid, [in] const BYTE *RoutingInfoBuffer, [in] DWORD RoutingInfoBufferSize );",
            "name": "FaxSetRoutingInfoA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxSetRoutingInfoW( [in] HANDLE FaxPortHandle, [in] LPCWSTR RoutingGuid, [in] const BYTE *RoutingInfoBuffer, [in] DWORD RoutingInfoBufferSize );",
            "name": "FaxSetRoutingInfoW"
        },
        {
            "signature": "WINFAXAPI BOOL FaxStartPrintJobA( [in] LPCSTR PrinterName, [in] const FAX_PRINT_INFOA *PrintInfo, [out] LPDWORD FaxJobId, [out] PFAX_CONTEXT_INFOA FaxContextInfo );",
            "name": "FaxStartPrintJobA"
        },
        {
            "signature": "WINFAXAPI BOOL FaxStartPrintJobW( [in] LPCWSTR PrinterName, [in] const FAX_PRINT_INFOW *PrintInfo, [out] LPDWORD FaxJobId, [out] PFAX_CONTEXT_INFOW FaxContextInfo );",
            "name": "FaxStartPrintJobW"
        },
        {
            "signature": "PFAX_RECIPIENT_CALLBACKA PfaxRecipientCallbacka; BOOL PfaxRecipientCallbacka( [in] HANDLE FaxHandle, [in] DWORD RecipientNumber, [in] LPVOID Context, [in, out] PFAX_JOB_PARAMA JobParams, [in, out, optional] PFAX_COVERPAGE_INFOA CoverpageInfo ) {...}",
            "name": "PFAX_RECIPIENT_CALLBACKA callback"
        },
        {
            "signature": "PFAX_RECIPIENT_CALLBACKW PfaxRecipientCallbackw; BOOL PfaxRecipientCallbackw( [in] HANDLE FaxHandle, [in] DWORD RecipientNumber, [in] LPVOID Context, [in, out] PFAX_JOB_PARAMW JobParams, [in, out, optional] PFAX_COVERPAGE_INFOW CoverpageInfo ) {...}",
            "name": "PFAX_RECIPIENT_CALLBACKW callback"
        },
        {
            "signature": "PFAX_ROUTING_INSTALLATION_CALLBACKW PfaxRoutingInstallationCallbackw; BOOL PfaxRoutingInstallationCallbackw( [in] HANDLE FaxHandle, [in] LPVOID Context, [out] LPWSTR MethodName, [out] LPWSTR FriendlyName, [out] LPWSTR FunctionName, [out] LPWSTR Guid ) {...}",
            "name": "PFAX_ROUTING_INSTALLATION_CALLBACKW callback"
        },
        {
            "signature": "PFAXABORT Pfaxabort; BOOL Pfaxabort( [in] HANDLE FaxHandle, [in] DWORD JobId ) {...}",
            "name": "PFAXABORT callback"
        },
        {
            "signature": "PFAXACCESSCHECK Pfaxaccesscheck; BOOL Pfaxaccesscheck( [in] HANDLE FaxHandle, [in] DWORD AccessMask ) {...}",
            "name": "PFAXACCESSCHECK callback"
        },
        {
            "signature": "PFAXCLOSE Pfaxclose; BOOL Pfaxclose( [in] HANDLE FaxHandle ) {...}",
            "name": "PFAXCLOSE callback"
        },
        {
            "signature": "PFAXFREEBUFFER Pfaxfreebuffer; void Pfaxfreebuffer( [in] LPVOID Buffer ) {...}",
            "name": "PFAXFREEBUFFER callback"
        },
        {
            "signature": "PFAXGETPAGEDATA Pfaxgetpagedata; BOOL Pfaxgetpagedata( [in] HANDLE FaxHandle, [in] DWORD JobId, [out] LPBYTE *Buffer, [out] LPDWORD BufferSize, [out] LPDWORD ImageWidth, [out] LPDWORD ImageHeight ) {...}",
            "name": "PFAXGETPAGEDATA callback"
        },
        {
            "signature": "PFAXINITIALIZEEVENTQUEUE Pfaxinitializeeventqueue; BOOL Pfaxinitializeeventqueue( [in] HANDLE FaxHandle, [in] HANDLE CompletionPort, [in] ULONG_PTR CompletionKey, [in] HWND hWnd, [in] UINT MessageStart ) {...}",
            "name": "PFAXINITIALIZEEVENTQUEUE callback"
        },
        {
            "signature": "PFAXOPENPORT Pfaxopenport; BOOL Pfaxopenport( [in] HANDLE FaxHandle, [in] DWORD DeviceId, [in] DWORD Flags, [out] LPHANDLE FaxPortHandle ) {...}",
            "name": "PFAXOPENPORT callback"
        }
    ],
    "Wingdi.h": [
        {
            "signature": "int AbortDoc( [in] HDC hdc );",
            "name": "AbortDoc"
        },
        {
            "signature": "BOOL AbortPath( [in] HDC hdc );",
            "name": "AbortPath"
        },
        {
            "signature": "ABORTPROC Abortproc; BOOL Abortproc( HDC unnamedParam1, int unnamedParam2 ) {...}",
            "name": "ABORTPROC callback"
        },
        {
            "signature": "HANDLE AddFontMemResourceEx( [in] PVOID pFileView, [in] DWORD cjSize, [in] PVOID pvResrved, [in] DWORD *pNumFonts );",
            "name": "AddFontMemResourceEx"
        },
        {
            "signature": "int AddFontResourceA( [in] LPCSTR unnamedParam1 );",
            "name": "AddFontResourceA"
        },
        {
            "signature": "int AddFontResourceExA( [in] LPCSTR name, [in] DWORD fl, [in] PVOID res );",
            "name": "AddFontResourceExA"
        },
        {
            "signature": "int AddFontResourceExW( [in] LPCWSTR name, [in] DWORD fl, [in] PVOID res );",
            "name": "AddFontResourceExW"
        },
        {
            "signature": "int AddFontResourceW( [in] LPCWSTR unnamedParam1 );",
            "name": "AddFontResourceW"
        },
        {
            "signature": "BOOL AlphaBlend( [in] HDC hdcDest, [in] int xoriginDest, [in] int yoriginDest, [in] int wDest, [in] int hDest, [in] HDC hdcSrc, [in] int xoriginSrc, [in] int yoriginSrc, [in] int wSrc, [in] int hSrc, [in] BLENDFUNCTION ftn );",
            "name": "AlphaBlend"
        },
        {
            "signature": "BOOL AngleArc( [in] HDC hdc, [in] int x, [in] int y, [in] DWORD r, [in] FLOAT StartAngle, [in] FLOAT SweepAngle );",
            "name": "AngleArc"
        },
        {
            "signature": "BOOL AnimatePalette( [in] HPALETTE hPal, [in] UINT iStartIndex, [in] UINT cEntries, [in] const PALETTEENTRY *ppe );",
            "name": "AnimatePalette"
        },
        {
            "signature": "BOOL Arc( [in] HDC hdc, [in] int x1, [in] int y1, [in] int x2, [in] int y2, [in] int x3, [in] int y3, [in] int x4, [in] int y4 );",
            "name": "Arc"
        },
        {
            "signature": "BOOL ArcTo( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom, [in] int xr1, [in] int yr1, [in] int xr2, [in] int yr2 );",
            "name": "ArcTo"
        },
        {
            "signature": "BOOL BeginPath( [in] HDC hdc );",
            "name": "BeginPath"
        },
        {
            "signature": "BOOL BitBlt( [in] HDC hdc, [in] int x, [in] int y, [in] int cx, [in] int cy, [in] HDC hdcSrc, [in] int x1, [in] int y1, [in] DWORD rop );",
            "name": "BitBlt"
        },
        {
            "signature": "BOOL CancelDC( [in] HDC hdc );",
            "name": "CancelDC"
        },
        {
            "signature": "BOOL CheckColorsInGamut( HDC hdc, LPRGBTRIPLE lpRGBTriple, LPVOID dlpBuffer, DWORD nCount );",
            "name": "CheckColorsInGamut"
        },
        {
            "signature": "int ChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR *ppfd );",
            "name": "ChoosePixelFormat"
        },
        {
            "signature": "BOOL Chord( [in] HDC hdc, [in] int x1, [in] int y1, [in] int x2, [in] int y2, [in] int x3, [in] int y3, [in] int x4, [in] int y4 );",
            "name": "Chord"
        },
        {
            "signature": "HENHMETAFILE CloseEnhMetaFile( [in] HDC hdc );",
            "name": "CloseEnhMetaFile"
        },
        {
            "signature": "BOOL CloseFigure( [in] HDC hdc );",
            "name": "CloseFigure"
        },
        {
            "signature": "HMETAFILE CloseMetaFile( [in] HDC hdc );",
            "name": "CloseMetaFile"
        },
        {
            "signature": "BOOL ColorCorrectPalette( HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num );",
            "name": "ColorCorrectPalette"
        },
        {
            "signature": "BOOL ColorMatchToTarget( HDC hdc, HDC hdcTarget, DWORD action );",
            "name": "ColorMatchToTarget"
        },
        {
            "signature": "int CombineRgn( [in] HRGN hrgnDst, [in] HRGN hrgnSrc1, [in] HRGN hrgnSrc2, [in] int iMode );",
            "name": "CombineRgn"
        },
        {
            "signature": "BOOL CombineTransform( [out] LPXFORM lpxfOut, [in] const XFORM *lpxf1, [in] const XFORM *lpxf2 );",
            "name": "CombineTransform"
        },
        {
            "signature": "HENHMETAFILE CopyEnhMetaFileA( [in] HENHMETAFILE hEnh, [in] LPCSTR lpFileName );",
            "name": "CopyEnhMetaFileA"
        },
        {
            "signature": "HENHMETAFILE CopyEnhMetaFileW( [in] HENHMETAFILE hEnh, [in] LPCWSTR lpFileName );",
            "name": "CopyEnhMetaFileW"
        },
        {
            "signature": "HMETAFILE CopyMetaFileA( [in] HMETAFILE unnamedParam1, [in] LPCSTR unnamedParam2 );",
            "name": "CopyMetaFileA"
        },
        {
            "signature": "HMETAFILE CopyMetaFileW( [in] HMETAFILE unnamedParam1, [in] LPCWSTR unnamedParam2 );",
            "name": "CopyMetaFileW"
        },
        {
            "signature": "HBITMAP CreateBitmap( [in] int nWidth, [in] int nHeight, [in] UINT nPlanes, [in] UINT nBitCount, [in] const VOID *lpBits );",
            "name": "CreateBitmap"
        },
        {
            "signature": "HBITMAP CreateBitmapIndirect( [in] const BITMAP *pbm );",
            "name": "CreateBitmapIndirect"
        },
        {
            "signature": "HBRUSH CreateBrushIndirect( [in] const LOGBRUSH *plbrush );",
            "name": "CreateBrushIndirect"
        },
        {
            "signature": "HCOLORSPACE CreateColorSpaceA( LPLOGCOLORSPACEA lplcs );",
            "name": "CreateColorSpaceA"
        },
        {
            "signature": "HCOLORSPACE CreateColorSpaceW( LPLOGCOLORSPACEW lplcs );",
            "name": "CreateColorSpaceW"
        },
        {
            "signature": "HBITMAP CreateCompatibleBitmap( [in] HDC hdc, [in] int cx, [in] int cy );",
            "name": "CreateCompatibleBitmap"
        },
        {
            "signature": "HDC CreateCompatibleDC( [in] HDC hdc );",
            "name": "CreateCompatibleDC"
        },
        {
            "signature": "HDC CreateDCA( LPCSTR pwszDriver, [in] LPCSTR pwszDevice, LPCSTR pszPort, [in] const DEVMODEA *pdm );",
            "name": "CreateDCA"
        },
        {
            "signature": "HDC CreateDCW( LPCWSTR pwszDriver, [in] LPCWSTR pwszDevice, LPCWSTR pszPort, [in] const DEVMODEW *pdm );",
            "name": "CreateDCW"
        },
        {
            "signature": "HBITMAP CreateDIBitmap( [in] HDC hdc, [in] const BITMAPINFOHEADER *pbmih, [in] DWORD flInit, [in] const VOID *pjBits, [in] const BITMAPINFO *pbmi, [in] UINT iUsage );",
            "name": "CreateDIBitmap"
        },
        {
            "signature": "HBRUSH CreateDIBPatternBrush( [in] HGLOBAL h, [in] UINT iUsage );",
            "name": "CreateDIBPatternBrush"
        },
        {
            "signature": "HBRUSH CreateDIBPatternBrushPt( [in] const VOID *lpPackedDIB, [in] UINT iUsage );",
            "name": "CreateDIBPatternBrushPt"
        },
        {
            "signature": "HBITMAP CreateDIBSection( [in] HDC hdc, [in] const BITMAPINFO *pbmi, [in] UINT usage, [out] VOID **ppvBits, [in] HANDLE hSection, [in] DWORD offset );",
            "name": "CreateDIBSection"
        },
        {
            "signature": "HBITMAP CreateDiscardableBitmap( [in] HDC hdc, [in] int cx, [in] int cy );",
            "name": "CreateDiscardableBitmap"
        },
        {
            "signature": "HRGN CreateEllipticRgn( [in] int x1, [in] int y1, [in] int x2, [in] int y2 );",
            "name": "CreateEllipticRgn"
        },
        {
            "signature": "HRGN CreateEllipticRgnIndirect( [in] const RECT *lprect );",
            "name": "CreateEllipticRgnIndirect"
        },
        {
            "signature": "HDC CreateEnhMetaFileA( [in] HDC hdc, [in] LPCSTR lpFilename, [in] const RECT *lprc, [in] LPCSTR lpDesc );",
            "name": "CreateEnhMetaFileA"
        },
        {
            "signature": "HDC CreateEnhMetaFileW( [in] HDC hdc, [in] LPCWSTR lpFilename, [in] const RECT *lprc, [in] LPCWSTR lpDesc );",
            "name": "CreateEnhMetaFileW"
        },
        {
            "signature": "HFONT CreateFontA( [in] int cHeight, [in] int cWidth, [in] int cEscapement, [in] int cOrientation, [in] int cWeight, [in] DWORD bItalic, [in] DWORD bUnderline, [in] DWORD bStrikeOut, [in] DWORD iCharSet, [in] DWORD iOutPrecision, [in] DWORD iClipPrecision, [in] DWORD iQuality, [in] DWORD iPitchAndFamily, [in] LPCSTR pszFaceName );",
            "name": "CreateFontA"
        },
        {
            "signature": "HFONT CreateFontIndirectA( [in] const LOGFONTA *lplf );",
            "name": "CreateFontIndirectA"
        },
        {
            "signature": "HFONT CreateFontIndirectExA( [in] const ENUMLOGFONTEXDVA *unnamedParam1 );",
            "name": "CreateFontIndirectExA"
        },
        {
            "signature": "HFONT CreateFontIndirectExW( [in] const ENUMLOGFONTEXDVW *unnamedParam1 );",
            "name": "CreateFontIndirectExW"
        },
        {
            "signature": "HFONT CreateFontIndirectW( [in] const LOGFONTW *lplf );",
            "name": "CreateFontIndirectW"
        },
        {
            "signature": "HFONT CreateFontW( [in] int cHeight, [in] int cWidth, [in] int cEscapement, [in] int cOrientation, [in] int cWeight, [in] DWORD bItalic, [in] DWORD bUnderline, [in] DWORD bStrikeOut, [in] DWORD iCharSet, [in] DWORD iOutPrecision, [in] DWORD iClipPrecision, [in] DWORD iQuality, [in] DWORD iPitchAndFamily, [in] LPCWSTR pszFaceName );",
            "name": "CreateFontW"
        },
        {
            "signature": "HPALETTE CreateHalftonePalette( [in] HDC hdc );",
            "name": "CreateHalftonePalette"
        },
        {
            "signature": "HBRUSH CreateHatchBrush( [in] int iHatch, [in] COLORREF color );",
            "name": "CreateHatchBrush"
        },
        {
            "signature": "HDC CreateICA( [in] LPCSTR pszDriver, [in] LPCSTR pszDevice, LPCSTR pszPort, [in] const DEVMODEA *pdm );",
            "name": "CreateICA"
        },
        {
            "signature": "HDC CreateICW( [in] LPCWSTR pszDriver, [in] LPCWSTR pszDevice, LPCWSTR pszPort, [in] const DEVMODEW *pdm );",
            "name": "CreateICW"
        },
        {
            "signature": "HDC CreateMetaFileA( [in] LPCSTR pszFile );",
            "name": "CreateMetaFileA"
        },
        {
            "signature": "HDC CreateMetaFileW( [in] LPCWSTR pszFile );",
            "name": "CreateMetaFileW"
        },
        {
            "signature": "HPALETTE CreatePalette( [in] const LOGPALETTE *plpal );",
            "name": "CreatePalette"
        },
        {
            "signature": "HBRUSH CreatePatternBrush( [in] HBITMAP hbm );",
            "name": "CreatePatternBrush"
        },
        {
            "signature": "HPEN CreatePen( [in] int iStyle, [in] int cWidth, [in] COLORREF color );",
            "name": "CreatePen"
        },
        {
            "signature": "HPEN CreatePenIndirect( [in] const LOGPEN *plpen );",
            "name": "CreatePenIndirect"
        },
        {
            "signature": "HRGN CreatePolygonRgn( [in] const POINT *pptl, [in] int cPoint, [in] int iMode );",
            "name": "CreatePolygonRgn"
        },
        {
            "signature": "HRGN CreatePolyPolygonRgn( [in] const POINT *pptl, [in] const INT *pc, [in] int cPoly, [in] int iMode );",
            "name": "CreatePolyPolygonRgn"
        },
        {
            "signature": "HRGN CreateRectRgn( [in] int x1, [in] int y1, [in] int x2, [in] int y2 );",
            "name": "CreateRectRgn"
        },
        {
            "signature": "HRGN CreateRectRgnIndirect( [in] const RECT *lprect );",
            "name": "CreateRectRgnIndirect"
        },
        {
            "signature": "HRGN CreateRoundRectRgn( [in] int x1, [in] int y1, [in] int x2, [in] int y2, [in] int w, [in] int h );",
            "name": "CreateRoundRectRgn"
        },
        {
            "signature": "BOOL CreateScalableFontResourceA( [in] DWORD fdwHidden, [in] LPCSTR lpszFont, [in] LPCSTR lpszFile, [in] LPCSTR lpszPath );",
            "name": "CreateScalableFontResourceA"
        },
        {
            "signature": "BOOL CreateScalableFontResourceW( [in] DWORD fdwHidden, [in] LPCWSTR lpszFont, [in] LPCWSTR lpszFile, [in] LPCWSTR lpszPath );",
            "name": "CreateScalableFontResourceW"
        },
        {
            "signature": "HBRUSH CreateSolidBrush( [in] COLORREF color );",
            "name": "CreateSolidBrush"
        },
        {
            "signature": "BOOL DeleteColorSpace( HCOLORSPACE hcs );",
            "name": "DeleteColorSpace"
        },
        {
            "signature": "BOOL DeleteDC( [in] HDC hdc );",
            "name": "DeleteDC"
        },
        {
            "signature": "BOOL DeleteEnhMetaFile( [in] HENHMETAFILE hmf );",
            "name": "DeleteEnhMetaFile"
        },
        {
            "signature": "BOOL DeleteMetaFile( [in] HMETAFILE hmf );",
            "name": "DeleteMetaFile"
        },
        {
            "signature": "BOOL DeleteObject( [in] HGDIOBJ ho );",
            "name": "DeleteObject"
        },
        {
            "signature": "int DescribePixelFormat( HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd );",
            "name": "DescribePixelFormat"
        },
        {
            "signature": "int DeviceCapabilitiesA( [in] LPCSTR pDevice, [in] LPCSTR pPort, [in] WORD fwCapability, [out] LPSTR pOutput, [in] const DEVMODEA *pDevMode );",
            "name": "DeviceCapabilitiesA"
        },
        {
            "signature": "int DeviceCapabilitiesW( [in] LPCWSTR pDevice, [in] LPCWSTR pPort, [in] WORD fwCapability, [out] LPWSTR pOutput, [in] const DEVMODEW *pDevMode );",
            "name": "DeviceCapabilitiesW"
        },
        {
            "signature": "BOOL DPtoLP( [in] HDC hdc, [in, out] LPPOINT lppt, [in] int c );",
            "name": "DPtoLP"
        },
        {
            "signature": "int DrawEscape( [in] HDC hdc, [in] int iEscape, [in] int cjIn, [in] LPCSTR lpIn );",
            "name": "DrawEscape"
        },
        {
            "signature": "BOOL Ellipse( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom );",
            "name": "Ellipse"
        },
        {
            "signature": "int EndDoc( [in] HDC hdc );",
            "name": "EndDoc"
        },
        {
            "signature": "int EndPage( [in] HDC hdc );",
            "name": "EndPage"
        },
        {
            "signature": "BOOL EndPath( [in] HDC hdc );",
            "name": "EndPath"
        },
        {
            "signature": "ENHMFENUMPROC Enhmfenumproc; int Enhmfenumproc( HDC hdc, HANDLETABLE *lpht, const ENHMETARECORD *lpmr, int nHandles, LPARAM data ) {...}",
            "name": "ENHMFENUMPROC callback"
        },
        {
            "signature": "BOOL EnumEnhMetaFile( [in] HDC hdc, [in] HENHMETAFILE hmf, [in] ENHMFENUMPROC proc, [in] LPVOID param, [in] const RECT *lpRect );",
            "name": "EnumEnhMetaFile"
        },
        {
            "signature": "int EnumFontFamiliesA( [in] HDC hdc, [in] LPCSTR lpLogfont, [in] FONTENUMPROCA lpProc, [in] LPARAM lParam );",
            "name": "EnumFontFamiliesA"
        },
        {
            "signature": "int EnumFontFamiliesExA( [in] HDC hdc, [in] LPLOGFONTA lpLogfont, [in] FONTENUMPROCA lpProc, [in] LPARAM lParam, DWORD dwFlags );",
            "name": "EnumFontFamiliesExA"
        },
        {
            "signature": "int EnumFontFamiliesExW( [in] HDC hdc, [in] LPLOGFONTW lpLogfont, [in] FONTENUMPROCW lpProc, [in] LPARAM lParam, DWORD dwFlags );",
            "name": "EnumFontFamiliesExW"
        },
        {
            "signature": "int EnumFontFamiliesW( [in] HDC hdc, [in] LPCWSTR lpLogfont, [in] FONTENUMPROCW lpProc, [in] LPARAM lParam );",
            "name": "EnumFontFamiliesW"
        },
        {
            "signature": "int EnumFontsA( [in] HDC hdc, [in] LPCSTR lpLogfont, [in] FONTENUMPROCA lpProc, [in] LPARAM lParam );",
            "name": "EnumFontsA"
        },
        {
            "signature": "int EnumFontsW( [in] HDC hdc, [in] LPCWSTR lpLogfont, [in] FONTENUMPROCW lpProc, [in] LPARAM lParam );",
            "name": "EnumFontsW"
        },
        {
            "signature": "int EnumICMProfilesA( HDC hdc, ICMENUMPROCA proc, LPARAM param );",
            "name": "EnumICMProfilesA"
        },
        {
            "signature": "int EnumICMProfilesW( HDC hdc, ICMENUMPROCW proc, LPARAM param );",
            "name": "EnumICMProfilesW"
        },
        {
            "signature": "BOOL EnumMetaFile( [in] HDC hdc, [in] HMETAFILE hmf, [in] MFENUMPROC proc, [in] LPARAM param );",
            "name": "EnumMetaFile"
        },
        {
            "signature": "int EnumObjects( [in] HDC hdc, [in] int nType, [in] GOBJENUMPROC lpFunc, [in] LPARAM lParam );",
            "name": "EnumObjects"
        },
        {
            "signature": "BOOL EqualRgn( [in] HRGN hrgn1, [in] HRGN hrgn2 );",
            "name": "EqualRgn"
        },
        {
            "signature": "int Escape( [in] HDC hdc, [in] int iEscape, [in] int cjIn, [in] LPCSTR pvIn, [out] LPVOID pvOut );",
            "name": "Escape"
        },
        {
            "signature": "int ExcludeClipRect( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom );",
            "name": "ExcludeClipRect"
        },
        {
            "signature": "HPEN ExtCreatePen( [in] DWORD iPenStyle, [in] DWORD cWidth, [in] const LOGBRUSH *plbrush, [in] DWORD cStyle, [in] const DWORD *pstyle );",
            "name": "ExtCreatePen"
        },
        {
            "signature": "HRGN ExtCreateRegion( [in] const XFORM *lpx, [in] DWORD nCount, [in] const RGNDATA *lpData );",
            "name": "ExtCreateRegion"
        },
        {
            "signature": "int ExtEscape( [in] HDC hdc, [in] int iEscape, [in] int cjInput, [in] LPCSTR lpInData, [in] int cjOutput, [out] LPSTR lpOutData );",
            "name": "ExtEscape"
        },
        {
            "signature": "BOOL ExtFloodFill( [in] HDC hdc, [in] int x, [in] int y, [in] COLORREF color, [in] UINT type );",
            "name": "ExtFloodFill"
        },
        {
            "signature": "int ExtSelectClipRgn( [in] HDC hdc, [in] HRGN hrgn, [in] int mode );",
            "name": "ExtSelectClipRgn"
        },
        {
            "signature": "BOOL ExtTextOutA( [in] HDC hdc, [in] int x, [in] int y, [in] UINT options, [in] const RECT *lprect, [in] LPCSTR lpString, [in] UINT c, [in] const INT *lpDx );",
            "name": "ExtTextOutA"
        },
        {
            "signature": "BOOL ExtTextOutW( [in] HDC hdc, [in] int x, [in] int y, [in] UINT options, [in] const RECT *lprect, [in] LPCWSTR lpString, [in] UINT c, [in] const INT *lpDx );",
            "name": "ExtTextOutW"
        },
        {
            "signature": "BOOL FillPath( [in] HDC hdc );",
            "name": "FillPath"
        },
        {
            "signature": "BOOL FillRgn( [in] HDC hdc, [in] HRGN hrgn, [in] HBRUSH hbr );",
            "name": "FillRgn"
        },
        {
            "signature": "BOOL FlattenPath( [in] HDC hdc );",
            "name": "FlattenPath"
        },
        {
            "signature": "BOOL FloodFill( [in] HDC hdc, [in] int x, [in] int y, [in] COLORREF color );",
            "name": "FloodFill"
        },
        {
            "signature": "BOOL FrameRgn( [in] HDC hdc, [in] HRGN hrgn, [in] HBRUSH hbr, [in] int w, [in] int h );",
            "name": "FrameRgn"
        },
        {
            "signature": "BOOL GdiAlphaBlend( [in] HDC hdcDest, [in] int xoriginDest, [in] int yoriginDest, [in] int wDest, [in] int hDest, [in] HDC hdcSrc, [in] int xoriginSrc, [in] int yoriginSrc, [in] int wSrc, [in] int hSrc, [in] BLENDFUNCTION ftn );",
            "name": "GdiAlphaBlend"
        },
        {
            "signature": "BOOL GdiComment( [in] HDC hdc, [in] UINT nSize, [in] const BYTE *lpData );",
            "name": "GdiComment"
        },
        {
            "signature": "BOOL GdiFlush();",
            "name": "GdiFlush"
        },
        {
            "signature": "DWORD GdiGetBatchLimit();",
            "name": "GdiGetBatchLimit"
        },
        {
            "signature": "BOOL GdiGradientFill( [in] HDC hdc, [in] PTRIVERTEX pVertex, [in] ULONG nVertex, [in] PVOID pMesh, [in] ULONG nCount, [in] ULONG ulMode );",
            "name": "GdiGradientFill"
        },
        {
            "signature": "DWORD GdiSetBatchLimit( [in] DWORD dw );",
            "name": "GdiSetBatchLimit"
        },
        {
            "signature": "BOOL GdiTransparentBlt( [in] HDC hdcDest, [in] int xoriginDest, [in] int yoriginDest, [in] int wDest, [in] int hDest, [in] HDC hdcSrc, [in] int xoriginSrc, [in] int yoriginSrc, [in] int wSrc, [in] int hSrc, [in] UINT crTransparent );",
            "name": "GdiTransparentBlt"
        },
        {
            "signature": "int GetArcDirection( [in] HDC hdc );",
            "name": "GetArcDirection"
        },
        {
            "signature": "BOOL GetAspectRatioFilterEx( [in] HDC hdc, [out] LPSIZE lpsize );",
            "name": "GetAspectRatioFilterEx"
        },
        {
            "signature": "LONG GetBitmapBits( [in] HBITMAP hbit, [in] LONG cb, [out] LPVOID lpvBits );",
            "name": "GetBitmapBits"
        },
        {
            "signature": "BOOL GetBitmapDimensionEx( [in] HBITMAP hbit, [out] LPSIZE lpsize );",
            "name": "GetBitmapDimensionEx"
        },
        {
            "signature": "COLORREF GetBkColor( [in] HDC hdc );",
            "name": "GetBkColor"
        },
        {
            "signature": "int GetBkMode( [in] HDC hdc );",
            "name": "GetBkMode"
        },
        {
            "signature": "UINT GetBoundsRect( [in] HDC hdc, [out] LPRECT lprect, [in] UINT flags );",
            "name": "GetBoundsRect"
        },
        {
            "signature": "BOOL GetBrushOrgEx( [in] HDC hdc, [out] LPPOINT lppt );",
            "name": "GetBrushOrgEx"
        },
        {
            "signature": "BOOL GetCharABCWidthsA( [in] HDC hdc, [in] UINT wFirst, [in] UINT wLast, [out] LPABC lpABC );",
            "name": "GetCharABCWidthsA"
        },
        {
            "signature": "BOOL GetCharABCWidthsFloatA( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPABCFLOAT lpABC );",
            "name": "GetCharABCWidthsFloatA"
        },
        {
            "signature": "BOOL GetCharABCWidthsFloatW( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPABCFLOAT lpABC );",
            "name": "GetCharABCWidthsFloatW"
        },
        {
            "signature": "BOOL GetCharABCWidthsI( [in] HDC hdc, [in] UINT giFirst, [in] UINT cgi, [in] LPWORD pgi, [out] LPABC pabc );",
            "name": "GetCharABCWidthsI"
        },
        {
            "signature": "BOOL GetCharABCWidthsW( [in] HDC hdc, [in] UINT wFirst, [in] UINT wLast, [out] LPABC lpABC );",
            "name": "GetCharABCWidthsW"
        },
        {
            "signature": "DWORD GetCharacterPlacementA( [in] HDC hdc, [in] LPCSTR lpString, [in] int nCount, [in] int nMexExtent, [in, out] LPGCP_RESULTSA lpResults, [in] DWORD dwFlags );",
            "name": "GetCharacterPlacementA"
        },
        {
            "signature": "DWORD GetCharacterPlacementW( [in] HDC hdc, [in] LPCWSTR lpString, [in] int nCount, [in] int nMexExtent, [in, out] LPGCP_RESULTSW lpResults, [in] DWORD dwFlags );",
            "name": "GetCharacterPlacementW"
        },
        {
            "signature": "BOOL GetCharWidth32A( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPINT lpBuffer );",
            "name": "GetCharWidth32A"
        },
        {
            "signature": "BOOL GetCharWidth32W( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPINT lpBuffer );",
            "name": "GetCharWidth32W"
        },
        {
            "signature": "BOOL GetCharWidthA( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPINT lpBuffer );",
            "name": "GetCharWidthA"
        },
        {
            "signature": "BOOL GetCharWidthFloatA( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] PFLOAT lpBuffer );",
            "name": "GetCharWidthFloatA"
        },
        {
            "signature": "BOOL GetCharWidthFloatW( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] PFLOAT lpBuffer );",
            "name": "GetCharWidthFloatW"
        },
        {
            "signature": "BOOL GetCharWidthI( [in] HDC hdc, [in] UINT giFirst, [in] UINT cgi, [in] LPWORD pgi, [out] LPINT piWidths );",
            "name": "GetCharWidthI"
        },
        {
            "signature": "BOOL GetCharWidthW( [in] HDC hdc, [in] UINT iFirst, [in] UINT iLast, [out] LPINT lpBuffer );",
            "name": "GetCharWidthW"
        },
        {
            "signature": "int GetClipBox( [in] HDC hdc, [out] LPRECT lprect );",
            "name": "GetClipBox"
        },
        {
            "signature": "int GetClipRgn( [in] HDC hdc, [in] HRGN hrgn );",
            "name": "GetClipRgn"
        },
        {
            "signature": "BOOL GetColorAdjustment( [in] HDC hdc, [out] LPCOLORADJUSTMENT lpca );",
            "name": "GetColorAdjustment"
        },
        {
            "signature": "HCOLORSPACE GetColorSpace( HDC hdc );",
            "name": "GetColorSpace"
        },
        {
            "signature": "HGDIOBJ GetCurrentObject( [in] HDC hdc, [in] UINT type );",
            "name": "GetCurrentObject"
        },
        {
            "signature": "BOOL GetCurrentPositionEx( [in] HDC hdc, [out] LPPOINT lppt );",
            "name": "GetCurrentPositionEx"
        },
        {
            "signature": "COLORREF GetDCBrushColor( [in] HDC hdc );",
            "name": "GetDCBrushColor"
        },
        {
            "signature": "BOOL GetDCOrgEx( [in] HDC hdc, [out] LPPOINT lppt );",
            "name": "GetDCOrgEx"
        },
        {
            "signature": "COLORREF GetDCPenColor( [in] HDC hdc );",
            "name": "GetDCPenColor"
        },
        {
            "signature": "int GetDeviceCaps( [in] HDC hdc, [in] int index );",
            "name": "GetDeviceCaps"
        },
        {
            "signature": "BOOL GetDeviceGammaRamp( HDC hdc, LPVOID lpRamp );",
            "name": "GetDeviceGammaRamp"
        },
        {
            "signature": "UINT GetDIBColorTable( [in] HDC hdc, [in] UINT iStart, [in] UINT cEntries, [out] RGBQUAD *prgbq );",
            "name": "GetDIBColorTable"
        },
        {
            "signature": "int GetDIBits( [in] HDC hdc, [in] HBITMAP hbm, [in] UINT start, [in] UINT cLines, [out] LPVOID lpvBits, [in, out] LPBITMAPINFO lpbmi, [in] UINT usage );",
            "name": "GetDIBits"
        },
        {
            "signature": "HENHMETAFILE GetEnhMetaFileA( [in] LPCSTR lpName );",
            "name": "GetEnhMetaFileA"
        },
        {
            "signature": "UINT GetEnhMetaFileBits( [in] HENHMETAFILE hEMF, [in] UINT nSize, [out] LPBYTE lpData );",
            "name": "GetEnhMetaFileBits"
        },
        {
            "signature": "UINT GetEnhMetaFileDescriptionA( [in] HENHMETAFILE hemf, [in] UINT cchBuffer, [out] LPSTR lpDescription );",
            "name": "GetEnhMetaFileDescriptionA"
        },
        {
            "signature": "UINT GetEnhMetaFileDescriptionW( [in] HENHMETAFILE hemf, [in] UINT cchBuffer, [out] LPWSTR lpDescription );",
            "name": "GetEnhMetaFileDescriptionW"
        },
        {
            "signature": "UINT GetEnhMetaFileHeader( [in] HENHMETAFILE hemf, [in] UINT nSize, [out] LPENHMETAHEADER lpEnhMetaHeader );",
            "name": "GetEnhMetaFileHeader"
        },
        {
            "signature": "UINT GetEnhMetaFilePaletteEntries( [in] HENHMETAFILE hemf, [in] UINT nNumEntries, [out] LPPALETTEENTRY lpPaletteEntries );",
            "name": "GetEnhMetaFilePaletteEntries"
        },
        {
            "signature": "UINT GetEnhMetaFilePixelFormat( HENHMETAFILE hemf, UINT cbBuffer, PIXELFORMATDESCRIPTOR *ppfd );",
            "name": "GetEnhMetaFilePixelFormat"
        },
        {
            "signature": "HENHMETAFILE GetEnhMetaFileW( [in] LPCWSTR lpName );",
            "name": "GetEnhMetaFileW"
        },
        {
            "signature": "DWORD GetFontData( [in] HDC hdc, [in] DWORD dwTable, [in] DWORD dwOffset, [out] PVOID pvBuffer, [in] DWORD cjBuffer );",
            "name": "GetFontData"
        },
        {
            "signature": "DWORD GetFontLanguageInfo( [in] HDC hdc );",
            "name": "GetFontLanguageInfo"
        },
        {
            "signature": "DWORD GetFontUnicodeRanges( [in] HDC hdc, [out] LPGLYPHSET lpgs );",
            "name": "GetFontUnicodeRanges"
        },
        {
            "signature": "DWORD GetGlyphIndicesA( [in] HDC hdc, [in] LPCSTR lpstr, [in] int c, [out] LPWORD pgi, [in] DWORD fl );",
            "name": "GetGlyphIndicesA"
        },
        {
            "signature": "DWORD GetGlyphIndicesW( [in] HDC hdc, [in] LPCWSTR lpstr, [in] int c, [out] LPWORD pgi, [in] DWORD fl );",
            "name": "GetGlyphIndicesW"
        },
        {
            "signature": "DWORD GetGlyphOutlineA( [in] HDC hdc, [in] UINT uChar, [in] UINT fuFormat, [out] LPGLYPHMETRICS lpgm, [in] DWORD cjBuffer, [out] LPVOID pvBuffer, [in] const MAT2 *lpmat2 );",
            "name": "GetGlyphOutlineA"
        },
        {
            "signature": "DWORD GetGlyphOutlineW( [in] HDC hdc, [in] UINT uChar, [in] UINT fuFormat, [out] LPGLYPHMETRICS lpgm, [in] DWORD cjBuffer, [out] LPVOID pvBuffer, [in] const MAT2 *lpmat2 );",
            "name": "GetGlyphOutlineW"
        },
        {
            "signature": "int GetGraphicsMode( [in] HDC hdc );",
            "name": "GetGraphicsMode"
        },
        {
            "signature": "BOOL GetICMProfileA( HDC hdc, LPDWORD pBufSize, LPSTR pszFilename );",
            "name": "GetICMProfileA"
        },
        {
            "signature": "BOOL GetICMProfileW( HDC hdc, LPDWORD pBufSize, LPWSTR pszFilename );",
            "name": "GetICMProfileW"
        },
        {
            "signature": "DWORD GetKerningPairsA( [in] HDC hdc, [in] DWORD nPairs, [out] LPKERNINGPAIR lpKernPair );",
            "name": "GetKerningPairsA"
        },
        {
            "signature": "DWORD GetKerningPairsW( [in] HDC hdc, [in] DWORD nPairs, [out] LPKERNINGPAIR lpKernPair );",
            "name": "GetKerningPairsW"
        },
        {
            "signature": "DWORD GetLayout( [in] HDC hdc );",
            "name": "GetLayout"
        },
        {
            "signature": "BOOL GetLogColorSpaceA( HCOLORSPACE hColorSpace, LPLOGCOLORSPACEA lpBuffer, DWORD nSize );",
            "name": "GetLogColorSpaceA"
        },
        {
            "signature": "BOOL GetLogColorSpaceW( HCOLORSPACE hColorSpace, LPLOGCOLORSPACEW lpBuffer, DWORD nSize );",
            "name": "GetLogColorSpaceW"
        },
        {
            "signature": "int GetMapMode( [in] HDC hdc );",
            "name": "GetMapMode"
        },
        {
            "signature": "HMETAFILE GetMetaFileA( [in] LPCSTR lpName );",
            "name": "GetMetaFileA"
        },
        {
            "signature": "UINT GetMetaFileBitsEx( [in] HMETAFILE hMF, [in] UINT cbBuffer, [out] LPVOID lpData );",
            "name": "GetMetaFileBitsEx"
        },
        {
            "signature": "HMETAFILE GetMetaFileW( [in] LPCWSTR lpName );",
            "name": "GetMetaFileW"
        },
        {
            "signature": "int GetMetaRgn( [in] HDC hdc, [in] HRGN hrgn );",
            "name": "GetMetaRgn"
        },
        {
            "signature": "BOOL GetMiterLimit( [in] HDC hdc, [out] PFLOAT plimit );",
            "name": "GetMiterLimit"
        },
        {
            "signature": "COLORREF GetNearestColor( [in] HDC hdc, [in] COLORREF color );",
            "name": "GetNearestColor"
        },
        {
            "signature": "UINT GetNearestPaletteIndex( [in] HPALETTE h, [in] COLORREF color );",
            "name": "GetNearestPaletteIndex"
        },
        {
            "signature": "int GetObject( HANDLE h, int c, LPVOID pv );",
            "name": "GetObject"
        },
        {
            "signature": "int GetObjectA( HANDLE h, int c, LPVOID pv );",
            "name": "GetObjectA"
        },
        {
            "signature": "DWORD GetObjectType( [in] HGDIOBJ h );",
            "name": "GetObjectType"
        },
        {
            "signature": "int GetObjectW( HANDLE h, int c, LPVOID pv );",
            "name": "GetObjectW"
        },
        {
            "signature": "UINT GetOutlineTextMetricsA( [in] HDC hdc, [in] UINT cjCopy, [out, optional] LPOUTLINETEXTMETRICA potm );",
            "name": "GetOutlineTextMetricsA"
        },
        {
            "signature": "UINT GetOutlineTextMetricsW( [in] HDC hdc, [in] UINT cjCopy, [out, optional] LPOUTLINETEXTMETRICW potm );",
            "name": "GetOutlineTextMetricsW"
        },
        {
            "signature": "UINT GetPaletteEntries( [in] HPALETTE hpal, [in] UINT iStart, [in] UINT cEntries, [out] LPPALETTEENTRY pPalEntries );",
            "name": "GetPaletteEntries"
        },
        {
            "signature": "int GetPath( [in] HDC hdc, [out] LPPOINT apt, [out] LPBYTE aj, [in] int cpt );",
            "name": "GetPath"
        },
        {
            "signature": "COLORREF GetPixel( [in] HDC hdc, [in] int x, [in] int y );",
            "name": "GetPixel"
        },
        {
            "signature": "int GetPixelFormat( HDC hdc );",
            "name": "GetPixelFormat"
        },
        {
            "signature": "int GetPolyFillMode( [in] HDC hdc );",
            "name": "GetPolyFillMode"
        },
        {
            "signature": "int GetRandomRgn( [in] HDC hdc, [in] HRGN hrgn, [in] INT i );",
            "name": "GetRandomRgn"
        },
        {
            "signature": "BOOL GetRasterizerCaps( [out] LPRASTERIZER_STATUS lpraststat, [in] UINT cjBytes );",
            "name": "GetRasterizerCaps"
        },
        {
            "signature": "DWORD GetRegionData( [in] HRGN hrgn, [in] DWORD nCount, [out] LPRGNDATA lpRgnData );",
            "name": "GetRegionData"
        },
        {
            "signature": "int GetRgnBox( [in] HRGN hrgn, [out] LPRECT lprc );",
            "name": "GetRgnBox"
        },
        {
            "signature": "int GetROP2( [in] HDC hdc );",
            "name": "GetROP2"
        },
        {
            "signature": "HGDIOBJ GetStockObject( [in] int i );",
            "name": "GetStockObject"
        },
        {
            "signature": "int GetStretchBltMode( [in] HDC hdc );",
            "name": "GetStretchBltMode"
        },
        {
            "signature": "UINT GetSystemPaletteEntries( [in] HDC hdc, [in] UINT iStart, [in] UINT cEntries, [out] LPPALETTEENTRY pPalEntries );",
            "name": "GetSystemPaletteEntries"
        },
        {
            "signature": "UINT GetSystemPaletteUse( [in] HDC hdc );",
            "name": "GetSystemPaletteUse"
        },
        {
            "signature": "UINT GetTextAlign( [in] HDC hdc );",
            "name": "GetTextAlign"
        },
        {
            "signature": "int GetTextCharacterExtra( [in] HDC hdc );",
            "name": "GetTextCharacterExtra"
        },
        {
            "signature": "int GetTextCharset( [in] HDC hdc );",
            "name": "GetTextCharset"
        },
        {
            "signature": "int GetTextCharsetInfo( [in] HDC hdc, [out, optional] LPFONTSIGNATURE lpSig, [in] DWORD dwFlags );",
            "name": "GetTextCharsetInfo"
        },
        {
            "signature": "COLORREF GetTextColor( [in] HDC hdc );",
            "name": "GetTextColor"
        },
        {
            "signature": "BOOL GetTextExtentExPointA( [in] HDC hdc, [in] LPCSTR lpszString, [in] int cchString, [in] int nMaxExtent, [out] LPINT lpnFit, [out] LPINT lpnDx, [out] LPSIZE lpSize );",
            "name": "GetTextExtentExPointA"
        },
        {
            "signature": "BOOL GetTextExtentExPointI( [in] HDC hdc, [in] LPWORD lpwszString, [in] int cwchString, [in] int nMaxExtent, [out] LPINT lpnFit, [out] LPINT lpnDx, [out] LPSIZE lpSize );",
            "name": "GetTextExtentExPointI"
        },
        {
            "signature": "BOOL GetTextExtentExPointW( [in] HDC hdc, [in] LPCWSTR lpszString, [in] int cchString, [in] int nMaxExtent, [out] LPINT lpnFit, [out] LPINT lpnDx, [out] LPSIZE lpSize );",
            "name": "GetTextExtentExPointW"
        },
        {
            "signature": "BOOL GetTextExtentPoint32A( [in] HDC hdc, [in] LPCSTR lpString, [in] int c, [out] LPSIZE psizl );",
            "name": "GetTextExtentPoint32A"
        },
        {
            "signature": "BOOL GetTextExtentPoint32W( [in] HDC hdc, [in] LPCWSTR lpString, [in] int c, [out] LPSIZE psizl );",
            "name": "GetTextExtentPoint32W"
        },
        {
            "signature": "BOOL GetTextExtentPointA( [in] HDC hdc, [in] LPCSTR lpString, [in] int c, [out] LPSIZE lpsz );",
            "name": "GetTextExtentPointA"
        },
        {
            "signature": "BOOL GetTextExtentPointI( [in] HDC hdc, [in] LPWORD pgiIn, [in] int cgi, [out] LPSIZE psize );",
            "name": "GetTextExtentPointI"
        },
        {
            "signature": "BOOL GetTextExtentPointW( [in] HDC hdc, [in] LPCWSTR lpString, [in] int c, [out] LPSIZE lpsz );",
            "name": "GetTextExtentPointW"
        },
        {
            "signature": "int GetTextFaceA( [in] HDC hdc, [in] int c, [out] LPSTR lpName );",
            "name": "GetTextFaceA"
        },
        {
            "signature": "int GetTextFaceW( [in] HDC hdc, [in] int c, [out] LPWSTR lpName );",
            "name": "GetTextFaceW"
        },
        {
            "signature": "BOOL GetTextMetrics( [in] HDC hdc, [out] LPTEXTMETRIC lptm );",
            "name": "GetTextMetrics"
        },
        {
            "signature": "BOOL GetTextMetricsA( [in] HDC hdc, [out] LPTEXTMETRICA lptm );",
            "name": "GetTextMetricsA"
        },
        {
            "signature": "BOOL GetTextMetricsW( [in] HDC hdc, [out] LPTEXTMETRICW lptm );",
            "name": "GetTextMetricsW"
        },
        {
            "signature": "BOOL GetViewportExtEx( [in] HDC hdc, [out] LPSIZE lpsize );",
            "name": "GetViewportExtEx"
        },
        {
            "signature": "BOOL GetViewportOrgEx( [in] HDC hdc, [out] LPPOINT lppoint );",
            "name": "GetViewportOrgEx"
        },
        {
            "signature": "BOOL GetWindowExtEx( [in] HDC hdc, [out] LPSIZE lpsize );",
            "name": "GetWindowExtEx"
        },
        {
            "signature": "BOOL GetWindowOrgEx( [in] HDC hdc, [out] LPPOINT lppoint );",
            "name": "GetWindowOrgEx"
        },
        {
            "signature": "UINT GetWinMetaFileBits( [in] HENHMETAFILE hemf, [in] UINT cbData16, [out] LPBYTE pData16, [in] INT iMapMode, [in] HDC hdcRef );",
            "name": "GetWinMetaFileBits"
        },
        {
            "signature": "BOOL GetWorldTransform( [in] HDC hdc, [out] LPXFORM lpxf );",
            "name": "GetWorldTransform"
        },
        {
            "signature": "GOBJENUMPROC Gobjenumproc; int Gobjenumproc( LPVOID unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "GOBJENUMPROC callback"
        },
        {
            "signature": "BOOL GradientFill( [in] HDC hdc, [in] PTRIVERTEX pVertex, [in] ULONG nVertex, [in] PVOID pMesh, [in] ULONG nMesh, [in] ULONG ulMode );",
            "name": "GradientFill"
        },
        {
            "signature": "ICMENUMPROCA Icmenumproca; int Icmenumproca( LPSTR unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "ICMENUMPROCA callback"
        },
        {
            "signature": "ICMENUMPROCW Icmenumprocw; int Icmenumprocw( LPWSTR unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "ICMENUMPROCW callback"
        },
        {
            "signature": "int IntersectClipRect( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom );",
            "name": "IntersectClipRect"
        },
        {
            "signature": "BOOL InvertRgn( [in] HDC hdc, [in] HRGN hrgn );",
            "name": "InvertRgn"
        },
        {
            "signature": "BOOL LineDDA( [in] int xStart, [in] int yStart, [in] int xEnd, [in] int yEnd, [in] LINEDDAPROC lpProc, [in] LPARAM data );",
            "name": "LineDDA"
        },
        {
            "signature": "LINEDDAPROC Lineddaproc; void Lineddaproc( int unnamedParam1, int unnamedParam2, LPARAM unnamedParam3 ) {...}",
            "name": "LINEDDAPROC callback"
        },
        {
            "signature": "BOOL LineTo( [in] HDC hdc, [in] int x, [in] int y );",
            "name": "LineTo"
        },
        {
            "signature": "BOOL LPtoDP( [in] HDC hdc, [in, out] LPPOINT lppt, [in] int c );",
            "name": "LPtoDP"
        },
        {
            "signature": "BOOL MaskBlt( [in] HDC hdcDest, [in] int xDest, [in] int yDest, [in] int width, [in] int height, [in] HDC hdcSrc, [in] int xSrc, [in] int ySrc, [in] HBITMAP hbmMask, [in] int xMask, [in] int yMask, [in] DWORD rop );",
            "name": "MaskBlt"
        },
        {
            "signature": "MFENUMPROC Mfenumproc; int Mfenumproc( HDC hdc, HANDLETABLE *lpht, METARECORD *lpMR, [in] int nObj, LPARAM param ) {...}",
            "name": "MFENUMPROC callback"
        },
        {
            "signature": "BOOL ModifyWorldTransform( [in] HDC hdc, [in] const XFORM *lpxf, [in] DWORD mode );",
            "name": "ModifyWorldTransform"
        },
        {
            "signature": "BOOL MoveToEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "MoveToEx"
        },
        {
            "signature": "int OffsetClipRgn( [in] HDC hdc, [in] int x, [in] int y );",
            "name": "OffsetClipRgn"
        },
        {
            "signature": "int OffsetRgn( [in] HRGN hrgn, [in] int x, [in] int y );",
            "name": "OffsetRgn"
        },
        {
            "signature": "BOOL OffsetViewportOrgEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "OffsetViewportOrgEx"
        },
        {
            "signature": "BOOL OffsetWindowOrgEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "OffsetWindowOrgEx"
        },
        {
            "signature": "BOOL PaintRgn( [in] HDC hdc, [in] HRGN hrgn );",
            "name": "PaintRgn"
        },
        {
            "signature": "BOOL PatBlt( [in] HDC hdc, [in] int x, [in] int y, [in] int w, [in] int h, [in] DWORD rop );",
            "name": "PatBlt"
        },
        {
            "signature": "HRGN PathToRegion( [in] HDC hdc );",
            "name": "PathToRegion"
        },
        {
            "signature": "BOOL Pie( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom, [in] int xr1, [in] int yr1, [in] int xr2, [in] int yr2 );",
            "name": "Pie"
        },
        {
            "signature": "BOOL PlayEnhMetaFile( [in] HDC hdc, [in] HENHMETAFILE hmf, [in] const RECT *lprect );",
            "name": "PlayEnhMetaFile"
        },
        {
            "signature": "BOOL PlayEnhMetaFileRecord( [in] HDC hdc, [in] LPHANDLETABLE pht, [in] const ENHMETARECORD *pmr, [in] UINT cht );",
            "name": "PlayEnhMetaFileRecord"
        },
        {
            "signature": "BOOL PlayMetaFile( [in] HDC hdc, [in] HMETAFILE hmf );",
            "name": "PlayMetaFile"
        },
        {
            "signature": "BOOL PlayMetaFileRecord( [in] HDC hdc, [in] LPHANDLETABLE lpHandleTable, [in] LPMETARECORD lpMR, [in] UINT noObjs );",
            "name": "PlayMetaFileRecord"
        },
        {
            "signature": "BOOL PlgBlt( [in] HDC hdcDest, [in] const POINT *lpPoint, [in] HDC hdcSrc, [in] int xSrc, [in] int ySrc, [in] int width, [in] int height, [in] HBITMAP hbmMask, [in] int xMask, [in] int yMask );",
            "name": "PlgBlt"
        },
        {
            "signature": "BOOL PolyBezier( [in] HDC hdc, [in] const POINT *apt, [in] DWORD cpt );",
            "name": "PolyBezier"
        },
        {
            "signature": "BOOL PolyBezierTo( [in] HDC hdc, [in] const POINT *apt, [in] DWORD cpt );",
            "name": "PolyBezierTo"
        },
        {
            "signature": "BOOL PolyDraw( [in] HDC hdc, [in] const POINT *apt, [in] const BYTE *aj, [in] int cpt );",
            "name": "PolyDraw"
        },
        {
            "signature": "BOOL Polygon( [in] HDC hdc, [in] const POINT *apt, [in] int cpt );",
            "name": "Polygon"
        },
        {
            "signature": "BOOL Polyline( [in] HDC hdc, [in] const POINT *apt, [in] int cpt );",
            "name": "Polyline"
        },
        {
            "signature": "BOOL PolylineTo( [in] HDC hdc, [in] const POINT *apt, [in] DWORD cpt );",
            "name": "PolylineTo"
        },
        {
            "signature": "BOOL PolyPolygon( [in] HDC hdc, [in] const POINT *apt, [in] const INT *asz, [in] int csz );",
            "name": "PolyPolygon"
        },
        {
            "signature": "BOOL PolyPolyline( [in] HDC hdc, [in] const POINT *apt, [in] const DWORD *asz, [in] DWORD csz );",
            "name": "PolyPolyline"
        },
        {
            "signature": "BOOL PolyTextOutA( [in] HDC hdc, [in] const POLYTEXTA *ppt, [in] int nstrings );",
            "name": "PolyTextOutA"
        },
        {
            "signature": "BOOL PolyTextOutW( [in] HDC hdc, [in] const POLYTEXTW *ppt, [in] int nstrings );",
            "name": "PolyTextOutW"
        },
        {
            "signature": "BOOL PtInRegion( [in] HRGN hrgn, [in] int x, [in] int y );",
            "name": "PtInRegion"
        },
        {
            "signature": "BOOL PtVisible( [in] HDC hdc, [in] int x, [in] int y );",
            "name": "PtVisible"
        },
        {
            "signature": "UINT RealizePalette( [in] HDC hdc );",
            "name": "RealizePalette"
        },
        {
            "signature": "BOOL Rectangle( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom );",
            "name": "Rectangle"
        },
        {
            "signature": "BOOL RectInRegion( [in] HRGN hrgn, [in] const RECT *lprect );",
            "name": "RectInRegion"
        },
        {
            "signature": "BOOL RectVisible( [in] HDC hdc, [in] const RECT *lprect );",
            "name": "RectVisible"
        },
        {
            "signature": "BOOL RemoveFontMemResourceEx( [in] HANDLE h );",
            "name": "RemoveFontMemResourceEx"
        },
        {
            "signature": "BOOL RemoveFontResourceA( [in] LPCSTR lpFileName );",
            "name": "RemoveFontResourceA"
        },
        {
            "signature": "BOOL RemoveFontResourceExA( [in] LPCSTR name, [in] DWORD fl, [in] PVOID pdv );",
            "name": "RemoveFontResourceExA"
        },
        {
            "signature": "BOOL RemoveFontResourceExW( [in] LPCWSTR name, [in] DWORD fl, [in] PVOID pdv );",
            "name": "RemoveFontResourceExW"
        },
        {
            "signature": "BOOL RemoveFontResourceW( [in] LPCWSTR lpFileName );",
            "name": "RemoveFontResourceW"
        },
        {
            "signature": "HDC ResetDCA( [in] HDC hdc, [in] const DEVMODEA *lpdm );",
            "name": "ResetDCA"
        },
        {
            "signature": "HDC ResetDCW( [in] HDC hdc, [in] const DEVMODEW *lpdm );",
            "name": "ResetDCW"
        },
        {
            "signature": "BOOL ResizePalette( [in] HPALETTE hpal, [in] UINT n );",
            "name": "ResizePalette"
        },
        {
            "signature": "BOOL RestoreDC( [in] HDC hdc, [in] int nSavedDC );",
            "name": "RestoreDC"
        },
        {
            "signature": "BOOL RoundRect( [in] HDC hdc, [in] int left, [in] int top, [in] int right, [in] int bottom, [in] int width, [in] int height );",
            "name": "RoundRect"
        },
        {
            "signature": "int SaveDC( [in] HDC hdc );",
            "name": "SaveDC"
        },
        {
            "signature": "BOOL ScaleViewportExtEx( [in] HDC hdc, [in] int xn, [in] int dx, [in] int yn, [in] int yd, [out] LPSIZE lpsz );",
            "name": "ScaleViewportExtEx"
        },
        {
            "signature": "BOOL ScaleWindowExtEx( [in] HDC hdc, [in] int xn, [in] int xd, [in] int yn, [in] int yd, [out] LPSIZE lpsz );",
            "name": "ScaleWindowExtEx"
        },
        {
            "signature": "BOOL SelectClipPath( [in] HDC hdc, [in] int mode );",
            "name": "SelectClipPath"
        },
        {
            "signature": "int SelectClipRgn( [in] HDC hdc, [in] HRGN hrgn );",
            "name": "SelectClipRgn"
        },
        {
            "signature": "HGDIOBJ SelectObject( [in] HDC hdc, [in] HGDIOBJ h );",
            "name": "SelectObject"
        },
        {
            "signature": "HPALETTE SelectPalette( [in] HDC hdc, [in] HPALETTE hPal, [in] BOOL bForceBkgd );",
            "name": "SelectPalette"
        },
        {
            "signature": "int SetAbortProc( [in] HDC hdc, [in] ABORTPROC proc );",
            "name": "SetAbortProc"
        },
        {
            "signature": "int SetArcDirection( [in] HDC hdc, [in] int dir );",
            "name": "SetArcDirection"
        },
        {
            "signature": "LONG SetBitmapBits( [in] HBITMAP hbm, [in] DWORD cb, [in] const VOID *pvBits );",
            "name": "SetBitmapBits"
        },
        {
            "signature": "BOOL SetBitmapDimensionEx( [in] HBITMAP hbm, [in] int w, [in] int h, [out] LPSIZE lpsz );",
            "name": "SetBitmapDimensionEx"
        },
        {
            "signature": "COLORREF SetBkColor( [in] HDC hdc, [in] COLORREF color );",
            "name": "SetBkColor"
        },
        {
            "signature": "int SetBkMode( [in] HDC hdc, [in] int mode );",
            "name": "SetBkMode"
        },
        {
            "signature": "UINT SetBoundsRect( [in] HDC hdc, [in] const RECT *lprect, [in] UINT flags );",
            "name": "SetBoundsRect"
        },
        {
            "signature": "BOOL SetBrushOrgEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "SetBrushOrgEx"
        },
        {
            "signature": "BOOL SetColorAdjustment( [in] HDC hdc, [in] const COLORADJUSTMENT *lpca );",
            "name": "SetColorAdjustment"
        },
        {
            "signature": "HCOLORSPACE SetColorSpace( HDC hdc, HCOLORSPACE hcs );",
            "name": "SetColorSpace"
        },
        {
            "signature": "COLORREF SetDCBrushColor( [in] HDC hdc, [in] COLORREF color );",
            "name": "SetDCBrushColor"
        },
        {
            "signature": "COLORREF SetDCPenColor( [in] HDC hdc, [in] COLORREF color );",
            "name": "SetDCPenColor"
        },
        {
            "signature": "BOOL SetDeviceGammaRamp( HDC hdc, LPVOID lpRamp );",
            "name": "SetDeviceGammaRamp"
        },
        {
            "signature": "UINT SetDIBColorTable( [in] HDC hdc, [in] UINT iStart, [in] UINT cEntries, [in] const RGBQUAD *prgbq );",
            "name": "SetDIBColorTable"
        },
        {
            "signature": "int SetDIBits( [in] HDC hdc, [in] HBITMAP hbm, [in] UINT start, [in] UINT cLines, [in] const VOID *lpBits, [in] const BITMAPINFO *lpbmi, [in] UINT ColorUse );",
            "name": "SetDIBits"
        },
        {
            "signature": "int SetDIBitsToDevice( [in] HDC hdc, [in] int xDest, [in] int yDest, [in] DWORD w, [in] DWORD h, [in] int xSrc, [in] int ySrc, [in] UINT StartScan, [in] UINT cLines, [in] const VOID *lpvBits, [in] const BITMAPINFO *lpbmi, [in] UINT ColorUse );",
            "name": "SetDIBitsToDevice"
        },
        {
            "signature": "HENHMETAFILE SetEnhMetaFileBits( [in] UINT nSize, [in] const BYTE *pb );",
            "name": "SetEnhMetaFileBits"
        },
        {
            "signature": "int SetGraphicsMode( [in] HDC hdc, [in] int iMode );",
            "name": "SetGraphicsMode"
        },
        {
            "signature": "int SetICMMode( HDC hdc, int mode );",
            "name": "SetICMMode"
        },
        {
            "signature": "BOOL SetICMProfileA( HDC hdc, LPSTR lpFileName );",
            "name": "SetICMProfileA"
        },
        {
            "signature": "BOOL SetICMProfileW( HDC hdc, LPWSTR lpFileName );",
            "name": "SetICMProfileW"
        },
        {
            "signature": "DWORD SetLayout( [in] HDC hdc, [in] DWORD l );",
            "name": "SetLayout"
        },
        {
            "signature": "int SetMapMode( [in] HDC hdc, [in] int iMode );",
            "name": "SetMapMode"
        },
        {
            "signature": "DWORD SetMapperFlags( [in] HDC hdc, [in] DWORD flags );",
            "name": "SetMapperFlags"
        },
        {
            "signature": "HMETAFILE SetMetaFileBitsEx( [in] UINT cbBuffer, [in] const BYTE *lpData );",
            "name": "SetMetaFileBitsEx"
        },
        {
            "signature": "int SetMetaRgn( [in] HDC hdc );",
            "name": "SetMetaRgn"
        },
        {
            "signature": "BOOL SetMiterLimit( [in] HDC hdc, [in] FLOAT limit, [out] PFLOAT old );",
            "name": "SetMiterLimit"
        },
        {
            "signature": "UINT SetPaletteEntries( [in] HPALETTE hpal, [in] UINT iStart, [in] UINT cEntries, [in] const PALETTEENTRY *pPalEntries );",
            "name": "SetPaletteEntries"
        },
        {
            "signature": "COLORREF SetPixel( [in] HDC hdc, [in] int x, [in] int y, [in] COLORREF color );",
            "name": "SetPixel"
        },
        {
            "signature": "BOOL SetPixelFormat( HDC hdc, int format, const PIXELFORMATDESCRIPTOR *ppfd );",
            "name": "SetPixelFormat"
        },
        {
            "signature": "BOOL SetPixelV( [in] HDC hdc, [in] int x, [in] int y, [in] COLORREF color );",
            "name": "SetPixelV"
        },
        {
            "signature": "int SetPolyFillMode( [in] HDC hdc, [in] int mode );",
            "name": "SetPolyFillMode"
        },
        {
            "signature": "BOOL SetRectRgn( [in] HRGN hrgn, [in] int left, [in] int top, [in] int right, [in] int bottom );",
            "name": "SetRectRgn"
        },
        {
            "signature": "int SetROP2( [in] HDC hdc, [in] int rop2 );",
            "name": "SetROP2"
        },
        {
            "signature": "int SetStretchBltMode( [in] HDC hdc, [in] int mode );",
            "name": "SetStretchBltMode"
        },
        {
            "signature": "UINT SetSystemPaletteUse( [in] HDC hdc, [in] UINT use );",
            "name": "SetSystemPaletteUse"
        },
        {
            "signature": "UINT SetTextAlign( [in] HDC hdc, [in] UINT align );",
            "name": "SetTextAlign"
        },
        {
            "signature": "int SetTextCharacterExtra( [in] HDC hdc, [in] int extra );",
            "name": "SetTextCharacterExtra"
        },
        {
            "signature": "COLORREF SetTextColor( [in] HDC hdc, [in] COLORREF color );",
            "name": "SetTextColor"
        },
        {
            "signature": "BOOL SetTextJustification( [in] HDC hdc, [in] int extra, [in] int count );",
            "name": "SetTextJustification"
        },
        {
            "signature": "BOOL SetViewportExtEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPSIZE lpsz );",
            "name": "SetViewportExtEx"
        },
        {
            "signature": "BOOL SetViewportOrgEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "SetViewportOrgEx"
        },
        {
            "signature": "BOOL SetWindowExtEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPSIZE lpsz );",
            "name": "SetWindowExtEx"
        },
        {
            "signature": "BOOL SetWindowOrgEx( [in] HDC hdc, [in] int x, [in] int y, [out] LPPOINT lppt );",
            "name": "SetWindowOrgEx"
        },
        {
            "signature": "HENHMETAFILE SetWinMetaFileBits( [in] UINT nSize, [in] const BYTE *lpMeta16Data, [in] HDC hdcRef, [in] const METAFILEPICT *lpMFP );",
            "name": "SetWinMetaFileBits"
        },
        {
            "signature": "BOOL SetWorldTransform( [in] HDC hdc, [in] const XFORM *lpxf );",
            "name": "SetWorldTransform"
        },
        {
            "signature": "int StartDocA( [in] HDC hdc, [in] const DOCINFOA *lpdi );",
            "name": "StartDocA"
        },
        {
            "signature": "int StartDocW( [in] HDC hdc, [in] const DOCINFOW *lpdi );",
            "name": "StartDocW"
        },
        {
            "signature": "int StartPage( [in] HDC hdc );",
            "name": "StartPage"
        },
        {
            "signature": "BOOL StretchBlt( [in] HDC hdcDest, [in] int xDest, [in] int yDest, [in] int wDest, [in] int hDest, [in] HDC hdcSrc, [in] int xSrc, [in] int ySrc, [in] int wSrc, [in] int hSrc, [in] DWORD rop );",
            "name": "StretchBlt"
        },
        {
            "signature": "int StretchDIBits( [in] HDC hdc, [in] int xDest, [in] int yDest, [in] int DestWidth, [in] int DestHeight, [in] int xSrc, [in] int ySrc, [in] int SrcWidth, [in] int SrcHeight, [in] const VOID *lpBits, [in] const BITMAPINFO *lpbmi, [in] UINT iUsage, [in] DWORD rop );",
            "name": "StretchDIBits"
        },
        {
            "signature": "BOOL StrokeAndFillPath( [in] HDC hdc );",
            "name": "StrokeAndFillPath"
        },
        {
            "signature": "BOOL StrokePath( [in] HDC hdc );",
            "name": "StrokePath"
        },
        {
            "signature": "BOOL SwapBuffers( HDC unnamedParam1 );",
            "name": "SwapBuffers"
        },
        {
            "signature": "BOOL TextOutA( [in] HDC hdc, [in] int x, [in] int y, [in] LPCSTR lpString, [in] int c );",
            "name": "TextOutA"
        },
        {
            "signature": "BOOL TextOutW( [in] HDC hdc, [in] int x, [in] int y, [in] LPCWSTR lpString, [in] int c );",
            "name": "TextOutW"
        },
        {
            "signature": "BOOL TranslateCharsetInfo( [in, out] DWORD *lpSrc, [out] LPCHARSETINFO lpCs, [in] DWORD dwFlags );",
            "name": "TranslateCharsetInfo"
        },
        {
            "signature": "BOOL TransparentBlt( [in] HDC hdcDest, [in] int xoriginDest, [in] int yoriginDest, [in] int wDest, [in] int hDest, [in] HDC hdcSrc, [in] int xoriginSrc, [in] int yoriginSrc, [in] int wSrc, [in] int hSrc, [in] UINT crTransparent );",
            "name": "TransparentBlt"
        },
        {
            "signature": "BOOL UnrealizeObject( HGDIOBJ h );",
            "name": "UnrealizeObject"
        },
        {
            "signature": "BOOL UpdateColors( [in] HDC hdc );",
            "name": "UpdateColors"
        },
        {
            "signature": "BOOL UpdateICMRegKeyA( DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command );",
            "name": "UpdateICMRegKeyA"
        },
        {
            "signature": "BOOL UpdateICMRegKeyW( DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command );",
            "name": "UpdateICMRegKeyW"
        },
        {
            "signature": "BOOL wglCopyContext( HGLRC unnamedParam1, HGLRC unnamedParam2, UINT unnamedParam3 );",
            "name": "wglCopyContext"
        },
        {
            "signature": "HGLRC wglCreateContext( HDC unnamedParam1 );",
            "name": "wglCreateContext"
        },
        {
            "signature": "HGLRC wglCreateLayerContext( HDC unnamedParam1, int unnamedParam2 );",
            "name": "wglCreateLayerContext"
        },
        {
            "signature": "BOOL wglDeleteContext( HGLRC unnamedParam1 );",
            "name": "wglDeleteContext"
        },
        {
            "signature": "BOOL wglDescribeLayerPlane( HDC unnamedParam1, int unnamedParam2, int unnamedParam3, UINT unnamedParam4, LPLAYERPLANEDESCRIPTOR unnamedParam5 );",
            "name": "wglDescribeLayerPlane"
        },
        {
            "signature": "HGLRC wglGetCurrentContext();",
            "name": "wglGetCurrentContext"
        },
        {
            "signature": "HDC wglGetCurrentDC();",
            "name": "wglGetCurrentDC"
        },
        {
            "signature": "int wglGetLayerPaletteEntries( HDC unnamedParam1, int unnamedParam2, int unnamedParam3, int unnamedParam4, COLORREF *unnamedParam5 );",
            "name": "wglGetLayerPaletteEntries"
        },
        {
            "signature": "PROC wglGetProcAddress( LPCSTR unnamedParam1 );",
            "name": "wglGetProcAddress"
        },
        {
            "signature": "BOOL wglMakeCurrent( HDC unnamedParam1, HGLRC unnamedParam2 );",
            "name": "wglMakeCurrent"
        },
        {
            "signature": "BOOL wglRealizeLayerPalette( HDC unnamedParam1, int unnamedParam2, BOOL unnamedParam3 );",
            "name": "wglRealizeLayerPalette"
        },
        {
            "signature": "int wglSetLayerPaletteEntries( HDC unnamedParam1, int unnamedParam2, int unnamedParam3, int unnamedParam4, const COLORREF *unnamedParam5 );",
            "name": "wglSetLayerPaletteEntries"
        },
        {
            "signature": "BOOL wglShareLists( HGLRC unnamedParam1, HGLRC unnamedParam2 );",
            "name": "wglShareLists"
        },
        {
            "signature": "BOOL wglSwapLayerBuffers( HDC unnamedParam1, UINT unnamedParam2 );",
            "name": "wglSwapLayerBuffers"
        },
        {
            "signature": "BOOL wglUseFontBitmapsA( HDC unnamedParam1, DWORD unnamedParam2, DWORD unnamedParam3, DWORD unnamedParam4 );",
            "name": "wglUseFontBitmapsA"
        },
        {
            "signature": "BOOL wglUseFontBitmapsW( HDC unnamedParam1, DWORD unnamedParam2, DWORD unnamedParam3, DWORD unnamedParam4 );",
            "name": "wglUseFontBitmapsW"
        },
        {
            "signature": "BOOL wglUseFontOutlinesA( HDC unnamedParam1, DWORD unnamedParam2, DWORD unnamedParam3, DWORD unnamedParam4, FLOAT unnamedParam5, FLOAT unnamedParam6, int unnamedParam7, LPGLYPHMETRICSFLOAT unnamedParam8 );",
            "name": "wglUseFontOutlinesA"
        },
        {
            "signature": "BOOL wglUseFontOutlinesW( HDC unnamedParam1, DWORD unnamedParam2, DWORD unnamedParam3, DWORD unnamedParam4, FLOAT unnamedParam5, FLOAT unnamedParam6, int unnamedParam7, LPGLYPHMETRICSFLOAT unnamedParam8 );",
            "name": "wglUseFontOutlinesW"
        },
        {
            "signature": "BOOL WidenPath( [in] HDC hdc );",
            "name": "WidenPath"
        }
    ],
    "Winhttp.h": [
        {
            "signature": "WINHTTP_PROXY_CHANGE_CALLBACK WinhttpProxyChangeCallback; void WinhttpProxyChangeCallback( ULONGLONG ullFlags, PVOID pvContext ) {...}",
            "name": "WINHTTP_PROXY_CHANGE_CALLBACK callback"
        },
        {
            "signature": "WINHTTP_STATUS_CALLBACK WinhttpStatusCallback; void WinhttpStatusCallback( [in] HINTERNET hInternet, [in] DWORD_PTR dwContext, [in] DWORD dwInternetStatus, [in] LPVOID lpvStatusInformation, [in] DWORD dwStatusInformationLength ) {...}",
            "name": "WINHTTP_STATUS_CALLBACK callback"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpAddRequestHeaders( [in] HINTERNET hRequest, [in] LPCWSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] DWORD dwModifiers );",
            "name": "WinHttpAddRequestHeaders"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpAddRequestHeadersEx( HINTERNET hRequest, DWORD dwModifiers, ULONGLONG ullFlags, ULONGLONG ullExtra, DWORD cHeaders, WINHTTP_EXTENDED_HEADER *pHeaders );",
            "name": "WinHttpAddRequestHeadersEx"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpCheckPlatform();",
            "name": "WinHttpCheckPlatform"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpCloseHandle( [in] HINTERNET hInternet );",
            "name": "WinHttpCloseHandle"
        },
        {
            "signature": "WINHTTPAPI HINTERNET WinHttpConnect( [in] HINTERNET hSession, [in] LPCWSTR pswzServerName, [in] INTERNET_PORT nServerPort, [in] DWORD dwReserved );",
            "name": "WinHttpConnect"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpCrackUrl( [in] LPCWSTR pwszUrl, [in] DWORD dwUrlLength, [in] DWORD dwFlags, [in, out] LPURL_COMPONENTS lpUrlComponents );",
            "name": "WinHttpCrackUrl"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpCreateProxyResolver( [in] HINTERNET hSession, [out] HINTERNET *phResolver );",
            "name": "WinHttpCreateProxyResolver"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpCreateUrl( [in] LPURL_COMPONENTS lpUrlComponents, [in] DWORD dwFlags, [out] LPWSTR pwszUrl, [in, out] LPDWORD pdwUrlLength );",
            "name": "WinHttpCreateUrl"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpDetectAutoProxyConfigUrl( [in] DWORD dwAutoDetectFlags, [out] LPWSTR *ppwstrAutoConfigUrl );",
            "name": "WinHttpDetectAutoProxyConfigUrl"
        },
        {
            "signature": "WINHTTPAPI VOID WinHttpFreeProxyResult( [in, out] WINHTTP_PROXY_RESULT *pProxyResult );",
            "name": "WinHttpFreeProxyResult"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpFreeProxySettingsEx( WINHTTP_PROXY_SETTINGS_TYPE ProxySettingsType, PVOID pProxySettingsEx );",
            "name": "WinHttpFreeProxySettingsEx"
        },
        {
            "signature": "WINHTTPAPI VOID WinHttpFreeQueryConnectionGroupResult( WINHTTP_QUERY_CONNECTION_GROUP_RESULT *pResult );",
            "name": "WinHttpFreeQueryConnectionGroupResult"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpGetDefaultProxyConfiguration( [in, out] WINHTTP_PROXY_INFO *pProxyInfo );",
            "name": "WinHttpGetDefaultProxyConfiguration"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpGetIEProxyConfigForCurrentUser( [in, out] WINHTTP_CURRENT_USER_IE_PROXY_CONFIG *pProxyConfig );",
            "name": "WinHttpGetIEProxyConfigForCurrentUser"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpGetProxyForUrl( [in] HINTERNET hSession, [in] LPCWSTR lpcwszUrl, [in] WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions, [out] WINHTTP_PROXY_INFO *pProxyInfo );",
            "name": "WinHttpGetProxyForUrl"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpGetProxyForUrlEx( [in] HINTERNET hResolver, [in] PCWSTR pcwszUrl, [in] WINHTTP_AUTOPROXY_OPTIONS *pAutoProxyOptions, [in] DWORD_PTR pContext );",
            "name": "WinHttpGetProxyForUrlEx"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpGetProxyResult( [in] HINTERNET hResolver, [out] WINHTTP_PROXY_RESULT *pProxyResult );",
            "name": "WinHttpGetProxyResult"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpGetProxySettingsEx( HINTERNET hResolver, WINHTTP_PROXY_SETTINGS_TYPE ProxySettingsType, PWINHTTP_PROXY_SETTINGS_PARAM pProxySettingsParam, DWORD_PTR pContext );",
            "name": "WinHttpGetProxySettingsEx"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpGetProxySettingsResultEx( HINTERNET hResolver, PVOID pProxySettingsEx );",
            "name": "WinHttpGetProxySettingsResultEx"
        },
        {
            "signature": "WINHTTPAPI HINTERNET WinHttpOpen( [in, optional] LPCWSTR pszAgentW, [in] DWORD dwAccessType, [in] LPCWSTR pszProxyW, [in] LPCWSTR pszProxyBypassW, [in] DWORD dwFlags );",
            "name": "WinHttpOpen"
        },
        {
            "signature": "WINHTTPAPI HINTERNET WinHttpOpenRequest( [in] HINTERNET hConnect, [in] LPCWSTR pwszVerb, [in] LPCWSTR pwszObjectName, [in] LPCWSTR pwszVersion, [in] LPCWSTR pwszReferrer, [in] LPCWSTR *ppwszAcceptTypes, [in] DWORD dwFlags );",
            "name": "WinHttpOpenRequest"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpQueryAuthSchemes( [in] HINTERNET hRequest, [out] LPDWORD lpdwSupportedSchemes, [out] LPDWORD lpdwFirstScheme, [out] LPDWORD pdwAuthTarget );",
            "name": "WinHttpQueryAuthSchemes"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpQueryConnectionGroup( HINTERNET hInternet, const GUID *pGuidConnection, ULONGLONG ullFlags, PWINHTTP_QUERY_CONNECTION_GROUP_RESULT *ppResult );",
            "name": "WinHttpQueryConnectionGroup"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpQueryDataAvailable( [in] HINTERNET hRequest, [out] LPDWORD lpdwNumberOfBytesAvailable );",
            "name": "WinHttpQueryDataAvailable"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpQueryHeaders( [in] HINTERNET hRequest, [in] DWORD dwInfoLevel, [in, optional] LPCWSTR pwszName, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength, [in, out] LPDWORD lpdwIndex );",
            "name": "WinHttpQueryHeaders"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpQueryHeadersEx( HINTERNET hRequest, DWORD dwInfoLevel, ULONGLONG ullFlags, UINT uiCodePage, PDWORD pdwIndex, PWINHTTP_HEADER_NAME pHeaderName, PVOID pBuffer, PDWORD pdwBufferLength, PWINHTTP_EXTENDED_HEADER *ppHeaders, PDWORD pdwHeadersCount );",
            "name": "WinHttpQueryHeadersEx"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpQueryOption( [in] HINTERNET hInternet, [in] DWORD dwOption, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "WinHttpQueryOption"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpReadData( [in] HINTERNET hRequest, [out] LPVOID lpBuffer, [in] DWORD dwNumberOfBytesToRead, [out] LPDWORD lpdwNumberOfBytesRead );",
            "name": "WinHttpReadData"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpReadDataEx( HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead, ULONGLONG ullFlags, DWORD cbProperty, PVOID pvProperty );",
            "name": "WinHttpReadDataEx"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpReceiveResponse( [in] HINTERNET hRequest, [in] LPVOID lpReserved );",
            "name": "WinHttpReceiveResponse"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpRegisterProxyChangeNotification( ULONGLONG ullFlags, WINHTTP_PROXY_CHANGE_CALLBACK pfnCallback, PVOID pvContext, WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE *hRegistration );",
            "name": "WinHttpRegisterProxyChangeNotification"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpResetAutoProxy( [in] HINTERNET hSession, [in] DWORD dwFlags );",
            "name": "WinHttpResetAutoProxy"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpSendRequest( [in] HINTERNET hRequest, [in, optional] LPCWSTR lpszHeaders, [in] DWORD dwHeadersLength, [in, optional] LPVOID lpOptional, [in] DWORD dwOptionalLength, [in] DWORD dwTotalLength, [in] DWORD_PTR dwContext );",
            "name": "WinHttpSendRequest"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpSetCredentials( [in] HINTERNET hRequest, [in] DWORD AuthTargets, [in] DWORD AuthScheme, [in] LPCWSTR pwszUserName, [in] LPCWSTR pwszPassword, [in] LPVOID pAuthParams );",
            "name": "WinHttpSetCredentials"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpSetDefaultProxyConfiguration( [in] WINHTTP_PROXY_INFO *pProxyInfo );",
            "name": "WinHttpSetDefaultProxyConfiguration"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpSetOption( [in] HINTERNET hInternet, [in] DWORD dwOption, [in] LPVOID lpBuffer, [in] DWORD dwBufferLength );",
            "name": "WinHttpSetOption"
        },
        {
            "signature": "WINHTTPAPI WINHTTP_STATUS_CALLBACK WinHttpSetStatusCallback( [in] HINTERNET hInternet, [in] WINHTTP_STATUS_CALLBACK lpfnInternetCallback, [in] DWORD dwNotificationFlags, [in] DWORD_PTR dwReserved );",
            "name": "WinHttpSetStatusCallback"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpSetTimeouts( [in] HINTERNET hInternet, [in] int nResolveTimeout, [in] int nConnectTimeout, [in] int nSendTimeout, [in] int nReceiveTimeout );",
            "name": "WinHttpSetTimeouts"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpTimeFromSystemTime( [in] const SYSTEMTIME *pst, [out] LPWSTR pwszTime );",
            "name": "WinHttpTimeFromSystemTime"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpTimeToSystemTime( [in] LPCWSTR pwszTime, [out] SYSTEMTIME *pst );",
            "name": "WinHttpTimeToSystemTime"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpUnregisterProxyChangeNotification( WINHTTP_PROXY_CHANGE_REGISTRATION_HANDLE hRegistration );",
            "name": "WinHttpUnregisterProxyChangeNotification"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpWebSocketClose( [in] HINTERNET hWebSocket, [in] USHORT usStatus, [in, optional] PVOID pvReason, [in] DWORD dwReasonLength );",
            "name": "WinHttpWebSocketClose"
        },
        {
            "signature": "WINHTTPAPI HINTERNET WinHttpWebSocketCompleteUpgrade( [in] HINTERNET hRequest, [in, optional] DWORD_PTR pContext );",
            "name": "WinHttpWebSocketCompleteUpgrade"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpWebSocketQueryCloseStatus( [in] HINTERNET hWebSocket, [out] USHORT *pusStatus, [out] PVOID pvReason, [in] DWORD dwReasonLength, [out] DWORD *pdwReasonLengthConsumed );",
            "name": "WinHttpWebSocketQueryCloseStatus"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpWebSocketReceive( [in] HINTERNET hWebSocket, [out] PVOID pvBuffer, [in] DWORD dwBufferLength, [out] DWORD *pdwBytesRead, [out] WINHTTP_WEB_SOCKET_BUFFER_TYPE *peBufferType );",
            "name": "WinHttpWebSocketReceive"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpWebSocketSend( [in] HINTERNET hWebSocket, [in] WINHTTP_WEB_SOCKET_BUFFER_TYPE eBufferType, [in] PVOID pvBuffer, [in] DWORD dwBufferLength );",
            "name": "WinHttpWebSocketSend"
        },
        {
            "signature": "WINHTTPAPI DWORD WinHttpWebSocketShutdown( [in] HINTERNET hWebSocket, [in] USHORT usStatus, [in, optional] PVOID pvReason, [in] DWORD dwReasonLength );",
            "name": "WinHttpWebSocketShutdown"
        },
        {
            "signature": "WINHTTPAPI BOOL WinHttpWriteData( [in] HINTERNET hRequest, [in] LPCVOID lpBuffer, [in] DWORD dwNumberOfBytesToWrite, [out] LPDWORD lpdwNumberOfBytesWritten );",
            "name": "WinHttpWriteData"
        }
    ],
    "Wininet.h": [
        {
            "signature": "BOOL CommitUrlCacheEntryA( [in] LPCSTR lpszUrlName, [in] LPCSTR lpszLocalFileName, [in] FILETIME ExpireTime, [in] FILETIME LastModifiedTime, [in] DWORD CacheEntryType, [in] LPBYTE lpHeaderInfo, [in] DWORD cchHeaderInfo, [in] LPCSTR lpszFileExtension, [in] LPCSTR lpszOriginalUrl );",
            "name": "CommitUrlCacheEntryA"
        },
        {
            "signature": "BOOL CommitUrlCacheEntryW( [in] LPCWSTR lpszUrlName, [in] LPCWSTR lpszLocalFileName, [in] FILETIME ExpireTime, [in] FILETIME LastModifiedTime, [in] DWORD CacheEntryType, [in] LPWSTR lpszHeaderInfo, [in] DWORD cchHeaderInfo, [in] LPCWSTR lpszFileExtension, [in] LPCWSTR lpszOriginalUrl );",
            "name": "CommitUrlCacheEntryW"
        },
        {
            "signature": "BOOL CreateMD5SSOHash( [in] PWSTR pszChallengeInfo, [in] PWSTR pwszRealm, [in] PWSTR pwszTarget, [out] PBYTE pbHexHash );",
            "name": "CreateMD5SSOHash"
        },
        {
            "signature": "BOOL CreateUrlCacheEntryA( [in] LPCSTR lpszUrlName, [in] DWORD dwExpectedFileSize, [in] LPCSTR lpszFileExtension, [out] LPSTR lpszFileName, [in] DWORD dwReserved );",
            "name": "CreateUrlCacheEntryA"
        },
        {
            "signature": "BOOL CreateUrlCacheEntryW( [in] LPCWSTR lpszUrlName, [in] DWORD dwExpectedFileSize, [in] LPCWSTR lpszFileExtension, [out] LPWSTR lpszFileName, [in] DWORD dwReserved );",
            "name": "CreateUrlCacheEntryW"
        },
        {
            "signature": "GROUPID CreateUrlCacheGroup( [in] DWORD dwFlags, [in] LPVOID lpReserved );",
            "name": "CreateUrlCacheGroup"
        },
        {
            "signature": "BOOL DeleteUrlCacheEntry( [in] LPCSTR lpszUrlName );",
            "name": "DeleteUrlCacheEntry"
        },
        {
            "signature": "BOOL DeleteUrlCacheEntryA( [in] LPCSTR lpszUrlName );",
            "name": "DeleteUrlCacheEntryA"
        },
        {
            "signature": "BOOL DeleteUrlCacheEntryW( [in] LPCWSTR lpszUrlName );",
            "name": "DeleteUrlCacheEntryW"
        },
        {
            "signature": "BOOL DeleteUrlCacheGroup( [in] GROUPID GroupId, [in] DWORD dwFlags, [in] LPVOID lpReserved );",
            "name": "DeleteUrlCacheGroup"
        },
        {
            "signature": "BOOL DetectAutoProxyUrl( [in, out] PSTR pszAutoProxyUrl, [in] DWORD cchAutoProxyUrl, [in] DWORD dwDetectFlags );",
            "name": "DetectAutoProxyUrl"
        },
        {
            "signature": "BOOL FindCloseUrlCache( [in] HANDLE hEnumHandle );",
            "name": "FindCloseUrlCache"
        },
        {
            "signature": "HANDLE FindFirstUrlCacheEntryA( [in] LPCSTR lpszUrlSearchPattern, [out] LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "FindFirstUrlCacheEntryA"
        },
        {
            "signature": "HANDLE FindFirstUrlCacheEntryExA( [in] LPCSTR lpszUrlSearchPattern, [in] DWORD dwFlags, [in] DWORD dwFilter, [in] GROUPID GroupId, [out] LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [out] LPVOID lpGroupAttributes, [in, out] LPDWORD lpcbGroupAttributes, [in] LPVOID lpReserved );",
            "name": "FindFirstUrlCacheEntryExA"
        },
        {
            "signature": "HANDLE FindFirstUrlCacheEntryExW( [in] LPCWSTR lpszUrlSearchPattern, [in] DWORD dwFlags, [in] DWORD dwFilter, [in] GROUPID GroupId, [out] LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [out] LPVOID lpGroupAttributes, [in, out] LPDWORD lpcbGroupAttributes, [in] LPVOID lpReserved );",
            "name": "FindFirstUrlCacheEntryExW"
        },
        {
            "signature": "HANDLE FindFirstUrlCacheEntryW( [in] LPCWSTR lpszUrlSearchPattern, [out] LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "FindFirstUrlCacheEntryW"
        },
        {
            "signature": "HANDLE FindFirstUrlCacheGroup( [in] DWORD dwFlags, [in] DWORD dwFilter, [in] LPVOID lpSearchCondition, [in] DWORD dwSearchCondition, [out] GROUPID *lpGroupId, [in, out] LPVOID lpReserved );",
            "name": "FindFirstUrlCacheGroup"
        },
        {
            "signature": "BOOL FindNextUrlCacheEntryA( [in] HANDLE hEnumHandle, [out] LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "FindNextUrlCacheEntryA"
        },
        {
            "signature": "BOOL FindNextUrlCacheEntryExA( [in] HANDLE hEnumHandle, [in, out] LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved );",
            "name": "FindNextUrlCacheEntryExA"
        },
        {
            "signature": "BOOL FindNextUrlCacheEntryExW( [in] HANDLE hEnumHandle, [in, out] LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, LPVOID lpGroupAttributes, LPDWORD lpcbGroupAttributes, LPVOID lpReserved );",
            "name": "FindNextUrlCacheEntryExW"
        },
        {
            "signature": "BOOL FindNextUrlCacheEntryW( [in] HANDLE hEnumHandle, [out] LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "FindNextUrlCacheEntryW"
        },
        {
            "signature": "BOOL FindNextUrlCacheGroup( [in] HANDLE hFind, [out] GROUPID *lpGroupId, [in, out] LPVOID lpReserved );",
            "name": "FindNextUrlCacheGroup"
        },
        {
            "signature": "BOOL FtpCommandA( [in] HINTERNET hConnect, [in] BOOL fExpectResponse, [in] DWORD dwFlags, [in] LPCSTR lpszCommand, [in] DWORD_PTR dwContext, [out] HINTERNET *phFtpCommand );",
            "name": "FtpCommandA"
        },
        {
            "signature": "BOOL FtpCommandW( [in] HINTERNET hConnect, [in] BOOL fExpectResponse, [in] DWORD dwFlags, [in] LPCWSTR lpszCommand, [in] DWORD_PTR dwContext, [out] HINTERNET *phFtpCommand );",
            "name": "FtpCommandW"
        },
        {
            "signature": "BOOL FtpCreateDirectoryA( [in] HINTERNET hConnect, [in] LPCSTR lpszDirectory );",
            "name": "FtpCreateDirectoryA"
        },
        {
            "signature": "BOOL FtpCreateDirectoryW( [in] HINTERNET hConnect, [in] LPCWSTR lpszDirectory );",
            "name": "FtpCreateDirectoryW"
        },
        {
            "signature": "BOOL FtpDeleteFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszFileName );",
            "name": "FtpDeleteFileA"
        },
        {
            "signature": "BOOL FtpDeleteFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszFileName );",
            "name": "FtpDeleteFileW"
        },
        {
            "signature": "HINTERNET FtpFindFirstFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszSearchFile, [out] LPWIN32_FIND_DATAA lpFindFileData, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpFindFirstFileA"
        },
        {
            "signature": "HINTERNET FtpFindFirstFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszSearchFile, [out] LPWIN32_FIND_DATAW lpFindFileData, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpFindFirstFileW"
        },
        {
            "signature": "BOOL FtpGetCurrentDirectoryA( [in] HINTERNET hConnect, [out] LPSTR lpszCurrentDirectory, [in, out] LPDWORD lpdwCurrentDirectory );",
            "name": "FtpGetCurrentDirectoryA"
        },
        {
            "signature": "BOOL FtpGetCurrentDirectoryW( [in] HINTERNET hConnect, [out] LPWSTR lpszCurrentDirectory, [in, out] LPDWORD lpdwCurrentDirectory );",
            "name": "FtpGetCurrentDirectoryW"
        },
        {
            "signature": "BOOL FtpGetFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszRemoteFile, [in] LPCSTR lpszNewFile, [in] BOOL fFailIfExists, [in] DWORD dwFlagsAndAttributes, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpGetFileA"
        },
        {
            "signature": "DWORD FtpGetFileSize( [in] HINTERNET hFile, [out] LPDWORD lpdwFileSizeHigh );",
            "name": "FtpGetFileSize"
        },
        {
            "signature": "BOOL FtpGetFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszRemoteFile, [in] LPCWSTR lpszNewFile, [in] BOOL fFailIfExists, [in] DWORD dwFlagsAndAttributes, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpGetFileW"
        },
        {
            "signature": "HINTERNET FtpOpenFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszFileName, [in] DWORD dwAccess, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpOpenFileA"
        },
        {
            "signature": "HINTERNET FtpOpenFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszFileName, [in] DWORD dwAccess, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpOpenFileW"
        },
        {
            "signature": "BOOL FtpPutFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszLocalFile, [in] LPCSTR lpszNewRemoteFile, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpPutFileA"
        },
        {
            "signature": "BOOL FtpPutFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszLocalFile, [in] LPCWSTR lpszNewRemoteFile, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "FtpPutFileW"
        },
        {
            "signature": "BOOL FtpRemoveDirectoryA( [in] HINTERNET hConnect, [in] LPCSTR lpszDirectory );",
            "name": "FtpRemoveDirectoryA"
        },
        {
            "signature": "BOOL FtpRemoveDirectoryW( [in] HINTERNET hConnect, [in] LPCWSTR lpszDirectory );",
            "name": "FtpRemoveDirectoryW"
        },
        {
            "signature": "BOOL FtpRenameFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszExisting, [in] LPCSTR lpszNew );",
            "name": "FtpRenameFileA"
        },
        {
            "signature": "BOOL FtpRenameFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszExisting, [in] LPCWSTR lpszNew );",
            "name": "FtpRenameFileW"
        },
        {
            "signature": "BOOL FtpSetCurrentDirectoryA( [in] HINTERNET hConnect, [in] LPCSTR lpszDirectory );",
            "name": "FtpSetCurrentDirectoryA"
        },
        {
            "signature": "BOOL FtpSetCurrentDirectoryW( [in] HINTERNET hConnect, [in] LPCWSTR lpszDirectory );",
            "name": "FtpSetCurrentDirectoryW"
        },
        {
            "signature": "BOOL GetUrlCacheEntryInfoA( [in] LPCSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "GetUrlCacheEntryInfoA"
        },
        {
            "signature": "BOOL GetUrlCacheEntryInfoExA( [in] LPCSTR lpszUrl, [in, out, optional] LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, [in, out, optional] LPDWORD lpcbCacheEntryInfo, [out] LPSTR lpszRedirectUrl, [in, out] LPDWORD lpcbRedirectUrl, LPVOID lpReserved, [in] DWORD dwFlags );",
            "name": "GetUrlCacheEntryInfoExA"
        },
        {
            "signature": "BOOL GetUrlCacheEntryInfoExW( [in] LPCWSTR lpszUrl, [in, out, optional] LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, [in, out, optional] LPDWORD lpcbCacheEntryInfo, [out] LPWSTR lpszRedirectUrl, [in, out] LPDWORD lpcbRedirectUrl, LPVOID lpReserved, [in] DWORD dwFlags );",
            "name": "GetUrlCacheEntryInfoExW"
        },
        {
            "signature": "BOOL GetUrlCacheEntryInfoW( [in] LPCWSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo );",
            "name": "GetUrlCacheEntryInfoW"
        },
        {
            "signature": "BOOL GetUrlCacheGroupAttributeA( [in] GROUPID gid, [in] DWORD dwFlags, [in] DWORD dwAttributes, [out] LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo, [in, out] LPDWORD lpcbGroupInfo, [in, out] LPVOID lpReserved );",
            "name": "GetUrlCacheGroupAttributeA"
        },
        {
            "signature": "BOOL GetUrlCacheGroupAttributeW( [in] GROUPID gid, [in] DWORD dwFlags, [in] DWORD dwAttributes, [out] LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo, [in, out] LPDWORD lpcbGroupInfo, [in, out] LPVOID lpReserved );",
            "name": "GetUrlCacheGroupAttributeW"
        },
        {
            "signature": "GOPHER_ATTRIBUTE_ENUMERATOR GopherAttributeEnumerator; BOOL GopherAttributeEnumerator( LPGOPHER_ATTRIBUTE_TYPE lpAttributeInfo, DWORD dwError ) {...}",
            "name": "GOPHER_ATTRIBUTE_ENUMERATOR callback"
        },
        {
            "signature": "BOOL GopherCreateLocatorA( [in] LPCSTR lpszHost, [in] INTERNET_PORT nServerPort, [in] LPCSTR lpszDisplayString, [in] LPCSTR lpszSelectorString, [in] DWORD dwGopherType, [out] LPSTR lpszLocator, [in, out] LPDWORD lpdwBufferLength );",
            "name": "GopherCreateLocatorA"
        },
        {
            "signature": "BOOL GopherCreateLocatorW( [in] LPCWSTR lpszHost, [in] INTERNET_PORT nServerPort, [in] LPCWSTR lpszDisplayString, [in] LPCWSTR lpszSelectorString, [in] DWORD dwGopherType, [out] LPWSTR lpszLocator, [in, out] LPDWORD lpdwBufferLength );",
            "name": "GopherCreateLocatorW"
        },
        {
            "signature": "HINTERNET GopherFindFirstFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszLocator, [in] LPCSTR lpszSearchString, [out] LPGOPHER_FIND_DATAA lpFindData, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "GopherFindFirstFileA"
        },
        {
            "signature": "HINTERNET GopherFindFirstFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszLocator, [in] LPCWSTR lpszSearchString, [out] LPGOPHER_FIND_DATAW lpFindData, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "GopherFindFirstFileW"
        },
        {
            "signature": "BOOL GopherGetAttributeA( [in] HINTERNET hConnect, [in] LPCSTR lpszLocator, [in] LPCSTR lpszAttributeName, [out] LPBYTE lpBuffer, [in] DWORD dwBufferLength, [out] LPDWORD lpdwCharactersReturned, [in] GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, [in] DWORD_PTR dwContext );",
            "name": "GopherGetAttributeA"
        },
        {
            "signature": "BOOL GopherGetAttributeW( [in] HINTERNET hConnect, [in] LPCWSTR lpszLocator, [in] LPCWSTR lpszAttributeName, [out] LPBYTE lpBuffer, [in] DWORD dwBufferLength, [out] LPDWORD lpdwCharactersReturned, [in] GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator, [in] DWORD_PTR dwContext );",
            "name": "GopherGetAttributeW"
        },
        {
            "signature": "BOOL GopherGetLocatorTypeA( [in] LPCSTR lpszLocator, [out] LPDWORD lpdwGopherType );",
            "name": "GopherGetLocatorTypeA"
        },
        {
            "signature": "BOOL GopherGetLocatorTypeW( [in] LPCWSTR lpszLocator, [out] LPDWORD lpdwGopherType );",
            "name": "GopherGetLocatorTypeW"
        },
        {
            "signature": "HINTERNET GopherOpenFileA( [in] HINTERNET hConnect, [in] LPCSTR lpszLocator, [in] LPCSTR lpszView, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "GopherOpenFileA"
        },
        {
            "signature": "HINTERNET GopherOpenFileW( [in] HINTERNET hConnect, [in] LPCWSTR lpszLocator, [in] LPCWSTR lpszView, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "GopherOpenFileW"
        },
        {
            "signature": "BOOL HttpAddRequestHeadersA( [in] HINTERNET hRequest, [in] LPCSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] DWORD dwModifiers );",
            "name": "HttpAddRequestHeadersA"
        },
        {
            "signature": "BOOL HttpAddRequestHeadersW( [in] HINTERNET hRequest, [in] LPCWSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] DWORD dwModifiers );",
            "name": "HttpAddRequestHeadersW"
        },
        {
            "signature": "BOOL HttpEndRequestA( [in] HINTERNET hRequest, [out, optional] LPINTERNET_BUFFERSA lpBuffersOut, [in] DWORD dwFlags, [in, optional] DWORD_PTR dwContext );",
            "name": "HttpEndRequestA"
        },
        {
            "signature": "BOOL HttpEndRequestW( [in] HINTERNET hRequest, [out, optional] LPINTERNET_BUFFERSW lpBuffersOut, [in] DWORD dwFlags, [in, optional] DWORD_PTR dwContext );",
            "name": "HttpEndRequestW"
        },
        {
            "signature": "HINTERNET HttpOpenRequestA( [in] HINTERNET hConnect, [in] LPCSTR lpszVerb, [in] LPCSTR lpszObjectName, [in] LPCSTR lpszVersion, [in] LPCSTR lpszReferrer, [in] LPCSTR *lplpszAcceptTypes, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "HttpOpenRequestA"
        },
        {
            "signature": "HINTERNET HttpOpenRequestW( [in] HINTERNET hConnect, [in] LPCWSTR lpszVerb, [in] LPCWSTR lpszObjectName, [in] LPCWSTR lpszVersion, [in] LPCWSTR lpszReferrer, [in] LPCWSTR *lplpszAcceptTypes, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "HttpOpenRequestW"
        },
        {
            "signature": "BOOL HttpQueryInfoA( [in] HINTERNET hRequest, [in] DWORD dwInfoLevel, [in, out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength, [in, out] LPDWORD lpdwIndex );",
            "name": "HttpQueryInfoA"
        },
        {
            "signature": "BOOL HttpQueryInfoW( [in] HINTERNET hRequest, [in] DWORD dwInfoLevel, [in, out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength, [in, out] LPDWORD lpdwIndex );",
            "name": "HttpQueryInfoW"
        },
        {
            "signature": "BOOL HttpSendRequestA( [in] HINTERNET hRequest, [in] LPCSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] LPVOID lpOptional, [in] DWORD dwOptionalLength );",
            "name": "HttpSendRequestA"
        },
        {
            "signature": "BOOL HttpSendRequestExA( [in] HINTERNET hRequest, [in] LPINTERNET_BUFFERSA lpBuffersIn, [out] LPINTERNET_BUFFERSA lpBuffersOut, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "HttpSendRequestExA"
        },
        {
            "signature": "BOOL HttpSendRequestExW( [in] HINTERNET hRequest, [in] LPINTERNET_BUFFERSW lpBuffersIn, [out] LPINTERNET_BUFFERSW lpBuffersOut, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "HttpSendRequestExW"
        },
        {
            "signature": "BOOL HttpSendRequestW( [in] HINTERNET hRequest, [in] LPCWSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] LPVOID lpOptional, [in] DWORD dwOptionalLength );",
            "name": "HttpSendRequestW"
        },
        {
            "signature": "INTERNET_STATUS_CALLBACK InternetStatusCallback; void InternetStatusCallback( [in] HINTERNET hInternet, [in] DWORD_PTR dwContext, [in] DWORD dwInternetStatus, [in] LPVOID lpvStatusInformation, [in] DWORD dwStatusInformationLength ) {...}",
            "name": "INTERNET_STATUS_CALLBACK callback"
        },
        {
            "signature": "DWORD InternetAttemptConnect( [in] DWORD dwReserved );",
            "name": "InternetAttemptConnect"
        },
        {
            "signature": "BOOL InternetAutodial( [in] DWORD dwFlags, [in] HWND hwndParent );",
            "name": "InternetAutodial"
        },
        {
            "signature": "BOOL InternetAutodialHangup( [in] DWORD dwReserved );",
            "name": "InternetAutodialHangup"
        },
        {
            "signature": "BOOL InternetCanonicalizeUrlA( [in] LPCSTR lpszUrl, [out] LPSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength, [in] DWORD dwFlags );",
            "name": "InternetCanonicalizeUrlA"
        },
        {
            "signature": "BOOL InternetCanonicalizeUrlW( [in] LPCWSTR lpszUrl, [out] LPWSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength, [in] DWORD dwFlags );",
            "name": "InternetCanonicalizeUrlW"
        },
        {
            "signature": "BOOL InternetCheckConnectionA( [in] LPCSTR lpszUrl, [in] DWORD dwFlags, [in] DWORD dwReserved );",
            "name": "InternetCheckConnectionA"
        },
        {
            "signature": "BOOL InternetCheckConnectionW( [in] LPCWSTR lpszUrl, [in] DWORD dwFlags, [in] DWORD dwReserved );",
            "name": "InternetCheckConnectionW"
        },
        {
            "signature": "BOOL InternetClearAllPerSiteCookieDecisions();",
            "name": "InternetClearAllPerSiteCookieDecisions"
        },
        {
            "signature": "BOOL InternetCloseHandle( [in] HINTERNET hInternet );",
            "name": "InternetCloseHandle"
        },
        {
            "signature": "BOOL InternetCombineUrlA( [in] LPCSTR lpszBaseUrl, [in] LPCSTR lpszRelativeUrl, [out] LPSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength, [in] DWORD dwFlags );",
            "name": "InternetCombineUrlA"
        },
        {
            "signature": "BOOL InternetCombineUrlW( [in] LPCWSTR lpszBaseUrl, [in] LPCWSTR lpszRelativeUrl, [out] LPWSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength, [in] DWORD dwFlags );",
            "name": "InternetCombineUrlW"
        },
        {
            "signature": "DWORD InternetConfirmZoneCrossing( [in] HWND hWnd, [in] LPSTR szUrlPrev, [in] LPSTR szUrlNew, [in] BOOL bPost );",
            "name": "InternetConfirmZoneCrossing"
        },
        {
            "signature": "DWORD InternetConfirmZoneCrossingA( [in] HWND hWnd, [in] LPSTR szUrlPrev, [in] LPSTR szUrlNew, [in] BOOL bPost );",
            "name": "InternetConfirmZoneCrossingA"
        },
        {
            "signature": "DWORD InternetConfirmZoneCrossingW( [in] HWND hWnd, [in] LPWSTR szUrlPrev, [in] LPWSTR szUrlNew, [in] BOOL bPost );",
            "name": "InternetConfirmZoneCrossingW"
        },
        {
            "signature": "HINTERNET InternetConnectA( [in] HINTERNET hInternet, [in] LPCSTR lpszServerName, [in] INTERNET_PORT nServerPort, [in] LPCSTR lpszUserName, [in] LPCSTR lpszPassword, [in] DWORD dwService, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetConnectA"
        },
        {
            "signature": "HINTERNET InternetConnectW( [in] HINTERNET hInternet, [in] LPCWSTR lpszServerName, [in] INTERNET_PORT nServerPort, [in] LPCWSTR lpszUserName, [in] LPCWSTR lpszPassword, [in] DWORD dwService, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetConnectW"
        },
        {
            "signature": "BOOL InternetCrackUrlA( [in] LPCSTR lpszUrl, [in] DWORD dwUrlLength, [in] DWORD dwFlags, [in, out] LPURL_COMPONENTSA lpUrlComponents );",
            "name": "InternetCrackUrlA"
        },
        {
            "signature": "BOOL InternetCrackUrlW( [in] LPCWSTR lpszUrl, [in] DWORD dwUrlLength, [in] DWORD dwFlags, [in, out] LPURL_COMPONENTSW lpUrlComponents );",
            "name": "InternetCrackUrlW"
        },
        {
            "signature": "BOOL InternetCreateUrlA( [in] LPURL_COMPONENTSA lpUrlComponents, [in] DWORD dwFlags, [out] LPSTR lpszUrl, [in, out] LPDWORD lpdwUrlLength );",
            "name": "InternetCreateUrlA"
        },
        {
            "signature": "BOOL InternetCreateUrlW( [in] LPURL_COMPONENTSW lpUrlComponents, [in] DWORD dwFlags, [out] LPWSTR lpszUrl, [in, out] LPDWORD lpdwUrlLength );",
            "name": "InternetCreateUrlW"
        },
        {
            "signature": "DWORD InternetDial( [in] HWND hwndParent, [in] LPSTR lpszConnectoid, [in] DWORD dwFlags, [out] LPDWORD lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDial"
        },
        {
            "signature": "DWORD InternetDialA( [in] HWND hwndParent, [in] LPSTR lpszConnectoid, [in] DWORD dwFlags, [out] DWORD_PTR *lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDialA"
        },
        {
            "signature": "DWORD InternetDialW( [in] HWND hwndParent, [in] LPWSTR lpszConnectoid, [in] DWORD dwFlags, [out] DWORD_PTR *lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDialW"
        },
        {
            "signature": "BOOL InternetEnumPerSiteCookieDecisionA( [out] LPSTR pszSiteName, [in, out] unsigned long *pcSiteNameSize, [out] unsigned long *pdwDecision, [in] unsigned long dwIndex );",
            "name": "InternetEnumPerSiteCookieDecisionA"
        },
        {
            "signature": "BOOL InternetEnumPerSiteCookieDecisionW( [out] LPWSTR pszSiteName, [in, out] unsigned long *pcSiteNameSize, [out] unsigned long *pdwDecision, [in] unsigned long dwIndex );",
            "name": "InternetEnumPerSiteCookieDecisionW"
        },
        {
            "signature": "DWORD InternetErrorDlg( [in] HWND hWnd, [in, out] HINTERNET hRequest, [in] DWORD dwError, [in] DWORD dwFlags, [in, out] LPVOID *lppvData );",
            "name": "InternetErrorDlg"
        },
        {
            "signature": "BOOL InternetFindNextFileA( [in] HINTERNET hFind, [out] LPVOID lpvFindData );",
            "name": "InternetFindNextFileA"
        },
        {
            "signature": "BOOL InternetFindNextFileW( [in] HINTERNET hFind, [out] LPVOID lpvFindData );",
            "name": "InternetFindNextFileW"
        },
        {
            "signature": "void InternetFreeCookies( INTERNET_COOKIE2 *pCookies, DWORD dwCookieCount );",
            "name": "InternetFreeCookies"
        },
        {
            "signature": "BOOL InternetGetConnectedState( [out] LPDWORD lpdwFlags, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedState"
        },
        {
            "signature": "BOOL InternetGetConnectedStateEx( [out] LPDWORD lpdwFlags, [out] LPSTR lpszConnectionName, [in] DWORD dwNameLen, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedStateEx"
        },
        {
            "signature": "BOOL InternetGetConnectedStateExA( [out] LPDWORD lpdwFlags, [out] LPSTR lpszConnectionName, DWORD cchNameLen, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedStateExA"
        },
        {
            "signature": "BOOL InternetGetConnectedStateExW( [out] LPDWORD lpdwFlags, [out] LPWSTR lpszConnectionName, DWORD cchNameLen, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedStateExW"
        },
        {
            "signature": "BOOL InternetGetCookieA( [in] LPCSTR lpszUrl, [in] LPCSTR lpszCookieName, [out] LPSTR lpszCookieData, [in, out] LPDWORD lpdwSize );",
            "name": "InternetGetCookieA"
        },
        {
            "signature": "DWORD InternetGetCookieEx2( PCWSTR pcwszUrl, PCWSTR pcwszCookieName, DWORD dwFlags, INTERNET_COOKIE2 **ppCookies, PDWORD pdwCookieCount );",
            "name": "InternetGetCookieEx2"
        },
        {
            "signature": "BOOL InternetGetCookieExA( [in] LPCSTR lpszUrl, [in] LPCSTR lpszCookieName, [in, out, optional] LPSTR lpszCookieData, [in, out] LPDWORD lpdwSize, [in] DWORD dwFlags, [in] LPVOID lpReserved );",
            "name": "InternetGetCookieExA"
        },
        {
            "signature": "BOOL InternetGetCookieExW( [in] LPCWSTR lpszUrl, [in] LPCWSTR lpszCookieName, [in, out, optional] LPWSTR lpszCookieData, [in, out] LPDWORD lpdwSize, [in] DWORD dwFlags, [in] LPVOID lpReserved );",
            "name": "InternetGetCookieExW"
        },
        {
            "signature": "BOOL InternetGetCookieW( [in] LPCWSTR lpszUrl, [in] LPCWSTR lpszCookieName, [out] LPWSTR lpszCookieData, [in, out] LPDWORD lpdwSize );",
            "name": "InternetGetCookieW"
        },
        {
            "signature": "BOOL InternetGetLastResponseInfoA( [out] LPDWORD lpdwError, [out] LPSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "InternetGetLastResponseInfoA"
        },
        {
            "signature": "BOOL InternetGetLastResponseInfoW( [out] LPDWORD lpdwError, [out] LPWSTR lpszBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "InternetGetLastResponseInfoW"
        },
        {
            "signature": "BOOL InternetGetPerSiteCookieDecisionA( [in] LPCSTR pchHostName, [out] unsigned long *pResult );",
            "name": "InternetGetPerSiteCookieDecisionA"
        },
        {
            "signature": "BOOL InternetGetPerSiteCookieDecisionW( [in] LPCWSTR pchHostName, [out] unsigned long *pResult );",
            "name": "InternetGetPerSiteCookieDecisionW"
        },
        {
            "signature": "BOOL InternetGoOnline( [in] LPSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnline"
        },
        {
            "signature": "BOOL InternetGoOnlineA( [in] LPCSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnlineA"
        },
        {
            "signature": "BOOL InternetGoOnlineW( [in] LPCWSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnlineW"
        },
        {
            "signature": "DWORD InternetHangUp( [in] DWORD_PTR dwConnection, [in] DWORD dwReserved );",
            "name": "InternetHangUp"
        },
        {
            "signature": "BOOL InternetInitializeAutoProxyDll( [in] DWORD dwReserved );",
            "name": "InternetInitializeAutoProxyDll"
        },
        {
            "signature": "BOOL InternetLockRequestFile( [in] HINTERNET hInternet, [out] HANDLE *lphLockRequestInfo );",
            "name": "InternetLockRequestFile"
        },
        {
            "signature": "HINTERNET InternetOpenA( [in] LPCSTR lpszAgent, [in] DWORD dwAccessType, [in] LPCSTR lpszProxy, [in] LPCSTR lpszProxyBypass, [in] DWORD dwFlags );",
            "name": "InternetOpenA"
        },
        {
            "signature": "HINTERNET InternetOpenUrlA( [in] HINTERNET hInternet, [in] LPCSTR lpszUrl, [in] LPCSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetOpenUrlA"
        },
        {
            "signature": "HINTERNET InternetOpenUrlW( [in] HINTERNET hInternet, [in] LPCWSTR lpszUrl, [in] LPCWSTR lpszHeaders, [in] DWORD dwHeadersLength, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetOpenUrlW"
        },
        {
            "signature": "HINTERNET InternetOpenW( [in] LPCWSTR lpszAgent, [in] DWORD dwAccessType, [in] LPCWSTR lpszProxy, [in] LPCWSTR lpszProxyBypass, [in] DWORD dwFlags );",
            "name": "InternetOpenW"
        },
        {
            "signature": "BOOL InternetQueryDataAvailable( [in] HINTERNET hFile, [out] LPDWORD lpdwNumberOfBytesAvailable, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetQueryDataAvailable"
        },
        {
            "signature": "BOOL InternetQueryOptionA( [in] HINTERNET hInternet, [in] DWORD dwOption, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "InternetQueryOptionA"
        },
        {
            "signature": "BOOL InternetQueryOptionW( [in] HINTERNET hInternet, [in] DWORD dwOption, [out] LPVOID lpBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "InternetQueryOptionW"
        },
        {
            "signature": "BOOL InternetReadFile( [in] HINTERNET hFile, [out] LPVOID lpBuffer, [in] DWORD dwNumberOfBytesToRead, [out] LPDWORD lpdwNumberOfBytesRead );",
            "name": "InternetReadFile"
        },
        {
            "signature": "BOOL InternetReadFileExA( [in] HINTERNET hFile, [out] LPINTERNET_BUFFERSA lpBuffersOut, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetReadFileExA"
        },
        {
            "signature": "BOOL InternetReadFileExW( [in] HINTERNET hFile, [out] LPINTERNET_BUFFERSW lpBuffersOut, [in] DWORD dwFlags, [in] DWORD_PTR dwContext );",
            "name": "InternetReadFileExW"
        },
        {
            "signature": "BOOL InternetSetCookieA( [in] LPCSTR lpszUrl, [in] LPCSTR lpszCookieName, [in] LPCSTR lpszCookieData );",
            "name": "InternetSetCookieA"
        },
        {
            "signature": "DWORD InternetSetCookieEx2( PCWSTR pcwszUrl, const INTERNET_COOKIE2 *pCookie, PCWSTR pcwszP3PPolicy, DWORD dwFlags, PDWORD pdwCookieState );",
            "name": "InternetSetCookieEx2"
        },
        {
            "signature": "DWORD InternetSetCookieExA( [in] LPCSTR lpszUrl, [in] LPCSTR lpszCookieName, [in] LPCSTR lpszCookieData, [in] DWORD dwFlags, [in] DWORD_PTR dwReserved );",
            "name": "InternetSetCookieExA"
        },
        {
            "signature": "DWORD InternetSetCookieExW( [in] LPCWSTR lpszUrl, [in] LPCWSTR lpszCookieName, [in] LPCWSTR lpszCookieData, [in] DWORD dwFlags, [in] DWORD_PTR dwReserved );",
            "name": "InternetSetCookieExW"
        },
        {
            "signature": "BOOL InternetSetCookieW( [in] LPCWSTR lpszUrl, [in] LPCWSTR lpszCookieName, [in] LPCWSTR lpszCookieData );",
            "name": "InternetSetCookieW"
        },
        {
            "signature": "BOOL InternetSetDialState( LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialState"
        },
        {
            "signature": "BOOL InternetSetDialStateA( LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialStateA"
        },
        {
            "signature": "BOOL InternetSetDialStateW( LPCWSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialStateW"
        },
        {
            "signature": "DWORD InternetSetFilePointer( [in] HINTERNET hFile, [in] LONG lDistanceToMove, [in, out] PLONG lpDistanceToMoveHigh, [in] DWORD dwMoveMethod, [in] DWORD_PTR dwContext );",
            "name": "InternetSetFilePointer"
        },
        {
            "signature": "BOOL InternetSetOptionA( [in] HINTERNET hInternet, [in] DWORD dwOption, [in] LPVOID lpBuffer, [in] DWORD dwBufferLength );",
            "name": "InternetSetOptionA"
        },
        {
            "signature": "BOOL InternetSetOptionExA( HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwFlags );",
            "name": "InternetSetOptionExA"
        },
        {
            "signature": "BOOL InternetSetOptionExW( HINTERNET hInternet, DWORD dwOption, LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwFlags );",
            "name": "InternetSetOptionExW"
        },
        {
            "signature": "BOOL InternetSetOptionW( [in] HINTERNET hInternet, [in] DWORD dwOption, [in] LPVOID lpBuffer, [in] DWORD dwBufferLength );",
            "name": "InternetSetOptionW"
        },
        {
            "signature": "BOOL InternetSetPerSiteCookieDecisionA( [in] LPCSTR pchHostName, [in] DWORD dwDecision );",
            "name": "InternetSetPerSiteCookieDecisionA"
        },
        {
            "signature": "BOOL InternetSetPerSiteCookieDecisionW( [in] LPCWSTR pchHostName, [in] DWORD dwDecision );",
            "name": "InternetSetPerSiteCookieDecisionW"
        },
        {
            "signature": "INTERNET_STATUS_CALLBACK InternetSetStatusCallback( [in] HINTERNET hInternet, [in] INTERNET_STATUS_CALLBACK lpfnInternetCallback );",
            "name": "InternetSetStatusCallback"
        },
        {
            "signature": "INTERNET_STATUS_CALLBACK InternetSetStatusCallbackA( HINTERNET hInternet, INTERNET_STATUS_CALLBACK lpfnInternetCallback );",
            "name": "InternetSetStatusCallbackA"
        },
        {
            "signature": "INTERNET_STATUS_CALLBACK InternetSetStatusCallbackW( HINTERNET hInternet, INTERNET_STATUS_CALLBACK lpfnInternetCallback );",
            "name": "InternetSetStatusCallbackW"
        },
        {
            "signature": "BOOL InternetTimeFromSystemTime( [in] const SYSTEMTIME *pst, [in] DWORD dwRFC, [out] LPSTR lpszTime, [in] DWORD cbTime );",
            "name": "InternetTimeFromSystemTime"
        },
        {
            "signature": "BOOL InternetTimeFromSystemTimeA( [in] const SYSTEMTIME *pst, [in] DWORD dwRFC, [out] LPSTR lpszTime, [in] DWORD cbTime );",
            "name": "InternetTimeFromSystemTimeA"
        },
        {
            "signature": "BOOL InternetTimeFromSystemTimeW( [in] const SYSTEMTIME *pst, [in] DWORD dwRFC, [out] LPWSTR lpszTime, [in] DWORD cbTime );",
            "name": "InternetTimeFromSystemTimeW"
        },
        {
            "signature": "BOOL InternetTimeToSystemTime( [in] LPCSTR lpszTime, [out] SYSTEMTIME *pst, [in] DWORD dwReserved );",
            "name": "InternetTimeToSystemTime"
        },
        {
            "signature": "BOOL InternetTimeToSystemTimeA( [in] LPCSTR lpszTime, [out] SYSTEMTIME *pst, [in] DWORD dwReserved );",
            "name": "InternetTimeToSystemTimeA"
        },
        {
            "signature": "BOOL InternetTimeToSystemTimeW( [in] LPCWSTR lpszTime, [out] SYSTEMTIME *pst, [in] DWORD dwReserved );",
            "name": "InternetTimeToSystemTimeW"
        },
        {
            "signature": "BOOL InternetUnlockRequestFile( [in] HANDLE hLockRequestInfo );",
            "name": "InternetUnlockRequestFile"
        },
        {
            "signature": "BOOL InternetWriteFile( [in] HINTERNET hFile, [in] LPCVOID lpBuffer, [in] DWORD dwNumberOfBytesToWrite, [out] LPDWORD lpdwNumberOfBytesWritten );",
            "name": "InternetWriteFile"
        },
        {
            "signature": "DWORD PrivacyGetZonePreferenceW( [in] DWORD dwZone, [in] DWORD dwType, [out, optional] LPDWORD pdwTemplate, [out, optional] LPWSTR pszBuffer, [in, out, optional] LPDWORD pdwBufferLength );",
            "name": "PrivacyGetZonePreferenceW"
        },
        {
            "signature": "DWORD PrivacySetZonePreferenceW( [in] DWORD dwZone, [in] DWORD dwType, [in] DWORD dwTemplate, [in, optional] LPCWSTR pszPreference );",
            "name": "PrivacySetZonePreferenceW"
        },
        {
            "signature": "BOOL ReadUrlCacheEntryStream( [in] HANDLE hUrlCacheStream, [in] DWORD dwLocation, [in, out] LPVOID lpBuffer, [in, out] LPDWORD lpdwLen, [in] DWORD Reserved );",
            "name": "ReadUrlCacheEntryStream"
        },
        {
            "signature": "BOOL ResumeSuspendedDownload( [in] HINTERNET hRequest, [in] DWORD dwResultCode );",
            "name": "ResumeSuspendedDownload"
        },
        {
            "signature": "BOOL RetrieveUrlCacheEntryFileA( [in] LPCSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [in] DWORD dwReserved );",
            "name": "RetrieveUrlCacheEntryFileA"
        },
        {
            "signature": "BOOL RetrieveUrlCacheEntryFileW( [in] LPCWSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [in] DWORD dwReserved );",
            "name": "RetrieveUrlCacheEntryFileW"
        },
        {
            "signature": "HANDLE RetrieveUrlCacheEntryStreamA( [in] LPCSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [in] BOOL fRandomRead, [in] DWORD dwReserved );",
            "name": "RetrieveUrlCacheEntryStreamA"
        },
        {
            "signature": "HANDLE RetrieveUrlCacheEntryStreamW( [in] LPCWSTR lpszUrlName, [out] LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, [in, out] LPDWORD lpcbCacheEntryInfo, [in] BOOL fRandomRead, [in] DWORD dwReserved );",
            "name": "RetrieveUrlCacheEntryStreamW"
        },
        {
            "signature": "BOOL SetUrlCacheEntryGroup( [in] LPCSTR lpszUrlName, [in] DWORD dwFlags, [in] GROUPID GroupId, [in] LPBYTE pbGroupAttributes, [in] DWORD cbGroupAttributes, [in] LPVOID lpReserved );",
            "name": "SetUrlCacheEntryGroup"
        },
        {
            "signature": "BOOL SetUrlCacheEntryGroupA( [in] LPCSTR lpszUrlName, [in] DWORD dwFlags, [in] GROUPID GroupId, [in] LPBYTE pbGroupAttributes, [in] DWORD cbGroupAttributes, [in] LPVOID lpReserved );",
            "name": "SetUrlCacheEntryGroupA"
        },
        {
            "signature": "BOOL SetUrlCacheEntryGroupW( [in] LPCWSTR lpszUrlName, [in] DWORD dwFlags, [in] GROUPID GroupId, [in] LPBYTE pbGroupAttributes, [in] DWORD cbGroupAttributes, [in] LPVOID lpReserved );",
            "name": "SetUrlCacheEntryGroupW"
        },
        {
            "signature": "BOOL SetUrlCacheEntryInfoA( [in] LPCSTR lpszUrlName, [in] LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo, [in] DWORD dwFieldControl );",
            "name": "SetUrlCacheEntryInfoA"
        },
        {
            "signature": "BOOL SetUrlCacheEntryInfoW( [in] LPCWSTR lpszUrlName, [in] LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo, [in] DWORD dwFieldControl );",
            "name": "SetUrlCacheEntryInfoW"
        },
        {
            "signature": "BOOL SetUrlCacheGroupAttributeA( [in] GROUPID gid, [in] DWORD dwFlags, [in] DWORD dwAttributes, [in] LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo, [in, out] LPVOID lpReserved );",
            "name": "SetUrlCacheGroupAttributeA"
        },
        {
            "signature": "BOOL SetUrlCacheGroupAttributeW( [in] GROUPID gid, [in] DWORD dwFlags, [in] DWORD dwAttributes, [in] LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo, [in, out] LPVOID lpReserved );",
            "name": "SetUrlCacheGroupAttributeW"
        },
        {
            "signature": "BOOL UnlockUrlCacheEntryFile( [in] LPCSTR lpszUrlName, [in] DWORD dwReserved );",
            "name": "UnlockUrlCacheEntryFile"
        },
        {
            "signature": "BOOL UnlockUrlCacheEntryFileA( [in] LPCSTR lpszUrlName, [in] DWORD dwReserved );",
            "name": "UnlockUrlCacheEntryFileA"
        },
        {
            "signature": "BOOL UnlockUrlCacheEntryFileW( [in] LPCWSTR lpszUrlName, [in] DWORD dwReserved );",
            "name": "UnlockUrlCacheEntryFileW"
        },
        {
            "signature": "BOOL UnlockUrlCacheEntryStream( [in] HANDLE hUrlCacheStream, [in] DWORD Reserved );",
            "name": "UnlockUrlCacheEntryStream"
        }
    ],
    "Winineti.h": [
        {
            "signature": "BOOL CreateMD5SSOHash( [in] PWSTR pszChallengeInfo, [in] PWSTR pwszRealm, [in] PWSTR pwszTarget, [out] PBYTE pbHexHash );",
            "name": "CreateMD5SSOHash"
        },
        {
            "signature": "BOOL CreateUrlCacheContainerA( [in] LPCSTR Name, [in] LPCSTR lpCachePrefix, [in, optional] LPCSTR lpszCachePath, [in] DWORD KBCacheLimit, [in] DWORD dwContainerType, [in] DWORD dwOptions, LPVOID pvBuffer, [in, out] LPDWORD cbBuffer );",
            "name": "CreateUrlCacheContainerA"
        },
        {
            "signature": "BOOL CreateUrlCacheContainerW( [in] LPCWSTR Name, [in] LPCWSTR lpCachePrefix, [in, optional] LPCWSTR lpszCachePath, [in] DWORD KBCacheLimit, [in] DWORD dwContainerType, [in] DWORD dwOptions, LPVOID pvBuffer, [in, out] LPDWORD cbBuffer );",
            "name": "CreateUrlCacheContainerW"
        },
        {
            "signature": "BOOL DeleteUrlCacheContainerA( LPCSTR Name, DWORD dwOptions );",
            "name": "DeleteUrlCacheContainerA"
        },
        {
            "signature": "BOOL DeleteUrlCacheContainerW( LPCWSTR Name, DWORD dwOptions );",
            "name": "DeleteUrlCacheContainerW"
        },
        {
            "signature": "BOOL DetectAutoProxyUrl( [in, out] PSTR pszAutoProxyUrl, [in] DWORD cchAutoProxyUrl, [in] DWORD dwDetectFlags );",
            "name": "DetectAutoProxyUrl"
        },
        {
            "signature": "BOOL FreeUrlCacheSpaceA( LPCSTR lpszCachePath, DWORD dwSize, [in] DWORD dwFilter );",
            "name": "FreeUrlCacheSpaceA"
        },
        {
            "signature": "BOOL FreeUrlCacheSpaceW( LPCWSTR lpszCachePath, DWORD dwSize, [in] DWORD dwFilter );",
            "name": "FreeUrlCacheSpaceW"
        },
        {
            "signature": "BOOL GetUrlCacheConfigInfoA( [in, out] LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo, LPDWORD lpcbCacheConfigInfo, [in] DWORD dwFieldControl );",
            "name": "GetUrlCacheConfigInfoA"
        },
        {
            "signature": "BOOL GetUrlCacheConfigInfoW( [in, out] LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo, LPDWORD lpcbCacheConfigInfo, [in] DWORD dwFieldControl );",
            "name": "GetUrlCacheConfigInfoW"
        },
        {
            "signature": "BOOL InternetAutodial( [in] DWORD dwFlags, [in] HWND hwndParent );",
            "name": "InternetAutodial"
        },
        {
            "signature": "BOOL InternetAutodialHangup( [in] DWORD dwReserved );",
            "name": "InternetAutodialHangup"
        },
        {
            "signature": "DWORD InternetDial( [in] HWND hwndParent, [in] LPSTR lpszConnectoid, [in] DWORD dwFlags, [out] LPDWORD lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDial"
        },
        {
            "signature": "DWORD InternetDialA( [in] HWND hwndParent, [in] LPSTR lpszConnectoid, [in] DWORD dwFlags, [out] DWORD_PTR *lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDialA"
        },
        {
            "signature": "DWORD InternetDialW( [in] HWND hwndParent, [in] LPWSTR lpszConnectoid, [in] DWORD dwFlags, [out] DWORD_PTR *lpdwConnection, [in] DWORD dwReserved );",
            "name": "InternetDialW"
        },
        {
            "signature": "BOOL InternetEnumPerSiteCookieDecisionA( [out] LPSTR pszSiteName, [in, out] unsigned long *pcSiteNameSize, [out] unsigned long *pdwDecision, [in] unsigned long dwIndex );",
            "name": "InternetEnumPerSiteCookieDecisionA"
        },
        {
            "signature": "BOOL InternetEnumPerSiteCookieDecisionW( [out] LPWSTR pszSiteName, [in, out] unsigned long *pcSiteNameSize, [out] unsigned long *pdwDecision, [in] unsigned long dwIndex );",
            "name": "InternetEnumPerSiteCookieDecisionW"
        },
        {
            "signature": "BOOL InternetGetConnectedState( [out] LPDWORD lpdwFlags, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedState"
        },
        {
            "signature": "BOOL InternetGetConnectedStateEx( [out] LPDWORD lpdwFlags, [out] LPSTR lpszConnectionName, [in] DWORD dwNameLen, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedStateEx"
        },
        {
            "signature": "BOOL InternetGetConnectedStateExW( [out] LPDWORD lpdwFlags, [out] LPWSTR lpszConnectionName, DWORD cchNameLen, [in] DWORD dwReserved );",
            "name": "InternetGetConnectedStateExW"
        },
        {
            "signature": "BOOL InternetGoOnline( [in] LPSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnline"
        },
        {
            "signature": "BOOL InternetGoOnlineA( [in] LPCSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnlineA"
        },
        {
            "signature": "BOOL InternetGoOnlineW( [in] LPCWSTR lpszURL, [in] HWND hwndParent, [in] DWORD dwFlags );",
            "name": "InternetGoOnlineW"
        },
        {
            "signature": "DWORD InternetHangUp( [in] DWORD_PTR dwConnection, [in] DWORD dwReserved );",
            "name": "InternetHangUp"
        },
        {
            "signature": "BOOL InternetInitializeAutoProxyDll( [in] DWORD dwReserved );",
            "name": "InternetInitializeAutoProxyDll"
        },
        {
            "signature": "BOOL InternetSetDialState( LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialState"
        },
        {
            "signature": "BOOL InternetSetDialStateA( LPCSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialStateA"
        },
        {
            "signature": "BOOL InternetSetDialStateW( LPCWSTR lpszConnectoid, DWORD dwState, DWORD dwReserved );",
            "name": "InternetSetDialStateW"
        },
        {
            "signature": "DWORD PrivacyGetZonePreferenceW( [in] DWORD dwZone, [in] DWORD dwType, [out, optional] LPDWORD pdwTemplate, [out, optional] LPWSTR pszBuffer, [in, out, optional] LPDWORD pdwBufferLength );",
            "name": "PrivacyGetZonePreferenceW"
        },
        {
            "signature": "DWORD PrivacySetZonePreferenceW( [in] DWORD dwZone, [in] DWORD dwType, [in] DWORD dwTemplate, [in, optional] LPCWSTR pszPreference );",
            "name": "PrivacySetZonePreferenceW"
        }
    ],
    "Winioctl.h": [],
    "Winldap.h": [
        {
            "signature": "WINLDAPAPI VOID LDAPAPI ber_bvfree( berval *bv );",
            "name": "ber_bvfree"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI cldap_open( [in] PSTR HostName, [in] ULONG PortNumber );",
            "name": "cldap_open"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI cldap_openA( [in] PSTR HostName, [in] ULONG PortNumber );",
            "name": "cldap_openA"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI cldap_openW( [in] PWSTR HostName, [in] ULONG PortNumber );",
            "name": "cldap_openW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_abandon( [in] LDAP *ld, [in] ULONG msgid );",
            "name": "ldap_abandon"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add( [in] LDAP *ld, [in] PSTR dn, [in] LDAPMod * [] attrs );",
            "name": "ldap_add"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_ext( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] attrs, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_add_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_ext_s( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] attrs, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_add_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_ext_sA( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] attrs, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_add_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_ext_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] LDAPModW * [] attrs, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_add_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_extA( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] attrs, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_add_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_extW( [in] LDAP *ld, [in] const PWSTR dn, [in] LDAPModW * [] attrs, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_add_extW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_s( [in] LDAP *ld, [in] PSTR dn, [in] LDAPMod * [] attrs );",
            "name": "ldap_add_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_sA( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] attrs );",
            "name": "ldap_add_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_add_sW( [in] LDAP *ld, [in] PWSTR dn, [in] LDAPModW * [] attrs );",
            "name": "ldap_add_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_addA( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] attrs );",
            "name": "ldap_addA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_addW( [in] LDAP *ld, [in] PWSTR dn, [in] LDAPModW * [] attrs );",
            "name": "ldap_addW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bind( [in] LDAP *ld, [in] const PSTR dn, [in] const PCHAR cred, [in] ULONG method );",
            "name": "ldap_bind"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bind_s( [in] LDAP *ld, [in] const PSTR dn, [in] const PCHAR cred, [in] ULONG method );",
            "name": "ldap_bind_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bind_sA( [in] LDAP *ld, [in] PSTR dn, [in] PCHAR cred, [in] ULONG method );",
            "name": "ldap_bind_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bind_sW( [in] LDAP *ld, [in] PWSTR dn, [in] PWCHAR cred, [in] ULONG method );",
            "name": "ldap_bind_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bindA( [in] LDAP *ld, [in] PSTR dn, [in] PCHAR cred, [in] ULONG method );",
            "name": "ldap_bindA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_bindW( [in] LDAP *ld, [in] PWSTR dn, [in] PWCHAR cred, [in] ULONG method );",
            "name": "ldap_bindW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_check_filterA( [in] LDAP *ld, [in] PSTR SearchFilter );",
            "name": "ldap_check_filterA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_check_filterW( [in] LDAP *ld, [in] PWSTR SearchFilter );",
            "name": "ldap_check_filterW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_cleanup( HANDLE hInstance );",
            "name": "ldap_cleanup"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_close_extended_op( [in] LDAP *ld, [in] ULONG MessageNumber );",
            "name": "ldap_close_extended_op"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR attr, [in] PSTR value );",
            "name": "ldap_compare"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_ext( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR Attr, [in] const PSTR Value, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_compare_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_ext_s( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR Attr, [in] const PSTR Value, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_compare_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_ext_sA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR Attr, [in] const PSTR Value, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_compare_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_ext_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR Attr, [in] const PWSTR Value, [in] berval *Data, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_compare_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_extA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR Attr, [in] const PSTR Value, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_compare_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_extW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR Attr, [in] const PWSTR Value, [in] berval *Data, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_compare_extW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_s( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR attr, [in] PSTR value );",
            "name": "ldap_compare_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_sA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR attr, [in] PSTR value );",
            "name": "ldap_compare_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compare_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR attr, [in] PWSTR value );",
            "name": "ldap_compare_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compareA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR attr, [in] PSTR value );",
            "name": "ldap_compareA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_compareW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR attr, [in] PWSTR value );",
            "name": "ldap_compareW"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_conn_from_msg( [in] LDAP *PrimaryConn, [in] LDAPMessage *res );",
            "name": "ldap_conn_from_msg"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_connect( [in] LDAP *ld, [in] l_timeval *timeout );",
            "name": "ldap_connect"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_control_free( [in] LDAPControlA *Control );",
            "name": "ldap_control_free"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_control_freeA( LDAPControlA *Controls );",
            "name": "ldap_control_freeA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_control_freeW( [in] LDAPControlW *Control );",
            "name": "ldap_control_freeW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_controls_free( [in] LDAPControlA **Controls );",
            "name": "ldap_controls_free"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_controls_freeA( [in] LDAPControlA **Controls );",
            "name": "ldap_controls_freeA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_controls_freeW( LDAPControlW **Control );",
            "name": "ldap_controls_freeW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_entries( [in] LDAP *ld, [in] LDAPMessage *res );",
            "name": "ldap_count_entries"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_references( [in] LDAP *ld, [in] LDAPMessage *res );",
            "name": "ldap_count_references"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_values( [in] PCHAR *vals );",
            "name": "ldap_count_values"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_values_len( [in] berval **vals );",
            "name": "ldap_count_values_len"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_valuesA( [in] PCHAR *vals );",
            "name": "ldap_count_valuesA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_count_valuesW( [in] PWCHAR *vals );",
            "name": "ldap_count_valuesW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_page_control( [in] PLDAP ExternalHandle, [in] ULONG PageSize, [in] berval *Cookie, [in] UCHAR IsCritical, [out] PLDAPControlA *Control );",
            "name": "ldap_create_page_control"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_page_controlA( [in] PLDAP ExternalHandle, [in] ULONG PageSize, [in] berval *Cookie, [in] UCHAR IsCritical, [out] PLDAPControlA *Control );",
            "name": "ldap_create_page_controlA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_page_controlW( [in] PLDAP ExternalHandle, [in] ULONG PageSize, [in] berval *Cookie, [in] UCHAR IsCritical, [out] PLDAPControlW *Control );",
            "name": "ldap_create_page_controlW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_sort_control( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyA *SortKeys, [in] UCHAR IsCritical, [out] PLDAPControlA *Control );",
            "name": "ldap_create_sort_control"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_sort_controlA( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyA *SortKeys, [in] UCHAR IsCritical, [out] PLDAPControlA *Control );",
            "name": "ldap_create_sort_controlA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_create_sort_controlW( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyW *SortKeys, [in] UCHAR IsCritical, [out] PLDAPControlW *Control );",
            "name": "ldap_create_sort_controlW"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_create_vlv_controlA( [in] PLDAP ExternalHandle, [in] PLDAPVLVInfo VlvInfo, [in] UCHAR IsCritical, [out] PLDAPControlA *Control );",
            "name": "ldap_create_vlv_controlA"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_create_vlv_controlW( [in] PLDAP ExternalHandle, [in] PLDAPVLVInfo VlvInfo, [in] UCHAR IsCritical, [out] PLDAPControlW *Control );",
            "name": "ldap_create_vlv_controlW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete( [in] LDAP *ld, [in] PSTR dn );",
            "name": "ldap_delete"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_ext( [in] LDAP *ld, [in] const PSTR dn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_delete_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_ext_s( [in] LDAP *ld, [in] const PSTR dn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_delete_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_ext_sA( [in] LDAP *ld, [in] const PSTR dn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_delete_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_ext_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_delete_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_extA( [in] LDAP *ld, [in] const PSTR dn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_delete_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_extW( [in] LDAP *ld, [in] const PWSTR dn, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_delete_extW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_s( [in] LDAP *ld, [in] PSTR dn );",
            "name": "ldap_delete_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_sA( [in] LDAP *ld, [in] const PSTR dn );",
            "name": "ldap_delete_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_delete_sW( [in] LDAP *ld, [in] const PWSTR dn );",
            "name": "ldap_delete_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_deleteA( [in] LDAP *ld, [in] const PSTR dn );",
            "name": "ldap_deleteA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_deleteW( [in] LDAP *ld, [in] const PWSTR dn );",
            "name": "ldap_deleteW"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_dn2ufn( [in] const PSTR dn );",
            "name": "ldap_dn2ufn"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_dn2ufnA( [in] const PSTR dn );",
            "name": "ldap_dn2ufnA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR LDAPAPI ldap_dn2ufnW( [in] const PWSTR dn );",
            "name": "ldap_dn2ufnW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_encode_sort_control( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyA *SortKeys, [out] PLDAPControlA Control, [in] BOOLEAN Criticality );",
            "name": "ldap_encode_sort_control"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_encode_sort_controlA( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyA *SortKeys, [out] PLDAPControlA Control, [in] BOOLEAN Criticality );",
            "name": "ldap_encode_sort_controlA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_encode_sort_controlW( [in] PLDAP ExternalHandle, [in] PLDAPSortKeyW *SortKeys, [out] PLDAPControlW Control, [in] BOOLEAN Criticality );",
            "name": "ldap_encode_sort_controlW"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_err2string( [in] ULONG err );",
            "name": "ldap_err2string"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_err2stringA( [in] ULONG err );",
            "name": "ldap_err2stringA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR LDAPAPI ldap_err2stringW( [in] ULONG err );",
            "name": "ldap_err2stringW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_escape_filter_element( [in] PCHAR sourceFilterElement, [in] ULONG sourceLength, [out] PCHAR destFilterElement, [in] ULONG destLength );",
            "name": "ldap_escape_filter_element"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_escape_filter_elementA( [in] PCHAR sourceFilterElement, [in] ULONG sourceLength, [out] PCHAR destFilterElement, [in] ULONG destLength );",
            "name": "ldap_escape_filter_elementA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_escape_filter_elementW( [in] PCHAR sourceFilterElement, [in] ULONG sourceLength, [out] PWCHAR destFilterElement, [in] ULONG destLength );",
            "name": "ldap_escape_filter_elementW"
        },
        {
            "signature": "WINLDAPAPI PCHAR *LDAPAPI ldap_explode_dn( [in] const PSTR dn, [in] ULONG notypes );",
            "name": "ldap_explode_dn"
        },
        {
            "signature": "WINLDAPAPI PCHAR *LDAPAPI ldap_explode_dnA( [in] const PSTR dn, [in] ULONG notypes );",
            "name": "ldap_explode_dnA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR *LDAPAPI ldap_explode_dnW( [in] const PWSTR dn, [in] ULONG notypes );",
            "name": "ldap_explode_dnW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_extended_operation( [in] LDAP *ld, [in] const PSTR Oid, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_extended_operation"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_extended_operation_sA( [in] LDAP *ExternalHandle, [in] PSTR Oid, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] PCHAR *ReturnedOid, [out] berval **ReturnedData );",
            "name": "ldap_extended_operation_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_extended_operation_sW( [in] LDAP *ExternalHandle, [in] PWSTR Oid, [in] berval *Data, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] PWCHAR *ReturnedOid, [out] berval **ReturnedData );",
            "name": "ldap_extended_operation_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_extended_operationA( [in] LDAP *ld, [in] const PSTR Oid, [in] berval *Data, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_extended_operationA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_extended_operationW( [in] LDAP *ld, [in] const PWSTR Oid, [in] berval *Data, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_extended_operationW"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_first_attribute( [in] LDAP *ld, [in] LDAPMessage *entry, [out] BerElement **ptr );",
            "name": "ldap_first_attribute"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_first_attributeA( [in] LDAP *ld, [in] LDAPMessage *entry, [out] BerElement **ptr );",
            "name": "ldap_first_attributeA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR LDAPAPI ldap_first_attributeW( [in] LDAP *ld, [in] LDAPMessage *entry, [out] BerElement **ptr );",
            "name": "ldap_first_attributeW"
        },
        {
            "signature": "WINLDAPAPI LDAPMessage *LDAPAPI ldap_first_entry( [in] LDAP *ld, [in] LDAPMessage *res );",
            "name": "ldap_first_entry"
        },
        {
            "signature": "WINLDAPAPI LDAPMessage *LDAPAPI ldap_first_reference( [in] LDAP *ld, [in] LDAPMessage *res );",
            "name": "ldap_first_reference"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_free_controls( [in] LDAPControlA **Controls );",
            "name": "ldap_free_controls"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_free_controlsA( [in] LDAPControlA **Controls );",
            "name": "ldap_free_controlsA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_free_controlsW( [in] LDAPControlW **Controls );",
            "name": "ldap_free_controlsW"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_get_dn( [in] LDAP *ld, [in] LDAPMessage *entry );",
            "name": "ldap_get_dn"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_get_dnA( [in] LDAP *ld, [in] LDAPMessage *entry );",
            "name": "ldap_get_dnA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR LDAPAPI ldap_get_dnW( [in] LDAP *ld, [in] LDAPMessage *entry );",
            "name": "ldap_get_dnW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_get_next_page( [in] PLDAP ExternalHandle, [in] PLDAPSearch SearchHandle, [in] ULONG PageSize, [out] ULONG *MessageNumber );",
            "name": "ldap_get_next_page"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_get_next_page_s( [in] PLDAP ExternalHandle, [in] PLDAPSearch SearchHandle, [in] l_timeval *timeout, [in] ULONG PageSize, [out] ULONG *TotalCount, [out] LDAPMessage **Results );",
            "name": "ldap_get_next_page_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_get_option( [in] LDAP *ld, [in] int option, [out] void *outvalue );",
            "name": "ldap_get_option"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_get_optionW( [in] LDAP *ld, [in] int option, [out] void *outvalue );",
            "name": "ldap_get_optionW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_get_paged_count( [in] PLDAP ExternalHandle, [in] PLDAPSearch SearchBlock, [out] ULONG *TotalCount, [out] PLDAPMessage Results );",
            "name": "ldap_get_paged_count"
        },
        {
            "signature": "WINLDAPAPI PCHAR *LDAPAPI ldap_get_values( [in] LDAP *ld, [in] LDAPMessage *entry, [in] const PSTR attr );",
            "name": "ldap_get_values"
        },
        {
            "signature": "WINLDAPAPI berval **LDAPAPI ldap_get_values_len( [in] LDAP *ExternalHandle, [in] LDAPMessage *Message, [in] const PSTR attr );",
            "name": "ldap_get_values_len"
        },
        {
            "signature": "WINLDAPAPI berval **LDAPAPI ldap_get_values_lenA( [in] LDAP *ExternalHandle, [in] LDAPMessage *Message, [in] const PSTR attr );",
            "name": "ldap_get_values_lenA"
        },
        {
            "signature": "WINLDAPAPI berval **LDAPAPI ldap_get_values_lenW( [in] LDAP *ExternalHandle, [in] LDAPMessage *Message, [in] const PWSTR attr );",
            "name": "ldap_get_values_lenW"
        },
        {
            "signature": "WINLDAPAPI PCHAR *LDAPAPI ldap_get_valuesA( [in] LDAP *ld, [in] LDAPMessage *entry, [in] const PSTR attr );",
            "name": "ldap_get_valuesA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR *LDAPAPI ldap_get_valuesW( [in] LDAP *ld, [in] LDAPMessage *entry, [in] const PWSTR attr );",
            "name": "ldap_get_valuesW"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_init( [in] PSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_init"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_initA( [in] const PSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_initA"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_initW( [in] const PWSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_initW"
        },
        {
            "signature": "WINLDAPAPI VOID LDAPAPI ldap_memfree( [in] PCHAR Block );",
            "name": "ldap_memfree"
        },
        {
            "signature": "WINLDAPAPI VOID LDAPAPI ldap_memfreeA( [in] PCHAR Block );",
            "name": "ldap_memfreeA"
        },
        {
            "signature": "WINLDAPAPI VOID LDAPAPI ldap_memfreeW( [in] PWCHAR Block );",
            "name": "ldap_memfreeW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] mods );",
            "name": "ldap_modify"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_ext( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] mods, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_modify_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_ext_s( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] mods, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_modify_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_ext_sA( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] mods, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_modify_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_ext_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] LDAPModW * [] mods, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_modify_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_extA( [in] LDAP *ld, [in] const PSTR dn, [in] LDAPModA * [] mods, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_modify_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_extW( [in] LDAP *ld, [in] const PWSTR dn, [in] LDAPModW * [] mods, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_modify_extW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_s( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] mods );",
            "name": "ldap_modify_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_sA( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] mods );",
            "name": "ldap_modify_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modify_sW( [in] LDAP *ld, [in] PWSTR dn, [in] LDAPModW * [] mods );",
            "name": "ldap_modify_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modifyA( [in] LDAP *ld, [in] PSTR dn, [in] LDAPModA * [] mods );",
            "name": "ldap_modifyA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modifyW( [in] LDAP *ld, [in] PWSTR dn, [in] LDAPModW * [] mods );",
            "name": "ldap_modifyW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [out] const PSTR NewDistinguishedName );",
            "name": "ldap_modrdn"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn_s( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [out] const PSTR NewDistinguishedName );",
            "name": "ldap_modrdn_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn_sA( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [out] const PSTR NewDistinguishedName );",
            "name": "ldap_modrdn_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn_sW( [in] LDAP *ExternalHandle, [in] const PWSTR DistinguishedName, [out] const PWSTR NewDistinguishedName );",
            "name": "ldap_modrdn_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [in] const PSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2_s( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [in] const PSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2_sA( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [in] const PSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2_sW( [in] LDAP *ExternalHandle, [in] const PWSTR DistinguishedName, [in] const PWSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2A( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [in] const PSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2A"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdn2W( [in] LDAP *ExternalHandle, [in] const PWSTR DistinguishedName, [in] const PWSTR NewDistinguishedName, [in] INT DeleteOldRdn );",
            "name": "ldap_modrdn2W"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdnA( [in] LDAP *ExternalHandle, [in] const PSTR DistinguishedName, [out] const PSTR NewDistinguishedName );",
            "name": "ldap_modrdnA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_modrdnW( [in] LDAP *ExternalHandle, [in] const PWSTR DistinguishedName, [out] const PWSTR NewDistinguishedName );",
            "name": "ldap_modrdnW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_msgfree( [in] LDAPMessage *res );",
            "name": "ldap_msgfree"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_next_attribute( [in] LDAP *ld, [in] LDAPMessage *entry, [in, out] BerElement *ptr );",
            "name": "ldap_next_attribute"
        },
        {
            "signature": "WINLDAPAPI PCHAR LDAPAPI ldap_next_attributeA( [in] LDAP *ld, [in] LDAPMessage *entry, [in, out] BerElement *ptr );",
            "name": "ldap_next_attributeA"
        },
        {
            "signature": "WINLDAPAPI PWCHAR LDAPAPI ldap_next_attributeW( [in] LDAP *ld, [in] LDAPMessage *entry, [in, out] BerElement *ptr );",
            "name": "ldap_next_attributeW"
        },
        {
            "signature": "WINLDAPAPI LDAPMessage *LDAPAPI ldap_next_entry( [in] LDAP *ld, [in] LDAPMessage *entry );",
            "name": "ldap_next_entry"
        },
        {
            "signature": "WINLDAPAPI LDAPMessage *LDAPAPI ldap_next_reference( [in] LDAP *ld, [in] LDAPMessage *entry );",
            "name": "ldap_next_reference"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_open( [in] PSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_open"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_openA( [in] const PSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_openA"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_openW( [in] const PWSTR HostName, [in] ULONG PortNumber );",
            "name": "ldap_openW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_extended_resultA( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out] PSTR *ResultOID, [out] berval **ResultData, [in] BOOLEAN Freeit );",
            "name": "ldap_parse_extended_resultA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_extended_resultW( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out] PWSTR *ResultOID, [out] berval **ResultData, [in] BOOLEAN Freeit );",
            "name": "ldap_parse_extended_resultW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_page_control( [in] PLDAP ExternalHandle, [in] PLDAPControlA *ServerControls, [out] ULONG *TotalCount, [out] berval **Cookie );",
            "name": "ldap_parse_page_control"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_page_controlA( [in] PLDAP ExternalHandle, [in] PLDAPControlA *ServerControls, [out] ULONG *TotalCount, [out] berval **Cookie );",
            "name": "ldap_parse_page_controlA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_page_controlW( [in] PLDAP ExternalHandle, [in] PLDAPControlW *ServerControls, [out] ULONG *TotalCount, [out] berval **Cookie );",
            "name": "ldap_parse_page_controlW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_reference( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out] PCHAR **Referrals );",
            "name": "ldap_parse_reference"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_referenceA( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out] PCHAR **Referrals );",
            "name": "ldap_parse_referenceA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_referenceW( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out] PWCHAR **Referrals );",
            "name": "ldap_parse_referenceW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_result( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out, optional] ULONG *ReturnCode, [out, optional] PSTR *MatchedDNs, [out, optional] PSTR *ErrorMessage, [out, optional] PSTR **Referrals, [out, optional] PLDAPControlA **ServerControls, [in] BOOLEAN Freeit );",
            "name": "ldap_parse_result"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_resultA( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out, optional] ULONG *ReturnCode, [out, optional] PSTR *MatchedDNs, [out, optional] PSTR *ErrorMessage, [out, optional] PZPSTR *Referrals, [out, optional] PLDAPControlA **ServerControls, [in] BOOLEAN Freeit );",
            "name": "ldap_parse_resultA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_resultW( [in] LDAP *Connection, [in] LDAPMessage *ResultMessage, [out, optional] ULONG *ReturnCode, [out, optional] PWSTR *MatchedDNs, [out, optional] PWSTR *ErrorMessage, [out, optional] PZPWSTR *Referrals, [out, optional] PLDAPControlW **ServerControls, [in] BOOLEAN Freeit );",
            "name": "ldap_parse_resultW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_sort_control( [in] PLDAP ExternalHandle, [in] PLDAPControlA *Control, [out] ULONG *Result, [out] PCHAR *Attribute );",
            "name": "ldap_parse_sort_control"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_sort_controlA( [in] PLDAP ExternalHandle, [in] PLDAPControlA *Control, [out] ULONG *Result, [out] PCHAR *Attribute );",
            "name": "ldap_parse_sort_controlA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_parse_sort_controlW( [in] PLDAP ExternalHandle, [in] PLDAPControlW *Control, [out] ULONG *Result, [out] PWCHAR *Attribute );",
            "name": "ldap_parse_sort_controlW"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_parse_vlv_controlA( [in] PLDAP ExternalHandle, [in] PLDAPControlA *Control, [out] PULONG TargetPos, [out] PULONG ListCount, [out] PBERVAL *Context, [out] PINT ErrCode );",
            "name": "ldap_parse_vlv_controlA"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_parse_vlv_controlW( [in] PLDAP ExternalHandle, [in] PLDAPControlW *Control, [out] PULONG TargetPos, [out] PULONG ListCount, [out] PBERVAL *Context, [out] PINT ErrCode );",
            "name": "ldap_parse_vlv_controlW"
        },
        {
            "signature": "WINLDAPAPI void LDAPAPI ldap_perror( [in] LDAP *ld, [in] const PCHAR msg );",
            "name": "ldap_perror"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_ext( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR NewRDN, [in] const PSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_rename_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_ext_s( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR NewRDN, [in] const PSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_rename_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_ext_sA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR NewRDN, [in] const PSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_rename_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_ext_sW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR NewRDN, [in] const PWSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_rename_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_extA( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR NewRDN, [in] const PSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_rename_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_rename_extW( [in] LDAP *ld, [in] const PWSTR dn, [in] const PWSTR NewRDN, [in] const PWSTR NewParent, [in] INT DeleteOldRdn, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [out] ULONG *MessageNumber );",
            "name": "ldap_rename_extW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_result( [in] LDAP *ld, [in] ULONG msgid, [in] ULONG all, [in] PLDAP_TIMEVAL timeout, [out] PLDAPMessage *res );",
            "name": "ldap_result"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_result2error( [in] LDAP *ld, [in] LDAPMessage *res, [in] ULONG freeit );",
            "name": "ldap_result2error"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_sasl_bind_sA( [in] LDAP *ExternalHandle, [in] const PSTR DistName, [in] const PSTR AuthMechanism, [in] const BERVAL *cred, [in] PLDAPControlA *ServerCtrls, [in] PLDAPControlA *ClientCtrls, [out] PBERVAL *ServerData );",
            "name": "ldap_sasl_bind_sA"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_sasl_bind_sW( [in] LDAP *ExternalHandle, [in] const PWSTR DistName, [in] const PWSTR AuthMechanism, [in] const BERVAL *cred, [in] PLDAPControlW *ServerCtrls, [in] PLDAPControlW *ClientCtrls, [out] PBERVAL *ServerData );",
            "name": "ldap_sasl_bind_sW"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_sasl_bindA( [in] LDAP *ExternalHandle, [in] const PSTR DistName, [in] const PSTR AuthMechanism, [in] const BERVAL *cred, [in] PLDAPControlA *ServerCtrls, [in] PLDAPControlA *ClientCtrls, [out] int *MessageNumber );",
            "name": "ldap_sasl_bindA"
        },
        {
            "signature": "WINLDAPAPI INT LDAPAPI ldap_sasl_bindW( [in] LDAP *ExternalHandle, [in] const PWSTR DistName, [in] const PWSTR AuthMechanism, [in] const BERVAL *cred, [in] PLDAPControlW *ServerCtrls, [in] PLDAPControlW *ClientCtrls, [out] int *MessageNumber );",
            "name": "ldap_sasl_bindW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search( [in] LDAP *ld, [in] PSTR base, [in] ULONG scope, [in] PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly );",
            "name": "ldap_search"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_abandon_page( [in] PLDAP ExternalHandle, [in] PLDAPSearch SearchBlock );",
            "name": "ldap_search_abandon_page"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_ext( [in] LDAP *ld, [in] PSTR base, [in] ULONG scope, [in] PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [in] ULONG TimeLimit, [in] ULONG SizeLimit, [out] ULONG *MessageNumber );",
            "name": "ldap_search_ext"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_ext_s( [in] LDAP *ld, [in] PSTR base, [in] ULONG scope, [in] PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [in] l_timeval *timeout, [in] ULONG SizeLimit, [out] PLDAPMessage *res );",
            "name": "ldap_search_ext_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_ext_sA( [in] LDAP *ld, [in] const PSTR base, [in] ULONG scope, [in] const PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [in] l_timeval *timeout, [in] ULONG SizeLimit, [out] PLDAPMessage *res );",
            "name": "ldap_search_ext_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_ext_sW( [in] LDAP *ld, [in] const PWSTR base, [in] ULONG scope, [in] const PWSTR filter, [in] PZPWSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [in] l_timeval *timeout, [in] ULONG SizeLimit, [out] PLDAPMessage *res );",
            "name": "ldap_search_ext_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_extA( [in] LDAP *ld, [in] const PSTR base, [in] ULONG scope, [in] const PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [in] ULONG TimeLimit, [in] ULONG SizeLimit, [out] ULONG *MessageNumber );",
            "name": "ldap_search_extA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_extW( [in] LDAP *ld, [in] const PWSTR base, [in] ULONG scope, [in] const PWSTR filter, [in] PZPWSTR attrs, [in] ULONG attrsonly, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [in] ULONG TimeLimit, [in] ULONG SizeLimit, [out] ULONG *MessageNumber );",
            "name": "ldap_search_extW"
        },
        {
            "signature": "WINLDAPAPI PLDAPSearch LDAPAPI ldap_search_init_page( [in] PLDAP ExternalHandle, [in] const PSTR DistinguishedName, [in] ULONG ScopeOfSearch, [in] const PSTR SearchFilter, [in] PZPSTR AttributeList, [in] ULONG AttributesOnly, [in] PLDAPControl *ServerControls, [in] PLDAPControl *ClientControls, [in] ULONG PageTimeLimit, [in] ULONG TotalSizeLimit, [in] PLDAPSortKey *SortKeys );",
            "name": "ldap_search_init_page"
        },
        {
            "signature": "WINLDAPAPI PLDAPSearch LDAPAPI ldap_search_init_pageA( [in] PLDAP ExternalHandle, [in] const PSTR DistinguishedName, [in] ULONG ScopeOfSearch, [in] const PSTR SearchFilter, [in] PZPSTR AttributeList, [in] ULONG AttributesOnly, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls, [in] ULONG PageTimeLimit, [in] ULONG TotalSizeLimit, [in] PLDAPSortKeyA *SortKeys );",
            "name": "ldap_search_init_pageA"
        },
        {
            "signature": "WINLDAPAPI PLDAPSearch LDAPAPI ldap_search_init_pageW( [in] PLDAP ExternalHandle, [in] const PWSTR DistinguishedName, [in] ULONG ScopeOfSearch, [in] const PWSTR SearchFilter, [in] PZPWSTR AttributeList, [in] ULONG AttributesOnly, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls, [in] ULONG PageTimeLimit, [in] ULONG TotalSizeLimit, [in] PLDAPSortKeyW *SortKeys );",
            "name": "ldap_search_init_pageW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_s( [in] LDAP *ld, [in] PSTR base, [in] ULONG scope, [in] PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [out] PLDAPMessage *res );",
            "name": "ldap_search_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_sA( [in] LDAP *ld, [in] const PSTR base, [in] ULONG scope, [in] const PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [out] LDAPMessage **res );",
            "name": "ldap_search_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_st( [in] LDAP *ld, [in] PSTR base, [in] ULONG scope, [in] PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] l_timeval *timeout, [out] PLDAPMessage *res );",
            "name": "ldap_search_st"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_stA( [in] LDAP *ld, [in] const PSTR base, [in] ULONG scope, [in] const PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly, [in] l_timeval *timeout, [out] PLDAPMessage *res );",
            "name": "ldap_search_stA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_stW( [in] LDAP *ld, [in] const PWSTR base, [in] ULONG scope, [in] const PWSTR filter, [in] PZPWSTR attrs, [in] ULONG attrsonly, [in] l_timeval *timeout, [out] PLDAPMessage *res );",
            "name": "ldap_search_stW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_search_sW( [in] LDAP *ld, [in] const PWSTR base, [in] ULONG scope, [in] const PWSTR filter, [in] PZPWSTR attrs, [in] ULONG attrsonly, [out] LDAPMessage **res );",
            "name": "ldap_search_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_searchA( [in] LDAP *ld, [in] const PSTR base, [in] ULONG scope, [in] const PSTR filter, [in] PZPSTR attrs, [in] ULONG attrsonly );",
            "name": "ldap_searchA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_searchW( [in] LDAP *ld, [in] const PWSTR base, [in] ULONG scope, [in] const PWSTR filter, [in] PZPWSTR attrs, [in] ULONG attrsonly );",
            "name": "ldap_searchW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_set_option( [in] LDAP *ld, [in] int option, [in] const void *invalue );",
            "name": "ldap_set_option"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_set_optionW( [in] LDAP *ld, [in] int option, [in] const void *invalue );",
            "name": "ldap_set_optionW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bind( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR passwd );",
            "name": "ldap_simple_bind"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bind_s( [in] LDAP *ld, [in] const PSTR dn, [in] const PSTR passwd );",
            "name": "ldap_simple_bind_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bind_sA( [in] LDAP *ld, [in] PSTR dn, [in] PSTR passwd );",
            "name": "ldap_simple_bind_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bind_sW( [in] LDAP *ld, [in] PWSTR dn, [in] PWSTR passwd );",
            "name": "ldap_simple_bind_sW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bindA( [in] LDAP *ld, [in] PSTR dn, [in] PSTR passwd );",
            "name": "ldap_simple_bindA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_simple_bindW( [in] LDAP *ld, [in] PWSTR dn, [in] PWSTR passwd );",
            "name": "ldap_simple_bindW"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_sslinit( [in] PSTR HostName, [in] ULONG PortNumber, [in] int secure );",
            "name": "ldap_sslinit"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_sslinitA( [in] PSTR HostName, [in] ULONG PortNumber, [in] int secure );",
            "name": "ldap_sslinitA"
        },
        {
            "signature": "WINLDAPAPI LDAP *LDAPAPI ldap_sslinitW( [in] PWSTR HostName, [in] ULONG PortNumber, [in] int secure );",
            "name": "ldap_sslinitW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_start_tls_sA( [in] PLDAP ExternalHandle, [out] PULONG ServerReturnValue, [out] LDAPMessage **result, [in] PLDAPControlA *ServerControls, [in] PLDAPControlA *ClientControls );",
            "name": "ldap_start_tls_sA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_start_tls_sW( [in] PLDAP ExternalHandle, [out] PULONG ServerReturnValue, [out] LDAPMessage **result, [in] PLDAPControlW *ServerControls, [in] PLDAPControlW *ClientControls );",
            "name": "ldap_start_tls_sW"
        },
        {
            "signature": "WINLDAPAPI BOOLEAN LDAPAPI ldap_stop_tls_s( [in] PLDAP ExternalHandle );",
            "name": "ldap_stop_tls_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_ufn2dn( [in] const PSTR ufn, [out] PSTR *pDn );",
            "name": "ldap_ufn2dn"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_ufn2dnA( [in] const PSTR ufn, [out] PSTR *pDn );",
            "name": "ldap_ufn2dnA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_ufn2dnW( [in] const PWSTR ufn, [out] PWSTR *pDn );",
            "name": "ldap_ufn2dnW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_unbind( [in] LDAP *ld );",
            "name": "ldap_unbind"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_unbind_s( [in] LDAP *ld );",
            "name": "ldap_unbind_s"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_value_free( PCHAR *vals );",
            "name": "ldap_value_free"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_value_free_len( [in] berval **vals );",
            "name": "ldap_value_free_len"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_value_freeA( PCHAR *vals );",
            "name": "ldap_value_freeA"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI ldap_value_freeW( PWCHAR *vals );",
            "name": "ldap_value_freeW"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI LdapGetLastError();",
            "name": "LdapGetLastError"
        },
        {
            "signature": "WINLDAPAPI ULONG LDAPAPI LdapMapErrorToWin32( [in] ULONG LdapError );",
            "name": "LdapMapErrorToWin32"
        },
        {
            "signature": "int LDAPAPI LdapUnicodeToUTF8( [in] LPCWSTR lpSrcStr, [in] int cchSrc, [out] LPSTR lpDestStr, [in] int cchDest );",
            "name": "LdapUnicodeToUTF8"
        },
        {
            "signature": "WINLDAPAPI int LDAPAPI LdapUTF8ToUnicode( [in] LPCSTR lpSrcStr, [in] int cchSrc, [out] LPWSTR lpDestStr, [in] int cchDest );",
            "name": "LdapUTF8ToUnicode"
        },
        {
            "signature": "QUERYCLIENTCERT Queryclientcert; BOOLEAN Queryclientcert( [in] PLDAP Connection, [in] PSecPkgContext_IssuerListInfoEx trusted_CAs, [in, out] PCCERT_CONTEXT *ppCertificate ) {...}",
            "name": "QUERYCLIENTCERT callback"
        },
        {
            "signature": "VERIFYSERVERCERT Verifyservercert; BOOLEAN Verifyservercert( PLDAP Connection, PCCERT_CONTEXT *pServerCert ) {...}",
            "name": "VERIFYSERVERCERT callback"
        }
    ],
    "Winml.h": [],
    "Winnetwk.h": [
        {
            "signature": "DWORD MultinetGetConnectionPerformanceA( [in] LPNETRESOURCEA lpNetResource, [out] LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct );",
            "name": "MultinetGetConnectionPerformanceA"
        },
        {
            "signature": "DWORD MultinetGetConnectionPerformanceW( [in] LPNETRESOURCEW lpNetResource, [out] LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct );",
            "name": "MultinetGetConnectionPerformanceW"
        },
        {
            "signature": "DWORD WNetAddConnection2A( [in] LPNETRESOURCEA lpNetResource, [in] LPCSTR lpPassword, [in] LPCSTR lpUserName, [in] DWORD dwFlags );",
            "name": "WNetAddConnection2A"
        },
        {
            "signature": "DWORD WNetAddConnection2W( [in] LPNETRESOURCEW lpNetResource, [in] LPCWSTR lpPassword, [in] LPCWSTR lpUserName, [in] DWORD dwFlags );",
            "name": "WNetAddConnection2W"
        },
        {
            "signature": "DWORD WNetAddConnection3A( [in] HWND hwndOwner, [in] LPNETRESOURCEA lpNetResource, [in] LPCSTR lpPassword, [in] LPCSTR lpUserName, [in] DWORD dwFlags );",
            "name": "WNetAddConnection3A"
        },
        {
            "signature": "DWORD WNetAddConnection3W( [in] HWND hwndOwner, [in] LPNETRESOURCEW lpNetResource, [in] LPCWSTR lpPassword, [in] LPCWSTR lpUserName, [in] DWORD dwFlags );",
            "name": "WNetAddConnection3W"
        },
        {
            "signature": "DWORD WNetAddConnectionA( [in] LPCSTR lpRemoteName, [in] LPCSTR lpPassword, [in] LPCSTR lpLocalName );",
            "name": "WNetAddConnectionA"
        },
        {
            "signature": "DWORD WNetAddConnectionW( [in] LPCWSTR lpRemoteName, [in] LPCWSTR lpPassword, [in] LPCWSTR lpLocalName );",
            "name": "WNetAddConnectionW"
        },
        {
            "signature": "DWORD WNetCancelConnection2A( [in] LPCSTR lpName, [in] DWORD dwFlags, [in] BOOL fForce );",
            "name": "WNetCancelConnection2A"
        },
        {
            "signature": "DWORD WNetCancelConnection2W( [in] LPCWSTR lpName, [in] DWORD dwFlags, [in] BOOL fForce );",
            "name": "WNetCancelConnection2W"
        },
        {
            "signature": "DWORD WNetCancelConnectionA( [in] LPCSTR lpName, [in] BOOL fForce );",
            "name": "WNetCancelConnectionA"
        },
        {
            "signature": "DWORD WNetCancelConnectionW( [in] LPCWSTR lpName, [in] BOOL fForce );",
            "name": "WNetCancelConnectionW"
        },
        {
            "signature": "DWORD WNetCloseEnum( [in] HANDLE hEnum );",
            "name": "WNetCloseEnum"
        },
        {
            "signature": "DWORD WNetConnectionDialog( [in] HWND hwnd, [in] DWORD dwType );",
            "name": "WNetConnectionDialog"
        },
        {
            "signature": "DWORD WNetConnectionDialog1A( [in, out] LPCONNECTDLGSTRUCTA lpConnDlgStruct );",
            "name": "WNetConnectionDialog1A"
        },
        {
            "signature": "DWORD WNetConnectionDialog1W( [in, out] LPCONNECTDLGSTRUCTW lpConnDlgStruct );",
            "name": "WNetConnectionDialog1W"
        },
        {
            "signature": "DWORD WNetDisconnectDialog( [in] HWND hwnd, [in] DWORD dwType );",
            "name": "WNetDisconnectDialog"
        },
        {
            "signature": "DWORD WNetDisconnectDialog1A( [in] LPDISCDLGSTRUCTA lpConnDlgStruct );",
            "name": "WNetDisconnectDialog1A"
        },
        {
            "signature": "DWORD WNetDisconnectDialog1W( [in] LPDISCDLGSTRUCTW lpConnDlgStruct );",
            "name": "WNetDisconnectDialog1W"
        },
        {
            "signature": "DWORD WNetEnumResourceA( [in] HANDLE hEnum, [in, out] LPDWORD lpcCount, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetEnumResourceA"
        },
        {
            "signature": "DWORD WNetEnumResourceW( [in] HANDLE hEnum, [in, out] LPDWORD lpcCount, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetEnumResourceW"
        },
        {
            "signature": "DWORD WNetGetConnectionA( [in] LPCSTR lpLocalName, [out] LPSTR lpRemoteName, [in, out] LPDWORD lpnLength );",
            "name": "WNetGetConnectionA"
        },
        {
            "signature": "DWORD WNetGetConnectionW( [in] LPCWSTR lpLocalName, [out] LPWSTR lpRemoteName, [in, out] LPDWORD lpnLength );",
            "name": "WNetGetConnectionW"
        },
        {
            "signature": "DWORD WNetGetLastErrorA( [out] LPDWORD lpError, [out] LPSTR lpErrorBuf, [in] DWORD nErrorBufSize, [out] LPSTR lpNameBuf, [in] DWORD nNameBufSize );",
            "name": "WNetGetLastErrorA"
        },
        {
            "signature": "DWORD WNetGetLastErrorW( [out] LPDWORD lpError, [out] LPWSTR lpErrorBuf, [in] DWORD nErrorBufSize, [out] LPWSTR lpNameBuf, [in] DWORD nNameBufSize );",
            "name": "WNetGetLastErrorW"
        },
        {
            "signature": "DWORD WNetGetNetworkInformationA( [in] LPCSTR lpProvider, [out] LPNETINFOSTRUCT lpNetInfoStruct );",
            "name": "WNetGetNetworkInformationA"
        },
        {
            "signature": "DWORD WNetGetNetworkInformationW( [in] LPCWSTR lpProvider, [out] LPNETINFOSTRUCT lpNetInfoStruct );",
            "name": "WNetGetNetworkInformationW"
        },
        {
            "signature": "DWORD WNetGetProviderNameA( [in] DWORD dwNetType, [out] LPSTR lpProviderName, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetGetProviderNameA"
        },
        {
            "signature": "DWORD WNetGetProviderNameW( [in] DWORD dwNetType, [out] LPWSTR lpProviderName, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetGetProviderNameW"
        },
        {
            "signature": "DWORD WNetGetResourceInformationA( [in] LPNETRESOURCEA lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpcbBuffer, [out] LPSTR *lplpSystem );",
            "name": "WNetGetResourceInformationA"
        },
        {
            "signature": "DWORD WNetGetResourceInformationW( [in] LPNETRESOURCEW lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpcbBuffer, [out] LPWSTR *lplpSystem );",
            "name": "WNetGetResourceInformationW"
        },
        {
            "signature": "DWORD WNetGetResourceParentA( [in] LPNETRESOURCEA lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpcbBuffer );",
            "name": "WNetGetResourceParentA"
        },
        {
            "signature": "DWORD WNetGetResourceParentW( [in] LPNETRESOURCEW lpNetResource, [out] LPVOID lpBuffer, [in, out] LPDWORD lpcbBuffer );",
            "name": "WNetGetResourceParentW"
        },
        {
            "signature": "DWORD WNetGetUniversalNameA( [in] LPCSTR lpLocalPath, [in] DWORD dwInfoLevel, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetGetUniversalNameA"
        },
        {
            "signature": "DWORD WNetGetUniversalNameW( [in] LPCWSTR lpLocalPath, [in] DWORD dwInfoLevel, [out] LPVOID lpBuffer, [in, out] LPDWORD lpBufferSize );",
            "name": "WNetGetUniversalNameW"
        },
        {
            "signature": "DWORD WNetGetUserA( [in] LPCSTR lpName, [out] LPSTR lpUserName, [in, out] LPDWORD lpnLength );",
            "name": "WNetGetUserA"
        },
        {
            "signature": "DWORD WNetGetUserW( [in] LPCWSTR lpName, [out] LPWSTR lpUserName, [in, out] LPDWORD lpnLength );",
            "name": "WNetGetUserW"
        },
        {
            "signature": "DWORD WNetOpenEnumA( [in] DWORD dwScope, [in] DWORD dwType, [in] DWORD dwUsage, [in] LPNETRESOURCEA lpNetResource, [out] LPHANDLE lphEnum );",
            "name": "WNetOpenEnumA"
        },
        {
            "signature": "DWORD WNetOpenEnumW( [in] DWORD dwScope, [in] DWORD dwType, [in] DWORD dwUsage, [in] LPNETRESOURCEW lpNetResource, [out] LPHANDLE lphEnum );",
            "name": "WNetOpenEnumW"
        },
        {
            "signature": "DWORD WNetRestoreConnectionW( [in] HWND hWnd, [in] LPCWSTR lpDevice );",
            "name": "WNetRestoreConnectionW"
        },
        {
            "signature": "DWORD WNetUseConnectionA( [in] HWND hwndOwner, [in] LPNETRESOURCEA lpNetResource, [in] LPCSTR lpPassword, [in] LPCSTR lpUserId, [in] DWORD dwFlags, [out] LPSTR lpAccessName, [in, out] LPDWORD lpBufferSize, [out] LPDWORD lpResult );",
            "name": "WNetUseConnectionA"
        },
        {
            "signature": "DWORD WNetUseConnectionW( [in] HWND hwndOwner, [in] LPNETRESOURCEW lpNetResource, [in] LPCWSTR lpPassword, [in] LPCWSTR lpUserId, [in] DWORD dwFlags, [out] LPWSTR lpAccessName, [in, out] LPDWORD lpBufferSize, [out] LPDWORD lpResult );",
            "name": "WNetUseConnectionW"
        }
    ],
    "Winnls.h": [
        {
            "signature": "int CompareString( [in] LCID Locale, [in] DWORD dwCmpFlags, [in] LPCTSTR lpString1, [in] int cchCount1, [in] LPCTSTR lpString2, [in] int cchCount2 );",
            "name": "CompareString"
        },
        {
            "signature": "int CompareStringA( [in] LCID Locale, [in] DWORD dwCmpFlags, [in] PCNZCH lpString1, [in] int cchCount1, [in] PCNZCH lpString2, [in] int cchCount2 );",
            "name": "CompareStringA"
        },
        {
            "signature": "LCID ConvertDefaultLocale( [in] LCID Locale );",
            "name": "ConvertDefaultLocale"
        },
        {
            "signature": "BOOL EnumCalendarInfoA( [in] CALINFO_ENUMPROCA lpCalInfoEnumProc, [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType );",
            "name": "EnumCalendarInfoA"
        },
        {
            "signature": "BOOL EnumCalendarInfoExA( [in] CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx, [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType );",
            "name": "EnumCalendarInfoExA"
        },
        {
            "signature": "BOOL EnumCalendarInfoExEx( [in] CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx, [in, optional] LPCWSTR lpLocaleName, [in] CALID Calendar, [in, optional] LPCWSTR lpReserved, [in] CALTYPE CalType, [in] LPARAM lParam );",
            "name": "EnumCalendarInfoExEx"
        },
        {
            "signature": "BOOL EnumCalendarInfoExW( [in] CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx, [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType );",
            "name": "EnumCalendarInfoExW"
        },
        {
            "signature": "BOOL EnumCalendarInfoW( [in] CALINFO_ENUMPROCW lpCalInfoEnumProc, [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType );",
            "name": "EnumCalendarInfoW"
        },
        {
            "signature": "BOOL EnumDateFormatsA( [in] DATEFMT_ENUMPROCA lpDateFmtEnumProc, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumDateFormatsA"
        },
        {
            "signature": "BOOL EnumDateFormatsExA( [in] DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumDateFormatsExA"
        },
        {
            "signature": "BOOL EnumDateFormatsExEx( [in] DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx, [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in] LPARAM lParam );",
            "name": "EnumDateFormatsExEx"
        },
        {
            "signature": "BOOL EnumDateFormatsExW( [in] DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumDateFormatsExW"
        },
        {
            "signature": "BOOL EnumDateFormatsW( [in] DATEFMT_ENUMPROCW lpDateFmtEnumProc, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumDateFormatsW"
        },
        {
            "signature": "BOOL EnumLanguageGroupLocalesA( [in] LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc, [in] LGRPID LanguageGroup, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumLanguageGroupLocalesA"
        },
        {
            "signature": "BOOL EnumLanguageGroupLocalesW( [in] LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc, [in] LGRPID LanguageGroup, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumLanguageGroupLocalesW"
        },
        {
            "signature": "BOOL EnumSystemCodePagesA( [in] CODEPAGE_ENUMPROCA lpCodePageEnumProc, [in] DWORD dwFlags );",
            "name": "EnumSystemCodePagesA"
        },
        {
            "signature": "BOOL EnumSystemCodePagesW( [in] CODEPAGE_ENUMPROCW lpCodePageEnumProc, [in] DWORD dwFlags );",
            "name": "EnumSystemCodePagesW"
        },
        {
            "signature": "BOOL EnumSystemGeoID( [in] GEOCLASS GeoClass, [in] GEOID ParentGeoId, [in] GEO_ENUMPROC lpGeoEnumProc );",
            "name": "EnumSystemGeoID"
        },
        {
            "signature": "BOOL EnumSystemGeoNames( [in] GEOCLASS geoClass, [in] GEO_ENUMNAMEPROC geoEnumProc, [in, optional] LPARAM data );",
            "name": "EnumSystemGeoNames"
        },
        {
            "signature": "BOOL EnumSystemLanguageGroupsA( [in] LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumSystemLanguageGroupsA"
        },
        {
            "signature": "BOOL EnumSystemLanguageGroupsW( [in] LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumSystemLanguageGroupsW"
        },
        {
            "signature": "BOOL EnumSystemLocalesA( [in] LOCALE_ENUMPROCA lpLocaleEnumProc, [in] DWORD dwFlags );",
            "name": "EnumSystemLocalesA"
        },
        {
            "signature": "BOOL EnumSystemLocalesEx( [in] LOCALE_ENUMPROCEX lpLocaleEnumProcEx, [in] DWORD dwFlags, [in] LPARAM lParam, [in, optional] LPVOID lpReserved );",
            "name": "EnumSystemLocalesEx"
        },
        {
            "signature": "BOOL EnumSystemLocalesW( [in] LOCALE_ENUMPROCW lpLocaleEnumProc, [in] DWORD dwFlags );",
            "name": "EnumSystemLocalesW"
        },
        {
            "signature": "BOOL EnumTimeFormatsA( [in] TIMEFMT_ENUMPROCA lpTimeFmtEnumProc, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumTimeFormatsA"
        },
        {
            "signature": "BOOL EnumTimeFormatsEx( [in] TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx, [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in] LPARAM lParam );",
            "name": "EnumTimeFormatsEx"
        },
        {
            "signature": "BOOL EnumTimeFormatsW( [in] TIMEFMT_ENUMPROCW lpTimeFmtEnumProc, [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "EnumTimeFormatsW"
        },
        {
            "signature": "BOOL EnumUILanguagesA( [in] UILANGUAGE_ENUMPROCA lpUILanguageEnumProc, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumUILanguagesA"
        },
        {
            "signature": "BOOL EnumUILanguagesW( [in] UILANGUAGE_ENUMPROCW lpUILanguageEnumProc, [in] DWORD dwFlags, [in] LONG_PTR lParam );",
            "name": "EnumUILanguagesW"
        },
        {
            "signature": "int FindNLSString( [in] LCID Locale, [in] DWORD dwFindNLSStringFlags, [in] LPCWSTR lpStringSource, [in] int cchSource, [in] LPCWSTR lpStringValue, [in] int cchValue, [out, optional] LPINT pcchFound );",
            "name": "FindNLSString"
        },
        {
            "signature": "int FindNLSStringEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFindNLSStringFlags, [in] LPCWSTR lpStringSource, [in] int cchSource, [in] LPCWSTR lpStringValue, [in] int cchValue, [out, optional] LPINT pcchFound, [in, optional] LPNLSVERSIONINFO lpVersionInformation, [in, optional] LPVOID lpReserved, [in, optional] LPARAM sortHandle );",
            "name": "FindNLSStringEx"
        },
        {
            "signature": "int FoldStringA( [in] DWORD dwMapFlags, [in] LPCSTR lpSrcStr, [in] int cchSrc, [out, optional] LPSTR lpDestStr, [in] int cchDest );",
            "name": "FoldStringA"
        },
        {
            "signature": "GEO_ENUMNAMEPROC GeoEnumnameproc; BOOL GeoEnumnameproc( PWSTR unnamedParam1, LPARAM unnamedParam2 ) {...}",
            "name": "GEO_ENUMNAMEPROC callback"
        },
        {
            "signature": "UINT GetACP();",
            "name": "GetACP"
        },
        {
            "signature": "int GetCalendarInfoA( [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType, [out, optional] LPSTR lpCalData, [in] int cchData, [out, optional] LPDWORD lpValue );",
            "name": "GetCalendarInfoA"
        },
        {
            "signature": "int GetCalendarInfoEx( [in, optional] LPCWSTR lpLocaleName, [in] CALID Calendar, [in, optional] LPCWSTR lpReserved, [in] CALTYPE CalType, [out, optional] LPWSTR lpCalData, [in] int cchData, [out, optional] LPDWORD lpValue );",
            "name": "GetCalendarInfoEx"
        },
        {
            "signature": "int GetCalendarInfoW( [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType, [out, optional] LPWSTR lpCalData, [in] int cchData, [out, optional] LPDWORD lpValue );",
            "name": "GetCalendarInfoW"
        },
        {
            "signature": "BOOL GetCPInfo( [in] UINT CodePage, [out] LPCPINFO lpCPInfo );",
            "name": "GetCPInfo"
        },
        {
            "signature": "BOOL GetCPInfoExA( [in] UINT CodePage, [in] DWORD dwFlags, [out] LPCPINFOEXA lpCPInfoEx );",
            "name": "GetCPInfoExA"
        },
        {
            "signature": "BOOL GetCPInfoExW( [in] UINT CodePage, [in] DWORD dwFlags, [out] LPCPINFOEXW lpCPInfoEx );",
            "name": "GetCPInfoExW"
        },
        {
            "signature": "int GetCurrencyFormatA( [in] LCID Locale, [in] DWORD dwFlags, [in] LPCSTR lpValue, [in, optional] const CURRENCYFMTA *lpFormat, [out, optional] LPSTR lpCurrencyStr, [in] int cchCurrency );",
            "name": "GetCurrencyFormatA"
        },
        {
            "signature": "int GetCurrencyFormatEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in] LPCWSTR lpValue, [in, optional] const CURRENCYFMTW *lpFormat, [out, optional] LPWSTR lpCurrencyStr, [in] int cchCurrency );",
            "name": "GetCurrencyFormatEx"
        },
        {
            "signature": "int GetCurrencyFormatW( [in] LCID Locale, [in] DWORD dwFlags, [in] LPCWSTR lpValue, [in, optional] const CURRENCYFMTW *lpFormat, [out, optional] LPWSTR lpCurrencyStr, [in] int cchCurrency );",
            "name": "GetCurrencyFormatW"
        },
        {
            "signature": "int GetDurationFormat( [in] LCID Locale, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpDuration, [in] ULONGLONG ullDuration, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpDurationStr, [in] int cchDuration );",
            "name": "GetDurationFormat"
        },
        {
            "signature": "int GetDurationFormatEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in, optional] const SYSTEMTIME *lpDuration, [in] ULONGLONG ullDuration, [in, optional] LPCWSTR lpFormat, [out, optional] LPWSTR lpDurationStr, [in] int cchDuration );",
            "name": "GetDurationFormatEx"
        },
        {
            "signature": "BOOL GetFileMUIInfo( [in] DWORD dwFlags, [in] PCWSTR pcwszFilePath, [in, out, optional] PFILEMUIINFO pFileMUIInfo, [in, out] DWORD *pcbFileMUIInfo );",
            "name": "GetFileMUIInfo"
        },
        {
            "signature": "BOOL GetFileMUIPath( [in] DWORD dwFlags, [in] PCWSTR pcwszFilePath, [in, out, optional] PWSTR pwszLanguage, [in, out] PULONG pcchLanguage, [out, optional] PWSTR pwszFileMUIPath, [in, out] PULONG pcchFileMUIPath, [in, out] PULONGLONG pululEnumerator );",
            "name": "GetFileMUIPath"
        },
        {
            "signature": "int GetGeoInfoA( [in] GEOID Location, [in] GEOTYPE GeoType, [out, optional] LPSTR lpGeoData, [in] int cchData, [in] LANGID LangId );",
            "name": "GetGeoInfoA"
        },
        {
            "signature": "int GetGeoInfoEx( [in] PWSTR location, [in] GEOTYPE geoType, [out, optional] PWSTR geoData, [in] int geoDataCount );",
            "name": "GetGeoInfoEx"
        },
        {
            "signature": "int GetGeoInfoW( [in] GEOID Location, [in] GEOTYPE GeoType, [out, optional] LPWSTR lpGeoData, [in] int cchData, [in] LANGID LangId );",
            "name": "GetGeoInfoW"
        },
        {
            "signature": "int GetLocaleInfoA( [in] LCID Locale, [in] LCTYPE LCType, [out, optional] LPSTR lpLCData, [in] int cchData );",
            "name": "GetLocaleInfoA"
        },
        {
            "signature": "int GetLocaleInfoEx( [in, optional] LPCWSTR lpLocaleName, [in] LCTYPE LCType, [out, optional] LPWSTR lpLCData, [in] int cchData );",
            "name": "GetLocaleInfoEx"
        },
        {
            "signature": "int GetLocaleInfoW( [in] LCID Locale, [in] LCTYPE LCType, [out, optional] LPWSTR lpLCData, [in] int cchData );",
            "name": "GetLocaleInfoW"
        },
        {
            "signature": "BOOL GetNLSVersion( [in] NLS_FUNCTION Function, [in] LCID Locale, [in, out] LPNLSVERSIONINFO lpVersionInformation );",
            "name": "GetNLSVersion"
        },
        {
            "signature": "BOOL GetNLSVersionEx( [in] NLS_FUNCTION function, [in, optional] LPCWSTR lpLocaleName, [in, out] LPNLSVERSIONINFOEX lpVersionInformation );",
            "name": "GetNLSVersionEx"
        },
        {
            "signature": "int GetNumberFormatA( [in] LCID Locale, [in] DWORD dwFlags, [in] LPCSTR lpValue, [in, optional] const NUMBERFMTA *lpFormat, [out, optional] LPSTR lpNumberStr, [in] int cchNumber );",
            "name": "GetNumberFormatA"
        },
        {
            "signature": "int GetNumberFormatEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwFlags, [in] LPCWSTR lpValue, [in, optional] const NUMBERFMTW *lpFormat, [out, optional] LPWSTR lpNumberStr, [in] int cchNumber );",
            "name": "GetNumberFormatEx"
        },
        {
            "signature": "int GetNumberFormatW( [in] LCID Locale, [in] DWORD dwFlags, [in] LPCWSTR lpValue, [in, optional] const NUMBERFMTW *lpFormat, [out, optional] LPWSTR lpNumberStr, [in] int cchNumber );",
            "name": "GetNumberFormatW"
        },
        {
            "signature": "UINT GetOEMCP();",
            "name": "GetOEMCP"
        },
        {
            "signature": "BOOL GetProcessPreferredUILanguages( [in] DWORD dwFlags, [out] PULONG pulNumLanguages, [out, optional] PZZWSTR pwszLanguagesBuffer, [in, out] PULONG pcchLanguagesBuffer );",
            "name": "GetProcessPreferredUILanguages"
        },
        {
            "signature": "int GetStringScripts( [in] DWORD dwFlags, [in] LPCWSTR lpString, [in] int cchString, [out, optional] LPWSTR lpScripts, [in] int cchScripts );",
            "name": "GetStringScripts"
        },
        {
            "signature": "BOOL GetStringTypeA( [in] LCID Locale, [in] DWORD dwInfoType, [in] LPCSTR lpSrcStr, [in] int cchSrc, [out] LPWORD lpCharType );",
            "name": "GetStringTypeA"
        },
        {
            "signature": "LANGID GetSystemDefaultLangID();",
            "name": "GetSystemDefaultLangID"
        },
        {
            "signature": "LCID GetSystemDefaultLCID();",
            "name": "GetSystemDefaultLCID"
        },
        {
            "signature": "int GetSystemDefaultLocaleName( [out] LPWSTR lpLocaleName, [in] int cchLocaleName );",
            "name": "GetSystemDefaultLocaleName"
        },
        {
            "signature": "LANGID GetSystemDefaultUILanguage();",
            "name": "GetSystemDefaultUILanguage"
        },
        {
            "signature": "BOOL GetSystemPreferredUILanguages( [in] DWORD dwFlags, [out] PULONG pulNumLanguages, [out, optional] PZZWSTR pwszLanguagesBuffer, [in, out] PULONG pcchLanguagesBuffer );",
            "name": "GetSystemPreferredUILanguages"
        },
        {
            "signature": "LCID GetThreadLocale();",
            "name": "GetThreadLocale"
        },
        {
            "signature": "BOOL GetThreadPreferredUILanguages( [in] DWORD dwFlags, [out] PULONG pulNumLanguages, [out, optional] PZZWSTR pwszLanguagesBuffer, [in, out] PULONG pcchLanguagesBuffer );",
            "name": "GetThreadPreferredUILanguages"
        },
        {
            "signature": "LANGID GetThreadUILanguage();",
            "name": "GetThreadUILanguage"
        },
        {
            "signature": "BOOL GetUILanguageInfo( [in] DWORD dwFlags, [in] PCZZWSTR pwmszLanguage, [out, optional] PZZWSTR pwszFallbackLanguages, [in, out, optional] PDWORD pcchFallbackLanguages, [out] PDWORD pAttributes );",
            "name": "GetUILanguageInfo"
        },
        {
            "signature": "int GetUserDefaultGeoName( [out] LPWSTR geoName, [in] int geoNameCount );",
            "name": "GetUserDefaultGeoName"
        },
        {
            "signature": "LANGID GetUserDefaultLangID();",
            "name": "GetUserDefaultLangID"
        },
        {
            "signature": "LCID GetUserDefaultLCID();",
            "name": "GetUserDefaultLCID"
        },
        {
            "signature": "int GetUserDefaultLocaleName( [out] LPWSTR lpLocaleName, [in] int cchLocaleName );",
            "name": "GetUserDefaultLocaleName"
        },
        {
            "signature": "LANGID GetUserDefaultUILanguage();",
            "name": "GetUserDefaultUILanguage"
        },
        {
            "signature": "GEOID GetUserGeoID( [in] GEOCLASS GeoClass );",
            "name": "GetUserGeoID"
        },
        {
            "signature": "BOOL GetUserPreferredUILanguages( [in] DWORD dwFlags, [out] PULONG pulNumLanguages, [out, optional] PZZWSTR pwszLanguagesBuffer, [in, out] PULONG pcchLanguagesBuffer );",
            "name": "GetUserPreferredUILanguages"
        },
        {
            "signature": "int IdnToAscii( [in] DWORD dwFlags, [in] LPCWSTR lpUnicodeCharStr, [in] int cchUnicodeChar, [out, optional] LPWSTR lpASCIICharStr, [in] int cchASCIIChar );",
            "name": "IdnToAscii"
        },
        {
            "signature": "int IdnToNameprepUnicode( [in] DWORD dwFlags, [in] LPCWSTR lpUnicodeCharStr, [in] int cchUnicodeChar, [out, optional] LPWSTR lpNameprepCharStr, [in] int cchNameprepChar );",
            "name": "IdnToNameprepUnicode"
        },
        {
            "signature": "int IdnToUnicode( [in] DWORD dwFlags, [in] LPCWSTR lpASCIICharStr, [in] int cchASCIIChar, [out, optional] LPWSTR lpUnicodeCharStr, [in] int cchUnicodeChar );",
            "name": "IdnToUnicode"
        },
        {
            "signature": "BOOL IsDBCSLeadByte( [in] BYTE TestChar );",
            "name": "IsDBCSLeadByte"
        },
        {
            "signature": "BOOL IsDBCSLeadByteEx( [in] UINT CodePage, [in] BYTE TestChar );",
            "name": "IsDBCSLeadByteEx"
        },
        {
            "signature": "BOOL IsNLSDefinedString( [in] NLS_FUNCTION Function, [in] DWORD dwFlags, [in] LPNLSVERSIONINFO lpVersionInformation, [in] LPCWSTR lpString, [in] INT cchStr );",
            "name": "IsNLSDefinedString"
        },
        {
            "signature": "BOOL IsNormalizedString( [in] NORM_FORM NormForm, [in] LPCWSTR lpString, [in] int cwLength );",
            "name": "IsNormalizedString"
        },
        {
            "signature": "BOOL IsValidCodePage( [in] UINT CodePage );",
            "name": "IsValidCodePage"
        },
        {
            "signature": "BOOL IsValidLanguageGroup( [in] LGRPID LanguageGroup, [in] DWORD dwFlags );",
            "name": "IsValidLanguageGroup"
        },
        {
            "signature": "BOOL IsValidLocale( [in] LCID Locale, [in] DWORD dwFlags );",
            "name": "IsValidLocale"
        },
        {
            "signature": "BOOL IsValidLocaleName( [in] LPCWSTR lpLocaleName );",
            "name": "IsValidLocaleName"
        },
        {
            "signature": "DWORD IsValidNLSVersion( [in] NLS_FUNCTION function, [in, optional] LPCWSTR lpLocaleName, [in] LPNLSVERSIONINFOEX lpVersionInformation );",
            "name": "IsValidNLSVersion"
        },
        {
            "signature": "LANGGROUPLOCALE_ENUMPROCA LanggrouplocaleEnumproca; BOOL LanggrouplocaleEnumproca( LGRPID unnamedParam1, LCID unnamedParam2, LPSTR unnamedParam3, LONG_PTR unnamedParam4 ) {...}",
            "name": "LANGGROUPLOCALE_ENUMPROCA callback"
        },
        {
            "signature": "LANGGROUPLOCALE_ENUMPROCW LanggrouplocaleEnumprocw; BOOL LanggrouplocaleEnumprocw( LGRPID unnamedParam1, LCID unnamedParam2, LPWSTR unnamedParam3, LONG_PTR unnamedParam4 ) {...}",
            "name": "LANGGROUPLOCALE_ENUMPROCW callback"
        },
        {
            "signature": "int LCIDToLocaleName( [in] LCID Locale, [out, optional] LPWSTR lpName, [in] int cchName, [in] DWORD dwFlags );",
            "name": "LCIDToLocaleName"
        },
        {
            "signature": "int LCMapStringA( [in] LCID Locale, [in] DWORD dwMapFlags, [in] LPCSTR lpSrcStr, [in] int cchSrc, [out, optional] LPSTR lpDestStr, [in] int cchDest );",
            "name": "LCMapStringA"
        },
        {
            "signature": "int LCMapStringEx( [in, optional] LPCWSTR lpLocaleName, [in] DWORD dwMapFlags, [in] LPCWSTR lpSrcStr, [in] int cchSrc, [out, optional] LPWSTR lpDestStr, [in] int cchDest, [in, optional] LPNLSVERSIONINFO lpVersionInformation, [in, optional] LPVOID lpReserved, [in, optional] LPARAM sortHandle );",
            "name": "LCMapStringEx"
        },
        {
            "signature": "int LCMapStringW( [in] LCID Locale, [in] DWORD dwMapFlags, [in] LPCWSTR lpSrcStr, [in] int cchSrc, [out, optional] LPWSTR lpDestStr, [in] int cchDest );",
            "name": "LCMapStringW"
        },
        {
            "signature": "BOOL LoadStringByReference( [in] DWORD Flags, [in, optional] PCWSTR Language, [in] PCWSTR SourceString, [out, optional] PWSTR Buffer, [in] ULONG cchBuffer, [in, optional] PCWSTR Directory, [out, optional] PULONG pcchBufferOut );",
            "name": "LoadStringByReference"
        },
        {
            "signature": "LOCALE_ENUMPROCEX LocaleEnumprocex; BOOL LocaleEnumprocex( LPWSTR unnamedParam1, DWORD unnamedParam2, LPARAM unnamedParam3 ) {...}",
            "name": "LOCALE_ENUMPROCEX callback"
        },
        {
            "signature": "LCID LocaleNameToLCID( [in] LPCWSTR lpName, [in] DWORD dwFlags );",
            "name": "LocaleNameToLCID"
        },
        {
            "signature": "int NormalizeString( [in] NORM_FORM NormForm, [in] LPCWSTR lpSrcString, [in] int cwSrcLength, [out, optional] LPWSTR lpDstString, [in] int cwDstLength );",
            "name": "NormalizeString"
        },
        {
            "signature": "BOOL NotifyUILanguageChange( [in] DWORD dwFlags, [in, optional] PCWSTR pcwstrNewLanguage, [in, optional] PCWSTR pcwstrPreviousLanguage, [in] DWORD dwReserved, [out, optional] PDWORD pdwStatusRtrn );",
            "name": "NotifyUILanguageChange"
        },
        {
            "signature": "int ResolveLocaleName( [in, optional] LPCWSTR lpNameToResolve, [out, optional] LPWSTR lpLocaleName, [in] int cchLocaleName );",
            "name": "ResolveLocaleName"
        },
        {
            "signature": "BOOL SetCalendarInfoA( [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType, [in] LPCSTR lpCalData );",
            "name": "SetCalendarInfoA"
        },
        {
            "signature": "BOOL SetCalendarInfoW( [in] LCID Locale, [in] CALID Calendar, [in] CALTYPE CalType, [in] LPCWSTR lpCalData );",
            "name": "SetCalendarInfoW"
        },
        {
            "signature": "BOOL SetLocaleInfoA( [in] LCID Locale, [in] LCTYPE LCType, [in] LPCSTR lpLCData );",
            "name": "SetLocaleInfoA"
        },
        {
            "signature": "BOOL SetLocaleInfoW( [in] LCID Locale, [in] LCTYPE LCType, [in] LPCWSTR lpLCData );",
            "name": "SetLocaleInfoW"
        },
        {
            "signature": "BOOL SetProcessPreferredUILanguages( [in] DWORD dwFlags, [in, optional] PCZZWSTR pwszLanguagesBuffer, [out, optional] PULONG pulNumLanguages );",
            "name": "SetProcessPreferredUILanguages"
        },
        {
            "signature": "BOOL SetThreadLocale( [in] LCID Locale );",
            "name": "SetThreadLocale"
        },
        {
            "signature": "BOOL SetThreadPreferredUILanguages( [in] DWORD dwFlags, [in, optional] PCZZWSTR pwszLanguagesBuffer, [out, optional] PULONG pulNumLanguages );",
            "name": "SetThreadPreferredUILanguages"
        },
        {
            "signature": "LANGID SetThreadUILanguage( [in] LANGID LangId );",
            "name": "SetThreadUILanguage"
        },
        {
            "signature": "BOOL SetUserGeoID( [in] GEOID GeoId );",
            "name": "SetUserGeoID"
        },
        {
            "signature": "BOOL SetUserGeoName( [in] PWSTR geoName );",
            "name": "SetUserGeoName"
        },
        {
            "signature": "UILANGUAGE_ENUMPROCA UilanguageEnumproca; BOOL UilanguageEnumproca( LPSTR unnamedParam1, LONG_PTR unnamedParam2 ) {...}",
            "name": "UILANGUAGE_ENUMPROCA callback"
        },
        {
            "signature": "UILANGUAGE_ENUMPROCW UilanguageEnumprocw; BOOL UilanguageEnumprocw( LPWSTR unnamedParam1, LONG_PTR unnamedParam2 ) {...}",
            "name": "UILANGUAGE_ENUMPROCW callback"
        },
        {
            "signature": "BOOL VerifyScripts( [in] DWORD dwFlags, [in] LPCWSTR lpLocaleScripts, [in] int cchLocaleScripts, [in] LPCWSTR lpTestScripts, [in] int cchTestScripts );",
            "name": "VerifyScripts"
        }
    ],
    "Winnls32.h": [
        {
            "signature": "BOOL WINNLSEnableIME( HWND unnamedParam1, BOOL unnamedParam2 );",
            "name": "WINNLSEnableIME"
        }
    ],
    "Winnt.h": [
        {
            "signature": "LONG _InlineInterlockedAdd( [in, out] LONG volatile *Addend, [in] LONG Value );",
            "name": "_InlineInterlockedAdd"
        },
        {
            "signature": "LONG64 _InlineInterlockedAdd64( [in, out] LONG64 volatile *Addend, [in] LONG64 Value );",
            "name": "_InlineInterlockedAdd64"
        },
        {
            "signature": "BOOLEAN _interlockedbittestandreset( [in] LONG volatile *Base, [in] LONG Offset );",
            "name": "_interlockedbittestandreset"
        },
        {
            "signature": "BOOLEAN _interlockedbittestandreset64( [in] LONG64 volatile *Base, [in] LONG64 Offset );",
            "name": "_interlockedbittestandreset64"
        },
        {
            "signature": "BOOLEAN _interlockedbittestandset( [in] LONG volatile *Base, [in] LONG Offset );",
            "name": "_interlockedbittestandset"
        },
        {
            "signature": "BOOLEAN _interlockedbittestandset64( [in] LONG64 volatile *Base, [in] LONG64 Offset );",
            "name": "_interlockedbittestandset64"
        },
        {
            "signature": "PVOID GetCurrentFiber();",
            "name": "GetCurrentFiber"
        },
        {
            "signature": "PVOID GetFiberData();",
            "name": "GetFiberData"
        },
        {
            "signature": "LONG InterlockedAdd( [in, out] LONG volatile *Addend, [in] LONG Value );",
            "name": "InterlockedAdd"
        },
        {
            "signature": "LONG InterlockedAnd( [in, out] LONG volatile *Destination, [in] LONG Value );",
            "name": "InterlockedAnd"
        },
        {
            "signature": "SHORT InterlockedAnd16( [in, out] SHORT volatile *Destination, [in] SHORT Value );",
            "name": "InterlockedAnd16"
        },
        {
            "signature": "LONG64 InterlockedAnd64( [in, out] LONG64 volatile *Destination, [in] LONG64 Value );",
            "name": "InterlockedAnd64"
        },
        {
            "signature": "char InterlockedAnd8( [in, out] char volatile *Destination, [in] char Value );",
            "name": "InterlockedAnd8"
        },
        {
            "signature": "LONG InterlockedCompareExchange( [in, out] LONG volatile *Destination, [in] LONG ExChange, [in] LONG Comperand );",
            "name": "InterlockedCompareExchange"
        },
        {
            "signature": "BOOLEAN InterlockedCompareExchange128( [in, out] LONG64 volatile *Destination, [in] LONG64 ExchangeHigh, [in] LONG64 ExchangeLow, [in, out] LONG64 *ComparandResult );",
            "name": "InterlockedCompareExchange128"
        },
        {
            "signature": "SHORT InterlockedCompareExchange16( [in, out] SHORT volatile *Destination, [in] SHORT ExChange, [in] SHORT Comperand );",
            "name": "InterlockedCompareExchange16"
        },
        {
            "signature": "LONG64 InterlockedCompareExchange64( [in, out] LONG64 volatile *Destination, [in] LONG64 ExChange, [in] LONG64 Comperand );",
            "name": "InterlockedCompareExchange64"
        },
        {
            "signature": "PVOID InterlockedCompareExchangePointer( [in, out] PVOID volatile *Destination, [in] PVOID Exchange, [in] PVOID Comperand );",
            "name": "InterlockedCompareExchangePointer"
        },
        {
            "signature": "LONG InterlockedDecrement( [in, out] LONG volatile *Addend );",
            "name": "InterlockedDecrement"
        },
        {
            "signature": "SHORT InterlockedDecrement16( [in, out] SHORT volatile *Addend );",
            "name": "InterlockedDecrement16"
        },
        {
            "signature": "LONG64 InterlockedDecrement64( [in, out] LONG64 volatile *Addend );",
            "name": "InterlockedDecrement64"
        },
        {
            "signature": "LONG InterlockedExchange( [in, out] LONG volatile *Target, [in] LONG Value );",
            "name": "InterlockedExchange"
        },
        {
            "signature": "SHORT InterlockedExchange16( [in, out] SHORT volatile *Destination, [in] SHORT ExChange );",
            "name": "InterlockedExchange16"
        },
        {
            "signature": "LONG64 InterlockedExchange64( [in, out] LONG64 volatile *Target, [in] LONG64 Value );",
            "name": "InterlockedExchange64"
        },
        {
            "signature": "CHAR InterlockedExchange8( [in, out] CHAR volatile *Target, [in] CHAR Value );",
            "name": "InterlockedExchange8"
        },
        {
            "signature": "LONG InterlockedExchangeAdd( [in, out] LONG volatile *Addend, [in] LONG Value );",
            "name": "InterlockedExchangeAdd"
        },
        {
            "signature": "LONG64 InterlockedExchangeAdd64( [in, out] LONG64 volatile *Addend, [in] LONG64 Value );",
            "name": "InterlockedExchangeAdd64"
        },
        {
            "signature": "PVOID InterlockedExchangePointer( [in, out] PVOID volatile *Target, [in] PVOID Value );",
            "name": "InterlockedExchangePointer"
        },
        {
            "signature": "LONG InterlockedIncrement( [in, out] LONG volatile *Addend );",
            "name": "InterlockedIncrement"
        },
        {
            "signature": "SHORT InterlockedIncrement16( [in, out] SHORT volatile *Addend );",
            "name": "InterlockedIncrement16"
        },
        {
            "signature": "LONG64 InterlockedIncrement64( [in, out] LONG64 volatile *Addend );",
            "name": "InterlockedIncrement64"
        },
        {
            "signature": "LONG InterlockedOr( [in, out] LONG volatile *Destination, [in] LONG Value );",
            "name": "InterlockedOr"
        },
        {
            "signature": "SHORT InterlockedOr16( [in, out] SHORT volatile *Destination, [in] SHORT Value );",
            "name": "InterlockedOr16"
        },
        {
            "signature": "LONG64 InterlockedOr64( [in, out] LONG64 volatile *Destination, [in] LONG64 Value );",
            "name": "InterlockedOr64"
        },
        {
            "signature": "char InterlockedOr8( [in, out] char volatile *Destination, [in] char Value );",
            "name": "InterlockedOr8"
        },
        {
            "signature": "LONG InterlockedXor( [in, out] LONG volatile *Destination, [in] LONG Value );",
            "name": "InterlockedXor"
        },
        {
            "signature": "SHORT InterlockedXor16( [in, out] SHORT volatile *Destination, [in] SHORT Value );",
            "name": "InterlockedXor16"
        },
        {
            "signature": "LONG64 InterlockedXor64( [in, out] LONG64 volatile *Destination, [in] LONG64 Value );",
            "name": "InterlockedXor64"
        },
        {
            "signature": "char InterlockedXor8( [in, out] char volatile *Destination, [in] char Value );",
            "name": "InterlockedXor8"
        },
        {
            "signature": "void MemoryBarrier();",
            "name": "MemoryBarrier"
        },
        {
            "signature": "LONG64 Multiply128( [in] LONG64 Multiplier, [in] LONG64 Multiplicand, [out] LONG64 *HighProduct );",
            "name": "Multiply128"
        },
        {
            "signature": "LONG64 MultiplyExtract128( [in] LONG64 Multiplier, [in] LONG64 Multiplicand, [in] BYTE Shift );",
            "name": "MultiplyExtract128"
        },
        {
            "signature": "LONGLONG MultiplyHigh( [in] LONG64 Multiplier, [in] LONG64 Multiplicand );",
            "name": "MultiplyHigh"
        },
        {
            "signature": "_TEB * NtCurrentTeb();",
            "name": "NtCurrentTeb"
        },
        {
            "signature": "PAPCFUNC Papcfunc; void Papcfunc( [in] ULONG_PTR Parameter ) {...}",
            "name": "PAPCFUNC callback"
        },
        {
            "signature": "PFLS_CALLBACK_FUNCTION PflsCallbackFunction; void PflsCallbackFunction( [in] PVOID lpFlsData ) {...}",
            "name": "PFLS_CALLBACK_FUNCTION callback"
        },
        {
            "signature": "DWORD64 PopulationCount64( [in] DWORD64 operand );",
            "name": "PopulationCount64"
        },
        {
            "signature": "PSECURE_MEMORY_CACHE_CALLBACK PsecureMemoryCacheCallback; BOOLEAN PsecureMemoryCacheCallback( [in] PVOID Addr, [in] SIZE_T Range ) {...}",
            "name": "PSECURE_MEMORY_CACHE_CALLBACK callback"
        },
        {
            "signature": "PTP_CLEANUP_GROUP_CANCEL_CALLBACK PtpCleanupGroupCancelCallback; void PtpCleanupGroupCancelCallback( [in, out, optional] PVOID ObjectContext, [in, out, optional] PVOID CleanupContext ) {...}",
            "name": "PTP_CLEANUP_GROUP_CANCEL_CALLBACK callback"
        },
        {
            "signature": "PVECTORED_EXCEPTION_HANDLER PvectoredExceptionHandler; LONG PvectoredExceptionHandler( [in] _EXCEPTION_POINTERS *ExceptionInfo ) {...}",
            "name": "PVECTORED_EXCEPTION_HANDLER callback"
        },
        {
            "signature": "RTL_UMS_SCHEDULER_ENTRY_POINT RtlUmsSchedulerEntryPoint; void RtlUmsSchedulerEntryPoint( [in] RTL_UMS_SCHEDULER_REASON Reason, [in] ULONG_PTR ActivationPayload, [in] PVOID SchedulerParam ) {...}",
            "name": "RTL_UMS_SCHEDULER_ENTRY_POINT callback"
        },
        {
            "signature": "NTSYSAPI BOOLEAN RtlAddFunctionTable( [in] PRUNTIME_FUNCTION FunctionTable, [in] DWORD EntryCount, [in] DWORD64 BaseAddress );",
            "name": "RtlAddFunctionTable"
        },
        {
            "signature": "NTSYSAPI DWORD RtlAddGrowableFunctionTable( [out] PVOID *DynamicTable, PRUNTIME_FUNCTION FunctionTable, [in] DWORD EntryCount, [in] DWORD MaximumEntryCount, [in] ULONG_PTR RangeBase, [in] ULONG_PTR RangeEnd );",
            "name": "RtlAddGrowableFunctionTable"
        },
        {
            "signature": "NTSYSAPI VOID RtlCaptureContext( [out] PCONTEXT ContextRecord );",
            "name": "RtlCaptureContext"
        },
        {
            "signature": "NTSYSAPI WORD RtlCaptureStackBackTrace( [in] DWORD FramesToSkip, [in] DWORD FramesToCapture, [out] PVOID *BackTrace, [out, optional] PDWORD BackTraceHash );",
            "name": "RtlCaptureStackBackTrace"
        },
        {
            "signature": "NTSYSAPI BOOLEAN RtlDeleteFunctionTable( [in] PRUNTIME_FUNCTION FunctionTable );",
            "name": "RtlDeleteFunctionTable"
        },
        {
            "signature": "NTSYSAPI VOID RtlDeleteGrowableFunctionTable( [in] PVOID DynamicTable );",
            "name": "RtlDeleteGrowableFunctionTable"
        },
        {
            "signature": "NTSYSAPI PSLIST_ENTRY RtlFirstEntrySList( [in] const SLIST_HEADER *ListHead );",
            "name": "RtlFirstEntrySList"
        },
        {
            "signature": "NTSYSAPI VOID RtlGrowFunctionTable( PVOID DynamicTable, [in] DWORD NewEntryCount );",
            "name": "RtlGrowFunctionTable"
        },
        {
            "signature": "NTSYSAPI VOID RtlInitializeSListHead( [in] PSLIST_HEADER ListHead );",
            "name": "RtlInitializeSListHead"
        },
        {
            "signature": "NTSYSAPI BOOLEAN RtlInstallFunctionTableCallback( [in] DWORD64 TableIdentifier, [in] DWORD64 BaseAddress, [in] DWORD Length, [in] PGET_RUNTIME_FUNCTION_CALLBACK Callback, [in] PVOID Context, [in] PCWSTR OutOfProcessCallbackDll );",
            "name": "RtlInstallFunctionTableCallback"
        },
        {
            "signature": "NTSYSAPI PSLIST_ENTRY RtlInterlockedFlushSList( [in] PSLIST_HEADER ListHead );",
            "name": "RtlInterlockedFlushSList"
        },
        {
            "signature": "NTSYSAPI PSLIST_ENTRY RtlInterlockedPopEntrySList( [in] PSLIST_HEADER ListHead );",
            "name": "RtlInterlockedPopEntrySList"
        },
        {
            "signature": "NTSYSAPI PSLIST_ENTRY RtlInterlockedPushEntrySList( [in] PSLIST_HEADER ListHead, [in] __drv_aliasesMem PSLIST_ENTRY ListEntry );",
            "name": "RtlInterlockedPushEntrySList"
        },
        {
            "signature": "NTSYSAPI PRUNTIME_FUNCTION RtlLookupFunctionEntry( [in] DWORD64 ControlPc, [out] PDWORD64 ImageBase, [out] PUNWIND_HISTORY_TABLE HistoryTable );",
            "name": "RtlLookupFunctionEntry"
        },
        {
            "signature": "NTSYSAPI PVOID RtlPcToFileHeader( [in] PVOID PcValue, [out] PVOID *BaseOfImage );",
            "name": "RtlPcToFileHeader"
        },
        {
            "signature": "NTSYSAPI WORD RtlQueryDepthSList( [in] PSLIST_HEADER ListHead );",
            "name": "RtlQueryDepthSList"
        },
        {
            "signature": "NTSYSAPI VOID __cdecl RtlRestoreContext( PCONTEXT ContextRecord, _EXCEPTION_RECORD *ExceptionRecord );",
            "name": "RtlRestoreContext"
        },
        {
            "signature": "NTSYSAPI VOID RtlUnwind( [in, optional] PVOID TargetFrame, [in, optional] PVOID TargetIp, [in, optional] PEXCEPTION_RECORD ExceptionRecord, [in] PVOID ReturnValue );",
            "name": "RtlUnwind"
        },
        {
            "signature": "NTSYSAPI VOID RtlUnwind2( [in, optional] FRAME_POINTERS TargetFrame, [in, optional] PVOID TargetIp, [in, optional] PEXCEPTION_RECORD ExceptionRecord, [in] PVOID ReturnValue, [in] PCONTEXT ContextRecord );",
            "name": "RtlUnwind2"
        },
        {
            "signature": "NTSYSAPI VOID RtlUnwindEx( [in, optional] PVOID TargetFrame, [in, optional] PVOID TargetIp, [in, optional] PEXCEPTION_RECORD ExceptionRecord, [in] PVOID ReturnValue, [in] PCONTEXT ContextRecord, [in, optional] PUNWIND_HISTORY_TABLE HistoryTable );",
            "name": "RtlUnwindEx"
        },
        {
            "signature": "NTSYSAPI PEXCEPTION_ROUTINE RtlVirtualUnwind( [in] DWORD HandlerType, [in] DWORD64 ImageBase, [in] DWORD64 ControlPc, [in] PRUNTIME_FUNCTION FunctionEntry, [in, out] PCONTEXT ContextRecord, [out] PVOID *HandlerData, [out] PDWORD64 EstablisherFrame, [in, out, optional] PKNONVOLATILE_CONTEXT_POINTERS ContextPointers );",
            "name": "RtlVirtualUnwind"
        },
        {
            "signature": "DWORD64 ShiftLeft128( DWORD64 LowPart, DWORD64 HighPart, BYTE Shift );",
            "name": "ShiftLeft128"
        },
        {
            "signature": "DWORD64 ShiftRight128( DWORD64 LowPart, DWORD64 HighPart, BYTE Shift );",
            "name": "ShiftRight128"
        },
        {
            "signature": "void TpDestroyCallbackEnviron( [in] PTP_CALLBACK_ENVIRON CallbackEnviron );",
            "name": "TpDestroyCallbackEnviron"
        },
        {
            "signature": "void TpInitializeCallbackEnviron( [out] PTP_CALLBACK_ENVIRON CallbackEnviron );",
            "name": "TpInitializeCallbackEnviron"
        },
        {
            "signature": "void TpSetCallbackActivationContext( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in, optional] _ACTIVATION_CONTEXT *ActivationContext );",
            "name": "TpSetCallbackActivationContext"
        },
        {
            "signature": "void TpSetCallbackCleanupGroup( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in] PTP_CLEANUP_GROUP CleanupGroup, [in, optional] PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback );",
            "name": "TpSetCallbackCleanupGroup"
        },
        {
            "signature": "void TpSetCallbackFinalizationCallback( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in] PTP_SIMPLE_CALLBACK FinalizationCallback );",
            "name": "TpSetCallbackFinalizationCallback"
        },
        {
            "signature": "void TpSetCallbackLongFunction( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron );",
            "name": "TpSetCallbackLongFunction"
        },
        {
            "signature": "void TpSetCallbackNoActivationContext( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron );",
            "name": "TpSetCallbackNoActivationContext"
        },
        {
            "signature": "void TpSetCallbackPersistent( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron );",
            "name": "TpSetCallbackPersistent"
        },
        {
            "signature": "void TpSetCallbackPriority( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in] TP_CALLBACK_PRIORITY Priority );",
            "name": "TpSetCallbackPriority"
        },
        {
            "signature": "void TpSetCallbackRaceWithDll( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in] PVOID DllHandle );",
            "name": "TpSetCallbackRaceWithDll"
        },
        {
            "signature": "void TpSetCallbackThreadpool( [in, out] PTP_CALLBACK_ENVIRON CallbackEnviron, [in] PTP_POOL Pool );",
            "name": "TpSetCallbackThreadpool"
        },
        {
            "signature": "DWORD64 UnsignedMultiply128( [in] DWORD64 Multiplier, [in] DWORD64 Multiplicand, [out] DWORD64 *HighProduct );",
            "name": "UnsignedMultiply128"
        },
        {
            "signature": "DWORD64 UnsignedMultiplyExtract128( [in] DWORD64 Multiplier, [in] DWORD64 Multiplicand, [in] BYTE Shift );",
            "name": "UnsignedMultiplyExtract128"
        },
        {
            "signature": "ULONGLONG UnsignedMultiplyHigh( [in] DWORD64 Multiplier, [in] DWORD64 Multiplicand );",
            "name": "UnsignedMultiplyHigh"
        },
        {
            "signature": "NTSYSAPI ULONGLONG VerSetConditionMask( [in] ULONGLONG ConditionMask, [in] DWORD TypeMask, [in] BYTE Condition );",
            "name": "VerSetConditionMask"
        },
        {
            "signature": "void YieldProcessor();",
            "name": "YieldProcessor"
        }
    ],
    "Winperf.h": [
        {
            "signature": "PM_CLOSE_PROC PmCloseProc; DWORD PmCloseProc() {...}",
            "name": "PM_CLOSE_PROC callback"
        },
        {
            "signature": "PM_COLLECT_PROC PmCollectProc; DWORD PmCollectProc( LPWSTR pValueName, void **ppData, DWORD *pcbTotalBytes, DWORD *pNumObjectTypes ) {...}",
            "name": "PM_COLLECT_PROC callback"
        }
    ],
    "Winreg.h": [
        {
            "signature": "BOOL AbortSystemShutdownA( [in, optional] LPSTR lpMachineName );",
            "name": "AbortSystemShutdownA"
        },
        {
            "signature": "BOOL AbortSystemShutdownW( [in, optional] LPWSTR lpMachineName );",
            "name": "AbortSystemShutdownW"
        },
        {
            "signature": "DWORD InitiateShutdownA( [in, optional] LPSTR lpMachineName, [in, optional] LPSTR lpMessage, [in] DWORD dwGracePeriod, [in] DWORD dwShutdownFlags, [in] DWORD dwReason );",
            "name": "InitiateShutdownA"
        },
        {
            "signature": "DWORD InitiateShutdownW( [in, optional] LPWSTR lpMachineName, [in, optional] LPWSTR lpMessage, [in] DWORD dwGracePeriod, [in] DWORD dwShutdownFlags, [in] DWORD dwReason );",
            "name": "InitiateShutdownW"
        },
        {
            "signature": "BOOL InitiateSystemShutdownA( [in, optional] LPSTR lpMachineName, [in, optional] LPSTR lpMessage, [in] DWORD dwTimeout, [in] BOOL bForceAppsClosed, [in] BOOL bRebootAfterShutdown );",
            "name": "InitiateSystemShutdownA"
        },
        {
            "signature": "BOOL InitiateSystemShutdownExA( [in, optional] LPSTR lpMachineName, [in, optional] LPSTR lpMessage, [in] DWORD dwTimeout, [in] BOOL bForceAppsClosed, [in] BOOL bRebootAfterShutdown, [in] DWORD dwReason );",
            "name": "InitiateSystemShutdownExA"
        },
        {
            "signature": "BOOL InitiateSystemShutdownExW( [in, optional] LPWSTR lpMachineName, [in, optional] LPWSTR lpMessage, [in] DWORD dwTimeout, [in] BOOL bForceAppsClosed, [in] BOOL bRebootAfterShutdown, [in] DWORD dwReason );",
            "name": "InitiateSystemShutdownExW"
        },
        {
            "signature": "BOOL InitiateSystemShutdownW( [in, optional] LPWSTR lpMachineName, [in, optional] LPWSTR lpMessage, [in] DWORD dwTimeout, [in] BOOL bForceAppsClosed, [in] BOOL bRebootAfterShutdown );",
            "name": "InitiateSystemShutdownW"
        },
        {
            "signature": "LSTATUS RegCloseKey( [in] HKEY hKey );",
            "name": "RegCloseKey"
        },
        {
            "signature": "LSTATUS RegConnectRegistryA( [in, optional] LPCSTR lpMachineName, [in] HKEY hKey, [out] PHKEY phkResult );",
            "name": "RegConnectRegistryA"
        },
        {
            "signature": "LSTATUS RegConnectRegistryW( [in, optional] LPCWSTR lpMachineName, [in] HKEY hKey, [out] PHKEY phkResult );",
            "name": "RegConnectRegistryW"
        },
        {
            "signature": "LSTATUS RegCopyTreeA( [in] HKEY hKeySrc, [in, optional] LPCSTR lpSubKey, [in] HKEY hKeyDest );",
            "name": "RegCopyTreeA"
        },
        {
            "signature": "LSTATUS RegCopyTreeW( [in] HKEY hKeySrc, [in, optional] LPCWSTR lpSubKey, [in] HKEY hKeyDest );",
            "name": "RegCopyTreeW"
        },
        {
            "signature": "LSTATUS RegCreateKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [out] PHKEY phkResult );",
            "name": "RegCreateKeyA"
        },
        {
            "signature": "LSTATUS RegCreateKeyExA( [in] HKEY hKey, [in] LPCSTR lpSubKey, DWORD Reserved, [in, optional] LPSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition );",
            "name": "RegCreateKeyExA"
        },
        {
            "signature": "LSTATUS RegCreateKeyExW( [in] HKEY hKey, [in] LPCWSTR lpSubKey, DWORD Reserved, [in, optional] LPWSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition );",
            "name": "RegCreateKeyExW"
        },
        {
            "signature": "LSTATUS RegCreateKeyTransactedA( [in] HKEY hKey, [in] LPCSTR lpSubKey, DWORD Reserved, [in, optional] LPSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition, [in] HANDLE hTransaction, PVOID pExtendedParemeter );",
            "name": "RegCreateKeyTransactedA"
        },
        {
            "signature": "LSTATUS RegCreateKeyTransactedW( [in] HKEY hKey, [in] LPCWSTR lpSubKey, DWORD Reserved, [in, optional] LPWSTR lpClass, [in] DWORD dwOptions, [in] REGSAM samDesired, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [out] PHKEY phkResult, [out, optional] LPDWORD lpdwDisposition, [in] HANDLE hTransaction, PVOID pExtendedParemeter );",
            "name": "RegCreateKeyTransactedW"
        },
        {
            "signature": "LSTATUS RegCreateKeyW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [out] PHKEY phkResult );",
            "name": "RegCreateKeyW"
        },
        {
            "signature": "LSTATUS RegDeleteKeyA( [in] HKEY hKey, [in] LPCSTR lpSubKey );",
            "name": "RegDeleteKeyA"
        },
        {
            "signature": "LSTATUS RegDeleteKeyExA( [in] HKEY hKey, [in] LPCSTR lpSubKey, [in] REGSAM samDesired, DWORD Reserved );",
            "name": "RegDeleteKeyExA"
        },
        {
            "signature": "LSTATUS RegDeleteKeyExW( [in] HKEY hKey, [in] LPCWSTR lpSubKey, [in] REGSAM samDesired, DWORD Reserved );",
            "name": "RegDeleteKeyExW"
        },
        {
            "signature": "LSTATUS RegDeleteKeyTransactedA( [in] HKEY hKey, [in] LPCSTR lpSubKey, [in] REGSAM samDesired, DWORD Reserved, [in] HANDLE hTransaction, PVOID pExtendedParameter );",
            "name": "RegDeleteKeyTransactedA"
        },
        {
            "signature": "LSTATUS RegDeleteKeyTransactedW( [in] HKEY hKey, [in] LPCWSTR lpSubKey, [in] REGSAM samDesired, DWORD Reserved, [in] HANDLE hTransaction, PVOID pExtendedParameter );",
            "name": "RegDeleteKeyTransactedW"
        },
        {
            "signature": "LSTATUS RegDeleteKeyValueA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in, optional] LPCSTR lpValueName );",
            "name": "RegDeleteKeyValueA"
        },
        {
            "signature": "LSTATUS RegDeleteKeyValueW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in, optional] LPCWSTR lpValueName );",
            "name": "RegDeleteKeyValueW"
        },
        {
            "signature": "LSTATUS RegDeleteKeyW( [in] HKEY hKey, [in] LPCWSTR lpSubKey );",
            "name": "RegDeleteKeyW"
        },
        {
            "signature": "LSTATUS RegDeleteTreeA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey );",
            "name": "RegDeleteTreeA"
        },
        {
            "signature": "LSTATUS RegDeleteTreeW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey );",
            "name": "RegDeleteTreeW"
        },
        {
            "signature": "LSTATUS RegDeleteValueA( [in] HKEY hKey, [in, optional] LPCSTR lpValueName );",
            "name": "RegDeleteValueA"
        },
        {
            "signature": "LSTATUS RegDeleteValueW( [in] HKEY hKey, [in, optional] LPCWSTR lpValueName );",
            "name": "RegDeleteValueW"
        },
        {
            "signature": "LSTATUS RegDisablePredefinedCache();",
            "name": "RegDisablePredefinedCache"
        },
        {
            "signature": "LSTATUS RegDisablePredefinedCacheEx();",
            "name": "RegDisablePredefinedCacheEx"
        },
        {
            "signature": "LONG RegDisableReflectionKey( [in] HKEY hBase );",
            "name": "RegDisableReflectionKey"
        },
        {
            "signature": "LONG RegEnableReflectionKey( [in] HKEY hBase );",
            "name": "RegEnableReflectionKey"
        },
        {
            "signature": "LSTATUS RegEnumKeyA( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPSTR lpName, [in] DWORD cchName );",
            "name": "RegEnumKeyA"
        },
        {
            "signature": "LSTATUS RegEnumKeyExA( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPSTR lpName, [in, out] LPDWORD lpcchName, LPDWORD lpReserved, [in, out] LPSTR lpClass, [in, out, optional] LPDWORD lpcchClass, [out, optional] PFILETIME lpftLastWriteTime );",
            "name": "RegEnumKeyExA"
        },
        {
            "signature": "LSTATUS RegEnumKeyExW( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPWSTR lpName, [in, out] LPDWORD lpcchName, LPDWORD lpReserved, [in, out] LPWSTR lpClass, [in, out, optional] LPDWORD lpcchClass, [out, optional] PFILETIME lpftLastWriteTime );",
            "name": "RegEnumKeyExW"
        },
        {
            "signature": "LSTATUS RegEnumKeyW( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPWSTR lpName, [in] DWORD cchName );",
            "name": "RegEnumKeyW"
        },
        {
            "signature": "LSTATUS RegEnumValueA( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPSTR lpValueName, [in, out] LPDWORD lpcchValueName, LPDWORD lpReserved, [out, optional] LPDWORD lpType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "RegEnumValueA"
        },
        {
            "signature": "LSTATUS RegEnumValueW( [in] HKEY hKey, [in] DWORD dwIndex, [out] LPWSTR lpValueName, [in, out] LPDWORD lpcchValueName, LPDWORD lpReserved, [out, optional] LPDWORD lpType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "RegEnumValueW"
        },
        {
            "signature": "LSTATUS RegFlushKey( [in] HKEY hKey );",
            "name": "RegFlushKey"
        },
        {
            "signature": "LSTATUS RegGetKeySecurity( [in] HKEY hKey, [in] SECURITY_INFORMATION SecurityInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in, out] LPDWORD lpcbSecurityDescriptor );",
            "name": "RegGetKeySecurity"
        },
        {
            "signature": "LSTATUS RegGetValueA( [in] HKEY hkey, [in, optional] LPCSTR lpSubKey, [in, optional] LPCSTR lpValue, [in, optional] DWORD dwFlags, [out, optional] LPDWORD pdwType, [out, optional] PVOID pvData, [in, out, optional] LPDWORD pcbData );",
            "name": "RegGetValueA"
        },
        {
            "signature": "LSTATUS RegGetValueW( [in] HKEY hkey, [in, optional] LPCWSTR lpSubKey, [in, optional] LPCWSTR lpValue, [in, optional] DWORD dwFlags, [out, optional] LPDWORD pdwType, [out, optional] PVOID pvData, [in, out, optional] LPDWORD pcbData );",
            "name": "RegGetValueW"
        },
        {
            "signature": "LSTATUS RegLoadAppKeyA( [in] LPCSTR lpFile, [out] PHKEY phkResult, [in] REGSAM samDesired, [in] DWORD dwOptions, DWORD Reserved );",
            "name": "RegLoadAppKeyA"
        },
        {
            "signature": "LSTATUS RegLoadAppKeyW( [in] LPCWSTR lpFile, [out] PHKEY phkResult, [in] REGSAM samDesired, [in] DWORD dwOptions, DWORD Reserved );",
            "name": "RegLoadAppKeyW"
        },
        {
            "signature": "LSTATUS RegLoadKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in] LPCSTR lpFile );",
            "name": "RegLoadKeyA"
        },
        {
            "signature": "LSTATUS RegLoadKeyW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in] LPCWSTR lpFile );",
            "name": "RegLoadKeyW"
        },
        {
            "signature": "LSTATUS RegLoadMUIStringA( [in] HKEY hKey, [in, optional] LPCSTR pszValue, [out, optional] LPSTR pszOutBuf, [in] DWORD cbOutBuf, [out, optional] LPDWORD pcbData, [in] DWORD Flags, [in, optional] LPCSTR pszDirectory );",
            "name": "RegLoadMUIStringA"
        },
        {
            "signature": "LSTATUS RegLoadMUIStringW( [in] HKEY hKey, [in, optional] LPCWSTR pszValue, [out, optional] LPWSTR pszOutBuf, [in] DWORD cbOutBuf, [out, optional] LPDWORD pcbData, [in] DWORD Flags, [in, optional] LPCWSTR pszDirectory );",
            "name": "RegLoadMUIStringW"
        },
        {
            "signature": "LSTATUS RegNotifyChangeKeyValue( [in] HKEY hKey, [in] BOOL bWatchSubtree, [in] DWORD dwNotifyFilter, [in, optional] HANDLE hEvent, [in] BOOL fAsynchronous );",
            "name": "RegNotifyChangeKeyValue"
        },
        {
            "signature": "LSTATUS RegOpenCurrentUser( [in] REGSAM samDesired, [out] PHKEY phkResult );",
            "name": "RegOpenCurrentUser"
        },
        {
            "signature": "LSTATUS RegOpenKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [out] PHKEY phkResult );",
            "name": "RegOpenKeyA"
        },
        {
            "signature": "LSTATUS RegOpenKeyExA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in] DWORD ulOptions, [in] REGSAM samDesired, [out] PHKEY phkResult );",
            "name": "RegOpenKeyExA"
        },
        {
            "signature": "LSTATUS RegOpenKeyExW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in] DWORD ulOptions, [in] REGSAM samDesired, [out] PHKEY phkResult );",
            "name": "RegOpenKeyExW"
        },
        {
            "signature": "LSTATUS RegOpenKeyTransactedA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in] DWORD ulOptions, [in] REGSAM samDesired, [out] PHKEY phkResult, [in] HANDLE hTransaction, PVOID pExtendedParemeter );",
            "name": "RegOpenKeyTransactedA"
        },
        {
            "signature": "LSTATUS RegOpenKeyTransactedW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in] DWORD ulOptions, [in] REGSAM samDesired, [out] PHKEY phkResult, [in] HANDLE hTransaction, PVOID pExtendedParemeter );",
            "name": "RegOpenKeyTransactedW"
        },
        {
            "signature": "LSTATUS RegOpenKeyW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [out] PHKEY phkResult );",
            "name": "RegOpenKeyW"
        },
        {
            "signature": "LSTATUS RegOpenUserClassesRoot( [in] HANDLE hToken, DWORD dwOptions, [in] REGSAM samDesired, [out] PHKEY phkResult );",
            "name": "RegOpenUserClassesRoot"
        },
        {
            "signature": "LSTATUS RegOverridePredefKey( [in] HKEY hKey, [in, optional] HKEY hNewHKey );",
            "name": "RegOverridePredefKey"
        },
        {
            "signature": "LSTATUS RegQueryInfoKeyA( [in] HKEY hKey, [out, optional] LPSTR lpClass, [in, out, optional] LPDWORD lpcchClass, LPDWORD lpReserved, [out, optional] LPDWORD lpcSubKeys, [out, optional] LPDWORD lpcbMaxSubKeyLen, [out, optional] LPDWORD lpcbMaxClassLen, [out, optional] LPDWORD lpcValues, [out, optional] LPDWORD lpcbMaxValueNameLen, [out, optional] LPDWORD lpcbMaxValueLen, [out, optional] LPDWORD lpcbSecurityDescriptor, [out, optional] PFILETIME lpftLastWriteTime );",
            "name": "RegQueryInfoKeyA"
        },
        {
            "signature": "LSTATUS RegQueryInfoKeyW( [in] HKEY hKey, [out, optional] LPWSTR lpClass, [in, out, optional] LPDWORD lpcchClass, LPDWORD lpReserved, [out, optional] LPDWORD lpcSubKeys, [out, optional] LPDWORD lpcbMaxSubKeyLen, [out, optional] LPDWORD lpcbMaxClassLen, [out, optional] LPDWORD lpcValues, [out, optional] LPDWORD lpcbMaxValueNameLen, [out, optional] LPDWORD lpcbMaxValueLen, [out, optional] LPDWORD lpcbSecurityDescriptor, [out, optional] PFILETIME lpftLastWriteTime );",
            "name": "RegQueryInfoKeyW"
        },
        {
            "signature": "LSTATUS RegQueryMultipleValuesA( [in] HKEY hKey, [out] PVALENTA val_list, [in] DWORD num_vals, [out, optional] LPSTR lpValueBuf, [in, out, optional] LPDWORD ldwTotsize );",
            "name": "RegQueryMultipleValuesA"
        },
        {
            "signature": "LSTATUS RegQueryMultipleValuesW( [in] HKEY hKey, [out] PVALENTW val_list, [in] DWORD num_vals, [out, optional] LPWSTR lpValueBuf, [in, out, optional] LPDWORD ldwTotsize );",
            "name": "RegQueryMultipleValuesW"
        },
        {
            "signature": "LONG RegQueryReflectionKey( [in] HKEY hBase, [out] BOOL *bIsReflectionDisabled );",
            "name": "RegQueryReflectionKey"
        },
        {
            "signature": "LSTATUS RegQueryValueA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [out, optional] LPSTR lpData, [in, out, optional] PLONG lpcbData );",
            "name": "RegQueryValueA"
        },
        {
            "signature": "LSTATUS RegQueryValueExA( [in] HKEY hKey, [in, optional] LPCSTR lpValueName, LPDWORD lpReserved, [out, optional] LPDWORD lpType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "RegQueryValueExA"
        },
        {
            "signature": "LSTATUS RegQueryValueExW( [in] HKEY hKey, [in, optional] LPCWSTR lpValueName, LPDWORD lpReserved, [out, optional] LPDWORD lpType, [out, optional] LPBYTE lpData, [in, out, optional] LPDWORD lpcbData );",
            "name": "RegQueryValueExW"
        },
        {
            "signature": "LSTATUS RegQueryValueW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [out, optional] LPWSTR lpData, [in, out, optional] PLONG lpcbData );",
            "name": "RegQueryValueW"
        },
        {
            "signature": "LSTATUS RegRenameKey( HKEY hKey, LPCWSTR lpSubKeyName, LPCWSTR lpNewKeyName );",
            "name": "RegRenameKey"
        },
        {
            "signature": "LSTATUS RegReplaceKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in] LPCSTR lpNewFile, [in] LPCSTR lpOldFile );",
            "name": "RegReplaceKeyA"
        },
        {
            "signature": "LSTATUS RegReplaceKeyW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in] LPCWSTR lpNewFile, [in] LPCWSTR lpOldFile );",
            "name": "RegReplaceKeyW"
        },
        {
            "signature": "LSTATUS RegRestoreKeyA( [in] HKEY hKey, [in] LPCSTR lpFile, [in] DWORD dwFlags );",
            "name": "RegRestoreKeyA"
        },
        {
            "signature": "LSTATUS RegRestoreKeyW( [in] HKEY hKey, [in] LPCWSTR lpFile, [in] DWORD dwFlags );",
            "name": "RegRestoreKeyW"
        },
        {
            "signature": "LSTATUS RegSaveKeyA( [in] HKEY hKey, [in] LPCSTR lpFile, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "RegSaveKeyA"
        },
        {
            "signature": "LSTATUS RegSaveKeyExA( [in] HKEY hKey, [in] LPCSTR lpFile, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD Flags );",
            "name": "RegSaveKeyExA"
        },
        {
            "signature": "LSTATUS RegSaveKeyExW( [in] HKEY hKey, [in] LPCWSTR lpFile, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes, [in] DWORD Flags );",
            "name": "RegSaveKeyExW"
        },
        {
            "signature": "LSTATUS RegSaveKeyW( [in] HKEY hKey, [in] LPCWSTR lpFile, [in, optional] const LPSECURITY_ATTRIBUTES lpSecurityAttributes );",
            "name": "RegSaveKeyW"
        },
        {
            "signature": "LSTATUS RegSetKeySecurity( [in] HKEY hKey, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "RegSetKeySecurity"
        },
        {
            "signature": "LSTATUS RegSetKeyValueA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in, optional] LPCSTR lpValueName, [in] DWORD dwType, [in, optional] LPCVOID lpData, [in] DWORD cbData );",
            "name": "RegSetKeyValueA"
        },
        {
            "signature": "LSTATUS RegSetKeyValueW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in, optional] LPCWSTR lpValueName, [in] DWORD dwType, [in, optional] LPCVOID lpData, [in] DWORD cbData );",
            "name": "RegSetKeyValueW"
        },
        {
            "signature": "LSTATUS RegSetValueA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey, [in] DWORD dwType, [in] LPCSTR lpData, [in] DWORD cbData );",
            "name": "RegSetValueA"
        },
        {
            "signature": "LSTATUS RegSetValueExA( [in] HKEY hKey, [in, optional] LPCSTR lpValueName, DWORD Reserved, [in] DWORD dwType, [in] const BYTE *lpData, [in] DWORD cbData );",
            "name": "RegSetValueExA"
        },
        {
            "signature": "LSTATUS RegSetValueExW( [in] HKEY hKey, [in, optional] LPCWSTR lpValueName, DWORD Reserved, [in] DWORD dwType, [in] const BYTE *lpData, [in] DWORD cbData );",
            "name": "RegSetValueExW"
        },
        {
            "signature": "LSTATUS RegSetValueW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey, [in] DWORD dwType, [in] LPCWSTR lpData, [in] DWORD cbData );",
            "name": "RegSetValueW"
        },
        {
            "signature": "LSTATUS RegUnLoadKeyA( [in] HKEY hKey, [in, optional] LPCSTR lpSubKey );",
            "name": "RegUnLoadKeyA"
        },
        {
            "signature": "LSTATUS RegUnLoadKeyW( [in] HKEY hKey, [in, optional] LPCWSTR lpSubKey );",
            "name": "RegUnLoadKeyW"
        }
    ],
    "Winsafer.h": [
        {
            "signature": "BOOL SaferCloseLevel( [in] SAFER_LEVEL_HANDLE hLevelHandle );",
            "name": "SaferCloseLevel"
        },
        {
            "signature": "BOOL SaferComputeTokenFromLevel( [in] SAFER_LEVEL_HANDLE LevelHandle, [in, optional] HANDLE InAccessToken, [out] PHANDLE OutAccessToken, [in] DWORD dwFlags, [in, out, optional] LPVOID lpReserved );",
            "name": "SaferComputeTokenFromLevel"
        },
        {
            "signature": "BOOL SaferCreateLevel( [in] DWORD dwScopeId, [in] DWORD dwLevelId, [in] DWORD OpenFlags, [out] SAFER_LEVEL_HANDLE *pLevelHandle, LPVOID lpReserved );",
            "name": "SaferCreateLevel"
        },
        {
            "signature": "BOOL SaferGetLevelInformation( [in] SAFER_LEVEL_HANDLE LevelHandle, [in] SAFER_OBJECT_INFO_CLASS dwInfoType, [out, optional] LPVOID lpQueryBuffer, [in] DWORD dwInBufferSize, [out] LPDWORD lpdwOutBufferSize );",
            "name": "SaferGetLevelInformation"
        },
        {
            "signature": "BOOL SaferGetPolicyInformation( [in] DWORD dwScopeId, [in] SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, [in] DWORD InfoBufferSize, [out] PVOID InfoBuffer, [out] PDWORD InfoBufferRetSize, LPVOID lpReserved );",
            "name": "SaferGetPolicyInformation"
        },
        {
            "signature": "BOOL SaferIdentifyLevel( [in] DWORD dwNumProperties, [in, optional] PSAFER_CODE_PROPERTIES pCodeProperties, [out] SAFER_LEVEL_HANDLE *pLevelHandle, LPVOID lpReserved );",
            "name": "SaferIdentifyLevel"
        },
        {
            "signature": "BOOL SaferiIsExecutableFileType( [in] LPCWSTR szFullPathname, [in] BOOLEAN bFromShellExecute );",
            "name": "SaferiIsExecutableFileType"
        },
        {
            "signature": "BOOL SaferRecordEventLogEntry( [in] SAFER_LEVEL_HANDLE hLevel, [in] LPCWSTR szTargetPath, LPVOID lpReserved );",
            "name": "SaferRecordEventLogEntry"
        },
        {
            "signature": "BOOL SaferSetLevelInformation( [in] SAFER_LEVEL_HANDLE LevelHandle, [in] SAFER_OBJECT_INFO_CLASS dwInfoType, [in] LPVOID lpQueryBuffer, [in] DWORD dwInBufferSize );",
            "name": "SaferSetLevelInformation"
        },
        {
            "signature": "BOOL SaferSetPolicyInformation( [in] DWORD dwScopeId, [in] SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass, [in] DWORD InfoBufferSize, [in] PVOID InfoBuffer, LPVOID lpReserved );",
            "name": "SaferSetPolicyInformation"
        }
    ],
    "Winsatcominterfacei.h": [],
    "Winscard.h": [
        {
            "signature": "LONG GetOpenCardNameA( [in] LPOPENCARDNAMEA unnamedParam1 );",
            "name": "GetOpenCardNameA"
        },
        {
            "signature": "LONG GetOpenCardNameW( [in] LPOPENCARDNAMEW unnamedParam1 );",
            "name": "GetOpenCardNameW"
        },
        {
            "signature": "HANDLE SCardAccessStartedEvent();",
            "name": "SCardAccessStartedEvent"
        },
        {
            "signature": "LONG SCardAddReaderToGroupA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [in] LPCSTR szGroupName );",
            "name": "SCardAddReaderToGroupA"
        },
        {
            "signature": "LONG SCardAddReaderToGroupW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [in] LPCWSTR szGroupName );",
            "name": "SCardAddReaderToGroupW"
        },
        {
            "signature": "LONG SCardAudit( [in] SCARDCONTEXT hContext, [in] DWORD dwEvent );",
            "name": "SCardAudit"
        },
        {
            "signature": "LONG SCardBeginTransaction( [in] SCARDHANDLE hCard );",
            "name": "SCardBeginTransaction"
        },
        {
            "signature": "LONG SCardCancel( [in] SCARDCONTEXT hContext );",
            "name": "SCardCancel"
        },
        {
            "signature": "LONG SCardConnectA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReader, [in] DWORD dwShareMode, [in] DWORD dwPreferredProtocols, [out] LPSCARDHANDLE phCard, [out] LPDWORD pdwActiveProtocol );",
            "name": "SCardConnectA"
        },
        {
            "signature": "LONG SCardConnectW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReader, [in] DWORD dwShareMode, [in] DWORD dwPreferredProtocols, [out] LPSCARDHANDLE phCard, [out] LPDWORD pdwActiveProtocol );",
            "name": "SCardConnectW"
        },
        {
            "signature": "LONG SCardControl( [in] SCARDHANDLE hCard, [in] DWORD dwControlCode, [in] LPCVOID lpInBuffer, [in] DWORD cbInBufferSize, [out] LPVOID lpOutBuffer, [in] DWORD cbOutBufferSize, [out] LPDWORD lpBytesReturned );",
            "name": "SCardControl"
        },
        {
            "signature": "LONG SCardDisconnect( [in] SCARDHANDLE hCard, [in] DWORD dwDisposition );",
            "name": "SCardDisconnect"
        },
        {
            "signature": "LONG SCardEndTransaction( [in] SCARDHANDLE hCard, [in] DWORD dwDisposition );",
            "name": "SCardEndTransaction"
        },
        {
            "signature": "LONG SCardEstablishContext( [in] DWORD dwScope, [in] LPCVOID pvReserved1, [in] LPCVOID pvReserved2, [out] LPSCARDCONTEXT phContext );",
            "name": "SCardEstablishContext"
        },
        {
            "signature": "LONG SCardForgetCardTypeA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCardName );",
            "name": "SCardForgetCardTypeA"
        },
        {
            "signature": "LONG SCardForgetCardTypeW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCardName );",
            "name": "SCardForgetCardTypeW"
        },
        {
            "signature": "LONG SCardForgetReaderA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName );",
            "name": "SCardForgetReaderA"
        },
        {
            "signature": "LONG SCardForgetReaderGroupA( [in] SCARDCONTEXT hContext, [in] LPCSTR szGroupName );",
            "name": "SCardForgetReaderGroupA"
        },
        {
            "signature": "LONG SCardForgetReaderGroupW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szGroupName );",
            "name": "SCardForgetReaderGroupW"
        },
        {
            "signature": "LONG SCardForgetReaderW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName );",
            "name": "SCardForgetReaderW"
        },
        {
            "signature": "LONG SCardFreeMemory( [in] SCARDCONTEXT hContext, [in] LPCVOID pvMem );",
            "name": "SCardFreeMemory"
        },
        {
            "signature": "LONG SCardGetAttrib( [in] SCARDHANDLE hCard, [in] DWORD dwAttrId, [out] LPBYTE pbAttr, [in, out] LPDWORD pcbAttrLen );",
            "name": "SCardGetAttrib"
        },
        {
            "signature": "LONG SCardGetCardTypeProviderNameA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCardName, [in] DWORD dwProviderId, [out] CHAR *szProvider, [in, out] LPDWORD pcchProvider );",
            "name": "SCardGetCardTypeProviderNameA"
        },
        {
            "signature": "LONG SCardGetCardTypeProviderNameW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCardName, [in] DWORD dwProviderId, [out] WCHAR *szProvider, [in, out] LPDWORD pcchProvider );",
            "name": "SCardGetCardTypeProviderNameW"
        },
        {
            "signature": "LONG SCardGetDeviceTypeIdA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [in, out] LPDWORD pdwDeviceTypeId );",
            "name": "SCardGetDeviceTypeIdA"
        },
        {
            "signature": "LONG SCardGetDeviceTypeIdW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [in, out] LPDWORD pdwDeviceTypeId );",
            "name": "SCardGetDeviceTypeIdW"
        },
        {
            "signature": "LONG SCardGetProviderIdA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCard, [out] LPGUID pguidProviderId );",
            "name": "SCardGetProviderIdA"
        },
        {
            "signature": "LONG SCardGetProviderIdW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCard, [out] LPGUID pguidProviderId );",
            "name": "SCardGetProviderIdW"
        },
        {
            "signature": "LONG SCardGetReaderDeviceInstanceIdA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [out, optional] LPSTR szDeviceInstanceId, [in, out] LPDWORD pcchDeviceInstanceId );",
            "name": "SCardGetReaderDeviceInstanceIdA"
        },
        {
            "signature": "LONG SCardGetReaderDeviceInstanceIdW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [out, optional] LPWSTR szDeviceInstanceId, [in, out] LPDWORD pcchDeviceInstanceId );",
            "name": "SCardGetReaderDeviceInstanceIdW"
        },
        {
            "signature": "LONG SCardGetReaderIconA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [out] LPBYTE pbIcon, [in, out] LPDWORD pcbIcon );",
            "name": "SCardGetReaderIconA"
        },
        {
            "signature": "LONG SCardGetReaderIconW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [out] LPBYTE pbIcon, [in, out] LPDWORD pcbIcon );",
            "name": "SCardGetReaderIconW"
        },
        {
            "signature": "LONG SCardGetStatusChangeA( [in] SCARDCONTEXT hContext, [in] DWORD dwTimeout, [in, out] LPSCARD_READERSTATEA rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardGetStatusChangeA"
        },
        {
            "signature": "LONG SCardGetStatusChangeW( [in] SCARDCONTEXT hContext, [in] DWORD dwTimeout, [in, out] LPSCARD_READERSTATEW rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardGetStatusChangeW"
        },
        {
            "signature": "LONG SCardGetTransmitCount( [in] SCARDHANDLE hCard, [out] LPDWORD pcTransmitCount );",
            "name": "SCardGetTransmitCount"
        },
        {
            "signature": "LONG SCardIntroduceCardTypeA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCardName, [in, optional] LPCGUID pguidPrimaryProvider, [in, optional] LPCGUID rgguidInterfaces, [in] DWORD dwInterfaceCount, [in] LPCBYTE pbAtr, [in] LPCBYTE pbAtrMask, [in] DWORD cbAtrLen );",
            "name": "SCardIntroduceCardTypeA"
        },
        {
            "signature": "LONG SCardIntroduceCardTypeW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCardName, [in, optional] LPCGUID pguidPrimaryProvider, [in, optional] LPCGUID rgguidInterfaces, [in] DWORD dwInterfaceCount, [in] LPCBYTE pbAtr, [in] LPCBYTE pbAtrMask, [in] DWORD cbAtrLen );",
            "name": "SCardIntroduceCardTypeW"
        },
        {
            "signature": "LONG SCardIntroduceReaderA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [in] LPCSTR szDeviceName );",
            "name": "SCardIntroduceReaderA"
        },
        {
            "signature": "LONG SCardIntroduceReaderGroupA( [in] SCARDCONTEXT hContext, [in] LPCSTR szGroupName );",
            "name": "SCardIntroduceReaderGroupA"
        },
        {
            "signature": "LONG SCardIntroduceReaderGroupW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szGroupName );",
            "name": "SCardIntroduceReaderGroupW"
        },
        {
            "signature": "LONG SCardIntroduceReaderW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [in] LPCWSTR szDeviceName );",
            "name": "SCardIntroduceReaderW"
        },
        {
            "signature": "LONG SCardIsValidContext( [in] SCARDCONTEXT hContext );",
            "name": "SCardIsValidContext"
        },
        {
            "signature": "LONG SCardListCardsA( [in] SCARDCONTEXT hContext, [in, optional] LPCBYTE pbAtr, [in] LPCGUID rgquidInterfaces, [in] DWORD cguidInterfaceCount, [out] CHAR *mszCards, [in, out] LPDWORD pcchCards );",
            "name": "SCardListCardsA"
        },
        {
            "signature": "LONG SCardListCardsW( [in] SCARDCONTEXT hContext, [in, optional] LPCBYTE pbAtr, [in] LPCGUID rgquidInterfaces, [in] DWORD cguidInterfaceCount, [out] WCHAR *mszCards, [in, out] LPDWORD pcchCards );",
            "name": "SCardListCardsW"
        },
        {
            "signature": "LONG SCardListInterfacesA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCard, [out] LPGUID pguidInterfaces, [in, out] LPDWORD pcguidInterfaces );",
            "name": "SCardListInterfacesA"
        },
        {
            "signature": "LONG SCardListInterfacesW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCard, [out] LPGUID pguidInterfaces, [in, out] LPDWORD pcguidInterfaces );",
            "name": "SCardListInterfacesW"
        },
        {
            "signature": "LONG SCardListReaderGroupsA( [in] SCARDCONTEXT hContext, [out] LPSTR mszGroups, [in, out] LPDWORD pcchGroups );",
            "name": "SCardListReaderGroupsA"
        },
        {
            "signature": "LONG SCardListReaderGroupsW( [in] SCARDCONTEXT hContext, [out] LPWSTR mszGroups, [in, out] LPDWORD pcchGroups );",
            "name": "SCardListReaderGroupsW"
        },
        {
            "signature": "LONG SCardListReadersA( [in] SCARDCONTEXT hContext, [in, optional] LPCSTR mszGroups, [out] LPSTR mszReaders, [in, out] LPDWORD pcchReaders );",
            "name": "SCardListReadersA"
        },
        {
            "signature": "LONG SCardListReadersW( [in] SCARDCONTEXT hContext, [in, optional] LPCWSTR mszGroups, [out] LPWSTR mszReaders, [in, out] LPDWORD pcchReaders );",
            "name": "SCardListReadersW"
        },
        {
            "signature": "LONG SCardListReadersWithDeviceInstanceIdA( [in] SCARDCONTEXT hContext, [in] LPCSTR szDeviceInstanceId, [out, optional] LPSTR mszReaders, [in, out] LPDWORD pcchReaders );",
            "name": "SCardListReadersWithDeviceInstanceIdA"
        },
        {
            "signature": "LONG SCardListReadersWithDeviceInstanceIdW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szDeviceInstanceId, [out, optional] LPWSTR mszReaders, [in, out] LPDWORD pcchReaders );",
            "name": "SCardListReadersWithDeviceInstanceIdW"
        },
        {
            "signature": "LONG SCardLocateCardsA( [in] SCARDCONTEXT hContext, [in] LPCSTR mszCards, [in, out] LPSCARD_READERSTATEA rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardLocateCardsA"
        },
        {
            "signature": "LONG SCardLocateCardsByATRA( [in] SCARDCONTEXT hContext, [in] LPSCARD_ATRMASK rgAtrMasks, [in] DWORD cAtrs, [in, out] LPSCARD_READERSTATEA rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardLocateCardsByATRA"
        },
        {
            "signature": "LONG SCardLocateCardsByATRW( [in] SCARDCONTEXT hContext, [in] LPSCARD_ATRMASK rgAtrMasks, [in] DWORD cAtrs, [in, out] LPSCARD_READERSTATEW rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardLocateCardsByATRW"
        },
        {
            "signature": "LONG SCardLocateCardsW( [in] SCARDCONTEXT hContext, [in] LPCWSTR mszCards, [in, out] LPSCARD_READERSTATEW rgReaderStates, [in] DWORD cReaders );",
            "name": "SCardLocateCardsW"
        },
        {
            "signature": "LONG SCardReadCacheA( [in] SCARDCONTEXT hContext, [in] UUID *CardIdentifier, [in] DWORD FreshnessCounter, [in] LPSTR LookupName, [out] PBYTE Data, [out] DWORD *DataLen );",
            "name": "SCardReadCacheA"
        },
        {
            "signature": "LONG SCardReadCacheW( [in] SCARDCONTEXT hContext, [in] UUID *CardIdentifier, [in] DWORD FreshnessCounter, [in] LPWSTR LookupName, [out] PBYTE Data, [out] DWORD *DataLen );",
            "name": "SCardReadCacheW"
        },
        {
            "signature": "LONG SCardReconnect( [in] SCARDHANDLE hCard, [in] DWORD dwShareMode, [in] DWORD dwPreferredProtocols, [in] DWORD dwInitialization, [out, optional] LPDWORD pdwActiveProtocol );",
            "name": "SCardReconnect"
        },
        {
            "signature": "LONG SCardReleaseContext( [in] SCARDCONTEXT hContext );",
            "name": "SCardReleaseContext"
        },
        {
            "signature": "void SCardReleaseStartedEvent();",
            "name": "SCardReleaseStartedEvent"
        },
        {
            "signature": "LONG SCardRemoveReaderFromGroupA( [in] SCARDCONTEXT hContext, [in] LPCSTR szReaderName, [in] LPCSTR szGroupName );",
            "name": "SCardRemoveReaderFromGroupA"
        },
        {
            "signature": "LONG SCardRemoveReaderFromGroupW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szReaderName, [in] LPCWSTR szGroupName );",
            "name": "SCardRemoveReaderFromGroupW"
        },
        {
            "signature": "LONG SCardSetAttrib( [in] SCARDHANDLE hCard, [in] DWORD dwAttrId, [in] LPCBYTE pbAttr, [in] DWORD cbAttrLen );",
            "name": "SCardSetAttrib"
        },
        {
            "signature": "LONG SCardSetCardTypeProviderNameA( [in] SCARDCONTEXT hContext, [in] LPCSTR szCardName, [in] DWORD dwProviderId, [in] LPCSTR szProvider );",
            "name": "SCardSetCardTypeProviderNameA"
        },
        {
            "signature": "LONG SCardSetCardTypeProviderNameW( [in] SCARDCONTEXT hContext, [in] LPCWSTR szCardName, [in] DWORD dwProviderId, [in] LPCWSTR szProvider );",
            "name": "SCardSetCardTypeProviderNameW"
        },
        {
            "signature": "LONG SCardStatusA( [in] SCARDHANDLE hCard, [out] LPSTR mszReaderNames, [in, out, optional] LPDWORD pcchReaderLen, [out, optional] LPDWORD pdwState, [out, optional] LPDWORD pdwProtocol, [out] LPBYTE pbAtr, [in, out, optional] LPDWORD pcbAtrLen );",
            "name": "SCardStatusA"
        },
        {
            "signature": "LONG SCardStatusW( [in] SCARDHANDLE hCard, [out] LPWSTR mszReaderNames, [in, out, optional] LPDWORD pcchReaderLen, [out, optional] LPDWORD pdwState, [out, optional] LPDWORD pdwProtocol, [out] LPBYTE pbAtr, [in, out, optional] LPDWORD pcbAtrLen );",
            "name": "SCardStatusW"
        },
        {
            "signature": "LONG SCardTransmit( [in] SCARDHANDLE hCard, [in] LPCSCARD_IO_REQUEST pioSendPci, [in] LPCBYTE pbSendBuffer, [in] DWORD cbSendLength, [in, out, optional] LPSCARD_IO_REQUEST pioRecvPci, [out] LPBYTE pbRecvBuffer, [in, out] LPDWORD pcbRecvLength );",
            "name": "SCardTransmit"
        },
        {
            "signature": "LONG SCardUIDlgSelectCardA( [in] LPOPENCARDNAMEA_EX unnamedParam1 );",
            "name": "SCardUIDlgSelectCardA"
        },
        {
            "signature": "LONG SCardUIDlgSelectCardW( [in] LPOPENCARDNAMEW_EX unnamedParam1 );",
            "name": "SCardUIDlgSelectCardW"
        },
        {
            "signature": "LONG SCardWriteCacheA( [in] SCARDCONTEXT hContext, [in] UUID *CardIdentifier, [in] DWORD FreshnessCounter, [in] LPSTR LookupName, [in] PBYTE Data, [in] DWORD DataLen );",
            "name": "SCardWriteCacheA"
        },
        {
            "signature": "LONG SCardWriteCacheW( [in] SCARDCONTEXT hContext, [in] UUID *CardIdentifier, [in] DWORD FreshnessCounter, [in] LPWSTR LookupName, [in] PBYTE Data, [in] DWORD DataLen );",
            "name": "SCardWriteCacheW"
        }
    ],
    "Winsnmp.h": [
        {
            "signature": "SNMPAPI_CALLBACK SnmpapiCallback; SNMPAPI_STATUS SnmpapiCallback( [in] HSNMP_SESSION hSession, [in] HWND hWnd, [in] UINT wMsg, [in] WPARAM wParam, [in] LPARAM lParam, [in] LPVOID lpClientData ) {...}",
            "name": "SNMPAPI_CALLBACK callback"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpCancelMsg( [in] HSNMP_SESSION session, [in] smiINT32 reqId );",
            "name": "SnmpCancelMsg"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpCleanup();",
            "name": "SnmpCleanup"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpCleanupEx();",
            "name": "SnmpCleanupEx"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpClose( [in] HSNMP_SESSION session );",
            "name": "SnmpClose"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpContextToStr( [in] HSNMP_CONTEXT context, [out] smiLPOCTETS string );",
            "name": "SnmpContextToStr"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpCountVbl( [in] HSNMP_VBL vbl );",
            "name": "SnmpCountVbl"
        },
        {
            "signature": "HSNMP_PDU SNMPAPI_CALL SnmpCreatePdu( [in] HSNMP_SESSION session, [in] smiINT PDU_type, [in] smiINT32 request_id, [in] smiINT error_status, [in] smiINT error_index, [in] HSNMP_VBL varbindlist );",
            "name": "SnmpCreatePdu"
        },
        {
            "signature": "HSNMP_SESSION SNMPAPI_CALL SnmpCreateSession( [in] HWND hWnd, [in] UINT wMsg, [in] SNMPAPI_CALLBACK fCallBack, [in] LPVOID lpClientData );",
            "name": "SnmpCreateSession"
        },
        {
            "signature": "HSNMP_VBL SNMPAPI_CALL SnmpCreateVbl( [in] HSNMP_SESSION session, [in] smiLPCOID name, [in] smiLPCVALUE value );",
            "name": "SnmpCreateVbl"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpDecodeMsg( [in] HSNMP_SESSION session, [out] LPHSNMP_ENTITY srcEntity, [out] LPHSNMP_ENTITY dstEntity, [out] LPHSNMP_CONTEXT context, [out] LPHSNMP_PDU pdu, [in] smiLPCOCTETS msgBufDesc );",
            "name": "SnmpDecodeMsg"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpDeleteVb( [in] HSNMP_VBL vbl, [in] smiUINT32 index );",
            "name": "SnmpDeleteVb"
        },
        {
            "signature": "HSNMP_PDU SNMPAPI_CALL SnmpDuplicatePdu( [in] HSNMP_SESSION session, [in] HSNMP_PDU PDU );",
            "name": "SnmpDuplicatePdu"
        },
        {
            "signature": "HSNMP_VBL SNMPAPI_CALL SnmpDuplicateVbl( [in] HSNMP_SESSION session, [in] HSNMP_VBL vbl );",
            "name": "SnmpDuplicateVbl"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpEncodeMsg( [in] HSNMP_SESSION session, [in] HSNMP_ENTITY srcEntity, [in] HSNMP_ENTITY dstEntity, [in] HSNMP_CONTEXT context, [in] HSNMP_PDU pdu, [out] smiLPOCTETS msgBufDesc );",
            "name": "SnmpEncodeMsg"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpEntityToStr( [in] HSNMP_ENTITY entity, [in] smiUINT32 size, [out] LPSTR string );",
            "name": "SnmpEntityToStr"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpFreeContext( [in] HSNMP_CONTEXT context );",
            "name": "SnmpFreeContext"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpFreeDescriptor( [in] smiUINT32 syntax, [in] smiLPOPAQUE descriptor );",
            "name": "SnmpFreeDescriptor"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpFreeEntity( [in] HSNMP_ENTITY entity );",
            "name": "SnmpFreeEntity"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpFreePdu( [in] HSNMP_PDU PDU );",
            "name": "SnmpFreePdu"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpFreeVbl( [in] HSNMP_VBL vbl );",
            "name": "SnmpFreeVbl"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetLastError( [in] HSNMP_SESSION session );",
            "name": "SnmpGetLastError"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetPduData( [in] HSNMP_PDU PDU, [out] smiLPINT PDU_type, [out] smiLPINT32 request_id, [out] smiLPINT error_status, [out] smiLPINT error_index, [out] LPHSNMP_VBL varbindlist );",
            "name": "SnmpGetPduData"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetRetransmitMode( [out] smiLPUINT32 nRetransmitMode );",
            "name": "SnmpGetRetransmitMode"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetRetry( [in] HSNMP_ENTITY hEntity, [out] smiLPUINT32 nPolicyRetry, [out] smiLPUINT32 nActualRetry );",
            "name": "SnmpGetRetry"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetTimeout( [in] HSNMP_ENTITY hEntity, [out] smiLPTIMETICKS nPolicyTimeout, [out] smiLPTIMETICKS nActualTimeout );",
            "name": "SnmpGetTimeout"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetTranslateMode( [out] smiLPUINT32 nTranslateMode );",
            "name": "SnmpGetTranslateMode"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetVb( [in] HSNMP_VBL vbl, [in] smiUINT32 index, [out] smiLPOID name, [out] smiLPVALUE value );",
            "name": "SnmpGetVb"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpGetVendorInfo( [out] smiLPVENDORINFO vendorInfo );",
            "name": "SnmpGetVendorInfo"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpListen( [in] HSNMP_ENTITY hEntity, [in] SNMPAPI_STATUS lStatus );",
            "name": "SnmpListen"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpOidCompare( [in] smiLPCOID xOID, [in] smiLPCOID yOID, [in] smiUINT32 maxlen, [out] smiLPINT result );",
            "name": "SnmpOidCompare"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpOidCopy( [in] smiLPCOID srcOID, [out] smiLPOID dstOID );",
            "name": "SnmpOidCopy"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpOidToStr( [in] smiLPCOID srcOID, [in] smiUINT32 size, [out] LPSTR string );",
            "name": "SnmpOidToStr"
        },
        {
            "signature": "HSNMP_SESSION SNMPAPI_CALL SnmpOpen( [in] HWND hWnd, [in] UINT wMsg );",
            "name": "SnmpOpen"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpRecvMsg( [in] HSNMP_SESSION session, [out] LPHSNMP_ENTITY srcEntity, [out] LPHSNMP_ENTITY dstEntity, [out] LPHSNMP_CONTEXT context, [out] LPHSNMP_PDU PDU );",
            "name": "SnmpRecvMsg"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpRegister( [in] HSNMP_SESSION session, [in] HSNMP_ENTITY srcEntity, [in] HSNMP_ENTITY dstEntity, [in] HSNMP_CONTEXT context, [in] smiLPCOID notification, [in] smiUINT32 state );",
            "name": "SnmpRegister"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSendMsg( [in] HSNMP_SESSION session, [in] HSNMP_ENTITY srcEntity, [in] HSNMP_ENTITY dstEntity, [in] HSNMP_CONTEXT context, [in] HSNMP_PDU PDU );",
            "name": "SnmpSendMsg"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetPduData( [in] HSNMP_PDU PDU, [in] const smiINT *PDU_type, [in] const smiINT32 *request_id, [in] const smiINT *non_repeaters, [in] const smiINT *max_repetitions, [in] const HSNMP_VBL *varbindlist );",
            "name": "SnmpSetPduData"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetPort( [in] HSNMP_ENTITY hEntity, [in] UINT nPort );",
            "name": "SnmpSetPort"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetRetransmitMode( [in] smiUINT32 nRetransmitMode );",
            "name": "SnmpSetRetransmitMode"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetRetry( [in] HSNMP_ENTITY hEntity, [in] smiUINT32 nPolicyRetry );",
            "name": "SnmpSetRetry"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetTimeout( [in] HSNMP_ENTITY hEntity, [in] smiTIMETICKS nPolicyTimeout );",
            "name": "SnmpSetTimeout"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetTranslateMode( [in] smiUINT32 nTranslateMode );",
            "name": "SnmpSetTranslateMode"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpSetVb( [in] HSNMP_VBL vbl, [in] smiUINT32 index, [in] smiLPCOID name, [in] smiLPCVALUE value );",
            "name": "SnmpSetVb"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpStartup( [out] smiLPUINT32 nMajorVersion, [out] smiLPUINT32 nMinorVersion, [out] smiLPUINT32 nLevel, [out] smiLPUINT32 nTranslateMode, [out] smiLPUINT32 nRetransmitMode );",
            "name": "SnmpStartup"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpStartupEx( [out] smiLPUINT32 nMajorVersion, [out] smiLPUINT32 nMinorVersion, [out] smiLPUINT32 nLevel, [out] smiLPUINT32 nTranslateMode, [out] smiLPUINT32 nRetransmitMode );",
            "name": "SnmpStartupEx"
        },
        {
            "signature": "HSNMP_CONTEXT SNMPAPI_CALL SnmpStrToContext( [in] HSNMP_SESSION session, [in] smiLPCOCTETS string );",
            "name": "SnmpStrToContext"
        },
        {
            "signature": "HSNMP_ENTITY SNMPAPI_CALL SnmpStrToEntity( [in] HSNMP_SESSION session, [in] LPCSTR string );",
            "name": "SnmpStrToEntity"
        },
        {
            "signature": "SNMPAPI_STATUS SNMPAPI_CALL SnmpStrToOid( [in] LPCSTR string, [out] smiLPOID dstOID );",
            "name": "SnmpStrToOid"
        }
    ],
    "Winsock.h": [
        {
            "signature": "int __WSAFDIsSet( SOCKET unnamedParam1, fd_set *unnamedParam2 );",
            "name": "__WSAFDIsSet"
        },
        {
            "signature": "BOOL AcceptEx( [in] SOCKET sListenSocket, [in] SOCKET sAcceptSocket, [in] PVOID lpOutputBuffer, [in] DWORD dwReceiveDataLength, [in] DWORD dwLocalAddressLength, [in] DWORD dwRemoteAddressLength, [out] LPDWORD lpdwBytesReceived, [in] LPOVERLAPPED lpOverlapped );",
            "name": "AcceptEx"
        },
        {
            "signature": "int bind( [in] SOCKET s, const sockaddr *addr, [in] int namelen );",
            "name": "bind"
        },
        {
            "signature": "int closesocket( [in] SOCKET s );",
            "name": "closesocket"
        },
        {
            "signature": "void GetAcceptExSockaddrs( [in] PVOID lpOutputBuffer, [in] DWORD dwReceiveDataLength, [in] DWORD dwLocalAddressLength, [in] DWORD dwRemoteAddressLength, [out] sockaddr **LocalSockaddr, [out] LPINT LocalSockaddrLength, [out] sockaddr **RemoteSockaddr, [out] LPINT RemoteSockaddrLength );",
            "name": "GetAcceptExSockaddrs"
        },
        {
            "signature": "hostent * gethostbyaddr( const char *addr, int len, int type );",
            "name": "gethostbyaddr"
        },
        {
            "signature": "hostent * gethostbyname( const char *name );",
            "name": "gethostbyname"
        },
        {
            "signature": "int gethostname( [out] char *name, [in] int namelen );",
            "name": "gethostname"
        },
        {
            "signature": "int getpeername( [in] SOCKET s, [out] sockaddr *name, [in, out] int *namelen );",
            "name": "getpeername"
        },
        {
            "signature": "protoent * getprotobyname( [in] const char *name );",
            "name": "getprotobyname"
        },
        {
            "signature": "protoent * getprotobynumber( int proto );",
            "name": "getprotobynumber"
        },
        {
            "signature": "servent * getservbyname( [in] const char *name, [in] const char *proto );",
            "name": "getservbyname"
        },
        {
            "signature": "servent * getservbyport( [in] int port, [in] const char *proto );",
            "name": "getservbyport"
        },
        {
            "signature": "int getsockname( [in] SOCKET s, [out] sockaddr *name, [in, out] int *namelen );",
            "name": "getsockname"
        },
        {
            "signature": "int getsockopt( [in] SOCKET s, [in] int level, [in] int optname, [out] char *optval, [in, out] int *optlen );",
            "name": "getsockopt"
        },
        {
            "signature": "u_long htonl( [in] u_long hostlong );",
            "name": "htonl"
        },
        {
            "signature": "u_short htons( [in] u_short hostshort );",
            "name": "htons"
        },
        {
            "signature": "unsigned long inet_addr( const char *cp );",
            "name": "inet_addr"
        },
        {
            "signature": "char * inet_ntoa( in_addr in );",
            "name": "inet_ntoa"
        },
        {
            "signature": "int ioctlsocket( [in] SOCKET s, [in] long cmd, [in, out] u_long *argp );",
            "name": "ioctlsocket"
        },
        {
            "signature": "u_long ntohl( [in] u_long netlong );",
            "name": "ntohl"
        },
        {
            "signature": "u_short ntohs( [in] u_short netshort );",
            "name": "ntohs"
        },
        {
            "signature": "int recv( [in] SOCKET s, [out] char *buf, [in] int len, [in] int flags );",
            "name": "recv"
        },
        {
            "signature": "int recvfrom( [in] SOCKET s, [out] char *buf, [in] int len, [in] int flags, [out] sockaddr *from, [in, out, optional] int *fromlen );",
            "name": "recvfrom"
        },
        {
            "signature": "int sendto( [in] SOCKET s, [in] const char *buf, [in] int len, [in] int flags, [in] const sockaddr *to, [in] int tolen );",
            "name": "sendto"
        },
        {
            "signature": "int setsockopt( [in] SOCKET s, [in] int level, [in] int optname, [in] const char *optval, [in] int optlen );",
            "name": "setsockopt"
        },
        {
            "signature": "int shutdown( [in] SOCKET s, [in] int how );",
            "name": "shutdown"
        },
        {
            "signature": "BOOL TransmitFile( SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved );",
            "name": "TransmitFile"
        },
        {
            "signature": "HANDLE WSAAsyncGetHostByAddr( HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen );",
            "name": "WSAAsyncGetHostByAddr"
        },
        {
            "signature": "HANDLE WSAAsyncGetHostByName( HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen );",
            "name": "WSAAsyncGetHostByName"
        },
        {
            "signature": "HANDLE WSAAsyncGetProtoByName( [in] HWND hWnd, [in] u_int wMsg, [in] const char *name, [out] char *buf, [out] int buflen );",
            "name": "WSAAsyncGetProtoByName"
        },
        {
            "signature": "HANDLE WSAAsyncGetProtoByNumber( [in] HWND hWnd, [in] u_int wMsg, [in] int number, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetProtoByNumber"
        },
        {
            "signature": "HANDLE WSAAsyncGetServByName( [in] HWND hWnd, [in] u_int wMsg, [in] const char *name, [in] const char *proto, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetServByName"
        },
        {
            "signature": "HANDLE WSAAsyncGetServByPort( [in] HWND hWnd, [in] u_int wMsg, [in] int port, [in] const char *proto, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetServByPort"
        },
        {
            "signature": "int WSAAsyncSelect( [in] SOCKET s, [in] HWND hWnd, [in] u_int wMsg, [in] long lEvent );",
            "name": "WSAAsyncSelect"
        },
        {
            "signature": "int WSACancelAsyncRequest( [in] HANDLE hAsyncTaskHandle );",
            "name": "WSACancelAsyncRequest"
        },
        {
            "signature": "int WSACleanup();",
            "name": "WSACleanup"
        },
        {
            "signature": "int WSAGetLastError();",
            "name": "WSAGetLastError"
        },
        {
            "signature": "int WSARecvEx( [in] SOCKET s, [out] char *buf, [in] int len, [in, out] int *flags );",
            "name": "WSARecvEx"
        },
        {
            "signature": "void WSASetLastError( [in] int iError );",
            "name": "WSASetLastError"
        },
        {
            "signature": "int WSAStartup( WORD wVersionRequired, [out] LPWSADATA lpWSAData );",
            "name": "WSAStartup"
        }
    ],
    "Winsock2.h": [
        {
            "signature": "int __WSAFDIsSet( SOCKET fd, fd_set *unnamedParam2 );",
            "name": "__WSAFDIsSet"
        },
        {
            "signature": "SOCKET WSAAPI accept( [in] SOCKET s, [out] sockaddr *addr, [in, out] int *addrlen );",
            "name": "accept"
        },
        {
            "signature": "int WSAAPI bind( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen );",
            "name": "bind"
        },
        {
            "signature": "int WSAAPI closesocket( [in] SOCKET s );",
            "name": "closesocket"
        },
        {
            "signature": "int WSAAPI connect( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen );",
            "name": "connect"
        },
        {
            "signature": "hostent *WSAAPI gethostbyaddr( const char *addr, int len, int type );",
            "name": "gethostbyaddr"
        },
        {
            "signature": "hostent *WSAAPI gethostbyname( const char *name );",
            "name": "gethostbyname"
        },
        {
            "signature": "int WSAAPI gethostname( [out] char *name, [in] int namelen );",
            "name": "gethostname"
        },
        {
            "signature": "int WSAAPI GetHostNameW( [out] PWSTR name, [in] int namelen );",
            "name": "GetHostNameW"
        },
        {
            "signature": "int WSAAPI getpeername( [in] SOCKET s, [out] sockaddr *name, [in, out] int *namelen );",
            "name": "getpeername"
        },
        {
            "signature": "protoent *WSAAPI getprotobyname( [in] const char *name );",
            "name": "getprotobyname"
        },
        {
            "signature": "protoent *WSAAPI getprotobynumber( [in] int number );",
            "name": "getprotobynumber"
        },
        {
            "signature": "servent *WSAAPI getservbyname( [in] const char *name, [in] const char *proto );",
            "name": "getservbyname"
        },
        {
            "signature": "servent *WSAAPI getservbyport( [in] int port, [in] const char *proto );",
            "name": "getservbyport"
        },
        {
            "signature": "int WSAAPI getsockname( [in] SOCKET s, [out] sockaddr *name, [in, out] int *namelen );",
            "name": "getsockname"
        },
        {
            "signature": "int WSAAPI getsockopt( [in] SOCKET s, [in] int level, [in] int optname, [out] char *optval, [in, out] int *optlen );",
            "name": "getsockopt"
        },
        {
            "signature": "unsigned __int64 htond( double Value );",
            "name": "htond"
        },
        {
            "signature": "unsigned __int32 htonf( float Value );",
            "name": "htonf"
        },
        {
            "signature": "u_long WSAAPI htonl( [in] u_long hostlong );",
            "name": "htonl"
        },
        {
            "signature": "unsigned __int64 htonll( unsigned __int64 Value );",
            "name": "htonll"
        },
        {
            "signature": "u_short WSAAPI htons( [in] u_short hostshort );",
            "name": "htons"
        },
        {
            "signature": "unsigned long WSAAPI inet_addr( const char *cp );",
            "name": "inet_addr"
        },
        {
            "signature": "char *WSAAPI inet_ntoa( in_addr in );",
            "name": "inet_ntoa"
        },
        {
            "signature": "int WSAAPI ioctlsocket( [in] SOCKET s, [in] long cmd, [in, out] u_long *argp );",
            "name": "ioctlsocket"
        },
        {
            "signature": "int WSAAPI listen( [in] SOCKET s, [in] int backlog );",
            "name": "listen"
        },
        {
            "signature": "LPWSAOVERLAPPED_COMPLETION_ROUTINE LpwsaoverlappedCompletionRoutine; void LpwsaoverlappedCompletionRoutine( DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags ) {...}",
            "name": "LPWSAOVERLAPPED_COMPLETION_ROUTINE callback"
        },
        {
            "signature": "double ntohd( unsigned __int64 Value );",
            "name": "ntohd"
        },
        {
            "signature": "float ntohf( unsigned __int32 Value );",
            "name": "ntohf"
        },
        {
            "signature": "u_long WSAAPI ntohl( [in] u_long netlong );",
            "name": "ntohl"
        },
        {
            "signature": "unsigned __int64 ntohll( unsigned __int64 Value );",
            "name": "ntohll"
        },
        {
            "signature": "u_short WSAAPI ntohs( [in] u_short netshort );",
            "name": "ntohs"
        },
        {
            "signature": "DWORD WSAAPI ProcessSocketNotifications( HANDLE completionPort, UINT32 registrationCount, SOCK_NOTIFY_REGISTRATION *registrationInfos, UINT32 timeoutMs, ULONG completionCount, OVERLAPPED_ENTRY *completionPortEntries, UINT32 *receivedEntryCount );",
            "name": "ProcessSocketNotifications"
        },
        {
            "signature": "int WSAAPI recv( [in] SOCKET s, [out] char *buf, [in] int len, [in] int flags );",
            "name": "recv"
        },
        {
            "signature": "int WSAAPI recvfrom( [in] SOCKET s, [out] char *buf, [in] int len, [in] int flags, [out] sockaddr *from, [in, out, optional] int *fromlen );",
            "name": "recvfrom"
        },
        {
            "signature": "int WSAAPI select( [in] int nfds, [in, out] fd_set *readfds, [in, out] fd_set *writefds, [in, out] fd_set *exceptfds, [in] const timeval *timeout );",
            "name": "select"
        },
        {
            "signature": "int WSAAPI send( [in] SOCKET s, [in] const char *buf, [in] int len, [in] int flags );",
            "name": "send"
        },
        {
            "signature": "int WSAAPI sendto( [in] SOCKET s, [in] const char *buf, [in] int len, [in] int flags, [in] const sockaddr *to, [in] int tolen );",
            "name": "sendto"
        },
        {
            "signature": "int WSAAPI setsockopt( [in] SOCKET s, [in] int level, [in] int optname, [in] const char *optval, [in] int optlen );",
            "name": "setsockopt"
        },
        {
            "signature": "int WSAAPI shutdown( [in] SOCKET s, [in] int how );",
            "name": "shutdown"
        },
        {
            "signature": "SOCKET WSAAPI socket( [in] int af, [in] int type, [in] int protocol );",
            "name": "socket"
        },
        {
            "signature": "UINT32 SocketNotificationRetrieveEvents( OVERLAPPED_ENTRY *notification );",
            "name": "SocketNotificationRetrieveEvents"
        },
        {
            "signature": "SOCKET WSAAPI WSAAccept( [in] SOCKET s, [out] sockaddr *addr, [in, out] LPINT addrlen, [in] LPCONDITIONPROC lpfnCondition, [in] DWORD_PTR dwCallbackData );",
            "name": "WSAAccept"
        },
        {
            "signature": "INT WSAAPI WSAAddressToStringA( [in] LPSOCKADDR lpsaAddress, [in] DWORD dwAddressLength, [in, optional] LPWSAPROTOCOL_INFOA lpProtocolInfo, [in, out] LPSTR lpszAddressString, [in, out] LPDWORD lpdwAddressStringLength );",
            "name": "WSAAddressToStringA"
        },
        {
            "signature": "INT WSAAPI WSAAddressToStringW( [in] LPSOCKADDR lpsaAddress, [in] DWORD dwAddressLength, [in, optional] LPWSAPROTOCOL_INFOW lpProtocolInfo, [in, out] LPWSTR lpszAddressString, [in, out] LPDWORD lpdwAddressStringLength );",
            "name": "WSAAddressToStringW"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetHostByAddr( HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen );",
            "name": "WSAAsyncGetHostByAddr"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetHostByName( HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen );",
            "name": "WSAAsyncGetHostByName"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetProtoByName( [in] HWND hWnd, [in] u_int wMsg, [in] const char *name, [out] char *buf, [out] int buflen );",
            "name": "WSAAsyncGetProtoByName"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetProtoByNumber( [in] HWND hWnd, [in] u_int wMsg, [in] int number, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetProtoByNumber"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetServByName( [in] HWND hWnd, [in] u_int wMsg, [in] const char *name, [in] const char *proto, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetServByName"
        },
        {
            "signature": "HANDLE WSAAPI WSAAsyncGetServByPort( [in] HWND hWnd, [in] u_int wMsg, [in] int port, [in] const char *proto, [out] char *buf, [in] int buflen );",
            "name": "WSAAsyncGetServByPort"
        },
        {
            "signature": "int WSAAPI WSAAsyncSelect( [in] SOCKET s, [in] HWND hWnd, [in] u_int wMsg, [in] long lEvent );",
            "name": "WSAAsyncSelect"
        },
        {
            "signature": "int WSAAPI WSACancelAsyncRequest( [in] HANDLE hAsyncTaskHandle );",
            "name": "WSACancelAsyncRequest"
        },
        {
            "signature": "int WSAAPI WSACancelBlockingCall();",
            "name": "WSACancelBlockingCall"
        },
        {
            "signature": "int WSAAPI WSACleanup();",
            "name": "WSACleanup"
        },
        {
            "signature": "BOOL WSAAPI WSACloseEvent( [in] WSAEVENT hEvent );",
            "name": "WSACloseEvent"
        },
        {
            "signature": "int WSAAPI WSAConnect( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [in] LPWSABUF lpCallerData, [out] LPWSABUF lpCalleeData, [in] LPQOS lpSQOS, [in] LPQOS lpGQOS );",
            "name": "WSAConnect"
        },
        {
            "signature": "BOOL WSAConnectByList( [in] SOCKET s, [in] PSOCKET_ADDRESS_LIST SocketAddress, [in, out] LPDWORD LocalAddressLength, [out] LPSOCKADDR LocalAddress, [in, out] LPDWORD RemoteAddressLength, [out] LPSOCKADDR RemoteAddress, [in] const timeval *timeout, [in] LPWSAOVERLAPPED Reserved );",
            "name": "WSAConnectByList"
        },
        {
            "signature": "BOOL WSAConnectByNameA( [in] SOCKET s, [in] LPCSTR nodename, [in] LPCSTR servicename, [in, out] LPDWORD LocalAddressLength, [out] LPSOCKADDR LocalAddress, [in, out] LPDWORD RemoteAddressLength, [out] LPSOCKADDR RemoteAddress, [in] const timeval *timeout, LPWSAOVERLAPPED Reserved );",
            "name": "WSAConnectByNameA"
        },
        {
            "signature": "BOOL WSAConnectByNameW( [in] SOCKET s, [in] LPWSTR nodename, [in] LPWSTR servicename, [in, out] LPDWORD LocalAddressLength, [out] LPSOCKADDR LocalAddress, [in, out] LPDWORD RemoteAddressLength, [out] LPSOCKADDR RemoteAddress, [in] const timeval *timeout, LPWSAOVERLAPPED Reserved );",
            "name": "WSAConnectByNameW"
        },
        {
            "signature": "WSAEVENT WSAAPI WSACreateEvent();",
            "name": "WSACreateEvent"
        },
        {
            "signature": "int WSAAPI WSADuplicateSocketA( [in] SOCKET s, [in] DWORD dwProcessId, [out] LPWSAPROTOCOL_INFOA lpProtocolInfo );",
            "name": "WSADuplicateSocketA"
        },
        {
            "signature": "int WSAAPI WSADuplicateSocketW( [in] SOCKET s, [in] DWORD dwProcessId, [out] LPWSAPROTOCOL_INFOW lpProtocolInfo );",
            "name": "WSADuplicateSocketW"
        },
        {
            "signature": "INT WSAAPI WSAEnumNameSpaceProvidersA( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOA lpnspBuffer );",
            "name": "WSAEnumNameSpaceProvidersA"
        },
        {
            "signature": "INT WSAAPI WSAEnumNameSpaceProvidersExA( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOEXA lpnspBuffer );",
            "name": "WSAEnumNameSpaceProvidersExA"
        },
        {
            "signature": "INT WSAAPI WSAEnumNameSpaceProvidersExW( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOEXW lpnspBuffer );",
            "name": "WSAEnumNameSpaceProvidersExW"
        },
        {
            "signature": "INT WSAAPI WSAEnumNameSpaceProvidersW( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOW lpnspBuffer );",
            "name": "WSAEnumNameSpaceProvidersW"
        },
        {
            "signature": "int WSAAPI WSAEnumNetworkEvents( [in] SOCKET s, [in] WSAEVENT hEventObject, [out] LPWSANETWORKEVENTS lpNetworkEvents );",
            "name": "WSAEnumNetworkEvents"
        },
        {
            "signature": "int WSAAPI WSAEnumProtocolsA( [in] LPINT lpiProtocols, [out] LPWSAPROTOCOL_INFOA lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "WSAEnumProtocolsA"
        },
        {
            "signature": "int WSAAPI WSAEnumProtocolsW( [in] LPINT lpiProtocols, [out] LPWSAPROTOCOL_INFOW lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength );",
            "name": "WSAEnumProtocolsW"
        },
        {
            "signature": "int WSAAPI WSAEventSelect( [in] SOCKET s, [in] WSAEVENT hEventObject, [in] long lNetworkEvents );",
            "name": "WSAEventSelect"
        },
        {
            "signature": "int WSAAPI WSAGetLastError();",
            "name": "WSAGetLastError"
        },
        {
            "signature": "BOOL WSAAPI WSAGetOverlappedResult( [in] SOCKET s, [in] LPWSAOVERLAPPED lpOverlapped, [out] LPDWORD lpcbTransfer, [in] BOOL fWait, [out] LPDWORD lpdwFlags );",
            "name": "WSAGetOverlappedResult"
        },
        {
            "signature": "BOOL WSAAPI WSAGetQOSByName( [in] SOCKET s, [in, out] LPWSABUF lpQOSName, [out] LPQOS lpQOS );",
            "name": "WSAGetQOSByName"
        },
        {
            "signature": "INT WSAAPI WSAGetServiceClassInfoA( [in] LPGUID lpProviderId, [in] LPGUID lpServiceClassId, [in, out] LPDWORD lpdwBufSize, [out] LPWSASERVICECLASSINFOA lpServiceClassInfo );",
            "name": "WSAGetServiceClassInfoA"
        },
        {
            "signature": "INT WSAAPI WSAGetServiceClassInfoW( [in] LPGUID lpProviderId, [in] LPGUID lpServiceClassId, [in, out] LPDWORD lpdwBufSize, [out] LPWSASERVICECLASSINFOW lpServiceClassInfo );",
            "name": "WSAGetServiceClassInfoW"
        },
        {
            "signature": "INT WSAAPI WSAGetServiceClassNameByClassIdA( [in] LPGUID lpServiceClassId, [out] LPSTR lpszServiceClassName, [in, out] LPDWORD lpdwBufferLength );",
            "name": "WSAGetServiceClassNameByClassIdA"
        },
        {
            "signature": "INT WSAAPI WSAGetServiceClassNameByClassIdW( [in] LPGUID lpServiceClassId, [out] LPWSTR lpszServiceClassName, [in, out] LPDWORD lpdwBufferLength );",
            "name": "WSAGetServiceClassNameByClassIdW"
        },
        {
            "signature": "int WSAAPI WSAHtonl( [in] SOCKET s, [in] u_long hostlong, [out] u_long *lpnetlong );",
            "name": "WSAHtonl"
        },
        {
            "signature": "int WSAAPI WSAHtons( [in] SOCKET s, [in] u_short hostshort, [out] u_short *lpnetshort );",
            "name": "WSAHtons"
        },
        {
            "signature": "INT WSAAPI WSAInstallServiceClassA( [in] LPWSASERVICECLASSINFOA lpServiceClassInfo );",
            "name": "WSAInstallServiceClassA"
        },
        {
            "signature": "INT WSAAPI WSAInstallServiceClassW( [in] LPWSASERVICECLASSINFOW lpServiceClassInfo );",
            "name": "WSAInstallServiceClassW"
        },
        {
            "signature": "int WSAAPI WSAIoctl( [in] SOCKET s, [in] DWORD dwIoControlCode, [in] LPVOID lpvInBuffer, [in] DWORD cbInBuffer, [out] LPVOID lpvOutBuffer, [in] DWORD cbOutBuffer, [out] LPDWORD lpcbBytesReturned, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSAIoctl"
        },
        {
            "signature": "BOOL WSAAPI WSAIsBlocking();",
            "name": "WSAIsBlocking"
        },
        {
            "signature": "SOCKET WSAAPI WSAJoinLeaf( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [in] LPWSABUF lpCallerData, [out] LPWSABUF lpCalleeData, [in] LPQOS lpSQOS, [in] LPQOS lpGQOS, [in] DWORD dwFlags );",
            "name": "WSAJoinLeaf"
        },
        {
            "signature": "INT WSAAPI WSALookupServiceBeginA( [in] LPWSAQUERYSETA lpqsRestrictions, [in] DWORD dwControlFlags, [out] LPHANDLE lphLookup );",
            "name": "WSALookupServiceBeginA"
        },
        {
            "signature": "INT WSAAPI WSALookupServiceBeginW( [in] LPWSAQUERYSETW lpqsRestrictions, [in] DWORD dwControlFlags, [out] LPHANDLE lphLookup );",
            "name": "WSALookupServiceBeginW"
        },
        {
            "signature": "INT WSAAPI WSALookupServiceEnd( [in] HANDLE hLookup );",
            "name": "WSALookupServiceEnd"
        },
        {
            "signature": "INT WSAAPI WSALookupServiceNextA( [in] HANDLE hLookup, [in] DWORD dwControlFlags, [in, out] LPDWORD lpdwBufferLength, [out] LPWSAQUERYSETA lpqsResults );",
            "name": "WSALookupServiceNextA"
        },
        {
            "signature": "INT WSAAPI WSALookupServiceNextW( [in] HANDLE hLookup, [in] DWORD dwControlFlags, [in, out] LPDWORD lpdwBufferLength, [out] LPWSAQUERYSETW lpqsResults );",
            "name": "WSALookupServiceNextW"
        },
        {
            "signature": "INT WSAAPI WSANSPIoctl( [in] HANDLE hLookup, [in] DWORD dwControlCode, [in] LPVOID lpvInBuffer, [in, out] DWORD cbInBuffer, [out] LPVOID lpvOutBuffer, [in] DWORD cbOutBuffer, [out] LPDWORD lpcbBytesReturned, [in] LPWSACOMPLETION lpCompletion );",
            "name": "WSANSPIoctl"
        },
        {
            "signature": "int WSAAPI WSANtohl( [in] SOCKET s, [in] u_long netlong, [out] u_long *lphostlong );",
            "name": "WSANtohl"
        },
        {
            "signature": "int WSAAPI WSANtohs( [in] SOCKET s, [in] u_short netshort, [out] u_short *lphostshort );",
            "name": "WSANtohs"
        },
        {
            "signature": "int WSAAPI WSAPoll( [in, out] LPWSAPOLLFD fdArray, [in] ULONG fds, [in] INT timeout );",
            "name": "WSAPoll"
        },
        {
            "signature": "INT WSAAPI WSAProviderConfigChange( [in, out] LPHANDLE lpNotificationHandle, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSAProviderConfigChange"
        },
        {
            "signature": "int WSAAPI WSARecv( [in] SOCKET s, [in, out] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesRecvd, [in, out] LPDWORD lpFlags, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSARecv"
        },
        {
            "signature": "int WSAAPI WSARecvDisconnect( [in] SOCKET s, [out] LPWSABUF lpInboundDisconnectData );",
            "name": "WSARecvDisconnect"
        },
        {
            "signature": "int WSAAPI WSARecvFrom( [in] SOCKET s, [in, out] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesRecvd, [in, out] LPDWORD lpFlags, [out] sockaddr *lpFrom, [in, out] LPINT lpFromlen, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSARecvFrom"
        },
        {
            "signature": "INT WSAAPI WSARemoveServiceClass( [in] LPGUID lpServiceClassId );",
            "name": "WSARemoveServiceClass"
        },
        {
            "signature": "BOOL WSAAPI WSAResetEvent( [in] WSAEVENT hEvent );",
            "name": "WSAResetEvent"
        },
        {
            "signature": "int WSAAPI WSASend( [in] SOCKET s, [in] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesSent, [in] DWORD dwFlags, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSASend"
        },
        {
            "signature": "int WSAAPI WSASendDisconnect( [in] SOCKET s, [in] LPWSABUF lpOutboundDisconnectData );",
            "name": "WSASendDisconnect"
        },
        {
            "signature": "int WSAAPI WSASendMsg( [in] SOCKET Handle, [in] LPWSAMSG lpMsg, [in] DWORD dwFlags, [out] LPDWORD lpNumberOfBytesSent, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSASendMsg"
        },
        {
            "signature": "int WSAAPI WSASendTo( [in] SOCKET s, [in] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesSent, [in] DWORD dwFlags, [in] const sockaddr *lpTo, [in] int iTolen, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine );",
            "name": "WSASendTo"
        },
        {
            "signature": "FARPROC WSAAPI WSASetBlockingHook( FARPROC lpBlockFunc );",
            "name": "WSASetBlockingHook"
        },
        {
            "signature": "BOOL WSAAPI WSASetEvent( [in] WSAEVENT hEvent );",
            "name": "WSASetEvent"
        },
        {
            "signature": "void WSAAPI WSASetLastError( [in] int iError );",
            "name": "WSASetLastError"
        },
        {
            "signature": "INT WSAAPI WSASetServiceA( [in] LPWSAQUERYSETA lpqsRegInfo, [in] WSAESETSERVICEOP essoperation, [in] DWORD dwControlFlags );",
            "name": "WSASetServiceA"
        },
        {
            "signature": "INT WSAAPI WSASetServiceW( [in] LPWSAQUERYSETW lpqsRegInfo, [in] WSAESETSERVICEOP essoperation, [in] DWORD dwControlFlags );",
            "name": "WSASetServiceW"
        },
        {
            "signature": "SOCKET WSAAPI WSASocketA( [in] int af, [in] int type, [in] int protocol, [in] LPWSAPROTOCOL_INFOA lpProtocolInfo, [in] GROUP g, [in] DWORD dwFlags );",
            "name": "WSASocketA"
        },
        {
            "signature": "SOCKET WSAAPI WSASocketW( [in] int af, [in] int type, [in] int protocol, [in] LPWSAPROTOCOL_INFOW lpProtocolInfo, [in] GROUP g, [in] DWORD dwFlags );",
            "name": "WSASocketW"
        },
        {
            "signature": "int WSAAPI WSAStartup( [in] WORD wVersionRequested, [out] LPWSADATA lpWSAData );",
            "name": "WSAStartup"
        },
        {
            "signature": "INT WSAAPI WSAStringToAddressA( [in] LPSTR AddressString, [in] INT AddressFamily, [in, optional] LPWSAPROTOCOL_INFOA lpProtocolInfo, [out] LPSOCKADDR lpAddress, [in, out] LPINT lpAddressLength );",
            "name": "WSAStringToAddressA"
        },
        {
            "signature": "INT WSAAPI WSAStringToAddressW( [in] LPWSTR AddressString, [in] INT AddressFamily, [in, optional] LPWSAPROTOCOL_INFOW lpProtocolInfo, [out] LPSOCKADDR lpAddress, [in, out] LPINT lpAddressLength );",
            "name": "WSAStringToAddressW"
        },
        {
            "signature": "int WSAAPI WSAUnhookBlockingHook();",
            "name": "WSAUnhookBlockingHook"
        },
        {
            "signature": "DWORD WSAAPI WSAWaitForMultipleEvents( [in] DWORD cEvents, [in] const WSAEVENT *lphEvents, [in] BOOL fWaitAll, [in] DWORD dwTimeout, [in] BOOL fAlertable );",
            "name": "WSAWaitForMultipleEvents"
        }
    ],
    "Winstring.h": [
        {
            "signature": "void HSTRING_UserFree( ULONG *pFlags, HSTRING *ppidl );",
            "name": "HSTRING_UserFree"
        },
        {
            "signature": "UCHAR * HSTRING_UserMarshal( ULONG *pFlags, UCHAR *pBuffer, HSTRING *ppidl );",
            "name": "HSTRING_UserMarshal"
        },
        {
            "signature": "ULONG HSTRING_UserSize( ULONG *pFlags, ULONG StartingSize, HSTRING *ppidl );",
            "name": "HSTRING_UserSize"
        },
        {
            "signature": "UCHAR * HSTRING_UserUnmarshal( ULONG *pFlags, UCHAR *pBuffer, HSTRING *ppidl );",
            "name": "HSTRING_UserUnmarshal"
        },
        {
            "signature": "PINSPECT_HSTRING_CALLBACK PinspectHstringCallback; HRESULT PinspectHstringCallback( void *context, UINT_PTR readAddress, UINT32 length, BYTE *buffer ) {...}",
            "name": "PINSPECT_HSTRING_CALLBACK callback"
        },
        {
            "signature": "HRESULT WindowsCompareStringOrdinal( HSTRING string1, HSTRING string2, INT32 *result );",
            "name": "WindowsCompareStringOrdinal"
        },
        {
            "signature": "HRESULT WindowsConcatString( HSTRING string1, HSTRING string2, HSTRING *newString );",
            "name": "WindowsConcatString"
        },
        {
            "signature": "HRESULT WindowsCreateString( PCNZWCH sourceString, UINT32 length, HSTRING *string );",
            "name": "WindowsCreateString"
        },
        {
            "signature": "HRESULT WindowsCreateStringReference( PCWSTR sourceString, UINT32 length, HSTRING_HEADER *hstringHeader, HSTRING *string );",
            "name": "WindowsCreateStringReference"
        },
        {
            "signature": "HRESULT WindowsDeleteString( HSTRING string );",
            "name": "WindowsDeleteString"
        },
        {
            "signature": "HRESULT WindowsDeleteStringBuffer( HSTRING_BUFFER bufferHandle );",
            "name": "WindowsDeleteStringBuffer"
        },
        {
            "signature": "HRESULT WindowsDuplicateString( HSTRING string, HSTRING *newString );",
            "name": "WindowsDuplicateString"
        },
        {
            "signature": "UINT32 WindowsGetStringLen( HSTRING string );",
            "name": "WindowsGetStringLen"
        },
        {
            "signature": "PCWSTR WindowsGetStringRawBuffer( HSTRING string, UINT32 *length );",
            "name": "WindowsGetStringRawBuffer"
        },
        {
            "signature": "HRESULT WindowsInspectString( UINT_PTR targetHString, USHORT machine, PINSPECT_HSTRING_CALLBACK callback, void *context, UINT32 *length, UINT_PTR *targetStringAddress );",
            "name": "WindowsInspectString"
        },
        {
            "signature": "HRESULT WindowsInspectString2( UINT64 targetHString, USHORT machine, PINSPECT_HSTRING_CALLBACK2 callback, void *context, UINT32 *length, UINT64 *targetStringAddress );",
            "name": "WindowsInspectString2"
        },
        {
            "signature": "BOOL WindowsIsStringEmpty( HSTRING string );",
            "name": "WindowsIsStringEmpty"
        },
        {
            "signature": "HRESULT WindowsPreallocateStringBuffer( UINT32 length, WCHAR **charBuffer, HSTRING_BUFFER *bufferHandle );",
            "name": "WindowsPreallocateStringBuffer"
        },
        {
            "signature": "HRESULT WindowsPromoteStringBuffer( HSTRING_BUFFER bufferHandle, HSTRING *string );",
            "name": "WindowsPromoteStringBuffer"
        },
        {
            "signature": "HRESULT WindowsReplaceString( HSTRING string, HSTRING stringReplaced, HSTRING stringReplaceWith, HSTRING *newString );",
            "name": "WindowsReplaceString"
        },
        {
            "signature": "HRESULT WindowsStringHasEmbeddedNull( HSTRING string, BOOL *hasEmbedNull );",
            "name": "WindowsStringHasEmbeddedNull"
        },
        {
            "signature": "HRESULT WindowsSubstring( HSTRING string, UINT32 startIndex, HSTRING *newString );",
            "name": "WindowsSubstring"
        },
        {
            "signature": "HRESULT WindowsSubstringWithSpecifiedLength( HSTRING string, UINT32 startIndex, UINT32 length, HSTRING *newString );",
            "name": "WindowsSubstringWithSpecifiedLength"
        },
        {
            "signature": "HRESULT WindowsTrimStringEnd( HSTRING string, HSTRING trimString, HSTRING *newString );",
            "name": "WindowsTrimStringEnd"
        },
        {
            "signature": "HRESULT WindowsTrimStringStart( HSTRING string, HSTRING trimString, HSTRING *newString );",
            "name": "WindowsTrimStringStart"
        }
    ],
    "Winsvc.h": [
        {
            "signature": "BOOL ChangeServiceConfig2A( [in] SC_HANDLE hService, [in] DWORD dwInfoLevel, [in, optional] LPVOID lpInfo );",
            "name": "ChangeServiceConfig2A"
        },
        {
            "signature": "BOOL ChangeServiceConfig2W( [in] SC_HANDLE hService, [in] DWORD dwInfoLevel, [in, optional] LPVOID lpInfo );",
            "name": "ChangeServiceConfig2W"
        },
        {
            "signature": "BOOL ChangeServiceConfigA( [in] SC_HANDLE hService, [in] DWORD dwServiceType, [in] DWORD dwStartType, [in] DWORD dwErrorControl, [in, optional] LPCSTR lpBinaryPathName, [in, optional] LPCSTR lpLoadOrderGroup, [out, optional] LPDWORD lpdwTagId, [in, optional] LPCSTR lpDependencies, [in, optional] LPCSTR lpServiceStartName, [in, optional] LPCSTR lpPassword, [in, optional] LPCSTR lpDisplayName );",
            "name": "ChangeServiceConfigA"
        },
        {
            "signature": "BOOL ChangeServiceConfigW( [in] SC_HANDLE hService, [in] DWORD dwServiceType, [in] DWORD dwStartType, [in] DWORD dwErrorControl, [in, optional] LPCWSTR lpBinaryPathName, [in, optional] LPCWSTR lpLoadOrderGroup, [out, optional] LPDWORD lpdwTagId, [in, optional] LPCWSTR lpDependencies, [in, optional] LPCWSTR lpServiceStartName, [in, optional] LPCWSTR lpPassword, [in, optional] LPCWSTR lpDisplayName );",
            "name": "ChangeServiceConfigW"
        },
        {
            "signature": "BOOL CloseServiceHandle( [in] SC_HANDLE hSCObject );",
            "name": "CloseServiceHandle"
        },
        {
            "signature": "BOOL ControlService( [in] SC_HANDLE hService, [in] DWORD dwControl, [out] LPSERVICE_STATUS lpServiceStatus );",
            "name": "ControlService"
        },
        {
            "signature": "BOOL ControlServiceExA( [in] SC_HANDLE hService, [in] DWORD dwControl, [in] DWORD dwInfoLevel, [in, out] PVOID pControlParams );",
            "name": "ControlServiceExA"
        },
        {
            "signature": "BOOL ControlServiceExW( [in] SC_HANDLE hService, [in] DWORD dwControl, [in] DWORD dwInfoLevel, [in, out] PVOID pControlParams );",
            "name": "ControlServiceExW"
        },
        {
            "signature": "SC_HANDLE CreateServiceA( [in] SC_HANDLE hSCManager, [in] LPCSTR lpServiceName, [in, optional] LPCSTR lpDisplayName, [in] DWORD dwDesiredAccess, [in] DWORD dwServiceType, [in] DWORD dwStartType, [in] DWORD dwErrorControl, [in, optional] LPCSTR lpBinaryPathName, [in, optional] LPCSTR lpLoadOrderGroup, [out, optional] LPDWORD lpdwTagId, [in, optional] LPCSTR lpDependencies, [in, optional] LPCSTR lpServiceStartName, [in, optional] LPCSTR lpPassword );",
            "name": "CreateServiceA"
        },
        {
            "signature": "SC_HANDLE CreateServiceW( [in] SC_HANDLE hSCManager, [in] LPCWSTR lpServiceName, [in, optional] LPCWSTR lpDisplayName, [in] DWORD dwDesiredAccess, [in] DWORD dwServiceType, [in] DWORD dwStartType, [in] DWORD dwErrorControl, [in, optional] LPCWSTR lpBinaryPathName, [in, optional] LPCWSTR lpLoadOrderGroup, [out, optional] LPDWORD lpdwTagId, [in, optional] LPCWSTR lpDependencies, [in, optional] LPCWSTR lpServiceStartName, [in, optional] LPCWSTR lpPassword );",
            "name": "CreateServiceW"
        },
        {
            "signature": "BOOL DeleteService( [in] SC_HANDLE hService );",
            "name": "DeleteService"
        },
        {
            "signature": "BOOL EnumDependentServicesA( [in] SC_HANDLE hService, [in] DWORD dwServiceState, [out, optional] LPENUM_SERVICE_STATUSA lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned );",
            "name": "EnumDependentServicesA"
        },
        {
            "signature": "BOOL EnumDependentServicesW( [in] SC_HANDLE hService, [in] DWORD dwServiceState, [out, optional] LPENUM_SERVICE_STATUSW lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned );",
            "name": "EnumDependentServicesW"
        },
        {
            "signature": "BOOL EnumServicesStatusA( [in] SC_HANDLE hSCManager, [in] DWORD dwServiceType, [in] DWORD dwServiceState, [out, optional] LPENUM_SERVICE_STATUSA lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned, [in, out, optional] LPDWORD lpResumeHandle );",
            "name": "EnumServicesStatusA"
        },
        {
            "signature": "BOOL EnumServicesStatusExA( [in] SC_HANDLE hSCManager, [in] SC_ENUM_TYPE InfoLevel, [in] DWORD dwServiceType, [in] DWORD dwServiceState, [out, optional] LPBYTE lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned, [in, out, optional] LPDWORD lpResumeHandle, [in, optional] LPCSTR pszGroupName );",
            "name": "EnumServicesStatusExA"
        },
        {
            "signature": "BOOL EnumServicesStatusExW( [in] SC_HANDLE hSCManager, [in] SC_ENUM_TYPE InfoLevel, [in] DWORD dwServiceType, [in] DWORD dwServiceState, [out, optional] LPBYTE lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned, [in, out, optional] LPDWORD lpResumeHandle, [in, optional] LPCWSTR pszGroupName );",
            "name": "EnumServicesStatusExW"
        },
        {
            "signature": "BOOL EnumServicesStatusW( [in] SC_HANDLE hSCManager, [in] DWORD dwServiceType, [in] DWORD dwServiceState, [out, optional] LPENUM_SERVICE_STATUSW lpServices, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded, [out] LPDWORD lpServicesReturned, [in, out, optional] LPDWORD lpResumeHandle );",
            "name": "EnumServicesStatusW"
        },
        {
            "signature": "DWORD GetServiceDirectory( SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength );",
            "name": "GetServiceDirectory"
        },
        {
            "signature": "BOOL GetServiceDisplayNameA( [in] SC_HANDLE hSCManager, [in] LPCSTR lpServiceName, [out, optional] LPSTR lpDisplayName, [in, out] LPDWORD lpcchBuffer );",
            "name": "GetServiceDisplayNameA"
        },
        {
            "signature": "BOOL GetServiceDisplayNameW( [in] SC_HANDLE hSCManager, [in] LPCWSTR lpServiceName, [out, optional] LPWSTR lpDisplayName, [in, out] LPDWORD lpcchBuffer );",
            "name": "GetServiceDisplayNameW"
        },
        {
            "signature": "BOOL GetServiceKeyNameA( [in] SC_HANDLE hSCManager, [in] LPCSTR lpDisplayName, [out, optional] LPSTR lpServiceName, [in, out] LPDWORD lpcchBuffer );",
            "name": "GetServiceKeyNameA"
        },
        {
            "signature": "BOOL GetServiceKeyNameW( [in] SC_HANDLE hSCManager, [in] LPCWSTR lpDisplayName, [out, optional] LPWSTR lpServiceName, [in, out] LPDWORD lpcchBuffer );",
            "name": "GetServiceKeyNameW"
        },
        {
            "signature": "DWORD GetServiceRegistryStateKey( SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey );",
            "name": "GetServiceRegistryStateKey"
        },
        {
            "signature": "DWORD GetSharedServiceDirectory( SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength );",
            "name": "GetSharedServiceDirectory"
        },
        {
            "signature": "DWORD GetSharedServiceRegistryStateKey( SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey );",
            "name": "GetSharedServiceRegistryStateKey"
        },
        {
            "signature": "SC_LOCK LockServiceDatabase( [in] SC_HANDLE hSCManager );",
            "name": "LockServiceDatabase"
        },
        {
            "signature": "LPHANDLER_FUNCTION LphandlerFunction; void LphandlerFunction( DWORD dwControl ) {...}",
            "name": "LPHANDLER_FUNCTION callback"
        },
        {
            "signature": "LPHANDLER_FUNCTION_EX LphandlerFunctionEx; DWORD LphandlerFunctionEx( [in] DWORD dwControl, [in] DWORD dwEventType, [in] LPVOID lpEventData, [in] LPVOID lpContext ) {...}",
            "name": "LPHANDLER_FUNCTION_EX callback"
        },
        {
            "signature": "LPSERVICE_MAIN_FUNCTIONA LpserviceMainFunctiona; void LpserviceMainFunctiona( [in] DWORD dwNumServicesArgs, [in] LPSTR *lpServiceArgVectors ) {...}",
            "name": "LPSERVICE_MAIN_FUNCTIONA callback"
        },
        {
            "signature": "LPSERVICE_MAIN_FUNCTIONW LpserviceMainFunctionw; void LpserviceMainFunctionw( [in] DWORD dwNumServicesArgs, [in] LPWSTR *lpServiceArgVectors ) {...}",
            "name": "LPSERVICE_MAIN_FUNCTIONW callback"
        },
        {
            "signature": "BOOL NotifyBootConfigStatus( [in] BOOL BootAcceptable );",
            "name": "NotifyBootConfigStatus"
        },
        {
            "signature": "DWORD NotifyServiceStatusChangeA( [in] SC_HANDLE hService, [in] DWORD dwNotifyMask, [in] PSERVICE_NOTIFYA pNotifyBuffer );",
            "name": "NotifyServiceStatusChangeA"
        },
        {
            "signature": "DWORD NotifyServiceStatusChangeW( [in] SC_HANDLE hService, [in] DWORD dwNotifyMask, [in] PSERVICE_NOTIFYW pNotifyBuffer );",
            "name": "NotifyServiceStatusChangeW"
        },
        {
            "signature": "SC_HANDLE OpenSCManagerA( [in, optional] LPCSTR lpMachineName, [in, optional] LPCSTR lpDatabaseName, [in] DWORD dwDesiredAccess );",
            "name": "OpenSCManagerA"
        },
        {
            "signature": "SC_HANDLE OpenSCManagerW( [in, optional] LPCWSTR lpMachineName, [in, optional] LPCWSTR lpDatabaseName, [in] DWORD dwDesiredAccess );",
            "name": "OpenSCManagerW"
        },
        {
            "signature": "SC_HANDLE OpenServiceA( [in] SC_HANDLE hSCManager, [in] LPCSTR lpServiceName, [in] DWORD dwDesiredAccess );",
            "name": "OpenServiceA"
        },
        {
            "signature": "SC_HANDLE OpenServiceW( [in] SC_HANDLE hSCManager, [in] LPCWSTR lpServiceName, [in] DWORD dwDesiredAccess );",
            "name": "OpenServiceW"
        },
        {
            "signature": "BOOL QueryServiceConfig2A( [in] SC_HANDLE hService, [in] DWORD dwInfoLevel, [out, optional] LPBYTE lpBuffer, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceConfig2A"
        },
        {
            "signature": "BOOL QueryServiceConfig2W( [in] SC_HANDLE hService, [in] DWORD dwInfoLevel, [out, optional] LPBYTE lpBuffer, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceConfig2W"
        },
        {
            "signature": "BOOL QueryServiceConfigA( [in] SC_HANDLE hService, [out, optional] LPQUERY_SERVICE_CONFIGA lpServiceConfig, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceConfigA"
        },
        {
            "signature": "BOOL QueryServiceConfigW( [in] SC_HANDLE hService, [out, optional] LPQUERY_SERVICE_CONFIGW lpServiceConfig, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceConfigW"
        },
        {
            "signature": "BOOL QueryServiceDynamicInformation( [in] SERVICE_STATUS_HANDLE hServiceStatus, [in] DWORD dwInfoLevel, PVOID *ppDynamicInfo );",
            "name": "QueryServiceDynamicInformation"
        },
        {
            "signature": "BOOL QueryServiceLockStatusA( [in] SC_HANDLE hSCManager, [out, optional] LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceLockStatusA"
        },
        {
            "signature": "BOOL QueryServiceLockStatusW( [in] SC_HANDLE hSCManager, [out, optional] LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceLockStatusW"
        },
        {
            "signature": "BOOL QueryServiceObjectSecurity( [in] SC_HANDLE hService, [in] SECURITY_INFORMATION dwSecurityInformation, [out, optional] PSECURITY_DESCRIPTOR lpSecurityDescriptor, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceObjectSecurity"
        },
        {
            "signature": "BOOL QueryServiceStatus( [in] SC_HANDLE hService, [out] LPSERVICE_STATUS lpServiceStatus );",
            "name": "QueryServiceStatus"
        },
        {
            "signature": "BOOL QueryServiceStatusEx( [in] SC_HANDLE hService, [in] SC_STATUS_TYPE InfoLevel, [out, optional] LPBYTE lpBuffer, [in] DWORD cbBufSize, [out] LPDWORD pcbBytesNeeded );",
            "name": "QueryServiceStatusEx"
        },
        {
            "signature": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA( [in] LPCSTR lpServiceName, [in] LPHANDLER_FUNCTION lpHandlerProc );",
            "name": "RegisterServiceCtrlHandlerA"
        },
        {
            "signature": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA( [in] LPCSTR lpServiceName, [in] LPHANDLER_FUNCTION_EX lpHandlerProc, [in, optional] LPVOID lpContext );",
            "name": "RegisterServiceCtrlHandlerExA"
        },
        {
            "signature": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW( [in] LPCWSTR lpServiceName, [in] LPHANDLER_FUNCTION_EX lpHandlerProc, [in, optional] LPVOID lpContext );",
            "name": "RegisterServiceCtrlHandlerExW"
        },
        {
            "signature": "SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW( [in] LPCWSTR lpServiceName, [in] LPHANDLER_FUNCTION lpHandlerProc );",
            "name": "RegisterServiceCtrlHandlerW"
        },
        {
            "signature": "BOOL SetServiceObjectSecurity( [in] SC_HANDLE hService, [in] SECURITY_INFORMATION dwSecurityInformation, [in] PSECURITY_DESCRIPTOR lpSecurityDescriptor );",
            "name": "SetServiceObjectSecurity"
        },
        {
            "signature": "BOOL SetServiceStatus( [in] SERVICE_STATUS_HANDLE hServiceStatus, [in] LPSERVICE_STATUS lpServiceStatus );",
            "name": "SetServiceStatus"
        },
        {
            "signature": "BOOL StartServiceA( [in] SC_HANDLE hService, [in] DWORD dwNumServiceArgs, [in, optional] LPCSTR *lpServiceArgVectors );",
            "name": "StartServiceA"
        },
        {
            "signature": "BOOL StartServiceCtrlDispatcherA( [in] const SERVICE_TABLE_ENTRYA *lpServiceStartTable );",
            "name": "StartServiceCtrlDispatcherA"
        },
        {
            "signature": "BOOL StartServiceCtrlDispatcherW( [in] const SERVICE_TABLE_ENTRYW *lpServiceStartTable );",
            "name": "StartServiceCtrlDispatcherW"
        },
        {
            "signature": "BOOL StartServiceW( [in] SC_HANDLE hService, [in] DWORD dwNumServiceArgs, [in, optional] LPCWSTR *lpServiceArgVectors );",
            "name": "StartServiceW"
        },
        {
            "signature": "BOOL UnlockServiceDatabase( [in] SC_LOCK ScLock );",
            "name": "UnlockServiceDatabase"
        }
    ],
    "Winsxs.h": [
        {
            "signature": "HRESULT CreateAssemblyCache( IAssemblyCache **ppAsmCache, DWORD dwReserved );",
            "name": "CreateAssemblyCache"
        },
        {
            "signature": "HRESULT CreateAssemblyNameObject( LPASSEMBLYNAME *ppAssemblyNameObj, LPCWSTR szAssemblyName, DWORD dwFlags, LPVOID pvReserved );",
            "name": "CreateAssemblyNameObject"
        }
    ],
    "Winsync.h": [],
    "Winternl.h": [
        {
            "signature": "__kernel_entry NTSTATUS NtClose( [in] HANDLE Handle );",
            "name": "NtClose"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtCreateFile( [out] PHANDLE FileHandle, [in] ACCESS_MASK DesiredAccess, [in] POBJECT_ATTRIBUTES ObjectAttributes, [out] PIO_STATUS_BLOCK IoStatusBlock, [in, optional] PLARGE_INTEGER AllocationSize, [in] ULONG FileAttributes, [in] ULONG ShareAccess, [in] ULONG CreateDisposition, [in] ULONG CreateOptions, [in] PVOID EaBuffer, [in] ULONG EaLength );",
            "name": "NtCreateFile"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtDeviceIoControlFile( [in] HANDLE FileHandle, [in] HANDLE Event, [in] PIO_APC_ROUTINE ApcRoutine, [in] PVOID ApcContext, [out] PIO_STATUS_BLOCK IoStatusBlock, [in] ULONG IoControlCode, [in] PVOID InputBuffer, [in] ULONG InputBufferLength, [out] PVOID OutputBuffer, [in] ULONG OutputBufferLength );",
            "name": "NtDeviceIoControlFile"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtNotifyChangeMultipleKeys( [in] HANDLE MasterKeyHandle, [in, optional] ULONG Count, [in, optional] OBJECT_ATTRIBUTES [] SubordinateObjects, [in, optional] HANDLE Event, [in, optional] PIO_APC_ROUTINE ApcRoutine, [in, optional] PVOID ApcContext, [out] PIO_STATUS_BLOCK IoStatusBlock, [in] ULONG CompletionFilter, [in] BOOLEAN WatchTree, [out, optional] PVOID Buffer, [in] ULONG BufferSize, [in] BOOLEAN Asynchronous );",
            "name": "NtNotifyChangeMultipleKeys"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtOpenFile( [out] PHANDLE FileHandle, [in] ACCESS_MASK DesiredAccess, [in] POBJECT_ATTRIBUTES ObjectAttributes, [out] PIO_STATUS_BLOCK IoStatusBlock, [in] ULONG ShareAccess, [in] ULONG OpenOptions );",
            "name": "NtOpenFile"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtQueryInformationProcess( [in] HANDLE ProcessHandle, [in] PROCESSINFOCLASS ProcessInformationClass, [out] PVOID ProcessInformation, [in] ULONG ProcessInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "NtQueryInformationProcess"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtQueryInformationThread( [in] HANDLE ThreadHandle, [in] THREADINFOCLASS ThreadInformationClass, [in, out] PVOID ThreadInformation, [in] ULONG ThreadInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "NtQueryInformationThread"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtQueryMultipleValueKey( [in] HANDLE KeyHandle, [in, out] PKEY_VALUE_ENTRY ValueEntries, [in] ULONG EntryCount, [out] PVOID ValueBuffer, [in, out] PULONG BufferLength, [out, optional] PULONG RequiredBufferLength );",
            "name": "NtQueryMultipleValueKey"
        },
        {
            "signature": "__kernel_entry NTSYSCALLAPI NTSTATUS NtQueryObject( [in, optional] HANDLE Handle, [in] OBJECT_INFORMATION_CLASS ObjectInformationClass, [out, optional] PVOID ObjectInformation, [in] ULONG ObjectInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "NtQueryObject"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtQuerySystemInformation( [in] SYSTEM_INFORMATION_CLASS SystemInformationClass, [in, out] PVOID SystemInformation, [in] ULONG SystemInformationLength, [out, optional] PULONG ReturnLength );",
            "name": "NtQuerySystemInformation"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtQuerySystemTime( [out] PLARGE_INTEGER SystemTime );",
            "name": "NtQuerySystemTime"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtRenameKey( [in] HANDLE KeyHandle, [in] PUNICODE_STRING NewName );",
            "name": "NtRenameKey"
        },
        {
            "signature": "__kernel_entry NTSTATUS NtSetInformationKey( [in] HANDLE KeyHandle, [in] KEY_SET_INFORMATION_CLASS KeySetInformationClass, [in] PVOID KeySetInformation, [in] ULONG KeySetInformationLength );",
            "name": "NtSetInformationKey"
        },
        {
            "signature": "NTSTATUS NtWaitForSingleObject( [in] HANDLE Handle, [in] BOOLEAN Alertable, [in] PLARGE_INTEGER Timeout );",
            "name": "NtWaitForSingleObject"
        },
        {
            "signature": "NTSTATUS RtlAnsiStringToUnicodeString( [in, out] PUNICODE_STRING DestinationString, [in] PCANSI_STRING SourceString, [in] BOOLEAN AllocateDestinationString );",
            "name": "RtlAnsiStringToUnicodeString"
        },
        {
            "signature": "NTSTATUS RtlCharToInteger( [in] PCSZ String, [in, optional] ULONG Base, [out] PULONG Value );",
            "name": "RtlCharToInteger"
        },
        {
            "signature": "NTSTATUS RtlConvertSidToUnicodeString( [out] PUNICODE_STRING UnicodeString, [in] PSID Sid, [in] BOOLEAN AllocateDestinationString );",
            "name": "RtlConvertSidToUnicodeString"
        },
        {
            "signature": "void RtlFreeAnsiString( [in] PANSI_STRING AnsiString );",
            "name": "RtlFreeAnsiString"
        },
        {
            "signature": "void RtlFreeOemString( [in, out] POEM_STRING OemString );",
            "name": "RtlFreeOemString"
        },
        {
            "signature": "void RtlFreeUnicodeString( [in, out] PUNICODE_STRING UnicodeString );",
            "name": "RtlFreeUnicodeString"
        },
        {
            "signature": "void RtlInitString( [in, out] PSTRING DestinationString, [in] PCSZ SourceString );",
            "name": "RtlInitString"
        },
        {
            "signature": "void RtlInitUnicodeString( [in, out] PUNICODE_STRING DestinationString, [in, optional] PCWSTR SourceString );",
            "name": "RtlInitUnicodeString"
        },
        {
            "signature": "BOOLEAN RtlIsNameLegalDOS8Dot3( [in] PUNICODE_STRING Name, [in, out, optional] POEM_STRING OemName, [out, optional] PBOOLEAN NameContainsSpaces );",
            "name": "RtlIsNameLegalDOS8Dot3"
        },
        {
            "signature": "NTSTATUS RtlLocalTimeToSystemTime( [in] PLARGE_INTEGER LocalTime, [out] PLARGE_INTEGER SystemTime );",
            "name": "RtlLocalTimeToSystemTime"
        },
        {
            "signature": "ULONG RtlNtStatusToDosError( [in] NTSTATUS Status );",
            "name": "RtlNtStatusToDosError"
        },
        {
            "signature": "BOOLEAN RtlTimeToSecondsSince1970( [in] PLARGE_INTEGER Time, [out] PULONG ElapsedSeconds );",
            "name": "RtlTimeToSecondsSince1970"
        },
        {
            "signature": "NTSTATUS RtlUnicodeStringToAnsiString( [in, out] PANSI_STRING DestinationString, [in] PCUNICODE_STRING SourceString, [in] BOOLEAN AllocateDestinationString );",
            "name": "RtlUnicodeStringToAnsiString"
        },
        {
            "signature": "NTSTATUS RtlUnicodeStringToOemString( [out] POEM_STRING DestinationString, [in] PCUNICODE_STRING SourceString, [in] BOOLEAN AllocateDestinationString );",
            "name": "RtlUnicodeStringToOemString"
        },
        {
            "signature": "NTSTATUS RtlUnicodeToMultiByteSize( [out] PULONG BytesInMultiByteString, [in] PWCH UnicodeString, [in] ULONG BytesInUnicodeString );",
            "name": "RtlUnicodeToMultiByteSize"
        },
        {
            "signature": "ULONG RtlUniform( [in, out] PULONG Seed );",
            "name": "RtlUniform"
        }
    ],
    "Wintrust.h": [
        {
            "signature": "BOOL OpenPersonalTrustDBDialog( [in, optional] HWND hwndParent );",
            "name": "OpenPersonalTrustDBDialog"
        },
        {
            "signature": "BOOL OpenPersonalTrustDBDialogEx( [in, optional] HWND hwndParent, [in] DWORD dwFlags, [in, out, optional] PVOID *pvReserved );",
            "name": "OpenPersonalTrustDBDialogEx"
        },
        {
            "signature": "BOOL WintrustAddActionID( [in] GUID *pgActionID, [in] DWORD fdwFlags, [in] CRYPT_REGISTER_ACTIONID *psProvInfo );",
            "name": "WintrustAddActionID"
        },
        {
            "signature": "BOOL WintrustAddDefaultForUsage( [in] const char *pszUsageOID, [in] CRYPT_PROVIDER_REGDEFUSAGE *psDefUsage );",
            "name": "WintrustAddDefaultForUsage"
        },
        {
            "signature": "BOOL WintrustGetDefaultForUsage( [in] DWORD dwAction, [in] const char *pszUsageOID, [in, out] CRYPT_PROVIDER_DEFUSAGE *psUsage );",
            "name": "WintrustGetDefaultForUsage"
        },
        {
            "signature": "void WintrustGetRegPolicyFlags( [out] DWORD *pdwPolicyFlags );",
            "name": "WintrustGetRegPolicyFlags"
        },
        {
            "signature": "BOOL WintrustLoadFunctionPointers( [in] GUID *pgActionID, [out] CRYPT_PROVIDER_FUNCTIONS *pPfns );",
            "name": "WintrustLoadFunctionPointers"
        },
        {
            "signature": "BOOL WintrustRemoveActionID( [in] GUID *pgActionID );",
            "name": "WintrustRemoveActionID"
        },
        {
            "signature": "void WintrustSetDefaultIncludePEPageHashes( [in] BOOL fIncludePEPageHashes );",
            "name": "WintrustSetDefaultIncludePEPageHashes"
        },
        {
            "signature": "BOOL WintrustSetRegPolicyFlags( [in] DWORD dwPolicyFlags );",
            "name": "WintrustSetRegPolicyFlags"
        },
        {
            "signature": "LONG WinVerifyTrust( [in] HWND hwnd, [in] GUID *pgActionID, [in] LPVOID pWVTData );",
            "name": "WinVerifyTrust"
        },
        {
            "signature": "long WinVerifyTrustEx( [in] HWND hwnd, [in] GUID *pgActionID, [in] WINTRUST_DATA *pWinTrustData );",
            "name": "WinVerifyTrustEx"
        },
        {
            "signature": "HRESULT WTHelperCertCheckValidSignature( CRYPT_PROVIDER_DATA *pProvData );",
            "name": "WTHelperCertCheckValidSignature"
        },
        {
            "signature": "BOOL WTHelperCertIsSelfSigned( [in] DWORD dwEncoding, [in] CERT_INFO *pCert );",
            "name": "WTHelperCertIsSelfSigned"
        },
        {
            "signature": "CRYPT_PROVIDER_CERT * WTHelperGetProvCertFromChain( [in] CRYPT_PROVIDER_SGNR *pSgnr, [in] DWORD idxCert );",
            "name": "WTHelperGetProvCertFromChain"
        },
        {
            "signature": "CRYPT_PROVIDER_PRIVDATA * WTHelperGetProvPrivateDataFromChain( [in] CRYPT_PROVIDER_DATA *pProvData, GUID *pgProviderID );",
            "name": "WTHelperGetProvPrivateDataFromChain"
        },
        {
            "signature": "CRYPT_PROVIDER_SGNR * WTHelperGetProvSignerFromChain( [in] CRYPT_PROVIDER_DATA *pProvData, [in] DWORD idxSigner, [in] BOOL fCounterSigner, [in] DWORD idxCounterSigner );",
            "name": "WTHelperGetProvSignerFromChain"
        },
        {
            "signature": "CRYPT_PROVIDER_DATA * WTHelperProvDataFromStateData( [in] HANDLE hStateData );",
            "name": "WTHelperProvDataFromStateData"
        }
    ],
    "Winusb.h": [
        {
            "signature": "BOOL WinUsb_AbortPipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID );",
            "name": "WinUsb_AbortPipe"
        },
        {
            "signature": "BOOL WinUsb_ControlTransfer( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] WINUSB_SETUP_PACKET SetupPacket, [out] PUCHAR Buffer, [in] ULONG BufferLength, [out, optional] PULONG LengthTransferred, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_ControlTransfer"
        },
        {
            "signature": "BOOL WinUsb_FlushPipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID );",
            "name": "WinUsb_FlushPipe"
        },
        {
            "signature": "BOOL WinUsb_Free( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle );",
            "name": "WinUsb_Free"
        },
        {
            "signature": "BOOL WinUsb_GetAdjustedFrameNumber( [in, out] PULONG CurrentFrameNumber, [in] LARGE_INTEGER TimeStamp );",
            "name": "WinUsb_GetAdjustedFrameNumber"
        },
        {
            "signature": "BOOL WinUsb_GetAssociatedInterface( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR AssociatedInterfaceIndex, [out] PWINUSB_INTERFACE_HANDLE AssociatedInterfaceHandle );",
            "name": "WinUsb_GetAssociatedInterface"
        },
        {
            "signature": "BOOL WinUsb_GetCurrentAlternateSetting( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [out] PUCHAR SettingNumber );",
            "name": "WinUsb_GetCurrentAlternateSetting"
        },
        {
            "signature": "BOOL WinUsb_GetCurrentFrameNumber( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [out] PULONG CurrentFrameNumber, [out] LARGE_INTEGER *TimeStamp );",
            "name": "WinUsb_GetCurrentFrameNumber"
        },
        {
            "signature": "BOOL WinUsb_GetCurrentFrameNumberAndQpc( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] PUSB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION FrameQpcInfo );",
            "name": "WinUsb_GetCurrentFrameNumberAndQpc"
        },
        {
            "signature": "BOOL WinUsb_GetDescriptor( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR DescriptorType, [in] UCHAR Index, [in] USHORT LanguageID, [out] PUCHAR Buffer, [in] ULONG BufferLength, [out] PULONG LengthTransferred );",
            "name": "WinUsb_GetDescriptor"
        },
        {
            "signature": "BOOL WinUsb_GetOverlappedResult( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] LPOVERLAPPED lpOverlapped, [out] LPDWORD lpNumberOfBytesTransferred, [in] BOOL bWait );",
            "name": "WinUsb_GetOverlappedResult"
        },
        {
            "signature": "BOOL WinUsb_GetPipePolicy( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID, [in] ULONG PolicyType, [in, out] PULONG ValueLength, [out] PVOID Value );",
            "name": "WinUsb_GetPipePolicy"
        },
        {
            "signature": "BOOL WinUsb_GetPowerPolicy( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] ULONG PolicyType, [in, out] PULONG ValueLength, [out] PVOID Value );",
            "name": "WinUsb_GetPowerPolicy"
        },
        {
            "signature": "BOOL WinUsb_Initialize( [in] HANDLE DeviceHandle, [out] PWINUSB_INTERFACE_HANDLE InterfaceHandle );",
            "name": "WinUsb_Initialize"
        },
        {
            "signature": "BOOL WinUsb_QueryDeviceInformation( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] ULONG InformationType, [in, out] PULONG BufferLength, [out] PVOID Buffer );",
            "name": "WinUsb_QueryDeviceInformation"
        },
        {
            "signature": "BOOL WinUsb_QueryInterfaceSettings( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR AlternateInterfaceNumber, [out] PUSB_INTERFACE_DESCRIPTOR UsbAltInterfaceDescriptor );",
            "name": "WinUsb_QueryInterfaceSettings"
        },
        {
            "signature": "BOOL WinUsb_QueryPipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR AlternateInterfaceNumber, [in] UCHAR PipeIndex, [out] PWINUSB_PIPE_INFORMATION PipeInformation );",
            "name": "WinUsb_QueryPipe"
        },
        {
            "signature": "BOOL WinUsb_QueryPipeEx( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR AlternateSettingNumber, [in] UCHAR PipeIndex, [out] PWINUSB_PIPE_INFORMATION_EX PipeInformationEx );",
            "name": "WinUsb_QueryPipeEx"
        },
        {
            "signature": "BOOL WinUsb_ReadIsochPipe( [in] WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, [in] ULONG Offset, [in] ULONG Length, [in, out] PULONG FrameNumber, [in] ULONG NumberOfPackets, [out] PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_ReadIsochPipe"
        },
        {
            "signature": "BOOL WinUsb_ReadIsochPipeAsap( [in] WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, [in] ULONG Offset, [in] ULONG Length, [in] BOOL ContinueStream, [in] ULONG NumberOfPackets, PUSBD_ISO_PACKET_DESCRIPTOR IsoPacketDescriptors, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_ReadIsochPipeAsap"
        },
        {
            "signature": "BOOL WinUsb_ReadPipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID, [out] PUCHAR Buffer, [in] ULONG BufferLength, [out, optional] PULONG LengthTransferred, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_ReadPipe"
        },
        {
            "signature": "BOOL WinUsb_RegisterIsochBuffer( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID, [in] PUCHAR Buffer, [in] ULONG BufferLength, [out] PWINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle );",
            "name": "WinUsb_RegisterIsochBuffer"
        },
        {
            "signature": "BOOL WinUsb_ResetPipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID );",
            "name": "WinUsb_ResetPipe"
        },
        {
            "signature": "BOOL WinUsb_SetCurrentAlternateSetting( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR SettingNumber );",
            "name": "WinUsb_SetCurrentAlternateSetting"
        },
        {
            "signature": "BOOL WinUsb_SetPipePolicy( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID, [in] ULONG PolicyType, [in] ULONG ValueLength, [in] PVOID Value );",
            "name": "WinUsb_SetPipePolicy"
        },
        {
            "signature": "BOOL WinUsb_SetPowerPolicy( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] ULONG PolicyType, [in] ULONG ValueLength, [in] PVOID Value );",
            "name": "WinUsb_SetPowerPolicy"
        },
        {
            "signature": "BOOL WinUsb_StartTrackingForTimeSync( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] PUSB_START_TRACKING_FOR_TIME_SYNC_INFORMATION StartTrackingInfo );",
            "name": "WinUsb_StartTrackingForTimeSync"
        },
        {
            "signature": "BOOL WinUsb_StopTrackingForTimeSync( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] PUSB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION StopTrackingInfo );",
            "name": "WinUsb_StopTrackingForTimeSync"
        },
        {
            "signature": "BOOL WinUsb_UnregisterIsochBuffer( [in] WINUSB_ISOCH_BUFFER_HANDLE IsochBufferHandle );",
            "name": "WinUsb_UnregisterIsochBuffer"
        },
        {
            "signature": "BOOL WinUsb_WriteIsochPipe( [in] WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, [in] ULONG Offset, [in] ULONG Length, [in, out] PULONG FrameNumber, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_WriteIsochPipe"
        },
        {
            "signature": "BOOL WinUsb_WriteIsochPipeAsap( [in] WINUSB_ISOCH_BUFFER_HANDLE BufferHandle, [in] ULONG Offset, [in] ULONG Length, [in] BOOL ContinueStream, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_WriteIsochPipeAsap"
        },
        {
            "signature": "BOOL WinUsb_WritePipe( [in] WINUSB_INTERFACE_HANDLE InterfaceHandle, [in] UCHAR PipeID, [in] PUCHAR Buffer, [in] ULONG BufferLength, [out, optional] PULONG LengthTransferred, [in, optional] LPOVERLAPPED Overlapped );",
            "name": "WinUsb_WritePipe"
        }
    ],
    "Winusbio.h": [],
    "Winuser.h": [
        {
            "signature": "HKL ActivateKeyboardLayout( [in] HKL hkl, [in] UINT Flags );",
            "name": "ActivateKeyboardLayout"
        },
        {
            "signature": "BOOL AddClipboardFormatListener( [in] HWND hwnd );",
            "name": "AddClipboardFormatListener"
        },
        {
            "signature": "BOOL AdjustWindowRect( [in, out] LPRECT lpRect, [in] DWORD dwStyle, [in] BOOL bMenu );",
            "name": "AdjustWindowRect"
        },
        {
            "signature": "BOOL AdjustWindowRectEx( [in, out] LPRECT lpRect, [in] DWORD dwStyle, [in] BOOL bMenu, [in] DWORD dwExStyle );",
            "name": "AdjustWindowRectEx"
        },
        {
            "signature": "BOOL AdjustWindowRectExForDpi( [in, out] LPRECT lpRect, [in] DWORD dwStyle, [in] BOOL bMenu, [in] DWORD dwExStyle, [in] UINT dpi );",
            "name": "AdjustWindowRectExForDpi"
        },
        {
            "signature": "BOOL AllowSetForegroundWindow( [in] DWORD dwProcessId );",
            "name": "AllowSetForegroundWindow"
        },
        {
            "signature": "BOOL AnimateWindow( [in] HWND hWnd, [in] DWORD dwTime, [in] DWORD dwFlags );",
            "name": "AnimateWindow"
        },
        {
            "signature": "BOOL AnyPopup();",
            "name": "AnyPopup"
        },
        {
            "signature": "BOOL AppendMenuA( [in] HMENU hMenu, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCSTR lpNewItem );",
            "name": "AppendMenuA"
        },
        {
            "signature": "BOOL AppendMenuW( [in] HMENU hMenu, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCWSTR lpNewItem );",
            "name": "AppendMenuW"
        },
        {
            "signature": "BOOL AreDpiAwarenessContextsEqual( [in] DPI_AWARENESS_CONTEXT dpiContextA, [in] DPI_AWARENESS_CONTEXT dpiContextB );",
            "name": "AreDpiAwarenessContextsEqual"
        },
        {
            "signature": "UINT ArrangeIconicWindows( [in] HWND hWnd );",
            "name": "ArrangeIconicWindows"
        },
        {
            "signature": "BOOL AttachThreadInput( [in] DWORD idAttach, [in] DWORD idAttachTo, [in] BOOL fAttach );",
            "name": "AttachThreadInput"
        },
        {
            "signature": "HDWP BeginDeferWindowPos( [in] int nNumWindows );",
            "name": "BeginDeferWindowPos"
        },
        {
            "signature": "HDC BeginPaint( [in] HWND hWnd, [out] LPPAINTSTRUCT lpPaint );",
            "name": "BeginPaint"
        },
        {
            "signature": "BOOL BlockInput( [in] BOOL fBlockIt );",
            "name": "BlockInput"
        },
        {
            "signature": "BOOL BringWindowToTop( [in] HWND hWnd );",
            "name": "BringWindowToTop"
        },
        {
            "signature": "long BroadcastSystemMessage( [in] DWORD flags, [in, out, optional] LPDWORD lpInfo, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "BroadcastSystemMessage"
        },
        {
            "signature": "long BroadcastSystemMessageA( [in] DWORD flags, [in, out, optional] LPDWORD lpInfo, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "BroadcastSystemMessageA"
        },
        {
            "signature": "long BroadcastSystemMessageExA( [in] DWORD flags, [in, out, optional] LPDWORD lpInfo, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [out, optional] PBSMINFO pbsmInfo );",
            "name": "BroadcastSystemMessageExA"
        },
        {
            "signature": "long BroadcastSystemMessageExW( [in] DWORD flags, [in, out, optional] LPDWORD lpInfo, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [out, optional] PBSMINFO pbsmInfo );",
            "name": "BroadcastSystemMessageExW"
        },
        {
            "signature": "long BroadcastSystemMessageW( [in] DWORD flags, [in, out, optional] LPDWORD lpInfo, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "BroadcastSystemMessageW"
        },
        {
            "signature": "BOOL CalculatePopupWindowPosition( [in] const POINT *anchorPoint, [in] const SIZE *windowSize, [in] UINT flags, [in, optional] RECT *excludeRect, [out] RECT *popupWindowPosition );",
            "name": "CalculatePopupWindowPosition"
        },
        {
            "signature": "BOOL CallMsgFilterA( [in] LPMSG lpMsg, [in] int nCode );",
            "name": "CallMsgFilterA"
        },
        {
            "signature": "BOOL CallMsgFilterW( [in] LPMSG lpMsg, [in] int nCode );",
            "name": "CallMsgFilterW"
        },
        {
            "signature": "LRESULT CallNextHookEx( [in, optional] HHOOK hhk, [in] int nCode, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "CallNextHookEx"
        },
        {
            "signature": "LRESULT CallWindowProcA( [in] WNDPROC lpPrevWndFunc, [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "CallWindowProcA"
        },
        {
            "signature": "LRESULT CallWindowProcW( [in] WNDPROC lpPrevWndFunc, [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "CallWindowProcW"
        },
        {
            "signature": "WORD CascadeWindows( [in, optional] HWND hwndParent, [in] UINT wHow, [in, optional] const RECT *lpRect, [in] UINT cKids, [in, optional] const HWND *lpKids );",
            "name": "CascadeWindows"
        },
        {
            "signature": "BOOL ChangeClipboardChain( [in] HWND hWndRemove, [in] HWND hWndNewNext );",
            "name": "ChangeClipboardChain"
        },
        {
            "signature": "LONG ChangeDisplaySettingsA( [in] DEVMODEA *lpDevMode, [in] DWORD dwFlags );",
            "name": "ChangeDisplaySettingsA"
        },
        {
            "signature": "LONG ChangeDisplaySettingsExA( [in] LPCSTR lpszDeviceName, [in] DEVMODEA *lpDevMode, HWND hwnd, [in] DWORD dwflags, [in] LPVOID lParam );",
            "name": "ChangeDisplaySettingsExA"
        },
        {
            "signature": "LONG ChangeDisplaySettingsExW( [in] LPCWSTR lpszDeviceName, [in] DEVMODEW *lpDevMode, HWND hwnd, [in] DWORD dwflags, [in] LPVOID lParam );",
            "name": "ChangeDisplaySettingsExW"
        },
        {
            "signature": "LONG ChangeDisplaySettingsW( [in] DEVMODEW *lpDevMode, [in] DWORD dwFlags );",
            "name": "ChangeDisplaySettingsW"
        },
        {
            "signature": "BOOL ChangeWindowMessageFilter( [in] UINT message, [in] DWORD dwFlag );",
            "name": "ChangeWindowMessageFilter"
        },
        {
            "signature": "BOOL ChangeWindowMessageFilterEx( [in] HWND hwnd, [in] UINT message, [in] DWORD action, [in, out, optional] PCHANGEFILTERSTRUCT pChangeFilterStruct );",
            "name": "ChangeWindowMessageFilterEx"
        },
        {
            "signature": "LPSTR CharLowerA( [in, out] LPSTR lpsz );",
            "name": "CharLowerA"
        },
        {
            "signature": "DWORD CharLowerBuffA( [in, out] LPSTR lpsz, [in] DWORD cchLength );",
            "name": "CharLowerBuffA"
        },
        {
            "signature": "DWORD CharLowerBuffW( [in, out] LPWSTR lpsz, [in] DWORD cchLength );",
            "name": "CharLowerBuffW"
        },
        {
            "signature": "LPWSTR CharLowerW( [in, out] LPWSTR lpsz );",
            "name": "CharLowerW"
        },
        {
            "signature": "LPSTR CharNextA( [in] LPCSTR lpsz );",
            "name": "CharNextA"
        },
        {
            "signature": "LPSTR CharNextExA( [in] WORD CodePage, [in] LPCSTR lpCurrentChar, [in] DWORD dwFlags );",
            "name": "CharNextExA"
        },
        {
            "signature": "LPWSTR CharNextW( [in] LPCWSTR lpsz );",
            "name": "CharNextW"
        },
        {
            "signature": "LPSTR CharPrevA( [in] LPCSTR lpszStart, [in] LPCSTR lpszCurrent );",
            "name": "CharPrevA"
        },
        {
            "signature": "LPSTR CharPrevExA( [in] WORD CodePage, [in] LPCSTR lpStart, [in] LPCSTR lpCurrentChar, [in] DWORD dwFlags );",
            "name": "CharPrevExA"
        },
        {
            "signature": "LPWSTR CharPrevW( [in] LPCWSTR lpszStart, [in] LPCWSTR lpszCurrent );",
            "name": "CharPrevW"
        },
        {
            "signature": "BOOL CharToOemA( [in] LPCSTR pSrc, [out] LPSTR pDst );",
            "name": "CharToOemA"
        },
        {
            "signature": "BOOL CharToOemBuffA( [in] LPCSTR lpszSrc, [out] LPSTR lpszDst, [in] DWORD cchDstLength );",
            "name": "CharToOemBuffA"
        },
        {
            "signature": "BOOL CharToOemBuffW( [in] LPCWSTR lpszSrc, [out] LPSTR lpszDst, [in] DWORD cchDstLength );",
            "name": "CharToOemBuffW"
        },
        {
            "signature": "BOOL CharToOemW( [in] LPCWSTR pSrc, [out] LPSTR pDst );",
            "name": "CharToOemW"
        },
        {
            "signature": "LPSTR CharUpperA( [in, out] LPSTR lpsz );",
            "name": "CharUpperA"
        },
        {
            "signature": "DWORD CharUpperBuffA( [in, out] LPSTR lpsz, [in] DWORD cchLength );",
            "name": "CharUpperBuffA"
        },
        {
            "signature": "DWORD CharUpperBuffW( [in, out] LPWSTR lpsz, [in] DWORD cchLength );",
            "name": "CharUpperBuffW"
        },
        {
            "signature": "LPWSTR CharUpperW( [in, out] LPWSTR lpsz );",
            "name": "CharUpperW"
        },
        {
            "signature": "BOOL CheckDlgButton( [in] HWND hDlg, [in] int nIDButton, [in] UINT uCheck );",
            "name": "CheckDlgButton"
        },
        {
            "signature": "DWORD CheckMenuItem( [in] HMENU hMenu, [in] UINT uIDCheckItem, [in] UINT uCheck );",
            "name": "CheckMenuItem"
        },
        {
            "signature": "BOOL CheckMenuRadioItem( [in] HMENU hmenu, [in] UINT first, [in] UINT last, [in] UINT check, [in] UINT flags );",
            "name": "CheckMenuRadioItem"
        },
        {
            "signature": "BOOL CheckRadioButton( [in] HWND hDlg, [in] int nIDFirstButton, [in] int nIDLastButton, [in] int nIDCheckButton );",
            "name": "CheckRadioButton"
        },
        {
            "signature": "HWND ChildWindowFromPoint( [in] HWND hWndParent, [in] POINT Point );",
            "name": "ChildWindowFromPoint"
        },
        {
            "signature": "HWND ChildWindowFromPointEx( [in] HWND hwnd, [in] POINT pt, [in] UINT flags );",
            "name": "ChildWindowFromPointEx"
        },
        {
            "signature": "BOOL ClientToScreen( [in] HWND hWnd, [in, out] LPPOINT lpPoint );",
            "name": "ClientToScreen"
        },
        {
            "signature": "BOOL ClipCursor( [in, optional] const RECT *lpRect );",
            "name": "ClipCursor"
        },
        {
            "signature": "BOOL CloseClipboard();",
            "name": "CloseClipboard"
        },
        {
            "signature": "BOOL CloseDesktop( [in] HDESK hDesktop );",
            "name": "CloseDesktop"
        },
        {
            "signature": "BOOL CloseGestureInfoHandle( HGESTUREINFO hGestureInfo );",
            "name": "CloseGestureInfoHandle"
        },
        {
            "signature": "BOOL CloseTouchInputHandle( [in] HTOUCHINPUT hTouchInput );",
            "name": "CloseTouchInputHandle"
        },
        {
            "signature": "BOOL CloseWindow( [in] HWND hWnd );",
            "name": "CloseWindow"
        },
        {
            "signature": "BOOL CloseWindowStation( [in] HWINSTA hWinSta );",
            "name": "CloseWindowStation"
        },
        {
            "signature": "int CopyAcceleratorTableA( [in] HACCEL hAccelSrc, [out, optional] LPACCEL lpAccelDst, [in] int cAccelEntries );",
            "name": "CopyAcceleratorTableA"
        },
        {
            "signature": "int CopyAcceleratorTableW( [in] HACCEL hAccelSrc, [out, optional] LPACCEL lpAccelDst, [in] int cAccelEntries );",
            "name": "CopyAcceleratorTableW"
        },
        {
            "signature": "HICON CopyIcon( [in] HICON hIcon );",
            "name": "CopyIcon"
        },
        {
            "signature": "HANDLE CopyImage( [in] HANDLE h, [in] UINT type, [in] int cx, [in] int cy, [in] UINT flags );",
            "name": "CopyImage"
        },
        {
            "signature": "BOOL CopyRect( [out] LPRECT lprcDst, [in] const RECT *lprcSrc );",
            "name": "CopyRect"
        },
        {
            "signature": "int CountClipboardFormats();",
            "name": "CountClipboardFormats"
        },
        {
            "signature": "HACCEL CreateAcceleratorTableA( [in] LPACCEL paccel, [in] int cAccel );",
            "name": "CreateAcceleratorTableA"
        },
        {
            "signature": "HACCEL CreateAcceleratorTableW( [in] LPACCEL paccel, [in] int cAccel );",
            "name": "CreateAcceleratorTableW"
        },
        {
            "signature": "BOOL CreateCaret( [in] HWND hWnd, [in, optional] HBITMAP hBitmap, [in] int nWidth, [in] int nHeight );",
            "name": "CreateCaret"
        },
        {
            "signature": "HCURSOR CreateCursor( [in, optional] HINSTANCE hInst, [in] int xHotSpot, [in] int yHotSpot, [in] int nWidth, [in] int nHeight, [in] const VOID *pvANDPlane, [in] const VOID *pvXORPlane );",
            "name": "CreateCursor"
        },
        {
            "signature": "HDESK CreateDesktopA( [in] LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, [in] DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa );",
            "name": "CreateDesktopA"
        },
        {
            "signature": "HDESK CreateDesktopExA( [in] LPCSTR lpszDesktop, LPCSTR lpszDevice, DEVMODEA *pDevmode, [in] DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa, [in] ULONG ulHeapSize, PVOID pvoid );",
            "name": "CreateDesktopExA"
        },
        {
            "signature": "HDESK CreateDesktopExW( [in] LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, [in] DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa, [in] ULONG ulHeapSize, PVOID pvoid );",
            "name": "CreateDesktopExW"
        },
        {
            "signature": "HDESK CreateDesktopW( [in] LPCWSTR lpszDesktop, LPCWSTR lpszDevice, DEVMODEW *pDevmode, [in] DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa );",
            "name": "CreateDesktopW"
        },
        {
            "signature": "HWND CreateDialogIndirectParamA( [in, optional] HINSTANCE hInstance, [in] LPCDLGTEMPLATEA lpTemplate, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "CreateDialogIndirectParamA"
        },
        {
            "signature": "HWND CreateDialogIndirectParamW( [in, optional] HINSTANCE hInstance, [in] LPCDLGTEMPLATEW lpTemplate, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "CreateDialogIndirectParamW"
        },
        {
            "signature": "HWND CreateDialogParamA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpTemplateName, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "CreateDialogParamA"
        },
        {
            "signature": "HWND CreateDialogParamW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpTemplateName, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "CreateDialogParamW"
        },
        {
            "signature": "HICON CreateIcon( [in, optional] HINSTANCE hInstance, [in] int nWidth, [in] int nHeight, [in] BYTE cPlanes, [in] BYTE cBitsPixel, [in] const BYTE *lpbANDbits, [in] const BYTE *lpbXORbits );",
            "name": "CreateIcon"
        },
        {
            "signature": "HICON CreateIconFromResource( [in] PBYTE presbits, [in] DWORD dwResSize, [in] BOOL fIcon, [in] DWORD dwVer );",
            "name": "CreateIconFromResource"
        },
        {
            "signature": "HICON CreateIconFromResourceEx( [in] PBYTE presbits, [in] DWORD dwResSize, [in] BOOL fIcon, [in] DWORD dwVer, [in] int cxDesired, [in] int cyDesired, [in] UINT Flags );",
            "name": "CreateIconFromResourceEx"
        },
        {
            "signature": "HICON CreateIconIndirect( [in] PICONINFO piconinfo );",
            "name": "CreateIconIndirect"
        },
        {
            "signature": "HWND CreateMDIWindowA( [in] LPCSTR lpClassName, [in] LPCSTR lpWindowName, [in] DWORD dwStyle, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight, [in, optional] HWND hWndParent, [in, optional] HINSTANCE hInstance, [in] LPARAM lParam );",
            "name": "CreateMDIWindowA"
        },
        {
            "signature": "HWND CreateMDIWindowW( [in] LPCWSTR lpClassName, [in] LPCWSTR lpWindowName, [in] DWORD dwStyle, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight, [in, optional] HWND hWndParent, [in, optional] HINSTANCE hInstance, [in] LPARAM lParam );",
            "name": "CreateMDIWindowW"
        },
        {
            "signature": "HMENU CreateMenu();",
            "name": "CreateMenu"
        },
        {
            "signature": "HMENU CreatePopupMenu();",
            "name": "CreatePopupMenu"
        },
        {
            "signature": "HSYNTHETICPOINTERDEVICE CreateSyntheticPointerDevice( [in] POINTER_INPUT_TYPE pointerType, [in] ULONG maxCount, [in] POINTER_FEEDBACK_MODE mode );",
            "name": "CreateSyntheticPointerDevice"
        },
        {
            "signature": "HWND CreateWindowExA( [in] DWORD dwExStyle, [in, optional] LPCSTR lpClassName, [in, optional] LPCSTR lpWindowName, [in] DWORD dwStyle, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight, [in, optional] HWND hWndParent, [in, optional] HMENU hMenu, [in, optional] HINSTANCE hInstance, [in, optional] LPVOID lpParam );",
            "name": "CreateWindowExA"
        },
        {
            "signature": "HWND CreateWindowExW( [in] DWORD dwExStyle, [in, optional] LPCWSTR lpClassName, [in, optional] LPCWSTR lpWindowName, [in] DWORD dwStyle, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight, [in, optional] HWND hWndParent, [in, optional] HMENU hMenu, [in, optional] HINSTANCE hInstance, [in, optional] LPVOID lpParam );",
            "name": "CreateWindowExW"
        },
        {
            "signature": "HWINSTA CreateWindowStationA( [in, optional] LPCSTR lpwinsta, DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa );",
            "name": "CreateWindowStationA"
        },
        {
            "signature": "HWINSTA CreateWindowStationW( [in, optional] LPCWSTR lpwinsta, DWORD dwFlags, [in] ACCESS_MASK dwDesiredAccess, [in, optional] LPSECURITY_ATTRIBUTES lpsa );",
            "name": "CreateWindowStationW"
        },
        {
            "signature": "LRESULT LRESULT DefDlgProcA( [in] HWND hDlg, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefDlgProcA"
        },
        {
            "signature": "LRESULT LRESULT DefDlgProcW( [in] HWND hDlg, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefDlgProcW"
        },
        {
            "signature": "HDWP DeferWindowPos( [in] HDWP hWinPosInfo, [in] HWND hWnd, [in, optional] HWND hWndInsertAfter, [in] int x, [in] int y, [in] int cx, [in] int cy, [in] UINT uFlags );",
            "name": "DeferWindowPos"
        },
        {
            "signature": "LRESULT DefFrameProcA( [in] HWND hWnd, [in] HWND hWndMDIClient, [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefFrameProcA"
        },
        {
            "signature": "LRESULT DefFrameProcW( [in] HWND hWnd, [in] HWND hWndMDIClient, [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefFrameProcW"
        },
        {
            "signature": "LRESULT LRESULT DefMDIChildProcA( [in] HWND hWnd, [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefMDIChildProcA"
        },
        {
            "signature": "LRESULT LRESULT DefMDIChildProcW( [in] HWND hWnd, [in] UINT uMsg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefMDIChildProcW"
        },
        {
            "signature": "LRESULT DefRawInputProc( [in] PRAWINPUT *paRawInput, [in] INT nInput, [in] UINT cbSizeHeader );",
            "name": "DefRawInputProc"
        },
        {
            "signature": "LRESULT DefWindowProcA( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefWindowProcA"
        },
        {
            "signature": "LRESULT DefWindowProcW( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "DefWindowProcW"
        },
        {
            "signature": "BOOL DeleteMenu( [in] HMENU hMenu, [in] UINT uPosition, [in] UINT uFlags );",
            "name": "DeleteMenu"
        },
        {
            "signature": "BOOL DeregisterShellHookWindow( [in] HWND hwnd );",
            "name": "DeregisterShellHookWindow"
        },
        {
            "signature": "BOOL DestroyAcceleratorTable( [in] HACCEL hAccel );",
            "name": "DestroyAcceleratorTable"
        },
        {
            "signature": "BOOL DestroyCaret();",
            "name": "DestroyCaret"
        },
        {
            "signature": "BOOL DestroyCursor( [in] HCURSOR hCursor );",
            "name": "DestroyCursor"
        },
        {
            "signature": "BOOL DestroyIcon( [in] HICON hIcon );",
            "name": "DestroyIcon"
        },
        {
            "signature": "BOOL DestroyMenu( [in] HMENU hMenu );",
            "name": "DestroyMenu"
        },
        {
            "signature": "void DestroySyntheticPointerDevice( [in] HSYNTHETICPOINTERDEVICE device );",
            "name": "DestroySyntheticPointerDevice"
        },
        {
            "signature": "BOOL DestroyWindow( [in] HWND hWnd );",
            "name": "DestroyWindow"
        },
        {
            "signature": "INT_PTR DialogBoxIndirectParamA( [in, optional] HINSTANCE hInstance, [in] LPCDLGTEMPLATEA hDialogTemplate, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "DialogBoxIndirectParamA"
        },
        {
            "signature": "INT_PTR DialogBoxIndirectParamW( [in, optional] HINSTANCE hInstance, [in] LPCDLGTEMPLATEW hDialogTemplate, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "DialogBoxIndirectParamW"
        },
        {
            "signature": "INT_PTR DialogBoxParamA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpTemplateName, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "DialogBoxParamA"
        },
        {
            "signature": "INT_PTR DialogBoxParamW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpTemplateName, [in, optional] HWND hWndParent, [in, optional] DLGPROC lpDialogFunc, [in] LPARAM dwInitParam );",
            "name": "DialogBoxParamW"
        },
        {
            "signature": "void DisableProcessWindowsGhosting();",
            "name": "DisableProcessWindowsGhosting"
        },
        {
            "signature": "LRESULT DispatchMessage( [in] const MSG *lpMsg );",
            "name": "DispatchMessage"
        },
        {
            "signature": "LRESULT DispatchMessageA( [in] const MSG *lpMsg );",
            "name": "DispatchMessageA"
        },
        {
            "signature": "LRESULT DispatchMessageW( [in] const MSG *lpMsg );",
            "name": "DispatchMessageW"
        },
        {
            "signature": "LONG DisplayConfigGetDeviceInfo( [in, out] DISPLAYCONFIG_DEVICE_INFO_HEADER *requestPacket );",
            "name": "DisplayConfigGetDeviceInfo"
        },
        {
            "signature": "LONG DisplayConfigSetDeviceInfo( [in] DISPLAYCONFIG_DEVICE_INFO_HEADER *setPacket );",
            "name": "DisplayConfigSetDeviceInfo"
        },
        {
            "signature": "int DlgDirListA( [in] HWND hDlg, [in, out] LPSTR lpPathSpec, [in] int nIDListBox, [in] int nIDStaticPath, [in] UINT uFileType );",
            "name": "DlgDirListA"
        },
        {
            "signature": "int DlgDirListComboBoxA( [in] HWND hDlg, [in, out] LPSTR lpPathSpec, [in] int nIDComboBox, [in] int nIDStaticPath, [in] UINT uFiletype );",
            "name": "DlgDirListComboBoxA"
        },
        {
            "signature": "int DlgDirListComboBoxW( [in] HWND hDlg, [in, out] LPWSTR lpPathSpec, [in] int nIDComboBox, [in] int nIDStaticPath, [in] UINT uFiletype );",
            "name": "DlgDirListComboBoxW"
        },
        {
            "signature": "int DlgDirListW( [in] HWND hDlg, [in, out] LPWSTR lpPathSpec, [in] int nIDListBox, [in] int nIDStaticPath, [in] UINT uFileType );",
            "name": "DlgDirListW"
        },
        {
            "signature": "BOOL DlgDirSelectComboBoxExA( [in] HWND hwndDlg, [out] LPSTR lpString, [in] int cchOut, [in] int idComboBox );",
            "name": "DlgDirSelectComboBoxExA"
        },
        {
            "signature": "BOOL DlgDirSelectComboBoxExW( [in] HWND hwndDlg, [out] LPWSTR lpString, [in] int cchOut, [in] int idComboBox );",
            "name": "DlgDirSelectComboBoxExW"
        },
        {
            "signature": "BOOL DlgDirSelectExA( [in] HWND hwndDlg, [out] LPSTR lpString, [in] int chCount, [in] int idListBox );",
            "name": "DlgDirSelectExA"
        },
        {
            "signature": "BOOL DlgDirSelectExW( [in] HWND hwndDlg, [out] LPWSTR lpString, [in] int chCount, [in] int idListBox );",
            "name": "DlgDirSelectExW"
        },
        {
            "signature": "DLGPROC Dlgproc; INT_PTR Dlgproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "DLGPROC callback"
        },
        {
            "signature": "BOOL DragDetect( [in] HWND hwnd, [in] POINT pt );",
            "name": "DragDetect"
        },
        {
            "signature": "BOOL DrawAnimatedRects( [in] HWND hwnd, [in] int idAni, const RECT *lprcFrom, const RECT *lprcTo );",
            "name": "DrawAnimatedRects"
        },
        {
            "signature": "BOOL DrawCaption( [in] HWND hwnd, [in] HDC hdc, [in] const RECT *lprect, [in] UINT flags );",
            "name": "DrawCaption"
        },
        {
            "signature": "BOOL DrawEdge( [in] HDC hdc, [in, out] LPRECT qrc, [in] UINT edge, [in] UINT grfFlags );",
            "name": "DrawEdge"
        },
        {
            "signature": "BOOL DrawFocusRect( [in] HDC hDC, [in] const RECT *lprc );",
            "name": "DrawFocusRect"
        },
        {
            "signature": "BOOL DrawFrameControl( [in] HDC unnamedParam1, [in] LPRECT unnamedParam2, [in] UINT unnamedParam3, [in] UINT unnamedParam4 );",
            "name": "DrawFrameControl"
        },
        {
            "signature": "BOOL DrawIcon( [in] HDC hDC, [in] int X, [in] int Y, [in] HICON hIcon );",
            "name": "DrawIcon"
        },
        {
            "signature": "BOOL DrawIconEx( [in] HDC hdc, [in] int xLeft, [in] int yTop, [in] HICON hIcon, [in] int cxWidth, [in] int cyWidth, [in] UINT istepIfAniCur, [in, optional] HBRUSH hbrFlickerFreeDraw, [in] UINT diFlags );",
            "name": "DrawIconEx"
        },
        {
            "signature": "BOOL DrawMenuBar( [in] HWND hWnd );",
            "name": "DrawMenuBar"
        },
        {
            "signature": "BOOL DrawStateA( [in] HDC hdc, [in] HBRUSH hbrFore, [in] DRAWSTATEPROC qfnCallBack, [in] LPARAM lData, [in] WPARAM wData, [in] int x, [in] int y, [in] int cx, [in] int cy, [in] UINT uFlags );",
            "name": "DrawStateA"
        },
        {
            "signature": "DRAWSTATEPROC Drawstateproc; BOOL Drawstateproc( [in] HDC hdc, [in] LPARAM lData, [in] WPARAM wData, [in] int cx, [in] int cy ) {...}",
            "name": "DRAWSTATEPROC callback"
        },
        {
            "signature": "BOOL DrawStateW( [in] HDC hdc, [in] HBRUSH hbrFore, [in] DRAWSTATEPROC qfnCallBack, [in] LPARAM lData, [in] WPARAM wData, [in] int x, [in] int y, [in] int cx, [in] int cy, [in] UINT uFlags );",
            "name": "DrawStateW"
        },
        {
            "signature": "int DrawText( [in] HDC hdc, [in, out] LPCTSTR lpchText, [in] int cchText, [in, out] LPRECT lprc, [in] UINT format );",
            "name": "DrawText"
        },
        {
            "signature": "int DrawTextA( [in] HDC hdc, [in, out] LPCSTR lpchText, [in] int cchText, [in, out] LPRECT lprc, [in] UINT format );",
            "name": "DrawTextA"
        },
        {
            "signature": "int DrawTextExA( [in] HDC hdc, [in, out] LPSTR lpchText, [in] int cchText, [in, out] LPRECT lprc, [in] UINT format, [in] LPDRAWTEXTPARAMS lpdtp );",
            "name": "DrawTextExA"
        },
        {
            "signature": "int DrawTextExW( [in] HDC hdc, [in, out] LPWSTR lpchText, [in] int cchText, [in, out] LPRECT lprc, [in] UINT format, [in] LPDRAWTEXTPARAMS lpdtp );",
            "name": "DrawTextExW"
        },
        {
            "signature": "int DrawTextW( [in] HDC hdc, [in, out] LPCWSTR lpchText, [in] int cchText, [in, out] LPRECT lprc, [in] UINT format );",
            "name": "DrawTextW"
        },
        {
            "signature": "EDITWORDBREAKPROCA Editwordbreakproca; int Editwordbreakproca( [in] LPSTR lpch, [in] int ichCurrent, [in] int cch, [in] int code ) {...}",
            "name": "EDITWORDBREAKPROCA callback"
        },
        {
            "signature": "EDITWORDBREAKPROCW Editwordbreakprocw; int Editwordbreakprocw( [in] LPWSTR lpch, [in] int ichCurrent, [in] int cch, [in] int code ) {...}",
            "name": "EDITWORDBREAKPROCW callback"
        },
        {
            "signature": "BOOL EmptyClipboard();",
            "name": "EmptyClipboard"
        },
        {
            "signature": "BOOL EnableMenuItem( [in] HMENU hMenu, [in] UINT uIDEnableItem, [in] UINT uEnable );",
            "name": "EnableMenuItem"
        },
        {
            "signature": "BOOL EnableMouseInPointer( [in] BOOL fEnable );",
            "name": "EnableMouseInPointer"
        },
        {
            "signature": "BOOL EnableNonClientDpiScaling( [in] HWND hwnd );",
            "name": "EnableNonClientDpiScaling"
        },
        {
            "signature": "BOOL EnableScrollBar( [in] HWND hWnd, [in] UINT wSBflags, [in] UINT wArrows );",
            "name": "EnableScrollBar"
        },
        {
            "signature": "BOOL EnableWindow( [in] HWND hWnd, [in] BOOL bEnable );",
            "name": "EnableWindow"
        },
        {
            "signature": "BOOL EndDeferWindowPos( [in] HDWP hWinPosInfo );",
            "name": "EndDeferWindowPos"
        },
        {
            "signature": "BOOL EndDialog( [in] HWND hDlg, [in] INT_PTR nResult );",
            "name": "EndDialog"
        },
        {
            "signature": "BOOL EndMenu();",
            "name": "EndMenu"
        },
        {
            "signature": "BOOL EndPaint( [in] HWND hWnd, [in] const PAINTSTRUCT *lpPaint );",
            "name": "EndPaint"
        },
        {
            "signature": "BOOL EndTask( [in] HWND hWnd, [in] BOOL fShutDown, [in] BOOL fForce );",
            "name": "EndTask"
        },
        {
            "signature": "BOOL EnumChildWindows( [in, optional] HWND hWndParent, [in] WNDENUMPROC lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumChildWindows"
        },
        {
            "signature": "UINT EnumClipboardFormats( [in] UINT format );",
            "name": "EnumClipboardFormats"
        },
        {
            "signature": "BOOL EnumDesktopsA( [in, optional] HWINSTA hwinsta, [in] DESKTOPENUMPROCA lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumDesktopsA"
        },
        {
            "signature": "BOOL EnumDesktopsW( [in, optional] HWINSTA hwinsta, [in] DESKTOPENUMPROCW lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumDesktopsW"
        },
        {
            "signature": "BOOL EnumDesktopWindows( [in, optional] HDESK hDesktop, [in] WNDENUMPROC lpfn, [in] LPARAM lParam );",
            "name": "EnumDesktopWindows"
        },
        {
            "signature": "BOOL EnumDisplayDevicesA( [in] LPCSTR lpDevice, [in] DWORD iDevNum, [out] PDISPLAY_DEVICEA lpDisplayDevice, [in] DWORD dwFlags );",
            "name": "EnumDisplayDevicesA"
        },
        {
            "signature": "BOOL EnumDisplayDevicesW( [in] LPCWSTR lpDevice, [in] DWORD iDevNum, [out] PDISPLAY_DEVICEW lpDisplayDevice, [in] DWORD dwFlags );",
            "name": "EnumDisplayDevicesW"
        },
        {
            "signature": "BOOL EnumDisplayMonitors( [in] HDC hdc, [in] LPCRECT lprcClip, [in] MONITORENUMPROC lpfnEnum, [in] LPARAM dwData );",
            "name": "EnumDisplayMonitors"
        },
        {
            "signature": "BOOL EnumDisplaySettingsA( [in] LPCSTR lpszDeviceName, [in] DWORD iModeNum, [out] DEVMODEA *lpDevMode );",
            "name": "EnumDisplaySettingsA"
        },
        {
            "signature": "BOOL EnumDisplaySettingsExA( [in] LPCSTR lpszDeviceName, [in] DWORD iModeNum, [out] DEVMODEA *lpDevMode, [in] DWORD dwFlags );",
            "name": "EnumDisplaySettingsExA"
        },
        {
            "signature": "BOOL EnumDisplaySettingsExW( [in] LPCWSTR lpszDeviceName, [in] DWORD iModeNum, [out] DEVMODEW *lpDevMode, [in] DWORD dwFlags );",
            "name": "EnumDisplaySettingsExW"
        },
        {
            "signature": "BOOL EnumDisplaySettingsW( [in] LPCWSTR lpszDeviceName, [in] DWORD iModeNum, [out] DEVMODEW *lpDevMode );",
            "name": "EnumDisplaySettingsW"
        },
        {
            "signature": "int EnumPropsA( [in] HWND hWnd, [in] PROPENUMPROCA lpEnumFunc );",
            "name": "EnumPropsA"
        },
        {
            "signature": "int EnumPropsExA( [in] HWND hWnd, [in] PROPENUMPROCEXA lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumPropsExA"
        },
        {
            "signature": "int EnumPropsExW( [in] HWND hWnd, [in] PROPENUMPROCEXW lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumPropsExW"
        },
        {
            "signature": "int EnumPropsW( [in] HWND hWnd, [in] PROPENUMPROCW lpEnumFunc );",
            "name": "EnumPropsW"
        },
        {
            "signature": "BOOL EnumThreadWindows( [in] DWORD dwThreadId, [in] WNDENUMPROC lpfn, [in] LPARAM lParam );",
            "name": "EnumThreadWindows"
        },
        {
            "signature": "BOOL EnumWindows( [in] WNDENUMPROC lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumWindows"
        },
        {
            "signature": "BOOL EnumWindowStationsA( [in] WINSTAENUMPROCA lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumWindowStationsA"
        },
        {
            "signature": "BOOL EnumWindowStationsW( [in] WINSTAENUMPROCW lpEnumFunc, [in] LPARAM lParam );",
            "name": "EnumWindowStationsW"
        },
        {
            "signature": "BOOL EqualRect( [in] const RECT *lprc1, [in] const RECT *lprc2 );",
            "name": "EqualRect"
        },
        {
            "signature": "BOOL EvaluateProximityToPolygon( UINT32 numVertices, [in] const POINT *controlPolygon, [in] const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, [out] TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval );",
            "name": "EvaluateProximityToPolygon"
        },
        {
            "signature": "BOOL EvaluateProximityToRect( [in] const RECT *controlBoundingBox, [in] const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, [out] TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval );",
            "name": "EvaluateProximityToRect"
        },
        {
            "signature": "int ExcludeUpdateRgn( [in] HDC hDC, [in] HWND hWnd );",
            "name": "ExcludeUpdateRgn"
        },
        {
            "signature": "BOOL ExitWindowsEx( [in] UINT uFlags, [in] DWORD dwReason );",
            "name": "ExitWindowsEx"
        },
        {
            "signature": "int FillRect( [in] HDC hDC, [in] const RECT *lprc, [in] HBRUSH hbr );",
            "name": "FillRect"
        },
        {
            "signature": "HWND FindWindowA( [in, optional] LPCSTR lpClassName, [in, optional] LPCSTR lpWindowName );",
            "name": "FindWindowA"
        },
        {
            "signature": "HWND FindWindowExA( [in, optional] HWND hWndParent, [in, optional] HWND hWndChildAfter, [in, optional] LPCSTR lpszClass, [in, optional] LPCSTR lpszWindow );",
            "name": "FindWindowExA"
        },
        {
            "signature": "HWND FindWindowExW( [in, optional] HWND hWndParent, [in, optional] HWND hWndChildAfter, [in, optional] LPCWSTR lpszClass, [in, optional] LPCWSTR lpszWindow );",
            "name": "FindWindowExW"
        },
        {
            "signature": "HWND FindWindowW( [in, optional] LPCWSTR lpClassName, [in, optional] LPCWSTR lpWindowName );",
            "name": "FindWindowW"
        },
        {
            "signature": "BOOL FlashWindow( [in] HWND hWnd, [in] BOOL bInvert );",
            "name": "FlashWindow"
        },
        {
            "signature": "BOOL FlashWindowEx( [in] PFLASHWINFO pfwi );",
            "name": "FlashWindowEx"
        },
        {
            "signature": "int FrameRect( [in] HDC hDC, [in] const RECT *lprc, [in] HBRUSH hbr );",
            "name": "FrameRect"
        },
        {
            "signature": "HWND GetActiveWindow();",
            "name": "GetActiveWindow"
        },
        {
            "signature": "BOOL GetAltTabInfoA( [in, optional] HWND hwnd, [in] int iItem, [in, out] PALTTABINFO pati, [out, optional] LPSTR pszItemText, [in] UINT cchItemText );",
            "name": "GetAltTabInfoA"
        },
        {
            "signature": "BOOL GetAltTabInfoW( [in, optional] HWND hwnd, [in] int iItem, [in, out] PALTTABINFO pati, [out, optional] LPWSTR pszItemText, [in] UINT cchItemText );",
            "name": "GetAltTabInfoW"
        },
        {
            "signature": "HWND GetAncestor( [in] HWND hwnd, [in] UINT gaFlags );",
            "name": "GetAncestor"
        },
        {
            "signature": "SHORT GetAsyncKeyState( [in] int vKey );",
            "name": "GetAsyncKeyState"
        },
        {
            "signature": "BOOL GetAutoRotationState( [out] PAR_STATE pState );",
            "name": "GetAutoRotationState"
        },
        {
            "signature": "DPI_AWARENESS GetAwarenessFromDpiAwarenessContext( [in] DPI_AWARENESS_CONTEXT value );",
            "name": "GetAwarenessFromDpiAwarenessContext"
        },
        {
            "signature": "HWND GetCapture();",
            "name": "GetCapture"
        },
        {
            "signature": "UINT GetCaretBlinkTime();",
            "name": "GetCaretBlinkTime"
        },
        {
            "signature": "BOOL GetCaretPos( [out] LPPOINT lpPoint );",
            "name": "GetCaretPos"
        },
        {
            "signature": "BOOL GetCIMSSM( [out] INPUT_MESSAGE_SOURCE *inputMessageSource );",
            "name": "GetCIMSSM"
        },
        {
            "signature": "BOOL GetClassInfoA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpClassName, [out] LPWNDCLASSA lpWndClass );",
            "name": "GetClassInfoA"
        },
        {
            "signature": "BOOL GetClassInfoExA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpszClass, [out] LPWNDCLASSEXA lpwcx );",
            "name": "GetClassInfoExA"
        },
        {
            "signature": "BOOL GetClassInfoExW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpszClass, [out] LPWNDCLASSEXW lpwcx );",
            "name": "GetClassInfoExW"
        },
        {
            "signature": "BOOL GetClassInfoW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpClassName, [out] LPWNDCLASSW lpWndClass );",
            "name": "GetClassInfoW"
        },
        {
            "signature": "DWORD GetClassLongA( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetClassLongA"
        },
        {
            "signature": "ULONG_PTR GetClassLongPtrA( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetClassLongPtrA"
        },
        {
            "signature": "ULONG_PTR GetClassLongPtrW( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetClassLongPtrW"
        },
        {
            "signature": "DWORD GetClassLongW( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetClassLongW"
        },
        {
            "signature": "int GetClassName( [in] HWND hWnd, [out] LPTSTR lpClassName, [in] int nMaxCount );",
            "name": "GetClassName"
        },
        {
            "signature": "int GetClassNameA( [in] HWND hWnd, [out] LPSTR lpClassName, [in] int nMaxCount );",
            "name": "GetClassNameA"
        },
        {
            "signature": "int GetClassNameW( [in] HWND hWnd, [out] LPWSTR lpClassName, [in] int nMaxCount );",
            "name": "GetClassNameW"
        },
        {
            "signature": "WORD GetClassWord( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetClassWord"
        },
        {
            "signature": "BOOL GetClientRect( [in] HWND hWnd, [out] LPRECT lpRect );",
            "name": "GetClientRect"
        },
        {
            "signature": "HANDLE GetClipboardData( [in] UINT uFormat );",
            "name": "GetClipboardData"
        },
        {
            "signature": "int GetClipboardFormatNameA( [in] UINT format, [out] LPSTR lpszFormatName, [in] int cchMaxCount );",
            "name": "GetClipboardFormatNameA"
        },
        {
            "signature": "int GetClipboardFormatNameW( [in] UINT format, [out] LPWSTR lpszFormatName, [in] int cchMaxCount );",
            "name": "GetClipboardFormatNameW"
        },
        {
            "signature": "HWND GetClipboardOwner();",
            "name": "GetClipboardOwner"
        },
        {
            "signature": "DWORD GetClipboardSequenceNumber();",
            "name": "GetClipboardSequenceNumber"
        },
        {
            "signature": "HWND GetClipboardViewer();",
            "name": "GetClipboardViewer"
        },
        {
            "signature": "BOOL GetClipCursor( [out] LPRECT lpRect );",
            "name": "GetClipCursor"
        },
        {
            "signature": "BOOL GetComboBoxInfo( [in] HWND hwndCombo, [out] PCOMBOBOXINFO pcbi );",
            "name": "GetComboBoxInfo"
        },
        {
            "signature": "BOOL GetCurrentInputMessageSource( [out] INPUT_MESSAGE_SOURCE *inputMessageSource );",
            "name": "GetCurrentInputMessageSource"
        },
        {
            "signature": "HCURSOR GetCursor();",
            "name": "GetCursor"
        },
        {
            "signature": "BOOL GetCursorInfo( [in, out] PCURSORINFO pci );",
            "name": "GetCursorInfo"
        },
        {
            "signature": "BOOL GetCursorPos( [out] LPPOINT lpPoint );",
            "name": "GetCursorPos"
        },
        {
            "signature": "HDC GetDC( [in] HWND hWnd );",
            "name": "GetDC"
        },
        {
            "signature": "HDC GetDCEx( [in] HWND hWnd, [in] HRGN hrgnClip, [in] DWORD flags );",
            "name": "GetDCEx"
        },
        {
            "signature": "HWND GetDesktopWindow();",
            "name": "GetDesktopWindow"
        },
        {
            "signature": "long GetDialogBaseUnits();",
            "name": "GetDialogBaseUnits"
        },
        {
            "signature": "DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior( HWND hWnd );",
            "name": "GetDialogControlDpiChangeBehavior"
        },
        {
            "signature": "DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior( HWND hDlg );",
            "name": "GetDialogDpiChangeBehavior"
        },
        {
            "signature": "BOOL GetDisplayAutoRotationPreferences( [out] ORIENTATION_PREFERENCE *pOrientation );",
            "name": "GetDisplayAutoRotationPreferences"
        },
        {
            "signature": "BOOL GetDisplayAutoRotationPreferencesByProcessId( [in] DWORD dwProcessId, [out] ORIENTATION_PREFERENCE *pOrientation, [out] BOOL *fRotateScreen );",
            "name": "GetDisplayAutoRotationPreferencesByProcessId"
        },
        {
            "signature": "LONG GetDisplayConfigBufferSizes( [in] UINT32 flags, [out] UINT32 *numPathArrayElements, [out] UINT32 *numModeInfoArrayElements );",
            "name": "GetDisplayConfigBufferSizes"
        },
        {
            "signature": "int GetDlgCtrlID( [in] HWND hWnd );",
            "name": "GetDlgCtrlID"
        },
        {
            "signature": "HWND GetDlgItem( [in, optional] HWND hDlg, [in] int nIDDlgItem );",
            "name": "GetDlgItem"
        },
        {
            "signature": "UINT GetDlgItemInt( [in] HWND hDlg, [in] int nIDDlgItem, [out, optional] BOOL *lpTranslated, [in] BOOL bSigned );",
            "name": "GetDlgItemInt"
        },
        {
            "signature": "UINT GetDlgItemTextA( [in] HWND hDlg, [in] int nIDDlgItem, [out] LPSTR lpString, [in] int cchMax );",
            "name": "GetDlgItemTextA"
        },
        {
            "signature": "UINT GetDlgItemTextW( [in] HWND hDlg, [in] int nIDDlgItem, [out] LPWSTR lpString, [in] int cchMax );",
            "name": "GetDlgItemTextW"
        },
        {
            "signature": "UINT GetDoubleClickTime();",
            "name": "GetDoubleClickTime"
        },
        {
            "signature": "UINT GetDpiForSystem();",
            "name": "GetDpiForSystem"
        },
        {
            "signature": "UINT GetDpiForWindow( [in] HWND hwnd );",
            "name": "GetDpiForWindow"
        },
        {
            "signature": "UINT GetDpiFromDpiAwarenessContext( DPI_AWARENESS_CONTEXT value );",
            "name": "GetDpiFromDpiAwarenessContext"
        },
        {
            "signature": "HWND GetFocus();",
            "name": "GetFocus"
        },
        {
            "signature": "HWND GetForegroundWindow();",
            "name": "GetForegroundWindow"
        },
        {
            "signature": "BOOL GetGestureConfig( [in] HWND hwnd, [in] DWORD dwReserved, [in] DWORD dwFlags, [in] PUINT pcIDs, [in, out] PGESTURECONFIG pGestureConfig, [in] UINT cbSize );",
            "name": "GetGestureConfig"
        },
        {
            "signature": "BOOL GetGestureExtraArgs( [in] HGESTUREINFO hGestureInfo, [in] UINT cbExtraArgs, [out] PBYTE pExtraArgs );",
            "name": "GetGestureExtraArgs"
        },
        {
            "signature": "BOOL GetGestureInfo( [in] HGESTUREINFO hGestureInfo, [out] PGESTUREINFO pGestureInfo );",
            "name": "GetGestureInfo"
        },
        {
            "signature": "DWORD GetGuiResources( [in] HANDLE hProcess, [in] DWORD uiFlags );",
            "name": "GetGuiResources"
        },
        {
            "signature": "BOOL GetGUIThreadInfo( [in] DWORD idThread, [in, out] PGUITHREADINFO pgui );",
            "name": "GetGUIThreadInfo"
        },
        {
            "signature": "BOOL GetIconInfo( [in] HICON hIcon, [out] PICONINFO piconinfo );",
            "name": "GetIconInfo"
        },
        {
            "signature": "BOOL GetIconInfoExA( [in] HICON hicon, [in, out] PICONINFOEXA piconinfo );",
            "name": "GetIconInfoExA"
        },
        {
            "signature": "BOOL GetIconInfoExW( [in] HICON hicon, [in, out] PICONINFOEXW piconinfo );",
            "name": "GetIconInfoExW"
        },
        {
            "signature": "BOOL GetInputState();",
            "name": "GetInputState"
        },
        {
            "signature": "UINT GetKBCodePage();",
            "name": "GetKBCodePage"
        },
        {
            "signature": "HKL GetKeyboardLayout( [in] DWORD idThread );",
            "name": "GetKeyboardLayout"
        },
        {
            "signature": "int GetKeyboardLayoutList( [in] int nBuff, [out] HKL *lpList );",
            "name": "GetKeyboardLayoutList"
        },
        {
            "signature": "BOOL GetKeyboardLayoutNameA( [out] LPSTR pwszKLID );",
            "name": "GetKeyboardLayoutNameA"
        },
        {
            "signature": "BOOL GetKeyboardLayoutNameW( [out] LPWSTR pwszKLID );",
            "name": "GetKeyboardLayoutNameW"
        },
        {
            "signature": "BOOL GetKeyboardState( [out] PBYTE lpKeyState );",
            "name": "GetKeyboardState"
        },
        {
            "signature": "int GetKeyboardType( [in] int nTypeFlag );",
            "name": "GetKeyboardType"
        },
        {
            "signature": "int GetKeyNameTextA( [in] LONG lParam, [out] LPSTR lpString, [in] int cchSize );",
            "name": "GetKeyNameTextA"
        },
        {
            "signature": "int GetKeyNameTextW( [in] LONG lParam, [out] LPWSTR lpString, [in] int cchSize );",
            "name": "GetKeyNameTextW"
        },
        {
            "signature": "SHORT GetKeyState( [in] int nVirtKey );",
            "name": "GetKeyState"
        },
        {
            "signature": "HWND GetLastActivePopup( [in] HWND hWnd );",
            "name": "GetLastActivePopup"
        },
        {
            "signature": "BOOL GetLastInputInfo( [out] PLASTINPUTINFO plii );",
            "name": "GetLastInputInfo"
        },
        {
            "signature": "BOOL GetLayeredWindowAttributes( [in] HWND hwnd, [out, optional] COLORREF *pcrKey, [out, optional] BYTE *pbAlpha, [out, optional] DWORD *pdwFlags );",
            "name": "GetLayeredWindowAttributes"
        },
        {
            "signature": "DWORD GetListBoxInfo( [in] HWND hwnd );",
            "name": "GetListBoxInfo"
        },
        {
            "signature": "HMENU GetMenu( [in] HWND hWnd );",
            "name": "GetMenu"
        },
        {
            "signature": "BOOL GetMenuBarInfo( [in] HWND hwnd, [in] LONG idObject, [in] LONG idItem, [in, out] PMENUBARINFO pmbi );",
            "name": "GetMenuBarInfo"
        },
        {
            "signature": "LONG GetMenuCheckMarkDimensions();",
            "name": "GetMenuCheckMarkDimensions"
        },
        {
            "signature": "DWORD GetMenuContextHelpId( HMENU unnamedParam1 );",
            "name": "GetMenuContextHelpId"
        },
        {
            "signature": "UINT GetMenuDefaultItem( [in] HMENU hMenu, [in] UINT fByPos, [in] UINT gmdiFlags );",
            "name": "GetMenuDefaultItem"
        },
        {
            "signature": "BOOL GetMenuInfo( [in] HMENU unnamedParam1, [in, out] LPMENUINFO unnamedParam2 );",
            "name": "GetMenuInfo"
        },
        {
            "signature": "int GetMenuItemCount( [in, optional] HMENU hMenu );",
            "name": "GetMenuItemCount"
        },
        {
            "signature": "UINT GetMenuItemID( [in] HMENU hMenu, [in] int nPos );",
            "name": "GetMenuItemID"
        },
        {
            "signature": "BOOL GetMenuItemInfoA( [in] HMENU hmenu, [in] UINT item, [in] BOOL fByPosition, [in, out] LPMENUITEMINFOA lpmii );",
            "name": "GetMenuItemInfoA"
        },
        {
            "signature": "BOOL GetMenuItemInfoW( [in] HMENU hmenu, [in] UINT item, [in] BOOL fByPosition, [in, out] LPMENUITEMINFOW lpmii );",
            "name": "GetMenuItemInfoW"
        },
        {
            "signature": "BOOL GetMenuItemRect( [in, optional] HWND hWnd, [in] HMENU hMenu, [in] UINT uItem, [out] LPRECT lprcItem );",
            "name": "GetMenuItemRect"
        },
        {
            "signature": "UINT GetMenuState( [in] HMENU hMenu, [in] UINT uId, [in] UINT uFlags );",
            "name": "GetMenuState"
        },
        {
            "signature": "int GetMenuStringA( [in] HMENU hMenu, [in] UINT uIDItem, [out, optional] LPSTR lpString, [in] int cchMax, [in] UINT flags );",
            "name": "GetMenuStringA"
        },
        {
            "signature": "int GetMenuStringW( [in] HMENU hMenu, [in] UINT uIDItem, [out, optional] LPWSTR lpString, [in] int cchMax, [in] UINT flags );",
            "name": "GetMenuStringW"
        },
        {
            "signature": "BOOL GetMessage( [out] LPMSG lpMsg, [in, optional] HWND hWnd, [in] UINT wMsgFilterMin, [in] UINT wMsgFilterMax );",
            "name": "GetMessage"
        },
        {
            "signature": "BOOL GetMessageA( [out] LPMSG lpMsg, [in, optional] HWND hWnd, [in] UINT wMsgFilterMin, [in] UINT wMsgFilterMax );",
            "name": "GetMessageA"
        },
        {
            "signature": "LPARAM GetMessageExtraInfo();",
            "name": "GetMessageExtraInfo"
        },
        {
            "signature": "DWORD GetMessagePos();",
            "name": "GetMessagePos"
        },
        {
            "signature": "LONG GetMessageTime();",
            "name": "GetMessageTime"
        },
        {
            "signature": "BOOL GetMessageW( [out] LPMSG lpMsg, [in, optional] HWND hWnd, [in] UINT wMsgFilterMin, [in] UINT wMsgFilterMax );",
            "name": "GetMessageW"
        },
        {
            "signature": "BOOL GetMonitorInfoA( [in] HMONITOR hMonitor, [out] LPMONITORINFO lpmi );",
            "name": "GetMonitorInfoA"
        },
        {
            "signature": "BOOL GetMonitorInfoW( [in] HMONITOR hMonitor, [out] LPMONITORINFO lpmi );",
            "name": "GetMonitorInfoW"
        },
        {
            "signature": "int GetMouseMovePointsEx( [in] UINT cbSize, [in] LPMOUSEMOVEPOINT lppt, [out] LPMOUSEMOVEPOINT lpptBuf, [in] int nBufPoints, [in] DWORD resolution );",
            "name": "GetMouseMovePointsEx"
        },
        {
            "signature": "HWND GetNextDlgGroupItem( [in] HWND hDlg, [in, optional] HWND hCtl, [in] BOOL bPrevious );",
            "name": "GetNextDlgGroupItem"
        },
        {
            "signature": "HWND GetNextDlgTabItem( [in] HWND hDlg, [in, optional] HWND hCtl, [in] BOOL bPrevious );",
            "name": "GetNextDlgTabItem"
        },
        {
            "signature": "HWND GetOpenClipboardWindow();",
            "name": "GetOpenClipboardWindow"
        },
        {
            "signature": "HWND GetParent( [in] HWND hWnd );",
            "name": "GetParent"
        },
        {
            "signature": "BOOL GetPhysicalCursorPos( [out] LPPOINT lpPoint );",
            "name": "GetPhysicalCursorPos"
        },
        {
            "signature": "BOOL GetPointerCursorId( [in] UINT32 pointerId, [out] UINT32 *cursorId );",
            "name": "GetPointerCursorId"
        },
        {
            "signature": "BOOL GetPointerDevice( [in] HANDLE device, [out] POINTER_DEVICE_INFO *pointerDevice );",
            "name": "GetPointerDevice"
        },
        {
            "signature": "BOOL GetPointerDeviceCursors( [in] HANDLE device, [in, out] UINT32 *cursorCount, [out, optional] POINTER_DEVICE_CURSOR_INFO *deviceCursors );",
            "name": "GetPointerDeviceCursors"
        },
        {
            "signature": "BOOL GetPointerDeviceProperties( [in] HANDLE device, [in, out] UINT32 *propertyCount, [out, optional] POINTER_DEVICE_PROPERTY *pointerProperties );",
            "name": "GetPointerDeviceProperties"
        },
        {
            "signature": "BOOL GetPointerDeviceRects( [in] HANDLE device, [out] RECT *pointerDeviceRect, [out] RECT *displayRect );",
            "name": "GetPointerDeviceRects"
        },
        {
            "signature": "BOOL GetPointerDevices( [in, out] UINT32 *deviceCount, [out, optional] POINTER_DEVICE_INFO *pointerDevices );",
            "name": "GetPointerDevices"
        },
        {
            "signature": "BOOL GetPointerFrameInfo( [in] UINT32 pointerId, [in, out] UINT32 *pointerCount, [out] POINTER_INFO *pointerInfo );",
            "name": "GetPointerFrameInfo"
        },
        {
            "signature": "BOOL GetPointerFrameInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [in, out] UINT32 *pointerCount, [out] POINTER_INFO *pointerInfo );",
            "name": "GetPointerFrameInfoHistory"
        },
        {
            "signature": "BOOL GetPointerFramePenInfo( [in] UINT32 pointerId, [in, out] UINT32 *pointerCount, [out] POINTER_PEN_INFO *penInfo );",
            "name": "GetPointerFramePenInfo"
        },
        {
            "signature": "BOOL GetPointerFramePenInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [in, out] UINT32 *pointerCount, [out, optional] POINTER_PEN_INFO *penInfo );",
            "name": "GetPointerFramePenInfoHistory"
        },
        {
            "signature": "BOOL GetPointerFrameTouchInfo( [in] UINT32 pointerId, [in, out] UINT32 *pointerCount, [out] POINTER_TOUCH_INFO *touchInfo );",
            "name": "GetPointerFrameTouchInfo"
        },
        {
            "signature": "BOOL GetPointerFrameTouchInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [in, out] UINT32 *pointerCount, [out] POINTER_TOUCH_INFO *touchInfo );",
            "name": "GetPointerFrameTouchInfoHistory"
        },
        {
            "signature": "BOOL GetPointerInfo( [in] UINT32 pointerId, [out] POINTER_INFO *pointerInfo );",
            "name": "GetPointerInfo"
        },
        {
            "signature": "BOOL GetPointerInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [out, optional] POINTER_INFO *pointerInfo );",
            "name": "GetPointerInfoHistory"
        },
        {
            "signature": "BOOL GetPointerInputTransform( [in] UINT32 pointerId, [in] UINT32 historyCount, [out] INPUT_TRANSFORM *inputTransform );",
            "name": "GetPointerInputTransform"
        },
        {
            "signature": "BOOL GetPointerPenInfo( [in] UINT32 pointerId, [out] POINTER_PEN_INFO *penInfo );",
            "name": "GetPointerPenInfo"
        },
        {
            "signature": "BOOL GetPointerPenInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [out, optional] POINTER_PEN_INFO *penInfo );",
            "name": "GetPointerPenInfoHistory"
        },
        {
            "signature": "BOOL GetPointerTouchInfo( [in] UINT32 pointerId, [out] POINTER_TOUCH_INFO *touchInfo );",
            "name": "GetPointerTouchInfo"
        },
        {
            "signature": "BOOL GetPointerTouchInfoHistory( [in] UINT32 pointerId, [in, out] UINT32 *entriesCount, [out, optional] POINTER_TOUCH_INFO *touchInfo );",
            "name": "GetPointerTouchInfoHistory"
        },
        {
            "signature": "BOOL GetPointerType( [in] UINT32 pointerId, [out] POINTER_INPUT_TYPE *pointerType );",
            "name": "GetPointerType"
        },
        {
            "signature": "int GetPriorityClipboardFormat( [in] UINT *paFormatPriorityList, [in] int cFormats );",
            "name": "GetPriorityClipboardFormat"
        },
        {
            "signature": "BOOL GetProcessDefaultLayout( [out] DWORD *pdwDefaultLayout );",
            "name": "GetProcessDefaultLayout"
        },
        {
            "signature": "HWINSTA GetProcessWindowStation();",
            "name": "GetProcessWindowStation"
        },
        {
            "signature": "HANDLE GetPropA( [in] HWND hWnd, [in] LPCSTR lpString );",
            "name": "GetPropA"
        },
        {
            "signature": "HANDLE GetPropW( [in] HWND hWnd, [in] LPCWSTR lpString );",
            "name": "GetPropW"
        },
        {
            "signature": "DWORD GetQueueStatus( [in] UINT flags );",
            "name": "GetQueueStatus"
        },
        {
            "signature": "UINT GetRawInputBuffer( [out, optional] PRAWINPUT pData, [in, out] PUINT pcbSize, [in] UINT cbSizeHeader );",
            "name": "GetRawInputBuffer"
        },
        {
            "signature": "UINT GetRawInputData( [in] HRAWINPUT hRawInput, [in] UINT uiCommand, [out, optional] LPVOID pData, [in, out] PUINT pcbSize, [in] UINT cbSizeHeader );",
            "name": "GetRawInputData"
        },
        {
            "signature": "UINT GetRawInputDeviceInfoA( [in, optional] HANDLE hDevice, [in] UINT uiCommand, [in, out, optional] LPVOID pData, [in, out] PUINT pcbSize );",
            "name": "GetRawInputDeviceInfoA"
        },
        {
            "signature": "UINT GetRawInputDeviceInfoW( [in, optional] HANDLE hDevice, [in] UINT uiCommand, [in, out, optional] LPVOID pData, [in, out] PUINT pcbSize );",
            "name": "GetRawInputDeviceInfoW"
        },
        {
            "signature": "UINT GetRawInputDeviceList( [out, optional] PRAWINPUTDEVICELIST pRawInputDeviceList, [in, out] PUINT puiNumDevices, [in] UINT cbSize );",
            "name": "GetRawInputDeviceList"
        },
        {
            "signature": "BOOL GetRawPointerDeviceData( [in] UINT32 pointerId, [in] UINT32 historyCount, [in] UINT32 propertiesCount, [in] POINTER_DEVICE_PROPERTY *pProperties, [out] LONG *pValues );",
            "name": "GetRawPointerDeviceData"
        },
        {
            "signature": "UINT GetRegisteredRawInputDevices( [out, optional] PRAWINPUTDEVICE pRawInputDevices, [in, out] PUINT puiNumDevices, [in] UINT cbSize );",
            "name": "GetRegisteredRawInputDevices"
        },
        {
            "signature": "BOOL GetScrollBarInfo( [in] HWND hwnd, [in] LONG idObject, [out] PSCROLLBARINFO psbi );",
            "name": "GetScrollBarInfo"
        },
        {
            "signature": "BOOL GetScrollInfo( [in] HWND hwnd, [in] int nBar, [in, out] LPSCROLLINFO lpsi );",
            "name": "GetScrollInfo"
        },
        {
            "signature": "int GetScrollPos( [in] HWND hWnd, [in] int nBar );",
            "name": "GetScrollPos"
        },
        {
            "signature": "BOOL GetScrollRange( [in] HWND hWnd, [in] int nBar, [out] LPINT lpMinPos, [out] LPINT lpMaxPos );",
            "name": "GetScrollRange"
        },
        {
            "signature": "HWND GetShellWindow();",
            "name": "GetShellWindow"
        },
        {
            "signature": "HMENU GetSubMenu( [in] HMENU hMenu, [in] int nPos );",
            "name": "GetSubMenu"
        },
        {
            "signature": "DWORD GetSysColor( [in] int nIndex );",
            "name": "GetSysColor"
        },
        {
            "signature": "HBRUSH GetSysColorBrush( [in] int nIndex );",
            "name": "GetSysColorBrush"
        },
        {
            "signature": "UINT GetSystemDpiForProcess( HANDLE hProcess );",
            "name": "GetSystemDpiForProcess"
        },
        {
            "signature": "HMENU GetSystemMenu( [in] HWND hWnd, [in] BOOL bRevert );",
            "name": "GetSystemMenu"
        },
        {
            "signature": "int GetSystemMetrics( [in] int nIndex );",
            "name": "GetSystemMetrics"
        },
        {
            "signature": "int GetSystemMetricsForDpi( [in] int nIndex, [in] UINT dpi );",
            "name": "GetSystemMetricsForDpi"
        },
        {
            "signature": "DWORD GetTabbedTextExtentA( [in] HDC hdc, [in] LPCSTR lpString, [in] int chCount, [in] int nTabPositions, [in] const INT *lpnTabStopPositions );",
            "name": "GetTabbedTextExtentA"
        },
        {
            "signature": "DWORD GetTabbedTextExtentW( [in] HDC hdc, [in] LPCWSTR lpString, [in] int chCount, [in] int nTabPositions, [in] const INT *lpnTabStopPositions );",
            "name": "GetTabbedTextExtentW"
        },
        {
            "signature": "HDESK GetThreadDesktop( [in] DWORD dwThreadId );",
            "name": "GetThreadDesktop"
        },
        {
            "signature": "DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();",
            "name": "GetThreadDpiAwarenessContext"
        },
        {
            "signature": "DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior();",
            "name": "GetThreadDpiHostingBehavior"
        },
        {
            "signature": "BOOL GetTitleBarInfo( [in] HWND hwnd, [in, out] PTITLEBARINFO pti );",
            "name": "GetTitleBarInfo"
        },
        {
            "signature": "HWND GetTopWindow( [in, optional] HWND hWnd );",
            "name": "GetTopWindow"
        },
        {
            "signature": "BOOL GetTouchInputInfo( [in] HTOUCHINPUT hTouchInput, [in] UINT cInputs, [out] PTOUCHINPUT pInputs, [in] int cbSize );",
            "name": "GetTouchInputInfo"
        },
        {
            "signature": "DWORD GetUnpredictedMessagePos();",
            "name": "GetUnpredictedMessagePos"
        },
        {
            "signature": "BOOL GetUpdatedClipboardFormats( [out] PUINT lpuiFormats, [in] UINT cFormats, [out] PUINT pcFormatsOut );",
            "name": "GetUpdatedClipboardFormats"
        },
        {
            "signature": "BOOL GetUpdateRect( [in] HWND hWnd, [out] LPRECT lpRect, [in] BOOL bErase );",
            "name": "GetUpdateRect"
        },
        {
            "signature": "int GetUpdateRgn( [in] HWND hWnd, [in] HRGN hRgn, [in] BOOL bErase );",
            "name": "GetUpdateRgn"
        },
        {
            "signature": "BOOL GetUserObjectInformationA( [in] HANDLE hObj, [in] int nIndex, [out, optional] PVOID pvInfo, [in] DWORD nLength, [out, optional] LPDWORD lpnLengthNeeded );",
            "name": "GetUserObjectInformationA"
        },
        {
            "signature": "BOOL GetUserObjectInformationW( [in] HANDLE hObj, [in] int nIndex, [out, optional] PVOID pvInfo, [in] DWORD nLength, [out, optional] LPDWORD lpnLengthNeeded );",
            "name": "GetUserObjectInformationW"
        },
        {
            "signature": "BOOL GetUserObjectSecurity( [in] HANDLE hObj, [in] PSECURITY_INFORMATION pSIRequested, [in, out, optional] PSECURITY_DESCRIPTOR pSID, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "GetUserObjectSecurity"
        },
        {
            "signature": "HWND GetWindow( [in] HWND hWnd, [in] UINT uCmd );",
            "name": "GetWindow"
        },
        {
            "signature": "DWORD GetWindowContextHelpId( HWND unnamedParam1 );",
            "name": "GetWindowContextHelpId"
        },
        {
            "signature": "HDC GetWindowDC( [in] HWND hWnd );",
            "name": "GetWindowDC"
        },
        {
            "signature": "BOOL GetWindowDisplayAffinity( [in] HWND hWnd, [out] DWORD *pdwAffinity );",
            "name": "GetWindowDisplayAffinity"
        },
        {
            "signature": "DPI_AWARENESS_CONTEXT GetWindowDpiAwarenessContext( [in] HWND hwnd );",
            "name": "GetWindowDpiAwarenessContext"
        },
        {
            "signature": "DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior( HWND hwnd );",
            "name": "GetWindowDpiHostingBehavior"
        },
        {
            "signature": "BOOL GetWindowFeedbackSetting( [in] HWND hwnd, [in] FEEDBACK_TYPE feedback, [in] DWORD dwFlags, [in, out] UINT32 *pSize, [out, optional] VOID *config );",
            "name": "GetWindowFeedbackSetting"
        },
        {
            "signature": "BOOL GetWindowInfo( [in] HWND hwnd, [in, out] PWINDOWINFO pwi );",
            "name": "GetWindowInfo"
        },
        {
            "signature": "LONG GetWindowLongA( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetWindowLongA"
        },
        {
            "signature": "LONG_PTR GetWindowLongPtrA( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetWindowLongPtrA"
        },
        {
            "signature": "LONG_PTR GetWindowLongPtrW( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetWindowLongPtrW"
        },
        {
            "signature": "LONG GetWindowLongW( [in] HWND hWnd, [in] int nIndex );",
            "name": "GetWindowLongW"
        },
        {
            "signature": "UINT GetWindowModuleFileNameA( [in] HWND hwnd, [out] LPSTR pszFileName, [in] UINT cchFileNameMax );",
            "name": "GetWindowModuleFileNameA"
        },
        {
            "signature": "UINT GetWindowModuleFileNameW( [in] HWND hwnd, [out] LPWSTR pszFileName, [in] UINT cchFileNameMax );",
            "name": "GetWindowModuleFileNameW"
        },
        {
            "signature": "BOOL GetWindowPlacement( [in] HWND hWnd, [in, out] WINDOWPLACEMENT *lpwndpl );",
            "name": "GetWindowPlacement"
        },
        {
            "signature": "BOOL GetWindowRect( [in] HWND hWnd, [out] LPRECT lpRect );",
            "name": "GetWindowRect"
        },
        {
            "signature": "int GetWindowRgn( [in] HWND hWnd, [in] HRGN hRgn );",
            "name": "GetWindowRgn"
        },
        {
            "signature": "int GetWindowRgnBox( [in] HWND hWnd, [out] LPRECT lprc );",
            "name": "GetWindowRgnBox"
        },
        {
            "signature": "int GetWindowTextA( [in] HWND hWnd, [out] LPSTR lpString, [in] int nMaxCount );",
            "name": "GetWindowTextA"
        },
        {
            "signature": "int GetWindowTextLengthA( [in] HWND hWnd );",
            "name": "GetWindowTextLengthA"
        },
        {
            "signature": "int GetWindowTextLengthW( [in] HWND hWnd );",
            "name": "GetWindowTextLengthW"
        },
        {
            "signature": "int GetWindowTextW( [in] HWND hWnd, [out] LPWSTR lpString, [in] int nMaxCount );",
            "name": "GetWindowTextW"
        },
        {
            "signature": "DWORD GetWindowThreadProcessId( [in] HWND hWnd, [out, optional] LPDWORD lpdwProcessId );",
            "name": "GetWindowThreadProcessId"
        },
        {
            "signature": "BOOL GrayStringA( [in] HDC hDC, [in] HBRUSH hBrush, [in] GRAYSTRINGPROC lpOutputFunc, [in] LPARAM lpData, [in] int nCount, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight );",
            "name": "GrayStringA"
        },
        {
            "signature": "GRAYSTRINGPROC Graystringproc; BOOL Graystringproc( HDC unnamedParam1, LPARAM unnamedParam2, int unnamedParam3 ) {...}",
            "name": "GRAYSTRINGPROC callback"
        },
        {
            "signature": "BOOL GrayStringW( [in] HDC hDC, [in] HBRUSH hBrush, [in] GRAYSTRINGPROC lpOutputFunc, [in] LPARAM lpData, [in] int nCount, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight );",
            "name": "GrayStringW"
        },
        {
            "signature": "BOOL HideCaret( [in, optional] HWND hWnd );",
            "name": "HideCaret"
        },
        {
            "signature": "BOOL HiliteMenuItem( [in] HWND hWnd, [in] HMENU hMenu, [in] UINT uIDHiliteItem, [in] UINT uHilite );",
            "name": "HiliteMenuItem"
        },
        {
            "signature": "HOOKPROC Hookproc; LRESULT Hookproc( int code, [in] WPARAM wParam, [in] LPARAM lParam ) {...}",
            "name": "HOOKPROC callback"
        },
        {
            "signature": "BOOL InflateRect( [in, out] LPRECT lprc, [in] int dx, [in] int dy );",
            "name": "InflateRect"
        },
        {
            "signature": "BOOL InitializeTouchInjection( [in] UINT32 maxCount, [in] DWORD dwMode );",
            "name": "InitializeTouchInjection"
        },
        {
            "signature": "BOOL InjectSyntheticPointerInput( HSYNTHETICPOINTERDEVICE device, [in] const POINTER_TYPE_INFO *pointerInfo, [in] UINT32 count );",
            "name": "InjectSyntheticPointerInput"
        },
        {
            "signature": "BOOL InjectTouchInput( [in] UINT32 count, [in] const POINTER_TOUCH_INFO *contacts );",
            "name": "InjectTouchInput"
        },
        {
            "signature": "BOOL InSendMessage();",
            "name": "InSendMessage"
        },
        {
            "signature": "DWORD InSendMessageEx( LPVOID lpReserved );",
            "name": "InSendMessageEx"
        },
        {
            "signature": "BOOL InsertMenuA( [in] HMENU hMenu, [in] UINT uPosition, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCSTR lpNewItem );",
            "name": "InsertMenuA"
        },
        {
            "signature": "BOOL InsertMenuItemA( [in] HMENU hmenu, [in] UINT item, [in] BOOL fByPosition, [in] LPCMENUITEMINFOA lpmi );",
            "name": "InsertMenuItemA"
        },
        {
            "signature": "BOOL InsertMenuItemW( [in] HMENU hmenu, [in] UINT item, [in] BOOL fByPosition, [in] LPCMENUITEMINFOW lpmi );",
            "name": "InsertMenuItemW"
        },
        {
            "signature": "BOOL InsertMenuW( [in] HMENU hMenu, [in] UINT uPosition, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCWSTR lpNewItem );",
            "name": "InsertMenuW"
        },
        {
            "signature": "int InternalGetWindowText( [in] HWND hWnd, [out] LPWSTR pString, [in] int cchMaxCount );",
            "name": "InternalGetWindowText"
        },
        {
            "signature": "BOOL IntersectRect( [out] LPRECT lprcDst, [in] const RECT *lprcSrc1, [in] const RECT *lprcSrc2 );",
            "name": "IntersectRect"
        },
        {
            "signature": "BOOL InvalidateRect( [in] HWND hWnd, [in] const RECT *lpRect, [in] BOOL bErase );",
            "name": "InvalidateRect"
        },
        {
            "signature": "BOOL InvalidateRgn( [in] HWND hWnd, [in] HRGN hRgn, [in] BOOL bErase );",
            "name": "InvalidateRgn"
        },
        {
            "signature": "BOOL InvertRect( [in] HDC hDC, [in] const RECT *lprc );",
            "name": "InvertRect"
        },
        {
            "signature": "BOOL IsCharAlphaA( [in] CHAR ch );",
            "name": "IsCharAlphaA"
        },
        {
            "signature": "BOOL IsCharAlphaNumericA( [in] CHAR ch );",
            "name": "IsCharAlphaNumericA"
        },
        {
            "signature": "BOOL IsCharAlphaNumericW( [in] WCHAR ch );",
            "name": "IsCharAlphaNumericW"
        },
        {
            "signature": "BOOL IsCharAlphaW( [in] WCHAR ch );",
            "name": "IsCharAlphaW"
        },
        {
            "signature": "BOOL IsCharLowerA( [in] CHAR ch );",
            "name": "IsCharLowerA"
        },
        {
            "signature": "BOOL IsCharLowerW( WCHAR ch );",
            "name": "IsCharLowerW"
        },
        {
            "signature": "BOOL IsCharUpperA( [in] CHAR ch );",
            "name": "IsCharUpperA"
        },
        {
            "signature": "BOOL IsCharUpperW( [in] WCHAR ch );",
            "name": "IsCharUpperW"
        },
        {
            "signature": "BOOL IsChild( [in] HWND hWndParent, [in] HWND hWnd );",
            "name": "IsChild"
        },
        {
            "signature": "BOOL IsClipboardFormatAvailable( [in] UINT format );",
            "name": "IsClipboardFormatAvailable"
        },
        {
            "signature": "BOOL IsDialogMessageA( [in] HWND hDlg, [in] LPMSG lpMsg );",
            "name": "IsDialogMessageA"
        },
        {
            "signature": "BOOL IsDialogMessageW( [in] HWND hDlg, [in] LPMSG lpMsg );",
            "name": "IsDialogMessageW"
        },
        {
            "signature": "UINT IsDlgButtonChecked( [in] HWND hDlg, [in] int nIDButton );",
            "name": "IsDlgButtonChecked"
        },
        {
            "signature": "BOOL IsGUIThread( [in] BOOL bConvert );",
            "name": "IsGUIThread"
        },
        {
            "signature": "BOOL IsHungAppWindow( [in] HWND hwnd );",
            "name": "IsHungAppWindow"
        },
        {
            "signature": "BOOL IsIconic( [in] HWND hWnd );",
            "name": "IsIconic"
        },
        {
            "signature": "BOOL IsImmersiveProcess( [in] HANDLE hProcess );",
            "name": "IsImmersiveProcess"
        },
        {
            "signature": "BOOL IsMenu( [in] HMENU hMenu );",
            "name": "IsMenu"
        },
        {
            "signature": "BOOL IsMouseInPointerEnabled();",
            "name": "IsMouseInPointerEnabled"
        },
        {
            "signature": "BOOL IsProcessDPIAware();",
            "name": "IsProcessDPIAware"
        },
        {
            "signature": "BOOL IsRectEmpty( [in] const RECT *lprc );",
            "name": "IsRectEmpty"
        },
        {
            "signature": "BOOL IsTouchWindow( [in] HWND hwnd, [out, optional] PULONG pulFlags );",
            "name": "IsTouchWindow"
        },
        {
            "signature": "BOOL IsValidDpiAwarenessContext( [in] DPI_AWARENESS_CONTEXT value );",
            "name": "IsValidDpiAwarenessContext"
        },
        {
            "signature": "BOOL IsWindow( [in, optional] HWND hWnd );",
            "name": "IsWindow"
        },
        {
            "signature": "BOOL IsWindowEnabled( [in] HWND hWnd );",
            "name": "IsWindowEnabled"
        },
        {
            "signature": "BOOL IsWindowUnicode( [in] HWND hWnd );",
            "name": "IsWindowUnicode"
        },
        {
            "signature": "BOOL IsWindowVisible( [in] HWND hWnd );",
            "name": "IsWindowVisible"
        },
        {
            "signature": "BOOL IsWinEventHookInstalled( [in] DWORD event );",
            "name": "IsWinEventHookInstalled"
        },
        {
            "signature": "BOOL IsWow64Message();",
            "name": "IsWow64Message"
        },
        {
            "signature": "BOOL IsZoomed( [in] HWND hWnd );",
            "name": "IsZoomed"
        },
        {
            "signature": "void keybd_event( [in] BYTE bVk, [in] BYTE bScan, [in] DWORD dwFlags, [in] ULONG_PTR dwExtraInfo );",
            "name": "keybd_event"
        },
        {
            "signature": "BOOL KillTimer( [in, optional] HWND hWnd, [in] UINT_PTR uIDEvent );",
            "name": "KillTimer"
        },
        {
            "signature": "HACCEL LoadAcceleratorsA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpTableName );",
            "name": "LoadAcceleratorsA"
        },
        {
            "signature": "HACCEL LoadAcceleratorsW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpTableName );",
            "name": "LoadAcceleratorsW"
        },
        {
            "signature": "HBITMAP LoadBitmapA( [in] HINSTANCE hInstance, [in] LPCSTR lpBitmapName );",
            "name": "LoadBitmapA"
        },
        {
            "signature": "HBITMAP LoadBitmapW( [in] HINSTANCE hInstance, [in] LPCWSTR lpBitmapName );",
            "name": "LoadBitmapW"
        },
        {
            "signature": "HCURSOR LoadCursorA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpCursorName );",
            "name": "LoadCursorA"
        },
        {
            "signature": "HCURSOR LoadCursorFromFileA( [in] LPCSTR lpFileName );",
            "name": "LoadCursorFromFileA"
        },
        {
            "signature": "HCURSOR LoadCursorFromFileW( [in] LPCWSTR lpFileName );",
            "name": "LoadCursorFromFileW"
        },
        {
            "signature": "HCURSOR LoadCursorW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpCursorName );",
            "name": "LoadCursorW"
        },
        {
            "signature": "HICON LoadIconA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpIconName );",
            "name": "LoadIconA"
        },
        {
            "signature": "HICON LoadIconW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpIconName );",
            "name": "LoadIconW"
        },
        {
            "signature": "HANDLE LoadImageA( [in, optional] HINSTANCE hInst, [in] LPCSTR name, [in] UINT type, [in] int cx, [in] int cy, [in] UINT fuLoad );",
            "name": "LoadImageA"
        },
        {
            "signature": "HANDLE LoadImageW( [in, optional] HINSTANCE hInst, [in] LPCWSTR name, [in] UINT type, [in] int cx, [in] int cy, [in] UINT fuLoad );",
            "name": "LoadImageW"
        },
        {
            "signature": "HKL LoadKeyboardLayoutA( [in] LPCSTR pwszKLID, [in] UINT Flags );",
            "name": "LoadKeyboardLayoutA"
        },
        {
            "signature": "HKL LoadKeyboardLayoutW( [in] LPCWSTR pwszKLID, [in] UINT Flags );",
            "name": "LoadKeyboardLayoutW"
        },
        {
            "signature": "HMENU LoadMenuA( [in, optional] HINSTANCE hInstance, [in] LPCSTR lpMenuName );",
            "name": "LoadMenuA"
        },
        {
            "signature": "HMENU LoadMenuIndirectA( [in] const MENUTEMPLATEA *lpMenuTemplate );",
            "name": "LoadMenuIndirectA"
        },
        {
            "signature": "HMENU LoadMenuIndirectW( [in] const MENUTEMPLATEW *lpMenuTemplate );",
            "name": "LoadMenuIndirectW"
        },
        {
            "signature": "HMENU LoadMenuW( [in, optional] HINSTANCE hInstance, [in] LPCWSTR lpMenuName );",
            "name": "LoadMenuW"
        },
        {
            "signature": "int LoadStringA( [in, optional] HINSTANCE hInstance, [in] UINT uID, [out] LPSTR lpBuffer, [in] int cchBufferMax );",
            "name": "LoadStringA"
        },
        {
            "signature": "int LoadStringW( [in, optional] HINSTANCE hInstance, [in] UINT uID, [out] LPWSTR lpBuffer, [in] int cchBufferMax );",
            "name": "LoadStringW"
        },
        {
            "signature": "BOOL LockSetForegroundWindow( [in] UINT uLockCode );",
            "name": "LockSetForegroundWindow"
        },
        {
            "signature": "BOOL LockWindowUpdate( [in] HWND hWndLock );",
            "name": "LockWindowUpdate"
        },
        {
            "signature": "BOOL LockWorkStation();",
            "name": "LockWorkStation"
        },
        {
            "signature": "BOOL LogicalToPhysicalPoint( [in] HWND hWnd, [in, out] LPPOINT lpPoint );",
            "name": "LogicalToPhysicalPoint"
        },
        {
            "signature": "BOOL LogicalToPhysicalPointForPerMonitorDPI( [in] HWND hWnd, [in, out] LPPOINT lpPoint );",
            "name": "LogicalToPhysicalPointForPerMonitorDPI"
        },
        {
            "signature": "int LookupIconIdFromDirectory( [in] PBYTE presbits, [in] BOOL fIcon );",
            "name": "LookupIconIdFromDirectory"
        },
        {
            "signature": "int LookupIconIdFromDirectoryEx( [in] PBYTE presbits, [in] BOOL fIcon, [in] int cxDesired, [in] int cyDesired, [in] UINT Flags );",
            "name": "LookupIconIdFromDirectoryEx"
        },
        {
            "signature": "BOOL MapDialogRect( [in] HWND hDlg, [in, out] LPRECT lpRect );",
            "name": "MapDialogRect"
        },
        {
            "signature": "UINT MapVirtualKeyA( [in] UINT uCode, [in] UINT uMapType );",
            "name": "MapVirtualKeyA"
        },
        {
            "signature": "UINT MapVirtualKeyExA( [in] UINT uCode, [in] UINT uMapType, [in, out, optional] HKL dwhkl );",
            "name": "MapVirtualKeyExA"
        },
        {
            "signature": "UINT MapVirtualKeyExW( [in] UINT uCode, [in] UINT uMapType, [in, out, optional] HKL dwhkl );",
            "name": "MapVirtualKeyExW"
        },
        {
            "signature": "UINT MapVirtualKeyW( [in] UINT uCode, [in] UINT uMapType );",
            "name": "MapVirtualKeyW"
        },
        {
            "signature": "int MapWindowPoints( [in] HWND hWndFrom, [in] HWND hWndTo, [in, out] LPPOINT lpPoints, [in] UINT cPoints );",
            "name": "MapWindowPoints"
        },
        {
            "signature": "int MenuItemFromPoint( [in, optional] HWND hWnd, [in] HMENU hMenu, [in] POINT ptScreen );",
            "name": "MenuItemFromPoint"
        },
        {
            "signature": "BOOL MessageBeep( [in] UINT uType );",
            "name": "MessageBeep"
        },
        {
            "signature": "int MessageBox( [in, optional] HWND hWnd, [in, optional] LPCTSTR lpText, [in, optional] LPCTSTR lpCaption, [in] UINT uType );",
            "name": "MessageBox"
        },
        {
            "signature": "int MessageBoxA( [in, optional] HWND hWnd, [in, optional] LPCSTR lpText, [in, optional] LPCSTR lpCaption, [in] UINT uType );",
            "name": "MessageBoxA"
        },
        {
            "signature": "int MessageBoxExA( [in, optional] HWND hWnd, [in, optional] LPCSTR lpText, [in, optional] LPCSTR lpCaption, [in] UINT uType, [in] WORD wLanguageId );",
            "name": "MessageBoxExA"
        },
        {
            "signature": "int MessageBoxExW( [in, optional] HWND hWnd, [in, optional] LPCWSTR lpText, [in, optional] LPCWSTR lpCaption, [in] UINT uType, [in] WORD wLanguageId );",
            "name": "MessageBoxExW"
        },
        {
            "signature": "int MessageBoxIndirectA( [in] const MSGBOXPARAMSA *lpmbp );",
            "name": "MessageBoxIndirectA"
        },
        {
            "signature": "int MessageBoxIndirectW( [in] const MSGBOXPARAMSW *lpmbp );",
            "name": "MessageBoxIndirectW"
        },
        {
            "signature": "int MessageBoxW( [in, optional] HWND hWnd, [in, optional] LPCWSTR lpText, [in, optional] LPCWSTR lpCaption, [in] UINT uType );",
            "name": "MessageBoxW"
        },
        {
            "signature": "BOOL ModifyMenuA( [in] HMENU hMnu, [in] UINT uPosition, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCSTR lpNewItem );",
            "name": "ModifyMenuA"
        },
        {
            "signature": "BOOL ModifyMenuW( [in] HMENU hMnu, [in] UINT uPosition, [in] UINT uFlags, [in] UINT_PTR uIDNewItem, [in, optional] LPCWSTR lpNewItem );",
            "name": "ModifyMenuW"
        },
        {
            "signature": "MONITORENUMPROC Monitorenumproc; BOOL Monitorenumproc( HMONITOR unnamedParam1, HDC unnamedParam2, LPRECT unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "MONITORENUMPROC callback"
        },
        {
            "signature": "HMONITOR MonitorFromPoint( [in] POINT pt, [in] DWORD dwFlags );",
            "name": "MonitorFromPoint"
        },
        {
            "signature": "HMONITOR MonitorFromRect( [in] LPCRECT lprc, [in] DWORD dwFlags );",
            "name": "MonitorFromRect"
        },
        {
            "signature": "HMONITOR MonitorFromWindow( [in] HWND hwnd, [in] DWORD dwFlags );",
            "name": "MonitorFromWindow"
        },
        {
            "signature": "void mouse_event( [in] DWORD dwFlags, [in] DWORD dx, [in] DWORD dy, [in] DWORD dwData, [in] ULONG_PTR dwExtraInfo );",
            "name": "mouse_event"
        },
        {
            "signature": "BOOL MoveWindow( [in] HWND hWnd, [in] int X, [in] int Y, [in] int nWidth, [in] int nHeight, [in] BOOL bRepaint );",
            "name": "MoveWindow"
        },
        {
            "signature": "MSGBOXCALLBACK Msgboxcallback; void Msgboxcallback( LPHELPINFO lpHelpInfo ) {...}",
            "name": "MSGBOXCALLBACK callback"
        },
        {
            "signature": "DWORD MsgWaitForMultipleObjects( [in] DWORD nCount, [in] const HANDLE *pHandles, [in] BOOL fWaitAll, [in] DWORD dwMilliseconds, [in] DWORD dwWakeMask );",
            "name": "MsgWaitForMultipleObjects"
        },
        {
            "signature": "DWORD MsgWaitForMultipleObjectsEx( [in] DWORD nCount, [in] const HANDLE *pHandles, [in] DWORD dwMilliseconds, [in] DWORD dwWakeMask, [in] DWORD dwFlags );",
            "name": "MsgWaitForMultipleObjectsEx"
        },
        {
            "signature": "void NotifyWinEvent( [in] DWORD event, [in] HWND hwnd, [in] LONG idObject, [in] LONG idChild );",
            "name": "NotifyWinEvent"
        },
        {
            "signature": "DWORD OemKeyScan( [in] WORD wOemChar );",
            "name": "OemKeyScan"
        },
        {
            "signature": "BOOL OemToCharA( [in] LPCSTR pSrc, [out] LPSTR pDst );",
            "name": "OemToCharA"
        },
        {
            "signature": "BOOL OemToCharBuffA( [in] LPCSTR lpszSrc, [out] LPSTR lpszDst, [in] DWORD cchDstLength );",
            "name": "OemToCharBuffA"
        },
        {
            "signature": "BOOL OemToCharBuffW( [in] LPCSTR lpszSrc, [out] LPWSTR lpszDst, [in] DWORD cchDstLength );",
            "name": "OemToCharBuffW"
        },
        {
            "signature": "BOOL OemToCharW( [in] LPCSTR pSrc, [out] LPWSTR pDst );",
            "name": "OemToCharW"
        },
        {
            "signature": "BOOL OffsetRect( [in, out] LPRECT lprc, [in] int dx, [in] int dy );",
            "name": "OffsetRect"
        },
        {
            "signature": "BOOL OpenClipboard( [in, optional] HWND hWndNewOwner );",
            "name": "OpenClipboard"
        },
        {
            "signature": "HDESK OpenDesktopA( [in] LPCSTR lpszDesktop, [in] DWORD dwFlags, [in] BOOL fInherit, [in] ACCESS_MASK dwDesiredAccess );",
            "name": "OpenDesktopA"
        },
        {
            "signature": "HDESK OpenDesktopW( [in] LPCWSTR lpszDesktop, [in] DWORD dwFlags, [in] BOOL fInherit, [in] ACCESS_MASK dwDesiredAccess );",
            "name": "OpenDesktopW"
        },
        {
            "signature": "BOOL OpenIcon( [in] HWND hWnd );",
            "name": "OpenIcon"
        },
        {
            "signature": "HDESK OpenInputDesktop( [in] DWORD dwFlags, [in] BOOL fInherit, [in] ACCESS_MASK dwDesiredAccess );",
            "name": "OpenInputDesktop"
        },
        {
            "signature": "HWINSTA OpenWindowStationA( [in] LPCSTR lpszWinSta, [in] BOOL fInherit, [in] ACCESS_MASK dwDesiredAccess );",
            "name": "OpenWindowStationA"
        },
        {
            "signature": "HWINSTA OpenWindowStationW( [in] LPCWSTR lpszWinSta, [in] BOOL fInherit, [in] ACCESS_MASK dwDesiredAccess );",
            "name": "OpenWindowStationW"
        },
        {
            "signature": "LRESULT PackTouchHitTestingProximityEvaluation( [in] const TOUCH_HIT_TESTING_INPUT *pHitTestingInput, [in] const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval );",
            "name": "PackTouchHitTestingProximityEvaluation"
        },
        {
            "signature": "BOOL PaintDesktop( [in] HDC hdc );",
            "name": "PaintDesktop"
        },
        {
            "signature": "BOOL PeekMessageA( [out] LPMSG lpMsg, [in, optional] HWND hWnd, [in] UINT wMsgFilterMin, [in] UINT wMsgFilterMax, [in] UINT wRemoveMsg );",
            "name": "PeekMessageA"
        },
        {
            "signature": "BOOL PeekMessageW( [out] LPMSG lpMsg, [in, optional] HWND hWnd, [in] UINT wMsgFilterMin, [in] UINT wMsgFilterMax, [in] UINT wRemoveMsg );",
            "name": "PeekMessageW"
        },
        {
            "signature": "BOOL PhysicalToLogicalPoint( [in] HWND hWnd, [in, out] LPPOINT lpPoint );",
            "name": "PhysicalToLogicalPoint"
        },
        {
            "signature": "BOOL PhysicalToLogicalPointForPerMonitorDPI( [in] HWND hWnd, [in, out] LPPOINT lpPoint );",
            "name": "PhysicalToLogicalPointForPerMonitorDPI"
        },
        {
            "signature": "BOOL PostMessageA( [in, optional] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "PostMessageA"
        },
        {
            "signature": "BOOL PostMessageW( [in, optional] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "PostMessageW"
        },
        {
            "signature": "void PostQuitMessage( [in] int nExitCode );",
            "name": "PostQuitMessage"
        },
        {
            "signature": "BOOL PostThreadMessageA( [in] DWORD idThread, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "PostThreadMessageA"
        },
        {
            "signature": "BOOL PostThreadMessageW( [in] DWORD idThread, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "PostThreadMessageW"
        },
        {
            "signature": "BOOL PrintWindow( HWND hwnd, HDC hdcBlt, UINT nFlags );",
            "name": "PrintWindow"
        },
        {
            "signature": "UINT PrivateExtractIconsA( [in] LPCSTR szFileName, [in] int nIconIndex, [in] int cxIcon, [in] int cyIcon, [out, optional] HICON *phicon, [out, optional] UINT *piconid, [in] UINT nIcons, [in] UINT flags );",
            "name": "PrivateExtractIconsA"
        },
        {
            "signature": "UINT PrivateExtractIconsW( [in] LPCWSTR szFileName, [in] int nIconIndex, [in] int cxIcon, [in] int cyIcon, [out, optional] HICON *phicon, [out, optional] UINT *piconid, [in] UINT nIcons, [in] UINT flags );",
            "name": "PrivateExtractIconsW"
        },
        {
            "signature": "PROPENUMPROCA Propenumproca; BOOL Propenumproca( HWND unnamedParam1, LPCSTR unnamedParam2, HANDLE unnamedParam3 ) {...}",
            "name": "PROPENUMPROCA callback"
        },
        {
            "signature": "PROPENUMPROCEXA Propenumprocexa; BOOL Propenumprocexa( HWND unnamedParam1, LPSTR unnamedParam2, HANDLE unnamedParam3, ULONG_PTR unnamedParam4 ) {...}",
            "name": "PROPENUMPROCEXA callback"
        },
        {
            "signature": "PROPENUMPROCEXW Propenumprocexw; BOOL Propenumprocexw( HWND unnamedParam1, LPWSTR unnamedParam2, HANDLE unnamedParam3, ULONG_PTR unnamedParam4 ) {...}",
            "name": "PROPENUMPROCEXW callback"
        },
        {
            "signature": "PROPENUMPROCW Propenumprocw; BOOL Propenumprocw( HWND unnamedParam1, LPCWSTR unnamedParam2, HANDLE unnamedParam3 ) {...}",
            "name": "PROPENUMPROCW callback"
        },
        {
            "signature": "BOOL PtInRect( [in] const RECT *lprc, [in] POINT pt );",
            "name": "PtInRect"
        },
        {
            "signature": "LONG QueryDisplayConfig( [in] UINT32 flags, [in, out] UINT32 *numPathArrayElements, [out] DISPLAYCONFIG_PATH_INFO *pathArray, [in, out] UINT32 *numModeInfoArrayElements, [out] DISPLAYCONFIG_MODE_INFO *modeInfoArray, [out, optional] DISPLAYCONFIG_TOPOLOGY_ID *currentTopologyId );",
            "name": "QueryDisplayConfig"
        },
        {
            "signature": "HWND RealChildWindowFromPoint( [in] HWND hwndParent, [in] POINT ptParentClientCoords );",
            "name": "RealChildWindowFromPoint"
        },
        {
            "signature": "UINT RealGetWindowClassA( [in] HWND hwnd, [out] LPSTR ptszClassName, [in] UINT cchClassNameMax );",
            "name": "RealGetWindowClassA"
        },
        {
            "signature": "UINT RealGetWindowClassW( [in] HWND hwnd, [out] LPWSTR ptszClassName, [in] UINT cchClassNameMax );",
            "name": "RealGetWindowClassW"
        },
        {
            "signature": "BOOL RedrawWindow( [in] HWND hWnd, [in] const RECT *lprcUpdate, [in] HRGN hrgnUpdate, [in] UINT flags );",
            "name": "RedrawWindow"
        },
        {
            "signature": "ATOM RegisterClassA( [in] const WNDCLASSA *lpWndClass );",
            "name": "RegisterClassA"
        },
        {
            "signature": "ATOM RegisterClassExA( [in] const WNDCLASSEXA *unnamedParam1 );",
            "name": "RegisterClassExA"
        },
        {
            "signature": "ATOM RegisterClassExW( [in] const WNDCLASSEXW *unnamedParam1 );",
            "name": "RegisterClassExW"
        },
        {
            "signature": "ATOM RegisterClassW( [in] const WNDCLASSW *lpWndClass );",
            "name": "RegisterClassW"
        },
        {
            "signature": "UINT RegisterClipboardFormatA( [in] LPCSTR lpszFormat );",
            "name": "RegisterClipboardFormatA"
        },
        {
            "signature": "UINT RegisterClipboardFormatW( [in] LPCWSTR lpszFormat );",
            "name": "RegisterClipboardFormatW"
        },
        {
            "signature": "HDEVNOTIFY RegisterDeviceNotificationA( [in] HANDLE hRecipient, [in] LPVOID NotificationFilter, [in] DWORD Flags );",
            "name": "RegisterDeviceNotificationA"
        },
        {
            "signature": "HDEVNOTIFY RegisterDeviceNotificationW( [in] HANDLE hRecipient, [in] LPVOID NotificationFilter, [in] DWORD Flags );",
            "name": "RegisterDeviceNotificationW"
        },
        {
            "signature": "BOOL RegisterForTooltipDismissNotification( HWND hWnd, TOOLTIP_DISMISS_FLAGS tdFlags );",
            "name": "RegisterForTooltipDismissNotification"
        },
        {
            "signature": "BOOL RegisterHotKey( [in, optional] HWND hWnd, [in] int id, [in] UINT fsModifiers, [in] UINT vk );",
            "name": "RegisterHotKey"
        },
        {
            "signature": "BOOL RegisterPointerDeviceNotifications( [in] HWND window, [in] BOOL notifyRange );",
            "name": "RegisterPointerDeviceNotifications"
        },
        {
            "signature": "BOOL RegisterPointerInputTarget( [in] HWND hwnd, [in] POINTER_INPUT_TYPE pointerType );",
            "name": "RegisterPointerInputTarget"
        },
        {
            "signature": "BOOL RegisterPointerInputTargetEx( [in] HWND hwnd, [in] POINTER_INPUT_TYPE pointerType, [in] BOOL fObserve );",
            "name": "RegisterPointerInputTargetEx"
        },
        {
            "signature": "HPOWERNOTIFY RegisterPowerSettingNotification( [in] HANDLE hRecipient, [in] LPCGUID PowerSettingGuid, [in] DWORD Flags );",
            "name": "RegisterPowerSettingNotification"
        },
        {
            "signature": "BOOL RegisterRawInputDevices( [in] PCRAWINPUTDEVICE pRawInputDevices, [in] UINT uiNumDevices, [in] UINT cbSize );",
            "name": "RegisterRawInputDevices"
        },
        {
            "signature": "BOOL RegisterShellHookWindow( [in] HWND hwnd );",
            "name": "RegisterShellHookWindow"
        },
        {
            "signature": "HPOWERNOTIFY RegisterSuspendResumeNotification( [in] HANDLE hRecipient, [in] DWORD Flags );",
            "name": "RegisterSuspendResumeNotification"
        },
        {
            "signature": "BOOL RegisterTouchHitTestingWindow( [in] HWND hwnd, [in] ULONG value );",
            "name": "RegisterTouchHitTestingWindow"
        },
        {
            "signature": "BOOL RegisterTouchWindow( [in] HWND hwnd, [in] ULONG ulFlags );",
            "name": "RegisterTouchWindow"
        },
        {
            "signature": "UINT RegisterWindowMessageA( [in] LPCSTR lpString );",
            "name": "RegisterWindowMessageA"
        },
        {
            "signature": "UINT RegisterWindowMessageW( [in] LPCWSTR lpString );",
            "name": "RegisterWindowMessageW"
        },
        {
            "signature": "BOOL ReleaseCapture();",
            "name": "ReleaseCapture"
        },
        {
            "signature": "int ReleaseDC( [in] HWND hWnd, [in] HDC hDC );",
            "name": "ReleaseDC"
        },
        {
            "signature": "BOOL RemoveClipboardFormatListener( [in] HWND hwnd );",
            "name": "RemoveClipboardFormatListener"
        },
        {
            "signature": "BOOL RemoveMenu( [in] HMENU hMenu, [in] UINT uPosition, [in] UINT uFlags );",
            "name": "RemoveMenu"
        },
        {
            "signature": "HANDLE RemovePropA( [in] HWND hWnd, [in] LPCSTR lpString );",
            "name": "RemovePropA"
        },
        {
            "signature": "HANDLE RemovePropW( [in] HWND hWnd, [in] LPCWSTR lpString );",
            "name": "RemovePropW"
        },
        {
            "signature": "BOOL ReplyMessage( [in] LRESULT lResult );",
            "name": "ReplyMessage"
        },
        {
            "signature": "BOOL ScreenToClient( [in] HWND hWnd, LPPOINT lpPoint );",
            "name": "ScreenToClient"
        },
        {
            "signature": "BOOL ScrollDC( [in] HDC hDC, [in] int dx, [in] int dy, [in] const RECT *lprcScroll, [in] const RECT *lprcClip, [in] HRGN hrgnUpdate, [out] LPRECT lprcUpdate );",
            "name": "ScrollDC"
        },
        {
            "signature": "BOOL ScrollWindow( [in] HWND hWnd, [in] int XAmount, [in] int YAmount, [in] const RECT *lpRect, [in] const RECT *lpClipRect );",
            "name": "ScrollWindow"
        },
        {
            "signature": "int ScrollWindowEx( [in] HWND hWnd, [in] int dx, [in] int dy, [in] const RECT *prcScroll, [in] const RECT *prcClip, [in] HRGN hrgnUpdate, [out] LPRECT prcUpdate, [in] UINT flags );",
            "name": "ScrollWindowEx"
        },
        {
            "signature": "SENDASYNCPROC Sendasyncproc; void Sendasyncproc( HWND unnamedParam1, UINT unnamedParam2, ULONG_PTR unnamedParam3, LRESULT unnamedParam4 ) {...}",
            "name": "SENDASYNCPROC callback"
        },
        {
            "signature": "LRESULT SendDlgItemMessageA( [in] HWND hDlg, [in] int nIDDlgItem, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendDlgItemMessageA"
        },
        {
            "signature": "LRESULT SendDlgItemMessageW( [in] HWND hDlg, [in] int nIDDlgItem, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendDlgItemMessageW"
        },
        {
            "signature": "UINT SendInput( [in] UINT cInputs, [in] LPINPUT pInputs, [in] int cbSize );",
            "name": "SendInput"
        },
        {
            "signature": "LRESULT SendMessage( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendMessage"
        },
        {
            "signature": "LRESULT SendMessageA( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendMessageA"
        },
        {
            "signature": "BOOL SendMessageCallbackA( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [in] SENDASYNCPROC lpResultCallBack, [in] ULONG_PTR dwData );",
            "name": "SendMessageCallbackA"
        },
        {
            "signature": "BOOL SendMessageCallbackW( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [in] SENDASYNCPROC lpResultCallBack, [in] ULONG_PTR dwData );",
            "name": "SendMessageCallbackW"
        },
        {
            "signature": "LRESULT SendMessageTimeoutA( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [in] UINT fuFlags, [in] UINT uTimeout, [out, optional] PDWORD_PTR lpdwResult );",
            "name": "SendMessageTimeoutA"
        },
        {
            "signature": "LRESULT SendMessageTimeoutW( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam, [in] UINT fuFlags, [in] UINT uTimeout, [out, optional] PDWORD_PTR lpdwResult );",
            "name": "SendMessageTimeoutW"
        },
        {
            "signature": "LRESULT SendMessageW( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendMessageW"
        },
        {
            "signature": "BOOL SendNotifyMessageA( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendNotifyMessageA"
        },
        {
            "signature": "BOOL SendNotifyMessageW( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "SendNotifyMessageW"
        },
        {
            "signature": "HWND SetActiveWindow( [in] HWND hWnd );",
            "name": "SetActiveWindow"
        },
        {
            "signature": "BOOL SetAdditionalForegroundBoostProcesses( HWND topLevelWindow, DWORD processHandleCount, HANDLE *processHandleArray );",
            "name": "SetAdditionalForegroundBoostProcesses"
        },
        {
            "signature": "HWND SetCapture( [in] HWND hWnd );",
            "name": "SetCapture"
        },
        {
            "signature": "BOOL SetCaretBlinkTime( [in] UINT uMSeconds );",
            "name": "SetCaretBlinkTime"
        },
        {
            "signature": "BOOL SetCaretPos( [in] int X, [in] int Y );",
            "name": "SetCaretPos"
        },
        {
            "signature": "DWORD SetClassLongA( [in] HWND hWnd, [in] int nIndex, [in] LONG dwNewLong );",
            "name": "SetClassLongA"
        },
        {
            "signature": "ULONG_PTR SetClassLongPtrA( [in] HWND hWnd, [in] int nIndex, [in] LONG_PTR dwNewLong );",
            "name": "SetClassLongPtrA"
        },
        {
            "signature": "ULONG_PTR SetClassLongPtrW( [in] HWND hWnd, [in] int nIndex, [in] LONG_PTR dwNewLong );",
            "name": "SetClassLongPtrW"
        },
        {
            "signature": "DWORD SetClassLongW( [in] HWND hWnd, [in] int nIndex, [in] LONG dwNewLong );",
            "name": "SetClassLongW"
        },
        {
            "signature": "WORD SetClassWord( [in] HWND hWnd, [in] int nIndex, [in] WORD wNewWord );",
            "name": "SetClassWord"
        },
        {
            "signature": "HANDLE SetClipboardData( [in] UINT uFormat, [in, optional] HANDLE hMem );",
            "name": "SetClipboardData"
        },
        {
            "signature": "HWND SetClipboardViewer( [in] HWND hWndNewViewer );",
            "name": "SetClipboardViewer"
        },
        {
            "signature": "UINT_PTR SetCoalescableTimer( [in, optional] HWND hWnd, [in] UINT_PTR nIDEvent, [in] UINT uElapse, [in, optional] TIMERPROC lpTimerFunc, [in] ULONG uToleranceDelay );",
            "name": "SetCoalescableTimer"
        },
        {
            "signature": "HCURSOR SetCursor( [in, optional] HCURSOR hCursor );",
            "name": "SetCursor"
        },
        {
            "signature": "BOOL SetCursorPos( [in] int X, [in] int Y );",
            "name": "SetCursorPos"
        },
        {
            "signature": "BOOL SetDialogControlDpiChangeBehavior( HWND hWnd, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask, DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values );",
            "name": "SetDialogControlDpiChangeBehavior"
        },
        {
            "signature": "BOOL SetDialogDpiChangeBehavior( HWND hDlg, DIALOG_DPI_CHANGE_BEHAVIORS mask, DIALOG_DPI_CHANGE_BEHAVIORS values );",
            "name": "SetDialogDpiChangeBehavior"
        },
        {
            "signature": "BOOL SetDisplayAutoRotationPreferences( [in] ORIENTATION_PREFERENCE orientation );",
            "name": "SetDisplayAutoRotationPreferences"
        },
        {
            "signature": "LONG SetDisplayConfig( [in] UINT32 numPathArrayElements, [in, optional] DISPLAYCONFIG_PATH_INFO *pathArray, [in] UINT32 numModeInfoArrayElements, [in, optional] DISPLAYCONFIG_MODE_INFO *modeInfoArray, [in] UINT32 flags );",
            "name": "SetDisplayConfig"
        },
        {
            "signature": "BOOL SetDlgItemInt( [in] HWND hDlg, [in] int nIDDlgItem, [in] UINT uValue, [in] BOOL bSigned );",
            "name": "SetDlgItemInt"
        },
        {
            "signature": "BOOL SetDlgItemTextA( [in] HWND hDlg, [in] int nIDDlgItem, [in] LPCSTR lpString );",
            "name": "SetDlgItemTextA"
        },
        {
            "signature": "BOOL SetDlgItemTextW( [in] HWND hDlg, [in] int nIDDlgItem, [in] LPCWSTR lpString );",
            "name": "SetDlgItemTextW"
        },
        {
            "signature": "BOOL SetDoubleClickTime( [in] UINT unnamedParam1 );",
            "name": "SetDoubleClickTime"
        },
        {
            "signature": "HWND SetFocus( [in, optional] HWND hWnd );",
            "name": "SetFocus"
        },
        {
            "signature": "BOOL SetForegroundWindow( [in] HWND hWnd );",
            "name": "SetForegroundWindow"
        },
        {
            "signature": "BOOL SetGestureConfig( [in] HWND hwnd, [in] DWORD dwReserved, [in] UINT cIDs, [in] PGESTURECONFIG pGestureConfig, [in] UINT cbSize );",
            "name": "SetGestureConfig"
        },
        {
            "signature": "BOOL SetKeyboardState( [in] LPBYTE lpKeyState );",
            "name": "SetKeyboardState"
        },
        {
            "signature": "void SetLastErrorEx( [in] DWORD dwErrCode, [in] DWORD dwType );",
            "name": "SetLastErrorEx"
        },
        {
            "signature": "BOOL SetLayeredWindowAttributes( [in] HWND hwnd, [in] COLORREF crKey, [in] BYTE bAlpha, [in] DWORD dwFlags );",
            "name": "SetLayeredWindowAttributes"
        },
        {
            "signature": "BOOL SetMenu( [in] HWND hWnd, [in, optional] HMENU hMenu );",
            "name": "SetMenu"
        },
        {
            "signature": "BOOL SetMenuContextHelpId( HMENU unnamedParam1, DWORD unnamedParam2 );",
            "name": "SetMenuContextHelpId"
        },
        {
            "signature": "BOOL SetMenuDefaultItem( [in] HMENU hMenu, [in] UINT uItem, [in] UINT fByPos );",
            "name": "SetMenuDefaultItem"
        },
        {
            "signature": "BOOL SetMenuInfo( [in] HMENU unnamedParam1, [in] LPCMENUINFO unnamedParam2 );",
            "name": "SetMenuInfo"
        },
        {
            "signature": "BOOL SetMenuItemBitmaps( [in] HMENU hMenu, [in] UINT uPosition, [in] UINT uFlags, [in, optional] HBITMAP hBitmapUnchecked, [in, optional] HBITMAP hBitmapChecked );",
            "name": "SetMenuItemBitmaps"
        },
        {
            "signature": "BOOL SetMenuItemInfoA( [in] HMENU hmenu, [in] UINT item, BOOL fByPositon, [in] LPCMENUITEMINFOA lpmii );",
            "name": "SetMenuItemInfoA"
        },
        {
            "signature": "BOOL SetMenuItemInfoW( [in] HMENU hmenu, [in] UINT item, BOOL fByPositon, [in] LPCMENUITEMINFOW lpmii );",
            "name": "SetMenuItemInfoW"
        },
        {
            "signature": "LPARAM SetMessageExtraInfo( [in] LPARAM lParam );",
            "name": "SetMessageExtraInfo"
        },
        {
            "signature": "HWND SetParent( [in] HWND hWndChild, [in, optional] HWND hWndNewParent );",
            "name": "SetParent"
        },
        {
            "signature": "BOOL SetPhysicalCursorPos( [in] int X, [in] int Y );",
            "name": "SetPhysicalCursorPos"
        },
        {
            "signature": "BOOL SetProcessDefaultLayout( [in] DWORD dwDefaultLayout );",
            "name": "SetProcessDefaultLayout"
        },
        {
            "signature": "BOOL SetProcessDPIAware();",
            "name": "SetProcessDPIAware"
        },
        {
            "signature": "BOOL SetProcessDpiAwarenessContext( [in] DPI_AWARENESS_CONTEXT value );",
            "name": "SetProcessDpiAwarenessContext"
        },
        {
            "signature": "BOOL SetProcessRestrictionExemption( BOOL fEnableExemption );",
            "name": "SetProcessRestrictionExemption"
        },
        {
            "signature": "BOOL SetProcessWindowStation( [in] HWINSTA hWinSta );",
            "name": "SetProcessWindowStation"
        },
        {
            "signature": "BOOL SetPropA( [in] HWND hWnd, [in] LPCSTR lpString, [in, optional] HANDLE hData );",
            "name": "SetPropA"
        },
        {
            "signature": "BOOL SetPropW( [in] HWND hWnd, [in] LPCWSTR lpString, [in, optional] HANDLE hData );",
            "name": "SetPropW"
        },
        {
            "signature": "BOOL SetRect( [out] LPRECT lprc, [in] int xLeft, [in] int yTop, [in] int xRight, [in] int yBottom );",
            "name": "SetRect"
        },
        {
            "signature": "BOOL SetRectEmpty( [out] LPRECT lprc );",
            "name": "SetRectEmpty"
        },
        {
            "signature": "int SetScrollInfo( [in] HWND hwnd, [in] int nBar, [in] LPCSCROLLINFO lpsi, [in] BOOL redraw );",
            "name": "SetScrollInfo"
        },
        {
            "signature": "int SetScrollPos( [in] HWND hWnd, [in] int nBar, [in] int nPos, [in] BOOL bRedraw );",
            "name": "SetScrollPos"
        },
        {
            "signature": "BOOL SetScrollRange( [in] HWND hWnd, [in] int nBar, [in] int nMinPos, [in] int nMaxPos, [in] BOOL bRedraw );",
            "name": "SetScrollRange"
        },
        {
            "signature": "BOOL SetSysColors( [in] int cElements, [in] const INT *lpaElements, [in] const COLORREF *lpaRgbValues );",
            "name": "SetSysColors"
        },
        {
            "signature": "BOOL SetSystemCursor( [in] HCURSOR hcur, [in] DWORD id );",
            "name": "SetSystemCursor"
        },
        {
            "signature": "UINT SetThreadCursorCreationScaling( UINT cursorDpi );",
            "name": "SetThreadCursorCreationScaling"
        },
        {
            "signature": "BOOL SetThreadDesktop( [in] HDESK hDesktop );",
            "name": "SetThreadDesktop"
        },
        {
            "signature": "DPI_AWARENESS_CONTEXT SetThreadDpiAwarenessContext( [in] DPI_AWARENESS_CONTEXT dpiContext );",
            "name": "SetThreadDpiAwarenessContext"
        },
        {
            "signature": "DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior( DPI_HOSTING_BEHAVIOR value );",
            "name": "SetThreadDpiHostingBehavior"
        },
        {
            "signature": "UINT_PTR SetTimer( [in, optional] HWND hWnd, [in] UINT_PTR nIDEvent, [in] UINT uElapse, [in, optional] TIMERPROC lpTimerFunc );",
            "name": "SetTimer"
        },
        {
            "signature": "BOOL SetUserObjectInformationA( [in] HANDLE hObj, [in] int nIndex, [in] PVOID pvInfo, [in] DWORD nLength );",
            "name": "SetUserObjectInformationA"
        },
        {
            "signature": "BOOL SetUserObjectInformationW( [in] HANDLE hObj, [in] int nIndex, [in] PVOID pvInfo, [in] DWORD nLength );",
            "name": "SetUserObjectInformationW"
        },
        {
            "signature": "BOOL SetUserObjectSecurity( [in] HANDLE hObj, [in] PSECURITY_INFORMATION pSIRequested, [in] PSECURITY_DESCRIPTOR pSID );",
            "name": "SetUserObjectSecurity"
        },
        {
            "signature": "BOOL SetWindowContextHelpId( HWND unnamedParam1, DWORD unnamedParam2 );",
            "name": "SetWindowContextHelpId"
        },
        {
            "signature": "BOOL SetWindowDisplayAffinity( [in] HWND hWnd, [in] DWORD dwAffinity );",
            "name": "SetWindowDisplayAffinity"
        },
        {
            "signature": "BOOL SetWindowFeedbackSetting( [in] HWND hwnd, [in] FEEDBACK_TYPE feedback, [in] DWORD dwFlags, [in] UINT32 size, [in, optional] const VOID *configuration );",
            "name": "SetWindowFeedbackSetting"
        },
        {
            "signature": "LONG SetWindowLongA( [in] HWND hWnd, [in] int nIndex, [in] LONG dwNewLong );",
            "name": "SetWindowLongA"
        },
        {
            "signature": "LONG_PTR SetWindowLongPtrA( [in] HWND hWnd, [in] int nIndex, [in] LONG_PTR dwNewLong );",
            "name": "SetWindowLongPtrA"
        },
        {
            "signature": "LONG_PTR SetWindowLongPtrW( [in] HWND hWnd, [in] int nIndex, [in] LONG_PTR dwNewLong );",
            "name": "SetWindowLongPtrW"
        },
        {
            "signature": "LONG SetWindowLongW( [in] HWND hWnd, [in] int nIndex, [in] LONG dwNewLong );",
            "name": "SetWindowLongW"
        },
        {
            "signature": "BOOL SetWindowPlacement( [in] HWND hWnd, [in] const WINDOWPLACEMENT *lpwndpl );",
            "name": "SetWindowPlacement"
        },
        {
            "signature": "BOOL SetWindowPos( [in] HWND hWnd, [in, optional] HWND hWndInsertAfter, [in] int X, [in] int Y, [in] int cx, [in] int cy, [in] UINT uFlags );",
            "name": "SetWindowPos"
        },
        {
            "signature": "int SetWindowRgn( [in] HWND hWnd, [in] HRGN hRgn, [in] BOOL bRedraw );",
            "name": "SetWindowRgn"
        },
        {
            "signature": "HHOOK SetWindowsHookExA( [in] int idHook, [in] HOOKPROC lpfn, [in] HINSTANCE hmod, [in] DWORD dwThreadId );",
            "name": "SetWindowsHookExA"
        },
        {
            "signature": "HHOOK SetWindowsHookExW( [in] int idHook, [in] HOOKPROC lpfn, [in] HINSTANCE hmod, [in] DWORD dwThreadId );",
            "name": "SetWindowsHookExW"
        },
        {
            "signature": "BOOL SetWindowTextA( [in] HWND hWnd, [in, optional] LPCSTR lpString );",
            "name": "SetWindowTextA"
        },
        {
            "signature": "BOOL SetWindowTextW( [in] HWND hWnd, [in, optional] LPCWSTR lpString );",
            "name": "SetWindowTextW"
        },
        {
            "signature": "HWINEVENTHOOK SetWinEventHook( [in] DWORD eventMin, [in] DWORD eventMax, [in] HMODULE hmodWinEventProc, [in] WINEVENTPROC pfnWinEventProc, [in] DWORD idProcess, [in] DWORD idThread, [in] DWORD dwFlags );",
            "name": "SetWinEventHook"
        },
        {
            "signature": "BOOL ShowCaret( [in, optional] HWND hWnd );",
            "name": "ShowCaret"
        },
        {
            "signature": "int ShowCursor( [in] BOOL bShow );",
            "name": "ShowCursor"
        },
        {
            "signature": "BOOL ShowOwnedPopups( [in] HWND hWnd, [in] BOOL fShow );",
            "name": "ShowOwnedPopups"
        },
        {
            "signature": "BOOL ShowScrollBar( [in] HWND hWnd, [in] int wBar, [in] BOOL bShow );",
            "name": "ShowScrollBar"
        },
        {
            "signature": "BOOL ShowWindow( [in] HWND hWnd, [in] int nCmdShow );",
            "name": "ShowWindow"
        },
        {
            "signature": "BOOL ShowWindowAsync( [in] HWND hWnd, [in] int nCmdShow );",
            "name": "ShowWindowAsync"
        },
        {
            "signature": "BOOL ShutdownBlockReasonCreate( [in] HWND hWnd, [in] LPCWSTR pwszReason );",
            "name": "ShutdownBlockReasonCreate"
        },
        {
            "signature": "BOOL ShutdownBlockReasonDestroy( [in] HWND hWnd );",
            "name": "ShutdownBlockReasonDestroy"
        },
        {
            "signature": "BOOL ShutdownBlockReasonQuery( [in] HWND hWnd, [out, optional] LPWSTR pwszBuff, [in, out] DWORD *pcchBuff );",
            "name": "ShutdownBlockReasonQuery"
        },
        {
            "signature": "BOOL SkipPointerFrameMessages( [in] UINT32 pointerId );",
            "name": "SkipPointerFrameMessages"
        },
        {
            "signature": "BOOL SoundSentry();",
            "name": "SoundSentry"
        },
        {
            "signature": "BOOL SubtractRect( [out] LPRECT lprcDst, [in] const RECT *lprcSrc1, [in] const RECT *lprcSrc2 );",
            "name": "SubtractRect"
        },
        {
            "signature": "BOOL SwapMouseButton( [in] BOOL fSwap );",
            "name": "SwapMouseButton"
        },
        {
            "signature": "BOOL SwitchDesktop( [in] HDESK hDesktop );",
            "name": "SwitchDesktop"
        },
        {
            "signature": "void SwitchToThisWindow( [in] HWND hwnd, [in] BOOL fUnknown );",
            "name": "SwitchToThisWindow"
        },
        {
            "signature": "BOOL SystemParametersInfoA( [in] UINT uiAction, [in] UINT uiParam, [in, out] PVOID pvParam, [in] UINT fWinIni );",
            "name": "SystemParametersInfoA"
        },
        {
            "signature": "BOOL SystemParametersInfoForDpi( [in] UINT uiAction, [in] UINT uiParam, [in, out] PVOID pvParam, [in] UINT fWinIni, [in] UINT dpi );",
            "name": "SystemParametersInfoForDpi"
        },
        {
            "signature": "BOOL SystemParametersInfoW( [in] UINT uiAction, [in] UINT uiParam, [in, out] PVOID pvParam, [in] UINT fWinIni );",
            "name": "SystemParametersInfoW"
        },
        {
            "signature": "LONG TabbedTextOutA( [in] HDC hdc, [in] int x, [in] int y, [in] LPCSTR lpString, [in] int chCount, [in] int nTabPositions, [in] const INT *lpnTabStopPositions, [in] int nTabOrigin );",
            "name": "TabbedTextOutA"
        },
        {
            "signature": "LONG TabbedTextOutW( [in] HDC hdc, [in] int x, [in] int y, [in] LPCWSTR lpString, [in] int chCount, [in] int nTabPositions, [in] const INT *lpnTabStopPositions, [in] int nTabOrigin );",
            "name": "TabbedTextOutW"
        },
        {
            "signature": "WORD TileWindows( [in, optional] HWND hwndParent, [in] UINT wHow, [in, optional] const RECT *lpRect, [in] UINT cKids, [in, optional] const HWND *lpKids );",
            "name": "TileWindows"
        },
        {
            "signature": "TIMERPROC Timerproc; void Timerproc( HWND unnamedParam1, UINT unnamedParam2, UINT_PTR unnamedParam3, DWORD unnamedParam4 ) {...}",
            "name": "TIMERPROC callback"
        },
        {
            "signature": "int ToAscii( [in] UINT uVirtKey, [in] UINT uScanCode, [in, optional] const BYTE *lpKeyState, [out] LPWORD lpChar, [in] UINT uFlags );",
            "name": "ToAscii"
        },
        {
            "signature": "int ToAsciiEx( [in] UINT uVirtKey, [in] UINT uScanCode, [in, optional] const BYTE *lpKeyState, [out] LPWORD lpChar, [in] UINT uFlags, [in, optional] HKL dwhkl );",
            "name": "ToAsciiEx"
        },
        {
            "signature": "int ToUnicode( [in] UINT wVirtKey, [in] UINT wScanCode, [in, optional] const BYTE *lpKeyState, [out] LPWSTR pwszBuff, [in] int cchBuff, [in] UINT wFlags );",
            "name": "ToUnicode"
        },
        {
            "signature": "int ToUnicodeEx( [in] UINT wVirtKey, [in] UINT wScanCode, [in] const BYTE *lpKeyState, [out] LPWSTR pwszBuff, [in] int cchBuff, [in] UINT wFlags, [in, optional] HKL dwhkl );",
            "name": "ToUnicodeEx"
        },
        {
            "signature": "BOOL TrackMouseEvent( [in, out] LPTRACKMOUSEEVENT lpEventTrack );",
            "name": "TrackMouseEvent"
        },
        {
            "signature": "BOOL TrackPopupMenu( [in] HMENU hMenu, [in] UINT uFlags, [in] int x, [in] int y, [in] int nReserved, [in] HWND hWnd, [in, optional] const RECT *prcRect );",
            "name": "TrackPopupMenu"
        },
        {
            "signature": "BOOL TrackPopupMenuEx( [in] HMENU hMenu, [in] UINT uFlags, [in] int x, [in] int y, [in] HWND hwnd, [in, optional] LPTPMPARAMS lptpm );",
            "name": "TrackPopupMenuEx"
        },
        {
            "signature": "int TranslateAcceleratorA( [in] HWND hWnd, [in] HACCEL hAccTable, [in] LPMSG lpMsg );",
            "name": "TranslateAcceleratorA"
        },
        {
            "signature": "int TranslateAcceleratorW( [in] HWND hWnd, [in] HACCEL hAccTable, [in] LPMSG lpMsg );",
            "name": "TranslateAcceleratorW"
        },
        {
            "signature": "BOOL TranslateMDISysAccel( [in] HWND hWndClient, [in] LPMSG lpMsg );",
            "name": "TranslateMDISysAccel"
        },
        {
            "signature": "BOOL TranslateMessage( [in] const MSG *lpMsg );",
            "name": "TranslateMessage"
        },
        {
            "signature": "BOOL UnhookWindowsHookEx( [in] HHOOK hhk );",
            "name": "UnhookWindowsHookEx"
        },
        {
            "signature": "BOOL UnhookWinEvent( [in] HWINEVENTHOOK hWinEventHook );",
            "name": "UnhookWinEvent"
        },
        {
            "signature": "BOOL UnionRect( [out] LPRECT lprcDst, [in] const RECT *lprcSrc1, [in] const RECT *lprcSrc2 );",
            "name": "UnionRect"
        },
        {
            "signature": "BOOL UnloadKeyboardLayout( [in] HKL hkl );",
            "name": "UnloadKeyboardLayout"
        },
        {
            "signature": "BOOL UnregisterClassA( [in] LPCSTR lpClassName, [in, optional] HINSTANCE hInstance );",
            "name": "UnregisterClassA"
        },
        {
            "signature": "BOOL UnregisterClassW( [in] LPCWSTR lpClassName, [in, optional] HINSTANCE hInstance );",
            "name": "UnregisterClassW"
        },
        {
            "signature": "BOOL UnregisterDeviceNotification( [in] HDEVNOTIFY Handle );",
            "name": "UnregisterDeviceNotification"
        },
        {
            "signature": "BOOL UnregisterHotKey( [in, optional] HWND hWnd, [in] int id );",
            "name": "UnregisterHotKey"
        },
        {
            "signature": "BOOL UnregisterPointerInputTarget( [in] HWND hwnd, [in] POINTER_INPUT_TYPE pointerType );",
            "name": "UnregisterPointerInputTarget"
        },
        {
            "signature": "BOOL UnregisterPointerInputTargetEx( [in] HWND hwnd, [in] POINTER_INPUT_TYPE pointerType );",
            "name": "UnregisterPointerInputTargetEx"
        },
        {
            "signature": "BOOL UnregisterPowerSettingNotification( [in] HPOWERNOTIFY Handle );",
            "name": "UnregisterPowerSettingNotification"
        },
        {
            "signature": "BOOL UnregisterSuspendResumeNotification( [in, out] HPOWERNOTIFY Handle );",
            "name": "UnregisterSuspendResumeNotification"
        },
        {
            "signature": "BOOL UnregisterTouchWindow( [in] HWND hwnd );",
            "name": "UnregisterTouchWindow"
        },
        {
            "signature": "BOOL UpdateLayeredWindow( [in] HWND hWnd, [in, optional] HDC hdcDst, [in, optional] POINT *pptDst, [in, optional] SIZE *psize, [in, optional] HDC hdcSrc, [in, optional] POINT *pptSrc, [in] COLORREF crKey, [in, optional] BLENDFUNCTION *pblend, [in] DWORD dwFlags );",
            "name": "UpdateLayeredWindow"
        },
        {
            "signature": "BOOL UpdateWindow( [in] HWND hWnd );",
            "name": "UpdateWindow"
        },
        {
            "signature": "BOOL UserHandleGrantAccess( [in] HANDLE hUserHandle, [in] HANDLE hJob, [in] BOOL bGrant );",
            "name": "UserHandleGrantAccess"
        },
        {
            "signature": "BOOL ValidateRect( [in] HWND hWnd, [in] const RECT *lpRect );",
            "name": "ValidateRect"
        },
        {
            "signature": "BOOL ValidateRgn( [in] HWND hWnd, [in] HRGN hRgn );",
            "name": "ValidateRgn"
        },
        {
            "signature": "SHORT VkKeyScanA( [in] CHAR ch );",
            "name": "VkKeyScanA"
        },
        {
            "signature": "SHORT VkKeyScanExA( [in] CHAR ch, [in] HKL dwhkl );",
            "name": "VkKeyScanExA"
        },
        {
            "signature": "SHORT VkKeyScanExW( [in] WCHAR ch, [in] HKL dwhkl );",
            "name": "VkKeyScanExW"
        },
        {
            "signature": "SHORT VkKeyScanW( [in] WCHAR ch );",
            "name": "VkKeyScanW"
        },
        {
            "signature": "DWORD WaitForInputIdle( [in] HANDLE hProcess, [in] DWORD dwMilliseconds );",
            "name": "WaitForInputIdle"
        },
        {
            "signature": "BOOL WaitMessage();",
            "name": "WaitMessage"
        },
        {
            "signature": "HWND WindowFromDC( [in] HDC hDC );",
            "name": "WindowFromDC"
        },
        {
            "signature": "HWND WindowFromPhysicalPoint( [in] POINT Point );",
            "name": "WindowFromPhysicalPoint"
        },
        {
            "signature": "HWND WindowFromPoint( [in] POINT Point );",
            "name": "WindowFromPoint"
        },
        {
            "signature": "WINEVENTPROC Wineventproc; void Wineventproc( HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime ) {...}",
            "name": "WINEVENTPROC callback"
        },
        {
            "signature": "BOOL WinHelpA( HWND hWndMain, LPCSTR lpszHelp, UINT uCommand, ULONG_PTR dwData );",
            "name": "WinHelpA"
        },
        {
            "signature": "BOOL WinHelpW( HWND hWndMain, LPCWSTR lpszHelp, UINT uCommand, ULONG_PTR dwData );",
            "name": "WinHelpW"
        },
        {
            "signature": "WNDPROC Wndproc; LRESULT Wndproc( HWND unnamedParam1, UINT unnamedParam2, WPARAM unnamedParam3, LPARAM unnamedParam4 ) {...}",
            "name": "WNDPROC callback"
        },
        {
            "signature": "int WINAPIV wsprintfA( [out] LPSTR unnamedParam1, [in] LPCSTR unnamedParam2, ... );",
            "name": "wsprintfA"
        },
        {
            "signature": "int WINAPIV wsprintfW( [out] LPWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, ... );",
            "name": "wsprintfW"
        },
        {
            "signature": "int wvsprintfA( [out] LPSTR unnamedParam1, [in] LPCSTR unnamedParam2, [in] va_list arglist );",
            "name": "wvsprintfA"
        },
        {
            "signature": "int wvsprintfW( [out] LPWSTR unnamedParam1, [in] LPCWSTR unnamedParam2, [in] va_list arglist );",
            "name": "wvsprintfW"
        }
    ],
    "Winver.h": [
        {
            "signature": "BOOL GetFileVersionInfoA( [in] LPCSTR lptstrFilename, DWORD dwHandle, [in] DWORD dwLen, [out] LPVOID lpData );",
            "name": "GetFileVersionInfoA"
        },
        {
            "signature": "BOOL GetFileVersionInfoExA( [in] DWORD dwFlags, [in] LPCSTR lpwstrFilename, DWORD dwHandle, [in] DWORD dwLen, [out] LPVOID lpData );",
            "name": "GetFileVersionInfoExA"
        },
        {
            "signature": "BOOL GetFileVersionInfoExW( [in] DWORD dwFlags, [in] LPCWSTR lpwstrFilename, DWORD dwHandle, [in] DWORD dwLen, [out] LPVOID lpData );",
            "name": "GetFileVersionInfoExW"
        },
        {
            "signature": "DWORD GetFileVersionInfoSizeA( [in] LPCSTR lptstrFilename, [out, optional] LPDWORD lpdwHandle );",
            "name": "GetFileVersionInfoSizeA"
        },
        {
            "signature": "DWORD GetFileVersionInfoSizeExA( [in] DWORD dwFlags, [in] LPCSTR lpwstrFilename, [out] LPDWORD lpdwHandle );",
            "name": "GetFileVersionInfoSizeExA"
        },
        {
            "signature": "DWORD GetFileVersionInfoSizeExW( [in] DWORD dwFlags, [in] LPCWSTR lpwstrFilename, [out] LPDWORD lpdwHandle );",
            "name": "GetFileVersionInfoSizeExW"
        },
        {
            "signature": "DWORD GetFileVersionInfoSizeW( [in] LPCWSTR lptstrFilename, [out, optional] LPDWORD lpdwHandle );",
            "name": "GetFileVersionInfoSizeW"
        },
        {
            "signature": "BOOL GetFileVersionInfoW( [in] LPCWSTR lptstrFilename, DWORD dwHandle, [in] DWORD dwLen, [out] LPVOID lpData );",
            "name": "GetFileVersionInfoW"
        },
        {
            "signature": "DWORD VerFindFileA( [in] DWORD uFlags, [in] LPCSTR szFileName, [in, optional] LPCSTR szWinDir, [in] LPCSTR szAppDir, [out] LPSTR szCurDir, [in, out] PUINT puCurDirLen, [out] LPSTR szDestDir, [in, out] PUINT puDestDirLen );",
            "name": "VerFindFileA"
        },
        {
            "signature": "DWORD VerFindFileW( [in] DWORD uFlags, [in] LPCWSTR szFileName, [in, optional] LPCWSTR szWinDir, [in] LPCWSTR szAppDir, [out] LPWSTR szCurDir, [in, out] PUINT puCurDirLen, [out] LPWSTR szDestDir, [in, out] PUINT puDestDirLen );",
            "name": "VerFindFileW"
        },
        {
            "signature": "DWORD VerInstallFileA( [in] DWORD uFlags, [in] LPCSTR szSrcFileName, [in] LPCSTR szDestFileName, [in] LPCSTR szSrcDir, [in] LPCSTR szDestDir, [in] LPCSTR szCurDir, [out] LPSTR szTmpFile, [in, out] PUINT puTmpFileLen );",
            "name": "VerInstallFileA"
        },
        {
            "signature": "DWORD VerInstallFileW( [in] DWORD uFlags, [in] LPCWSTR szSrcFileName, [in] LPCWSTR szDestFileName, [in] LPCWSTR szSrcDir, [in] LPCWSTR szDestDir, [in] LPCWSTR szCurDir, [out] LPWSTR szTmpFile, [in, out] PUINT puTmpFileLen );",
            "name": "VerInstallFileW"
        },
        {
            "signature": "DWORD VerLanguageNameA( [in] DWORD wLang, [out] LPSTR szLang, [in] DWORD cchLang );",
            "name": "VerLanguageNameA"
        },
        {
            "signature": "DWORD VerLanguageNameW( [in] DWORD wLang, [out] LPWSTR szLang, [in] DWORD cchLang );",
            "name": "VerLanguageNameW"
        },
        {
            "signature": "BOOL VerQueryValueA( [in] LPCVOID pBlock, [in] LPCSTR lpSubBlock, [out] LPVOID *lplpBuffer, [out] PUINT puLen );",
            "name": "VerQueryValueA"
        },
        {
            "signature": "BOOL VerQueryValueW( [in] LPCVOID pBlock, [in] LPCWSTR lpSubBlock, [out] LPVOID *lplpBuffer, [out] PUINT puLen );",
            "name": "VerQueryValueW"
        }
    ],
    "Winwlx.h": [
        {
            "signature": "PWLX_ASSIGN_SHELL_PROTECTION PwlxAssignShellProtection; int PwlxAssignShellProtection( [in] HANDLE hWlx, [in] HANDLE hToken, [in] HANDLE hProcess, [in] HANDLE hThread ) {...}",
            "name": "PWLX_ASSIGN_SHELL_PROTECTION callback"
        },
        {
            "signature": "PWLX_CHANGE_PASSWORD_NOTIFY PwlxChangePasswordNotify; int PwlxChangePasswordNotify( [in] HANDLE hWlx, [in] PWLX_MPR_NOTIFY_INFO pMprInfo, [in] DWORD dwChangeInfo ) {...}",
            "name": "PWLX_CHANGE_PASSWORD_NOTIFY callback"
        },
        {
            "signature": "PWLX_CHANGE_PASSWORD_NOTIFY_EX PwlxChangePasswordNotifyEx; int PwlxChangePasswordNotifyEx( [in] HANDLE hWlx, [in] PWLX_MPR_NOTIFY_INFO pMprInfo, [in] DWORD dwChangeInfo, [in] PWSTR ProviderName, [in] PVOID Reserved ) {...}",
            "name": "PWLX_CHANGE_PASSWORD_NOTIFY_EX callback"
        },
        {
            "signature": "PWLX_CLOSE_USER_DESKTOP PwlxCloseUserDesktop; BOOL PwlxCloseUserDesktop( [in] HANDLE hWlx, [in] PWLX_DESKTOP pDesktop, [in] HANDLE hToken ) {...}",
            "name": "PWLX_CLOSE_USER_DESKTOP callback"
        },
        {
            "signature": "PWLX_CREATE_USER_DESKTOP PwlxCreateUserDesktop; BOOL PwlxCreateUserDesktop( [in] HANDLE hWlx, [in] HANDLE hToken, [in] DWORD Flags, [in] PWSTR pszDesktopName, [out] PWLX_DESKTOP *ppDesktop ) {...}",
            "name": "PWLX_CREATE_USER_DESKTOP callback"
        },
        {
            "signature": "PWLX_DIALOG_BOX PwlxDialogBox; int PwlxDialogBox( [in] HANDLE hWlx, [in] HANDLE hInst, [in] LPWSTR lpszTemplate, [in] HWND hwndOwner, [in] DLGPROC dlgprc ) {...}",
            "name": "PWLX_DIALOG_BOX callback"
        },
        {
            "signature": "PWLX_DIALOG_BOX_INDIRECT PwlxDialogBoxIndirect; int PwlxDialogBoxIndirect( [in] HANDLE hWlx, [in] HANDLE hInst, [in] LPCDLGTEMPLATE hDialogTemplate, [in] HWND hwndOwner, [in] DLGPROC dlgprc ) {...}",
            "name": "PWLX_DIALOG_BOX_INDIRECT callback"
        },
        {
            "signature": "PWLX_DIALOG_BOX_INDIRECT_PARAM PwlxDialogBoxIndirectParam; int PwlxDialogBoxIndirectParam( [in] HANDLE hWlx, [in] HANDLE hInst, [in] LPCDLGTEMPLATE hDialogTemplate, [in] HWND hwndOwner, [in] DLGPROC dlgprc, [in] LPARAM dwInitParam ) {...}",
            "name": "PWLX_DIALOG_BOX_INDIRECT_PARAM callback"
        },
        {
            "signature": "PWLX_DIALOG_BOX_PARAM PwlxDialogBoxParam; int PwlxDialogBoxParam( [in] HANDLE hWlx, [in] HANDLE hInst, [in] LPWSTR lpszTemplate, [in] HWND hwndOwner, [in] DLGPROC dlgprc, [in] LPARAM dwInitParam ) {...}",
            "name": "PWLX_DIALOG_BOX_PARAM callback"
        },
        {
            "signature": "PWLX_DISCONNECT PwlxDisconnect; BOOL PwlxDisconnect( unnamedParam1 ) {...}",
            "name": "PWLX_DISCONNECT callback"
        },
        {
            "signature": "PWLX_GET_OPTION PwlxGetOption; BOOL PwlxGetOption( [in] HANDLE hWlx, [in] DWORD Option, [out] ULONG_PTR *Value ) {...}",
            "name": "PWLX_GET_OPTION callback"
        },
        {
            "signature": "PWLX_GET_SOURCE_DESKTOP PwlxGetSourceDesktop; BOOL PwlxGetSourceDesktop( [in] HANDLE hWlx, [out] PWLX_DESKTOP *ppDesktop ) {...}",
            "name": "PWLX_GET_SOURCE_DESKTOP callback"
        },
        {
            "signature": "PWLX_MESSAGE_BOX PwlxMessageBox; int PwlxMessageBox( [in] HANDLE hWlx, [in] HWND hwndOwner, [in] LPWSTR lpszText, [in] LPWSTR lpszTitle, [in] UINT fuStyle ) {...}",
            "name": "PWLX_MESSAGE_BOX callback"
        },
        {
            "signature": "PWLX_QUERY_CLIENT_CREDENTIALS PwlxQueryClientCredentials; BOOL PwlxQueryClientCredentials( [out] PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred ) {...}",
            "name": "PWLX_QUERY_CLIENT_CREDENTIALS callback"
        },
        {
            "signature": "PWLX_QUERY_CONSOLESWITCH_CREDENTIALS PwlxQueryConsoleswitchCredentials; DWORD PwlxQueryConsoleswitchCredentials( [out] PWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 pCred ) {...}",
            "name": "PWLX_QUERY_CONSOLESWITCH_CREDENTIALS callback"
        },
        {
            "signature": "PWLX_QUERY_IC_CREDENTIALS PwlxQueryIcCredentials; BOOL PwlxQueryIcCredentials( [out] PWLX_CLIENT_CREDENTIALS_INFO_V1_0 pCred ) {...}",
            "name": "PWLX_QUERY_IC_CREDENTIALS callback"
        },
        {
            "signature": "PWLX_QUERY_TERMINAL_SERVICES_DATA PwlxQueryTerminalServicesData; DWORD PwlxQueryTerminalServicesData( [in] HANDLE hWlx, [out] PWLX_TERMINAL_SERVICES_DATA pTSData, [in] WCHAR *UserName, [in] WCHAR *Domain ) {...}",
            "name": "PWLX_QUERY_TERMINAL_SERVICES_DATA callback"
        },
        {
            "signature": "PWLX_QUERY_TS_LOGON_CREDENTIALS PwlxQueryTsLogonCredentials; BOOL PwlxQueryTsLogonCredentials( [out] PWLX_CLIENT_CREDENTIALS_INFO_V2_0 pCred ) {...}",
            "name": "PWLX_QUERY_TS_LOGON_CREDENTIALS callback"
        },
        {
            "signature": "PWLX_SAS_NOTIFY PwlxSasNotify; void PwlxSasNotify( [in] HANDLE hWlx, [in] DWORD dwSasType ) {...}",
            "name": "PWLX_SAS_NOTIFY callback"
        },
        {
            "signature": "PWLX_SET_CONTEXT_POINTER PwlxSetContextPointer; void PwlxSetContextPointer( [in] HANDLE hWlx, [in] PVOID pWlxContext ) {...}",
            "name": "PWLX_SET_CONTEXT_POINTER callback"
        },
        {
            "signature": "PWLX_SET_OPTION PwlxSetOption; BOOL PwlxSetOption( [in] HANDLE hWlx, [in] DWORD Option, [in] ULONG_PTR Value, [out] ULONG_PTR *OldValue ) {...}",
            "name": "PWLX_SET_OPTION callback"
        },
        {
            "signature": "PWLX_SET_RETURN_DESKTOP PwlxSetReturnDesktop; BOOL PwlxSetReturnDesktop( [in] HANDLE hWlx, [in] PWLX_DESKTOP pDesktop ) {...}",
            "name": "PWLX_SET_RETURN_DESKTOP callback"
        },
        {
            "signature": "PWLX_SET_TIMEOUT PwlxSetTimeout; BOOL PwlxSetTimeout( [in] HANDLE hWlx, [in] DWORD Timeout ) {...}",
            "name": "PWLX_SET_TIMEOUT callback"
        },
        {
            "signature": "PWLX_SWITCH_DESKTOP_TO_USER PwlxSwitchDesktopToUser; int PwlxSwitchDesktopToUser( [in] HANDLE hWlx ) {...}",
            "name": "PWLX_SWITCH_DESKTOP_TO_USER callback"
        },
        {
            "signature": "PWLX_SWITCH_DESKTOP_TO_WINLOGON PwlxSwitchDesktopToWinlogon; int PwlxSwitchDesktopToWinlogon( [in] HANDLE hWlx ) {...}",
            "name": "PWLX_SWITCH_DESKTOP_TO_WINLOGON callback"
        },
        {
            "signature": "PWLX_USE_CTRL_ALT_DEL PwlxUseCtrlAltDel; void PwlxUseCtrlAltDel( [in] HANDLE hWlx ) {...}",
            "name": "PWLX_USE_CTRL_ALT_DEL callback"
        },
        {
            "signature": "PWLX_WIN31_MIGRATE PwlxWin31Migrate; void PwlxWin31Migrate( [in] HANDLE hWlx ) {...}",
            "name": "PWLX_WIN31_MIGRATE callback"
        },
        {
            "signature": "BOOL WlxActivateUserShell( [in] PVOID pWlxContext, [in] PWSTR pszDesktopName, [in] PWSTR pszMprLogonScript, [in] PVOID pEnvironment );",
            "name": "WlxActivateUserShell"
        },
        {
            "signature": "void WlxDisconnectNotify( PVOID pWlxContext );",
            "name": "WlxDisconnectNotify"
        },
        {
            "signature": "void WlxDisplayLockedNotice( [in] PVOID pWlxContext );",
            "name": "WlxDisplayLockedNotice"
        },
        {
            "signature": "void WlxDisplaySASNotice( [in] PVOID pWlxContext );",
            "name": "WlxDisplaySASNotice"
        },
        {
            "signature": "BOOL WlxDisplayStatusMessage( [in] PVOID pWlxContext, [in] HDESK hDesktop, [in] DWORD dwOptions, [in] PWSTR pTitle, [in] PWSTR pMessage );",
            "name": "WlxDisplayStatusMessage"
        },
        {
            "signature": "BOOL WlxGetConsoleSwitchCredentials( [in] PVOID pWlxContext, [out] PVOID pCredInfo );",
            "name": "WlxGetConsoleSwitchCredentials"
        },
        {
            "signature": "BOOL WlxGetStatusMessage( [in] PVOID pWlxContext, [out] DWORD *pdwOptions, [out] PWSTR pMessage, [in] DWORD dwBufferSize );",
            "name": "WlxGetStatusMessage"
        },
        {
            "signature": "BOOL WlxInitialize( [in] LPWSTR lpWinsta, [in] HANDLE hWlx, [in] PVOID pvReserved, [in] PVOID pWinlogonFunctions, [out] PVOID *pWlxContext );",
            "name": "WlxInitialize"
        },
        {
            "signature": "BOOL WlxIsLockOk( [in] PVOID pWlxContext );",
            "name": "WlxIsLockOk"
        },
        {
            "signature": "BOOL WlxIsLogoffOk( [in] PVOID pWlxContext );",
            "name": "WlxIsLogoffOk"
        },
        {
            "signature": "int WlxLoggedOnSAS( [in] PVOID pWlxContext, [in] DWORD dwSasType, [in] PVOID pReserved );",
            "name": "WlxLoggedOnSAS"
        },
        {
            "signature": "int WlxLoggedOutSAS( [in] PVOID pWlxContext, [in] DWORD dwSasType, [out] PLUID pAuthenticationId, [in, out] PSID pLogonSid, [out] PDWORD pdwOptions, [out] PHANDLE phToken, [out] PWLX_MPR_NOTIFY_INFO pNprNotifyInfo, [out] PVOID *pProfile );",
            "name": "WlxLoggedOutSAS"
        },
        {
            "signature": "void WlxLogoff( [in] PVOID pWlxContext );",
            "name": "WlxLogoff"
        },
        {
            "signature": "BOOL WlxNegotiate( [in] DWORD dwWinlogonVersion, [out] PDWORD pdwDllVersion );",
            "name": "WlxNegotiate"
        },
        {
            "signature": "BOOL WlxNetworkProviderLoad( [in] PVOID pWlxContext, [out] PWLX_MPR_NOTIFY_INFO pNprNotifyInfo );",
            "name": "WlxNetworkProviderLoad"
        },
        {
            "signature": "void WlxReconnectNotify( PVOID pWlxContext );",
            "name": "WlxReconnectNotify"
        },
        {
            "signature": "BOOL WlxRemoveStatusMessage( [in] PVOID pWlxContext );",
            "name": "WlxRemoveStatusMessage"
        },
        {
            "signature": "BOOL WlxScreenSaverNotify( [in] PVOID pWlxContext, [in, out] BOOL *pSecure );",
            "name": "WlxScreenSaverNotify"
        },
        {
            "signature": "void WlxShutdown( [in] PVOID pWlxContext, [in] DWORD ShutdownType );",
            "name": "WlxShutdown"
        },
        {
            "signature": "BOOL WlxStartApplication( [in] PVOID pWlxContext, [in] PWSTR pszDesktopName, [in] PVOID pEnvironment, [in] PWSTR pszCmdLine );",
            "name": "WlxStartApplication"
        },
        {
            "signature": "int WlxWkstaLockedSAS( [in] PVOID pWlxContext, [in] DWORD dwSasType );",
            "name": "WlxWkstaLockedSAS"
        }
    ],
    "Wlanapi.h": [
        {
            "signature": "WFD_OPEN_SESSION_COMPLETE_CALLBACK WfdOpenSessionCompleteCallback; void WfdOpenSessionCompleteCallback( [in] HANDLE hSessionHandle, [in] PVOID pvContext, [in] GUID guidSessionInterface, [in] DWORD dwError, [in] DWORD dwReasonCode ) {...}",
            "name": "WFD_OPEN_SESSION_COMPLETE_CALLBACK callback"
        },
        {
            "signature": "DWORD WFDCancelOpenSession( [in] HANDLE hSessionHandle );",
            "name": "WFDCancelOpenSession"
        },
        {
            "signature": "DWORD WFDCloseHandle( [in] HANDLE hClientHandle );",
            "name": "WFDCloseHandle"
        },
        {
            "signature": "DWORD WFDCloseSession( [in] HANDLE hSessionHandle );",
            "name": "WFDCloseSession"
        },
        {
            "signature": "DWORD WFDOpenHandle( [in] DWORD dwClientVersion, [out] PDWORD pdwNegotiatedVersion, [out] PHANDLE phClientHandle );",
            "name": "WFDOpenHandle"
        },
        {
            "signature": "DWORD WFDOpenLegacySession( HANDLE hClientHandle, PDOT11_MAC_ADDRESS pLegacyMacAddress, HANDLE *phSessionHandle, GUID *pGuidSessionInterface );",
            "name": "WFDOpenLegacySession"
        },
        {
            "signature": "DWORD WFDStartOpenSession( [in] HANDLE hClientHandle, [in] PDOT11_MAC_ADDRESS pDeviceAddress, [in, optional] PVOID pvContext, [in] WFD_OPEN_SESSION_COMPLETE_CALLBACK pfnCallback, [out] PHANDLE phSessionHandle );",
            "name": "WFDStartOpenSession"
        },
        {
            "signature": "DWORD WFDUpdateDeviceVisibility( PDOT11_MAC_ADDRESS pDeviceAddress );",
            "name": "WFDUpdateDeviceVisibility"
        },
        {
            "signature": "WLAN_NOTIFICATION_CALLBACK WlanNotificationCallback; void WlanNotificationCallback( PWLAN_NOTIFICATION_DATA unnamedParam1, PVOID unnamedParam2 ) {...}",
            "name": "WLAN_NOTIFICATION_CALLBACK callback"
        },
        {
            "signature": "PVOID WlanAllocateMemory( [in] DWORD dwMemorySize );",
            "name": "WlanAllocateMemory"
        },
        {
            "signature": "DWORD WlanCloseHandle( [in] HANDLE hClientHandle, PVOID pReserved );",
            "name": "WlanCloseHandle"
        },
        {
            "signature": "DWORD WlanConnect( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] const PWLAN_CONNECTION_PARAMETERS pConnectionParameters, PVOID pReserved );",
            "name": "WlanConnect"
        },
        {
            "signature": "DWORD WlanDeleteProfile( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, PVOID pReserved );",
            "name": "WlanDeleteProfile"
        },
        {
            "signature": "DWORD WlanDeviceServiceCommand( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPGUID pDeviceServiceGuid, [in] DWORD dwOpCode, [in] DWORD dwInBufferSize, [in] PVOID pInBuffer, [in] DWORD dwOutBufferSize, [in, out, optional] PVOID pOutBuffer, [out] PDWORD pdwBytesReturned );",
            "name": "WlanDeviceServiceCommand"
        },
        {
            "signature": "DWORD WlanDisconnect( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, PVOID pReserved );",
            "name": "WlanDisconnect"
        },
        {
            "signature": "DWORD WlanEnumInterfaces( [in] HANDLE hClientHandle, [in] PVOID pReserved, [out] PWLAN_INTERFACE_INFO_LIST *ppInterfaceList );",
            "name": "WlanEnumInterfaces"
        },
        {
            "signature": "DWORD WlanExtractPsdIEDataList( [in] HANDLE hClientHandle, [in] DWORD dwIeDataSize, [in] const PBYTE pRawIeData, [in] LPCWSTR strFormat, PVOID pReserved, [out] PWLAN_RAW_DATA_LIST *ppPsdIEDataList );",
            "name": "WlanExtractPsdIEDataList"
        },
        {
            "signature": "void WlanFreeMemory( [in] PVOID pMemory );",
            "name": "WlanFreeMemory"
        },
        {
            "signature": "DWORD WlanGetAvailableNetworkList( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] DWORD dwFlags, PVOID pReserved, [out] PWLAN_AVAILABLE_NETWORK_LIST *ppAvailableNetworkList );",
            "name": "WlanGetAvailableNetworkList"
        },
        {
            "signature": "DWORD WlanGetFilterList( [in] HANDLE hClientHandle, [in] WLAN_FILTER_LIST_TYPE wlanFilterListType, PVOID pReserved, [out] PDOT11_NETWORK_LIST *ppNetworkList );",
            "name": "WlanGetFilterList"
        },
        {
            "signature": "DWORD WlanGetInterfaceCapability( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, PVOID pReserved, [out] PWLAN_INTERFACE_CAPABILITY *ppCapability );",
            "name": "WlanGetInterfaceCapability"
        },
        {
            "signature": "DWORD WlanGetNetworkBssList( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [optional] const PDOT11_SSID pDot11Ssid, [in] DOT11_BSS_TYPE dot11BssType, [in] BOOL bSecurityEnabled, PVOID pReserved, [out] PWLAN_BSS_LIST *ppWlanBssList );",
            "name": "WlanGetNetworkBssList"
        },
        {
            "signature": "DWORD WlanGetProfile( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in] PVOID pReserved, [out] LPWSTR *pstrProfileXml, [in, out, optional] DWORD *pdwFlags, [out, optional] DWORD *pdwGrantedAccess );",
            "name": "WlanGetProfile"
        },
        {
            "signature": "DWORD WlanGetProfileCustomUserData( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, PVOID pReserved, [out] DWORD *pdwDataSize, [out] PBYTE *ppData );",
            "name": "WlanGetProfileCustomUserData"
        },
        {
            "signature": "DWORD WlanGetProfileList( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] PVOID pReserved, [out] PWLAN_PROFILE_INFO_LIST *ppProfileList );",
            "name": "WlanGetProfileList"
        },
        {
            "signature": "DWORD WlanGetSecuritySettings( [in] HANDLE hClientHandle, [in] WLAN_SECURABLE_OBJECT SecurableObject, [out, optional] PWLAN_OPCODE_VALUE_TYPE pValueType, [out] LPWSTR *pstrCurrentSDDL, [out] PDWORD pdwGrantedAccess );",
            "name": "WlanGetSecuritySettings"
        },
        {
            "signature": "DWORD WlanGetSupportedDeviceServices( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [out] PWLAN_DEVICE_SERVICE_GUID_LIST *ppDevSvcGuidList );",
            "name": "WlanGetSupportedDeviceServices"
        },
        {
            "signature": "DWORD WlanHostedNetworkForceStart( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkForceStart"
        },
        {
            "signature": "DWORD WlanHostedNetworkForceStop( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkForceStop"
        },
        {
            "signature": "DWORD WlanHostedNetworkInitSettings( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkInitSettings"
        },
        {
            "signature": "DWORD WlanHostedNetworkQueryProperty( [in] HANDLE hClientHandle, [in] WLAN_HOSTED_NETWORK_OPCODE OpCode, [out] PDWORD pdwDataSize, [out] PVOID *ppvData, [out] PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType, PVOID pvReserved );",
            "name": "WlanHostedNetworkQueryProperty"
        },
        {
            "signature": "DWORD WlanHostedNetworkQuerySecondaryKey( [in] HANDLE hClientHandle, [out] PDWORD pdwKeyLength, [out] PUCHAR *ppucKeyData, [out] PBOOL pbIsPassPhrase, [out] PBOOL pbPersistent, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkQuerySecondaryKey"
        },
        {
            "signature": "DWORD WlanHostedNetworkQueryStatus( [in] HANDLE hClientHandle, [out] PWLAN_HOSTED_NETWORK_STATUS *ppWlanHostedNetworkStatus, PVOID pvReserved );",
            "name": "WlanHostedNetworkQueryStatus"
        },
        {
            "signature": "DWORD WlanHostedNetworkRefreshSecuritySettings( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkRefreshSecuritySettings"
        },
        {
            "signature": "DWORD WlanHostedNetworkSetProperty( [in] HANDLE hClientHandle, [in] WLAN_HOSTED_NETWORK_OPCODE OpCode, [in] DWORD dwDataSize, [in] PVOID pvData, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkSetProperty"
        },
        {
            "signature": "DWORD WlanHostedNetworkSetSecondaryKey( [in] HANDLE hClientHandle, [in] DWORD dwKeyLength, [in] PUCHAR pucKeyData, [in] BOOL bIsPassPhrase, [in] BOOL bPersistent, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkSetSecondaryKey"
        },
        {
            "signature": "DWORD WlanHostedNetworkStartUsing( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkStartUsing"
        },
        {
            "signature": "DWORD WlanHostedNetworkStopUsing( [in] HANDLE hClientHandle, [out, optional] PWLAN_HOSTED_NETWORK_REASON pFailReason, PVOID pvReserved );",
            "name": "WlanHostedNetworkStopUsing"
        },
        {
            "signature": "DWORD WlanIhvControl( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] WLAN_IHV_CONTROL_TYPE Type, [in] DWORD dwInBufferSize, [in] PVOID pInBuffer, [in] DWORD dwOutBufferSize, [in, out, optional] PVOID pOutBuffer, [out] PDWORD pdwBytesReturned );",
            "name": "WlanIhvControl"
        },
        {
            "signature": "DWORD WlanOpenHandle( [in] DWORD dwClientVersion, PVOID pReserved, [out] PDWORD pdwNegotiatedVersion, [out] PHANDLE phClientHandle );",
            "name": "WlanOpenHandle"
        },
        {
            "signature": "DWORD WlanQueryAutoConfigParameter( [in] HANDLE hClientHandle, [in] WLAN_AUTOCONF_OPCODE OpCode, PVOID pReserved, [out] PDWORD pdwDataSize, [out] PVOID *ppData, [out, optional] PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType );",
            "name": "WlanQueryAutoConfigParameter"
        },
        {
            "signature": "DWORD WlanQueryInterface( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] WLAN_INTF_OPCODE OpCode, PVOID pReserved, [out] PDWORD pdwDataSize, [out] PVOID *ppData, [out, optional] PWLAN_OPCODE_VALUE_TYPE pWlanOpcodeValueType );",
            "name": "WlanQueryInterface"
        },
        {
            "signature": "DWORD WlanReasonCodeToString( [in] DWORD dwReasonCode, [in] DWORD dwBufferSize, [in] PWCHAR pStringBuffer, PVOID pReserved );",
            "name": "WlanReasonCodeToString"
        },
        {
            "signature": "DWORD WlanRegisterDeviceServiceNotification( HANDLE hClientHandle, const PWLAN_DEVICE_SERVICE_GUID_LIST pDevSvcGuidList );",
            "name": "WlanRegisterDeviceServiceNotification"
        },
        {
            "signature": "DWORD WlanRegisterNotification( [in] HANDLE hClientHandle, [in] DWORD dwNotifSource, [in] BOOL bIgnoreDuplicate, [in, optional] WLAN_NOTIFICATION_CALLBACK funcCallback, [in, optional] PVOID pCallbackContext, [in] PVOID pReserved, [out, optional] PDWORD pdwPrevNotifSource );",
            "name": "WlanRegisterNotification"
        },
        {
            "signature": "DWORD WlanRegisterVirtualStationNotification( [in] HANDLE hClientHandle, [in] BOOL bRegister, PVOID pReserved );",
            "name": "WlanRegisterVirtualStationNotification"
        },
        {
            "signature": "DWORD WlanRenameProfile( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strOldProfileName, [in] LPCWSTR strNewProfileName, PVOID pReserved );",
            "name": "WlanRenameProfile"
        },
        {
            "signature": "DWORD WlanSaveTemporaryProfile( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in, optional] LPCWSTR strAllUserProfileSecurity, [in] DWORD dwFlags, [in] BOOL bOverWrite, PVOID pReserved );",
            "name": "WlanSaveTemporaryProfile"
        },
        {
            "signature": "DWORD WlanScan( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in, optional] const PDOT11_SSID pDot11Ssid, [in, optional] const PWLAN_RAW_DATA pIeData, PVOID pReserved );",
            "name": "WlanScan"
        },
        {
            "signature": "DWORD WlanSetAutoConfigParameter( [in] HANDLE hClientHandle, [in] WLAN_AUTOCONF_OPCODE OpCode, [in] DWORD dwDataSize, [in] const PVOID pData, PVOID pReserved );",
            "name": "WlanSetAutoConfigParameter"
        },
        {
            "signature": "DWORD WlanSetFilterList( [in] HANDLE hClientHandle, [in] WLAN_FILTER_LIST_TYPE wlanFilterListType, [in, optional] const PDOT11_NETWORK_LIST pNetworkList, PVOID pReserved );",
            "name": "WlanSetFilterList"
        },
        {
            "signature": "DWORD WlanSetInterface( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] WLAN_INTF_OPCODE OpCode, [in] DWORD dwDataSize, [in] const PVOID pData, PVOID pReserved );",
            "name": "WlanSetInterface"
        },
        {
            "signature": "DWORD WlanSetProfile( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] DWORD dwFlags, [in] LPCWSTR strProfileXml, [in, optional] LPCWSTR strAllUserProfileSecurity, [in] BOOL bOverwrite, [in] PVOID pReserved, [out] DWORD *pdwReasonCode );",
            "name": "WlanSetProfile"
        },
        {
            "signature": "DWORD WlanSetProfileCustomUserData( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in] DWORD dwDataSize, [in] const PBYTE pData, PVOID pReserved );",
            "name": "WlanSetProfileCustomUserData"
        },
        {
            "signature": "DWORD WlanSetProfileEapUserData( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in] EAP_METHOD_TYPE eapType, [in] DWORD dwFlags, [in] DWORD dwEapUserDataSize, [in] const LPBYTE pbEapUserData, PVOID pReserved );",
            "name": "WlanSetProfileEapUserData"
        },
        {
            "signature": "DWORD WlanSetProfileEapXmlUserData( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in] DWORD dwFlags, [in] LPCWSTR strEapXmlUserData, PVOID pReserved );",
            "name": "WlanSetProfileEapXmlUserData"
        },
        {
            "signature": "DWORD WlanSetProfileList( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] DWORD dwItems, [in] LPCWSTR *strProfileNames, PVOID pReserved );",
            "name": "WlanSetProfileList"
        },
        {
            "signature": "DWORD WlanSetProfilePosition( [in] HANDLE hClientHandle, [in] const GUID *pInterfaceGuid, [in] LPCWSTR strProfileName, [in] DWORD dwPosition, PVOID pReserved );",
            "name": "WlanSetProfilePosition"
        },
        {
            "signature": "DWORD WlanSetPsdIEDataList( [in] HANDLE hClientHandle, [in] LPCWSTR strFormat, [in] const PWLAN_RAW_DATA_LIST pPsdIEDataList, PVOID pReserved );",
            "name": "WlanSetPsdIEDataList"
        },
        {
            "signature": "DWORD WlanSetSecuritySettings( [in] HANDLE hClientHandle, [in] WLAN_SECURABLE_OBJECT SecurableObject, [in] LPCWSTR strModifiedSDDL );",
            "name": "WlanSetSecuritySettings"
        },
        {
            "signature": "DWORD WlanUIEditProfile( [in] DWORD dwClientVersion, [in] LPCWSTR wstrProfileName, [in] GUID *pInterfaceGuid, [in] HWND hWnd, [in] WL_DISPLAY_PAGES wlStartPage, PVOID pReserved, [out] PWLAN_REASON_CODE pWlanReasonCode );",
            "name": "WlanUIEditProfile"
        }
    ],
    "Wldp.h": [
        {
            "signature": "HRESULT WldpCanExecuteBuffer( [in] REFGUID host, [in] WLDP_EXECUTION_EVALUATION_OPTIONS options, [in] const BYTE *buffer, [in] ULONG bufferSize, [in, optional] PCWSTR auditInfo, [out] WLDP_EXECUTION_POLICY *result );",
            "name": "WldpCanExecuteBuffer"
        },
        {
            "signature": "HRESULT WldpCanExecuteFile( [in] REFGUID host, [in] WLDP_EXECUTION_EVALUATION_OPTIONS options, [in] HANDLE fileHandle, [in, optional] PCWSTR auditInfo, [out] WLDP_EXECUTION_POLICY *result );",
            "name": "WldpCanExecuteFile"
        },
        {
            "signature": "HRESULT WldpCanExecuteStream( [in] REFGUID host, [in] WLDP_EXECUTION_EVALUATION_OPTIONS options, IStream *stream, [in, optional] PCWSTR auditInfo, [out] WLDP_EXECUTION_POLICY *result );",
            "name": "WldpCanExecuteStream"
        },
        {
            "signature": "HRESULT WldpGetLockdownPolicy( PWLDP_HOST_INFORMATION hostInformation, PDWORD lockdownState, DWORD lockdownFlags );",
            "name": "WldpGetLockdownPolicy"
        },
        {
            "signature": "HRESULT WldpIsClassInApprovedList( REFCLSID classID, PWLDP_HOST_INFORMATION hostInformation, PBOOL isApproved, DWORD optionalFlags );",
            "name": "WldpIsClassInApprovedList"
        },
        {
            "signature": "HRESULT WldpIsDynamicCodePolicyEnabled( PBOOL isEnabled );",
            "name": "WldpIsDynamicCodePolicyEnabled"
        },
        {
            "signature": "HRESULT WldpQueryDynamicCodeTrust( HANDLE fileHandle, PVOID baseImage, ULONG imageSize );",
            "name": "WldpQueryDynamicCodeTrust"
        },
        {
            "signature": "HRESULT WldpQueryWindowsLockdownMode( PWLDP_WINDOWS_LOCKDOWN_MODE lockdownMode );",
            "name": "WldpQueryWindowsLockdownMode"
        },
        {
            "signature": "HRESULT WldpSetDynamicCodeTrust( HANDLE fileHandle );",
            "name": "WldpSetDynamicCodeTrust"
        }
    ],
    "Wmcodecdsp.h": [],
    "Wmcontainer.h": [
        {
            "signature": "HRESULT MFCreateASFContentInfo( IMFASFContentInfo **ppIContentInfo );",
            "name": "MFCreateASFContentInfo"
        },
        {
            "signature": "HRESULT MFCreateASFIndexer( IMFASFIndexer **ppIIndexer );",
            "name": "MFCreateASFIndexer"
        },
        {
            "signature": "HRESULT MFCreateASFIndexerByteStream( [in] IMFByteStream *pIContentByteStream, [in] QWORD cbIndexStartOffset, [out] IMFByteStream **pIIndexByteStream );",
            "name": "MFCreateASFIndexerByteStream"
        },
        {
            "signature": "HRESULT MFCreateASFMediaSink( IMFByteStream *pIByteStream, IMFMediaSink **ppIMediaSink );",
            "name": "MFCreateASFMediaSink"
        },
        {
            "signature": "HRESULT MFCreateASFMediaSinkActivate( LPCWSTR pwszFileName, IMFASFContentInfo *pContentInfo, IMFActivate **ppIActivate );",
            "name": "MFCreateASFMediaSinkActivate"
        },
        {
            "signature": "HRESULT MFCreateASFMultiplexer( IMFASFMultiplexer **ppIMultiplexer );",
            "name": "MFCreateASFMultiplexer"
        },
        {
            "signature": "HRESULT MFCreateASFProfile( IMFASFProfile **ppIProfile );",
            "name": "MFCreateASFProfile"
        },
        {
            "signature": "HRESULT MFCreateASFProfileFromPresentationDescriptor( IMFPresentationDescriptor *pIPD, IMFASFProfile **ppIProfile );",
            "name": "MFCreateASFProfileFromPresentationDescriptor"
        },
        {
            "signature": "HRESULT MFCreateASFSplitter( IMFASFSplitter **ppISplitter );",
            "name": "MFCreateASFSplitter"
        },
        {
            "signature": "HRESULT MFCreateASFStreamingMediaSink( IMFByteStream *pIByteStream, IMFMediaSink **ppIMediaSink );",
            "name": "MFCreateASFStreamingMediaSink"
        },
        {
            "signature": "HRESULT MFCreateASFStreamingMediaSinkActivate( IMFActivate *pByteStreamActivate, IMFASFContentInfo *pContentInfo, IMFActivate **ppIActivate );",
            "name": "MFCreateASFStreamingMediaSinkActivate"
        },
        {
            "signature": "HRESULT MFCreateASFStreamSelector( IMFASFProfile *pIASFProfile, IMFASFStreamSelector **ppSelector );",
            "name": "MFCreateASFStreamSelector"
        },
        {
            "signature": "HRESULT MFCreatePresentationDescriptorFromASFProfile( IMFASFProfile *pIProfile, IMFPresentationDescriptor **ppIPD );",
            "name": "MFCreatePresentationDescriptorFromASFProfile"
        },
        {
            "signature": "HRESULT MFCreateWMAEncoderActivate( IMFMediaType *pMediaType, IPropertyStore *pEncodingConfigurationProperties, IMFActivate **ppActivate );",
            "name": "MFCreateWMAEncoderActivate"
        },
        {
            "signature": "HRESULT MFCreateWMVEncoderActivate( IMFMediaType *pMediaType, IPropertyStore *pEncodingConfigurationProperties, IMFActivate **ppActivate );",
            "name": "MFCreateWMVEncoderActivate"
        }
    ],
    "Wmdmlog.h": [],
    "Wmiutils.h": [],
    "Wnvapi.h": [
        {
            "signature": "HANDLE WnvOpen();",
            "name": "WnvOpen"
        },
        {
            "signature": "ULONG WnvRequestNotification( HANDLE WnvHandle, PWNV_NOTIFICATION_PARAM NotificationParam, LPOVERLAPPED Overlapped, PULONG BytesTransferred );",
            "name": "WnvRequestNotification"
        }
    ],
    "Wofapi.h": [
        {
            "signature": "HRESULT WofEnumEntries( [in] PCWSTR VolumeName, [in] ULONG Provider, [in] WofEnumEntryProc EnumProc, [in, optional] PVOID UserData );",
            "name": "WofEnumEntries"
        },
        {
            "signature": "WofEnumEntryProc Wofenumentryproc; BOOL Wofenumentryproc( [in] const PVOID EntryInfo, [in, optional] PVOID UserData ) {...}",
            "name": "WofEnumEntryProc callback"
        },
        {
            "signature": "WofEnumFilesProc Wofenumfilesproc; BOOL Wofenumfilesproc( [in] PCWSTR FilePath, [in] PVOID ExternalFileInfo, [in, optional] PVOID UserData ) {...}",
            "name": "WofEnumFilesProc callback"
        },
        {
            "signature": "HRESULT WofFileEnumFiles( [in] PCWSTR VolumeName, [in] ULONG Algorithm, [in] WofEnumFilesProc EnumProc, [in, optional] PVOID UserData );",
            "name": "WofFileEnumFiles"
        },
        {
            "signature": "HRESULT WofGetDriverVersion( [in] HANDLE FileOrVolumeHandle, [in] ULONG Provider, [out] PULONG WofVersion );",
            "name": "WofGetDriverVersion"
        },
        {
            "signature": "HRESULT WofIsExternalFile( [in] LPCWSTR FilePath, [out, optional] PBOOL IsExternalFile, [out, optional] PULONG Provider, [out, optional] PVOID ExternalFileInfo, [in, out, optional] PULONG BufferLength );",
            "name": "WofIsExternalFile"
        },
        {
            "signature": "HRESULT WofSetFileDataLocation( [in] HANDLE FileHandle, [in] ULONG Provider, [in] PVOID ExternalFileInfo, [in] ULONG Length );",
            "name": "WofSetFileDataLocation"
        },
        {
            "signature": "BOOL WofShouldCompressBinaries( [in] LPCWSTR Volume, [out] PULONG Algorithm );",
            "name": "WofShouldCompressBinaries"
        },
        {
            "signature": "HRESULT WofWimAddEntry( [in] PCWSTR VolumeName, [in] PCWSTR WimPath, [in] DWORD WimType, [in] DWORD WimIndex, [out] PLARGE_INTEGER DataSourceId );",
            "name": "WofWimAddEntry"
        },
        {
            "signature": "HRESULT WofWimEnumFiles( [in] PCWSTR VolumeName, [in] LARGE_INTEGER DataSourceId, [in] WofEnumFilesProc EnumProc, [in, optional] PVOID UserData );",
            "name": "WofWimEnumFiles"
        },
        {
            "signature": "HRESULT WofWimRemoveEntry( [in] PCWSTR VolumeName, [in] LARGE_INTEGER DataSourceId );",
            "name": "WofWimRemoveEntry"
        },
        {
            "signature": "HRESULT WofWimSuspendEntry( [in] PCWSTR VolumeName, [in] LARGE_INTEGER DataSourceId );",
            "name": "WofWimSuspendEntry"
        },
        {
            "signature": "HRESULT WofWimUpdateEntry( [in] PCWSTR VolumeName, [in] LARGE_INTEGER DataSourceId, [in] PCWSTR NewWimPath );",
            "name": "WofWimUpdateEntry"
        }
    ],
    "Workspaceax.h": [],
    "Workspaceruntime.h": [],
    "Workspaceruntimeclientext.h": [],
    "Wow64apiset.h": [
        {
            "signature": "UINT GetSystemWow64Directory2A( [out] LPSTR lpBuffer, [in] UINT uSize, [in] WORD ImageFileMachineType );",
            "name": "GetSystemWow64Directory2A"
        },
        {
            "signature": "UINT GetSystemWow64Directory2W( [out] LPWSTR lpBuffer, [in] UINT uSize, [in] WORD ImageFileMachineType );",
            "name": "GetSystemWow64Directory2W"
        },
        {
            "signature": "UINT GetSystemWow64DirectoryA( [out] LPSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemWow64DirectoryA"
        },
        {
            "signature": "UINT GetSystemWow64DirectoryW( [out] LPWSTR lpBuffer, [in] UINT uSize );",
            "name": "GetSystemWow64DirectoryW"
        },
        {
            "signature": "HRESULT IsWow64GuestMachineSupported( [in] USHORT WowGuestMachine, [out] BOOL *MachineIsSupported );",
            "name": "IsWow64GuestMachineSupported"
        },
        {
            "signature": "BOOL IsWow64Process( [in] HANDLE hProcess, [out] PBOOL Wow64Process );",
            "name": "IsWow64Process"
        },
        {
            "signature": "BOOL IsWow64Process2( [in] HANDLE hProcess, [out] USHORT *pProcessMachine, [out, optional] USHORT *pNativeMachine );",
            "name": "IsWow64Process2"
        },
        {
            "signature": "BOOL Wow64DisableWow64FsRedirection( [out] PVOID *OldValue );",
            "name": "Wow64DisableWow64FsRedirection"
        },
        {
            "signature": "BOOLEAN Wow64EnableWow64FsRedirection( BOOLEAN Wow64FsEnableRedirection );",
            "name": "Wow64EnableWow64FsRedirection"
        },
        {
            "signature": "BOOL Wow64GetThreadContext( HANDLE hThread, PWOW64_CONTEXT lpContext );",
            "name": "Wow64GetThreadContext"
        },
        {
            "signature": "BOOL Wow64RevertWow64FsRedirection( PVOID OlValue );",
            "name": "Wow64RevertWow64FsRedirection"
        },
        {
            "signature": "BOOL Wow64SetThreadContext( HANDLE hThread, const WOW64_CONTEXT *lpContext );",
            "name": "Wow64SetThreadContext"
        },
        {
            "signature": "USHORT Wow64SetThreadDefaultGuestMachine( USHORT Machine );",
            "name": "Wow64SetThreadDefaultGuestMachine"
        },
        {
            "signature": "DWORD Wow64SuspendThread( HANDLE hThread );",
            "name": "Wow64SuspendThread"
        }
    ],
    "Wpcapi.h": [],
    "Wpcevent.h": [],
    "Wrdsgraphicschannels.h": [],
    "Ws2atm.h": [],
    "Ws2bth.h": [],
    "Ws2def.h": [],
    "Ws2ipdef.h": [],
    "Ws2spi.h": [
        {
            "signature": "LPNSPCLEANUP Lpnspcleanup; INT Lpnspcleanup( [in] LPGUID lpProviderId ) {...}",
            "name": "LPNSPCLEANUP callback"
        },
        {
            "signature": "LPNSPGETSERVICECLASSINFO Lpnspgetserviceclassinfo; INT Lpnspgetserviceclassinfo( [in] LPGUID lpProviderId, [in, out] LPDWORD lpdwBufSize, [in, out] LPWSASERVICECLASSINFOW lpServiceClassInfo ) {...}",
            "name": "LPNSPGETSERVICECLASSINFO callback"
        },
        {
            "signature": "LPNSPINSTALLSERVICECLASS Lpnspinstallserviceclass; INT Lpnspinstallserviceclass( [in] LPGUID lpProviderId, [in] LPWSASERVICECLASSINFOW lpServiceClassInfo ) {...}",
            "name": "LPNSPINSTALLSERVICECLASS callback"
        },
        {
            "signature": "LPNSPIOCTL Lpnspioctl; INT Lpnspioctl( [in] HANDLE hLookup, [in] DWORD dwControlCode, [in] LPVOID lpvInBuffer, [in, out] DWORD cbInBuffer, [out] LPVOID lpvOutBuffer, [in] DWORD cbOutBuffer, [out] LPDWORD lpcbBytesReturned, [in] LPWSACOMPLETION lpCompletion, [in] LPWSATHREADID lpThreadId ) {...}",
            "name": "LPNSPIOCTL callback"
        },
        {
            "signature": "LPNSPLOOKUPSERVICEBEGIN Lpnsplookupservicebegin; INT Lpnsplookupservicebegin( [in] LPGUID lpProviderId, [in] LPWSAQUERYSETW lpqsRestrictions, [in] LPWSASERVICECLASSINFOW lpServiceClassInfo, [in] DWORD dwControlFlags, [out] LPHANDLE lphLookup ) {...}",
            "name": "LPNSPLOOKUPSERVICEBEGIN callback"
        },
        {
            "signature": "LPNSPLOOKUPSERVICEEND Lpnsplookupserviceend; INT Lpnsplookupserviceend( [in] HANDLE hLookup ) {...}",
            "name": "LPNSPLOOKUPSERVICEEND callback"
        },
        {
            "signature": "LPNSPLOOKUPSERVICENEXT Lpnsplookupservicenext; INT Lpnsplookupservicenext( [in] HANDLE hLookup, [in] DWORD dwControlFlags, [in, out] LPDWORD lpdwBufferLength, [out] LPWSAQUERYSETW lpqsResults ) {...}",
            "name": "LPNSPLOOKUPSERVICENEXT callback"
        },
        {
            "signature": "LPNSPREMOVESERVICECLASS Lpnspremoveserviceclass; INT Lpnspremoveserviceclass( [in] LPGUID lpProviderId, [in] LPGUID lpServiceClassId ) {...}",
            "name": "LPNSPREMOVESERVICECLASS callback"
        },
        {
            "signature": "LPNSPSETSERVICE Lpnspsetservice; INT Lpnspsetservice( [in] LPGUID lpProviderId, [in] LPWSASERVICECLASSINFOW lpServiceClassInfo, [in] LPWSAQUERYSETW lpqsRegInfo, [in] WSAESETSERVICEOP essOperation, [in] DWORD dwControlFlags ) {...}",
            "name": "LPNSPSETSERVICE callback"
        },
        {
            "signature": "LPNSPV2CLEANUP Lpnspv2cleanup; INT Lpnspv2cleanup( [in] LPGUID lpProviderId, [in] LPVOID pvClientSessionArg ) {...}",
            "name": "LPNSPV2CLEANUP callback"
        },
        {
            "signature": "LPNSPV2CLIENTSESSIONRUNDOWN Lpnspv2clientsessionrundown; void Lpnspv2clientsessionrundown( [in] LPGUID lpProviderId, [in] LPVOID pvClientSessionArg ) {...}",
            "name": "LPNSPV2CLIENTSESSIONRUNDOWN callback"
        },
        {
            "signature": "LPNSPV2LOOKUPSERVICEBEGIN Lpnspv2lookupservicebegin; INT Lpnspv2lookupservicebegin( [in] LPGUID lpProviderId, [in] LPWSAQUERYSET2W lpqsRestrictions, [in] DWORD dwControlFlags, [out] LPVOID lpvClientSessionArg, [out] LPHANDLE lphLookup ) {...}",
            "name": "LPNSPV2LOOKUPSERVICEBEGIN callback"
        },
        {
            "signature": "LPNSPV2LOOKUPSERVICEEND Lpnspv2lookupserviceend; INT Lpnspv2lookupserviceend( [in] HANDLE hLookup ) {...}",
            "name": "LPNSPV2LOOKUPSERVICEEND callback"
        },
        {
            "signature": "LPNSPV2LOOKUPSERVICENEXTEX Lpnspv2lookupservicenextex; void Lpnspv2lookupservicenextex( [in] HANDLE hAsyncCall, [in] HANDLE hLookup, [in] DWORD dwControlFlags, [in, out] LPDWORD lpdwBufferLength, [out] LPWSAQUERYSET2W lpqsResults ) {...}",
            "name": "LPNSPV2LOOKUPSERVICENEXTEX callback"
        },
        {
            "signature": "LPNSPV2SETSERVICEEX Lpnspv2setserviceex; void Lpnspv2setserviceex( [in] HANDLE hAsyncCall, [in] LPGUID lpProviderId, [in] LPWSAQUERYSET2W lpqsRegInfo, [in] WSAESETSERVICEOP essOperation, [in] DWORD dwControlFlags, [in] LPVOID lpvClientSessionArg ) {...}",
            "name": "LPNSPV2SETSERVICEEX callback"
        },
        {
            "signature": "LPNSPV2STARTUP Lpnspv2startup; INT Lpnspv2startup( [in] LPGUID lpProviderId, [in] LPVOID *ppvClientSessionArg ) {...}",
            "name": "LPNSPV2STARTUP callback"
        },
        {
            "signature": "LPWSPACCEPT Lpwspaccept; SOCKET Lpwspaccept( [in] SOCKET s, [out] sockaddr *addr, [in, out] LPINT addrlen, [in] LPCONDITIONPROC lpfnCondition, [in] DWORD_PTR dwCallbackData, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPACCEPT callback"
        },
        {
            "signature": "LPWSPADDRESSTOSTRING Lpwspaddresstostring; INT Lpwspaddresstostring( [in] LPSOCKADDR lpsaAddress, [in] DWORD dwAddressLength, [in] LPWSAPROTOCOL_INFOW lpProtocolInfo, [out] LPWSTR lpszAddressString, [in, out] LPDWORD lpdwAddressStringLength, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPADDRESSTOSTRING callback"
        },
        {
            "signature": "LPWSPASYNCSELECT Lpwspasyncselect; int Lpwspasyncselect( [in] SOCKET s, [in] HWND hWnd, [in] unsigned int wMsg, [in] long lEvent, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPASYNCSELECT callback"
        },
        {
            "signature": "LPWSPBIND Lpwspbind; int Lpwspbind( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPBIND callback"
        },
        {
            "signature": "LPWSPCANCELBLOCKINGCALL Lpwspcancelblockingcall; int Lpwspcancelblockingcall( [out] LPINT lpErrno ) {...}",
            "name": "LPWSPCANCELBLOCKINGCALL callback"
        },
        {
            "signature": "LPWSPCLEANUP Lpwspcleanup; int Lpwspcleanup( [out] LPINT lpErrno ) {...}",
            "name": "LPWSPCLEANUP callback"
        },
        {
            "signature": "LPWSPCLOSESOCKET Lpwspclosesocket; int Lpwspclosesocket( [in] SOCKET s, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPCLOSESOCKET callback"
        },
        {
            "signature": "LPWSPCONNECT Lpwspconnect; int Lpwspconnect( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [in] LPWSABUF lpCallerData, [out] LPWSABUF lpCalleeData, [in] LPQOS lpSQOS, [in] LPQOS lpGQOS, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPCONNECT callback"
        },
        {
            "signature": "LPWSPDUPLICATESOCKET Lpwspduplicatesocket; int Lpwspduplicatesocket( [in] SOCKET s, [in] DWORD dwProcessId, [out] LPWSAPROTOCOL_INFOW lpProtocolInfo, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPDUPLICATESOCKET callback"
        },
        {
            "signature": "LPWSPENUMNETWORKEVENTS Lpwspenumnetworkevents; int Lpwspenumnetworkevents( [in] SOCKET s, [in] WSAEVENT hEventObject, [out] LPWSANETWORKEVENTS lpNetworkEvents, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPENUMNETWORKEVENTS callback"
        },
        {
            "signature": "LPWSPEVENTSELECT Lpwspeventselect; int Lpwspeventselect( [in] SOCKET s, [in] WSAEVENT hEventObject, [in] long lNetworkEvents, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPEVENTSELECT callback"
        },
        {
            "signature": "LPWSPGETOVERLAPPEDRESULT Lpwspgetoverlappedresult; BOOL Lpwspgetoverlappedresult( [in] SOCKET s, [in] LPWSAOVERLAPPED lpOverlapped, [out] LPDWORD lpcbTransfer, [in] BOOL fWait, [out] LPDWORD lpdwFlags, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPGETOVERLAPPEDRESULT callback"
        },
        {
            "signature": "LPWSPGETPEERNAME Lpwspgetpeername; int Lpwspgetpeername( [in] SOCKET s, [out] sockaddr *name, [in, out] LPINT namelen, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPGETPEERNAME callback"
        },
        {
            "signature": "LPWSPGETQOSBYNAME Lpwspgetqosbyname; BOOL Lpwspgetqosbyname( [in] SOCKET s, [in, out] LPWSABUF lpQOSName, [out] LPQOS lpQOS, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPGETQOSBYNAME callback"
        },
        {
            "signature": "LPWSPGETSOCKNAME Lpwspgetsockname; int Lpwspgetsockname( [in] SOCKET s, [out] sockaddr *name, [in, out] LPINT namelen, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPGETSOCKNAME callback"
        },
        {
            "signature": "LPWSPGETSOCKOPT Lpwspgetsockopt; int Lpwspgetsockopt( SOCKET s, int level, int optname, char *optval, LPINT optlen, LPINT lpErrno ) {...}",
            "name": "LPWSPGETSOCKOPT callback"
        },
        {
            "signature": "LPWSPIOCTL Lpwspioctl; int Lpwspioctl( [in] SOCKET s, [in] DWORD dwIoControlCode, [in] LPVOID lpvInBuffer, [in] DWORD cbInBuffer, [out] LPVOID lpvOutBuffer, [in] DWORD cbOutBuffer, [out] LPDWORD lpcbBytesReturned, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, [in] LPWSATHREADID lpThreadId, [in] LPINT lpErrno ) {...}",
            "name": "LPWSPIOCTL callback"
        },
        {
            "signature": "LPWSPJOINLEAF Lpwspjoinleaf; SOCKET Lpwspjoinleaf( [in] SOCKET s, [in] const sockaddr *name, [in] int namelen, [in] LPWSABUF lpCallerData, [out] LPWSABUF lpCalleeData, [in] LPQOS lpSQOS, [in] LPQOS lpGQOS, [in] DWORD dwFlags, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPJOINLEAF callback"
        },
        {
            "signature": "LPWSPLISTEN Lpwsplisten; int Lpwsplisten( [in] SOCKET s, [in] int backlog, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPLISTEN callback"
        },
        {
            "signature": "LPWSPRECV Lpwsprecv; int Lpwsprecv( [in] SOCKET s, \\[in\\, out\\] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesRecvd, \\[in\\, out\\] LPDWORD lpFlags, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, [in] LPWSATHREADID lpThreadId, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPRECV callback"
        },
        {
            "signature": "LPWSPRECVDISCONNECT Lpwsprecvdisconnect; int Lpwsprecvdisconnect( [in] SOCKET s, [out] LPWSABUF lpInboundDisconnectData, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPRECVDISCONNECT callback"
        },
        {
            "signature": "LPWSPRECVFROM Lpwsprecvfrom; int Lpwsprecvfrom( [in] SOCKET s, [in, out] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesRecvd, [in, out] LPDWORD lpFlags, [out] sockaddr *lpFrom, [in, out] LPINT lpFromlen, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, \\[in\\] LPWSATHREADID lpThreadId, [in, out] LPINT lpErrno ) {...}",
            "name": "LPWSPRECVFROM callback"
        },
        {
            "signature": "LPWSPSELECT Lpwspselect; int Lpwspselect( [in] int nfds, [in, out] fd_set *readfds, [in, out] fd_set *writefds, [in, out] fd_set *exceptfds, [in] const timeval *timeout, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSELECT callback"
        },
        {
            "signature": "LPWSPSEND Lpwspsend; int Lpwspsend( [in] SOCKET s, [in] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesSent, [in] DWORD dwFlags, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, [in] LPWSATHREADID lpThreadId, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSEND callback"
        },
        {
            "signature": "LPWSPSENDDISCONNECT Lpwspsenddisconnect; int Lpwspsenddisconnect( [in] SOCKET s, [in] LPWSABUF lpOutboundDisconnectData, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSENDDISCONNECT callback"
        },
        {
            "signature": "LPWSPSENDTO Lpwspsendto; int Lpwspsendto( [in] SOCKET s, [in] LPWSABUF lpBuffers, [in] DWORD dwBufferCount, [out] LPDWORD lpNumberOfBytesSent, [in] DWORD dwFlags, [in] const sockaddr *lpTo, [in] int iTolen, [in] LPWSAOVERLAPPED lpOverlapped, [in] LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, [in] LPWSATHREADID lpThreadId, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSENDTO callback"
        },
        {
            "signature": "LPWSPSETSOCKOPT Lpwspsetsockopt; int Lpwspsetsockopt( [in] SOCKET s, [in] int level, [in] int optname, [in] const char *optval, [in] int optlen, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSETSOCKOPT callback"
        },
        {
            "signature": "LPWSPSHUTDOWN Lpwspshutdown; int Lpwspshutdown( [in] SOCKET s, [in] int how, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSHUTDOWN callback"
        },
        {
            "signature": "LPWSPSOCKET Lpwspsocket; SOCKET Lpwspsocket( [in] int af, [in] int type, [in] int protocol, [in] LPWSAPROTOCOL_INFOW lpProtocolInfo, [in] GROUP g, DWORD dwFlags, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSOCKET callback"
        },
        {
            "signature": "LPWSPSTRINGTOADDRESS Lpwspstringtoaddress; INT Lpwspstringtoaddress( [in] LPWSTR AddressString, [in] INT AddressFamily, [in] LPWSAPROTOCOL_INFOW lpProtocolInfo, [out] LPSOCKADDR lpAddress, [in, out] LPINT lpAddressLength, [out] LPINT lpErrno ) {...}",
            "name": "LPWSPSTRINGTOADDRESS callback"
        },
        {
            "signature": "INT WSAAPI NSPStartup( [in] LPGUID lpProviderId, [out] LPNSP_ROUTINE lpnspRoutines );",
            "name": "NSPStartup"
        },
        {
            "signature": "BOOL WPUCloseEvent( [in] WSAEVENT hEvent, [out] LPINT lpErrno );",
            "name": "WPUCloseEvent"
        },
        {
            "signature": "int WPUCloseSocketHandle( [in] SOCKET s, [out] LPINT lpErrno );",
            "name": "WPUCloseSocketHandle"
        },
        {
            "signature": "int WPUCloseThread( [in] LPWSATHREADID lpThreadId, [out] LPINT lpErrno );",
            "name": "WPUCloseThread"
        },
        {
            "signature": "int WPUCompleteOverlappedRequest( [in] SOCKET s, [in] LPWSAOVERLAPPED lpOverlapped, [in] DWORD dwError, [in] DWORD cbTransferred, [out] LPINT lpErrno );",
            "name": "WPUCompleteOverlappedRequest"
        },
        {
            "signature": "WSAEVENT WPUCreateEvent( [out] LPINT lpErrno );",
            "name": "WPUCreateEvent"
        },
        {
            "signature": "SOCKET WPUCreateSocketHandle( [in] DWORD dwCatalogEntryId, [in] DWORD_PTR dwContext, [out] LPINT lpErrno );",
            "name": "WPUCreateSocketHandle"
        },
        {
            "signature": "int WPUFDIsSet( [in] SOCKET s, [in] fd_set *fdset );",
            "name": "WPUFDIsSet"
        },
        {
            "signature": "int WPUGetProviderPath( [in] LPGUID lpProviderId, [out] WCHAR *lpszProviderDllPath, [in, out] LPINT lpProviderDllPathLen, [out] LPINT lpErrno );",
            "name": "WPUGetProviderPath"
        },
        {
            "signature": "SOCKET WPUModifyIFSHandle( [in] DWORD dwCatalogEntryId, [in] SOCKET ProposedHandle, [out] LPINT lpErrno );",
            "name": "WPUModifyIFSHandle"
        },
        {
            "signature": "int WPUOpenCurrentThread( [out] LPWSATHREADID lpThreadId, [out] LPINT lpErrno );",
            "name": "WPUOpenCurrentThread"
        },
        {
            "signature": "BOOL WPUPostMessage( [in] HWND hWnd, [in] UINT Msg, [in] WPARAM wParam, [in] LPARAM lParam );",
            "name": "WPUPostMessage"
        },
        {
            "signature": "int WPUQueryBlockingCallback( [in] DWORD dwCatalogEntryId, [out] LPBLOCKINGCALLBACK *lplpfnCallback, [out] PDWORD_PTR lpdwContext, [out] LPINT lpErrno );",
            "name": "WPUQueryBlockingCallback"
        },
        {
            "signature": "int WPUQuerySocketHandleContext( [in] SOCKET s, [out] PDWORD_PTR lpContext, [out] LPINT lpErrno );",
            "name": "WPUQuerySocketHandleContext"
        },
        {
            "signature": "int WPUQueueApc( [in] LPWSATHREADID lpThreadId, [in] LPWSAUSERAPC lpfnUserApc, [in] DWORD_PTR dwContext, [out] LPINT lpErrno );",
            "name": "WPUQueueApc"
        },
        {
            "signature": "BOOL WPUResetEvent( [in] WSAEVENT hEvent, [out] LPINT lpErrno );",
            "name": "WPUResetEvent"
        },
        {
            "signature": "BOOL WPUSetEvent( [in] WSAEVENT hEvent, [out] LPINT lpErrno );",
            "name": "WPUSetEvent"
        },
        {
            "signature": "INT WSAAPI WSAAdvertiseProvider( [in] const GUID *puuidProviderId, [in] const LPCNSPV2_ROUTINE pNSPv2Routine );",
            "name": "WSAAdvertiseProvider"
        },
        {
            "signature": "INT WSAAPI WSAProviderCompleteAsyncCall( HANDLE hAsyncCall, INT iRetCode );",
            "name": "WSAProviderCompleteAsyncCall"
        },
        {
            "signature": "INT WSAAPI WSAUnadvertiseProvider( [in] const GUID *puuidProviderId );",
            "name": "WSAUnadvertiseProvider"
        },
        {
            "signature": "int WSCDeinstallProvider( [in] LPGUID lpProviderId, [out] LPINT lpErrno );",
            "name": "WSCDeinstallProvider"
        },
        {
            "signature": "int WSCDeinstallProvider32( [in] LPGUID lpProviderId, [out] LPINT lpErrno );",
            "name": "WSCDeinstallProvider32"
        },
        {
            "signature": "INT WSCEnableNSProvider( [in] LPGUID lpProviderId, [in] BOOL fEnable );",
            "name": "WSCEnableNSProvider"
        },
        {
            "signature": "INT WSCEnableNSProvider32( [in] LPGUID lpProviderId, [in] BOOL fEnable );",
            "name": "WSCEnableNSProvider32"
        },
        {
            "signature": "INT WSAAPI WSCEnumNameSpaceProviders32( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOW lpnspBuffer );",
            "name": "WSCEnumNameSpaceProviders32"
        },
        {
            "signature": "INT WSAAPI WSCEnumNameSpaceProvidersEx32( [in, out] LPDWORD lpdwBufferLength, [out] LPWSANAMESPACE_INFOEXW lpnspBuffer );",
            "name": "WSCEnumNameSpaceProvidersEx32"
        },
        {
            "signature": "int WSCEnumProtocols( [in] LPINT lpiProtocols, [out] LPWSAPROTOCOL_INFOW lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength, [out] LPINT lpErrno );",
            "name": "WSCEnumProtocols"
        },
        {
            "signature": "int WSCEnumProtocols32( [in] LPINT lpiProtocols, [out] LPWSAPROTOCOL_INFOW lpProtocolBuffer, [in, out] LPDWORD lpdwBufferLength, [out] LPINT lpErrno );",
            "name": "WSCEnumProtocols32"
        },
        {
            "signature": "int WSCGetApplicationCategory( [in] LPCWSTR Path, [in] DWORD PathLength, [in] LPCWSTR Extra, [in] DWORD ExtraLength, [out] DWORD *pPermittedLspCategories, [out] LPINT lpErrno );",
            "name": "WSCGetApplicationCategory"
        },
        {
            "signature": "int WSCGetProviderInfo( [in] LPGUID lpProviderId, [in] WSC_PROVIDER_INFO_TYPE InfoType, [out] PBYTE Info, [in, out] size_t *InfoSize, [in] DWORD Flags, [out] LPINT lpErrno );",
            "name": "WSCGetProviderInfo"
        },
        {
            "signature": "int WSCGetProviderInfo32( [in] LPGUID lpProviderId, [in] WSC_PROVIDER_INFO_TYPE InfoType, [out] PBYTE Info, [in, out] size_t *InfoSize, [in] DWORD Flags, [out] LPINT lpErrno );",
            "name": "WSCGetProviderInfo32"
        },
        {
            "signature": "int WSCGetProviderPath( [in] LPGUID lpProviderId, [out] WCHAR *lpszProviderDllPath, [in, out] LPINT lpProviderDllPathLen, [out] LPINT lpErrno );",
            "name": "WSCGetProviderPath"
        },
        {
            "signature": "int WSCGetProviderPath32( [in] LPGUID lpProviderId, [out] WCHAR *lpszProviderDllPath, [in, out] LPINT lpProviderDllPathLen, [out] LPINT lpErrno );",
            "name": "WSCGetProviderPath32"
        },
        {
            "signature": "INT WSCInstallNameSpace( [in] LPWSTR lpszIdentifier, [in] LPWSTR lpszPathName, [in] DWORD dwNameSpace, [in] DWORD dwVersion, [in] LPGUID lpProviderId );",
            "name": "WSCInstallNameSpace"
        },
        {
            "signature": "INT WSCInstallNameSpace32( [in] LPWSTR lpszIdentifier, [in] LPWSTR lpszPathName, [in] DWORD dwNameSpace, [in] DWORD dwVersion, [in] LPGUID lpProviderId );",
            "name": "WSCInstallNameSpace32"
        },
        {
            "signature": "INT WSCInstallNameSpaceEx( [in] LPWSTR lpszIdentifier, [in] LPWSTR lpszPathName, [in] DWORD dwNameSpace, [in] DWORD dwVersion, [in] LPGUID lpProviderId, [in] LPBLOB lpProviderSpecific );",
            "name": "WSCInstallNameSpaceEx"
        },
        {
            "signature": "INT WSCInstallNameSpaceEx32( [in] LPWSTR lpszIdentifier, [in] LPWSTR lpszPathName, [in] DWORD dwNameSpace, [in] DWORD dwVersion, [in] LPGUID lpProviderId, [in] LPBLOB lpProviderSpecific );",
            "name": "WSCInstallNameSpaceEx32"
        },
        {
            "signature": "int WSCInstallProvider( [in] LPGUID lpProviderId, [in] const WCHAR *lpszProviderDllPath, [in] const LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out] LPINT lpErrno );",
            "name": "WSCInstallProvider"
        },
        {
            "signature": "int WSCInstallProvider64_32( [in] LPGUID lpProviderId, [in] const WCHAR *lpszProviderDllPath, [in] const LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out] LPINT lpErrno );",
            "name": "WSCInstallProvider64_32"
        },
        {
            "signature": "int WSCInstallProviderAndChains( [in] LPGUID lpProviderId, [in] const LPWSTR lpszProviderDllPath, [in] const LPWSTR lpszLspName, [in] DWORD dwServiceFlags, [in] LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out, optional] LPDWORD lpdwCatalogEntryId, [out] LPINT lpErrno );",
            "name": "WSCInstallProviderAndChains"
        },
        {
            "signature": "int WSCInstallProviderAndChains64_32( [in] LPGUID lpProviderId, [in] const LPWSTR lpszProviderDllPath, [in] const LPWSTR lpszProviderDllPath32, [in] const LPWSTR lpszLspName, [in] DWORD dwServiceFlags, [in] LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out, optional] LPDWORD lpdwCatalogEntryId, [out] LPINT lpErrno );",
            "name": "WSCInstallProviderAndChains64_32"
        },
        {
            "signature": "int WSCInstallQOSTemplate( [in] const LPGUID Guid, [in] LPWSABUF QosName, [in] LPQOS Qos );",
            "name": "WSCInstallQOSTemplate"
        },
        {
            "signature": "int WSCRemoveQOSTemplate( [in] const LPGUID Guid, [in] LPWSABUF QosName );",
            "name": "WSCRemoveQOSTemplate"
        },
        {
            "signature": "int WSCSetApplicationCategory( [in] LPCWSTR Path, [in] DWORD PathLength, [in] LPCWSTR Extra, [in] DWORD ExtraLength, [in] DWORD PermittedLspCategories, [out] DWORD *pPrevPermLspCat, [out] LPINT lpErrno );",
            "name": "WSCSetApplicationCategory"
        },
        {
            "signature": "int WSCSetProviderInfo( [in] LPGUID lpProviderId, [in] WSC_PROVIDER_INFO_TYPE InfoType, [in] PBYTE Info, [in] size_t InfoSize, [in] DWORD Flags, [out] LPINT lpErrno );",
            "name": "WSCSetProviderInfo"
        },
        {
            "signature": "int WSCSetProviderInfo32( [in] LPGUID lpProviderId, [in] WSC_PROVIDER_INFO_TYPE InfoType, [in] PBYTE Info, [in] size_t InfoSize, [in] DWORD Flags, [out] LPINT lpErrno );",
            "name": "WSCSetProviderInfo32"
        },
        {
            "signature": "INT WSCUnInstallNameSpace( [in] LPGUID lpProviderId );",
            "name": "WSCUnInstallNameSpace"
        },
        {
            "signature": "INT WSCUnInstallNameSpace32( [in] LPGUID lpProviderId );",
            "name": "WSCUnInstallNameSpace32"
        },
        {
            "signature": "int WSCUpdateProvider( [in] LPGUID lpProviderId, [in] const WCHAR *lpszProviderDllPath, [in] const LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out] LPINT lpErrno );",
            "name": "WSCUpdateProvider"
        },
        {
            "signature": "int WSCUpdateProvider32( [in] LPGUID lpProviderId, [in] const WCHAR *lpszProviderDllPath, [in] const LPWSAPROTOCOL_INFOW lpProtocolInfoList, [in] DWORD dwNumberOfEntries, [out] LPINT lpErrno );",
            "name": "WSCUpdateProvider32"
        },
        {
            "signature": "int WSPStartup( [in] WORD wVersionRequested, [out] LPWSPDATA lpWSPData, [in] LPWSAPROTOCOL_INFOW lpProtocolInfo, [in] WSPUPCALLTABLE UpcallTable, [out] LPWSPPROC_TABLE lpProcTable );",
            "name": "WSPStartup"
        }
    ],
    "Ws2tcpip.h": [
        {
            "signature": "VOID WSAAPI freeaddrinfo( [in] PADDRINFOA pAddrInfo );",
            "name": "freeaddrinfo"
        },
        {
            "signature": "void WSAAPI FreeAddrInfoEx( [in] PADDRINFOEXA pAddrInfoEx );",
            "name": "FreeAddrInfoEx"
        },
        {
            "signature": "void WSAAPI FreeAddrInfoExW( [in] PADDRINFOEXW pAddrInfoEx );",
            "name": "FreeAddrInfoExW"
        },
        {
            "signature": "VOID WSAAPI FreeAddrInfoW( [in] PADDRINFOW pAddrInfo );",
            "name": "FreeAddrInfoW"
        },
        {
            "signature": "char * gai_strerrorA( [in] int ecode );",
            "name": "gai_strerrorA"
        },
        {
            "signature": "WCHAR * gai_strerrorW( [in] int ecode );",
            "name": "gai_strerrorW"
        },
        {
            "signature": "INT WSAAPI getaddrinfo( [in, optional] PCSTR pNodeName, [in, optional] PCSTR pServiceName, [in, optional] const ADDRINFOA *pHints, [out] PADDRINFOA *ppResult );",
            "name": "getaddrinfo"
        },
        {
            "signature": "INT WSAAPI GetAddrInfoExA( [in, optional] PCSTR pName, [in, optional] PCSTR pServiceName, [in] DWORD dwNameSpace, [in, optional] LPGUID lpNspId, [in, optional] const ADDRINFOEXA *hints, [out] PADDRINFOEXA *ppResult, [in, optional] timeval *timeout, [in, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [out, optional] LPHANDLE lpNameHandle );",
            "name": "GetAddrInfoExA"
        },
        {
            "signature": "INT WSAAPI GetAddrInfoExCancel( [in] LPHANDLE lpHandle );",
            "name": "GetAddrInfoExCancel"
        },
        {
            "signature": "INT WSAAPI GetAddrInfoExOverlappedResult( LPOVERLAPPED lpOverlapped );",
            "name": "GetAddrInfoExOverlappedResult"
        },
        {
            "signature": "INT WSAAPI GetAddrInfoExW( [in, optional] PCWSTR pName, [in, optional] PCWSTR pServiceName, [in] DWORD dwNameSpace, [in, optional] LPGUID lpNspId, [in, optional] const ADDRINFOEXW *hints, [out] PADDRINFOEXW *ppResult, [in, optional] timeval *timeout, [in, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpHandle );",
            "name": "GetAddrInfoExW"
        },
        {
            "signature": "INT WSAAPI GetAddrInfoW( [in, optional] PCWSTR pNodeName, [in, optional] PCWSTR pServiceName, [in, optional] const ADDRINFOW *pHints, [out] PADDRINFOW *ppResult );",
            "name": "GetAddrInfoW"
        },
        {
            "signature": "int getipv4sourcefilter( [in] SOCKET Socket, [in] IN_ADDR Interface, [in] IN_ADDR Group, [out] MULTICAST_MODE_TYPE *FilterMode, [in, out] ULONG *SourceCount, [out] IN_ADDR *SourceList );",
            "name": "getipv4sourcefilter"
        },
        {
            "signature": "INT WSAAPI getnameinfo( [in] const SOCKADDR *pSockaddr, [in] socklen_t SockaddrLength, [out] PCHAR pNodeBuffer, [in] DWORD NodeBufferSize, [out] PCHAR pServiceBuffer, [in] DWORD ServiceBufferSize, [in] INT Flags );",
            "name": "getnameinfo"
        },
        {
            "signature": "INT WSAAPI GetNameInfoW( [in] const SOCKADDR *pSockaddr, [in] socklen_t SockaddrLength, [out] PWCHAR pNodeBuffer, [in] DWORD NodeBufferSize, [out] PWCHAR pServiceBuffer, [in] DWORD ServiceBufferSize, [in] INT Flags );",
            "name": "GetNameInfoW"
        },
        {
            "signature": "int getsourcefilter( [in] SOCKET Socket, [in] ULONG Interface, [in] const SOCKADDR *Group, [in] int GroupLength, [out] MULTICAST_MODE_TYPE *FilterMode, [in, out] ULONG *SourceCount, [out] SOCKADDR_STORAGE *SourceList );",
            "name": "getsourcefilter"
        },
        {
            "signature": "PCSTR WSAAPI inet_ntop( [in] INT Family, [in] const VOID *pAddr, [out] PSTR pStringBuf, [in] size_t StringBufSize );",
            "name": "inet_ntop"
        },
        {
            "signature": "INT WSAAPI inet_pton( [in] INT Family, [in] PCSTR pszAddrString, [out] PVOID pAddrBuf );",
            "name": "inet_pton"
        },
        {
            "signature": "PCWSTR WSAAPI InetNtopW( [in] INT Family, [in] const VOID *pAddr, [out] PWSTR pStringBuf, [in] size_t StringBufSize );",
            "name": "InetNtopW"
        },
        {
            "signature": "INT WSAAPI InetPtonW( [in] INT Family, [in] PCWSTR pszAddrString, [out] PVOID pAddrBuf );",
            "name": "InetPtonW"
        },
        {
            "signature": "INT WSAAPI SetAddrInfoExA( [in] PCSTR pName, [in] PCSTR pServiceName, [in, out] SOCKET_ADDRESS *pAddresses, [in] DWORD dwAddressCount, [in, optional] LPBLOB lpBlob, [in] DWORD dwFlags, [in] DWORD dwNameSpace, [in, optional] LPGUID lpNspId, [in, optional] timeval *timeout, [in, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [out, optional] LPHANDLE lpNameHandle );",
            "name": "SetAddrInfoExA"
        },
        {
            "signature": "INT WSAAPI SetAddrInfoExW( [in] PCWSTR pName, [in] PCWSTR pServiceName, [in, out] SOCKET_ADDRESS *pAddresses, [in] DWORD dwAddressCount, [in, optional] LPBLOB lpBlob, [in] DWORD dwFlags, [in] DWORD dwNameSpace, [in, optional] LPGUID lpNspId, [in, optional] timeval *timeout, [in, optional] LPOVERLAPPED lpOverlapped, [in, optional] LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, [out, optional] LPHANDLE lpNameHandle );",
            "name": "SetAddrInfoExW"
        },
        {
            "signature": "int setipv4sourcefilter( [in] SOCKET Socket, [in] IN_ADDR Interface, [in] IN_ADDR Group, [in] MULTICAST_MODE_TYPE FilterMode, [in] ULONG SourceCount, [in] const IN_ADDR *SourceList );",
            "name": "setipv4sourcefilter"
        },
        {
            "signature": "int setsourcefilter( [in] SOCKET Socket, [in] ULONG Interface, [in] const SOCKADDR *Group, [in] int GroupLength, [in] MULTICAST_MODE_TYPE FilterMode, [in] ULONG SourceCount, [in] const SOCKADDR_STORAGE *SourceList );",
            "name": "setsourcefilter"
        },
        {
            "signature": "INT WSAAPI WSADeleteSocketPeerTargetName( [in] SOCKET Socket, [in] const sockaddr *PeerAddr, [in] ULONG PeerAddrLen, [in, optional] LPWSAOVERLAPPED Overlapped, [in, optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine );",
            "name": "WSADeleteSocketPeerTargetName"
        },
        {
            "signature": "INT WSAGetFailConnectOnIcmpError( [in] SOCKET Socket, [out] DWORD *Enabled );",
            "name": "WSAGetFailConnectOnIcmpError"
        },
        {
            "signature": "INT WSAGetIcmpErrorInfo( [in] SOCKET Socket, [out] ICMP_ERROR_INFO *Info );",
            "name": "WSAGetIcmpErrorInfo"
        },
        {
            "signature": "INT WSAGetIPUserMtu( [in] SOCKET Socket, [out] DWORD *Mtu );",
            "name": "WSAGetIPUserMtu"
        },
        {
            "signature": "INT WSAGetRecvIPEcn( SOCKET Socket, DWORD *Enabled );",
            "name": "WSAGetRecvIPEcn"
        },
        {
            "signature": "INT WSAGetUdpRecvMaxCoalescedSize( [in] SOCKET Socket, [out] DWORD *MaxCoalescedMsgSize );",
            "name": "WSAGetUdpRecvMaxCoalescedSize"
        },
        {
            "signature": "INT WSAGetUdpSendMessageSize( [in] SOCKET Socket, [out] DWORD *MsgSize );",
            "name": "WSAGetUdpSendMessageSize"
        },
        {
            "signature": "INT WSAAPI WSAImpersonateSocketPeer( [in] SOCKET Socket, [in, optional] const sockaddr *PeerAddr, [in] ULONG PeerAddrLen );",
            "name": "WSAImpersonateSocketPeer"
        },
        {
            "signature": "INT WSAAPI WSAQuerySocketSecurity( [in] SOCKET Socket, [in, optional] const SOCKET_SECURITY_QUERY_TEMPLATE *SecurityQueryTemplate, [in] ULONG SecurityQueryTemplateLen, [out, optional] SOCKET_SECURITY_QUERY_INFO *SecurityQueryInfo, [in, out] ULONG *SecurityQueryInfoLen, [in, optional] LPWSAOVERLAPPED Overlapped, [in, optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine );",
            "name": "WSAQuerySocketSecurity"
        },
        {
            "signature": "INT WSAAPI WSARevertImpersonation();",
            "name": "WSARevertImpersonation"
        },
        {
            "signature": "INT WSASetFailConnectOnIcmpError( [in] SOCKET Socket, [in] DWORD Enabled );",
            "name": "WSASetFailConnectOnIcmpError"
        },
        {
            "signature": "INT WSASetIPUserMtu( [in] SOCKET Socket, [in] DWORD Mtu );",
            "name": "WSASetIPUserMtu"
        },
        {
            "signature": "INT WSASetRecvIPEcn( SOCKET Socket, DWORD Enabled );",
            "name": "WSASetRecvIPEcn"
        },
        {
            "signature": "INT WSAAPI WSASetSocketPeerTargetName( [in] SOCKET Socket, [in] const SOCKET_PEER_TARGET_NAME *PeerTargetName, [in] ULONG PeerTargetNameLen, [in, optional] LPWSAOVERLAPPED Overlapped, [in, optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine );",
            "name": "WSASetSocketPeerTargetName"
        },
        {
            "signature": "INT WSAAPI WSASetSocketSecurity( [in] SOCKET Socket, [in, optional] const SOCKET_SECURITY_SETTINGS *SecuritySettings, [in] ULONG SecuritySettingsLen, [in, optional] LPWSAOVERLAPPED Overlapped, [in, optional] LPWSAOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine );",
            "name": "WSASetSocketSecurity"
        },
        {
            "signature": "INT WSASetUdpRecvMaxCoalescedSize( [in] SOCKET Socket, [in] DWORD MaxCoalescedMsgSize );",
            "name": "WSASetUdpRecvMaxCoalescedSize"
        },
        {
            "signature": "INT WSASetUdpSendMessageSize( [in] SOCKET Socket, [in] DWORD MsgSize );",
            "name": "WSASetUdpSendMessageSize"
        }
    ],
    "Wsbapp.h": [],
    "Wsbonline.h": [
        {
            "signature": "HRESULT DeregisterOnlineBackupFromWindowsServerBackup( [in] GUID guidSnapinId );",
            "name": "DeregisterOnlineBackupFromWindowsServerBackup"
        },
        {
            "signature": "HRESULT RegisterOnlineBackupWithWindowsServerBackup( [in] WSB_OB_REGISTRATION_INFO *pOBRegistrationInfo );",
            "name": "RegisterOnlineBackupWithWindowsServerBackup"
        },
        {
            "signature": "HRESULT UpdateOBStatusInWindowsServerBackup( [in] WSB_OB_STATUS_INFO *pOBRegistrationInfo );",
            "name": "UpdateOBStatusInWindowsServerBackup"
        }
    ],
    "Wscapi.h": [
        {
            "signature": "HRESULT WscGetSecurityProviderHealth( [in] DWORD Providers, [out] PWSC_SECURITY_PROVIDER_HEALTH pHealth );",
            "name": "WscGetSecurityProviderHealth"
        },
        {
            "signature": "HRESULT WscRegisterForChanges( [in] LPVOID Reserved, [out] PHANDLE phCallbackRegistration, [in] LPTHREAD_START_ROUTINE lpCallbackAddress, [in] PVOID pContext );",
            "name": "WscRegisterForChanges"
        },
        {
            "signature": "HRESULT WscUnRegisterChanges( [in] HANDLE hRegistrationHandle );",
            "name": "WscUnRegisterChanges"
        }
    ],
    "Wsdattachment.h": [
        {
            "signature": "HRESULT WSDCreateOutboundAttachment( [out] IWSDOutboundAttachment **ppAttachment );",
            "name": "WSDCreateOutboundAttachment"
        }
    ],
    "Wsdbase.h": [
        {
            "signature": "HRESULT WSDCreateHttpAddress( IWSDHttpAddress **ppAddress );",
            "name": "WSDCreateHttpAddress"
        },
        {
            "signature": "HRESULT WSDCreateHttpMessageParameters( IWSDHttpMessageParameters **ppTxParams );",
            "name": "WSDCreateHttpMessageParameters"
        },
        {
            "signature": "HRESULT WSDCreateUdpAddress( [in] IWSDUdpAddress **ppAddress );",
            "name": "WSDCreateUdpAddress"
        },
        {
            "signature": "HRESULT WSDCreateUdpMessageParameters( [out] IWSDUdpMessageParameters **ppTxParams );",
            "name": "WSDCreateUdpMessageParameters"
        }
    ],
    "Wsdclient.h": [
        {
            "signature": "HRESULT WSDCreateDeviceProxy( [in] LPCWSTR pszDeviceId, [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [out] IWSDDeviceProxy **ppDeviceProxy );",
            "name": "WSDCreateDeviceProxy"
        },
        {
            "signature": "HRESULT WSDCreateDeviceProxy2( [in] LPCWSTR pszDeviceId, [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [in] WSD_CONFIG_PARAM *pConfigParams, [in] DWORD dwConfigParamCount, [out] IWSDDeviceProxy **ppDeviceProxy );",
            "name": "WSDCreateDeviceProxy2"
        },
        {
            "signature": "HRESULT WSDCreateDeviceProxyAdvanced( [in] LPCWSTR pszDeviceId, IWSDAddress *pDeviceAddress, [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [out] IWSDDeviceProxy **ppDeviceProxy );",
            "name": "WSDCreateDeviceProxyAdvanced"
        }
    ],
    "Wsddisco.h": [
        {
            "signature": "HRESULT WSDCreateDiscoveryProvider( [in] IWSDXMLContext *pContext, [out] IWSDiscoveryProvider **ppProvider );",
            "name": "WSDCreateDiscoveryProvider"
        },
        {
            "signature": "HRESULT WSDCreateDiscoveryProvider2( [in] IWSDXMLContext *pContext, [in] WSD_CONFIG_PARAM *pConfigParams, [in] DWORD dwConfigParamCount, [out] IWSDiscoveryProvider **ppProvider );",
            "name": "WSDCreateDiscoveryProvider2"
        },
        {
            "signature": "HRESULT WSDCreateDiscoveryPublisher( [in] IWSDXMLContext *pContext, [out] IWSDiscoveryPublisher **ppPublisher );",
            "name": "WSDCreateDiscoveryPublisher"
        },
        {
            "signature": "HRESULT WSDCreateDiscoveryPublisher2( [in] IWSDXMLContext *pContext, [in] WSD_CONFIG_PARAM *pConfigParams, [in] DWORD dwConfigParamCount, [out] IWSDiscoveryPublisher **ppPublisher );",
            "name": "WSDCreateDiscoveryPublisher2"
        }
    ],
    "Wsdevlicensing.h": [
        {
            "signature": "HRESULT AcquireDeveloperLicense( [in, optional] HWND hwndParent, [out] FILETIME *pExpiration );",
            "name": "AcquireDeveloperLicense"
        },
        {
            "signature": "HRESULT CheckDeveloperLicense( [out] FILETIME *pExpiration );",
            "name": "CheckDeveloperLicense"
        },
        {
            "signature": "HRESULT RemoveDeveloperLicense( [in, optional] HWND hwndParent );",
            "name": "RemoveDeveloperLicense"
        }
    ],
    "Wsdhost.h": [
        {
            "signature": "HRESULT WSDCreateDeviceHost( [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [out] IWSDDeviceHost **ppDeviceHost );",
            "name": "WSDCreateDeviceHost"
        },
        {
            "signature": "HRESULT WSDCreateDeviceHost2( [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [in] WSD_CONFIG_PARAM *pConfigParams, [in] DWORD dwConfigParamCount, [out] IWSDDeviceHost **ppDeviceHost );",
            "name": "WSDCreateDeviceHost2"
        },
        {
            "signature": "HRESULT WSDCreateDeviceHostAdvanced( [in] LPCWSTR pszLocalId, [in] IWSDXMLContext *pContext, [in] IWSDAddress **ppHostAddresses, [in] DWORD dwHostAddressCount, [out] IWSDDeviceHost **ppDeviceHost );",
            "name": "WSDCreateDeviceHostAdvanced"
        }
    ],
    "Wsdtypes.h": [
        {
            "signature": "PWSD_SOAP_MESSAGE_HANDLER PwsdSoapMessageHandler; HRESULT PwsdSoapMessageHandler( IUnknown *thisUnknown, WSD_EVENT *event ) {...}",
            "name": "PWSD_SOAP_MESSAGE_HANDLER callback"
        },
        {
            "signature": "WSD_STUB_FUNCTION WsdStubFunction; HRESULT WsdStubFunction( IUnknown *server, IWSDServiceMessaging *session, WSD_EVENT *event ) {...}",
            "name": "WSD_STUB_FUNCTION callback"
        }
    ],
    "Wsdutil.h": [
        {
            "signature": "void * WSDAllocateLinkedMemory( void *pParent, size_t cbSize );",
            "name": "WSDAllocateLinkedMemory"
        },
        {
            "signature": "void WSDAttachLinkedMemory( void *pParent, void *pChild );",
            "name": "WSDAttachLinkedMemory"
        },
        {
            "signature": "void WSDDetachLinkedMemory( void *pVoid );",
            "name": "WSDDetachLinkedMemory"
        },
        {
            "signature": "void WSDFreeLinkedMemory( void *pVoid );",
            "name": "WSDFreeLinkedMemory"
        },
        {
            "signature": "HRESULT WSDGenerateFault( [in] LPCWSTR pszCode, [in] LPCWSTR pszSubCode, [in] LPCWSTR pszReason, [in] LPCWSTR pszDetail, [in] IWSDXMLContext *pContext, [out] WSD_SOAP_FAULT **ppFault );",
            "name": "WSDGenerateFault"
        },
        {
            "signature": "HRESULT WSDGenerateFaultEx( [in] WSDXML_NAME *pCode, [in] WSDXML_NAME *pSubCode, [in] WSD_LOCALIZED_STRING_LIST *pReasons, [in] LPCWSTR pszDetail, [out] WSD_SOAP_FAULT **ppFault );",
            "name": "WSDGenerateFaultEx"
        },
        {
            "signature": "HRESULT WSDGetConfigurationOption( DWORD dwOption, [out] LPVOID pVoid, DWORD cbOutBuffer );",
            "name": "WSDGetConfigurationOption"
        },
        {
            "signature": "HRESULT WSDSetConfigurationOption( DWORD dwOption, [in] LPVOID pVoid, DWORD cbInBuffer );",
            "name": "WSDSetConfigurationOption"
        },
        {
            "signature": "HRESULT WSDUriDecode( [in] LPCWSTR source, [in] DWORD cchSource, [out] LPWSTR *destOut, [out, optional] DWORD *cchDestOut );",
            "name": "WSDUriDecode"
        },
        {
            "signature": "HRESULT WSDUriEncode( [in] LPCWSTR source, [in] DWORD cchSource, [out] LPWSTR *destOut, [out, optional] DWORD *cchDestOut );",
            "name": "WSDUriEncode"
        },
        {
            "signature": "HRESULT WSDXMLAddChild( WSDXML_ELEMENT *pParent, WSDXML_ELEMENT *pChild );",
            "name": "WSDXMLAddChild"
        },
        {
            "signature": "HRESULT WSDXMLAddSibling( [in] WSDXML_ELEMENT *pFirst, [in] WSDXML_ELEMENT *pSecond );",
            "name": "WSDXMLAddSibling"
        },
        {
            "signature": "HRESULT WSDXMLBuildAnyForSingleElement( [in] WSDXML_NAME *pElementName, [in] LPCWSTR pszText, [out] WSDXML_ELEMENT **ppAny );",
            "name": "WSDXMLBuildAnyForSingleElement"
        },
        {
            "signature": "HRESULT WSDXMLCleanupElement( [in] WSDXML_ELEMENT *pAny );",
            "name": "WSDXMLCleanupElement"
        },
        {
            "signature": "HRESULT WSDXMLGetValueFromAny( [in] LPCWSTR pszNamespace, [in] LPCWSTR pszName, [in] WSDXML_ELEMENT *pAny, [out] LPCWSTR *ppszValue );",
            "name": "WSDXMLGetValueFromAny"
        }
    ],
    "Wsdxml.h": [
        {
            "signature": "HRESULT WSDXMLCreateContext( [out] IWSDXMLContext **ppContext );",
            "name": "WSDXMLCreateContext"
        },
        {
            "signature": "HRESULT WSDXMLGetNameFromBuiltinNamespace( LPCWSTR pszNamespace, LPCWSTR pszName, WSDXML_NAME **ppName );",
            "name": "WSDXMLGetNameFromBuiltinNamespace"
        }
    ],
    "Wsdxmldom.h": [],
    "Wsipv6ok.h": [],
    "Wslapi.h": [
        {
            "signature": "HRESULT WslConfigureDistribution( PCWSTR distributionName, ULONG defaultUID, WSL_DISTRIBUTION_FLAGS wslDistributionFlags );",
            "name": "WslConfigureDistribution"
        },
        {
            "signature": "HRESULT WslGetDistributionConfiguration( [in] PCWSTR distributionName, [out] ULONG *distributionVersion, [out] ULONG *defaultUID, [out] WSL_DISTRIBUTION_FLAGS *wslDistributionFlags, [out] PSTR **defaultEnvironmentVariables, [out] ULONG *defaultEnvironmentVariableCount );",
            "name": "WslGetDistributionConfiguration"
        },
        {
            "signature": "BOOL WslIsDistributionRegistered( PCWSTR distributionName );",
            "name": "WslIsDistributionRegistered"
        },
        {
            "signature": "HRESULT WslLaunch( [in] PCWSTR distributionName, [in, optional] PCWSTR command, [in] BOOL useCurrentWorkingDirectory, [in] HANDLE stdIn, [in] HANDLE stdOut, [in] HANDLE stdErr, [out] HANDLE *process );",
            "name": "WslLaunch"
        },
        {
            "signature": "HRESULT WslLaunchInteractive( [in] PCWSTR distributionName, [in, optional] PCWSTR command, [in] BOOL useCurrentWorkingDirectory, [out] DWORD *exitCode );",
            "name": "WslLaunchInteractive"
        },
        {
            "signature": "HRESULT WslRegisterDistribution( [in] PCWSTR distributionName, [in] PCWSTR tarGzFilename );",
            "name": "WslRegisterDistribution"
        },
        {
            "signature": "HRESULT WslUnregisterDistribution( [in] PCWSTR distributionName );",
            "name": "WslUnregisterDistribution"
        }
    ],
    "Wsman.h": [
        {
            "signature": "WSMAN_PLUGIN_AUTHORIZE_OPERATION WsmanPluginAuthorizeOperation; void WsmanPluginAuthorizeOperation( [in] PVOID pluginContext, [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags, [in] DWORD operation, [in] PCWSTR action, [in] PCWSTR resourceUri ) {...}",
            "name": "WSMAN_PLUGIN_AUTHORIZE_OPERATION callback"
        },
        {
            "signature": "WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA WsmanPluginAuthorizeQueryQuota; void WsmanPluginAuthorizeQueryQuota( [in] PVOID pluginContext, [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags ) {...}",
            "name": "WSMAN_PLUGIN_AUTHORIZE_QUERY_QUOTA callback"
        },
        {
            "signature": "WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT WsmanPluginAuthorizeReleaseContext; void WsmanPluginAuthorizeReleaseContext( [in] PVOID userAuthorizationContext ) {...}",
            "name": "WSMAN_PLUGIN_AUTHORIZE_RELEASE_CONTEXT callback"
        },
        {
            "signature": "WSMAN_PLUGIN_AUTHORIZE_USER WsmanPluginAuthorizeUser; void WsmanPluginAuthorizeUser( [in] PVOID pluginContext, [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags ) {...}",
            "name": "WSMAN_PLUGIN_AUTHORIZE_USER callback"
        },
        {
            "signature": "WSMAN_PLUGIN_COMMAND WsmanPluginCommand; void WsmanPluginCommand( WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, PVOID shellContext, PCWSTR commandLine, WSMAN_COMMAND_ARG_SET *arguments ) {...}",
            "name": "WSMAN_PLUGIN_COMMAND callback"
        },
        {
            "signature": "WSMAN_PLUGIN_CONNECT WsmanPluginConnect; void WsmanPluginConnect( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [in] PVOID shellContext, [in, optional] PVOID commandContext, [in, optional] WSMAN_DATA *inboundConnectInformation ) {...}",
            "name": "WSMAN_PLUGIN_CONNECT callback"
        },
        {
            "signature": "WSMAN_PLUGIN_RECEIVE WsmanPluginReceive; void WsmanPluginReceive( WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, PVOID shellContext, PVOID commandContext, WSMAN_STREAM_ID_SET *streamSet ) {...}",
            "name": "WSMAN_PLUGIN_RECEIVE callback"
        },
        {
            "signature": "WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT WsmanPluginReleaseCommandContext; void WsmanPluginReleaseCommandContext( [in] PVOID shellContext, [in] PVOID commandContext ) {...}",
            "name": "WSMAN_PLUGIN_RELEASE_COMMAND_CONTEXT callback"
        },
        {
            "signature": "WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT WsmanPluginReleaseShellContext; void WsmanPluginReleaseShellContext( [in] PVOID shellContext ) {...}",
            "name": "WSMAN_PLUGIN_RELEASE_SHELL_CONTEXT callback"
        },
        {
            "signature": "WSMAN_PLUGIN_SEND WsmanPluginSend; void WsmanPluginSend( WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, PVOID shellContext, PVOID commandContext, PCWSTR stream, WSMAN_DATA *inboundData ) {...}",
            "name": "WSMAN_PLUGIN_SEND callback"
        },
        {
            "signature": "WSMAN_PLUGIN_SHELL WsmanPluginShell; void WsmanPluginShell( PVOID pluginContext, WSMAN_PLUGIN_REQUEST *requestDetails, DWORD flags, WSMAN_SHELL_STARTUP_INFO *startupInfo, WSMAN_DATA *inboundShellInformation ) {...}",
            "name": "WSMAN_PLUGIN_SHELL callback"
        },
        {
            "signature": "WSMAN_PLUGIN_SHUTDOWN WsmanPluginShutdown; DWORD WsmanPluginShutdown( PVOID pluginContext, DWORD flags, DWORD reason ) {...}",
            "name": "WSMAN_PLUGIN_SHUTDOWN callback"
        },
        {
            "signature": "WSMAN_PLUGIN_SIGNAL WsmanPluginSignal; void WsmanPluginSignal( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [in] PVOID shellContext, [in, optional] PVOID commandContext, [in] PCWSTR code ) {...}",
            "name": "WSMAN_PLUGIN_SIGNAL callback"
        },
        {
            "signature": "WSMAN_PLUGIN_STARTUP WsmanPluginStartup; DWORD WsmanPluginStartup( DWORD flags, PCWSTR applicationIdentification, PCWSTR extraInfo, PVOID *pluginContext ) {...}",
            "name": "WSMAN_PLUGIN_STARTUP callback"
        },
        {
            "signature": "WSMAN_SHELL_COMPLETION_FUNCTION WsmanShellCompletionFunction; void WsmanShellCompletionFunction( [in, optional] PVOID operationContext, DWORD flags, [in] WSMAN_ERROR *error, [in] WSMAN_SHELL_HANDLE shell, [in, optional] WSMAN_COMMAND_HANDLE command, [in, optional] WSMAN_OPERATION_HANDLE operationHandle, [in, optional] WSMAN_RESPONSE_DATA *data ) {...}",
            "name": "WSMAN_SHELL_COMPLETION_FUNCTION callback"
        },
        {
            "signature": "void WSManCloseCommand( [in, out, optional] WSMAN_COMMAND_HANDLE commandHandle, DWORD flags, [in] WSMAN_SHELL_ASYNC *async );",
            "name": "WSManCloseCommand"
        },
        {
            "signature": "DWORD WSManCloseOperation( [in, out, optional] WSMAN_OPERATION_HANDLE operationHandle, DWORD flags );",
            "name": "WSManCloseOperation"
        },
        {
            "signature": "DWORD WSManCloseSession( [in, out, optional] WSMAN_SESSION_HANDLE session, DWORD flags );",
            "name": "WSManCloseSession"
        },
        {
            "signature": "void WSManCloseShell( [in, out, optional] WSMAN_SHELL_HANDLE shellHandle, DWORD flags, [in] WSMAN_SHELL_ASYNC *async );",
            "name": "WSManCloseShell"
        },
        {
            "signature": "void WSManConnectShell( [in, out] WSMAN_SESSION_HANDLE session, DWORD flags, [in] PCWSTR resourceUri, [in] PCWSTR shellID, [in, optional] WSMAN_OPTION_SET *options, [in, optional] WSMAN_DATA *connectXml, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_SHELL_HANDLE *shell );",
            "name": "WSManConnectShell"
        },
        {
            "signature": "void WSManConnectShellCommand( [in, out] WSMAN_SHELL_HANDLE shell, DWORD flags, [in] PCWSTR commandID, [in, optional] WSMAN_OPTION_SET *options, [in, optional] WSMAN_DATA *connectXml, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_COMMAND_HANDLE *command );",
            "name": "WSManConnectShellCommand"
        },
        {
            "signature": "DWORD WSManCreateSession( [in] WSMAN_API_HANDLE apiHandle, [in, optional] PCWSTR connection, DWORD flags, [in, optional] WSMAN_AUTHENTICATION_CREDENTIALS *serverAuthenticationCredentials, [in, optional] WSMAN_PROXY_INFO *proxyInfo, [out] WSMAN_SESSION_HANDLE *session );",
            "name": "WSManCreateSession"
        },
        {
            "signature": "void WSManCreateShell( [in, out] WSMAN_SESSION_HANDLE session, DWORD flags, [in] PCWSTR resourceUri, [in, optional] WSMAN_SHELL_STARTUP_INFO *startupInfo, [in, optional] WSMAN_OPTION_SET *options, [in, optional] WSMAN_DATA *createXml, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_SHELL_HANDLE *shell );",
            "name": "WSManCreateShell"
        },
        {
            "signature": "void WSManCreateShellEx( [in, out] WSMAN_SESSION_HANDLE session, DWORD flags, [in] PCWSTR resourceUri, [in] PCWSTR shellId, [in, optional] WSMAN_SHELL_STARTUP_INFO *startupInfo, [in, optional] WSMAN_OPTION_SET *options, [in, optional] WSMAN_DATA *createXml, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_SHELL_HANDLE *shell );",
            "name": "WSManCreateShellEx"
        },
        {
            "signature": "DWORD WSManDeinitialize( [in, out, optional] WSMAN_API_HANDLE apiHandle, DWORD flags );",
            "name": "WSManDeinitialize"
        },
        {
            "signature": "void WSManDisconnectShell( [in, out] WSMAN_SHELL_HANDLE shell, DWORD flags, [in] WSMAN_SHELL_DISCONNECT_INFO *disconnectInfo, [in] WSMAN_SHELL_ASYNC *async );",
            "name": "WSManDisconnectShell"
        },
        {
            "signature": "DWORD WSManGetErrorMessage( [in] WSMAN_API_HANDLE apiHandle, DWORD flags, [in, optional] PCWSTR languageCode, DWORD errorCode, DWORD messageLength, [out] PWSTR message, [out] DWORD *messageLengthUsed );",
            "name": "WSManGetErrorMessage"
        },
        {
            "signature": "DWORD WSManGetSessionOptionAsDword( [in] WSMAN_SESSION_HANDLE session, WSManSessionOption option, [in, out] DWORD *value );",
            "name": "WSManGetSessionOptionAsDword"
        },
        {
            "signature": "DWORD WSManGetSessionOptionAsString( [in] WSMAN_SESSION_HANDLE session, WSManSessionOption option, DWORD stringLength, [out, optional] PWSTR string, [out] DWORD *stringLengthUsed );",
            "name": "WSManGetSessionOptionAsString"
        },
        {
            "signature": "DWORD WSManInitialize( DWORD flags, [out] WSMAN_API_HANDLE *apiHandle );",
            "name": "WSManInitialize"
        },
        {
            "signature": "DWORD WSManPluginAuthzOperationComplete( [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags, [in, optional] PVOID userAuthorizationContext, [in] DWORD errorCode, [in, optional] PCWSTR extendedErrorInformation );",
            "name": "WSManPluginAuthzOperationComplete"
        },
        {
            "signature": "DWORD WSManPluginAuthzQueryQuotaComplete( [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags, [in, optional] WSMAN_AUTHZ_QUOTA *quota, [in] DWORD errorCode, [in, optional] PCWSTR extendedErrorInformation );",
            "name": "WSManPluginAuthzQueryQuotaComplete"
        },
        {
            "signature": "DWORD WSManPluginAuthzUserComplete( [in] WSMAN_SENDER_DETAILS *senderDetails, [in] DWORD flags, [in, optional] PVOID userAuthorizationContext, [in, optional] HANDLE impersonationToken, [in] BOOL userIsAdministrator, [in] DWORD errorCode, [in, optional] PCWSTR extendedErrorInformation );",
            "name": "WSManPluginAuthzUserComplete"
        },
        {
            "signature": "DWORD WSManPluginFreeRequestDetails( [in] WSMAN_PLUGIN_REQUEST *requestDetails );",
            "name": "WSManPluginFreeRequestDetails"
        },
        {
            "signature": "DWORD WSManPluginGetOperationParameters( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [out] WSMAN_DATA *data );",
            "name": "WSManPluginGetOperationParameters"
        },
        {
            "signature": "DWORD WSManPluginOperationComplete( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [in] DWORD errorCode, [in, optional] PCWSTR extendedInformation );",
            "name": "WSManPluginOperationComplete"
        },
        {
            "signature": "DWORD WSManPluginReceiveResult( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [in, optional] PCWSTR stream, [in, optional] WSMAN_DATA *streamResult, [in, optional] PCWSTR commandState, [in] DWORD exitCode );",
            "name": "WSManPluginReceiveResult"
        },
        {
            "signature": "DWORD WSManPluginReportContext( [in] WSMAN_PLUGIN_REQUEST *requestDetails, [in] DWORD flags, [in] PVOID context );",
            "name": "WSManPluginReportContext"
        },
        {
            "signature": "void WSManReceiveShellOutput( [in, out] WSMAN_SHELL_HANDLE shell, [in, optional] WSMAN_COMMAND_HANDLE command, DWORD flags, [in, optional] WSMAN_STREAM_ID_SET *desiredStreamSet, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_OPERATION_HANDLE *receiveOperation );",
            "name": "WSManReceiveShellOutput"
        },
        {
            "signature": "void WSManReconnectShell( [in, out] WSMAN_SHELL_HANDLE shell, DWORD flags, [in] WSMAN_SHELL_ASYNC *async );",
            "name": "WSManReconnectShell"
        },
        {
            "signature": "void WSManReconnectShellCommand( [in, out] WSMAN_COMMAND_HANDLE commandHandle, DWORD flags, [in] WSMAN_SHELL_ASYNC *async );",
            "name": "WSManReconnectShellCommand"
        },
        {
            "signature": "void WSManRunShellCommand( [in, out] WSMAN_SHELL_HANDLE shell, DWORD flags, [in] PCWSTR commandLine, [in, optional] WSMAN_COMMAND_ARG_SET *args, [in, optional] WSMAN_OPTION_SET *options, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_COMMAND_HANDLE *command );",
            "name": "WSManRunShellCommand"
        },
        {
            "signature": "void WSManRunShellCommandEx( [in, out] WSMAN_SHELL_HANDLE shell, DWORD flags, [in] PCWSTR commandId, [in] PCWSTR commandLine, [in, optional] WSMAN_COMMAND_ARG_SET *args, [in, optional] WSMAN_OPTION_SET *options, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_COMMAND_HANDLE *command );",
            "name": "WSManRunShellCommandEx"
        },
        {
            "signature": "void WSManSendShellInput( [in] WSMAN_SHELL_HANDLE shell, [in, optional] WSMAN_COMMAND_HANDLE command, DWORD flags, [in] PCWSTR streamId, [in] WSMAN_DATA *streamData, BOOL endOfStream, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_OPERATION_HANDLE *sendOperation );",
            "name": "WSManSendShellInput"
        },
        {
            "signature": "DWORD WSManSetSessionOption( [in] WSMAN_SESSION_HANDLE session, WSManSessionOption option, [in] WSMAN_DATA *data );",
            "name": "WSManSetSessionOption"
        },
        {
            "signature": "void WSManSignalShell( [in] WSMAN_SHELL_HANDLE shell, [in, optional] WSMAN_COMMAND_HANDLE command, DWORD flags, [in] PCWSTR code, [in] WSMAN_SHELL_ASYNC *async, [out] WSMAN_OPERATION_HANDLE *signalOperation );",
            "name": "WSManSignalShell"
        }
    ],
    "Wsmandisp.h": [],
    "Wsnwlink.h": [],
    "Wsrm.h": [],
    "Wtsapi32.h": [
        {
            "signature": "void WTSCloseServer( [in] HANDLE hServer );",
            "name": "WTSCloseServer"
        },
        {
            "signature": "BOOL WTSConnectSessionA( [in] ULONG LogonId, [in] ULONG TargetLogonId, [in] PSTR pPassword, [in] BOOL bWait );",
            "name": "WTSConnectSessionA"
        },
        {
            "signature": "BOOL WTSConnectSessionW( [in] ULONG LogonId, [in] ULONG TargetLogonId, [in] PWSTR pPassword, [in] BOOL bWait );",
            "name": "WTSConnectSessionW"
        },
        {
            "signature": "BOOL WTSCreateListenerA( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPSTR pListenerName, [in] PWTSLISTENERCONFIGA pBuffer, [in] DWORD flag );",
            "name": "WTSCreateListenerA"
        },
        {
            "signature": "BOOL WTSCreateListenerW( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPWSTR pListenerName, [in] PWTSLISTENERCONFIGW pBuffer, [in] DWORD flag );",
            "name": "WTSCreateListenerW"
        },
        {
            "signature": "BOOL WTSDisconnectSession( [in] HANDLE hServer, [in] DWORD SessionId, [in] BOOL bWait );",
            "name": "WTSDisconnectSession"
        },
        {
            "signature": "BOOL WTSEnableChildSessions( BOOL bEnable );",
            "name": "WTSEnableChildSessions"
        },
        {
            "signature": "BOOL WTSEnumerateListenersA( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [out, optional] PWTSLISTENERNAMEA pListeners, [in, out] DWORD *pCount );",
            "name": "WTSEnumerateListenersA"
        },
        {
            "signature": "BOOL WTSEnumerateListenersW( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [out, optional] PWTSLISTENERNAMEW pListeners, [in, out] DWORD *pCount );",
            "name": "WTSEnumerateListenersW"
        },
        {
            "signature": "BOOL WTSEnumerateProcessesA( [in] HANDLE hServer, [in] DWORD Reserved, [in] DWORD Version, [out] PWTS_PROCESS_INFOA *ppProcessInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateProcessesA"
        },
        {
            "signature": "BOOL WTSEnumerateProcessesExA( [in] HANDLE hServer, [in, out] DWORD *pLevel, [in] DWORD SessionId, [out] LPSTR *ppProcessInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateProcessesExA"
        },
        {
            "signature": "BOOL WTSEnumerateProcessesExW( [in] HANDLE hServer, [in, out] DWORD *pLevel, [in] DWORD SessionId, [out] LPWSTR *ppProcessInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateProcessesExW"
        },
        {
            "signature": "BOOL WTSEnumerateProcessesW( [in] HANDLE hServer, [in] DWORD Reserved, [in] DWORD Version, [out] PWTS_PROCESS_INFOW *ppProcessInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateProcessesW"
        },
        {
            "signature": "BOOL WTSEnumerateServersA( [in] LPSTR pDomainName, [in] DWORD Reserved, [in] DWORD Version, PWTS_SERVER_INFOA *ppServerInfo, DWORD *pCount );",
            "name": "WTSEnumerateServersA"
        },
        {
            "signature": "BOOL WTSEnumerateServersW( [in] LPWSTR pDomainName, [in] DWORD Reserved, [in] DWORD Version, PWTS_SERVER_INFOW *ppServerInfo, DWORD *pCount );",
            "name": "WTSEnumerateServersW"
        },
        {
            "signature": "BOOL WTSEnumerateSessionsA( [in] HANDLE hServer, [in] DWORD Reserved, [in] DWORD Version, [out] PWTS_SESSION_INFOA *ppSessionInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateSessionsA"
        },
        {
            "signature": "BOOL WTSEnumerateSessionsExA( [in] HANDLE hServer, [in, out] DWORD *pLevel, [in] DWORD Filter, [out] PWTS_SESSION_INFO_1A *ppSessionInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateSessionsExA"
        },
        {
            "signature": "BOOL WTSEnumerateSessionsExW( [in] HANDLE hServer, [in, out] DWORD *pLevel, [in] DWORD Filter, [out] PWTS_SESSION_INFO_1W *ppSessionInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateSessionsExW"
        },
        {
            "signature": "BOOL WTSEnumerateSessionsW( [in] HANDLE hServer, [in] DWORD Reserved, [in] DWORD Version, [out] PWTS_SESSION_INFOW *ppSessionInfo, [out] DWORD *pCount );",
            "name": "WTSEnumerateSessionsW"
        },
        {
            "signature": "void WTSFreeMemory( [in] PVOID pMemory );",
            "name": "WTSFreeMemory"
        },
        {
            "signature": "BOOL WTSFreeMemoryExA( [in] WTS_TYPE_CLASS WTSTypeClass, [in] PVOID pMemory, [in] ULONG NumberOfEntries );",
            "name": "WTSFreeMemoryExA"
        },
        {
            "signature": "BOOL WTSFreeMemoryExW( [in] WTS_TYPE_CLASS WTSTypeClass, [in] PVOID pMemory, [in] ULONG NumberOfEntries );",
            "name": "WTSFreeMemoryExW"
        },
        {
            "signature": "BOOL WTSGetChildSessionId( [out] PULONG pSessionId );",
            "name": "WTSGetChildSessionId"
        },
        {
            "signature": "BOOL WTSGetListenerSecurityA( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPSTR pListenerName, [in] SECURITY_INFORMATION SecurityInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "WTSGetListenerSecurityA"
        },
        {
            "signature": "BOOL WTSGetListenerSecurityW( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPWSTR pListenerName, [in] SECURITY_INFORMATION SecurityInformation, [out, optional] PSECURITY_DESCRIPTOR pSecurityDescriptor, [in] DWORD nLength, [out] LPDWORD lpnLengthNeeded );",
            "name": "WTSGetListenerSecurityW"
        },
        {
            "signature": "BOOL WTSIsChildSessionsEnabled( [out] PBOOL pbEnabled );",
            "name": "WTSIsChildSessionsEnabled"
        },
        {
            "signature": "BOOL WTSLogoffSession( [in] HANDLE hServer, [in] DWORD SessionId, [in] BOOL bWait );",
            "name": "WTSLogoffSession"
        },
        {
            "signature": "HANDLE WTSOpenServerA( [in] LPSTR pServerName );",
            "name": "WTSOpenServerA"
        },
        {
            "signature": "HANDLE WTSOpenServerExA( [in] LPSTR pServerName );",
            "name": "WTSOpenServerExA"
        },
        {
            "signature": "HANDLE WTSOpenServerExW( [in] LPWSTR pServerName );",
            "name": "WTSOpenServerExW"
        },
        {
            "signature": "HANDLE WTSOpenServerW( [in] LPWSTR pServerName );",
            "name": "WTSOpenServerW"
        },
        {
            "signature": "BOOL WTSQueryListenerConfigA( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPSTR pListenerName, [out] PWTSLISTENERCONFIGA pBuffer );",
            "name": "WTSQueryListenerConfigA"
        },
        {
            "signature": "BOOL WTSQueryListenerConfigW( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPWSTR pListenerName, [out] PWTSLISTENERCONFIGW pBuffer );",
            "name": "WTSQueryListenerConfigW"
        },
        {
            "signature": "BOOL WTSQuerySessionInformationA( [in] HANDLE hServer, [in] DWORD SessionId, [in] WTS_INFO_CLASS WTSInfoClass, [out] LPSTR *ppBuffer, [out] DWORD *pBytesReturned );",
            "name": "WTSQuerySessionInformationA"
        },
        {
            "signature": "BOOL WTSQuerySessionInformationW( [in] HANDLE hServer, [in] DWORD SessionId, [in] WTS_INFO_CLASS WTSInfoClass, [out] LPWSTR *ppBuffer, [out] DWORD *pBytesReturned );",
            "name": "WTSQuerySessionInformationW"
        },
        {
            "signature": "BOOL WTSQueryUserConfigA( [in] LPSTR pServerName, [in] LPSTR pUserName, [in] WTS_CONFIG_CLASS WTSConfigClass, [out] LPSTR *ppBuffer, [out] DWORD *pBytesReturned );",
            "name": "WTSQueryUserConfigA"
        },
        {
            "signature": "BOOL WTSQueryUserConfigW( [in] LPWSTR pServerName, [in] LPWSTR pUserName, [in] WTS_CONFIG_CLASS WTSConfigClass, [out] LPWSTR *ppBuffer, [out] DWORD *pBytesReturned );",
            "name": "WTSQueryUserConfigW"
        },
        {
            "signature": "BOOL WTSQueryUserToken( [in] ULONG SessionId, [out] PHANDLE phToken );",
            "name": "WTSQueryUserToken"
        },
        {
            "signature": "BOOL WTSRegisterSessionNotification( [in] HWND hWnd, [in] DWORD dwFlags );",
            "name": "WTSRegisterSessionNotification"
        },
        {
            "signature": "BOOL WTSRegisterSessionNotificationEx( [in] HANDLE hServer, [in] HWND hWnd, [in] DWORD dwFlags );",
            "name": "WTSRegisterSessionNotificationEx"
        },
        {
            "signature": "BOOL WTSSendMessageA( [in] HANDLE hServer, [in] DWORD SessionId, [in] LPSTR pTitle, [in] DWORD TitleLength, [in] LPSTR pMessage, [in] DWORD MessageLength, [in] DWORD Style, [in] DWORD Timeout, [out] DWORD *pResponse, [in] BOOL bWait );",
            "name": "WTSSendMessageA"
        },
        {
            "signature": "BOOL WTSSendMessageW( [in] HANDLE hServer, [in] DWORD SessionId, [in] LPWSTR pTitle, [in] DWORD TitleLength, [in] LPWSTR pMessage, [in] DWORD MessageLength, [in] DWORD Style, [in] DWORD Timeout, [out] DWORD *pResponse, [in] BOOL bWait );",
            "name": "WTSSendMessageW"
        },
        {
            "signature": "BOOL WTSSetListenerSecurityA( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPSTR pListenerName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "WTSSetListenerSecurityA"
        },
        {
            "signature": "BOOL WTSSetListenerSecurityW( [in] HANDLE hServer, [in] PVOID pReserved, [in] DWORD Reserved, [in] LPWSTR pListenerName, [in] SECURITY_INFORMATION SecurityInformation, [in] PSECURITY_DESCRIPTOR pSecurityDescriptor );",
            "name": "WTSSetListenerSecurityW"
        },
        {
            "signature": "BOOL WTSSetUserConfigA( [in] LPSTR pServerName, [in] LPSTR pUserName, [in] WTS_CONFIG_CLASS WTSConfigClass, [in] LPSTR pBuffer, [in] DWORD DataLength );",
            "name": "WTSSetUserConfigA"
        },
        {
            "signature": "BOOL WTSSetUserConfigW( [in] LPWSTR pServerName, [in] LPWSTR pUserName, [in] WTS_CONFIG_CLASS WTSConfigClass, [in] LPWSTR pBuffer, [in] DWORD DataLength );",
            "name": "WTSSetUserConfigW"
        },
        {
            "signature": "BOOL WTSShutdownSystem( [in] HANDLE hServer, [in] DWORD ShutdownFlag );",
            "name": "WTSShutdownSystem"
        },
        {
            "signature": "BOOL WTSStartRemoteControlSessionA( [in] LPSTR pTargetServerName, [in] ULONG TargetLogonId, [in] BYTE HotkeyVk, [in] USHORT HotkeyModifiers );",
            "name": "WTSStartRemoteControlSessionA"
        },
        {
            "signature": "BOOL WTSStartRemoteControlSessionW( [in] LPWSTR pTargetServerName, [in] ULONG TargetLogonId, [in] BYTE HotkeyVk, [in] USHORT HotkeyModifiers );",
            "name": "WTSStartRemoteControlSessionW"
        },
        {
            "signature": "BOOL WTSStopRemoteControlSession( [in] ULONG LogonId );",
            "name": "WTSStopRemoteControlSession"
        },
        {
            "signature": "BOOL WTSTerminateProcess( [in] HANDLE hServer, [in] DWORD ProcessId, [in] DWORD ExitCode );",
            "name": "WTSTerminateProcess"
        },
        {
            "signature": "BOOL WTSUnRegisterSessionNotification( [in] HWND hWnd );",
            "name": "WTSUnRegisterSessionNotification"
        },
        {
            "signature": "BOOL WTSUnRegisterSessionNotificationEx( [in] HANDLE hServer, [in] HWND hWnd );",
            "name": "WTSUnRegisterSessionNotificationEx"
        },
        {
            "signature": "BOOL WTSVirtualChannelClose( [in] HANDLE hChannelHandle );",
            "name": "WTSVirtualChannelClose"
        },
        {
            "signature": "HANDLE WTSVirtualChannelOpen( [in] HANDLE hServer, [in] DWORD SessionId, [in] LPSTR pVirtualName );",
            "name": "WTSVirtualChannelOpen"
        },
        {
            "signature": "HANDLE WTSVirtualChannelOpenEx( [in] DWORD SessionId, [in] LPSTR pVirtualName, [in] DWORD flags );",
            "name": "WTSVirtualChannelOpenEx"
        },
        {
            "signature": "BOOL WTSVirtualChannelPurgeInput( [in] HANDLE hChannelHandle );",
            "name": "WTSVirtualChannelPurgeInput"
        },
        {
            "signature": "BOOL WTSVirtualChannelPurgeOutput( [in] HANDLE hChannelHandle );",
            "name": "WTSVirtualChannelPurgeOutput"
        },
        {
            "signature": "BOOL WTSVirtualChannelQuery( [in] HANDLE hChannelHandle, WTS_VIRTUAL_CLASS unnamedParam2, [out] PVOID *ppBuffer, [out] DWORD *pBytesReturned );",
            "name": "WTSVirtualChannelQuery"
        },
        {
            "signature": "BOOL WTSVirtualChannelRead( [in] HANDLE hChannelHandle, [in] ULONG TimeOut, [out] PCHAR Buffer, [in] ULONG BufferSize, [out] PULONG pBytesRead );",
            "name": "WTSVirtualChannelRead"
        },
        {
            "signature": "BOOL WTSVirtualChannelWrite( [in] HANDLE hChannelHandle, [in] PCHAR Buffer, [in] ULONG Length, [out] PULONG pBytesWritten );",
            "name": "WTSVirtualChannelWrite"
        },
        {
            "signature": "BOOL WTSWaitSystemEvent( [in] HANDLE hServer, [in] DWORD EventMask, [out] DWORD *pEventFlags );",
            "name": "WTSWaitSystemEvent"
        }
    ],
    "Wtsdefs.h": [],
    "Wtshintapi.h": [
        {
            "signature": "HRESULT WTSSetRenderHint( [in, out] UINT64 *pRenderHintID, [in] HWND hwndOwner, [in] DWORD renderHintType, [in] DWORD cbHintDataLength, [in] BYTE *pHintData );",
            "name": "WTSSetRenderHint"
        }
    ],
    "Wtsprotocol.h": [],
    "Wtypes.h": [],
    "Wtypesbase.h": [],
    "Wuapi.h": [],
    "X3daudio.h": [
        {
            "signature": "X3DAUDIO_API_(void) X3DAudioCalculate( [in] const X3DAUDIO_HANDLE Instance, [in] const X3DAUDIO_LISTENER *pListener, [in] const X3DAUDIO_EMITTER *pEmitter, [in] UINT32 Flags, [in, out] X3DAUDIO_DSP_SETTINGS *pDSPSettings );",
            "name": "X3DAudioCalculate"
        },
        {
            "signature": "X3DAUDIO_API_(HRESULT) X3DAudioInitialize( [in] UINT32 SpeakerChannelMask, [in] FLOAT32 SpeedOfSound, [out] X3DAUDIO_HANDLE Instance );",
            "name": "X3DAudioInitialize"
        }
    ],
    "Xamlom.h": [
        {
            "signature": "HRESULT InitializeXamlDiagnosticsEx( [in] LPCWSTR endPointName, [in] DWORD pid, [in] LPCWSTR wszDllXamlDiagnostics, [in] LPCWSTR wszTAPDllName, [in] CLSID tapClsid, [in] LPCWSTR wszInitializationData );",
            "name": "InitializeXamlDiagnosticsEx"
        }
    ],
    "Xapo.h": [],
    "Xapobase.h": [],
    "Xapofx.h": [
        {
            "signature": "FX_API_(HRESULT) CreateFX( REFCLSID clsid, IUnknown **pEffect, const void *pInitDat DEFAULT, UINT32 InitDataByteSize DEFAULT );",
            "name": "CreateFX"
        }
    ],
    "Xaudio2.h": [
        {
            "signature": "float XAudio2AmplitudeRatioToDecibels( [in] float Volume );",
            "name": "XAudio2AmplitudeRatioToDecibels"
        },
        {
            "signature": "HRESULT XAudio2Create( [out] IXAudio2 **ppXAudio2, [in] UINT32 Flags, [in] XAUDIO2_PROCESSOR XAudio2Processor );",
            "name": "XAudio2Create"
        },
        {
            "signature": "float XAudio2CutoffFrequencyToOnePoleCoefficient( float CutoffFrequency, UINT32 SampleRate );",
            "name": "XAudio2CutoffFrequencyToOnePoleCoefficient"
        },
        {
            "signature": "float XAudio2CutoffFrequencyToRadians( [in] float CutoffFrequency, [in] UINT32 SampleRate );",
            "name": "XAudio2CutoffFrequencyToRadians"
        },
        {
            "signature": "float XAudio2DecibelsToAmplitudeRatio( [in] float Decibels );",
            "name": "XAudio2DecibelsToAmplitudeRatio"
        },
        {
            "signature": "float XAudio2FrequencyRatioToSemitones( [in] float FrequencyRatio );",
            "name": "XAudio2FrequencyRatioToSemitones"
        },
        {
            "signature": "float XAudio2RadiansToCutoffFrequency( [in] float Radians, [in] float SampleRate );",
            "name": "XAudio2RadiansToCutoffFrequency"
        },
        {
            "signature": "float XAudio2SemitonesToFrequencyRatio( float Semitones );",
            "name": "XAudio2SemitonesToFrequencyRatio"
        }
    ],
    "Xaudio2fx.h": [
        {
            "signature": "void ReverbConvertI3DL2ToNative( [in] const XAUDIO2FX_REVERB_I3DL2_PARAMETERS *pI3DL2, [in, out] XAUDIO2FX_REVERB_PARAMETERS *pNative, BOOL sevenDotOneReverb DEFAULT );",
            "name": "ReverbConvertI3DL2ToNative"
        },
        {
            "signature": "HRESULT XAudio2CreateReverb( [in, out] IUnknown **ppApo, [in] UINT32 Flags DEFAULT );",
            "name": "XAudio2CreateReverb"
        },
        {
            "signature": "HRESULT XAudio2CreateVolumeMeter( [in, out] IUnknown **ppApo, [in] UINT32 Flags DEFAULT );",
            "name": "XAudio2CreateVolumeMeter"
        }
    ],
    "Xblidpauthmanager.h": [],
    "Xenroll.h": [],
    "Xinput.h": [
        {
            "signature": "void XInputEnable( [in] BOOL enable );",
            "name": "XInputEnable"
        },
        {
            "signature": "DWORD XInputGetAudioDeviceIds( [in] DWORD dwUserIndex, [out, optional] LPWSTR pRenderDeviceId, [in, out, optional] UINT *pRenderCount, [out, optional] LPWSTR pCaptureDeviceId, [in, out, optional] UINT *pCaptureCount );",
            "name": "XInputGetAudioDeviceIds"
        },
        {
            "signature": "DWORD XInputGetBatteryInformation( [in] DWORD dwUserIndex, [in] BYTE devType, [out] XINPUT_BATTERY_INFORMATION *pBatteryInformation );",
            "name": "XInputGetBatteryInformation"
        },
        {
            "signature": "DWORD XInputGetCapabilities( [in] DWORD dwUserIndex, [in] DWORD dwFlags, [out] XINPUT_CAPABILITIES *pCapabilities );",
            "name": "XInputGetCapabilities"
        },
        {
            "signature": "DWORD XInputGetDSoundAudioDeviceGuids( DWORD dwUserIndex, GUID *pDSoundRenderGuid, GUID *pDSoundCaptureGuid );",
            "name": "XInputGetDSoundAudioDeviceGuids"
        },
        {
            "signature": "DWORD XInputGetKeystroke( DWORD dwUserIndex, DWORD dwReserved, PXINPUT_KEYSTROKE pKeystroke );",
            "name": "XInputGetKeystroke"
        },
        {
            "signature": "DWORD XInputGetState( [in] DWORD dwUserIndex, [out] XINPUT_STATE *pState );",
            "name": "XInputGetState"
        },
        {
            "signature": "DWORD XInputSetState( [in] DWORD dwUserIndex, [in, out] XINPUT_VIBRATION *pVibration );",
            "name": "XInputSetState"
        }
    ],
    "Xpsdigitalsignature.h": [],
    "Xpsobjectmodel.h": [],
    "Xpsobjectmodel_1.h": [],
    "Xpsobjectmodel_2.h": [],
    "Xpsprint.h": [
        {
            "signature": "HRESULT StartXpsPrintJob( [in] LPCWSTR printerName, [in] LPCWSTR jobName, [in] LPCWSTR outputFileName, [in] HANDLE progressEvent, [in] HANDLE completionEvent, [in] UINT8 *printablePagesOn, [in] UINT32 printablePagesOnCount, [out] IXpsPrintJob **xpsPrintJob, [out] IXpsPrintJobStream **documentStream, [out] IXpsPrintJobStream **printTicketStream );",
            "name": "StartXpsPrintJob"
        },
        {
            "signature": "HRESULT StartXpsPrintJob1( [in] LPCWSTR printerName, [in, optional] LPCWSTR jobName, [in, optional] LPCWSTR outputFileName, [in, optional] HANDLE progressEvent, [in, optional] HANDLE completionEvent, [out, optional] IXpsPrintJob **xpsPrintJob, [out] IXpsOMPackageTarget **printContentReceiver );",
            "name": "StartXpsPrintJob1"
        }
    ],
    "mi.h": [
        {
            "signature": "MI_INLINE MI_Result MI_Application_Close( [in, out] MI_Application *application );",
            "name": "MI_Application_Close"
        },
        {
            "signature": "MI_Result MI_MAIN_CALL MI_Application_InitializeV1( MI_Uint32 flags, [in, optional] const MI_Char *applicationID, [out, optional] MI_Instance **extendedError, [out] MI_Application *application );",
            "name": "MI_Application_InitializeV1"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewClass( [in] MI_Application *application, [in] const MI_ClassDecl *classDecl, [in, optional] const MI_Char *namespaceName, [in, optional] const MI_Char *serverName, [out] MI_Class **classObject );",
            "name": "MI_Application_NewClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewDeserializer( [in, out] MI_Application *application, MI_Uint32 flags, [in] MI_Char *format, [out] MI_Deserializer *deserializer );",
            "name": "MI_Application_NewDeserializer"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewDestinationOptions( [in] MI_Application *application, [out] MI_DestinationOptions *options );",
            "name": "MI_Application_NewDestinationOptions"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewHostedProvider( [in] MI_Application *application, [in] const MI_Char *namespaceName, [in] const MI_Char *providerName, [in] MI_MainFunction mi_Main, [out, optional] MI_Instance **extendedError, [out] MI_HostedProvider *hostedProvider );",
            "name": "MI_Application_NewHostedProvider"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewInstance( [in] MI_Application *application, const MI_Char *className, [in, optional] const MI_ClassDecl *classRTTI, MI_Instance **instance );",
            "name": "MI_Application_NewInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewInstanceFromClass( [in] MI_Application *application, const MI_Char *className, [in, optional] const MI_Class *classObject, MI_Instance **instance );",
            "name": "MI_Application_NewInstanceFromClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewOperationOptions( [in] MI_Application *application, MI_Boolean mustUnderstand, [out] MI_OperationOptions *options );",
            "name": "MI_Application_NewOperationOptions"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewParameterSet( [in] MI_Application *application, [in, optional] const MI_ClassDecl *classRTTI, MI_Instance **instance );",
            "name": "MI_Application_NewParameterSet"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewSerializer( [in, out] MI_Application *application, MI_Uint32 flags, [in] MI_Char *format, [out] MI_Serializer *serializer );",
            "name": "MI_Application_NewSerializer"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewSession( [in] MI_Application *application, [in, optional] const MI_Char *protocol, [in, optional] const MI_Char *destination, [in, optional] MI_DestinationOptions *options, [in, optional] MI_SessionCallbacks *callbacks, MI_Instance **extendedError, [out] MI_Session *session );",
            "name": "MI_Application_NewSession"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Application_NewSubscriptionDeliveryOptions( [in] MI_Application *application, [in] MI_SubscriptionDeliveryType deliveryType, [out] MI_SubscriptionDeliveryOptions *deliveryOptions );",
            "name": "MI_Application_NewSubscriptionDeliveryOptions"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Class_Clone( [in] const MI_Class *self, MI_Class **newClass );",
            "name": "MI_Class_Clone"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_Delete( [in, out] MI_Class *self );",
            "name": "MI_Class_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetClassName( [in] const MI_Class *self, const MI_Char **className );",
            "name": "MI_Class_GetClassName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetClassQualifierSet( [in] const MI_Class *self, [out, optional] MI_QualifierSet *qualifierSet );",
            "name": "MI_Class_GetClassQualifierSet"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetElement( [in] const MI_Class *self, const MI_Char *name, [out, optional] MI_Value *value, [out, optional] MI_Boolean *valueExists, [out, optional] MI_Type *type, MI_Char **referenceClass, [out, optional] MI_QualifierSet *qualifierSet, [out, optional] MI_Uint32 *flags, [out, optional] MI_Uint32 *index );",
            "name": "MI_Class_GetElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetElementAt( [in] const MI_Class *self, MI_Uint32 index, const MI_Char **name, [out, optional] MI_Value *value, [out, optional] MI_Boolean *valueExists, [out, optional] MI_Type *type, MI_Char **referenceClass, [out, optional] MI_QualifierSet *qualifierSet, [out, optional] MI_Uint32 *flags );",
            "name": "MI_Class_GetElementAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetElementCount( [in] const MI_Class *self, [out] MI_Uint32 *count );",
            "name": "MI_Class_GetElementCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetMethod( [in] const MI_Class *self, [in] const MI_Char *name, [out, optional] MI_QualifierSet *qualifierSet, [out, optional] MI_ParameterSet *parameterSet, [out, optional] MI_Uint32 *index );",
            "name": "MI_Class_GetMethod"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetMethodAt( [in] const MI_Class *self, MI_Uint32 index, const MI_Char **name, [out, optional] MI_QualifierSet *qualifierSet, [out, optional] MI_ParameterSet *parameterSet );",
            "name": "MI_Class_GetMethodAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetMethodCount( [in] const MI_Class *self, [out] MI_Uint32 *count );",
            "name": "MI_Class_GetMethodCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetNameSpace( [in] const MI_Class *self, const MI_Char **nameSpace );",
            "name": "MI_Class_GetNameSpace"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetParentClass( [in] const MI_Class *self, MI_Class **parentClass );",
            "name": "MI_Class_GetParentClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetParentClassName( [in] const MI_Class *self, const MI_Char **name );",
            "name": "MI_Class_GetParentClassName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Class_GetServerName( [in] const MI_Class *self, const MI_Char **serverName );",
            "name": "MI_Class_GetServerName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_Canceled( [in] const MI_Context *context, [out] MI_Boolean *flag );",
            "name": "MI_Context_Canceled"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_ConstructInstance( [in] MI_Context *context, [in] const MI_ClassDecl *classDecl, [out] MI_Instance *instance );",
            "name": "MI_Context_ConstructInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_ConstructParameters( [in] MI_Context *context, [in] const MI_MethodDecl *methodDecl, [out] MI_Instance *instance );",
            "name": "MI_Context_ConstructParameters"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetCustomOption( [in] MI_Context *context, const MI_Char *name, [out, optional] MI_Type *valueType, [out, optional] MI_Value *value );",
            "name": "MI_Context_GetCustomOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetCustomOptionAt( [in] MI_Context *context, [in] MI_Uint32 index, const MI_Char **name, [out, optional] MI_Type *valueType, [out, optional] MI_Value *value );",
            "name": "MI_Context_GetCustomOptionAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetCustomOptionCount( [in] MI_Context *context, [out, optional] MI_Uint32 *count );",
            "name": "MI_Context_GetCustomOptionCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetLocale( [in] const MI_Context *context, MI_LocaleType localeType, MI_Char [MI_MAX_LOCALE_SIZE] locale );",
            "name": "MI_Context_GetLocale"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetLocalSession( [in] const MI_Context *context, [out] MI_Session *session );",
            "name": "MI_Context_GetLocalSession"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetNumberOption( [in] MI_Context *context, [in] const MI_Char *name, [out, optional] MI_Uint32 *value );",
            "name": "MI_Context_GetNumberOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_GetStringOption( [in] MI_Context *context, [in] const MI_Char *name, const MI_Char **value );",
            "name": "MI_Context_GetStringOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_NewDynamicInstance( [in] MI_Context *context, [in] const MI_Char *className, MI_Uint32 flags, MI_Instance **instance );",
            "name": "MI_Context_NewDynamicInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_NewInstance( [in] MI_Context *context, [in] const MI_ClassDecl *classDecl, MI_Instance **instance );",
            "name": "MI_Context_NewInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_NewParameters( [in] MI_Context *context, [in] const MI_MethodDecl *methodDecl, MI_Instance **instance );",
            "name": "MI_Context_NewParameters"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PostCimError( [in] MI_Context *context, [in] const MI_Instance *error );",
            "name": "MI_Context_PostCimError"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PostError( [in] MI_Context *context, MI_Uint32 resultCode, const MI_Char *resultType, const MI_Char *errorMessage );",
            "name": "MI_Context_PostError"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PostIndication( [in] MI_Context *context, [in] const MI_Instance *indication, MI_Uint32 subscriptionIDCount, const MI_Char *bookmark );",
            "name": "MI_Context_PostIndication"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PostInstance( [in] MI_Context *context, [in] const MI_Instance *instance );",
            "name": "MI_Context_PostInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PostResult( [in] MI_Context *context, MI_Result result );",
            "name": "MI_Context_PostResult"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_PromptUser( [in] MI_Context *context, [in] const MI_Char *message, MI_PromptType promptType, [out] MI_Boolean *flag );",
            "name": "MI_Context_PromptUser"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_RefuseUnload( [in] MI_Context *context );",
            "name": "MI_Context_RefuseUnload"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_RegisterCancel( [in] MI_Context *context, [in] MI_CancelCallback callback, [in, optional] void *callbackData );",
            "name": "MI_Context_RegisterCancel"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_RequestUnload( [in] MI_Context *context );",
            "name": "MI_Context_RequestUnload"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_SetStringOption( [in] MI_Context *context, const MI_Char *name, const MI_Char *value );",
            "name": "MI_Context_SetStringOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_ShouldContinue( [in] MI_Context *context, const MI_Char *message, [out] MI_Boolean *flag );",
            "name": "MI_Context_ShouldContinue"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_ShouldProcess( [in] MI_Context *context, const MI_Char *target, const MI_Char *action, [out] MI_Boolean *flag );",
            "name": "MI_Context_ShouldProcess"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteCimError( [in] MI_Context *context, [in] const MI_Instance *error, [out] MI_Boolean *flag );",
            "name": "MI_Context_WriteCimError"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteDebug( [in] MI_Context *context, const MI_Char *message );",
            "name": "MI_Context_WriteDebug"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteError( [in] MI_Context *context, MI_Uint32 resultCode, const MI_Char *resultType, const MI_Char *errorMessage, [out] MI_Boolean *flag );",
            "name": "MI_Context_WriteError"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteMessage( [in] MI_Context *context, MI_Uint32 channel, const MI_Char *message );",
            "name": "MI_Context_WriteMessage"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteProgress( [in] MI_Context *context, [in] const MI_Char *activity, [in] const MI_Char *currentOperation, [in] const MI_Char *statusDescription, MI_Uint32 percentComplete, MI_Uint32 secondsRemaining );",
            "name": "MI_Context_WriteProgress"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteStreamParameter( [in] MI_Context *self, [in] const MI_Char *name, [in] const MI_Value *value, [in] MI_Type type, [in] MI_Uint32 flags );",
            "name": "MI_Context_WriteStreamParameter"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteVerbose( [in] MI_Context *context, const MI_Char *message );",
            "name": "MI_Context_WriteVerbose"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Context_WriteWarning( [in] MI_Context *context, const MI_Char *message );",
            "name": "MI_Context_WriteWarning"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_Class_GetClassName( [in, out] MI_Deserializer *deserializer, MI_Uint8 *serializedBuffer, MI_Uint32 serializedBufferLength, MI_Char *className, [in, out] MI_Uint32 *classNameLength, MI_Instance **cimErrorDetails );",
            "name": "MI_Deserializer_Class_GetClassName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_Class_GetParentClassName( [in, out] MI_Deserializer *deserializer, MI_Uint8 *serializedBuffer, MI_Uint32 serializedBufferLength, MI_Char *parentClassName, [in, out] MI_Uint32 *parentClassNameLength, MI_Instance **cimErrorDetails );",
            "name": "MI_Deserializer_Class_GetParentClassName"
        },
        {
            "signature": "MI_Deserializer_ClassObjectNeeded MiDeserializerClassobjectneeded; MI_Result MiDeserializerClassobjectneeded( [in, optional] void *context, [in, optional] const MI_Char *serverName, [in, optional] const MI_Char *namespaceName, [in, optional] const MI_Char *className, [out] MI_Class **requestedClassObject ) {...}",
            "name": "MI_Deserializer_ClassObjectNeeded callback"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_Close( [in, out] MI_Deserializer *deserializer );",
            "name": "MI_Deserializer_Close"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_DeserializeClass( [in, out] MI_Deserializer *deserializer, MI_Uint32 flags, MI_Uint8 *serializedBuffer, MI_Uint32 serializedBufferLength, [in, optional] MI_Class *parentClass, const MI_Char *serverName, const MI_Char *namespaceName, [in, optional] MI_Deserializer_ClassObjectNeeded classObjectNeeded, [in, out] void *classObjectNeededContext, [out, optional] MI_Uint32 *serializedBufferRead, MI_Class **classObject, MI_Instance **cimErrorDetails );",
            "name": "MI_Deserializer_DeserializeClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_DeserializeInstance( [in, out] MI_Deserializer *deserializer, MI_Uint32 flags, MI_Uint8 *serializedBuffer, MI_Uint32 serializedBufferLength, MI_Class **classObjects, MI_Uint32 numberClassObjects, [in, optional] MI_Deserializer_ClassObjectNeeded classObjectNeeded, [in, out] void *classObjectNeededContext, [out, optional] MI_Uint32 *serializedBufferRead, MI_Instance **instanceObject, MI_Instance **cimErrorDetails );",
            "name": "MI_Deserializer_DeserializeInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Deserializer_Instance_GetClassName( [in, out] MI_Deserializer *deserializer, MI_Uint8 *serializedBuffer, MI_Uint32 serializedBufferLength, MI_Char *className, [in, out] MI_Uint32 *classNameLength, MI_Instance **cimErrorDetails );",
            "name": "MI_Deserializer_Instance_GetClassName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_AddDestinationCredentials( [in, out] MI_DestinationOptions *options, [in] const MI_UserCredentials *credentials );",
            "name": "MI_DestinationOptions_AddDestinationCredentials"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_AddProxyCredentials( [in, out] MI_DestinationOptions *options, [in] const MI_UserCredentials *credentials );",
            "name": "MI_DestinationOptions_AddProxyCredentials"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_DestinationOptions_Clone( [in] const MI_DestinationOptions *self, [out] MI_DestinationOptions *newDestinationOptions );",
            "name": "MI_DestinationOptions_Clone"
        },
        {
            "signature": "MI_INLINE void MI_DestinationOptions_Delete( [in, out] MI_DestinationOptions *options );",
            "name": "MI_DestinationOptions_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCertCACheck( [in] MI_DestinationOptions *options, [out] MI_Boolean *check );",
            "name": "MI_DestinationOptions_GetCertCACheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCertCNCheck( [in] MI_DestinationOptions *options, [out] MI_Boolean *check );",
            "name": "MI_DestinationOptions_GetCertCNCheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCertRevocationCheck( [in] MI_DestinationOptions *options, [out] MI_Boolean *check );",
            "name": "MI_DestinationOptions_GetCertRevocationCheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCredentialsAt( [in] MI_DestinationOptions *options, MI_Uint32 index, const MI_Char **optionName, [out] MI_UserCredentials *credentials, [out, optional] MI_Uint32 *flags );",
            "name": "MI_DestinationOptions_GetCredentialsAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCredentialsCount( [in] MI_DestinationOptions *options, [out] MI_Uint32 *count );",
            "name": "MI_DestinationOptions_GetCredentialsCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetCredentialsPasswordAt( [in] MI_DestinationOptions *options, MI_Uint32 index, const MI_Char **optionName, MI_Char *password, [in] MI_Uint32 bufferLength, [out] MI_Uint32 *passwordLength, [out, optional] MI_Uint32 *flags );",
            "name": "MI_DestinationOptions_GetCredentialsPasswordAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetDataLocale( [in] MI_DestinationOptions *options, const MI_Char **locale );",
            "name": "MI_DestinationOptions_GetDataLocale"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetDestinationPort( [in] MI_DestinationOptions *options, [out] MI_Uint32 *port );",
            "name": "MI_DestinationOptions_GetDestinationPort"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetEncodePortInSPN( [in] MI_DestinationOptions *options, [out] MI_Boolean *encodePort );",
            "name": "MI_DestinationOptions_GetEncodePortInSPN"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetHttpUrlPrefix( [in] MI_DestinationOptions *options, const MI_Char **prefix );",
            "name": "MI_DestinationOptions_GetHttpUrlPrefix"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetImpersonationType( [in, out] MI_DestinationOptions *options, [out] MI_DestinationOptions_ImpersonationType *impersonationType );",
            "name": "MI_DestinationOptions_GetImpersonationType"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetMaxEnvelopeSize( [in] MI_DestinationOptions *options, [out] MI_Uint32 *sizeInKB );",
            "name": "MI_DestinationOptions_GetMaxEnvelopeSize"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetNumber( [in] MI_DestinationOptions *options, const MI_Char *optionName, [out] MI_Uint32 *optionValue, [out, optional] MI_Uint32 *index );",
            "name": "MI_DestinationOptions_GetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetOption( [in] MI_DestinationOptions *options, const MI_Char *optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_DestinationOptions_GetOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetOptionAt( [in] MI_DestinationOptions *options, MI_Uint32 index, const MI_Char **optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *flags );",
            "name": "MI_DestinationOptions_GetOptionAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetOptionCount( [in] MI_DestinationOptions *options, [out] MI_Uint32 *count );",
            "name": "MI_DestinationOptions_GetOptionCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetPacketEncoding( [in] MI_DestinationOptions *options, const MI_Char **encoding );",
            "name": "MI_DestinationOptions_GetPacketEncoding"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetPacketIntegrity( [in] MI_DestinationOptions *options, [out] MI_Boolean *integrity );",
            "name": "MI_DestinationOptions_GetPacketIntegrity"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetPacketPrivacy( [in] MI_DestinationOptions *options, [out] MI_Boolean *privacy );",
            "name": "MI_DestinationOptions_GetPacketPrivacy"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetProxyType( [in] MI_DestinationOptions *options, const MI_Char **proxyType );",
            "name": "MI_DestinationOptions_GetProxyType"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetString( [in] MI_DestinationOptions *options, const MI_Char *optionName, const MI_Char **optionValue, [out, optional] MI_Uint32 *index );",
            "name": "MI_DestinationOptions_GetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetTimeout( [in] MI_DestinationOptions *options, [out] MI_Interval *timeout );",
            "name": "MI_DestinationOptions_GetTimeout"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetTransport( [in] MI_DestinationOptions *options, const MI_Char **transport );",
            "name": "MI_DestinationOptions_GetTransport"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_GetUILocale( [in] MI_DestinationOptions *options, const MI_Char **locale );",
            "name": "MI_DestinationOptions_GetUILocale"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetCertCACheck( [in, out] MI_DestinationOptions *options, MI_Boolean check );",
            "name": "MI_DestinationOptions_SetCertCACheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetCertCNCheck( [in, out] MI_DestinationOptions *options, MI_Boolean check );",
            "name": "MI_DestinationOptions_SetCertCNCheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetCertRevocationCheck( [in, out] MI_DestinationOptions *options, MI_Boolean check );",
            "name": "MI_DestinationOptions_SetCertRevocationCheck"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetDataLocale( [in, out] MI_DestinationOptions *options, const MI_Char *locale );",
            "name": "MI_DestinationOptions_SetDataLocale"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetDestinationPort( [in, out] MI_DestinationOptions *options, MI_Uint32 port );",
            "name": "MI_DestinationOptions_SetDestinationPort"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetEncodePortInSPN( [in, out] MI_DestinationOptions *options, MI_Boolean encodePort );",
            "name": "MI_DestinationOptions_SetEncodePortInSPN"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetHttpUrlPrefix( [in, out] MI_DestinationOptions *options, const MI_Char *prefix );",
            "name": "MI_DestinationOptions_SetHttpUrlPrefix"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetImpersonationType( [in, out] MI_DestinationOptions *options, [in] MI_DestinationOptions_ImpersonationType impersonationType );",
            "name": "MI_DestinationOptions_SetImpersonationType"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetMaxEnvelopeSize( [in, out] MI_DestinationOptions *options, MI_Uint32 sizeInKB );",
            "name": "MI_DestinationOptions_SetMaxEnvelopeSize"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetNumber( [in, out] MI_DestinationOptions *options, const MI_Char *optionName, [in] MI_Uint32 optionValue );",
            "name": "MI_DestinationOptions_SetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetPacketEncoding( [in, out] MI_DestinationOptions *options, const MI_Char *encoding );",
            "name": "MI_DestinationOptions_SetPacketEncoding"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetPacketIntegrity( [in, out] MI_DestinationOptions *options, MI_Boolean integrity );",
            "name": "MI_DestinationOptions_SetPacketIntegrity"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetPacketPrivacy( [in, out] MI_DestinationOptions *options, MI_Boolean privacy );",
            "name": "MI_DestinationOptions_SetPacketPrivacy"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetProxyType( [in, out] MI_DestinationOptions *options, const MI_Char *proxyType );",
            "name": "MI_DestinationOptions_SetProxyType"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetString( [in, out] MI_DestinationOptions *options, const MI_Char *optionName, const MI_Char *optionValue );",
            "name": "MI_DestinationOptions_SetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetTimeout( [in, out] MI_DestinationOptions *options, [in] const MI_Interval *timeout );",
            "name": "MI_DestinationOptions_SetTimeout"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetTransport( [in, out] MI_DestinationOptions *options, const MI_Char *transport );",
            "name": "MI_DestinationOptions_SetTransport"
        },
        {
            "signature": "MI_INLINE MI_Result MI_DestinationOptions_SetUILocale( [in, out] MI_DestinationOptions *options, const MI_Char *locale );",
            "name": "MI_DestinationOptions_SetUILocale"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Filter_Evaluate( [in] const MI_Filter *self, [in] const MI_Instance *instance, [out] MI_Boolean *result );",
            "name": "MI_Filter_Evaluate"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Filter_GetExpression( [in] const MI_Filter *self, const MI_Char **queryLang, const MI_Char **queryExpr );",
            "name": "MI_Filter_GetExpression"
        },
        {
            "signature": "MI_INLINE MI_Result MI_HostedProvider_Close( [in, out] MI_HostedProvider *hostedProvider );",
            "name": "MI_HostedProvider_Close"
        },
        {
            "signature": "MI_INLINE MI_Result MI_HostedProvider_GetApplication( [in] MI_HostedProvider *hostedProvider, [out] MI_Application *application );",
            "name": "MI_HostedProvider_GetApplication"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_AddElement( [in, out] MI_Instance *self, const MI_Char *name, [in, optional] const MI_Value *value, MI_Type type, MI_Uint32 flags );",
            "name": "MI_Instance_AddElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_ClearElement( [in, out] MI_Instance *self, const MI_Char *name );",
            "name": "MI_Instance_ClearElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_ClearElementAt( [in, out] MI_Instance *self, MI_Uint32 index );",
            "name": "MI_Instance_ClearElementAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_Clone( [in] const MI_Instance *self, MI_Instance **newInstance );",
            "name": "MI_Instance_Clone"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_Delete( [in, out] MI_Instance *self );",
            "name": "MI_Instance_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_Destruct( [in, out] MI_Instance *self );",
            "name": "MI_Instance_Destruct"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetClass( [in] const MI_Instance *self, MI_Class **instanceClass );",
            "name": "MI_Instance_GetClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetClassName( [in] const MI_Instance *self, const MI_Char **className );",
            "name": "MI_Instance_GetClassName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetElement( [in] const MI_Instance *self, const MI_Char *name, [out, optional] MI_Value *value, [out, optional] MI_Type *type, [out, optional] MI_Uint32 *flags, [out, optional] MI_Uint32 *index );",
            "name": "MI_Instance_GetElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetElementAt( [in] const MI_Instance *self, MI_Uint32 index, const MI_Char **name, [out, optional] MI_Value *value, [out, optional] MI_Type *type, [out, optional] MI_Uint32 *flags );",
            "name": "MI_Instance_GetElementAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetElementCount( [in] const MI_Instance *self, [out] MI_Uint32 *count );",
            "name": "MI_Instance_GetElementCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetNameSpace( [in] const MI_Instance *self, const MI_Char **nameSpace );",
            "name": "MI_Instance_GetNameSpace"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_GetServerName( [in] const MI_Instance *self, const MI_Char **name );",
            "name": "MI_Instance_GetServerName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_IsA( [in] const MI_Instance *self, [in] const MI_ClassDecl *classDecl, [out] MI_Boolean *flag );",
            "name": "MI_Instance_IsA"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_Normalize( [in, out] MI_Instance **self );",
            "name": "MI_Instance_Normalize"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_SetElement( [out] MI_Instance *self, const MI_Char *name, [in, optional] const MI_Value *value, MI_Type type, MI_Uint32 flags );",
            "name": "MI_Instance_SetElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_SetElementAt( [in, out] MI_Instance *self, MI_Uint32 index, [in, optional] const MI_Value *value, MI_Type type, MI_Uint32 flags );",
            "name": "MI_Instance_SetElementAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_SetNameSpace( [in, out] MI_Instance *self, const MI_Char *nameSpace );",
            "name": "MI_Instance_SetNameSpace"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_Instance_SetServerName( [in, out] MI_Instance *self, const MI_Char *name );",
            "name": "MI_Instance_SetServerName"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_Cancel( [in, out] MI_Operation *operation, MI_CancellationReason reason );",
            "name": "MI_Operation_Cancel"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_Close( [in, out] MI_Operation *operation );",
            "name": "MI_Operation_Close"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_GetClass( [in] MI_Operation *operation, const MI_Class **classResult, [out, optional] MI_Boolean *moreResults, [out, optional] MI_Result *result, const MI_Char **errorMessage, const MI_Instance **completionDetails );",
            "name": "MI_Operation_GetClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_GetIndication( [in] MI_Operation *operation, const MI_Instance **instance, const MI_Char **bookmark, const MI_Char **machineID, [out, optional] MI_Boolean *moreResults, [out, optional] MI_Result *result, const MI_Char **errorMessage, const MI_Instance **completionDetails );",
            "name": "MI_Operation_GetIndication"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_GetInstance( [in] MI_Operation *operation, const MI_Instance **instance, [out, optional] MI_Boolean *moreResults, [out, optional] MI_Result *result, const MI_Char **errorMessage, const MI_Instance **completionDetails );",
            "name": "MI_Operation_GetInstance"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Operation_GetSession( [in] MI_Operation *operation, [out] MI_Session *session );",
            "name": "MI_Operation_GetSession"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_OperationOptions_Clone( [in] const MI_OperationOptions *self, [out] MI_OperationOptions *newOperationOptions );",
            "name": "MI_OperationOptions_Clone"
        },
        {
            "signature": "MI_INLINE void MI_OperationOptions_Delete( [in, out] MI_OperationOptions *options );",
            "name": "MI_OperationOptions_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_DisableChannel( [in, out] MI_OperationOptions *options, [in] MI_Uint32 channel );",
            "name": "MI_OperationOptions_DisableChannel"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_EnableChannel( [in, out] MI_OperationOptions *options, [in] MI_Uint32 channel );",
            "name": "MI_OperationOptions_EnableChannel"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetEnabledChannels( [in] MI_OperationOptions *options, MI_Uint32 *channels, [in] MI_Uint32 bufferLength, [out] MI_Uint32 *channelCount, [out, optional] MI_Uint32 *flags );",
            "name": "MI_OperationOptions_GetEnabledChannels"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetNumber( [in] MI_OperationOptions *options, const MI_Char *optionName, [out] MI_Uint32 *value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_OperationOptions_GetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetOption( [in] MI_OperationOptions *options, const MI_Char *optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_OperationOptions_GetOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetOptionAt( [in] MI_OperationOptions *options, MI_Uint32 index, const MI_Char **optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *flags );",
            "name": "MI_OperationOptions_GetOptionAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetOptionCount( [in] MI_OperationOptions *options, [out] MI_Uint32 *count );",
            "name": "MI_OperationOptions_GetOptionCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetPromptUserMode( [in] MI_OperationOptions *options, [out] MI_CallbackMode *mode );",
            "name": "MI_OperationOptions_GetPromptUserMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetPromptUserRegularMode( [in, out] MI_OperationOptions *options, [out] MI_CallbackMode *mode, [out] MI_Boolean *ackValue );",
            "name": "MI_OperationOptions_GetPromptUserRegularMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetProviderArchitecture( [in] MI_OperationOptions *options, [out] MI_ProviderArchitecture *architecture, [out] MI_Boolean *mustComply );",
            "name": "MI_OperationOptions_GetProviderArchitecture"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetResourceUri( [in] MI_OperationOptions *options, [out] const MI_Char **rUri );",
            "name": "MI_OperationOptions_GetResourceUri"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetResourceUriPrefix( [in] MI_OperationOptions *options, const MI_Char **ruriPrefix );",
            "name": "MI_OperationOptions_GetResourceUriPrefix"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetString( [in] MI_OperationOptions *options, const MI_Char *optionName, const MI_Char **value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_OperationOptions_GetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetTimeout( [in] MI_OperationOptions *options, [out] MI_Interval *timeout );",
            "name": "MI_OperationOptions_GetTimeout"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetUseMachineID( [in] MI_OperationOptions *options, [out] MI_Boolean *machineID );",
            "name": "MI_OperationOptions_GetUseMachineID"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_GetWriteErrorMode( [in] MI_OperationOptions *options, [out] MI_CallbackMode *mode );",
            "name": "MI_OperationOptions_GetWriteErrorMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetCustomOption( [in, out] MI_OperationOptions *options, const MI_Char *optionName, [in] MI_Type optionValueType, [in] const MI_Value *optionValue, MI_Boolean mustComply );",
            "name": "MI_OperationOptions_SetCustomOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetNumber( [in, out] MI_OperationOptions *options, const MI_Char *optionName, [in] MI_Uint32 value, MI_Uint32 flags );",
            "name": "MI_OperationOptions_SetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetPromptUserMode( [in, out] MI_OperationOptions *options, [in] MI_CallbackMode mode );",
            "name": "MI_OperationOptions_SetPromptUserMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetPromptUserRegularMode( [in, out] MI_OperationOptions *options, [in] MI_CallbackMode mode, [in] MI_Boolean ackValue );",
            "name": "MI_OperationOptions_SetPromptUserRegularMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetProviderArchitecture( [in, out] MI_OperationOptions *options, [in] MI_ProviderArchitecture architecture, [in] MI_Boolean mustComply );",
            "name": "MI_OperationOptions_SetProviderArchitecture"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetResourceUri( [in, out] MI_OperationOptions *options, [in] const MI_Char *rUri );",
            "name": "MI_OperationOptions_SetResourceUri"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetResourceUriPrefix( [in, out] MI_OperationOptions *options, const MI_Char *ruriPrefix );",
            "name": "MI_OperationOptions_SetResourceUriPrefix"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetString( [in, out] MI_OperationOptions *options, const MI_Char *optionName, const MI_Char *value, MI_Uint32 flags );",
            "name": "MI_OperationOptions_SetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetTimeout( [in, out] MI_OperationOptions *options, [in] const MI_Interval *timeout );",
            "name": "MI_OperationOptions_SetTimeout"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetUseMachineID( [in, out] MI_OperationOptions *options, [in] MI_Boolean machineID );",
            "name": "MI_OperationOptions_SetUseMachineID"
        },
        {
            "signature": "MI_INLINE MI_Result MI_OperationOptions_SetWriteErrorMode( [in, out] MI_OperationOptions *options, [in] MI_CallbackMode mode );",
            "name": "MI_OperationOptions_SetWriteErrorMode"
        },
        {
            "signature": "MI_INLINE MI_Result MI_ParameterSet_GetMethodReturnType( [in] const MI_ParameterSet *self, [out] MI_Type *returnType, [out] MI_QualifierSet *qualifierSet );",
            "name": "MI_ParameterSet_GetMethodReturnType"
        },
        {
            "signature": "MI_INLINE MI_Result MI_ParameterSet_GetParameter( [in] const MI_ParameterSet *self, [in] const MI_Char *name, [out] MI_Type *parameterType, [out] MI_Char **referenceClass, [out] MI_QualifierSet *qualifierSet, [out] MI_Uint32 *index );",
            "name": "MI_ParameterSet_GetParameter"
        },
        {
            "signature": "MI_INLINE MI_Result MI_ParameterSet_GetParameterAt( [in] const MI_ParameterSet *self, MI_Uint32 index, const MI_Char **name, [out] MI_Type *parameterType, MI_Char **referenceClass, [out] MI_QualifierSet *qualifierSet );",
            "name": "MI_ParameterSet_GetParameterAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_ParameterSet_GetParameterCount( [in] const MI_ParameterSet *self, [out] MI_Uint32 *count );",
            "name": "MI_ParameterSet_GetParameterCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_AddElement( [in, out] MI_PropertySet *self, const MI_Char *name );",
            "name": "MI_PropertySet_AddElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_Clear( [in, out] MI_PropertySet *self );",
            "name": "MI_PropertySet_Clear"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_Clone( [in] const MI_PropertySet *self, MI_PropertySet **newPropertySet );",
            "name": "MI_PropertySet_Clone"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_ContainsElement( [in] const MI_PropertySet *self, const MI_Char *name, [out] MI_Boolean *flag );",
            "name": "MI_PropertySet_ContainsElement"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_Delete( [in, out] MI_PropertySet *self );",
            "name": "MI_PropertySet_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_Destruct( [in, out] MI_PropertySet *self );",
            "name": "MI_PropertySet_Destruct"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_GetElementAt( [in] const MI_PropertySet *self, MI_Uint32 index, const MI_Char **name );",
            "name": "MI_PropertySet_GetElementAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_PropertySet_GetElementCount( [in] const MI_PropertySet *self, [out] MI_Uint32 *count );",
            "name": "MI_PropertySet_GetElementCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_QualifierSet_GetQualifier( [in] const MI_QualifierSet *self, const MI_Char *name, [out] MI_Type *qualifierType, [out] MI_Uint32 *qualifierFlags, [out] MI_Value *qualifierValue, [out] MI_Uint32 *index );",
            "name": "MI_QualifierSet_GetQualifier"
        },
        {
            "signature": "MI_INLINE MI_Result MI_QualifierSet_GetQualifierAt( [in] const MI_QualifierSet *self, MI_Uint32 index, const MI_Char **name, [out] MI_Type *qualifierType, [out] MI_Uint32 *qualifierFlags, [out] MI_Value *qualifierValue );",
            "name": "MI_QualifierSet_GetQualifierAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_QualifierSet_GetQualifierCount( [in] const MI_QualifierSet *self, [out] MI_Uint32 *count );",
            "name": "MI_QualifierSet_GetQualifierCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Serializer_Close( [in, out] MI_Serializer *serializer );",
            "name": "MI_Serializer_Close"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Serializer_SerializeClass( [in, out] MI_Serializer *serializer, MI_Uint32 flags, [in] const MI_Class *classObject, MI_Uint8 *clientBuffer, MI_Uint32 clientBufferLength, [in, out] MI_Uint32 *clientBufferNeeded );",
            "name": "MI_Serializer_SerializeClass"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Serializer_SerializeInstance( [in, out] MI_Serializer *serializer, MI_Uint32 flags, [in] const MI_Instance *instanceObject, MI_Uint8 *clientBuffer, MI_Uint32 clientBufferLength, [in, out] MI_Uint32 *clientBufferNeeded );",
            "name": "MI_Serializer_SerializeInstance"
        },
        {
            "signature": "MI_Result MI_Server_GetSystemName( const MI_Char **systemName );",
            "name": "MI_Server_GetSystemName"
        },
        {
            "signature": "MI_Result MI_Server_GetVersion( MI_Uint32 *version );",
            "name": "MI_Server_GetVersion"
        },
        {
            "signature": "MI_INLINE void MI_Session_AssociatorInstances( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *instanceKey, const MI_Char *assocClass, const MI_Char *resultClass, const MI_Char *role, const MI_Char *resultRole, MI_Boolean keysOnly, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_AssociatorInstances"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Session_Close( [in, out] MI_Session *session, [in, optional] void *completionContext, [in, out] void(* )(void *completionContext) completionCallback );",
            "name": "MI_Session_Close"
        },
        {
            "signature": "MI_INLINE void MI_Session_CreateInstance( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *inboundInstance, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_CreateInstance"
        },
        {
            "signature": "MI_INLINE void MI_Session_DeleteInstance( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *inboundInstance, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_DeleteInstance"
        },
        {
            "signature": "MI_INLINE void MI_Session_EnumerateClasses( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, const MI_Char *className, MI_Boolean classNamesOnly, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_EnumerateClasses"
        },
        {
            "signature": "MI_INLINE void MI_Session_EnumerateInstances( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, const MI_Char *className, MI_Boolean keysOnly, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_EnumerateInstances"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Session_GetApplication( [in] MI_Session *session, [out] MI_Application *application );",
            "name": "MI_Session_GetApplication"
        },
        {
            "signature": "MI_INLINE void MI_Session_GetClass( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, const MI_Char *className, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_GetClass"
        },
        {
            "signature": "MI_INLINE void MI_Session_GetInstance( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *inboundInstance, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_GetInstance"
        },
        {
            "signature": "MI_INLINE void MI_Session_Invoke( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, [in, optional] const MI_Char *namespaceName, [in, optional] const MI_Char *className, [in] const MI_Char *methodName, [in, optional] const MI_Instance *inboundInstance, [in, optional] const MI_Instance *inboundProperties, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_Invoke"
        },
        {
            "signature": "MI_INLINE void MI_Session_ModifyInstance( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *inboundInstance, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_ModifyInstance"
        },
        {
            "signature": "MI_INLINE void MI_Session_QueryInstances( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, const MI_Char *queryDialect, const MI_Char *queryExpression, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_QueryInstances"
        },
        {
            "signature": "MI_INLINE void MI_Session_ReferenceInstances( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, [in] const MI_Instance *instanceKey, const MI_Char *resultClass, const MI_Char *role, MI_Boolean keysOnly, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_ReferenceInstances"
        },
        {
            "signature": "MI_INLINE void MI_Session_Subscribe( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationOptions *options, const MI_Char *namespaceName, const MI_Char *queryDialect, const MI_Char *queryExpression, [in, optional] const MI_SubscriptionDeliveryOptions *deliverOptions, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_Subscribe"
        },
        {
            "signature": "MI_INLINE void MI_Session_TestConnection( [in] MI_Session *session, MI_Uint32 flags, [in, optional] MI_OperationCallbacks *callbacks, [out] MI_Operation *operation );",
            "name": "MI_Session_TestConnection"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_AddDeliveryCredentials( [in, out] MI_SubscriptionDeliveryOptions *self, [in] const MI_UserCredentials *value );",
            "name": "MI_SubscriptionDeliveryOptions_AddDeliveryCredentials"
        },
        {
            "signature": "MI_INLINE MI_Result MI_INLINE_CALL MI_SubscriptionDeliveryOptions_Clone( [in] const MI_SubscriptionDeliveryOptions *self, [out] MI_SubscriptionDeliveryOptions *newSubscriptionDeliveryOptions );",
            "name": "MI_SubscriptionDeliveryOptions_Clone"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_Delete( [in, out] MI_SubscriptionDeliveryOptions *self );",
            "name": "MI_SubscriptionDeliveryOptions_Delete"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetBookmark( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char **value );",
            "name": "MI_SubscriptionDeliveryOptions_GetBookmark"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetCredentialsAt( [in] MI_SubscriptionDeliveryOptions *self, MI_Uint32 index, const MI_Char **optionName, [out] MI_UserCredentials *credentials, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetCredentialsAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetCredentialsCount( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Uint32 *count );",
            "name": "MI_SubscriptionDeliveryOptions_GetCredentialsCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetCredentialsPasswordAt( [in] MI_SubscriptionDeliveryOptions *self, MI_Uint32 index, const MI_Char **optionName, MI_Char *password, [in] MI_Uint32 bufferLength, [out] MI_Uint32 *passwordLength, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetCredentialsPasswordAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetDateTime( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [out] MI_Datetime *value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetDateTime"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetDeliveryDestination( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char **value );",
            "name": "MI_SubscriptionDeliveryOptions_GetDeliveryDestination"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetDeliveryPortNumber( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Uint32 *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetDeliveryPortNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetDeliveryRetryAttempts( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Uint32 *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetDeliveryRetryAttempts"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetDeliveryRetryInterval( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetDeliveryRetryInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetExpirationTime( [in, out] MI_SubscriptionDeliveryOptions *self, [out] MI_Datetime *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetExpirationTime"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetHeartbeatInterval( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetHeartbeatInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetInterval( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [out] MI_Interval *value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetMaximumLatency( [in] MI_SubscriptionDeliveryOptions *self, [out] MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_GetMaximumLatency"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetNumber( [in, out] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [out] MI_Uint32 *value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetOption( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetOption"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetOptionAt( [in] MI_SubscriptionDeliveryOptions *self, MI_Uint32 index, const MI_Char **optionName, [out] MI_Value *value, [out] MI_Type *type, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetOptionAt"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetOptionCount( [in] MI_SubscriptionDeliveryOptions *self, [out, optional] MI_Uint32 *count );",
            "name": "MI_SubscriptionDeliveryOptions_GetOptionCount"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_GetString( [in] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, const MI_Char **value, [out, optional] MI_Uint32 *index, [out, optional] MI_Uint32 *flags );",
            "name": "MI_SubscriptionDeliveryOptions_GetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetBookmark( [in, out] MI_SubscriptionDeliveryOptions *self, const MI_Char *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetBookmark"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetDateTime( [in, out] MI_SubscriptionDeliveryOptions *self, [in] const MI_Char *optionName, [in] const MI_Datetime *value, MI_Uint32 flags );",
            "name": "MI_SubscriptionDeliveryOptions_SetDateTime"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetDeliveryDestination( [in, out] MI_SubscriptionDeliveryOptions *self, const MI_Char *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetDeliveryDestination"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetDeliveryPortNumber( [in, out] MI_SubscriptionDeliveryOptions *self, [in] MI_Uint32 value );",
            "name": "MI_SubscriptionDeliveryOptions_SetDeliveryPortNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetDeliveryRetryAttempts( [in, out] MI_SubscriptionDeliveryOptions *self, [in] MI_Uint32 value );",
            "name": "MI_SubscriptionDeliveryOptions_SetDeliveryRetryAttempts"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetDeliveryRetryInterval( [in, out] MI_SubscriptionDeliveryOptions *self, [in] const MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetDeliveryRetryInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetExpirationTime( [in, out] MI_SubscriptionDeliveryOptions *self, [in] MI_Datetime *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetExpirationTime"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetHeartbeatInterval( [in, out] MI_SubscriptionDeliveryOptions *self, [in] MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetHeartbeatInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetInterval( [in, out] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [in] const MI_Interval *value, MI_Uint32 flags );",
            "name": "MI_SubscriptionDeliveryOptions_SetInterval"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetMaximumLatency( [in, out] MI_SubscriptionDeliveryOptions *self, [in] MI_Interval *value );",
            "name": "MI_SubscriptionDeliveryOptions_SetMaximumLatency"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetNumber( [in, out] MI_SubscriptionDeliveryOptions *self, const MI_Char *optionName, [in] MI_Uint32 value, MI_Uint32 flags );",
            "name": "MI_SubscriptionDeliveryOptions_SetNumber"
        },
        {
            "signature": "MI_INLINE MI_Result MI_SubscriptionDeliveryOptions_SetString( [in, out] MI_SubscriptionDeliveryOptions *self, [in] const MI_Char *optionName, [in] const MI_Char *value, MI_Uint32 flags );",
            "name": "MI_SubscriptionDeliveryOptions_SetString"
        },
        {
            "signature": "MI_INLINE MI_Result MI_Utilities_CimErrorFromErrorCode( MI_Uint32 error, [in] const MI_Char *errorType, [in] const MI_Char *errorMessage, MI_Instance **cimError );",
            "name": "MI_Utilities_CimErrorFromErrorCode"
        },
        {
            "signature": "MI_INLINE MI_ErrorCategory MI_Utilities_MapErrorToMiErrorCategory( MI_Char *errorType, MI_Uint32 error );",
            "name": "MI_Utilities_MapErrorToMiErrorCategory"
        }
    ]
}